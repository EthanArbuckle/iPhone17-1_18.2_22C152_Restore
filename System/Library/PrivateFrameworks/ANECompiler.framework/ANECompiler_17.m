void anonymous namespace'::CustomDialectAsmParser::~CustomDialectAsmParser(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  uint64_t vars8;

  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getNameLoc(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(unsigned char *)(a1 + 24) = 1;
  mlir::detail::Parser::emitError(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getBuilder(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getCurrentLocation(uint64_t a1)
{
  return MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*(void *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(void *)(*(void *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v3 = "expected '->'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '{'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '}'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ':'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ','";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '='";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '<'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '>'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '?'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '+'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '*'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '|'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11) {
    return 0;
  }
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v7;
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(void *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseBase64Bytes(void *a1, unint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(void *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      long long v38 = *(_OWORD *)(v6 + 64);
      unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((void *)&v38 + 1)) {
        unint64_t v8 = *((void *)&v38 + 1);
      }
      else {
        unint64_t v8 = first_not_of;
      }
      unint64_t v9 = *((void *)&v38 + 1) - v8;
      *(void *)&long long v41 = v38 + v8;
      *((void *)&v41 + 1) = *((void *)&v38 + 1) - v8;
      uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((void *)&v41 + 1)) {
        uint64_t v11 = last_not_of + 1;
      }
      else {
        uint64_t v11 = *((void *)&v41 + 1);
      }
      unint64_t v12 = *((void *)&v41 + 1) - v9 + v11;
      if (*((void *)&v41 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v41 + 1);
      }
      llvm::decodeBase64(v41, v13, a2, &v37);
      if (v37)
      {
        v35 = v37;
        v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        __int16 v40 = 260;
        v39[0] = &v36;
        (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
        uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((void)v41) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        }
        if (v49)
        {
          v17 = __p;
          if (__p)
          {
            v18 = v48;
            v19 = __p;
            if (v48 != __p)
            {
              do
                v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              v19 = __p;
            }
            v48 = v17;
            operator delete(v19);
          }
          v20 = v45;
          if (v45)
          {
            v21 = v46;
            v22 = v45;
            if (v46 != v45)
            {
              do
              {
                uint64_t v24 = *--v21;
                uint64_t v23 = v24;
                void *v21 = 0;
                if (v24) {
                  MEMORY[0x21667D390](v23, 0x1000C8077774924);
                }
              }
              while (v21 != v20);
              v22 = v45;
            }
            v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44) {
            free(v43);
          }
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (v35) {
          (*(void (**)(void *))(*v35 + 8))(v35);
        }
        if (v37) {
          (*(void (**)(void *))(*v37 + 8))(v37);
        }
        return v16;
      }
      uint64_t v5 = a1[2];
      uint64_t v6 = *(void *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    uint64_t v33 = *(void *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(void *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  __int16 v40 = 259;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((void)v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v49)
  {
    v25 = __p;
    if (__p)
    {
      v26 = v48;
      v27 = __p;
      if (v48 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v48 = v25;
      operator delete(v27);
    }
    v28 = v45;
    if (v45)
    {
      v29 = v46;
      v30 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v32 = *--v29;
          uint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            MEMORY[0x21667D390](v31, 0x1000C8077774924);
          }
        }
        while (v29 != v28);
        v30 = v45;
      }
      v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44) {
      free(v43);
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = "expected '('";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ')'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '['";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ']'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '...'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseFloat(void *a1, double *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 + 8);
  int v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    uint64_t v7 = *(void *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(void *)(v7 + 72) = v45;
    uint64_t v5 = *(void *)(a1[2] + 8);
  }
  long long v42 = *(_OWORD *)(v5 + 56);
  uint64_t v43 = *(void *)(v5 + 72);
  OCGSize = (llvm::APFloatBase *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v42);
  if (v42 == 10)
  {
    BOOL v17 = v6 == 24;
    LOBYTE(v44) = 0;
    char v47 = 0;
    uint64_t v18 = a1[2];
    v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(OCGSize);
    v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (MirInfoChannelAssignment *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      uint64_t v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v21 + 8) + 8), (uint64_t)&v39);
      uint64_t v22 = *(void *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(void *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v44);
      uint64_t v16 = 1;
      if (!v47) {
        return v16;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (!v47) {
        return v16;
      }
    }
    v37 = (void *)*((void *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v44 + 8));
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
    }
  }
  else
  {
    unint64_t v9 = OCGSize;
    if (v42 == 9)
    {
      uint64_t FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        double v12 = *(double *)&FloatingPointValue;
        uint64_t v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v13 + 8) + 8), (uint64_t)&v44);
        uint64_t v14 = *(void *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(void *)(v14 + 72) = v45;
        double v15 = -v12;
        if (v6 != 24) {
          double v15 = v12;
        }
        *a2 = v15;
        return 1;
      }
      *(void *)&long long v39 = "floating point value too large";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, v9, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        uint64_t v31 = __p;
        if (__p)
        {
          uint64_t v32 = v52;
          uint64_t v33 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            uint64_t v33 = __p;
          }
          v52 = v31;
          operator delete(v33);
        }
        v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        v34 = v50;
        v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          uint64_t v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48) {
            free(v46);
          }
          return v16;
        }
        do
        {
          uint64_t v36 = *--v34;
          uint64_t v35 = v36;
          void *v34 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v34 != v26);
LABEL_43:
        v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(void *)&long long v39 = "expected floating point literal";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, OCGSize, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        uint64_t v23 = __p;
        if (__p)
        {
          uint64_t v24 = v52;
          v25 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v52 = v23;
          operator delete(v25);
        }
        v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        v27 = v50;
        v28 = v49;
        if (v50 == v49) {
          goto LABEL_44;
        }
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(void *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeyword(void *a1, void **a2, const char *a3, void ***a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  v28[0] = a2;
  v28[1] = a3;
  uint64_t v5 = a1[2];
  if (*(_DWORD *)(*(void *)(v5 + 8) + 56) == 2) {
    return mlir::detail::Parser::codeCompleteExpectedTokens(v5, (uint64_t)v28, 1);
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(void *, void **, const char *))(*a1 + 376))(a1, a2, a3)) {
    return 1;
  }
  v26 = "expected '";
  __int16 v27 = 259;
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
  if (v33)
  {
    __int16 v32 = 261;
    uint64_t v29 = a2;
    uint64_t v30 = a3;
    mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
    if (v33)
    {
      LODWORD(v29) = 3;
      uint64_t v30 = "'";
      uint64_t v31 = 1;
      double v12 = &v29;
      uint64_t v13 = (char *)v35;
      if (v36 >= v37)
      {
        unint64_t v24 = v36 + 1;
        if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
        {
          int64_t v25 = (char *)&v29 - (unsigned char *)v35;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          uint64_t v13 = (char *)v35;
          double v12 = (void ***)((char *)v35 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          double v12 = &v29;
          uint64_t v13 = (char *)v35;
        }
      }
      uint64_t v14 = &v13[24 * v36];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = v12[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++v36;
      if (v33) {
        mlir::Diagnostic::operator<<((uint64_t)v34, a4);
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = __p;
    if (__p)
    {
      BOOL v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          BOOL v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      long long v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      uint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v6;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  v12[0] = __s2;
  v12[1] = __n;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(void *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n)) {
      return 0;
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    uint64_t v11 = *(void *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(void *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2) {
    return mlir::detail::Parser::codeCompleteOptionalTokens(v6, (uint64_t)v12, 1);
  }
  uint64_t result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  int v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    BOOL result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  uint64_t v8 = *(void *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v8 + 8) + 8), (uint64_t)&v10);
  uint64_t v9 = *(void *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(void *)(v9 + 72) = v11;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(v8 + 8);
  int v10 = *((_DWORD *)v9 + 14);
  if (v10 != 12 && v10 != 3)
  {
    if (v10 == 2)
    {
      return mlir::detail::Parser::codeCompleteOptionalTokens(v8, a3, a4);
    }
    uint64_t result = mlir::Token::isKeyword((mlir::Token *)(v9 + 7));
    if (!result) {
      return result;
    }
    uint64_t v9 = *(void **)(*(void *)(a1 + 16) + 8);
  }
  long long v13 = (const void *)v9[8];
  size_t v14 = v9[9];
  if (a4)
  {
    if (v14)
    {
      uint64_t v15 = 16 * a4;
      uint64_t v16 = a3;
      while (*(void *)(v16 + 8) != v14 || memcmp(*(const void **)v16, v13, v14))
      {
        v16 += 16;
        v15 -= 16;
        if (!v15) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v17 = 16 * a4;
      uint64_t v16 = a3;
      while (*(void *)(v16 + 8))
      {
        v16 += 16;
        v17 -= 16;
        if (!v17)
        {
LABEL_22:
          uint64_t v16 = a3 + 16 * a4;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v16 = a3;
  }
  if (a4 == (v16 - a3) >> 4) {
    return 0;
  }
  *a2 = v13;
  a2[1] = v14;
  uint64_t v18 = *(void *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v18 + 8) + 8), (uint64_t)&v20);
  uint64_t v19 = *(void *)(v18 + 8);
  *(_OWORD *)(v19 + 56) = v20;
  *(void *)(v19 + 72) = v21;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  __src = 0;
  size_t __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 384))(a1, &__src)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a2);
  }
  uint64_t v4 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v11 = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  size_t v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v8 = __len | 7;
    }
    size_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v11 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_13:
  }
    memmove(p_dst, v4, v5);
  *((unsigned char *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0) {
LABEL_15:
  }
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  uint64_t v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(*(void *)(v6 + 8) + 56) == 5)
  {
    uint64_t v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
    *a2 = v7;
    return v7 != 0;
  }
  else
  {
    return a4(a5);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, void *a2, void *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  uint64_t v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v2 + 1) + 56) == 20) {
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  }
  else {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDictWithKeyword(void *a1, mlir::NamedAttrList *a2)
{
  if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t))(*a1 + 376))(a1, "attributes", 10)) {
    return 1;
  }
  uint64_t v4 = (mlir::detail::Parser *)a1[2];

  return mlir::detail::Parser::parseAttributeDict(v4, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalSymbolName(void *a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1[2] + 8);
  long long v16 = *(_OWORD *)(v2 + 56);
  uint64_t v17 = *(void *)(v2 + 72);
  if (v16 != 4) {
    return 0;
  }
  size_t v5 = (mlir::StringAttr **)(*(uint64_t (**)(void *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  __int16 v15 = 260;
  *(void *)&long long v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v6 + 8) + 8), (uint64_t)&v13);
  uint64_t v7 = *(void *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(void *)(v7 + 72) = v14;
  uint64_t v8 = *(void *)(*(void *)(a1[2] + 8) + 128);
  if (v8)
  {
    uint64_t v9 = mlir::SymbolRefAttr::get(*a2);
    *(void *)&long long v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((void *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  size_t v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v5 + 1) + 56) == 8)
  {
    uint64_t v6 = mlir::detail::Parser::parseType(v5);
    *a2 = v6;
    return v6 != 0;
  }
  else
  {
    return a3(a4);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v7 = "expected ':'";
  __int16 v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7)) {
    return 0;
  }
  uint64_t v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = "expected ':'";
  __int16 v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6)) {
    return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (uint64_t v6 = (void *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(void *)(a1 + 16), v6, (uint64_t)&v37, (uint64_t)a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    __int16 v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37) {
      goto LABEL_11;
    }
    LODWORD(v33) = 3;
    v34 = "dialect '";
    uint64_t v35 = 9;
    long long v8 = &v33;
    uint64_t v9 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v29 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        uint64_t v9 = (char *)v39;
        long long v8 = (void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        long long v8 = &v33;
        uint64_t v9 = (char *)v39;
      }
    }
    uint64_t v10 = &v9[24 * v40];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v40;
    if (!v37) {
      goto LABEL_11;
    }
    double v12 = *(void ***)(a2 + 8);
    long long v13 = *(const char **)(a2 + 16);
    __int16 v36 = 261;
    uint64_t v33 = v12;
    v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      v34 = "' does not expect resource handles";
      uint64_t v35 = 34;
      uint64_t v14 = &v33;
      __int16 v15 = (char *)v39;
      if (v40 >= v41)
      {
        unint64_t v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          int64_t v30 = (char *)&v33 - (unsigned char *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          __int16 v15 = (char *)v39;
          uint64_t v14 = (void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          uint64_t v14 = &v33;
          __int16 v15 = (char *)v39;
        }
      }
      long long v16 = &v15[24 * v40];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v40;
      uint64_t v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      uint64_t v19 = __p;
      if (__p)
      {
        long long v20 = v46;
        uint64_t v21 = __p;
        if (v46 != __p)
        {
          do
            long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        v46 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v43;
      if (v43)
      {
        uint64_t v23 = v44;
        unint64_t v24 = v43;
        if (v44 != v43)
        {
          do
          {
            uint64_t v26 = *--v23;
            uint64_t v25 = v26;
            *uint64_t v23 = 0;
            if (v26) {
              MEMORY[0x21667D390](v25, 0x1000C8077774924);
            }
          }
          while (v23 != v22);
          unint64_t v24 = v43;
        }
        uint64_t v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42) {
        free(v39);
      }
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(void *)(*(void *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::popCyclicParsing(uint64_t result)
{
  uint64_t v1 = *(int32x2_t **)(*(void *)(result + 16) + 8);
  __int32 v2 = v1[13].i32[0];
  if (v2)
  {
    int32x2_t v3 = v1[11];
    uint64_t v4 = v1[15].u32[0];
    uint64_t v5 = *(void *)(*(void *)&v1[14] + 8 * v4 - 8);
    __int32 v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *long long v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(*(void *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2 = *(void *)(*((void *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(void *)(v2 + 72)) {
    return mlir::AsmParser::parseKeyword(a1, a2);
  }
  *(void *)a2 = &byte_211F4AA5D;
  *((void *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(result + 8);
  if (*(_DWORD *)(v4 + 56) == 2 && !*(void *)(v4 + 72)) {
    return mlir::detail::Parser::codeCompleteExpectedTokens(result, a2, a3);
  }
  return result;
}

uint64_t anonymous namespace'::CustomDialectAsmParser::getFullSymbolSpec(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  return *((void *)this + 4);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      unint64_t v22 = 77;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      __int16 v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = v1[392];
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    __int32 v6 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v4) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == v4)
      {
        __int32 v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  __int32 v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_9:
  if (v6 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

uint64_t ***mlir::Lexer::Lexer(uint64_t ***result, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = 0;
  result[3] = 0;
  result[5] = 0;
  uint64_t v4 = **a2;
  __int16 v5 = *(uint64_t ***)(v4 + 8);
  __int32 v6 = (uint64_t **)(*(void *)(v4 + 16) - (void)v5);
  result[2] = v5;
  result[3] = v6;
  result[4] = v5;
  if (a4) {
    result[5] = *(uint64_t ***)(a4 + 8);
  }
  return result;
}

uint64_t mlir::Lexer::getEncodedSourceLocation(uint64_t a1, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  __int16 v5 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  unsigned int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v5, a2);
  uint64_t v7 = v2 - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(v5, LineNumber) + 1;
  int v8 = *(mlir::StringAttr **)(a1 + 8);
  int v10 = (const char *)(*(uint64_t (**)(void))(**(void **)*v4 + 16))(*(void *)*v4);

  return mlir::FileLineColLoc::get(v8, v10, v9, LineNumber, v7);
}

void mlir::Lexer::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v8 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  unint64_t v9 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  unsigned int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v9, a2);
  uint64_t v11 = a2 - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(v9, LineNumber) + 1;
  uint64_t v12 = *(void *)*v8;
  unint64_t v13 = *(mlir::StringAttr **)(a1 + 8);
  unint64_t v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  uint64_t v16 = mlir::FileLineColLoc::get(v13, v14, v15, LineNumber, v11);
  mlir::emitError(v16, a3, (uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v33)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      unint64_t v18 = v32;
      uint64_t v19 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      __int16 v32 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v29;
    if (v29)
    {
      uint64_t v21 = v30;
      unint64_t v22 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        unint64_t v22 = v29;
      }
      int64_t v30 = v20;
      operator delete(v22);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  uint64_t v25 = *(void *)(a1 + 32) - (void)a2;
  *(_DWORD *)a4 = 1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = v25;
}

void mlir::Lexer::lexToken(mlir::Lexer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (const char *)*((void *)this + 4);
  uint64_t v3 = (const char *)*((void *)this + 5);
  if (v4 != v3)
  {
    do
    {
      __int32 v6 = v4 + 1;
      *((void *)this + 4) = v4 + 1;
      unsigned int v7 = *v4;
      switch(*v4)
      {
        case 0:
          if (v4 != (const char *)(*((void *)this + 2) + *((void *)this + 3))) {
            goto LABEL_4;
          }
          *(_DWORD *)a2 = 0;
          goto LABEL_64;
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
          goto LABEL_4;
        case 0x21:
        case 0x25:
        case 0x5E:
          goto LABEL_29;
        case 0x22:
          mlir::Lexer::lexString(this, v4, a2);
          return;
        case 0x23:
          if (*v6 == 45 && v4[2] == 125)
          {
            *((void *)this + 4) = v4 + 3;
            int v12 = 33;
            goto LABEL_56;
          }
LABEL_29:
          mlir::Lexer::lexPrefixedIdentifier(this, v4, a2);
          return;
        case 0x28:
          int v13 = 21;
          goto LABEL_63;
        case 0x29:
          int v13 = 28;
          goto LABEL_63;
        case 0x2A:
          int v13 = 30;
          goto LABEL_63;
        case 0x2B:
          int v13 = 25;
          goto LABEL_63;
        case 0x2C:
          int v13 = 16;
          goto LABEL_63;
        case 0x2D:
          if (*v6 == 62)
          {
            *((void *)this + 4) = v4 + 2;
            *(_DWORD *)a2 = 13;
            *(void *)(a2 + 8) = v4;
            *(void *)(a2 + 16) = 2;
            return;
          }
          int v13 = 24;
          goto LABEL_63;
        case 0x2E:
          if (v6 != (const char *)(*((void *)this + 2) + *((void *)this + 3)) && *v6 == 46 && v4[2] == 46)
          {
            *((void *)this + 4) = v4 + 3;
            int v12 = 17;
            goto LABEL_56;
          }
          v14[0] = "expected three consecutive dots for an ellipsis";
          __int16 v15 = 259;
          mlir::Lexer::emitError((uint64_t)this, v6, (uint64_t)v14, a2);
          return;
        case 0x2F:
          if (*v6 != 47) {
            goto LABEL_70;
          }
          int v8 = (char *)(v4 + 2);
          break;
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
          mlir::Lexer::lexNumber((uint64_t)this, v4, a2);
          return;
        case 0x3A:
          int v13 = 15;
          goto LABEL_63;
        case 0x3C:
          int v13 = 23;
          goto LABEL_63;
        case 0x3D:
          int v13 = 18;
          goto LABEL_63;
        case 0x3E:
          int v13 = 19;
          goto LABEL_63;
        case 0x3F:
          int v13 = 26;
          goto LABEL_63;
        case 0x40:
          mlir::Lexer::lexAtIdentifier(this, v4, a2);
          return;
        case 0x5B:
          int v13 = 22;
          goto LABEL_63;
        case 0x5D:
          int v13 = 29;
          goto LABEL_63;
        case 0x5F:
          goto LABEL_67;
        case 0x7B:
          if (*v6 == 45 && v4[2] == 35)
          {
            *((void *)this + 4) = v4 + 3;
            int v12 = 32;
LABEL_56:
            *(_DWORD *)a2 = v12;
            *(void *)(a2 + 8) = v4;
            *(void *)(a2 + 16) = 3;
          }
          else
          {
            int v13 = 20;
LABEL_63:
            *(_DWORD *)a2 = v13;
LABEL_64:
            *(void *)(a2 + 8) = v4;
            *(void *)(a2 + 16) = 1;
          }
          return;
        case 0x7C:
          int v13 = 31;
          goto LABEL_63;
        case 0x7D:
          int v13 = 27;
          goto LABEL_63;
        default:
          if ((v7 & 0x80000000) != 0) {
            int v11 = __maskrune(v7, 0x100uLL);
          }
          else {
            int v11 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v7 + 60) & 0x100;
          }
          if (v11)
          {
LABEL_67:
            mlir::Lexer::lexBareIdentifierOrKeyword(this, (unint64_t)v4, a2);
          }
          else
          {
LABEL_70:
            v14[0] = "unexpected character";
            __int16 v15 = 259;
            mlir::Lexer::emitError((uint64_t)this, v4, (uint64_t)v14, a2);
          }
          return;
      }
      do
      {
        while (1)
        {
          __int32 v6 = v8++;
          *((void *)this + 4) = v8;
          int v9 = *v6;
          if (!*v6) {
            break;
          }
          if (v9 == 10 || v9 == 13)
          {
            ++v6;
            goto LABEL_4;
          }
        }
      }
      while (v6 != (const char *)(*((void *)this + 2) + *((void *)this + 3)));
      *((void *)this + 4) = v6;
LABEL_4:
      uint64_t v4 = v6;
    }
    while (v6 != v3);
  }
  *(_DWORD *)a2 = 2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
}

uint64_t mlir::Lexer::lexBareIdentifierOrKeyword@<X0>(mlir::Lexer *this@<X0>, unint64_t __s1@<X1>, uint64_t a3@<X8>)
{
  __int32 v6 = (unsigned __int8 *)*((void *)this + 4);
  uint64_t v7 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v12 = (char)*v6;
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t result = __maskrune(v12, 0x100uLL);
      __int32 v6 = (unsigned __int8 *)*((void *)this + 4);
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = *(_DWORD *)(v7 + 4 * v12 + 60) & 0x100;
      if (result) {
        goto LABEL_6;
      }
    }
    uint64_t v14 = *v6;
    if ((char)*v6 < 0 || (*(_DWORD *)(v7 + 4 * v14 + 60) & 0x400) == 0)
    {
      unsigned int v8 = v14 - 36;
      BOOL v9 = v8 > 0x3B;
      uint64_t v10 = (1 << v8) & 0x800000000000401;
      if (v9 || v10 == 0) {
        break;
      }
    }
LABEL_6:
    *((void *)this + 4) = ++v6;
  }
  size_t v15 = (size_t)&v6[-__s1];
  uint64_t v16 = (uint64_t)&v6[-__s1 - 2];
  if ((unint64_t)&v6[-__s1] < 2) {
    goto LABEL_30;
  }
  int v17 = *(unsigned __int8 *)__s1;
  if (v17 == 105)
  {
    unint64_t v18 = (const char *)(__s1 + 1);
    uint64_t v19 = (char *)&v6[~__s1];
    while (*(unsigned __int8 *)v18 - 48 < 0xA)
    {
      ++v18;
      if (!--v19)
      {
LABEL_27:
        int v22 = 12;
        goto LABEL_31;
      }
    }
  }
  if (v15 >= 3)
  {
    if (*(unsigned char *)(__s1 + 1) == 105 && (v17 == 117 || v17 == 115))
    {
      uint64_t v20 = (const char *)(__s1 + 2);
      uint64_t v21 = v16;
      while (*(unsigned __int8 *)v20 - 48 < 0xA)
      {
        ++v20;
        if (!--v21) {
          goto LABEL_27;
        }
      }
    }
    switch(v16)
    {
      case 0:
        goto LABEL_29;
      case 1:
        if (*(_WORD *)__s1 == 12646 && *(unsigned char *)(__s1 + 2) == 54)
        {
          int v22 = 44;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13158 && *(unsigned char *)(__s1 + 2) == 50)
        {
          int v22 = 45;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13926 && *(unsigned char *)(__s1 + 2) == 52)
        {
          int v22 = 46;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 14438 && *(unsigned char *)(__s1 + 2) == 48)
        {
          int v22 = 47;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28518 && *(unsigned char *)(__s1 + 2) == 114)
        {
          int v22 = 56;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28524 && *(unsigned char *)(__s1 + 2) == 99)
        {
          int v22 = 59;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 24941 && *(unsigned char *)(__s1 + 2) == 120)
        {
          int v22 = 60;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 26989 && *(unsigned char *)(__s1 + 2) == 110)
        {
          int v22 = 62;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28525 && *(unsigned char *)(__s1 + 2) == 100)
        {
          int v22 = 63;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 2:
        switch(*(_DWORD *)__s1)
        {
          case 0x36316662:
            int v22 = 38;
            break;
          case 0x38323166:
            int v22 = 53;
            break;
          case 0x636E7566:
            int v22 = 57;
            break;
          case 0x656E6F6E:
            int v22 = 64;
            break;
          case 0x657A6973:
            int v22 = 66;
            break;
          case 0x70657473:
            int v22 = 68;
            break;
          case 0x32336674:
            int v22 = 72;
            break;
          case 0x65757274:
            int v22 = 74;
            break;
          case 0x65707974:
            int v22 = 76;
            break;
          case 0x74696E75:
            int v22 = 77;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 3:
        if (*(_DWORD *)__s1 == 1634890337 && *(unsigned char *)(__s1 + 4) == 121)
        {
          int v22 = 36;
        }
        else if (*(_DWORD *)__s1 == 1936614756 && *(unsigned char *)(__s1 + 4) == 101)
        {
          int v22 = 41;
        }
        else if (*(_DWORD *)__s1 == 1936482662 && *(unsigned char *)(__s1 + 4) == 101)
        {
          int v22 = 54;
        }
        else if (*(_DWORD *)__s1 == 1701080681 && *(unsigned char *)(__s1 + 4) == 120)
        {
          int v22 = 58;
        }
        else
        {
          uint64_t result = memcmp((const void *)__s1, "tuple", v15);
          if (result) {
            goto LABEL_30;
          }
          int v22 = 75;
        }
        goto LABEL_31;
      case 4:
        if (*(_DWORD *)__s1 == 893728870 && *(_WORD *)(__s1 + 4) == 12877)
        {
          int v22 = 48;
        }
        else if (*(_DWORD *)__s1 == 1919772013 && *(_WORD *)(__s1 + 4) == 26213)
        {
          int v22 = 61;
        }
        else if (*(_DWORD *)__s1 == 1936090735 && *(_WORD *)(__s1 + 4) == 29797)
        {
          int v22 = 65;
        }
        else if (*(_DWORD *)__s1 == 1918988403 && *(_WORD *)(__s1 + 4) == 25971)
        {
          int v22 = 67;
        }
        else if (*(_DWORD *)__s1 == 1651341683 && *(_WORD *)(__s1 + 4) == 27759)
        {
          int v22 = 70;
        }
        else if (*(_DWORD *)__s1 == 1936614772 && *(_WORD *)(__s1 + 4) == 29295)
        {
          int v22 = 71;
        }
        else
        {
          uint64_t result = memcmp((const void *)__s1, "vector", v15);
          if (result) {
            goto LABEL_30;
          }
          int v22 = 78;
        }
        goto LABEL_31;
      case 5:
        if (*(_DWORD *)__s1 == 1818846563 && *(_DWORD *)(__s1 + 3) == 1986618476)
        {
          int v22 = 39;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1886220131 && *(_DWORD *)(__s1 + 3) == 2019912816)
        {
          int v22 = 40;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1769108595 && *(_DWORD *)(__s1 + 3) == 1684366441)
        {
          int v22 = 69;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 6:
        switch(*(void *)__s1)
        {
          case 0x74636E6974736964:
            int v22 = 43;
            break;
          case 0x4E46334D34453866:
            int v22 = 49;
            break;
          case 0x766964726F6F6C66:
            int v22 = 55;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 8:
        if (*(void *)__s1 == 0x6D5F656E69666661 && *(_WORD *)(__s1 + 8) == 28769)
        {
          int v22 = 34;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x735F656E69666661 && *(_WORD *)(__s1 + 8) == 29797)
        {
          int v22 = 35;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x7475626972747461 && *(_WORD *)(__s1 + 8) == 29541)
        {
          int v22 = 37;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x4E46324D35453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          int v22 = 50;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x4E46334D34453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          int v22 = 51;
          goto LABEL_31;
        }
        break;
      case 11:
        if (*(void *)__s1 != 0x3142334D34453866 || *(void *)(__s1 + 5) != 0x5A554E4631314233) {
          goto LABEL_30;
        }
        int v22 = 52;
        goto LABEL_31;
      case 12:
        if (*(void *)__s1 != 0x65725F65736E6564 || *(void *)(__s1 + 6) != 0x656372756F736572) {
          goto LABEL_30;
        }
        int v22 = 42;
        goto LABEL_31;
      default:
        goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v15 != 2) {
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = memcmp((const void *)__s1, "to", v15);
  if (result) {
LABEL_30:
  }
    int v22 = 3;
  else {
    int v22 = 73;
  }
LABEL_31:
  *(_DWORD *)a3 = v22;
  *(void *)(a3 + 8) = __s1;
  *(void *)(a3 + 16) = v15;
  return result;
}

void mlir::Lexer::lexAtIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  __int32 v6 = (char *)*((void *)this + 4);
  *((void *)this + 4) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 != 34)
  {
    if ((v7 & 0x80000000) != 0)
    {
      int v19 = __maskrune(*v6, 0x100uLL);
      BOOL v9 = (unsigned __int8 *)*((void *)this + 4);
      if (v7 == 95 || v19 != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v9 = (unsigned __int8 *)*((void *)this + 4);
      if (v7 == 95 || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v7 + 60) & 0x100) != 0)
      {
LABEL_9:
        uint64_t v11 = MEMORY[0x263EF8318];
        while (1)
        {
          unsigned int v16 = (char)*v9;
          if ((v16 & 0x80000000) != 0)
          {
            int v17 = __maskrune(v16, 0x100uLL);
            BOOL v9 = (unsigned __int8 *)*((void *)this + 4);
            if (v17) {
              goto LABEL_14;
            }
          }
          else if ((*(_DWORD *)(v11 + 4 * v16 + 60) & 0x100) != 0)
          {
            goto LABEL_14;
          }
          uint64_t v18 = *v9;
          if ((char)*v9 < 0 || (*(_DWORD *)(v11 + 4 * v18 + 60) & 0x400) == 0)
          {
            unsigned int v12 = v18 - 36;
            BOOL v13 = v12 > 0x3B;
            uint64_t v14 = (1 << v12) & 0x800000000000401;
            if (v13 || v14 == 0)
            {
              *(_DWORD *)a3 = 4;
              int64_t v8 = v9 - (unsigned __int8 *)a2;
LABEL_24:
              *(void *)(a3 + 8) = a2;
              goto LABEL_25;
            }
          }
LABEL_14:
          *((void *)this + 4) = ++v9;
        }
      }
    }
    *(void *)&long long v21 = "@ identifier expected to start with letter or '_'";
    __int16 v23 = 259;
    mlir::Lexer::emitError((uint64_t)this, (const char *)v9 - 1, (uint64_t)&v21, a3);
    return;
  }
  mlir::Lexer::lexString(this, v6 + 1, (uint64_t)&v21);
  if (v21 != 1)
  {
    int64_t v8 = *((void *)this + 4) - (void)a2;
    *(_DWORD *)a3 = 4;
    goto LABEL_24;
  }
  *(_OWORD *)a3 = v21;
  int64_t v8 = v22;
LABEL_25:
  *(void *)(a3 + 16) = v8;
}

void mlir::Lexer::lexPrefixedIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a2;
  if (v6 > 36)
  {
    if (v6 == 94)
    {
      int v9 = 7;
      int64_t v8 = "invalid block name";
      uint64_t v7 = 18;
      uint64_t v10 = (char *)*((void *)this + 4);
      unsigned int v11 = *v10;
      uint64_t v12 = MEMORY[0x263EF8318];
      if ((v11 & 0x80000000) != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      int v9 = 6;
      int64_t v8 = "invalid SSA name";
      uint64_t v7 = 16;
      uint64_t v10 = (char *)*((void *)this + 4);
      unsigned int v11 = *v10;
      uint64_t v12 = MEMORY[0x263EF8318];
      if ((v11 & 0x80000000) != 0) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    if (v6 == 33) {
      uint64_t v7 = 23;
    }
    else {
      uint64_t v7 = 22;
    }
    if (v6 == 33) {
      int64_t v8 = "invalid type identifier";
    }
    else {
      int64_t v8 = "invalid attribute name";
    }
    if (v6 == 33) {
      int v9 = 8;
    }
    else {
      int v9 = 5;
    }
    uint64_t v10 = (char *)*((void *)this + 4);
    unsigned int v11 = *v10;
    uint64_t v12 = MEMORY[0x263EF8318];
    if ((v11 & 0x80000000) != 0)
    {
LABEL_31:
      if (__maskrune(v11, 0x100uLL)) {
        goto LABEL_41;
      }
      goto LABEL_32;
    }
  }
  int v13 = *(_DWORD *)(v12 + 4 * v11 + 60);
  if ((v13 & 0x400) != 0)
  {
    uint64_t v14 = v10 + 1;
    do
    {
      if ((*(_DWORD *)(v12 + 4 * v11 + 60) & 0x400) == 0) {
        break;
      }
      *((void *)this + 4) = v14;
      int v15 = *v14++;
      LOBYTE(v11) = v15;
    }
    while ((v15 & 0x80000000) == 0);
    unsigned int v16 = v14 - 1;
LABEL_22:
    unint64_t v17 = *((void *)this + 5);
    BOOL v18 = v17 < (unint64_t)a2 || v17 > (unint64_t)v16;
    if (!v18)
    {
      *(_DWORD *)a3 = 2;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v17 - (void)a2;
      return;
    }
    uint64_t v19 = v16 - a2;
    *(_DWORD *)a3 = v9;
    goto LABEL_28;
  }
  if ((v13 & 0x100) != 0) {
    goto LABEL_41;
  }
LABEL_32:
  uint64_t v20 = (const char *)*((void *)this + 4);
  unsigned int v21 = *(unsigned __int8 *)v20 - 36;
  BOOL v18 = v21 > 0x3B;
  uint64_t v22 = (1 << v21) & 0x800000000000601;
  if (!v18 && v22 != 0)
  {
    while (1)
    {
LABEL_41:
      while (1)
      {
        unint64_t v27 = (char *)(*((void *)this + 4) + 1);
        *((void *)this + 4) = v27;
        unsigned int v28 = *v27;
        if ((v28 & 0x80000000) != 0) {
          break;
        }
        if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x100) == 0) {
          goto LABEL_45;
        }
      }
      if (!__maskrune(v28, 0x100uLL))
      {
LABEL_45:
        unsigned int v16 = (char *)*((void *)this + 4);
        uint64_t v29 = *v16;
        if (*v16 < 0 || (*(_DWORD *)(v12 + 4 * v29 + 60) & 0x400) == 0)
        {
          unsigned int v24 = v29 - 36;
          BOOL v18 = v24 > 0x3B;
          uint64_t v25 = (1 << v24) & 0x800000000000601;
          if (v18 || v25 == 0) {
            goto LABEL_22;
          }
        }
      }
    }
  }
  if (v20 != *((const char **)this + 5))
  {
    __int16 v31 = 261;
    v30[0] = v8;
    v30[1] = v7;
    mlir::Lexer::emitError((uint64_t)this, v20 - 1, (uint64_t)v30, a3);
    return;
  }
  *(_DWORD *)a3 = 2;
  uint64_t v19 = v20 - a2;
LABEL_28:
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = v19;
}

void mlir::Lexer::lexString(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)*((void *)this + 4);
  uint64_t v4 = (char *)*((void *)this + 5);
  if (v3 == v4)
  {
LABEL_23:
    *(_DWORD *)a3 = 2;
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = v4 - a2;
    return;
  }
  while (1)
  {
    __int16 v5 = (unsigned __int8 *)(v3 + 1);
    *((void *)this + 4) = v3 + 1;
    int v6 = *v3;
    if (v6 > 33)
    {
      if (v6 == 92)
      {
        uint64_t v7 = *v5;
        BOOL v8 = (v7 - 92) > 0x18 || ((1 << (v7 - 92)) & 0x1040001) == 0;
        if (v8 && v7 != 34)
        {
          if (llvm::hexDigitValue(char)::LUT[v7] == -1 || llvm::hexDigitValue(char)::LUT[v3[2]] == -1)
          {
            int v9 = "unknown escape in string literal";
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v5 = (unsigned __int8 *)v3;
        }
        v5 += 2;
        *((void *)this + 4) = v5;
      }
      else if (v6 == 34)
      {
        *(_DWORD *)a3 = 11;
        *(void *)(a3 + 8) = a2;
        *(void *)(a3 + 16) = v5 - (unsigned __int8 *)a2;
        return;
      }
      goto LABEL_5;
    }
    if (*v3) {
      break;
    }
    if (v3 == (char *)(*((void *)this + 2) + *((void *)this + 3))) {
      goto LABEL_24;
    }
LABEL_5:
    uint64_t v3 = (char *)v5;
    if (v5 == (unsigned __int8 *)v4) {
      goto LABEL_23;
    }
  }
  if ((v6 - 10) >= 3) {
    goto LABEL_5;
  }
LABEL_24:
  int v9 = "expected '\"' in string literal";
LABEL_25:
  uint64_t v10 = v9;
  __int16 v11 = 259;
  mlir::Lexer::emitError((uint64_t)this, v3, (uint64_t)&v10, a3);
}

uint64_t mlir::Lexer::lexNumber@<X0>(uint64_t this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned __int8 **)(this + 32);
  unsigned int v4 = *v3;
  if (__PAIR64__(v4, *(v3 - 1)) == 0x7800000030)
  {
    if (((char)v3[1] & 0x80000000) == 0
      && (uint64_t v5 = MEMORY[0x263EF8318], (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v3[1] + 60) & 0x10000) != 0))
    {
      unint64_t v17 = v3 + 2;
      *(void *)(this + 32) = v3 + 2;
      if (((char)v3[2] & 0x80000000) == 0)
      {
        uint64_t v18 = v3[2];
        uint64_t v19 = (char *)(v3 + 3);
        do
        {
          if ((*(_DWORD *)(v5 + 4 * v18 + 60) & 0x10000) == 0) {
            break;
          }
          *(void *)(this + 32) = v19;
          int v20 = *v19++;
          uint64_t v18 = v20;
        }
        while ((v20 & 0x80000000) == 0);
        unint64_t v17 = (unsigned __int8 *)(v19 - 1);
      }
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v17 - (unsigned __int8 *)a2;
    }
    else
    {
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((v4 & 0x80) != 0) {
      goto LABEL_25;
    }
    uint64_t v6 = MEMORY[0x263EF8318];
    while ((*(_DWORD *)(v6 + 4 * v4 + 60) & 0x400) != 0)
    {
      uint64_t v7 = v3 + 1;
      *(void *)(this + 32) = v3 + 1;
      int v8 = (char)v3[1];
      unsigned int v4 = *++v3;
      if (v8 < 0)
      {
        *(_DWORD *)a3 = 10;
        *(void *)(a3 + 8) = a2;
        *(void *)(a3 + 16) = v7 - (unsigned __int8 *)a2;
        return this;
      }
    }
    if (v4 != 46)
    {
LABEL_25:
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
    else
    {
      int v9 = v3 + 4;
      do
      {
        uint64_t v10 = v9;
        __int16 v11 = (char *)(v9 - 3);
        *(void *)(this + 32) = v9 - 3;
        int v12 = (char)*(v9 - 3);
        uint64_t v13 = v12;
        if (v12 < 0) {
          break;
        }
        int v9 = v10 + 1;
      }
      while ((*(_DWORD *)(v6 + 4 * v13 + 60) & 0x400) != 0);
      if ((v13 | 0x20) == 0x65)
      {
        uint64_t v14 = *(v10 - 2);
        if ((*(_DWORD *)(v6 + 4 * v14 + 60) & 0x400) != 0
          || (v14 == 43 || v14 == 45) && (*(_DWORD *)(v6 + 4 * *(v10 - 1) + 60) & 0x400) != 0)
        {
          __int16 v11 = (char *)(v10 - 1);
          *(void *)(this + 32) = v10 - 1;
          if (((char)*(v10 - 1) & 0x80000000) == 0)
          {
            uint64_t v15 = *(v10 - 1);
            do
            {
              if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x400) == 0) {
                break;
              }
              *(void *)(this + 32) = v10;
              int v16 = (char)*v10++;
              uint64_t v15 = v16;
            }
            while ((v16 & 0x80000000) == 0);
            __int16 v11 = (char *)(v10 - 1);
          }
        }
      }
      *(_DWORD *)a3 = 9;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v11 - a2;
    }
  }
  return this;
}

uint64_t mlir::detail::Parser::parseCallSiteLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v20);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)(v4 + 56) = v20;
  *(void *)(v4 + 72) = v21;
  *(void *)&long long v20 = "expected '(' in callsite location";
  __int16 v23 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v20)) {
    return 0;
  }
  uint64_t v19 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(a1, &v19)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) == 3 && *(void *)(v5 + 72) == 2 && **(_WORD **)(v5 + 64) == 29793)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v20);
    uint64_t v15 = *(void *)(a1 + 8);
    *(_OWORD *)(v15 + 56) = v20;
    *(void *)(v15 + 72) = v21;
    v17[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v17))
    {
      *(void *)&long long v20 = "expected ')' in callsite location";
      __int16 v23 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v20))
      {
        *a2 = mlir::CallSiteLoc::get(v19, v17[0]);
        return 1;
      }
    }
    return 0;
  }
  v17[0] = (uint64_t)"expected 'at' in callsite location";
  __int16 v18 = 259;
  mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v17, &v20);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if ((void)v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v29)
  {
    uint64_t v7 = __p;
    if (__p)
    {
      int v8 = v28;
      int v9 = __p;
      if (v28 != __p)
      {
        do
          int v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        int v9 = __p;
      }
      unsigned int v28 = v7;
      operator delete(v9);
    }
    uint64_t v10 = v25;
    if (v25)
    {
      __int16 v11 = v26;
      int v12 = v25;
      if (v26 != v25)
      {
        do
        {
          uint64_t v14 = *--v11;
          uint64_t v13 = v14;
          *__int16 v11 = 0;
          if (v14) {
            MEMORY[0x21667D390](v13, 0x1000C8077774924);
          }
        }
        while (v11 != v10);
        int v12 = v25;
      }
      uint64_t v26 = v10;
      operator delete(v12);
    }
    if (v22 != &v24) {
      free(v22);
    }
  }
  return v6;
}

uint64_t mlir::detail::Parser::parseLocationInstance(mlir::UnknownLoc ****a1, uint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3)
  {
    __int16 v11 = v4[8];
    int v12 = v4[9];
    if (v12 == (mlir::UnknownLoc **)5)
    {
      if (!memcmp(v11, "fused", 5uLL))
      {
        return mlir::detail::Parser::parseFusedLocation((uint64_t)a1);
      }
    }
    else if (v12 == (mlir::UnknownLoc **)7)
    {
      if (!memcmp(v11, "unknown", 7uLL))
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v39);
        __int16 v32 = a1[1];
        *(_OWORD *)(v32 + 7) = v39;
        v32[9] = v40;
        *a2 = mlir::UnknownLoc::get(**a1[1], v33);
        return 1;
      }
    }
    else if (v12 == (mlir::UnknownLoc **)8 && *v11 == (mlir::UnknownLoc *)0x657469736C6C6163)
    {
      return mlir::detail::Parser::parseCallSiteLocation((uint64_t)a1, a2);
    }
    v36[0] = "expected location instance";
    __int16 v37 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v39);
    return v10;
  }
  if (v5 != 11)
  {
    if (v5 == 5)
    {
      uint64_t v6 = mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, 0);
      if (!v6) {
        return 0;
      }
      uint64_t v7 = (uint64_t)v6;
      BOOL v8 = mlir::LocationAttr::classof((uint64_t)v6);
      if (v8) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = 0;
      }
      *a2 = v9;
      if (v8) {
        return 1;
      }
      v36[0] = "expected location attribute, but got";
      __int16 v37 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v36, &v39);
      if ((void)v39)
      {
        uint64_t v22 = v38;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v38, v7);
        __int16 v23 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v34 = v42 + 1;
          if (v41 <= v38 && (char *)v41 + 24 * v42 > v38)
          {
            int64_t v35 = v38 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            __int16 v23 = (char *)v41;
            uint64_t v22 = (char *)v41 + v35;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            uint64_t v22 = v38;
            __int16 v23 = (char *)v41;
          }
        }
        uint64_t v24 = &v23[24 * v42];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        ++v42;
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((void)v39) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      }
      if (!v49) {
        return v10;
      }
      uint64_t v26 = __p;
      if (__p)
      {
        unint64_t v27 = v48;
        unsigned int v28 = __p;
        if (v48 != __p)
        {
          do
            unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          unsigned int v28 = __p;
        }
        uint64_t v48 = v26;
        operator delete(v28);
      }
      unint64_t v17 = v45;
      if (!v45)
      {
LABEL_54:
        if (v41 != v44) {
          free(v41);
        }
        return v10;
      }
      char v29 = v46;
      uint64_t v19 = v45;
      if (v46 == v45)
      {
LABEL_53:
        v46 = v17;
        operator delete(v19);
        goto LABEL_54;
      }
      do
      {
        uint64_t v31 = *--v29;
        uint64_t v30 = v31;
        void *v29 = 0;
        if (v31) {
          MEMORY[0x21667D390](v30, 0x1000C8077774924);
        }
      }
      while (v29 != v17);
    }
    else
    {
      v36[0] = "expected location instance";
      __int16 v37 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((void)v39) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      }
      if (!v49) {
        return v10;
      }
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v48;
        int v16 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          int v16 = __p;
        }
        uint64_t v48 = v14;
        operator delete(v16);
      }
      unint64_t v17 = v45;
      if (!v45) {
        goto LABEL_54;
      }
      __int16 v18 = v46;
      uint64_t v19 = v45;
      if (v46 == v45) {
        goto LABEL_53;
      }
      do
      {
        uint64_t v21 = *--v18;
        uint64_t v20 = v21;
        void *v18 = 0;
        if (v21) {
          MEMORY[0x21667D390](v20, 0x1000C8077774924);
        }
      }
      while (v18 != v17);
    }
    uint64_t v19 = v45;
    goto LABEL_53;
  }

  return mlir::detail::Parser::parseNameOrFileLineColLocation((uint64_t)a1, a2);
}

uint64_t mlir::detail::Parser::parseFusedLocation(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)v9);
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v9;
  *(void *)(v2 + 72) = v10[0];
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v3 + 56) == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v9);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)v9;
    *(void *)(v4 + 72) = v10[0];
    uint64_t v5 = mlir::detail::Parser::parseAttribute(a1, 0);
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v5;
    v9[0] = "expected '>' after fused location metadata";
    __int16 v11 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)v9)) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v8[1] = v9;
  v9[0] = v10;
  v9[1] = *(void **)"";
  v8[0] = a1;
  if (mlir::detail::Parser::parseCommaSeparatedList(a1, 2, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>, (uint64_t)v8, (uint64_t)" in fused location", 18))mlir::FusedLoc::get((uint64_t **)v9[0], (mlir::MLIRContext *)LODWORD(v9[1]), v6, ***(mlir::UnknownLoc ****)(a1 + 8)); {
  if (v9[0] != v10)
  }
    free(v9[0]);
  return 0;
}

uint64_t mlir::detail::Parser::parseNameOrFileLineColLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(mlir::StringAttr ****)(a1 + 8);
  uint64_t v5 = **v4;
  mlir::Token::getStringValue((mlir::Token *)(v4 + 7), &v52);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v53);
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)(v6 + 56) = v53;
  *(void *)(v6 + 72) = v54;
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
    uint64_t v25 = *(void *)(a1 + 8);
    *(_OWORD *)(v25 + 56) = v53;
    *(void *)(v25 + 72) = v54;
    v50[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v50))
    {
      __int16 v56 = 260;
      *(void *)&long long v53 = &v52;
      uint64_t v26 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
      *a2 = mlir::NameLoc::get(v26, v50[0]);
      *(void *)&long long v53 = "expected ')' after child location of NameLoc";
      __int16 v56 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v53))
      {
        uint64_t v27 = 1;
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v27;
        }
LABEL_71:
        operator delete(v52.__r_.__value_.__l.__data_);
        return v27;
      }
    }
    goto LABEL_22;
  }
  if (v8 != 15)
  {
    __int16 v56 = 260;
    *(void *)&long long v53 = &v52;
    uint64_t v28 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
    uint64_t v24 = mlir::NameLoc::get(v28);
    goto LABEL_20;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
  uint64_t v9 = *(void *)(a1 + 8);
  *(_OWORD *)(v9 + 56) = v53;
  *(void *)(v9 + 72) = v54;
  uint64_t v10 = *(void *)(a1 + 8);
  int v12 = *(_DWORD *)(v10 + 56);
  __int16 v11 = (mlir::Token *)(v10 + 56);
  if (v12 != 10)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((void)v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v62)
    {
      char v29 = __p;
      if (__p)
      {
        uint64_t v30 = v61;
        uint64_t v31 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          uint64_t v31 = __p;
        }
        v61 = v29;
        operator delete(v31);
      }
      __int16 v32 = v58;
      if (!v58) {
        goto LABEL_68;
      }
      char v33 = v59;
      unint64_t v34 = v58;
      if (v59 == v58) {
        goto LABEL_67;
      }
      do
      {
        uint64_t v36 = *--v33;
        uint64_t v35 = v36;
        *char v33 = 0;
        if (v36) {
          MEMORY[0x21667D390](v35, 0x1000C8077774924);
        }
      }
      while (v33 != v32);
      goto LABEL_66;
    }
    goto LABEL_70;
  }
  unint64_t UnsignedIntegerValue = mlir::Token::getUnsignedIntegerValue(v11);
  if ((UnsignedIntegerValue & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((void)v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v62)
    {
      __int16 v37 = __p;
      if (__p)
      {
        uint64_t v38 = v61;
        long long v39 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          long long v39 = __p;
        }
        v61 = v37;
        operator delete(v39);
      }
      __int16 v32 = v58;
      if (!v58) {
        goto LABEL_68;
      }
      unsigned int v40 = v59;
      unint64_t v34 = v58;
      if (v59 == v58) {
        goto LABEL_67;
      }
      do
      {
        uint64_t v42 = *--v40;
        uint64_t v41 = v42;
        *unsigned int v40 = 0;
        if (v42) {
          MEMORY[0x21667D390](v41, 0x1000C8077774924);
        }
      }
      while (v40 != v32);
      goto LABEL_66;
    }
LABEL_70:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v27;
    }
    goto LABEL_71;
  }
  unsigned int v14 = UnsignedIntegerValue;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v53);
  uint64_t v15 = *(void *)(a1 + 8);
  *(_OWORD *)(v15 + 56) = v53;
  *(void *)(v15 + 72) = v54;
  *(void *)&long long v53 = "expected ':' in FileLineColLoc";
  __int16 v56 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v53))
  {
LABEL_22:
    uint64_t v27 = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_71;
    }
    return v27;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  int v18 = *(_DWORD *)(v16 + 56);
  unint64_t v17 = (mlir::Token *)(v16 + 56);
  if (v18 != 10)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((void)v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v62)
    {
      unsigned int v43 = __p;
      if (__p)
      {
        uint64_t v44 = v61;
        uint64_t v45 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          uint64_t v45 = __p;
        }
        v61 = v43;
        operator delete(v45);
      }
      __int16 v32 = v58;
      if (!v58) {
        goto LABEL_68;
      }
      v46 = v59;
      unint64_t v34 = v58;
      if (v59 == v58)
      {
LABEL_67:
        v59 = v32;
        operator delete(v34);
LABEL_68:
        if (v55 != &v57) {
          free(v55);
        }
        goto LABEL_70;
      }
      do
      {
        uint64_t v48 = *--v46;
        uint64_t v47 = v48;
        void *v46 = 0;
        if (v48) {
          MEMORY[0x21667D390](v47, 0x1000C8077774924);
        }
      }
      while (v46 != v32);
LABEL_66:
      unint64_t v34 = v58;
      goto LABEL_67;
    }
    goto LABEL_70;
  }
  unint64_t v19 = mlir::Token::getUnsignedIntegerValue(v17);
  if ((v19 & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v53);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v27;
    }
    goto LABEL_71;
  }
  uint64_t v20 = v19;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v53);
  uint64_t v21 = *(void *)(a1 + 8);
  *(_OWORD *)(v21 + 56) = v53;
  *(void *)(v21 + 72) = v54;
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v52;
  }
  else {
    uint64_t v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = mlir::FileLineColLoc::get(v5, (const char *)v22, size, v14, v20);
LABEL_20:
  *a2 = v24;
  uint64_t v27 = 1;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_71;
  }
  return v27;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v7 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(v2, &v7)) {
    return 0;
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = v7;
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(void *)(*(void *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  return 1;
}

uint64_t mlir::detail::Parser::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(a2)
  {
    case 1:
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_18;
    case 5:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 21) {
        return 1;
      }
LABEL_3:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '('";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v19)) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) == 28) {
        goto LABEL_5;
      }
      goto LABEL_9;
    case 6:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 22) {
        return 1;
      }
LABEL_7:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '['";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v19)) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 29) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 7:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 23) {
        return 1;
      }
LABEL_14:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '<'";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 23, (uint64_t)&v19)) {
        return 1;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) == 19)
      {
LABEL_5:
        mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v19);
        uint64_t v13 = *(void *)(a1 + 8);
        *(_OWORD *)(v13 + 56) = v19;
        *(void *)(v13 + 72) = v20;
        return 1;
      }
LABEL_9:
      if (!a3(a4)) {
        return 0;
      }
      while (1)
      {
        uint64_t v15 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v15 + 56) != 16) {
          break;
        }
        mlir::Lexer::lexToken((mlir::Lexer *)(v15 + 8), (uint64_t)&v19);
        uint64_t v16 = *(void *)(a1 + 8);
        *(_OWORD *)(v16 + 56) = v19;
        *(void *)(v16 + 72) = v20;
        if (!a3(a4)) {
          return 0;
        }
      }
      uint64_t result = 1;
      switch(a2)
      {
        case 1:
        case 5:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected ')'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 28;
          goto LABEL_28;
        case 2:
        case 6:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected ']'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 29;
          goto LABEL_28;
        case 3:
        case 7:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected '>'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 19;
          goto LABEL_28;
        case 4:
        case 8:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected '}'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 27;
LABEL_28:
          uint64_t result = mlir::detail::Parser::parseToken(v17, v18, (uint64_t)&v19);
          break;
        default:
          return result;
      }
      return result;
    case 8:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 20) {
        return 1;
      }
LABEL_18:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '{'";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 20, (uint64_t)&v19)) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 27) {
        goto LABEL_9;
      }
      goto LABEL_5;
    default:
      goto LABEL_9;
  }
}

uint64_t mlir::detail::Parser::parseToken(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == a2)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v16);
    uint64_t v5 = *(void *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v16;
    *(void *)(v5 + 72) = v17;
    return 1;
  }
  else
  {
    mlir::detail::Parser::emitWrongTokenError(a1, a3, &v16);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
    if ((void)v16) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
    }
    if (v24)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        int v8 = v23;
        uint64_t v9 = __p;
        if (v23 != __p)
        {
          do
            int v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        __int16 v23 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v20;
      if (v20)
      {
        __int16 v11 = v21;
        uint64_t v12 = v20;
        if (v21 != v20)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            *__int16 v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v20;
        }
        uint64_t v21 = v10;
        operator delete(v12);
      }
      if (v18 != &v19) {
        free(v18);
      }
    }
  }
  return v6;
}

BOOL mlir::detail::Parser::parseCommaSeparatedListUntil(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, char a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 56) == a2)
  {
    if (a5)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v26);
      uint64_t v7 = *(void *)(a1 + 8);
      *(_OWORD *)(v7 + 56) = v26;
      *(void *)(v7 + 72) = v27;
      return 1;
    }
    else
    {
      v24[0] = "expected list element";
      __int16 v25 = 259;
      mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v24, &v26);
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
      if ((void)v26) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
      }
      if (v35)
      {
        uint64_t v14 = __p;
        if (__p)
        {
          uint64_t v15 = v34;
          long long v16 = __p;
          if (v34 != __p)
          {
            do
              uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            long long v16 = __p;
          }
          unint64_t v34 = v14;
          operator delete(v16);
        }
        uint64_t v17 = v31;
        if (v31)
        {
          int v18 = v32;
          uint64_t v19 = v31;
          if (v32 != v31)
          {
            do
            {
              uint64_t v21 = *--v18;
              uint64_t v20 = v21;
              void *v18 = 0;
              if (v21) {
                MEMORY[0x21667D390](v20, 0x1000C8077774924);
              }
            }
            while (v18 != v17);
            uint64_t v19 = v31;
          }
          __int16 v32 = v17;
          operator delete(v19);
        }
        if (v28 != &v30) {
          free(v28);
        }
      }
    }
  }
  else if (a3(a4))
  {
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 16) {
        break;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
      uint64_t v13 = *(void *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v26;
      *(void *)(v13 + 72) = v27;
      if (!a3(a4)) {
        return 0;
      }
    }
    __int16 v25 = 1283;
    v24[0] = "expected ',' or '";
    v24[2] = mlir::Token::getTokenSpelling(a2);
    v24[3] = v22;
    *(void *)&long long v26 = v24;
    uint64_t v27 = "'";
    __int16 v29 = 770;
    return mlir::detail::Parser::parseToken(a1, a2, (uint64_t)&v26) != 0;
  }
  else
  {
    return 0;
  }
  return v8;
}

void mlir::detail::Parser::emitWrongTokenError(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1 + 8) + 56));
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (const char *)(OCGSize - (*(_DWORD *)(v7 + 56) == 0));
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = (uint64_t)&v8[-v9];
  *(void *)&long long v24 = v9;
  *((void *)&v24 + 1) = &v8[-v9];
  while (1)
  {
    uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v24, " \t", 2, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)(last_not_of + 1) < *((void *)&v24 + 1)) {
      uint64_t v12 = last_not_of + 1;
    }
    else {
      uint64_t v12 = *((void *)&v24 + 1);
    }
    unint64_t v13 = *((void *)&v24 + 1) - v10 + v12;
    if (*((void *)&v24 + 1) < v13) {
      unint64_t v13 = *((void *)&v24 + 1);
    }
    *((void *)&v24 + 1) = v13;
    if (!v13) {
      break;
    }
    int v14 = *(unsigned __int8 *)(v24 + v13 - 1);
    if (v14 != 10 && v14 != 13)
    {
      uint64_t v20 = (const char *)(v24 + v13);
      uint64_t v21 = *(void *)(a1 + 8) + 8;
      goto LABEL_26;
    }
    if (v13 >= v13 - 1) {
      unint64_t v16 = v13 - 1;
    }
    else {
      unint64_t v16 = v13;
    }
    *((void *)&v24 + 1) = v16;
    long long v23 = v24;
    unint64_t last_of = llvm::StringRef::find_last_of(&v23, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL);
    if (last_of != -1)
    {
      if (*((void *)&v23 + 1) >= last_of) {
        unint64_t v18 = last_of;
      }
      else {
        unint64_t v18 = *((void *)&v23 + 1);
      }
      *(void *)&long long v23 = v23 + v18;
      *((void *)&v23 + 1) -= v18;
    }
    uint64_t v19 = llvm::StringRef::find((uint64_t *)&v23, "//", 2uLL, 0);
    uint64_t v10 = *((void *)&v24 + 1);
    if (v19 != -1)
    {
      if (*((void *)&v24 + 1) >= (unint64_t)(v19 - *((void *)&v23 + 1) + *((void *)&v24 + 1))) {
        uint64_t v10 = v19 - *((void *)&v23 + 1) + *((void *)&v24 + 1);
      }
      *((void *)&v24 + 1) = v10;
    }
  }
  uint64_t v21 = *(void *)(a1 + 8) + 8;
  uint64_t v20 = v8;
LABEL_26:
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v21, v20);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(a3);
  }
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1 + 8) + 56));
  uint64_t v7 = (const char *)OCGSize;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v8 + 56)) {
    uint64_t v7 = (const char *)(OCGSize - 1);
  }
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v8 + 8, v7);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1)
  {
    mlir::InFlightDiagnostic::abandon(a3);
  }
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, a3, (uint64_t)a4);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1)
  {
    mlir::InFlightDiagnostic::abandon(a4);
  }
}

uint64_t mlir::detail::Parser::parseOptionalInteger(mlir::detail::Parser *this, llvm::APInt *a2)
{
  int v4 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 1);
  int v6 = *(_DWORD *)(v5 + 56);
  if (v6 > 53)
  {
    if (v6 == 74)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      uint64_t v23 = *((void *)this + 1);
      *(_OWORD *)(v23 + 56) = v33;
      *(void *)(v23 + 72) = v34;
      uint64_t v24 = *((unsigned int *)a2 + 2);
      if (v24 > 0x40)
      {
        int v4 = 1;
        **(void **)a2 = 1;
        bzero((void *)(*(void *)a2 + 8), (((unint64_t)(v24 + 63) >> 3) - 8) & 0xFFFFFFF8);
        goto LABEL_54;
      }
      *(void *)a2 = v24 != 0;
    }
    else
    {
      int v8 = 0;
      if (v6 != 54) {
        return v4 | (v8 << 8);
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      uint64_t v21 = *((void *)this + 1);
      *(_OWORD *)(v21 + 56) = v33;
      *(void *)(v21 + 72) = v34;
      uint64_t v22 = *((unsigned int *)a2 + 2);
      if (v22 > 0x40)
      {
        **(void **)a2 = 0;
        bzero((void *)(*(void *)a2 + 8), (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
LABEL_47:
    int v4 = 1;
LABEL_54:
    int v8 = 1;
    return v4 | (v8 << 8);
  }
  BOOL v7 = v6 == 10 || v6 == 24;
  int v8 = 0;
  if (v7)
  {
    if (v6 == 24)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      uint64_t v9 = *((void *)this + 1);
      *(_OWORD *)(v9 + 56) = v33;
      *(void *)(v9 + 72) = v34;
      uint64_t v5 = *((void *)this + 1);
    }
    long long v31 = *(_OWORD *)(v5 + 56);
    unint64_t v32 = *(void *)(v5 + 72);
    *(void *)&long long v33 = "expected integer value";
    __int16 v36 = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 10, (uint64_t)&v33)) {
      goto LABEL_53;
    }
    v30[0] = *((void *)&v31 + 1);
    v30[1] = v32;
    unsigned int v10 = 10;
    if (v32 >= 2)
    {
      if (*(unsigned char *)(*((void *)&v31 + 1) + 1) == 120) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = 10;
      }
    }
    if (llvm::StringRef::getAsInteger((llvm::StringRef *)v30, v10, a2))
    {
      uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v31);
      uint64_t v28 = "integer value too large";
      __int16 v29 = 259;
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, OCGSize);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v28, (uint64_t)&v33);
      if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v33);
      }
      if ((void)v33) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      }
      if (v42)
      {
        unint64_t v13 = __p;
        if (__p)
        {
          int v14 = v41;
          uint64_t v15 = __p;
          if (v41 != __p)
          {
            do
              int v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            uint64_t v15 = __p;
          }
          uint64_t v41 = v13;
          operator delete(v15);
        }
        unint64_t v16 = v38;
        if (v38)
        {
          uint64_t v17 = v39;
          unint64_t v18 = v38;
          if (v39 != v38)
          {
            do
            {
              uint64_t v20 = *--v17;
              uint64_t v19 = v20;
              void *v17 = 0;
              if (v20) {
                MEMORY[0x21667D390](v19, 0x1000C8077774924);
              }
            }
            while (v17 != v16);
            unint64_t v18 = v38;
          }
          long long v39 = v16;
          operator delete(v18);
        }
        if (v35 != &v37) {
          free(v35);
        }
      }
LABEL_53:
      int v4 = 0;
      goto LABEL_54;
    }
    unsigned int v25 = *((_DWORD *)a2 + 2);
    long long v26 = (llvm::APInt *)(*(void *)a2 + 8 * ((v25 - 1) >> 6));
    if (v25 < 0x41) {
      long long v26 = a2;
    }
    if ((*(void *)v26 >> (v25 - 1)))
    {
      llvm::APInt::zext((uint64_t *)a2, v25 + 1, (uint64_t)&v33);
      if (*((_DWORD *)a2 + 2) >= 0x41u && *(void *)a2) {
        MEMORY[0x21667D390](*(void *)a2, 0x1000C8000313F17);
      }
      *(void *)a2 = v33;
      *((_DWORD *)a2 + 2) = DWORD2(v33);
    }
    if (v6 == 24) {
      llvm::APInt::negate(a2);
    }
    goto LABEL_47;
  }
  return v4 | (v8 << 8);
}

uint64_t **llvm::APInt::negate(llvm::APInt *this)
{
  uint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)this);
    this = v1;
  }
  else
  {
    if (v2) {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    }
    else {
      unint64_t v3 = 0;
    }
    *(void *)this = v3 & ~*(void *)this;
  }
  return llvm::APInt::operator++((uint64_t **)this);
}

uint64_t mlir::detail::Parser::parseFloatFromIntegerLiteral(uint64_t a1, uint64_t a2, MirInfoChannelAssignment *this, int a4, llvm::APFloatBase *a5, unsigned int a6)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(this);
  unint64_t v13 = *((void *)this + 2);
  if (v13 < 2 || (int v14 = (unsigned __int8 *)*((void *)this + 1), v14[1] != 120))
  {
    uint64_t v54 = (const llvm::APInt *)"unexpected decimal integer literal for a floating point value";
    __int16 v56 = 259;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v54, (uint64_t)&v59);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v59);
    }
    mlir::Diagnostic::attachNote();
  }
  if (a4)
  {
    uint64_t v54 = (const llvm::APInt *)"hexadecimal float literal should not have a leading minus";
    __int16 v56 = 259;
    uint64_t v15 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize);
    mlir::emitError(v15, (uint64_t)&v54, (uint64_t)&v59);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v59);
    }
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
    if (v59) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
    }
    if (v68)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        unint64_t v18 = v67;
        uint64_t v19 = __p;
        if (v67 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        v67 = v17;
        operator delete(v19);
      }
      uint64_t v20 = v64;
      if (!v64) {
        goto LABEL_47;
      }
      uint64_t v21 = v65;
      uint64_t v22 = v64;
      if (v65 == v64)
      {
LABEL_46:
        v65 = v20;
        operator delete(v22);
LABEL_47:
        if (v62 != v63) {
          free(v62);
        }
        return v16;
      }
      do
      {
        uint64_t v24 = *--v21;
        uint64_t v23 = v24;
        void *v21 = 0;
        if (v24) {
          MEMORY[0x21667D390](v23, 0x1000C8077774924);
        }
      }
      while (v21 != v20);
LABEL_45:
      uint64_t v22 = v64;
      goto LABEL_46;
    }
  }
  else
  {
    UInt64IntegerValue = (llvm::APFloatBase *)mlir::Token::getUInt64IntegerValue(v14, v13);
    if (v27)
    {
      uint64_t v28 = UInt64IntegerValue;
      __int16 v29 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(UInt64IntegerValue);
      if (v29 == a5)
      {
        unsigned int v55 = a6;
        if (a6 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v54);
        }
        unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
        if (!a6) {
          unint64_t v39 = 0;
        }
        uint64_t v54 = (const llvm::APInt *)((unint64_t)v28 & v39);
        uint64_t v50 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v29);
        __int16 v51 = v50;
        if (v50 == a5) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v60, (uint64_t)a5);
        }
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v60, a5, &v54);
        std::string v52 = (llvm::APFloatBase *)(a2 + 8);
        if (*(unsigned char *)(a2 + 32))
        {
          llvm::APFloat::Storage::operator=(v52, (llvm::APFloatBase *)&v60);
        }
        else
        {
          if (v51 == v60) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v52, &v60);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v52, (uint64_t)&v60);
          }
          *(unsigned char *)(a2 + 32) = 1;
        }
        if (v51 == v60) {
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v61);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v60);
        }
        if (v55 >= 0x41 && v54) {
          MEMORY[0x21667D390](v54, 0x1000C8000313F17);
        }
        return 1;
      }
      else
      {
        LODWORD(v58) = a6;
        if (a6 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v57);
        }
        unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
        if (!a6) {
          unint64_t v30 = 0;
        }
        uint64_t v57 = (const llvm::APInt *)((unint64_t)v28 & v30);
        if (v57 == v28)
        {
          unsigned int v40 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v29);
          if (v40 == a5) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v60, (uint64_t)a5);
          }
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v60, a5, &v57);
          long long v53 = (llvm::APFloatBase *)(a2 + 8);
          if (*(unsigned char *)(a2 + 32))
          {
            llvm::APFloat::Storage::operator=(v53, (llvm::APFloatBase *)&v60);
          }
          else
          {
            if (v40 == v60) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(v53, &v60);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v53, (uint64_t)&v60);
            }
            *(unsigned char *)(a2 + 32) = 1;
          }
          if (v40 == v60) {
            std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v61);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v60);
          }
          uint64_t v16 = 1;
        }
        else
        {
          uint64_t v54 = (const llvm::APInt *)"hexadecimal float constant out of range for type";
          __int16 v56 = 259;
          uint64_t v41 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize);
          mlir::emitError(v41, (uint64_t)&v54, (uint64_t)&v59);
          if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(&v59);
          }
          uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
          if (v59) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
          }
          if (v68)
          {
            char v42 = __p;
            if (__p)
            {
              uint64_t v43 = v67;
              uint64_t v44 = __p;
              if (v67 != __p)
              {
                do
                  uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
                while (v43 != v42);
                uint64_t v44 = __p;
              }
              v67 = v42;
              operator delete(v44);
            }
            uint64_t v45 = v64;
            if (v64)
            {
              v46 = v65;
              uint64_t v47 = v64;
              if (v65 != v64)
              {
                do
                {
                  uint64_t v49 = *--v46;
                  uint64_t v48 = v49;
                  void *v46 = 0;
                  if (v49) {
                    MEMORY[0x21667D390](v48, 0x1000C8077774924);
                  }
                }
                while (v46 != v45);
                uint64_t v47 = v64;
              }
              v65 = v45;
              operator delete(v47);
            }
            if (v62 != v63) {
              free(v62);
            }
          }
        }
        if (v58 >= 0x41 && v57) {
          MEMORY[0x21667D390](v57, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      uint64_t v54 = (const llvm::APInt *)"hexadecimal float constant out of range for type";
      __int16 v56 = 259;
      uint64_t v31 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize);
      mlir::emitError(v31, (uint64_t)&v54, (uint64_t)&v59);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v59);
      }
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
      if (v59) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
      }
      if (v68)
      {
        unint64_t v32 = __p;
        if (__p)
        {
          long long v33 = v67;
          uint64_t v34 = __p;
          if (v67 != __p)
          {
            do
              long long v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          v67 = v32;
          operator delete(v34);
        }
        uint64_t v20 = v64;
        if (!v64) {
          goto LABEL_47;
        }
        char v35 = v65;
        uint64_t v22 = v64;
        if (v65 == v64) {
          goto LABEL_46;
        }
        do
        {
          uint64_t v37 = *--v35;
          uint64_t v36 = v37;
          void *v35 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v35 != v20);
        goto LABEL_45;
      }
    }
  }
  return v16;
}

void mlir::detail::Parser::parseResourceHandle(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  v75 = a2;
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1 + 8) + 56));
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 3 || v9 == 12)
  {
LABEL_6:
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 64);
    mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v80);
    uint64_t v11 = *(void *)(a1 + 8);
    *(_OWORD *)(v11 + 56) = v80;
    *(void *)(v11 + 72) = v81;
    uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 80);
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v13 = v12 + 48;
    uint64_t v14 = v15;
    int v16 = *(_DWORD *)(v13 + 16);
    if (v16)
    {
      unsigned int v17 = v16 - 1;
      uint64_t v18 = ((v75 >> 4) ^ (v75 >> 9)) & (v16 - 1);
      uint64_t v19 = (uint64_t *)(v14 + 32 * v18);
      uint64_t v20 = *v19;
      if (v75 == (void *)*v19) {
        goto LABEL_21;
      }
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != -4096)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -8192;
        }
        if (v23) {
          uint64_t v21 = v19;
        }
        int v24 = v18 + v22++;
        uint64_t v18 = v24 & v17;
        uint64_t v19 = (uint64_t *)(v14 + 32 * v18);
        uint64_t v20 = *v19;
        if (v75 == (void *)*v19) {
          goto LABEL_21;
        }
      }
      if (v21) {
        long long v26 = v21;
      }
      else {
        long long v26 = v19;
      }
    }
    else
    {
      long long v26 = 0;
    }
    uint64_t v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(v13, v26, (uint64_t *)&v75);
LABEL_21:
    char v27 = llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>((uint64_t)(v19 + 1), *(int8x16_t **)a3, *(const unsigned __int8 **)(a3 + 8));
    uint64_t v28 = *v27;
    LODWORD(v29) = *(char *)(*v27 + 31);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v30 = v28 + 8;
      if (!*(void *)(v28 + 16)) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v28 + 8;
      if (!*(unsigned char *)(*v27 + 31))
      {
LABEL_25:
        (*(void (**)(long long *__return_ptr))(*v75 + 32))(&v72);
        if (v74)
        {
          (*(void (**)(long long *__return_ptr))(*v75 + 40))(&v80);
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)v30);
          }
          long long v31 = v80;
          *(void *)(v30 + 16) = v81;
          *(_OWORD *)uint64_t v30 = v31;
          *(_OWORD *)(v28 + 32) = v72;
          *(void *)(v28 + 48) = v73;
          LOBYTE(v29) = *(unsigned char *)(v28 + 31);
          goto LABEL_29;
        }
        v71[16] = 257;
        uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v71, (uint64_t)&v80);
        if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
          mlir::InFlightDiagnostic::abandon(&v80);
        }
        if (!(void)v80) {
          goto LABEL_61;
        }
        LODWORD(v76) = 3;
        v77 = "unknown 'resource' key '";
        uint64_t v78 = 24;
        char v42 = &v76;
        uint64_t v43 = (char *)v82;
        if (v83 >= v84)
        {
          unint64_t v65 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            int64_t v68 = (char *)&v76 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            uint64_t v43 = (char *)v82;
            char v42 = (int8x16_t **)((char *)v82 + v68);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            char v42 = &v76;
            uint64_t v43 = (char *)v82;
          }
        }
        uint64_t v44 = &v43[24 * v83];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = v42[2];
        *(_OWORD *)uint64_t v44 = v45;
        ++v83;
        if (!(void)v80) {
          goto LABEL_61;
        }
        __int16 v79 = 261;
        v46 = *(const char **)(a3 + 8);
        v76 = *(int8x16_t **)a3;
        v77 = v46;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (void ***)&v76);
        if (!(void)v80) {
          goto LABEL_61;
        }
        LODWORD(v76) = 3;
        v77 = "' for dialect '";
        uint64_t v78 = 15;
        uint64_t v47 = &v76;
        uint64_t v48 = (char *)v82;
        if (v83 >= v84)
        {
          unint64_t v66 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            int64_t v69 = (char *)&v76 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            uint64_t v48 = (char *)v82;
            uint64_t v47 = (int8x16_t **)((char *)v82 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            uint64_t v47 = &v76;
            uint64_t v48 = (char *)v82;
          }
        }
        uint64_t v49 = &v48[24 * v83];
        long long v50 = *(_OWORD *)v47;
        *((void *)v49 + 2) = v47[2];
        *(_OWORD *)uint64_t v49 = v50;
        ++v83;
        if (!(void)v80) {
          goto LABEL_61;
        }
        uint64_t v51 = v75[1];
        long long v53 = *(void ***)(v51 + 8);
        std::string v52 = *(const char **)(v51 + 16);
        __int16 v79 = 261;
        v76 = (int8x16_t *)v53;
        v77 = v52;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (void ***)&v76);
        if ((void)v80)
        {
          LODWORD(v76) = 3;
          v77 = "'";
          uint64_t v78 = 1;
          uint64_t v54 = &v76;
          unsigned int v55 = (char *)v82;
          if (v83 >= v84)
          {
            unint64_t v67 = v83 + 1;
            if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
            {
              int64_t v70 = (char *)&v76 - (unsigned char *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              unsigned int v55 = (char *)v82;
              uint64_t v54 = (int8x16_t **)((char *)v82 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              uint64_t v54 = &v76;
              unsigned int v55 = (char *)v82;
            }
          }
          __int16 v56 = &v55[24 * v83];
          long long v57 = *(_OWORD *)v54;
          *((void *)v56 + 2) = v54[2];
          *(_OWORD *)__int16 v56 = v57;
          ++v83;
          uint64_t v58 = v80;
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 24) = 0;
          if (v58) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
          }
        }
        else
        {
LABEL_61:
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 24) = 0;
        }
        if (v90)
        {
          uint64_t v59 = __p;
          if (__p)
          {
            v60 = v89;
            uint64_t v61 = __p;
            if (v89 != __p)
            {
              do
                v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              uint64_t v61 = __p;
            }
            v89 = v59;
            operator delete(v61);
          }
          uint64_t v36 = v86;
          if (!v86) {
            goto LABEL_76;
          }
          char v62 = v87;
          uint64_t v38 = v86;
          if (v87 == v86)
          {
LABEL_75:
            v87 = v36;
            operator delete(v38);
LABEL_76:
            if (v82 != v85) {
              free(v82);
            }
            return;
          }
          do
          {
            uint64_t v64 = *--v62;
            uint64_t v63 = v64;
            *char v62 = 0;
            if (v64) {
              MEMORY[0x21667D390](v63, 0x1000C8077774924);
            }
          }
          while (v62 != v36);
LABEL_74:
          uint64_t v38 = v86;
          goto LABEL_75;
        }
        return;
      }
    }
LABEL_29:
    uint64_t v32 = *(void *)(v28 + 8);
    if ((v29 & 0x80u) == 0) {
      uint64_t v32 = v30;
    }
    uint64_t v29 = v29;
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *(void *)(v28 + 16);
    }
    *(void *)a3 = v32;
    *(void *)(a3 + 8) = v29;
    *(_OWORD *)a4 = *(_OWORD *)(v28 + 32);
    *(void *)(a4 + 16) = *(void *)(v28 + 48);
    *(unsigned char *)(a4 + 24) = 1;
    return;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v8 + 56)))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    goto LABEL_6;
  }
  v76 = (int8x16_t *)"expected identifier key for 'resource' entry";
  __int16 v79 = 259;
  mlir::detail::Parser::emitError(a1, (uint64_t)&v76, &v80);
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 24) = 0;
  if ((void)v80) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
  }
  if (v90)
  {
    long long v33 = __p;
    if (__p)
    {
      uint64_t v34 = v89;
      char v35 = __p;
      if (v89 != __p)
      {
        do
          uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        char v35 = __p;
      }
      v89 = v33;
      operator delete(v35);
    }
    uint64_t v36 = v86;
    if (!v86) {
      goto LABEL_76;
    }
    uint64_t v37 = v87;
    uint64_t v38 = v86;
    if (v87 == v86) {
      goto LABEL_75;
    }
    do
    {
      uint64_t v40 = *--v37;
      uint64_t v39 = v40;
      void *v37 = 0;
      if (v40) {
        MEMORY[0x21667D390](v39, 0x1000C8077774924);
      }
    }
    while (v37 != v36);
    goto LABEL_74;
  }
}

void mlir::detail::Parser::parseResourceHandle(mlir::detail::Parser *this@<X0>, mlir::Dialect *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)
    && (int v6 = (void *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)) != 0)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    mlir::detail::Parser::parseResourceHandle((uint64_t)this, v6, (uint64_t)&v36, (uint64_t)a3);
  }
  else
  {
    __int16 v31 = 257;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)v30, &v36);
    if (!v36) {
      goto LABEL_11;
    }
    LODWORD(v32) = 3;
    long long v33 = "dialect '";
    uint64_t v34 = 9;
    BOOL v7 = &v32;
    uint64_t v8 = (char *)v38;
    if (v39 >= v40)
    {
      unint64_t v26 = v39 + 1;
      if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
      {
        int64_t v28 = (char *)&v32 - (unsigned char *)v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        uint64_t v8 = (char *)v38;
        BOOL v7 = (void ***)((char *)v38 + v28);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        BOOL v7 = &v32;
        uint64_t v8 = (char *)v38;
      }
    }
    int v9 = &v8[24 * v39];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)int v9 = v10;
    ++v39;
    if (!v36) {
      goto LABEL_11;
    }
    uint64_t v11 = (void **)*((void *)a2 + 1);
    uint64_t v12 = (const char *)*((void *)a2 + 2);
    __int16 v35 = 261;
    uint64_t v32 = v11;
    long long v33 = v12;
    mlir::Diagnostic::operator<<((uint64_t)&v37, &v32);
    if (v36)
    {
      LODWORD(v32) = 3;
      long long v33 = "' does not expect resource handles";
      uint64_t v34 = 34;
      uint64_t v13 = &v32;
      uint64_t v14 = (char *)v38;
      if (v39 >= v40)
      {
        unint64_t v27 = v39 + 1;
        if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
        {
          int64_t v29 = (char *)&v32 - (unsigned char *)v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          uint64_t v14 = (char *)v38;
          uint64_t v13 = (void ***)((char *)v38 + v29);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          uint64_t v13 = &v32;
          uint64_t v14 = (char *)v38;
        }
      }
      uint64_t v15 = &v14[24 * v39];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = v13[2];
      *(_OWORD *)uint64_t v15 = v16;
      ++v39;
      uint64_t v17 = v36;
      *a3 = 0;
      a3[24] = 0;
      if (v17) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
      }
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v46)
    {
      uint64_t v18 = __p;
      if (__p)
      {
        uint64_t v19 = v45;
        uint64_t v20 = __p;
        if (v45 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        long long v45 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v42;
      if (v42)
      {
        int v22 = v43;
        BOOL v23 = v42;
        if (v43 != v42)
        {
          do
          {
            uint64_t v25 = *--v22;
            uint64_t v24 = v25;
            void *v22 = 0;
            if (v25) {
              MEMORY[0x21667D390](v24, 0x1000C8077774924);
            }
          }
          while (v22 != v21);
          BOOL v23 = v42;
        }
        uint64_t v43 = v21;
        operator delete(v23);
      }
      if (v38 != v41) {
        free(v38);
      }
    }
  }
}

uint64_t mlir::detail::Parser::codeCompleteDialectOrElidedOpName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(v3 + 24);
  for (i = (char *)(a2 - 1); (unint64_t)i > v4; --i)
  {
    int v6 = *i;
    if (v6 == 10) {
      break;
    }
    BOOL v7 = memchr(" \t\r", v6, 3uLL);
    if (v7) {
      BOOL v8 = v7 - " \t\r" == -1;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  (*(void (**)(void, char *, void))(**(void **)(v3 + 136) + 16))(*(void *)(v3 + 136), &byte_211F4AA5D, 0);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(v10 + 144) + 16 * *(unsigned int *)(v10 + 152);
  uint64_t v12 = *(void *)(v11 - 8);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(void **)(v11 - 16);
  uint64_t v14 = memchr(v13, 46, *(void *)(v11 - 8));
  if (v14 && v14 - (unsigned char *)v13 != -1) {
    return 0;
  }
  (*(void (**)(void, void *, uint64_t))(**(void **)(v10 + 136) + 24))(*(void *)(v10 + 136), v13, v12);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteOptionalTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteAttribute(mlir::detail::Parser *this)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteType(mlir::detail::Parser *this)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteDialectSymbol(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 64))(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 80))(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

void mlir::parseAsmSourceFile(uint64_t **a1, uint64_t a2, uint64_t ***a3, mlir::AsmParserState *a4, mlir::AsmParserState *a5)
{
  v28[89] = *MEMORY[0x263EF8340];
  int v9 = *a3;
  uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)**a1 + 16))(**a1);
  uint64_t v12 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  v14[0] = 0;
  v14[1] = 0;
  v14[2] = 0x1000000000;
  v14[3] = 0;
  void v14[4] = 0;
  v14[5] = 0x1000000000;
  v14[6] = 0;
  v14[7] = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v21 = a3;
  uint64_t v13 = mlir::Lexer::Lexer(&v22, a1, *a3, (uint64_t)a5);
  mlir::Lexer::lexToken((mlir::Lexer *)v13, (uint64_t)v23);
  v23[4] = 0;
  v23[5] = 0;
  v23[3] = v14;
  int v24 = 0;
  uint64_t v25 = v27;
  uint64_t v26 = 0;
  v27[0] = a4;
  v27[1] = a5;
  v27[2] = (mlir::AsmParserState *)v28;
  v28[0] = "builtin";
  v28[1] = 7;
  v27[3] = (mlir::AsmParserState *)0x300000001;
  char v19 = 0;
  char v20 = 0;
  mlir::ModuleOp::create(v12);
}

void sub_211570444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  mlir::detail::SymbolState::~SymbolState((llvm **)va);
}

uint64_t sub_21157044C()
{
  return v0;
}

llvm::APFloatBase *std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](llvm::APFloatBase *result)
{
  uint64_t v1 = *(void *)result;
  *(void *)uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 - 8);
    if (v2)
    {
      uint64_t v3 = llvm::APFloatBase::PPCDoubleDouble(result);
      uint64_t v4 = 32 * v2;
      do
      {
        while (v3 == *(void **)(v1 + v4 - 24))
        {
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](v1 + v4 - 16, 0);
          v4 -= 32;
          if (!v4) {
            goto LABEL_7;
          }
        }
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(v1 + v4 - 24));
        v4 -= 32;
      }
      while (v4);
    }
LABEL_7:
    JUMPOUT(0x21667D390);
  }
  return result;
}

uint64_t anonymous namespace'::OperationParser::parseOperation(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v306 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  uint64_t v3 = v275;
  v273 = v275;
  uint64_t v274 = 0x100000000;
  v250 = 0;
  uint64_t v4 = *((void *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 6)
  {
    p_uint64_t EncodedSourceLocation = this;
    std::string::size_type v296 = (std::string::size_type)&v273;
    uint64_t v297 = (uint64_t)&v250;
      goto LABEL_289;
    while (1)
    {
      uint64_t v5 = *((void *)this + 1);
      if (*(_DWORD *)(v5 + 56) != 16) {
        break;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v276);
      *(std::string *)(*((void *)this + 1) + 56) = v276;
        goto LABEL_289;
    }
    v276.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected '=' after SSA name";
    LOWORD(v278) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 18, (uint64_t)&v276)) {
      goto LABEL_289;
    }
    uint64_t v4 = *((void *)this + 1);
  }
  long long v248 = *(_OWORD *)(v4 + 56);
  uint64_t v249 = *(void *)(v4 + 72);
  if (v248 == 3)
  {
LABEL_11:
    int v6 = v273;
    uint64_t v7 = v274;
    BOOL v8 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v4 + 56));
    uint64_t v9 = *((void *)this + 1);
    unint64_t v11 = *(const void **)(v9 + 64);
    std::string::size_type v10 = *(void *)(v9 + 72);
    v264[0] = v12;
    v264[1] = v13;
    if (!(_BYTE)v13)
    {
      uint64_t v23 = 0;
      goto LABEL_281;
    }
    v276.__r_.__value_.__r.__words[0] = *(void *)(v12 + 8);
    __s2 = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v276);
    std::string::size_type v15 = v14;
    unint64_t v294 = 0;
    uint64_t v16 = *(void **)(v264[0] + 16);
    BOOL v17 = v16 == &mlir::detail::TypeIDResolver<void,void>::id;
    BOOL v18 = v16 != &mlir::detail::TypeIDResolver<void,void>::id;
    unint64_t v19 = v264[0] & 0xFFFFFFFFFFFFFF00;
    uint64_t v20 = LOBYTE(v264[0]);
    if (v17) {
      uint64_t v20 = 0;
    }
    v289[0] = v20 | v19;
    v289[1] = v18;
    if (!v17)
    {
      v242 = v6;
      (*(void (**)(std::string *__return_ptr))(*(void *)(v20 | v19) + 40))(&v276);
      char v21 = v294;
      if (v294 >= 8)
      {
        if ((v294 & 4) != 0)
        {
          if ((v294 & 2) != 0) {
            int v22 = v292;
          }
          else {
            int v22 = (llvm **)v292[0];
          }
          (*(void (**)(llvm **))((v294 & 0xFFFFFFFFFFFFFFF8) + 16))(v22);
        }
        if ((v21 & 2) == 0) {
          llvm::deallocate_buffer(v292[0], v292[1]);
        }
      }
      unint64_t v294 = (unint64_t)__dst;
      if ((unint64_t)__dst >= 8)
      {
        if ((__dst & 2) != 0 && (__dst & 4) != 0)
        {
          (*(void (**)(llvm **, std::string *))(((unint64_t)__dst & 0xFFFFFFFFFFFFFFF8) + 8))(v292, &v276);
        }
        else
        {
          *(_OWORD *)v292 = *(_OWORD *)&v276.__r_.__value_.__l.__data_;
          unint64_t v293 = v276.__r_.__value_.__r.__words[2];
        }
      }
      char IsIsolatedFrom = mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(v289);
      uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v289[0] + 32);
      uint64_t v67 = v66;
      if (v66)
      {
        int64_t v68 = OCGSize;
        uint64_t v69 = (*(uint64_t (**)(void))(v66 + 24))();
        if (v70)
        {
          v71 = (char *)(*(uint64_t (**)(uint64_t))(v67 + 24))(v69);
          uint64_t v67 = v72;
          goto LABEL_121;
        }
        uint64_t v67 = 0;
      }
      else
      {
        int64_t v68 = OCGSize;
      }
LABEL_120:
      v71 = &byte_211F4AA5D;
LABEL_121:
      uint64_t v86 = *((void *)this + 1);
      uint64_t v87 = *(unsigned int *)(v86 + 152);
      if (v87 >= *(_DWORD *)(v86 + 156))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v86 + 144, (void *)(v86 + 160), v87 + 1, 16);
        LODWORD(v87) = *(_DWORD *)(v86 + 152);
      }
      v88 = (char **)(*(void *)(v86 + 144) + 16 * v87);
      *v88 = v71;
      v88[1] = (char *)v67;
      ++*(_DWORD *)(v86 + 152);
      v276.__r_.__value_.__r.__words[0] = *(void *)(v264[0] + 8);
      AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v276);
      llvm::PrettyStackTraceFormat::PrettyStackTraceFormat((llvm::PrettyStackTraceFormat *)v289, "MLIR Parser: custom op parser '%s'", AttrData);
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, v8);
      v90.n128_f64[0] = mlir::OperationState::OperationState(&v276, EncodedSourceLocation, v264[0]);
      uint64_t v91 = *(mlir::AsmParserState **)(*((void *)this + 1) + 128);
      if (v91) {
        mlir::AsmParserState::startOperationDefinition(v91, (const mlir::OperationName *)&v276.__r_.__value_.__r.__words[1]);
      }
      v252 = v8;
      uint64_t v253 = (uint64_t)this;
      char v254 = 0;
      v251 = (uint64_t (**)(void **))&unk_26C356E90;
      v255 = v242;
      uint64_t v256 = v7;
      v257 = llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>;
      v258 = v292;
      char v259 = IsIsolatedFrom;
      v260 = __s2;
      std::string::size_type v261 = v15;
      v262 = this;
      if ((v294 & 2) != 0) {
        v92 = v292;
      }
      else {
        v92 = (llvm **)v292[0];
      }
      uint64_t OCGSize = v68;
      if (!(*(unsigned __int8 (**)(llvm **, uint64_t (***)(void **), std::string *, __n128))(v294 & 0xFFFFFFFFFFFFFFF8))(v92, &v251, &v276, v90))
      {
        uint64_t v23 = 0;
        uint64_t v3 = v275;
        goto LABEL_163;
      }
      mlir::NamedAttrList::findDuplicate(&v280, v268);
      uint64_t v3 = v275;
      if (v268[16])
      {
        uint64_t v93 = v251[2]((void **)&v251);
        v266[0] = "attribute '";
        __int16 v267 = 259;
        ((void (*)(void **__return_ptr, uint64_t (***)(void **), uint64_t, void *))v251[3])(&p_EncodedSourceLocation, &v251, v93, v266);
        uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v268);
        v94 = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
        if (p_EncodedSourceLocation)
        {
          __int16 v272 = 261;
          v269 = v94;
          v270 = v95;
          mlir::Diagnostic::operator<<((uint64_t)&v296, &v269);
          if (p_EncodedSourceLocation)
          {
            LODWORD(v269) = 3;
            v270 = "' occurs more than once in the attribute list";
            uint64_t v271 = 45;
            v96 = &v269;
            v97 = (char *)v298;
            if (v299 >= HIDWORD(v299))
            {
              unint64_t v212 = v299 + 1;
              if (v298 <= &v269 && (char *)v298 + 24 * v299 > (char *)&v269)
              {
                int64_t v229 = (char *)&v269 - (unsigned char *)v298;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v212, 24);
                v97 = (char *)v298;
                v96 = (void ***)((char *)v298 + v229);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v212, 24);
                v96 = &v269;
                v97 = (char *)v298;
              }
            }
            v98 = &v97[24 * v299];
            long long v99 = *(_OWORD *)v96;
            *((void *)v98 + 2) = v96[2];
            *(_OWORD *)v98 = v99;
            LODWORD(v299) = v299 + 1;
          }
        }
        char v100 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&p_EncodedSourceLocation);
        if (p_EncodedSourceLocation) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_EncodedSourceLocation);
        }
        if (v305)
        {
          v101 = (void *)v303;
          if ((void)v303)
          {
            v102 = (void *)*((void *)&v303 + 1);
            v103 = (void *)v303;
            if (*((void *)&v303 + 1) != (void)v303)
            {
              do
                v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
              while (v102 != v101);
              v103 = (void *)v303;
            }
            *((void *)&v303 + 1) = v101;
            operator delete(v103);
          }
          v104 = (void *)v301;
          if ((void)v301)
          {
            v105 = (void *)*((void *)&v301 + 1);
            v106 = (void *)v301;
            if (*((void *)&v301 + 1) != (void)v301)
            {
              do
              {
                uint64_t v108 = *--v105;
                uint64_t v107 = v108;
                void *v105 = 0;
                if (v108) {
                  MEMORY[0x21667D390](v107, 0x1000C8077774924);
                }
              }
              while (v105 != v104);
              v106 = (void *)v301;
            }
            *((void *)&v301 + 1) = v104;
            operator delete(v106);
          }
          if (v298 != v300) {
            free(v298);
          }
        }
        uint64_t v23 = 0;
        if (!v100 || v254)
        {
LABEL_163:
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v251);
          p_uint64_t EncodedSourceLocation = &v297;
          std::string::size_type v296 = 0x400000000;
          unsigned int v110 = v287;
          if (v287 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_EncodedSourceLocation, &v297, v287, 8);
            unsigned int v110 = v287;
          }
          if (v110)
          {
            v111 = v286;
            v112 = &v286[v110];
            do
            {
              uint64_t v113 = *v111;
              if (*v111)
              {
                for (uint64_t i = *(void *)(v113 + 8); i != v113; uint64_t i = *(void *)(i + 8))
                {
                  if (i) {
                    v115 = (void *)(i - 8);
                  }
                  else {
                    v115 = 0;
                  }
                  mlir::Block::dropAllDefinedValueUses(v115);
                }
              }
              ++v111;
            }
            while (v111 != v112);
          }
          if (p_EncodedSourceLocation != &v297) {
            free(p_EncodedSourceLocation);
          }
          mlir::OperationState::~OperationState((mlir::OperationState *)&v276);
          v289[0] = &unk_26C35BC70;
          if (v290 != &v291) {
            free(v290);
          }
          llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v289);
          --*(_DWORD *)(*((void *)this + 1) + 152);
          unint64_t v116 = v294;
          if (v294 < 8) {
            goto LABEL_281;
          }
          goto LABEL_274;
        }
      }
      else if (v254)
      {
        goto LABEL_162;
      }
      uint64_t v109 = (uint64_t)v288;
      v269 = v288;
      v288 = 0;
      uint64_t v23 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v276);
      v266[0] = v23;
      {
        if (v109)
        {
          p_uint64_t EncodedSourceLocation = &EncodedSourceLocation;
          std::string::size_type v296 = (std::string::size_type)&v269;
          uint64_t v297 = (uint64_t)v266;
          else {
            uint64_t v23 = 0;
          }
        }
        goto LABEL_163;
      }
LABEL_162:
      uint64_t v23 = 0;
      goto LABEL_163;
    }
    v276.__r_.__value_.__r.__words[0] = *(void *)(v264[0] + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v276);
    if (Values)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)Values + 64))(&v276);
      if (v276.__r_.__value_.__s.__data_[16])
      {
        v242 = v6;
        unint64_t v26 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
            + 2;
        long long __dst = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
              + 2;
        char v27 = v294;
        if (v294 >= 8)
        {
          if ((v294 & 4) != 0)
          {
            if ((v294 & 2) != 0) {
              int64_t v28 = v292;
            }
            else {
              int64_t v28 = (llvm **)v292[0];
            }
            (*(void (**)(llvm **))((v294 & 0xFFFFFFFFFFFFFFF8) + 16))(v28);
          }
          if ((v27 & 2) == 0) {
            llvm::deallocate_buffer(v292[0], v292[1]);
          }
          unint64_t v26 = (unint64_t)__dst;
        }
        unint64_t v294 = v26;
        if (v26 >= 8)
        {
          if ((v26 & 2) != 0 && (v26 & 4) != 0)
          {
            (*(void (**)(uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 8))((uint64_t (**)(uint64_t, uint64_t))v292, (uint64_t)&v276, v25);
          }
          else
          {
            *(_OWORD *)v292 = *(_OWORD *)&v276.__r_.__value_.__l.__data_;
            unint64_t v293 = v276.__r_.__value_.__r.__words[2];
          }
        }
        int64_t v68 = OCGSize;
        uint64_t v67 = 0;
        char IsIsolatedFrom = 0;
        goto LABEL_120;
      }
      LOWORD(v255) = 257;
      uint64_t v50 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, v8);
      mlir::emitError(v50, (uint64_t)&v251, (uint64_t)&p_EncodedSourceLocation);
      if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
      }
      uint64_t v51 = p_EncodedSourceLocation;
      if (p_EncodedSourceLocation)
      {
        LODWORD(v276.__r_.__value_.__l.__data_) = 3;
        v276.__r_.__value_.__l.__size_ = (std::string::size_type)"custom op '";
        v276.__r_.__value_.__r.__words[2] = 11;
        std::string v52 = &v276;
        long long v53 = (char *)v298;
        if (v299 >= HIDWORD(v299))
        {
          unint64_t v220 = v299 + 1;
          if (v298 <= &v276 && (char *)v298 + 24 * v299 > (char *)&v276)
          {
            int64_t v235 = (char *)&v276 - (unsigned char *)v298;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v220, 24);
            long long v53 = (char *)v298;
            std::string v52 = (std::string *)((char *)v298 + v235);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v220, 24);
            std::string v52 = &v276;
            long long v53 = (char *)v298;
          }
        }
        uint64_t v54 = &v53[24 * v299];
        long long v55 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        *((void *)v54 + 2) = *((void *)&v52->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v54 = v55;
        LODWORD(v299) = v299 + 1;
        uint64_t v51 = p_EncodedSourceLocation;
        if (p_EncodedSourceLocation)
        {
          LOWORD(v278) = 261;
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v276.__r_.__value_.__l.__size_ = v10;
          mlir::Diagnostic::operator<<((uint64_t)&v296, (void ***)&v276);
          uint64_t v51 = p_EncodedSourceLocation;
          if (p_EncodedSourceLocation)
          {
            LODWORD(v276.__r_.__value_.__l.__data_) = 3;
            v276.__r_.__value_.__l.__size_ = (std::string::size_type)"' is unknown";
            v276.__r_.__value_.__r.__words[2] = 12;
            __int16 v56 = &v276;
            long long v57 = (char *)v298;
            if (v299 >= HIDWORD(v299))
            {
              unint64_t v226 = v299 + 1;
              if (v298 <= &v276 && (char *)v298 + 24 * v299 > (char *)&v276)
              {
                int64_t v240 = (char *)&v276 - (unsigned char *)v298;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v226, 24);
                long long v57 = (char *)v298;
                __int16 v56 = (std::string *)((char *)v298 + v240);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v226, 24);
                __int16 v56 = &v276;
                long long v57 = (char *)v298;
              }
            }
            uint64_t v58 = &v57[24 * v299];
            long long v59 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            *((void *)v58 + 2) = *((void *)&v56->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v58 = v59;
            LODWORD(v299) = v299 + 1;
            uint64_t v51 = p_EncodedSourceLocation;
          }
        }
      }
      v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      v276.__r_.__value_.__s.__data_[8] = 0;
      char v285 = 0;
      if (!v305)
      {
LABEL_228:
        mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
        if (p_EncodedSourceLocation) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_EncodedSourceLocation);
        }
        if (v305)
        {
          v134 = (void *)v303;
          if ((void)v303)
          {
            v135 = (void *)*((void *)&v303 + 1);
            v136 = (void *)v303;
            if (*((void *)&v303 + 1) != (void)v303)
            {
              do
                v135 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v135 - 1);
              while (v135 != v134);
              v136 = (void *)v303;
            }
            *((void *)&v303 + 1) = v134;
            operator delete(v136);
          }
          v137 = (void *)v301;
          if ((void)v301)
          {
            v138 = (void *)*((void *)&v301 + 1);
            v139 = (void *)v301;
            if (*((void *)&v301 + 1) != (void)v301)
            {
              do
              {
                uint64_t v141 = *--v138;
                uint64_t v140 = v141;
                void *v138 = 0;
                if (v141) {
                  MEMORY[0x21667D390](v140, 0x1000C8077774924);
                }
              }
              while (v138 != v137);
              v139 = (void *)v301;
            }
            *((void *)&v301 + 1) = v137;
            operator delete(v139);
          }
          if (v298 != v300) {
            free(v298);
          }
        }
        if (v10 != v15 || v10 && memcmp(v11, __s2, v10))
        {
          if (!v276.__r_.__value_.__r.__words[0]) {
            goto LABEL_257;
          }
          LODWORD(p_EncodedSourceLocation) = 3;
          std::string::size_type v296 = (std::string::size_type)" (tried '";
          uint64_t v297 = 9;
          p_p_uint64_t EncodedSourceLocation = &p_EncodedSourceLocation;
          v143 = (char *)__dst;
          if (v278 >= HIDWORD(v278))
          {
            unint64_t v221 = v278 + 1;
            if (__dst <= &p_EncodedSourceLocation
              && (char *)__dst + 24 * v278 > (char *)&p_EncodedSourceLocation)
            {
              int64_t v236 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v221, 24);
              v143 = (char *)__dst;
              p_p_uint64_t EncodedSourceLocation = (void **)((char *)__dst + v236);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v221, 24);
              p_p_uint64_t EncodedSourceLocation = &p_EncodedSourceLocation;
              v143 = (char *)__dst;
            }
          }
          v144 = &v143[24 * v278];
          long long v145 = *(_OWORD *)p_p_EncodedSourceLocation;
          *((void *)v144 + 2) = p_p_EncodedSourceLocation[2];
          *(_OWORD *)v144 = v145;
          LODWORD(v278) = v278 + 1;
          if (!v276.__r_.__value_.__r.__words[0]
            || (LOWORD(v299) = 261,
                p_uint64_t EncodedSourceLocation = __s2,
                std::string::size_type v296 = v15,
                mlir::Diagnostic::operator<<((uint64_t)&v276.__r_.__value_.__l.__size_, (void ***)&p_EncodedSourceLocation), !v276.__r_.__value_.__r.__words[0]))
          {
LABEL_257:
            if (v285)
            {
              v150 = __p[0];
              if (__p[0])
              {
                v151 = __p[1];
                v152 = __p[0];
                if (__p[1] != __p[0])
                {
                  do
                    v151 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v151 - 1);
                  while (v151 != v150);
                  v152 = __p[0];
                }
                __p[1] = v150;
                operator delete(v152);
              }
              v153 = (void *)v281;
              if ((void)v281)
              {
                v154 = (void *)*((void *)&v281 + 1);
                v155 = (void *)v281;
                if (*((void *)&v281 + 1) != (void)v281)
                {
                  do
                  {
                    uint64_t v157 = *--v154;
                    uint64_t v156 = v157;
                    void *v154 = 0;
                    if (v157) {
                      MEMORY[0x21667D390](v156, 0x1000C8077774924);
                    }
                  }
                  while (v154 != v153);
                  v155 = (void *)v281;
                }
                *((void *)&v281 + 1) = v153;
                operator delete(v155);
              }
              if (__dst != v279) {
                free(__dst);
              }
            }
            uint64_t v23 = 0;
            unint64_t v116 = v294;
            if (v294 < 8)
            {
LABEL_281:
              if (v23)
              {
                if (!v274)
                {
                  v163 = *(uint64_t **)(*((void *)this + 1) + 128);
                  if (v163)
                  {
                    mlir::Token::getLocRange((mlir::Token *)&v248);
                    MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
                    mlir::AsmParserState::finalizeOperationDefinition(v163, v23);
                  }
                  uint64_t v49 = 1;
                  goto LABEL_290;
                }
                v159 = (const char *)*(unsigned int *)(v23 + 36);
                if (v159)
                {
                  if (v250 == v159)
                  {
                    if (*(void *)(*((void *)this + 1) + 128))
                    {
                      LODWORD(p_EncodedSourceLocation) = 0;
                      v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276.__r_.__value_.__r.__words[2];
                      v276.__r_.__value_.__l.__size_ = 0x300000000;
                      if (v274 <= 3)
                      {
                        v160 = (char *)v273;
                        v161 = (char *)v273 + 32 * v274;
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, &v276.__r_.__value_.__r.__words[2], v274, 16);
                        if (!v274) {
                          goto LABEL_349;
                        }
                        v160 = (char *)v273;
                        v161 = (char *)v273 + 32 * v274;
                      }
                      int v199 = 0;
                      v200 = (uint64_t *)(v160 + 24);
                      do
                      {
                        int v201 = v276.__r_.__value_.__r.__words[1];
                        if (LODWORD(v276.__r_.__value_.__r.__words[1]) >= HIDWORD(v276.__r_.__value_.__r.__words[1]))
                        {
                          llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>((uint64_t)&v276, (unsigned int *)&p_EncodedSourceLocation, v200);
                        }
                        else
                        {
                          std::string::size_type v202 = v276.__r_.__value_.__r.__words[0] + 16 * LODWORD(v276.__r_.__value_.__r.__words[1]);
                          *(_DWORD *)std::string::size_type v202 = v199;
                          *(void *)(v202 + 8) = *v200;
                          LODWORD(v276.__r_.__value_.__r.__words[1]) = v201 + 1;
                        }
                        int v199 = p_EncodedSourceLocation + *((_DWORD *)v200 - 2);
                        LODWORD(p_EncodedSourceLocation) = v199;
                        v203 = (char *)(v200 + 1);
                        v200 += 4;
                      }
                      while (v203 != v161);
LABEL_349:
                      v204 = *(uint64_t **)(*((void *)this + 1) + 128);
                      mlir::Token::getLocRange((mlir::Token *)&v248);
                      MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
                      mlir::AsmParserState::finalizeOperationDefinition(v204, v23);
                    }
                    v198 = (char *)v273;
                    __s2a = (char *)v273 + 32 * v274;
                    uint64_t v205 = 0;
                    while (1)
                    {
                      v206 = v3;
                      uint64_t v207 = *((unsigned int *)v198 + 4);
                      if (v207) {
                        break;
                      }
                      uint64_t v209 = v205;
LABEL_359:
                      v198 += 32;
                      uint64_t v49 = 1;
                      uint64_t v205 = v209;
                      uint64_t v3 = v206;
                      if (v198 == __s2a) {
                        goto LABEL_290;
                      }
                    }
                    uint64_t v208 = 0;
                    while (1)
                    {
                      uint64_t v245 = *((void *)v198 + 3);
                      long long v246 = *(_OWORD *)v198;
                      int v247 = v208;
                      uint64_t v209 = (v205 + 1);
                      v210 = (uint64_t *)(v205 >= 6
                                       ? v23 - 96 - 24 * (v205 - 5)
                                       : v23 - 16 * v209);
                      ++v208;
                      LODWORD(v205) = v209;
                      if (v207 == v208) {
                        goto LABEL_359;
                      }
                    }
                    uint64_t v49 = 0;
                    uint64_t v3 = v206;
                    goto LABEL_290;
                  }
                  p_uint64_t EncodedSourceLocation = "operation defines ";
                  LOWORD(v299) = 259;
                  uint64_t v171 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, OCGSize);
                  mlir::emitError(v171, (uint64_t)&p_EncodedSourceLocation, (uint64_t)&v276);
                  if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
                    mlir::InFlightDiagnostic::abandon(&v276);
                  }
                  if (v276.__r_.__value_.__r.__words[0])
                  {
                    v172 = (const char *)*(unsigned int *)(v23 + 36);
                    LODWORD(v251) = 5;
                    v252 = v172;
                    v173 = (void **)&v251;
                    v174 = (char *)__dst;
                    if (v278 >= HIDWORD(v278))
                    {
                      unint64_t v211 = v278 + 1;
                      if (__dst <= &v251 && (char *)__dst + 24 * v278 > (char *)&v251)
                      {
                        int64_t v228 = (char *)&v251 - (unsigned char *)__dst;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v211, 24);
                        v174 = (char *)__dst;
                        v173 = (void **)((char *)__dst + v228);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v211, 24);
                        v173 = (void **)&v251;
                        v174 = (char *)__dst;
                      }
                    }
                    v175 = &v174[24 * v278];
                    long long v176 = *(_OWORD *)v173;
                    *((void *)v175 + 2) = v173[2];
                    *(_OWORD *)v175 = v176;
                    uint64_t v177 = (v278 + 1);
                    LODWORD(v278) = v278 + 1;
                    if (v276.__r_.__value_.__r.__words[0])
                    {
                      LODWORD(v251) = 3;
                      v252 = " results but was provided ";
                      uint64_t v253 = 26;
                      v178 = (void **)&v251;
                      v179 = (char *)__dst;
                      if (v177 >= HIDWORD(v278))
                      {
                        unint64_t v213 = v177 + 1;
                        BOOL v214 = (char *)__dst + 24 * v177 > (char *)&v251;
                        if (__dst <= &v251 && v214)
                        {
                          int64_t v230 = (char *)&v251 - (unsigned char *)__dst;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v213, 24);
                          v179 = (char *)__dst;
                          v178 = (void **)((char *)__dst + v230);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v213, 24);
                          v178 = (void **)&v251;
                          v179 = (char *)__dst;
                        }
                      }
                      v180 = &v179[24 * v278];
                      long long v181 = *(_OWORD *)v178;
                      *((void *)v180 + 2) = v178[2];
                      *(_OWORD *)v180 = v181;
                      uint64_t v182 = (v278 + 1);
                      LODWORD(v278) = v278 + 1;
                      if (v276.__r_.__value_.__r.__words[0])
                      {
                        LODWORD(v251) = 5;
                        v252 = v250;
                        v183 = (void **)&v251;
                        v184 = (char *)__dst;
                        if (v182 >= HIDWORD(v278))
                        {
                          unint64_t v217 = v182 + 1;
                          BOOL v218 = (char *)__dst + 24 * v182 > (char *)&v251;
                          if (__dst <= &v251 && v218)
                          {
                            int64_t v233 = (char *)&v251 - (unsigned char *)__dst;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v217, 24);
                            v184 = (char *)__dst;
                            v183 = (void **)((char *)__dst + v233);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v217, 24);
                            v183 = (void **)&v251;
                            v184 = (char *)__dst;
                          }
                        }
                        v185 = &v184[24 * v278];
                        long long v186 = *(_OWORD *)v183;
                        *((void *)v185 + 2) = v183[2];
                        *(_OWORD *)v185 = v186;
                        uint64_t v187 = (v278 + 1);
                        LODWORD(v278) = v278 + 1;
                        if (v276.__r_.__value_.__r.__words[0])
                        {
                          LODWORD(v251) = 3;
                          v252 = " to bind";
                          uint64_t v253 = 8;
                          v188 = (void **)&v251;
                          v189 = (char *)__dst;
                          if (v187 >= HIDWORD(v278))
                          {
                            unint64_t v222 = v187 + 1;
                            BOOL v223 = (char *)__dst + 24 * v187 > (char *)&v251;
                            if (__dst <= &v251 && v223)
                            {
                              int64_t v237 = (char *)&v251 - (unsigned char *)__dst;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v222, 24);
                              v189 = (char *)__dst;
                              v188 = (void **)((char *)__dst + v237);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v222, 24);
                              v188 = (void **)&v251;
                              v189 = (char *)__dst;
                            }
                          }
                          v190 = &v189[24 * v278];
                          long long v191 = *(_OWORD *)v188;
                          *((void *)v190 + 2) = v188[2];
                          *(_OWORD *)v190 = v191;
                          LODWORD(v278) = v278 + 1;
                        }
                      }
                    }
                  }
                  uint64_t v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v276);
                  if (v276.__r_.__value_.__r.__words[0]) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v276);
                  }
                  if (!v285) {
                    goto LABEL_290;
                  }
                  v192 = __p[0];
                  if (__p[0])
                  {
                    v193 = __p[1];
                    v194 = __p[0];
                    if (__p[1] != __p[0])
                    {
                      do
                        v193 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v193 - 1);
                      while (v193 != v192);
                      v194 = __p[0];
                    }
                    __p[1] = v192;
                    operator delete(v194);
                  }
                  v76 = (void *)v281;
                  if ((void)v281)
                  {
                    v195 = (void *)*((void *)&v281 + 1);
                    uint64_t v78 = (void *)v281;
                    if (*((void *)&v281 + 1) == (void)v281) {
                      goto LABEL_338;
                    }
                    do
                    {
                      uint64_t v197 = *--v195;
                      uint64_t v196 = v197;
                      void *v195 = 0;
                      if (v197) {
                        MEMORY[0x21667D390](v196, 0x1000C8077774924);
                      }
                    }
                    while (v195 != v76);
                    goto LABEL_337;
                  }
LABEL_339:
                  if (__dst != v279) {
                    free(__dst);
                  }
                  goto LABEL_290;
                }
                p_uint64_t EncodedSourceLocation = "cannot name an operation with no results";
                LOWORD(v299) = 259;
                uint64_t v164 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, OCGSize);
                mlir::emitError(v164, (uint64_t)&p_EncodedSourceLocation, (uint64_t)&v276);
                if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
                  mlir::InFlightDiagnostic::abandon(&v276);
                }
                uint64_t v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v276);
                if (v276.__r_.__value_.__r.__words[0]) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v276);
                }
                if (!v285) {
                  goto LABEL_290;
                }
                v165 = __p[0];
                if (__p[0])
                {
                  v166 = __p[1];
                  v167 = __p[0];
                  if (__p[1] != __p[0])
                  {
                    do
                      v166 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v166 - 1);
                    while (v166 != v165);
                    v167 = __p[0];
                  }
                  __p[1] = v165;
                  operator delete(v167);
                }
                v76 = (void *)v281;
                if (!(void)v281) {
                  goto LABEL_339;
                }
                v168 = (void *)*((void *)&v281 + 1);
                uint64_t v78 = (void *)v281;
                if (*((void *)&v281 + 1) == (void)v281) {
                  goto LABEL_338;
                }
                do
                {
                  uint64_t v170 = *--v168;
                  uint64_t v169 = v170;
                  void *v168 = 0;
                  if (v170) {
                    MEMORY[0x21667D390](v169, 0x1000C8077774924);
                  }
                }
                while (v168 != v76);
LABEL_337:
                uint64_t v78 = (void *)v281;
LABEL_338:
                *((void *)&v281 + 1) = v76;
                operator delete(v78);
                goto LABEL_339;
              }
LABEL_289:
              uint64_t v49 = 0;
              goto LABEL_290;
            }
LABEL_274:
            if ((v116 & 4) != 0)
            {
              if ((v116 & 2) != 0) {
                v158 = v292;
              }
              else {
                v158 = (llvm **)v292[0];
              }
              (*(void (**)(llvm **))((v116 & 0xFFFFFFFFFFFFFFF8) + 16))(v158);
            }
            if ((v116 & 2) == 0) {
              llvm::deallocate_buffer(v292[0], v292[1]);
            }
            goto LABEL_281;
          }
          LODWORD(p_EncodedSourceLocation) = 3;
          std::string::size_type v296 = (std::string::size_type)"' as well)";
          uint64_t v297 = 10;
          v146 = &p_EncodedSourceLocation;
          v147 = (char *)__dst;
          if (v278 >= HIDWORD(v278))
          {
            unint64_t v227 = v278 + 1;
            if (__dst <= &p_EncodedSourceLocation
              && (char *)__dst + 24 * v278 > (char *)&p_EncodedSourceLocation)
            {
              int64_t v241 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v227, 24);
              v147 = (char *)__dst;
              v146 = (void **)((char *)__dst + v241);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v227, 24);
              v146 = &p_EncodedSourceLocation;
              v147 = (char *)__dst;
            }
          }
          v148 = &v147[24 * v278];
          long long v149 = *(_OWORD *)v146;
          *((void *)v148 + 2) = v146[2];
          *(_OWORD *)v148 = v149;
          LODWORD(v278) = v278 + 1;
        }
        if (v276.__r_.__value_.__r.__words[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v276);
        }
        goto LABEL_257;
      }
      v60 = OCGSize;
      v276.__r_.__value_.__l.__size_ = v296;
      int v61 = v299;
      LODWORD(v276.__r_.__value_.__r.__words[2]) = v297;
      char v62 = v279;
      long long __dst = v279;
      uint64_t v278 = 0x400000000;
      if (!v299)
      {
        int v64 = 1;
        goto LABEL_224;
      }
      uint64_t v63 = v300;
      if (v298 != v300)
      {
        long long __dst = v298;
        uint64_t v278 = v299;
        v298 = v300;
        HIDWORD(v299) = 0;
        int v64 = 1;
LABEL_223:
        LODWORD(v299) = 0;
LABEL_224:
        uint64_t OCGSize = v60;
        long long v281 = v301;
        uint64_t v282 = v302;
        long long v301 = 0uLL;
        *(_OWORD *)std::string __p = v303;
        uint64_t v284 = v304;
        uint64_t v302 = 0;
        long long v303 = 0uLL;
        uint64_t v304 = 0;
        char v285 = 1;
        if (v64)
        {
          if (v298 != v300) {
            free(v298);
          }
          unsigned __int8 v305 = 0;
        }
        goto LABEL_228;
      }
      if (v299 < 5)
      {
        uint64_t v117 = v299;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v299, 24);
        uint64_t v117 = v299;
        if (!v299)
        {
LABEL_222:
          LODWORD(v278) = v61;
          int v64 = v305;
          goto LABEL_223;
        }
        uint64_t v63 = v298;
        char v62 = __dst;
      }
      memcpy(v62, v63, 24 * v117);
      goto LABEL_222;
    }
    LOWORD(v255) = 257;
    uint64_t v33 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, v8);
    mlir::emitError(v33, (uint64_t)&v251, (uint64_t)&p_EncodedSourceLocation);
    if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
    }
    if (p_EncodedSourceLocation)
    {
      LODWORD(v276.__r_.__value_.__l.__data_) = 3;
      v276.__r_.__value_.__r.__words[2] = 9;
      uint64_t v34 = &v276;
      __int16 v35 = (char *)v298;
      if (v299 >= HIDWORD(v299))
      {
        unint64_t v215 = v299 + 1;
        if (v298 <= &v276 && (char *)v298 + 24 * v299 > (char *)&v276)
        {
          int64_t v231 = (char *)&v276 - (unsigned char *)v298;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v215, 24);
          __int16 v35 = (char *)v298;
          uint64_t v34 = (std::string *)((char *)v298 + v231);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v215, 24);
          uint64_t v34 = &v276;
          __int16 v35 = (char *)v298;
        }
      }
      uint64_t v36 = &v35[24 * v299];
      long long v37 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *((void *)v36 + 2) = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v36 = v37;
      LODWORD(v299) = v299 + 1;
    }
    uint64_t DialectNamespace = mlir::OperationName::getDialectNamespace((mlir::OperationName *)v264);
    unsigned int v40 = p_EncodedSourceLocation;
    if (p_EncodedSourceLocation)
    {
      LOWORD(v278) = 261;
      v276.__r_.__value_.__r.__words[0] = DialectNamespace;
      v276.__r_.__value_.__l.__size_ = v39;
      mlir::Diagnostic::operator<<((uint64_t)&v296, (void ***)&v276);
      unsigned int v40 = p_EncodedSourceLocation;
      if (p_EncodedSourceLocation)
      {
        LODWORD(v276.__r_.__value_.__l.__data_) = 3;
        v276.__r_.__value_.__l.__size_ = (std::string::size_type)"' not found for custom op '";
        v276.__r_.__value_.__r.__words[2] = 27;
        uint64_t v41 = &v276;
        char v42 = (char *)v298;
        if (v299 >= HIDWORD(v299))
        {
          unint64_t v219 = v299 + 1;
          if (v298 <= &v276 && (char *)v298 + 24 * v299 > (char *)&v276)
          {
            int64_t v234 = (char *)&v276 - (unsigned char *)v298;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v219, 24);
            char v42 = (char *)v298;
            uint64_t v41 = (std::string *)((char *)v298 + v234);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v219, 24);
            uint64_t v41 = &v276;
            char v42 = (char *)v298;
          }
        }
        uint64_t v43 = &v42[24 * v299];
        long long v44 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        *((void *)v43 + 2) = *((void *)&v41->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v43 = v44;
        LODWORD(v299) = v299 + 1;
        unsigned int v40 = p_EncodedSourceLocation;
        if (p_EncodedSourceLocation)
        {
          LOWORD(v278) = 261;
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v276.__r_.__value_.__l.__size_ = v10;
          mlir::Diagnostic::operator<<((uint64_t)&v296, (void ***)&v276);
          unsigned int v40 = p_EncodedSourceLocation;
          if (p_EncodedSourceLocation)
          {
            LODWORD(v276.__r_.__value_.__l.__data_) = 3;
            v276.__r_.__value_.__l.__size_ = (std::string::size_type)"' ";
            v276.__r_.__value_.__r.__words[2] = 2;
            long long v45 = &v276;
            char v46 = (char *)v298;
            if (v299 >= HIDWORD(v299))
            {
              unint64_t v225 = v299 + 1;
              if (v298 <= &v276 && (char *)v298 + 24 * v299 > (char *)&v276)
              {
                int64_t v239 = (char *)&v276 - (unsigned char *)v298;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v225, 24);
                char v46 = (char *)v298;
                long long v45 = (std::string *)((char *)v298 + v239);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v298, v300, v225, 24);
                long long v45 = &v276;
                char v46 = (char *)v298;
              }
            }
            uint64_t v47 = &v46[24 * v299];
            long long v48 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            *((void *)v47 + 2) = *((void *)&v45->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v47 = v48;
            LODWORD(v299) = v299 + 1;
            unsigned int v40 = p_EncodedSourceLocation;
          }
        }
      }
    }
    v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v276.__r_.__value_.__s.__data_[8] = 0;
    char v285 = 0;
    if (!v305)
    {
LABEL_192:
      mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
      if (p_EncodedSourceLocation) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_EncodedSourceLocation);
      }
      if (v305)
      {
        v118 = (void *)v303;
        if ((void)v303)
        {
          v119 = (void *)*((void *)&v303 + 1);
          v120 = (void *)v303;
          if (*((void *)&v303 + 1) != (void)v303)
          {
            do
              v119 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v119 - 1);
            while (v119 != v118);
            v120 = (void *)v303;
          }
          *((void *)&v303 + 1) = v118;
          operator delete(v120);
        }
        v121 = (void *)v301;
        if ((void)v301)
        {
          v122 = (void *)*((void *)&v301 + 1);
          v123 = (void *)v301;
          if (*((void *)&v301 + 1) != (void)v301)
          {
            do
            {
              uint64_t v125 = *--v122;
              uint64_t v124 = v125;
              void *v122 = 0;
              if (v125) {
                MEMORY[0x21667D390](v124, 0x1000C8077774924);
              }
            }
            while (v122 != v121);
            v123 = (void *)v301;
          }
          *((void *)&v301 + 1) = v121;
          operator delete(v123);
        }
        if (v298 != v300) {
          free(v298);
        }
      }
      if ((v10 != v15 || v10 && memcmp(v11, __s2, v10)) && v276.__r_.__value_.__r.__words[0])
      {
        LODWORD(p_EncodedSourceLocation) = 3;
        std::string::size_type v296 = (std::string::size_type)" (tried '";
        uint64_t v297 = 9;
        v126 = &p_EncodedSourceLocation;
        v127 = (char *)__dst;
        if (v278 >= HIDWORD(v278))
        {
          unint64_t v216 = v278 + 1;
          if (__dst <= &p_EncodedSourceLocation
            && (char *)__dst + 24 * v278 > (char *)&p_EncodedSourceLocation)
          {
            int64_t v232 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v216, 24);
            v127 = (char *)__dst;
            v126 = (void **)((char *)__dst + v232);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v216, 24);
            v126 = &p_EncodedSourceLocation;
            v127 = (char *)__dst;
          }
        }
        v128 = &v127[24 * v278];
        long long v129 = *(_OWORD *)v126;
        *((void *)v128 + 2) = v126[2];
        *(_OWORD *)v128 = v129;
        LODWORD(v278) = v278 + 1;
        if (v276.__r_.__value_.__r.__words[0])
        {
          LOWORD(v299) = 261;
          p_uint64_t EncodedSourceLocation = __s2;
          std::string::size_type v296 = v15;
          mlir::Diagnostic::operator<<((uint64_t)&v276.__r_.__value_.__l.__size_, (void ***)&p_EncodedSourceLocation);
          if (v276.__r_.__value_.__r.__words[0])
          {
            LODWORD(p_EncodedSourceLocation) = 3;
            std::string::size_type v296 = (std::string::size_type)"' as well)";
            uint64_t v297 = 10;
            v130 = &p_EncodedSourceLocation;
            v131 = (char *)__dst;
            if (v278 >= HIDWORD(v278))
            {
              unint64_t v224 = v278 + 1;
              if (__dst <= &p_EncodedSourceLocation
                && (char *)__dst + 24 * v278 > (char *)&p_EncodedSourceLocation)
              {
                int64_t v238 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v224, 24);
                v131 = (char *)__dst;
                v130 = (void **)((char *)__dst + v238);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v224, 24);
                v130 = &p_EncodedSourceLocation;
                v131 = (char *)__dst;
              }
            }
            v132 = &v131[24 * v278];
            long long v133 = *(_OWORD *)v130;
            *((void *)v132 + 2) = v130[2];
            *(_OWORD *)v132 = v133;
            LODWORD(v278) = v278 + 1;
          }
        }
      }
      mlir::Diagnostic::attachNote();
    }
    v276.__r_.__value_.__l.__size_ = v296;
    int v81 = v299;
    LODWORD(v276.__r_.__value_.__r.__words[2]) = v297;
    v82 = v279;
    long long __dst = v279;
    uint64_t v278 = 0x400000000;
    if (!v299)
    {
      int v84 = 1;
      goto LABEL_188;
    }
    unsigned int v83 = v300;
    if (v298 != v300)
    {
      long long __dst = v298;
      uint64_t v278 = v299;
      v298 = v300;
      HIDWORD(v299) = 0;
      int v84 = 1;
LABEL_187:
      LODWORD(v299) = 0;
LABEL_188:
      long long v281 = v301;
      uint64_t v282 = v302;
      long long v301 = 0uLL;
      *(_OWORD *)std::string __p = v303;
      uint64_t v284 = v304;
      uint64_t v302 = 0;
      long long v303 = 0uLL;
      uint64_t v304 = 0;
      char v285 = 1;
      if (v84)
      {
        if (v298 != v300) {
          free(v298);
        }
        unsigned __int8 v305 = 0;
      }
      goto LABEL_192;
    }
    if (v299 < 5)
    {
      uint64_t v85 = v299;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v279, v299, 24);
      uint64_t v85 = v299;
      if (!v299)
      {
LABEL_186:
        LODWORD(v278) = v81;
        int v84 = v305;
        goto LABEL_187;
      }
      unsigned int v83 = v298;
      v82 = __dst;
    }
    memcpy(v82, v83, 24 * v85);
    goto LABEL_186;
  }
  if (mlir::Token::isKeyword((mlir::Token *)&v248))
  {
    uint64_t v4 = *((void *)this + 1);
    goto LABEL_11;
  }
  if (v248 == 11)
  {
    goto LABEL_281;
  }
  if (mlir::Token::isCodeCompletionFor((uint64_t)&v248, 11))
  {
    int64_t v29 = &v276;
    mlir::Token::getStringValue((mlir::Token *)&v248, &v276);
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v29 = (std::string *)v276.__r_.__value_.__r.__words[0];
    }
    std::string::size_type size = HIBYTE(v276.__r_.__value_.__r.__words[2]);
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v276.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (v29->__r_.__value_.__s.__data_[size - 1] == 46)
      {
        size_t v31 = size >= size - 1 ? size - 1 : size;
        if (v31)
        {
          uint64_t v32 = memchr(v29, 46, v31);
          if (!v32 || v32 - (unsigned char *)v29 == -1) {
            (*(void (**)(void, std::string *, size_t))(**(void **)(*((void *)this + 1) + 136) + 24))(*(void *)(*((void *)this + 1) + 136), v29, v31);
          }
        }
      }
    }
    else
    {
      (*(void (**)(void, char *, void))(**(void **)(*((void *)this + 1) + 136) + 16))(*(void *)(*((void *)this + 1) + 136), &byte_211F4AA5D, 0);
    }
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v276.__r_.__value_.__l.__data_);
    }
    goto LABEL_289;
  }
  if (v248 == 2)
  {
    uint64_t v49 = mlir::detail::Parser::codeCompleteDialectOrElidedOpName((uint64_t)this, (uint64_t)OCGSize);
    goto LABEL_290;
  }
  p_uint64_t EncodedSourceLocation = "expected operation name in quotes";
  LOWORD(v299) = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&p_EncodedSourceLocation, &v276);
  uint64_t v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v276);
  if (v276.__r_.__value_.__r.__words[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v276);
  }
  if (v285)
  {
    uint64_t v73 = __p[0];
    if (__p[0])
    {
      char v74 = __p[1];
      v75 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          char v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
        while (v74 != v73);
        v75 = __p[0];
      }
      __p[1] = v73;
      operator delete(v75);
    }
    v76 = (void *)v281;
    if (!(void)v281) {
      goto LABEL_339;
    }
    v77 = (void *)*((void *)&v281 + 1);
    uint64_t v78 = (void *)v281;
    if (*((void *)&v281 + 1) == (void)v281) {
      goto LABEL_338;
    }
    do
    {
      uint64_t v80 = *--v77;
      uint64_t v79 = v80;
      void *v77 = 0;
      if (v80) {
        MEMORY[0x21667D390](v79, 0x1000C8077774924);
      }
    }
    while (v77 != v76);
    goto LABEL_337;
  }
LABEL_290:
  if (v273 != v3) {
    free(v273);
  }
  return v49;
}

void anonymous namespace'::OperationParser::pushSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unint64_t *)((char *)this + 208);
  unint64_t v2 = *((void *)this + 26);
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v13) = 0;
  uint64_t v4 = *((unsigned int *)this + 54);
  uint64_t v5 = v12;
  if (v4 >= *((_DWORD *)this + 55))
  {
    unint64_t v9 = v4 + 1;
    BOOL v10 = v2 + 24 * v4 > (unint64_t)v12;
    if (v2 <= (unint64_t)v12 && v10)
    {
      unint64_t v11 = (char *)v12 - v2;
      unint64_t v2 = *v3;
      uint64_t v5 = (llvm **)&v11[*v3];
    }
    else
    {
      unint64_t v2 = *v3;
      uint64_t v5 = v12;
    }
  }
  uint64_t v6 = v2 + 24 * *((unsigned int *)this + 54);
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = *v5;
  *uint64_t v5 = 0;
  *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = 0;
  int v7 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = *((_DWORD *)v5 + 3);
  *((_DWORD *)v5 + 3) = v7;
  int v8 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = v8;
  ++*((_DWORD *)this + 54);
  llvm::deallocate_buffer(v12[0], (void *)(32 * v13));
}

void anonymous namespace'::OperationParser::IsolatedSSANameScope::~IsolatedSSANameScope(_anonymous_namespace_::OperationParser::IsolatedSSANameScope *this)
{
  unint64_t v2 = (void **)*((void *)this + 3);
  unsigned int v3 = *((_DWORD *)this + 8);
  if (v3)
  {
    uint64_t v4 = &v2[3 * v3];
    do
    {
      uint64_t v5 = v4;
      v4 -= 3;
      if (*((_DWORD *)v5 - 3))
      {
        uint64_t v6 = *((unsigned int *)v5 - 4);
        if (v6)
        {
          uint64_t v7 = 0;
          do
          {
            int v8 = *(llvm **)((char *)*v4 + v7);
            if (v8 != (llvm *)-8 && v8 != 0) {
              llvm::deallocate_buffer(v8, (void *)(*(void *)v8 + 9));
            }
            v7 += 8;
          }
          while (8 * v6 != v7);
        }
      }
      free(*v4);
    }
    while (v4 != v2);
    unint64_t v2 = (void **)*((void *)this + 3);
  }
  if (v2 != (void **)((char *)this + 40)) {
    free(v2);
  }
  if (*((_DWORD *)this + 3))
  {
    uint64_t v10 = *((unsigned int *)this + 2);
    if (v10)
    {
      uint64_t v11 = 0;
      do
      {
        unint64_t v12 = *(llvm **)(*(void *)this + v11);
        if (v12 != (llvm *)-8 && v12 != 0)
        {
          uint64_t v15 = *(void *)v12;
          uint64_t v14 = (void *)*((void *)v12 + 1);
          if (v14 != (void *)((char *)v12 + 24)) {
            free(v14);
          }
          llvm::deallocate_buffer(v12, (void *)(v15 + 41));
        }
        v11 += 8;
      }
      while (8 * v10 != v11);
    }
  }
  free(*(void **)this);
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unsigned int v3 = (char *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(char **)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    int v8 = &v6[24 * v7];
    unint64_t v9 = v4;
    do
    {
      *unint64_t v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      *unint64_t v9 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      int v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      int v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    uint64_t v6 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12) {
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(32 * *(unsigned int *)&v6[24 * v12 - 8]));
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unsigned int v3 = (char *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(char **)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    int v8 = &v6[24 * v7];
    unint64_t v9 = v4;
    do
    {
      *unint64_t v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      *unint64_t v9 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      int v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      int v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    uint64_t v6 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12) {
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(16 * *(unsigned int *)&v6[24 * v12 - 8]));
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<anonymous namespace'::OperationParser::IsolatedSSANameScope,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = 0;
  unsigned int v3 = (char *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 88, &v15);
  uint64_t v5 = *(char **)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = 0;
    int v8 = &v5[88 * v6];
    do
    {
      unint64_t v9 = &v5[v7];
      int v10 = &v4[v7];
      *(void *)int v10 = *(void *)&v5[v7];
      *(_OWORD *)(v10 + 8) = *(_OWORD *)&v5[v7 + 8];
      *(void *)unint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      *((void *)v10 + 3) = &v4[v7 + 40];
      *(void *)&v4[v7 + 32] = 0x200000000;
      if (*(_DWORD *)&v5[v7 + 32]) {
        llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=((uint64_t)&v4[v7 + 24], (uint64_t)(v9 + 24));
      }
      v7 += 88;
    }
    while (v9 + 88 != v8);
    uint64_t v5 = *(char **)a1;
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = 88 * v11;
      int v13 = v5 - 88;
      do
      {
        v12 -= 88;
      }
      while (v12);
      uint64_t v5 = *(char **)a1;
    }
  }
  int v14 = v15;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void ***)a2;
    if (*(void *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(a1, a2);
      return a1;
    }
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      int v14 = *(void ***)a1;
      if (v5)
      {
        unint64_t v15 = &v4[3 * v5];
        do
        {
          uint64_t v16 = *v4;
          unsigned int v17 = *((_DWORD *)v4 + 4);
          BOOL v18 = v4[1];
          *uint64_t v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          unint64_t v19 = (llvm **)*v14;
          *int v14 = v16;
          uint64_t v20 = *((unsigned int *)v14 + 2);
          LODWORD(v16) = *((_DWORD *)v14 + 3);
          v14[1] = v18;
          *((_DWORD *)v14 + 4) = v17;
          if (v16 && v20)
          {
            char v21 = v19;
            do
            {
              int v22 = *v21;
              if (*v21 != (llvm *)-8 && v22 != 0) {
                llvm::deallocate_buffer(v22, (void *)(*(void *)v22 + 9));
              }
              ++v21;
              --v20;
            }
            while (v20);
          }
          free(v19);
          v4 += 3;
          v14 += 3;
        }
        while (v4 != v15);
        int v24 = v14;
        int v14 = *(void ***)a1;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        int v24 = *(void ***)a1;
      }
      for (uint64_t i = &v14[3 * v6]; i != v24; free(*i))
      {
        std::string::size_type v39 = i;
        i -= 3;
        if (*((_DWORD *)v39 - 3))
        {
          uint64_t v40 = *((unsigned int *)v39 - 4);
          if (v40)
          {
            uint64_t v41 = 0;
            do
            {
              char v42 = *(llvm **)((char *)*i + v41);
              if (v42 != (llvm *)-8 && v42 != 0) {
                llvm::deallocate_buffer(v42, (void *)(*(void *)v42 + 9));
              }
              v41 += 8;
            }
            while (8 * v40 != v41);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      unsigned int v44 = *(_DWORD *)(a2 + 8);
      if (v44)
      {
        long long v45 = *(void ***)a2;
        char v46 = (void **)(*(void *)a2 + 24 * v44);
        do
        {
          uint64_t v47 = v46;
          v46 -= 3;
          if (*((_DWORD *)v47 - 3))
          {
            uint64_t v48 = *((unsigned int *)v47 - 4);
            if (v48)
            {
              uint64_t v49 = 0;
              do
              {
                uint64_t v50 = *(llvm **)((char *)*v46 + v49);
                if (v50 != (llvm *)-8 && v50 != 0) {
                  llvm::deallocate_buffer(v50, (void *)(*(void *)v50 + 9));
                }
                v49 += 8;
              }
              while (8 * v48 != v49);
            }
          }
          free(*v46);
        }
        while (v46 != v45);
      }
      goto LABEL_90;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      uint64_t v25 = *(unsigned int **)a1;
      if (v6)
      {
        unint64_t v26 = &v4[3 * v6];
        do
        {
          char v27 = *v4;
          unsigned int v28 = *((_DWORD *)v4 + 4);
          int64_t v29 = v4[1];
          *uint64_t v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          uint64_t v30 = *(llvm ***)v25;
          *(void *)uint64_t v25 = v27;
          uint64_t v31 = v25[2];
          LODWORD(v27) = v25[3];
          *((void *)v25 + 1) = v29;
          v25[4] = v28;
          if (v27 && v31)
          {
            uint64_t v32 = v30;
            do
            {
              uint64_t v33 = *v32;
              if (*v32 != (llvm *)-8 && v33 != 0) {
                llvm::deallocate_buffer(v33, (void *)(*(void *)v33 + 9));
              }
              ++v32;
              --v31;
            }
            while (v31);
          }
          free(v30);
          v4 += 3;
          v25 += 6;
        }
        while (v4 != v26);
        uint64_t v25 = *(unsigned int **)a1;
        uint64_t v36 = *(void ***)a2;
        uint64_t v37 = *(unsigned int *)(a2 + 8);
        if (v6 == v37) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v36 = *(void ***)a2;
        LODWORD(v37) = *(_DWORD *)(a2 + 8);
        if (!v37) {
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *(void ***)a1;
        int v8 = (void **)(*(void *)a1 + 24 * v6);
        do
        {
          unint64_t v9 = v8;
          v8 -= 3;
          if (*((_DWORD *)v9 - 3))
          {
            uint64_t v10 = *((unsigned int *)v9 - 4);
            if (v10)
            {
              uint64_t v11 = 0;
              do
              {
                uint64_t v12 = *(llvm **)((char *)*v8 + v11);
                if (v12 != (llvm *)-8 && v12 != 0) {
                  llvm::deallocate_buffer(v12, (void *)(*(void *)v12 + 9));
                }
                v11 += 8;
              }
              while (8 * v10 != v11);
            }
          }
          free(*v8);
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      unint64_t v63 = 0;
      uint64_t v25 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v63);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v25);
      int v35 = v63;
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      uint64_t v6 = 0;
      *(void *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      uint64_t v36 = *(void ***)a2;
      LODWORD(v37) = *(_DWORD *)(a2 + 8);
      if (!v37) {
        goto LABEL_78;
      }
    }
    std::string v52 = &v36[3 * v37];
    long long v53 = &v25[6 * v6];
    uint64_t v54 = &v36[3 * v6];
    do
    {
      *(void *)long long v53 = *v54;
      *(_OWORD *)(v53 + 2) = *(_OWORD *)(v54 + 1);
      *uint64_t v54 = 0;
      v54[1] = 0;
      *((_DWORD *)v54 + 4) = 0;
      v54 += 3;
      v53 += 6;
    }
    while (v54 != v52);
    uint64_t v36 = *(void ***)a2;
LABEL_78:
    *(_DWORD *)(a1 + 8) = v5;
    unsigned int v55 = *(_DWORD *)(a2 + 8);
    if (v55)
    {
      __int16 v56 = &v36[3 * v55];
      do
      {
        long long v57 = v56;
        v56 -= 3;
        if (*((_DWORD *)v57 - 3))
        {
          uint64_t v58 = *((unsigned int *)v57 - 4);
          if (v58)
          {
            uint64_t v59 = 0;
            do
            {
              v60 = *(llvm **)((char *)*v56 + v59);
              if (v60 != (llvm *)-8 && v60 != 0) {
                llvm::deallocate_buffer(v60, (void *)(*(void *)v60 + 9));
              }
              v59 += 8;
            }
            while (8 * v58 != v59);
          }
        }
        free(*v56);
      }
      while (v56 != v36);
    }
LABEL_90:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = &v4[3 * v5];
    do
    {
      uint64_t v7 = v6;
      v6 -= 3;
      if (*((_DWORD *)v7 - 3))
      {
        uint64_t v8 = *((unsigned int *)v7 - 4);
        if (v8)
        {
          uint64_t v9 = 0;
          do
          {
            uint64_t v10 = *(llvm **)((char *)*v6 + v9);
            if (v10 != (llvm *)-8 && v10 != 0) {
              llvm::deallocate_buffer(v10, (void *)(*(void *)v10 + 9));
            }
            v9 += 8;
          }
          while (8 * v8 != v9);
        }
      }
      free(*v6);
    }
    while (v6 != v4);
    uint64_t v4 = *(void ***)a1;
  }
  if (v4 != (void **)(a1 + 16)) {
    free(v4);
  }
  *(void *)a1 = *(void *)a2;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    unsigned int v3 = *(void ***)a1;
    uint64_t v4 = *(void *)a1 + 24 * v2;
    do
    {
      *(void *)a2 = *v3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 1);
      char *v3 = 0;
      v3[1] = 0;
      *((_DWORD *)v3 + 4) = 0;
      v3 += 3;
      a2 += 24;
    }
    while (v3 != (void **)v4);
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      uint64_t v6 = *(void ***)a1;
      uint64_t v7 = (void **)(*(void *)a1 + 24 * v5);
      do
      {
        uint64_t v8 = v7;
        v7 -= 3;
        if (*((_DWORD *)v8 - 3))
        {
          uint64_t v9 = *((unsigned int *)v8 - 4);
          if (v9)
          {
            uint64_t v10 = 0;
            do
            {
              uint64_t v11 = *(llvm **)((char *)*v7 + v10);
              if (v11 != (llvm *)-8 && v11 != 0) {
                llvm::deallocate_buffer(v11, (void *)(*(void *)v11 + 9));
              }
              v10 += 8;
            }
            while (8 * v9 != v10);
          }
        }
        free(*v7);
      }
      while (v7 != v6);
    }
  }
}

char *llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 24 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - *(void *)a1) >> 3);
      unint64_t v17 = 0;
      uint64_t v14 = a1 + 16;
      unint64_t v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      int v16 = v17;
      if (*(void *)a1 != v14) {
        free(*(void **)a1);
      }
      *(void *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[24 * v13];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v10 = a1 + 16;
      uint64_t v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      int v12 = v17;
      if (*(void *)a1 != v10) {
        free(*(void **)a1);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t anonymous namespace'::OperationParser::parseGenericOperation(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, OCGSize);
  uint64_t v48 = EncodedSourceLocation;
  mlir::Token::getStringValue((mlir::Token *)(*((void *)this + 1) + 56), &v47);
  std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    *(void *)&long long v50 = "empty operation name is invalid";
    __int16 v52 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v66);
    if (v66[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
    }
    if (v73)
    {
      unint64_t v13 = v71;
      if (v71)
      {
        uint64_t v14 = v72;
        unint64_t v15 = v71;
        if (v72 != v71)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          unint64_t v15 = v71;
        }
        uint64_t v72 = v13;
        operator delete(v15);
      }
      int v16 = v69;
      if (v69)
      {
        unint64_t v17 = v70;
        BOOL v18 = v69;
        if (v70 != v69)
        {
          do
          {
            uint64_t v20 = *--v17;
            uint64_t v19 = v20;
            void *v17 = 0;
            if (v20) {
              MEMORY[0x21667D390](v19, 0x1000C8077774924);
            }
          }
          while (v17 != v16);
          BOOL v18 = v69;
        }
        uint64_t v70 = v16;
        operator delete(v18);
      }
      int64_t v29 = v67;
      if (v67 != &v68) {
        goto LABEL_49;
      }
    }
    goto LABEL_50;
  }
  if (std::string::find(&v47, 0, 0) == -1)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v50);
    uint64_t v21 = *((void *)this + 1);
    *(_OWORD *)(v21 + 56) = v50;
    *(void *)(v21 + 72) = v51;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v47;
    }
    else {
      int v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v47.__r_.__value_.__l.__size_;
    }
    mlir::OperationState::OperationState(&v50, EncodedSourceLocation, (uint64_t)v22, v23);
    if (*(_UNKNOWN **)(*((void *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      std::string::size_type v24 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      uint64_t v25 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v24 = v47.__r_.__value_.__l.__size_;
        uint64_t v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      char v74 = (char *)v25;
      unint64_t p_s2 = v24;
      LOBYTE(__s2) = 46;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v74, (char *)&__s2, 1uLL, 0);
      if (v26 == -1)
      {
        char v27 = v74;
        size_t v28 = p_s2;
      }
      else
      {
        char v27 = v74;
        if (v26 >= p_s2) {
          size_t v28 = p_s2;
        }
        else {
          size_t v28 = v26;
        }
      }
      if (mlir::MLIRContext::getLoadedDialect(***((uint64_t ****)this + 1), (uint64_t)v27, v28)
        || mlir::MLIRContext::getOrLoadDialect(***((void ***)this + 1), v27, v28))
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v32 = &v47;
        }
        else {
          uint64_t v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = v47.__r_.__value_.__l.__size_;
        }
        mlir::OperationName::OperationName(&v74, v32, v33, ***((void ***)this + 1));
        *((void *)&v50 + 1) = v74;
      }
      else if ((mlir::MLIRContext::allowsUnregisteredDialects(***((mlir::MLIRContext ****)this + 1)) & 1) == 0)
      {
        char v74 = "operation being parsed with an unregistered dialect. If this is intended, please use -allow-unregistered-d"
              "ialect with the MLIR tool used";
        __int16 v77 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v74, v49);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v49);
        goto LABEL_80;
      }
    }
    uint64_t v34 = *(mlir::AsmParserState **)(*((void *)this + 1) + 128);
    if (v34) {
      mlir::AsmParserState::startOperationDefinition(v34, (const mlir::OperationName *)((char *)&v50 + 8));
    }
    v46[0] = 0;
    v46[16] = 0;
    v45[0] = 0;
    v45[16] = 0;
    v44[0] = 0;
    v44[16] = 0;
    v43[0] = 0;
    v43[16] = 0;
    {
      uint64_t v35 = v56;
      uint64_t __s2 = v56;
      uint64_t v56 = 0;
      if (__s2 {
        || v57
      }
        || *(_UNKNOWN **)(*((void *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id
        || (char v74 = (char *)&v48,
            unint64_t p_s2 = (unint64_t)&v47,
      {
        uint64_t v30 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v50);
        {
          if (!v35 {
            || (char v74 = (char *)&v48,
          }
                unint64_t p_s2 = (unint64_t)&__s2,
                v76[0] = &v47,
          {
LABEL_81:
            char v74 = (char *)v76;
            unint64_t p_s2 = 0x400000000;
            unsigned int v36 = v55;
            if (v55 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v55, 8);
              unsigned int v36 = v55;
            }
            if (v36)
            {
              uint64_t v37 = v54;
              uint64_t v38 = &v54[v36];
              do
              {
                uint64_t v39 = *v37;
                if (*v37)
                {
                  for (uint64_t i = *(void *)(v39 + 8); i != v39; uint64_t i = *(void *)(i + 8))
                  {
                    if (i) {
                      uint64_t v41 = (void *)(i - 8);
                    }
                    else {
                      uint64_t v41 = 0;
                    }
                    mlir::Block::dropAllDefinedValueUses(v41);
                  }
                }
                ++v37;
              }
              while (v37 != v38);
            }
            if (v74 != (char *)v76) {
              free(v74);
            }
            mlir::OperationState::~OperationState((mlir::OperationState *)&v50);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_51;
            }
            return v30;
          }
        }
      }
    }
LABEL_80:
    uint64_t v30 = 0;
    goto LABEL_81;
  }
  *(void *)&long long v50 = "null character not allowed in operation name";
  __int16 v52 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v58);
  if (v58[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  }
  if (v65)
  {
    unint64_t v5 = __p;
    if (__p)
    {
      uint64_t v6 = v64;
      uint64_t v7 = __p;
      if (v64 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      int v64 = v5;
      operator delete(v7);
    }
    unint64_t v8 = v61;
    if (v61)
    {
      uint64_t v9 = v62;
      uint64_t v10 = v61;
      if (v62 != v61)
      {
        do
        {
          uint64_t v12 = *--v9;
          uint64_t v11 = v12;
          *uint64_t v9 = 0;
          if (v12) {
            MEMORY[0x21667D390](v11, 0x1000C8077774924);
          }
        }
        while (v9 != v8);
        uint64_t v10 = v61;
      }
      char v62 = v8;
      operator delete(v10);
    }
    int64_t v29 = v59;
    if (v59 != &v60) {
LABEL_49:
    }
      free(v29);
  }
LABEL_50:
  uint64_t v30 = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
LABEL_51:
  }
    operator delete(v47.__r_.__value_.__l.__data_);
  return v30;
}

uint64_t anonymous namespace'::OperationParser::addDefinition(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 8;
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 8);
  uint64_t v11 = (unsigned int *)(a2 + 24);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unint64_t v12 = v10 + 1;
  if (v9 > v10 || v9 == v12)
  {
    unint64_t v14 = *(void *)(*(void *)v7 + 16 * *(unsigned int *)(a2 + 24));
    unint64_t v30 = v14;
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  if (v9 <= v12)
  {
    if (*(_DWORD *)(v7 + 12) < v12)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12, 16);
      unsigned int v9 = *(_DWORD *)(v8 + 8);
    }
    if (v9 != v12) {
      bzero((void *)(*(void *)v8 + 16 * v9), 16 * (v12 - v9));
    }
  }
  *(_DWORD *)(v8 + 8) = v12;
  unint64_t v14 = *(void *)(*(void *)v8 + 16 * *v11);
  unint64_t v30 = v14;
  if (v14)
  {
LABEL_14:
    v28[0] = v14;
    uint64_t v32 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), v28, &v32) & 1) == 0)
    {
      std::string::size_type v23 = *(const char **)a2;
      __int16 v29 = 257;
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v23);
      mlir::emitError(EncodedSourceLocation, (uint64_t)v28, (uint64_t)&v32);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v32);
      }
      if (v32) {
        mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)v33, "redefinition of SSA value '", v6, "'");
      }
      mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, *(const char **)(*(void *)v8 + 16 * *v11 + 8));
      mlir::Diagnostic::attachNote();
    }
    if ((*(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) != (a3[1] & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v18 = *(const char **)a2;
      __int16 v29 = 257;
      uint64_t v19 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v18);
      mlir::emitError(v19, (uint64_t)v28, (uint64_t)&v32);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v32);
      }
      unint64_t v31 = a3[1] & 0xFFFFFFFFFFFFFFF8;
      if (v32) {
        mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>((uint64_t)v33, "definition of SSA value '", v6, "#", (unsigned int *)(a2 + 24), "' has type ", (uint64_t *)&v31);
      }
      mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, *(const char **)(*(void *)v8 + 16 * *v11 + 8));
      mlir::Diagnostic::attachNote();
    }
    while (1)
    {
      uint64_t v20 = *(uint64_t **)v14;
      if (!*(void *)v14) {
        break;
      }
      uint64_t v21 = (uint64_t *)v20[1];
      if (v21)
      {
        uint64_t *v21 = *v20;
        if (*v20) {
          *(void *)(*v20 + 8) = v20[1];
        }
      }
      v20[3] = (uint64_t)a3;
      v20[1] = (uint64_t)a3;
      uint64_t v22 = *a3;
      uint64_t *v20 = *a3;
      if (v22) {
        *(void *)(v22 + 8) = v20;
      }
      *a3 = (uint64_t)v20;
    }
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v30);
    mlir::Operation::destroy(DefiningOp);
    uint64_t v32 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v30, &v32))
    {
      *uint64_t v32 = -8192;
      *(int32x2_t *)(a1 + 344) = vadd_s32(*(int32x2_t *)(a1 + 344), (int32x2_t)0x1FFFFFFFFLL);
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 8) + 128);
    if (v27) {
      mlir::AsmParserState::refineDefinition(v27, v30, (unint64_t)a3);
    }
  }
LABEL_7:
  unint64_t v15 = *(const char **)a2;
  int v16 = (uint64_t **)(*(void *)v8 + 16 * *(unsigned int *)(a2 + 24));
  *int v16 = a3;
  v16[1] = (uint64_t *)v15;
  uint64_t v17 = *(void *)(a1 + 16) + 88 * *(unsigned int *)(a1 + 24);
  llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(*(void *)(v17 - 64) + 24 * *(unsigned int *)(v17 - 56) - 24, *(int8x16_t **)(a2 + 8), *(const unsigned __int8 **)(a2 + 16));
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseOperation(void)::$_0>(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  long long v44 = *(_OWORD *)(v3 + 56);
  uint64_t v45 = *(void *)(v3 + 72);
  *(void *)&long long v46 = "expected valid ssa identifier";
  __int16 v49 = 259;
  if (!mlir::detail::Parser::parseToken(v2, 6, (uint64_t)&v46)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v4 + 56) != 15)
  {
    uint64_t v33 = 1;
    goto LABEL_25;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v46);
  uint64_t v5 = *(void *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = v46;
  *(void *)(v5 + 72) = v47;
  uint64_t v6 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v6 + 56) == 10)
  {
    unint64_t UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v6 + 64), *(void *)(v6 + 72));
    if (v8) {
      BOOL v9 = UInt64IntegerValue == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v33 = UInt64IntegerValue;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v2 + 8) + 8), (uint64_t)&v46);
      uint64_t v34 = *(void *)(v2 + 8);
      *(_OWORD *)(v34 + 56) = v46;
      *(void *)(v34 + 72) = v47;
LABEL_25:
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v21 = *((void *)&v44 + 1);
      uint64_t v20 = v45;
      uint64_t OCGSize = (void *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v44);
      uint64_t v23 = *(unsigned int *)(v19 + 8);
      if (v23 >= *(_DWORD *)(v19 + 12))
      {
        *(void *)&long long v46 = v21;
        *((void *)&v46 + 1) = v20;
        LODWORD(v47) = v33;
        uint64_t v48 = OCGSize;
        unint64_t v35 = v23 + 1;
        BOOL v36 = *(void *)v19 + 32 * v23 > (unint64_t)&v46;
        if (*(void *)v19 <= (unint64_t)&v46 && v36)
        {
          uint64_t v41 = (char *)&v46 - *(void *)v19;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          uint64_t v37 = *(void *)v19;
          uint64_t v38 = &v41[*(void *)v19];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          uint64_t v37 = *(void *)v19;
          uint64_t v38 = (char *)&v46;
        }
        uint64_t v39 = (_OWORD *)(v37 + 32 * *(unsigned int *)(v19 + 8));
        long long v40 = *((_OWORD *)v38 + 1);
        *uint64_t v39 = *(_OWORD *)v38;
        v39[1] = v40;
        int v25 = *(_DWORD *)(v19 + 8) + 1;
      }
      else
      {
        uint64_t v24 = *(void *)v19 + 32 * v23;
        *(void *)uint64_t v24 = v21;
        *(void *)(v24 + 8) = v20;
        *(_DWORD *)(v24 + 16) = v33;
        *(void *)(v24 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = OCGSize;
        int v25 = v23 + 1;
      }
      *(_DWORD *)(v19 + 8) = v25;
      **(void **)(a1 + 16) += v33;
      return 1;
    }
    v42[0] = "expected named operation to have at least 1 result";
    __int16 v43 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v42, &v46);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((void)v46) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    }
    if (v55)
    {
      uint64_t v11 = __p;
      if (__p)
      {
        unint64_t v12 = v54;
        unint64_t v13 = __p;
        if (v54 != __p)
        {
          do
            unint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unint64_t v13 = __p;
        }
        uint64_t v54 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v51;
      if (!v51) {
        goto LABEL_45;
      }
      unint64_t v15 = v52;
      int v16 = v51;
      if (v52 == v51)
      {
LABEL_44:
        __int16 v52 = v14;
        operator delete(v16);
LABEL_45:
        if (v48 != &v50) {
          free(v48);
        }
        return v10;
      }
      do
      {
        uint64_t v18 = *--v15;
        uint64_t v17 = v18;
        *unint64_t v15 = 0;
        if (v18) {
          MEMORY[0x21667D390](v17, 0x1000C8077774924);
        }
      }
      while (v15 != v14);
LABEL_43:
      int v16 = v51;
      goto LABEL_44;
    }
  }
  else
  {
    v42[0] = "expected integer number of results";
    __int16 v43 = 259;
    mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)v42, &v46);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((void)v46) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    }
    if (v55)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        size_t v28 = v54;
        __int16 v29 = __p;
        if (v54 != __p)
        {
          do
            size_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          __int16 v29 = __p;
        }
        uint64_t v54 = v27;
        operator delete(v29);
      }
      unint64_t v14 = v51;
      if (!v51) {
        goto LABEL_45;
      }
      unint64_t v30 = v52;
      int v16 = v51;
      if (v52 == v51) {
        goto LABEL_44;
      }
      do
      {
        uint64_t v32 = *--v30;
        uint64_t v31 = v32;
        void *v30 = 0;
        if (v32) {
          MEMORY[0x21667D390](v31, 0x1000C8077774924);
        }
      }
      while (v30 != v14);
      goto LABEL_43;
    }
  }
  return v10;
}

unint64_t anonymous namespace'::OperationParser::parseCustomOperationName(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (int8x16_t *)v2[8];
  uint64_t v4 = (const unsigned __int8 *)v2[9];
  BOOL v36 = (char *)v3;
  unint64_t v37 = (unint64_t)v4;
  if (v4)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 1), (uint64_t)&__s2);
    uint64_t v5 = *((void *)this + 1);
    *(_OWORD *)(v5 + 56) = __s2;
    *(void *)(v5 + 72) = v33;
    uint64_t v6 = mlir::RegisteredOperationName::lookup(v3, v4, ***((uint64_t ****)this + 1));
    if (v7)
    {
      LOBYTE(v8) = v6;
      unint64_t v9 = v6 & 0xFFFFFFFFFFFFFF00;
      return v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
    LOBYTE(__s2) = 46;
    unint64_t v18 = llvm::StringRef::find((uint64_t *)&v36, (char *)&__s2, 1uLL, 0);
    if (v18 == -1)
    {
      uint64_t v20 = v36;
      unint64_t v19 = v37;
      size_t v8 = v37;
      uint64_t v21 = *((void *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v20 = v36;
      unint64_t v19 = v37;
      if (v18 >= v37) {
        size_t v8 = v37;
      }
      else {
        size_t v8 = v18;
      }
      memset(&v31, 0, sizeof(v31));
      if (v37 > v18 + 1)
      {
LABEL_40:
        mlir::MLIRContext::getOrLoadDialect(***((void ***)this + 1), v20, v8);
        mlir::OperationName::OperationName(&__s2, v36, v37, ***((void ***)this + 1));
        LOBYTE(v8) = __s2;
        unint64_t v9 = __s2 & 0xFFFFFFFFFFFFFF00;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        return v9 & 0xFFFFFFFFFFFFFF00 | v8;
      }
      uint64_t v21 = *((void *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2)
      {
LABEL_37:
        uint64_t v23 = *(void *)(v21 + 144) + 16 * *(unsigned int *)(v21 + 152);
        uint64_t v24 = *(char **)(v23 - 16);
        size_t v8 = *(void *)(v23 - 8);
        __int16 v29 = 773;
        v28[0] = v24;
        v28[1] = v8;
        void v28[2] = ".";
        *(void *)&long long __s2 = v28;
        uint64_t v33 = v20;
        unint64_t v34 = v19;
        __int16 v35 = 1282;
        llvm::Twine::str((llvm::Twine *)&__s2, &v30);
        std::string v31 = v30;
        std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        unint64_t v26 = &v31;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type size = v30.__r_.__value_.__l.__size_;
          unint64_t v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        BOOL v36 = (char *)v26;
        unint64_t v37 = size;
        uint64_t v20 = v24;
        goto LABEL_40;
      }
    }
    if (v20[v19 - 1] != 46) {
      goto LABEL_37;
    }
    if (v8)
    {
      uint64_t v22 = memchr(v20, 46, v8);
      if (!v22 || v22 - v20 == -1) {
        (*(void (**)(void, char *, size_t))(**(void **)(v21 + 136) + 24))(*(void *)(v21 + 136), v20, v8);
      }
      unint64_t v9 = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      unint64_t v9 = 0;
    }
  }
  else
  {
    *(void *)&long long __s2 = "empty operation name is invalid";
    __int16 v35 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&__s2, v38);
    if (v38[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    }
    if (v45)
    {
      uint64_t v10 = __p;
      if (__p)
      {
        uint64_t v11 = v44;
        unint64_t v12 = __p;
        if (v44 != __p)
        {
          do
            uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          unint64_t v12 = __p;
        }
        long long v44 = v10;
        operator delete(v12);
      }
      unint64_t v13 = v41;
      if (v41)
      {
        unint64_t v14 = v42;
        unint64_t v15 = v41;
        if (v42 != v41)
        {
          do
          {
            uint64_t v17 = *--v14;
            uint64_t v16 = v17;
            *unint64_t v14 = 0;
            if (v17) {
              MEMORY[0x21667D390](v16, 0x1000C8077774924);
            }
          }
          while (v14 != v13);
          unint64_t v15 = v41;
        }
        char v42 = v13;
        operator delete(v15);
      }
      if (v39 != &v40) {
        free(v39);
      }
    }
    LOBYTE(v8) = 0;
    unint64_t v9 = 0;
  }
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(void *a1)
{
  uint64_t v1 = &unk_267770000;
  {
    unint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      unint64_t v14 = 91;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      char v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[441]);
}

uint64_t anonymous namespace'::OperationParser::parseTrailingLocationSpecifier(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) != 59) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v12);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v12;
  *(void *)(v5 + 72) = v13;
  *(void *)&long long v12 = "expected '(' in location";
  __int16 v14 = 259;
  if (mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v12))
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 56);
    uint64_t v11 = 0;
    if (v6 == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)a1, &v11))
    {
      return 0;
    }
    *(void *)&long long v12 = "expected ')' in location";
    __int16 v14 = 259;
    if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v12))
    {
      uint64_t v7 = (a2 >> 2) & 1;
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
        LODWORD(v7) = 1;
      }
      BOOL v8 = v7 == 0;
      uint64_t v9 = 24;
      if (!v8) {
        uint64_t v9 = 32;
      }
      *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + v9) = v11;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v22 = 72;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      unint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[346];
  int v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    BOOL v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      int v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallImpl<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))a1)(*(void *)(a1 + 8));
}

uint64_t llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(void *a1)
{
  uint64_t v1 = a1[3];
  if ((v1 & 2) == 0) {
    a1 = (void *)*a1;
  }
  return (*(uint64_t (**)(void *))(v1 & 0xFFFFFFFFFFFFFFF8))(a1);
}

void anonymous namespace'::CustomOpAsmParser::~CustomOpAsmParser(_anonymous_namespace_::CustomOpAsmParser *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getNameLoc(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void anonymous namespace'::CustomOpAsmParser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  __int16 v13 = 1283;
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  v12[0] = "custom op '";
  void v12[2] = v5;
  v12[3] = v6;
  *(void *)&long long v14 = v12;
  *(void *)&long long v15 = "' ";
  LOWORD(v16) = 770;
  int v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 == 1)
  {
    long long v17 = v14;
    long long v18 = v15;
    uint64_t v19 = v16;
  }
  else if (*((unsigned char *)a3 + 32))
  {
    BOOL v8 = (uint64_t *)*a3;
    uint64_t v9 = a3[1];
    if (*((unsigned char *)a3 + 33) != 1)
    {
      LOBYTE(v7) = 2;
      BOOL v8 = a3;
    }
    *(void *)&long long v17 = &v14;
    *(void *)&long long v18 = v8;
    *((void *)&v18 + 1) = v9;
    LOBYTE(v19) = 2;
    BYTE1(v19) = v7;
  }
  else
  {
    LOWORD(v19) = 256;
  }
  *(unsigned char *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v10 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, (uint64_t)&v17, (uint64_t)a4);
  if (*(_DWORD *)(*(void *)(v10 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(a4);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getBuilder(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getCurrentLocation(uint64_t a1)
{
  return MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*(void *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(void *)(*(void *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = "expected '->'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '{'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '}'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ':'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ','";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '='";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '<'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '>'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '?'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '+'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '*'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '|'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11) {
    return 0;
  }
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v7;
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(void *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseBase64Bytes(void *a1, unint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(void *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      long long v38 = *(_OWORD *)(v6 + 64);
      unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((void *)&v38 + 1)) {
        unint64_t v8 = *((void *)&v38 + 1);
      }
      else {
        unint64_t v8 = first_not_of;
      }
      unint64_t v9 = *((void *)&v38 + 1) - v8;
      *(void *)&long long v41 = v38 + v8;
      *((void *)&v41 + 1) = *((void *)&v38 + 1) - v8;
      uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((void *)&v41 + 1)) {
        uint64_t v11 = last_not_of + 1;
      }
      else {
        uint64_t v11 = *((void *)&v41 + 1);
      }
      unint64_t v12 = *((void *)&v41 + 1) - v9 + v11;
      if (*((void *)&v41 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v41 + 1);
      }
      llvm::decodeBase64(v41, v13, a2, &v37);
      if (v37)
      {
        __int16 v35 = v37;
        unint64_t v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        __int16 v40 = 260;
        v39[0] = &v36;
        (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
        uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((void)v41) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        }
        if (v49)
        {
          long long v17 = __p;
          if (__p)
          {
            long long v18 = v48;
            uint64_t v19 = __p;
            if (v48 != __p)
            {
              do
                long long v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              uint64_t v19 = __p;
            }
            uint64_t v48 = v17;
            operator delete(v19);
          }
          uint64_t v20 = v45;
          if (v45)
          {
            uint64_t v21 = v46;
            unint64_t v22 = v45;
            if (v46 != v45)
            {
              do
              {
                uint64_t v24 = *--v21;
                uint64_t v23 = v24;
                void *v21 = 0;
                if (v24) {
                  MEMORY[0x21667D390](v23, 0x1000C8077774924);
                }
              }
              while (v21 != v20);
              unint64_t v22 = v45;
            }
            uint64_t v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44) {
            free(v43);
          }
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (v35) {
          (*(void (**)(void *))(*v35 + 8))(v35);
        }
        if (v37) {
          (*(void (**)(void *))(*v37 + 8))(v37);
        }
        return v16;
      }
      uint64_t v5 = a1[2];
      uint64_t v6 = *(void *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    uint64_t v33 = *(void *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(void *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  __int16 v40 = 259;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((void)v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v49)
  {
    int v25 = __p;
    if (__p)
    {
      unint64_t v26 = v48;
      uint64_t v27 = __p;
      if (v48 != __p)
      {
        do
          unint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        uint64_t v27 = __p;
      }
      uint64_t v48 = v25;
      operator delete(v27);
    }
    size_t v28 = v45;
    if (v45)
    {
      __int16 v29 = v46;
      std::string v30 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v32 = *--v29;
          uint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            MEMORY[0x21667D390](v31, 0x1000C8077774924);
          }
        }
        while (v29 != v28);
        std::string v30 = v45;
      }
      uint64_t v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44) {
      free(v43);
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = "expected '('";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ')'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '['";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ']'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '...'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseFloat(void *a1, double *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 + 8);
  int v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    uint64_t v7 = *(void *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(void *)(v7 + 72) = v45;
    uint64_t v5 = *(void *)(a1[2] + 8);
  }
  long long v42 = *(_OWORD *)(v5 + 56);
  uint64_t v43 = *(void *)(v5 + 72);
  uint64_t OCGSize = (llvm::APFloatBase *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v42);
  if (v42 == 10)
  {
    BOOL v17 = v6 == 24;
    LOBYTE(v44) = 0;
    char v47 = 0;
    uint64_t v18 = a1[2];
    uint64_t v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(OCGSize);
    uint64_t v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (MirInfoChannelAssignment *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      uint64_t v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v21 + 8) + 8), (uint64_t)&v39);
      uint64_t v22 = *(void *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(void *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v44);
      uint64_t v16 = 1;
      if (!v47) {
        return v16;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (!v47) {
        return v16;
      }
    }
    unint64_t v37 = (void *)*((void *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37) {
      std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v45);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
    }
  }
  else
  {
    unint64_t v9 = OCGSize;
    if (v42 == 9)
    {
      uint64_t FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        double v12 = *(double *)&FloatingPointValue;
        uint64_t v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v13 + 8) + 8), (uint64_t)&v44);
        uint64_t v14 = *(void *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(void *)(v14 + 72) = v45;
        double v15 = -v12;
        if (v6 != 24) {
          double v15 = v12;
        }
        *a2 = v15;
        return 1;
      }
      *(void *)&long long v39 = "floating point value too large";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, v9, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        uint64_t v31 = __p;
        if (__p)
        {
          uint64_t v32 = v52;
          uint64_t v33 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            uint64_t v33 = __p;
          }
          __int16 v52 = v31;
          operator delete(v33);
        }
        unint64_t v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        unint64_t v34 = v50;
        size_t v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          uint64_t v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48) {
            free(v46);
          }
          return v16;
        }
        do
        {
          uint64_t v36 = *--v34;
          uint64_t v35 = v36;
          void *v34 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v34 != v26);
LABEL_43:
        size_t v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(void *)&long long v39 = "expected floating point literal";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, OCGSize, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        uint64_t v23 = __p;
        if (__p)
        {
          uint64_t v24 = v52;
          int v25 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            int v25 = __p;
          }
          __int16 v52 = v23;
          operator delete(v25);
        }
        unint64_t v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        uint64_t v27 = v50;
        size_t v28 = v49;
        if (v50 == v49) {
          goto LABEL_44;
        }
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(void *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeyword(void *a1, void **a2, const char *a3, void ***a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  v28[0] = a2;
  v28[1] = a3;
  uint64_t v4 = *(void *)(a1[2] + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    (*(void (**)(void, void *, uint64_t, void))(**(void **)(v4 + 136) + 48))(*(void *)(v4 + 136), v28, 1, 0);
    return 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(void *, void **, const char *))(*a1 + 376))(a1, a2, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v26 = "expected '";
      __int16 v27 = 259;
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
      if (v33)
      {
        __int16 v32 = 261;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
        if (v33)
        {
          LODWORD(v29) = 3;
          uint64_t v30 = "'";
          uint64_t v31 = 1;
          double v12 = &v29;
          uint64_t v13 = (char *)v35;
          if (v36 >= v37)
          {
            unint64_t v24 = v36 + 1;
            if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
            {
              int64_t v25 = (char *)&v29 - (unsigned char *)v35;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              uint64_t v13 = (char *)v35;
              double v12 = (void ***)((char *)v35 + v25);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              double v12 = &v29;
              uint64_t v13 = (char *)v35;
            }
          }
          uint64_t v14 = &v13[24 * v36];
          long long v15 = *(_OWORD *)v12;
          *((void *)v14 + 2) = v12[2];
          *(_OWORD *)uint64_t v14 = v15;
          ++v36;
          if (v33) {
            mlir::Diagnostic::operator<<((uint64_t)v34, a4);
          }
        }
      }
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      }
      if (v43)
      {
        uint64_t v16 = __p;
        if (__p)
        {
          BOOL v17 = v42;
          uint64_t v18 = __p;
          if (v42 != __p)
          {
            do
              BOOL v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
            while (v17 != v16);
            uint64_t v18 = __p;
          }
          long long v42 = v16;
          operator delete(v18);
        }
        uint64_t v19 = v39;
        if (v39)
        {
          uint64_t v20 = v40;
          uint64_t v21 = v39;
          if (v40 != v39)
          {
            do
            {
              uint64_t v23 = *--v20;
              uint64_t v22 = v23;
              void *v20 = 0;
              if (v23) {
                MEMORY[0x21667D390](v22, 0x1000C8077774924);
              }
            }
            while (v20 != v19);
            uint64_t v21 = v39;
          }
          uint64_t v40 = v19;
          operator delete(v21);
        }
        if (v35 != v38) {
          free(v35);
        }
      }
    }
  }
  return v5;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  v12[0] = __s2;
  v12[1] = __n;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(void *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n)) {
      return 0;
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    uint64_t v11 = *(void *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(void *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2)
  {
    (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(v7 + 136) + 48))(*(void *)(v7 + 136), v12, 1, 1);
    return 0;
  }
  BOOL result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  int v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    BOOL result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  uint64_t v8 = *(void *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v8 + 8) + 8), (uint64_t)&v10);
  uint64_t v9 = *(void *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(void *)(v9 + 72) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
  int v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 12 || v9 == 3) {
    goto LABEL_9;
  }
  if (v9 == 2)
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v8 + 136) + 48))(*(void *)(v8 + 136), a3, a4, 1);
    return 0;
  }
  BOOL result = mlir::Token::isKeyword((mlir::Token *)(v8 + 56));
  if (result)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
LABEL_9:
    double v12 = *(const void **)(v8 + 64);
    size_t v13 = *(void *)(v8 + 72);
    if (a4)
    {
      if (v13)
      {
        uint64_t v14 = 16 * a4;
        uint64_t v15 = a3;
        while (*(void *)(v15 + 8) != v13 || memcmp(*(const void **)v15, v12, v13))
        {
          v15 += 16;
          v14 -= 16;
          if (!v14) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v16 = 16 * a4;
        uint64_t v15 = a3;
        while (*(void *)(v15 + 8))
        {
          v15 += 16;
          v16 -= 16;
          if (!v16)
          {
LABEL_20:
            uint64_t v15 = a3 + 16 * a4;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v15 = a3;
    }
    if (a4 == (v15 - a3) >> 4)
    {
      return 0;
    }
    else
    {
      *a2 = v12;
      a2[1] = v13;
      uint64_t v17 = *(void *)(a1 + 16);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v17 + 8) + 8), (uint64_t)&v19);
      uint64_t v18 = *(void *)(v17 + 8);
      *(_OWORD *)(v18 + 56) = v19;
      *(void *)(v18 + 72) = v20;
      return 1;
    }
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  __src = 0;
  size_t __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 384))(a1, &__src)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a2);
  }
  uint64_t v4 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v11 = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  size_t v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v8 = __len | 7;
    }
    size_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v11 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_13:
  }
    memmove(p_dst, v4, v5);
  *((unsigned char *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0) {
LABEL_15:
  }
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  uint64_t v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(*(void *)(v6 + 8) + 56) == 5)
  {
    uint64_t v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
    *a2 = v7;
    return v7 != 0;
  }
  else
  {
    return a4(a5);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, void *a2, void *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  uint64_t v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v2 + 1) + 56) == 20) {
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  }
  else {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDictWithKeyword(void *a1, mlir::NamedAttrList *a2)
{
  if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t))(*a1 + 376))(a1, "attributes", 10)) {
    return 1;
  }
  uint64_t v4 = (mlir::detail::Parser *)a1[2];

  return mlir::detail::Parser::parseAttributeDict(v4, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalSymbolName(void *a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1[2] + 8);
  long long v16 = *(_OWORD *)(v2 + 56);
  uint64_t v17 = *(void *)(v2 + 72);
  if (v16 != 4) {
    return 0;
  }
  size_t v5 = (mlir::StringAttr **)(*(uint64_t (**)(void *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  __int16 v15 = 260;
  *(void *)&long long v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v6 + 8) + 8), (uint64_t)&v13);
  uint64_t v7 = *(void *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(void *)(v7 + 72) = v14;
  uint64_t v8 = *(void *)(*(void *)(a1[2] + 8) + 128);
  if (v8)
  {
    uint64_t v9 = mlir::SymbolRefAttr::get(*a2);
    *(void *)&long long v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((void *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  size_t v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v5 + 1) + 56) == 8)
  {
    uint64_t v6 = mlir::detail::Parser::parseType(v5);
    *a2 = v6;
    return v6 != 0;
  }
  else
  {
    return a3(a4);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v7 = "expected ':'";
  __int16 v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7)) {
    return 0;
  }
  uint64_t v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = "expected ':'";
  __int16 v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6)) {
    return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (uint64_t v6 = (void *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(void *)(a1 + 16), v6, (uint64_t)&v37, (uint64_t)a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    __int16 v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37) {
      goto LABEL_11;
    }
    LODWORD(v33) = 3;
    unint64_t v34 = "dialect '";
    uint64_t v35 = 9;
    long long v8 = &v33;
    uint64_t v9 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v29 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        uint64_t v9 = (char *)v39;
        long long v8 = (void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        long long v8 = &v33;
        uint64_t v9 = (char *)v39;
      }
    }
    uint64_t v10 = &v9[24 * v40];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v40;
    if (!v37) {
      goto LABEL_11;
    }
    double v12 = *(void ***)(a2 + 8);
    long long v13 = *(const char **)(a2 + 16);
    __int16 v36 = 261;
    uint64_t v33 = v12;
    unint64_t v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      unint64_t v34 = "' does not expect resource handles";
      uint64_t v35 = 34;
      uint64_t v14 = &v33;
      __int16 v15 = (char *)v39;
      if (v40 >= v41)
      {
        unint64_t v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          int64_t v30 = (char *)&v33 - (unsigned char *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          __int16 v15 = (char *)v39;
          uint64_t v14 = (void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          uint64_t v14 = &v33;
          __int16 v15 = (char *)v39;
        }
      }
      long long v16 = &v15[24 * v40];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v40;
      uint64_t v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      long long v19 = __p;
      if (__p)
      {
        uint64_t v20 = v46;
        uint64_t v21 = __p;
        if (v46 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v46 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v43;
      if (v43)
      {
        uint64_t v23 = v44;
        unint64_t v24 = v43;
        if (v44 != v43)
        {
          do
          {
            uint64_t v26 = *--v23;
            uint64_t v25 = v26;
            *uint64_t v23 = 0;
            if (v26) {
              MEMORY[0x21667D390](v25, 0x1000C8077774924);
            }
          }
          while (v23 != v22);
          unint64_t v24 = v43;
        }
        uint64_t v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42) {
        free(v39);
      }
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(void *)(*(void *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::popCyclicParsing(uint64_t result)
{
  uint64_t v1 = *(int32x2_t **)(*(void *)(result + 16) + 8);
  __int32 v2 = v1[13].i32[0];
  if (v2)
  {
    int32x2_t v3 = v1[11];
    uint64_t v4 = v1[15].u32[0];
    uint64_t v5 = *(void *)(*(void *)&v1[14] + 8 * v4 - 8);
    __int32 v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *long long v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(*(void *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2 = *(void *)(*((void *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(void *)(v2 + 72)) {
    return mlir::AsmParser::parseKeyword(a1, a2);
  }
  *(void *)a2 = &byte_211F4AA5D;
  *((void *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::codeCompleteExpectedTokens(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 16) + 8);
  if (*(_DWORD *)(v3 + 56) == 2 && !*(void *)(v3 + 72)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v3 + 136) + 48))(*(void *)(v3 + 136), a2, a3, 0);
  }
  return result;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalLocationSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 59) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v12);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v12;
  *(void *)(v6 + 72) = v13;
  uint64_t v15 = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)&long long v12 = "expected '(' in location";
  __int16 v14 = 259;
  if (mlir::detail::Parser::parseToken(v7, 21, (uint64_t)&v12))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (*(_DWORD *)(*(void *)(v8 + 8) + 56) == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)v8, &v15))
    {
      return 0;
    }
    uint64_t v9 = *(void *)(a1 + 88);
    *(void *)&long long v12 = "expected ')' in location";
    __int16 v14 = 259;
    if (mlir::detail::Parser::parseToken(v9, 28, (uint64_t)&v12))
    {
      uint64_t v10 = v15;
      if (!*(unsigned char *)(a2 + 8)) {
        *(unsigned char *)(a2 + 8) = 1;
      }
      *(void *)a2 = v10;
      return 1;
    }
  }
  return 0;
}

uint64_t anonymous namespace'::CustomOpAsmParser::getResultName@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(this + 40);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)(*(void *)(this + 32) + 16);
    uint64_t v5 = 32 * v3;
    while (1)
    {
      unsigned int v6 = a2 - *v4;
      if (a2 < *v4) {
        break;
      }
      v4 += 8;
      a2 = v6;
      v5 -= 32;
      if (!v5) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v4 - 4;
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v8 = *((void *)v9 + 1);
    if (v8) {
      ++v7;
    }
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v8 - (v8 != 0);
    *(_DWORD *)(a3 + 16) = a2;
  }
  else
  {
LABEL_5:
    *(void *)a3 = &byte_211F4AA5D;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = -1;
  }
  return this;
}

uint64_t anonymous namespace'::CustomOpAsmParser::getNumResults(_anonymous_namespace_::CustomOpAsmParser *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (int32x2_t *)*((void *)this + 4);
  unint64_t v3 = (v1 - 1) & 0x7FFFFFFFFFFFFFFLL;
  if (v3 >= 4)
  {
    unint64_t v6 = v3 + 1;
    uint64_t v7 = v6 & 3;
    if ((v6 & 3) == 0) {
      uint64_t v7 = 4;
    }
    unint64_t v8 = v6 - v7;
    uint64_t v5 = &v2[4 * v8];
    uint64_t v9 = v2 + 10;
    int64x2_t v10 = 0uLL;
    int64x2_t v11 = 0uLL;
    do
    {
      uint32x2_t v12 = (uint32x2_t)vzip1_s32(v9[-8], v9[-4]);
      int32x2_t v13 = v9[4];
      int32x2_t v14 = *v9;
      v9 += 16;
      int64x2_t v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, v12);
      int64x2_t v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, (uint32x2_t)vzip1_s32(v14, v13));
      v8 -= 4;
    }
    while (v8);
    uint64_t result = vaddvq_s64(vaddq_s64(v11, v10));
  }
  else
  {
    uint64_t result = 0;
    uint64_t v5 = v2;
  }
  uint64_t v15 = &v2[4 * v1];
  do
  {
    result += v5[2].u32[0];
    v5 += 4;
  }
  while (v5 != v15);
  return result;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseGenericOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(v3 + 8);
  long long v5 = *(_OWORD *)(v4 + 56);
  uint64_t v12 = *(void *)(v4 + 72);
  long long v10 = *(_OWORD *)(v3 + 400);
  long long v11 = v5;
  *(void *)(v3 + 400) = a2;
  *(void *)(v3 + 408) = a3;
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(*(void *)(v3 + 8) + 128);
    if (v7)
    {
      mlir::Token::getLocRange((mlir::Token *)&v11);
      MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(v3 + 8) + 56));
      mlir::AsmParserState::finalizeOperationDefinition(v7, v6);
    }
  }
  unint64_t v8 = (_OWORD *)(v3 + 400);
  if ((void)v10)
  {
    *unint64_t v8 = v10;
  }
  else
  {
    *(void *)unint64_t v8 = 0;
    *(void *)(v3 + 408) = 0;
  }
  return v6;
}

unint64_t anonymous namespace'::CustomOpAsmParser::parseCustomOperationName(_anonymous_namespace_::OperationParser **this)
{
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, long long *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = *(void *)(a1 + 88);
  long long v18 = *a3;
  uint64_t v19 = *((void *)a3 + 2);
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  long long v14 = *a5;
  uint64_t v15 = *((void *)a5 + 2);
  uint64_t v13 = *((void *)a6 + 2);
  long long v12 = *a6;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOperand(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = 0;
  long long v8 = 0uLL;
    return 0;
  uint64_t v4 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  int v5 = v9;
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v5;
  return 1;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalOperand(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1[11] + 8);
  int v8 = *(_DWORD *)(v6 + 56);
  uint64_t v7 = v6 + 56;
  if (v8 == 6 || mlir::Token::isCodeCompletionFor(v7, 6)) {
    return (*(unsigned __int8 (**)(void *, uint64_t, uint64_t))(*a1 + 672))(a1, a2, a3) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOperandList(void *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  char v52 = a4;
  if (a3
    || (uint64_t v9 = *(void *)(a1[11] + 8), v53 = *(_OWORD *)(v9 + 56), v54 = *(void *)(v9 + 72), v53 == 6)
    || mlir::Token::isCodeCompletionFor((uint64_t)&v53, 6))
  {
    v49[0] = a1;
    v49[1] = a2;
    v49[2] = &v52;
    uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1[11] + 8) + 56));
    if (a5 != -1 && *(_DWORD *)(a2 + 8) != (uint64_t)a5)
    {
      v50[0] = "expected ";
      __int16 v51 = 259;
      (*(void (**)(void *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(v55, a1, OCGSize, v50);
      if (v55[0])
      {
        LODWORD(v53) = 2;
        *((void *)&v53 + 1) = a5;
        long long v11 = (char *)&v53;
        long long v12 = (char *)v56;
        if (v57 >= v58)
        {
          unint64_t v44 = v57 + 1;
          if (v56 <= &v53 && (char *)v56 + 24 * v57 > (char *)&v53)
          {
            int64_t v47 = (char *)&v53 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            long long v12 = (char *)v56;
            long long v11 = (char *)v56 + v47;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            long long v11 = (char *)&v53;
            long long v12 = (char *)v56;
          }
        }
        uint64_t v13 = &v12[24 * v57];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        uint64_t v15 = ++v57;
        if (v55[0])
        {
          LODWORD(v53) = 3;
          *((void *)&v53 + 1) = " operands";
          uint64_t v54 = 9;
          long long v16 = (char *)&v53;
          uint64_t v17 = (char *)v56;
          if (v15 >= v58)
          {
            unint64_t v45 = v15 + 1;
            BOOL v46 = (char *)v56 + 24 * v15 > (char *)&v53;
            if (v56 <= &v53 && v46)
            {
              int64_t v48 = (char *)&v53 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              uint64_t v17 = (char *)v56;
              long long v16 = (char *)v56 + v48;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              long long v16 = (char *)&v53;
              uint64_t v17 = (char *)v56;
            }
          }
          long long v18 = &v17[24 * v57];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = *((void *)v16 + 2);
          *(_OWORD *)long long v18 = v19;
          ++v57;
        }
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
      if (v55[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      }
      if (v64)
      {
        uint64_t v21 = __p;
        if (__p)
        {
          uint64_t v22 = v63;
          uint64_t v23 = __p;
          if (v63 != __p)
          {
            do
              uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            uint64_t v23 = __p;
          }
          unint64_t v63 = v21;
          operator delete(v23);
        }
        unint64_t v24 = v60;
        if (!v60) {
          goto LABEL_61;
        }
        uint64_t v25 = v61;
        uint64_t v26 = v60;
        if (v61 == v60)
        {
LABEL_60:
          int v61 = v24;
          operator delete(v26);
LABEL_61:
          if (v56 != v59) {
            free(v56);
          }
          return v20;
        }
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
LABEL_59:
        uint64_t v26 = v60;
        goto LABEL_60;
      }
      return v20;
    }
    return 1;
  }
  if ((a5 + 1) <= 1) {
    return 1;
  }
  if ((v53 - 21) > 1)
  {
    uint64_t v37 = a1[11];
    v50[0] = "expected operand";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(v37, (uint64_t)v50, v55);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      uint64_t v38 = __p;
      if (__p)
      {
        long long v39 = v63;
        unsigned int v40 = __p;
        if (v63 != __p)
        {
          do
            long long v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          unsigned int v40 = __p;
        }
        unint64_t v63 = v38;
        operator delete(v40);
      }
      unint64_t v24 = v60;
      if (!v60) {
        goto LABEL_61;
      }
      unsigned int v41 = v61;
      uint64_t v26 = v60;
      if (v61 == v60) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v43 = *--v41;
        uint64_t v42 = v43;
        *unsigned int v41 = 0;
        if (v43) {
          MEMORY[0x21667D390](v42, 0x1000C8077774924);
        }
      }
      while (v41 != v24);
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v30 = a1[11];
    v50[0] = "unexpected delimiter";
    __int16 v51 = 259;
    mlir::detail::Parser::emitError(v30, (uint64_t)v50, v55);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      uint64_t v31 = __p;
      if (__p)
      {
        __int16 v32 = v63;
        uint64_t v33 = __p;
        if (v63 != __p)
        {
          do
            __int16 v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        unint64_t v63 = v31;
        operator delete(v33);
      }
      unint64_t v24 = v60;
      if (!v60) {
        goto LABEL_61;
      }
      unint64_t v34 = v61;
      uint64_t v26 = v60;
      if (v61 == v60) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v36 = *--v34;
        uint64_t v35 = v36;
        void *v34 = 0;
        if (v36) {
          MEMORY[0x21667D390](v35, 0x1000C8077774924);
        }
      }
      while (v34 != v24);
      goto LABEL_59;
    }
  }
  return v20;
}

unint64_t anonymous namespace'::CustomOpAsmParser::resolveOperand(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 88);
  long long v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  if (result)
  {
    unint64_t v8 = result;
    uint64_t v9 = *(unsigned int *)(a4 + 8);
    if (v9 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v9) = v8;
    ++*(_DWORD *)(a4 + 8);
    return 1;
  }
  return result;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v34[8] = *MEMORY[0x263EF8340];
  __int16 v32 = v34;
  uint64_t v33 = 0x200000000;
  void v28[2] = &v32;
  __src = v31;
  uint64_t v30 = 0x100000000;
  v28[0] = a1;
  v28[1] = &__src;
  unint64_t v27 = 0;
  {
    if (v27)
    {
      uint64_t v13 = mlir::AffineMapAttr::get(v27);
      *a3 = v13;
      uint64_t NamedAttr = mlir::Builder::getNamedAttr(*(mlir::StringAttr ***)(a1 + 88), a4, a5, v13);
      mlir::NamedAttrList::push_back(a6, NamedAttr, v15);
    }
    long long v16 = v32;
    unint64_t v17 = v33;
    *(_DWORD *)(a2 + 8) = 0;
    if (v17 <= *(_DWORD *)(a2 + 12))
    {
      if (!v17)
      {
        int v21 = 0;
LABEL_11:
        uint64_t v22 = (v21 + v17);
        *(_DWORD *)(a2 + 8) = v22;
        uint64_t v23 = __src;
        uint64_t v24 = v30;
        unint64_t v25 = v30 + v22;
        if (v25 > *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v25, 32);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        if (v24)
        {
          memcpy((void *)(*(void *)a2 + 32 * v22), v23, 32 * v24);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v22 + v24;
        uint64_t v19 = 1;
        uint64_t v20 = __src;
        if (__src != v31) {
          goto LABEL_16;
        }
        goto LABEL_17;
      }
      uint64_t v18 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17, 32);
      uint64_t v18 = *(unsigned int *)(a2 + 8);
    }
    memcpy((void *)(*(void *)a2 + 32 * v18), v16, 32 * v17);
    int v21 = *(_DWORD *)(a2 + 8);
    goto LABEL_11;
  }
  uint64_t v19 = 0;
  uint64_t v20 = __src;
  if (__src != v31) {
LABEL_16:
  }
    free(v20);
LABEL_17:
  if (v32 != v34) {
    free(v32);
  }
  return v19;
}

BOOL anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v5[0] = a1;
  v5[1] = a3;
  v5[2] = a2;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseArgument(mlir::AsmParser *a1, uint64_t a2, int a3, int a4)
{
  v13[9] = *MEMORY[0x263EF8340];
  v12[0] = v13;
  v12[1] = (void *)0x400000000;
  v13[8] = 4;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, void))(*(void *)a1 + 672))(a1, a2, 0)
    && (!a3 || (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 544))(a1, a2 + 32))
    && (!a4 || (*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(void *)a1 + 456))(a1, v12))
    && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 624))(a1, a2 + 48))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    *(void *)(a2 + 40) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v12, Context);
    uint64_t v9 = 1;
    uint64_t v10 = v12[0];
    if (v12[0] == v13) {
      return v9;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v12[0];
  if (v12[0] != v13) {
LABEL_10:
  }
    free(v10);
  return v9;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalArgument(void *a1)
{
  if (*(_DWORD *)(*(void *)(a1[11] + 8) + 56) == 6) {
    return (*(unsigned __int8 (**)(void *))(*a1 + 720))(a1) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseArgumentList(void *a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  char v8 = a4;
  char v7 = a5;
  if (!a3 && *(_DWORD *)(*(void *)(a1[11] + 8) + 56) != 6) {
    return 1;
  }
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = &v8;
  v6[3] = &v7;
}

BOOL anonymous namespace'::CustomOpAsmParser::parseRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(void *a1)
{
  if (*(_DWORD *)(*(void *)(a1[11] + 8) + 56) == 20) {
    return (*(unsigned __int8 (**)(void *))(*a1 + 744))(a1) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8) + 56) == 20) {
    operator new();
  }
  return 0;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseSuccessor(_anonymous_namespace_::OperationParser **this, mlir::Block **a2)
{
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalSuccessor(_anonymous_namespace_::CustomOpAsmParser *this, mlir::Block **a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 11) + 8);
  int v6 = *(_DWORD *)(v4 + 56);
  uint64_t v5 = v4 + 56;
  if (v6 == 7 || mlir::Token::isCodeCompletionFor(v5, 7)) {
    return (*(unsigned __int8 (**)(_anonymous_namespace_::CustomOpAsmParser *, mlir::Block **))(*(void *)this + 768))(this, a2) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseSuccessorAndUseList(void *a1, uint64_t a2, uint64_t a3)
{
  v59[16] = *MEMORY[0x263EF8340];
  if (!(*(unsigned __int8 (**)(void *))(*a1 + 768))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(void *))(*a1 + 272))(a1)) {
    return 1;
  }
  uint64_t v5 = a1[11];
  unsigned int v57 = v59;
  uint64_t v58 = 0x400000000;
  {
    char v13 = 0;
    long long v14 = v57;
    if (v57 == v59) {
      return v13 && (*(unsigned __int8 (**)(void *))(*a1 + 280))(a1);
    }
    goto LABEL_23;
  }
  if (!v58)
  {
    char v13 = 1;
    long long v14 = v57;
    if (v57 == v59) {
      return v13 && (*(unsigned __int8 (**)(void *))(*a1 + 280))(a1);
    }
    goto LABEL_23;
  }
  uint64_t v54 = v56;
  uint64_t v55 = 0x400000000;
  *(void *)&long long v44 = "expected ':' in operand list";
  LOWORD(v46) = 259;
  if (!mlir::detail::Parser::parseToken(v5, 15, (uint64_t)&v44)
    || !mlir::detail::Parser::parseTypeListNoParens(v5, (uint64_t)&v54))
  {
    goto LABEL_19;
  }
  unsigned int v6 = v58;
  if (v58 == v55)
  {
    if (*(_DWORD *)(a3 + 12) < v58)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v58, 8);
      unsigned int v6 = v58;
    }
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 32 * v6;
      while (1)
      {
        long long v10 = *(_OWORD *)&v57[v8 / 8 + 2];
        long long v44 = *(_OWORD *)&v57[v8 / 8];
        *(_OWORD *)unint64_t v45 = v10;
        if (!v11) {
          break;
        }
        unint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(unsigned int *)(a3 + 12))
        {
          unint64_t v38 = v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          unint64_t v11 = v38;
          unint64_t v12 = *(unsigned int *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        v8 += 32;
        v7 += 8;
        if (v9 == v8) {
          goto LABEL_49;
        }
      }
LABEL_19:
      char v13 = 0;
      goto LABEL_20;
    }
LABEL_49:
    char v13 = 1;
  }
  else
  {
    long long v39 = "expected ";
    __int16 v40 = 259;
    mlir::detail::Parser::emitError(v5, (uint64_t)&v39, &v44);
    if ((void)v44)
    {
      int v41 = 5;
      unint64_t v42 = v58;
      long long v16 = &v41;
      unint64_t v17 = (char *)v45[1];
      if (v46 >= v47)
      {
        unint64_t v33 = v46 + 1;
        if (v45[1] <= &v41 && (char *)v45[1] + 24 * v46 > (char *)&v41)
        {
          int64_t v36 = (char *)&v41 - (char *)v45[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          unint64_t v17 = (char *)v45[1];
          long long v16 = (int *)((char *)v45[1] + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          long long v16 = &v41;
          unint64_t v17 = (char *)v45[1];
        }
      }
      uint64_t v18 = &v17[24 * v46];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v46;
      if ((void)v44)
      {
        int v41 = 3;
        unint64_t v42 = (unint64_t)" types to match operand list";
        uint64_t v43 = 28;
        int v21 = &v41;
        uint64_t v22 = (char *)v45[1];
        if (v20 >= v47)
        {
          unint64_t v34 = v20 + 1;
          BOOL v35 = (char *)v45[1] + 24 * v20 > (char *)&v41;
          if (v45[1] <= &v41 && v35)
          {
            int64_t v37 = (char *)&v41 - (char *)v45[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            uint64_t v22 = (char *)v45[1];
            int v21 = (int *)((char *)v45[1] + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            int v21 = &v41;
            uint64_t v22 = (char *)v45[1];
          }
        }
        uint64_t v23 = &v22[24 * v46];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v46;
      }
    }
    char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
    if ((void)v44) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
    }
    if (v53)
    {
      unint64_t v25 = __p;
      if (__p)
      {
        uint64_t v26 = v52;
        unint64_t v27 = __p;
        if (v52 != __p)
        {
          do
            uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          unint64_t v27 = __p;
        }
        char v52 = v25;
        operator delete(v27);
      }
      uint64_t v28 = v49;
      if (v49)
      {
        int64_t v29 = v50;
        uint64_t v30 = v49;
        if (v50 != v49)
        {
          do
          {
            uint64_t v32 = *--v29;
            uint64_t v31 = v32;
            void *v29 = 0;
            if (v32) {
              MEMORY[0x21667D390](v31, 0x1000C8077774924);
            }
          }
          while (v29 != v28);
          uint64_t v30 = v49;
        }
        uint64_t v50 = v28;
        operator delete(v30);
      }
      if (v45[1] != v48) {
        free(v45[1]);
      }
    }
  }
LABEL_20:
  if (v54 != v56) {
    free(v54);
  }
  long long v14 = v57;
  if (v57 != v59) {
LABEL_23:
  }
    free(v14);
  return v13 && (*(unsigned __int8 (**)(void *))(*a1 + 280))(a1);
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned __int8 (**)(uint64_t *))(*a1 + 272))(a1))
  {
    v9[0] = a1;
    v9[1] = a2;
    v9[2] = a3;
    int v6 = 1;
  }
  else
  {
    BOOL v7 = 0;
    int v6 = 0;
  }
  return v7 | (v6 << 8);
}

uint64_t anonymous namespace'::OperationParser::parseLocationAlias(uint64_t a1, uint64_t *a2)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  long long v92 = *(_OWORD *)(v4 + 56);
  uint64_t v93 = *(void *)(v4 + 72);
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v98);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v98;
  *(void *)(v5 + 72) = v99;
  uint64_t v6 = v93 != 0;
  if (v93) {
    BOOL v7 = (int8x16_t *)(*((void *)&v92 + 1) + 1);
  }
  else {
    BOOL v7 = (int8x16_t *)*((void *)&v92 + 1);
  }
  unint64_t v8 = (const unsigned __int8 *)(v93 - v6);
  if (v93 != v6)
  {
    uint64_t v9 = memchr(v7, 46, v93 - v6);
    if (v9 && v9 - (unsigned char *)v7 != -1)
    {
      uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v92);
      __int16 v91 = 257;
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v88, (uint64_t)&v98);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v98);
      }
      if ((void)v98)
      {
        LODWORD(v94) = 3;
        v95 = "expected location, but found dialect attribute: '#";
        uint64_t v96 = 50;
        uint64_t v60 = (void ***)&v94;
        int v61 = (char *)v100;
        if (v101 >= v102)
        {
          unint64_t v77 = v101 + 1;
          if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
          {
            int64_t v83 = (char *)&v94 - (unsigned char *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            int v61 = (char *)v100;
            uint64_t v60 = (void ***)((char *)v100 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            uint64_t v60 = (void ***)&v94;
            int v61 = (char *)v100;
          }
        }
        char v62 = &v61[24 * v101];
        long long v63 = *(_OWORD *)v60;
        *((void *)v62 + 2) = v60[2];
        *(_OWORD *)char v62 = v63;
        ++v101;
        if ((void)v98)
        {
          __int16 v97 = 261;
          v94 = v7;
          v95 = (const char *)v8;
          mlir::Diagnostic::operator<<((uint64_t)&v98 + 8, (void ***)&v94);
          if ((void)v98)
          {
            LODWORD(v94) = 3;
            v95 = "'";
            uint64_t v96 = 1;
            char v64 = (void ***)&v94;
            uint64_t v65 = (char *)v100;
            if (v101 >= v102)
            {
              unint64_t v78 = v101 + 1;
              if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
              {
                int64_t v84 = (char *)&v94 - (unsigned char *)v100;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                uint64_t v65 = (char *)v100;
                char v64 = (void ***)((char *)v100 + v84);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                char v64 = (void ***)&v94;
                uint64_t v65 = (char *)v100;
              }
            }
            uint64_t v66 = &v65[24 * v101];
            long long v67 = *(_OWORD *)v64;
            *((void *)v66 + 2) = v64[2];
            *(_OWORD *)uint64_t v66 = v67;
            ++v101;
          }
        }
      }
      uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
      if ((void)v98) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
      }
      if (v108)
      {
        uint64_t v68 = __p;
        if (__p)
        {
          uint64_t v69 = v107;
          uint64_t v70 = __p;
          if (v107 != __p)
          {
            do
              uint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
            while (v69 != v68);
            uint64_t v70 = __p;
          }
          uint64_t v107 = v68;
          operator delete(v70);
        }
        int v41 = v104;
        if (!v104) {
          goto LABEL_86;
        }
        v71 = v105;
        uint64_t v43 = v104;
        if (v105 == v104)
        {
LABEL_85:
          v105 = v41;
          operator delete(v43);
LABEL_86:
          if (v100 != v103) {
            free(v100);
          }
          return v37;
        }
        do
        {
          uint64_t v73 = *--v71;
          uint64_t v72 = v73;
          void *v71 = 0;
          if (v73) {
            MEMORY[0x21667D390](v72, 0x1000C8077774924);
          }
        }
        while (v71 != v41);
LABEL_84:
        uint64_t v43 = v104;
        goto LABEL_85;
      }
      return v37;
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(uint64_t **)(v11 + 128);
  if (v12)
  {
    uint64_t LocRange = mlir::Token::getLocRange((mlir::Token *)&v92);
    mlir::AsmParserState::addAttrAliasUses(v12, v7, v8, LocRange, v14);
    uint64_t v11 = *(void *)(a1 + 8);
  }
  uint64_t v15 = *(void *)(v11 + 80);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v15, v7, v8);
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v15 + 8)
    || (uint64_t v18 = *(void *)(*(void *)v15 + 8 * Key), (v19 = *(void *)(v18 + 8)) == 0))
  {
    uint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 3);
    uint64_t v45 = mlir::UnknownLoc::get(***(mlir::UnknownLoc ****)(a1 + 8), v17);
    uint64_t v46 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v92);
    uint64_t v47 = v46;
    char v49 = *(uint64_t **)(a1 + 368);
    unint64_t v48 = *(void *)(a1 + 376);
    if ((unint64_t)v49 >= v48)
    {
      char v53 = *(void **)(a1 + 360);
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (v49 - v53) + 1;
      if (v54 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v53) >> 3);
      if (2 * v55 > v54) {
        unint64_t v54 = 2 * v55;
      }
      if (v55 >= 0x555555555555555) {
        unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v57 = (char *)operator new(24 * v56);
      }
      else
      {
        unsigned int v57 = 0;
      }
      char v74 = (uint64_t *)&v57[8 * (v49 - v53)];
      *char v74 = v47;
      v74[1] = (uint64_t)v7;
      v74[2] = (uint64_t)v8;
      uint64_t v50 = v74 + 3;
      if (v49 != v53)
      {
        do
        {
          long long v75 = *(_OWORD *)(v49 - 3);
          *(v74 - 1) = *(v49 - 1);
          *(_OWORD *)(v74 - 3) = v75;
          v74 -= 3;
          v49 -= 3;
        }
        while (v49 != v53);
        char v49 = *(uint64_t **)(a1 + 360);
      }
      *(void *)(a1 + 360) = v74;
      *(void *)(a1 + 368) = v50;
      *(void *)(a1 + 376) = &v57[24 * v56];
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *char v49 = v46;
      v49[1] = (uint64_t)v7;
      uint64_t v50 = v49 + 3;
      v49[2] = (uint64_t)v8;
    }
    *(void *)(a1 + 368) = v50;
    return 1;
  }
  BOOL v20 = mlir::LocationAttr::classof(*(void *)(v18 + 8));
  if (v20) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = 0;
  }
  *a2 = v21;
  if (v20) {
    return 1;
  }
  uint64_t v22 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v92);
  __int16 v97 = 257;
  uint64_t v23 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v22);
  mlir::emitError(v23, (uint64_t)&v94, (uint64_t)&v98);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(&v98);
  }
  if ((void)v98)
  {
    int v88 = 3;
    v89 = "expected location, but found '";
    uint64_t v90 = 30;
    long long v24 = &v88;
    unint64_t v25 = (char *)v100;
    if (v101 >= v102)
    {
      unint64_t v79 = v101 + 1;
      if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
      {
        int64_t v85 = (char *)&v88 - (unsigned char *)v100;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        unint64_t v25 = (char *)v100;
        long long v24 = (int *)((char *)v100 + v85);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        long long v24 = &v88;
        unint64_t v25 = (char *)v100;
      }
    }
    uint64_t v26 = &v25[24 * v101];
    long long v27 = *(_OWORD *)v24;
    *((void *)v26 + 2) = *((void *)v24 + 2);
    *(_OWORD *)uint64_t v26 = v27;
    ++v101;
    if ((void)v98)
    {
      uint64_t v28 = &v88;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v88, v19);
      int64_t v29 = (char *)v100;
      if (v101 >= v102)
      {
        unint64_t v80 = v101 + 1;
        if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
        {
          int64_t v86 = (char *)&v88 - (unsigned char *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          int64_t v29 = (char *)v100;
          uint64_t v28 = (int *)((char *)v100 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          uint64_t v28 = &v88;
          int64_t v29 = (char *)v100;
        }
      }
      uint64_t v30 = &v29[24 * v101];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)uint64_t v30 = v31;
      uint64_t v32 = ++v101;
      if ((void)v98)
      {
        int v88 = 3;
        v89 = "'";
        uint64_t v90 = 1;
        unint64_t v33 = &v88;
        unint64_t v34 = (char *)v100;
        if (v32 >= v102)
        {
          unint64_t v81 = v32 + 1;
          BOOL v82 = (char *)v100 + 24 * v32 > (char *)&v88;
          if (v100 <= &v88 && v82)
          {
            int64_t v87 = (char *)&v88 - (unsigned char *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            unint64_t v34 = (char *)v100;
            unint64_t v33 = (int *)((char *)v100 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            unint64_t v33 = &v88;
            unint64_t v34 = (char *)v100;
          }
        }
        BOOL v35 = &v34[24 * v101];
        long long v36 = *(_OWORD *)v33;
        *((void *)v35 + 2) = *((void *)v33 + 2);
        *(_OWORD *)BOOL v35 = v36;
        ++v101;
      }
    }
  }
  uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
  if ((void)v98) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
  }
  if (v108)
  {
    unint64_t v38 = __p;
    if (__p)
    {
      long long v39 = v107;
      __int16 v40 = __p;
      if (v107 != __p)
      {
        do
          long long v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        __int16 v40 = __p;
      }
      uint64_t v107 = v38;
      operator delete(v40);
    }
    int v41 = v104;
    if (!v104) {
      goto LABEL_86;
    }
    unint64_t v42 = v105;
    uint64_t v43 = v104;
    if (v105 == v104) {
      goto LABEL_85;
    }
    do
    {
      uint64_t v52 = *--v42;
      uint64_t v51 = v52;
      *unint64_t v42 = 0;
      if (v52) {
        MEMORY[0x21667D390](v51, 0x1000C8077774924);
      }
    }
    while (v42 != v41);
    goto LABEL_84;
  }
  return v37;
}

uint64_t anonymous namespace'::OperationParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v128[32] = *MEMORY[0x263EF8340];
  uint64_t v104 = a9;
  uint64_t v105 = a10;
  v126 = v128;
  uint64_t v127 = 0x800000000;
  if (!*(unsigned char *)(a3 + 16))
  {
    *(void *)&long long v111 = "expected '(' to start operand list";
    LOWORD(v114) = 259;
    if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v111)) {
      goto LABEL_77;
    }
      goto LABEL_77;
    v122 = "expected ')' to end operand list";
    __int16 v125 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v122)) {
      goto LABEL_77;
    }
    uint64_t v18 = v127;
    if (*(unsigned char *)(a3 + 16))
    {
      *(void *)a3 = v126;
      *(void *)(a3 + 8) = v18;
    }
    else
    {
      *(void *)a3 = v126;
      *(void *)(a3 + 8) = v18;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  if (*(unsigned char *)(a4 + 16))
  {
    mlir::BlockRange::BlockRange(v109, *(void *)a4, *(void *)(a4 + 8));
    mlir::OperationState::addSuccessors((unsigned int *)a2, v109[0], v109[1]);
  }
  else if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 22)
  {
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>((void ***)(a2 + 8)) & 1) == 0)
    {
      v122 = "successors in non-terminator";
      __int16 v125 = 259;
      mlir::detail::Parser::emitError(a1, (uint64_t)&v122, &v111);
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v111);
      if ((void)v111) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v111);
      }
      if (!v121) {
        goto LABEL_78;
      }
      uint64_t v21 = __p;
      if (__p)
      {
        uint64_t v22 = v120;
        uint64_t v23 = __p;
        if (v120 != __p)
        {
          do
            uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          uint64_t v23 = __p;
        }
        v120 = v21;
        operator delete(v23);
      }
      long long v24 = v117;
      if (v117)
      {
        unint64_t v25 = v118;
        uint64_t v26 = v117;
        if (v118 == v117) {
          goto LABEL_112;
        }
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
LABEL_111:
        uint64_t v26 = v117;
LABEL_112:
        v118 = v24;
        operator delete(v26);
      }
LABEL_113:
      if (v113 != v116) {
        free(v113);
      }
      goto LABEL_78;
    }
    v122 = v124;
    uint64_t v123 = 0x200000000;
    *(void *)&long long v111 = "expected '['";
    LOWORD(v114) = 259;
    if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v111) {
      && (*(void *)&long long v111 = a1,
    }
          *((void *)&v111 + 1) = &v122,
    {
      mlir::BlockRange::BlockRange(v110, (uint64_t)v122, v123);
      mlir::OperationState::addSuccessors((unsigned int *)a2, v110[0], v110[1]);
      char v19 = 0;
    }
    else
    {
      char v19 = 1;
    }
    if (v122 != v124) {
      free(v122);
    }
    if (v19) {
      goto LABEL_77;
    }
  }
  if (a8)
  {
    *(void *)(a2 + 248) = a7;
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v29 + 56) == 23)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v29 + 8), (uint64_t)&v111);
      uint64_t v30 = *(void *)(a1 + 8);
      *(_OWORD *)(v30 + 56) = v111;
      *(void *)(v30 + 72) = v112;
      long long v31 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, 0);
      *(void *)(a2 + 248) = v31;
      if (!v31) {
        goto LABEL_77;
      }
      *(void *)&long long v111 = "expected '>' to close properties";
      LOWORD(v114) = 259;
      if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v111)) {
        goto LABEL_77;
      }
    }
  }
  if (*(unsigned char *)(a5 + 16))
  {
    mlir::OperationState::addRegions((char *)a2, *(void *)a5, *(void *)(a5 + 8));
  }
  else
  {
    uint64_t v32 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v32 + 56) == 21)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)&v111);
      uint64_t v33 = *(void *)(a1 + 8);
      *(_OWORD *)(v33 + 56) = v111;
      *(void *)(v33 + 72) = v112;
      operator new();
    }
  }
  if (*(unsigned char *)(a6 + 16))
  {
    BOOL v35 = *(const void **)a6;
    uint64_t v34 = *(void *)(a6 + 8);
    *(void *)(a2 + 192) = 0;
    uint64_t v36 = *(unsigned int *)(a2 + 120);
    if (v34 + v36 > (unint64_t)*(unsigned int *)(a2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), v34 + v36, 16);
      LODWORD(v36) = *(_DWORD *)(a2 + 120);
    }
    if (v34)
    {
      memcpy((void *)(*(void *)(a2 + 112) + 16 * v36), v35, 16 * v34);
      LODWORD(v36) = *(_DWORD *)(a2 + 120);
    }
    *(_DWORD *)(a2 + 120) = v36 + v34;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 20 {
         && !mlir::detail::Parser::parseAttributeDict((mlir::detail::Parser *)a1, (mlir::NamedAttrList *)(a2 + 112)))
  }
  {
    goto LABEL_77;
  }
  if ((_BYTE)v105)
  {
    uint64_t EncodedSourceLocation = *(void *)a2;
    goto LABEL_51;
  }
  *(void *)&long long v111 = "expected ':' followed by operation type";
  LOWORD(v114) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v111)
    || (uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1 + 8)
                                                                                                + 56)),
        uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, OCGSize),
        (uint64_t v57 = mlir::detail::Parser::parseType((mlir::detail::Parser *)a1)) == 0))
  {
LABEL_77:
    uint64_t v20 = 0;
    goto LABEL_78;
  }
  if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    v122 = "expected function type";
    __int16 v125 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v122, (uint64_t)&v111);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v111);
    if ((void)v111) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v111);
    }
    if (!v121) {
      goto LABEL_78;
    }
    uint64_t v58 = __p;
    if (__p)
    {
      uint64_t v59 = v120;
      uint64_t v60 = __p;
      if (v120 != __p)
      {
        do
          uint64_t v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
        while (v59 != v58);
        uint64_t v60 = __p;
      }
      v120 = v58;
      operator delete(v60);
    }
    long long v24 = v117;
    if (v117)
    {
      int v61 = v118;
      uint64_t v26 = v117;
      if (v118 == v117) {
        goto LABEL_112;
      }
      do
      {
        uint64_t v64 = *--v61;
        uint64_t v63 = v64;
        void *v61 = 0;
        if (v64) {
          MEMORY[0x21667D390](v63, 0x1000C8077774924);
        }
      }
      while (v61 != v24);
      goto LABEL_111;
    }
    goto LABEL_113;
  }
  LOBYTE(v105) = 1;
  uint64_t v104 = v57;
LABEL_51:
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v104);
  uint64_t v40 = v39;
  size_t v41 = 8 * v39;
  uint64_t v42 = *(unsigned int *)(a2 + 72);
  unint64_t v43 = v42 + ((8 * v39) >> 3);
  if (v43 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v43, 8);
    LODWORD(v42) = *(_DWORD *)(a2 + 72);
  }
  if (v40)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v42), Results, v41);
    LODWORD(v42) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v42 + (v41 >> 3);
  uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v104);
  uint64_t v46 = v45;
  uint64_t v47 = *(const char **)(a3 + 8);
  if (v45 != v47)
  {
    BOOL v65 = v47 == (const char *)1;
    uint64_t v66 = "s";
    if (v65) {
      uint64_t v66 = "";
    }
    char v67 = *v66;
    v122 = "expected ";
    __int16 v125 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v122, (uint64_t)&v111);
    if ((void)v111)
    {
      uint64_t v68 = *(const char **)(a3 + 8);
      int v106 = 5;
      uint64_t v107 = v68;
      uint64_t v69 = &v106;
      uint64_t v70 = (char *)v113;
      if (v114 >= v115)
      {
        unint64_t v93 = v114 + 1;
        if (v113 <= &v106 && (char *)v113 + 24 * v114 > (char *)&v106)
        {
          int64_t v99 = (char *)&v106 - (unsigned char *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
          uint64_t v70 = (char *)v113;
          uint64_t v69 = (int *)((char *)v113 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
          uint64_t v69 = &v106;
          uint64_t v70 = (char *)v113;
        }
      }
      v71 = &v70[24 * v114];
      long long v72 = *(_OWORD *)v69;
      *((void *)v71 + 2) = *((void *)v69 + 2);
      *(_OWORD *)v71 = v72;
      uint64_t v73 = ++v114;
      if ((void)v111)
      {
        int v106 = 3;
        uint64_t v107 = " operand type";
        uint64_t v108 = 13;
        char v74 = &v106;
        long long v75 = (char *)v113;
        if (v73 >= v115)
        {
          unint64_t v94 = v73 + 1;
          BOOL v95 = (char *)v113 + 24 * v73 > (char *)&v106;
          if (v113 <= &v106 && v95)
          {
            int64_t v100 = (char *)&v106 - (unsigned char *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
            long long v75 = (char *)v113;
            char v74 = (int *)((char *)v113 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
            char v74 = &v106;
            long long v75 = (char *)v113;
          }
        }
        v76 = &v75[24 * v114];
        long long v77 = *(_OWORD *)v74;
        *((void *)v76 + 2) = *((void *)v74 + 2);
        *(_OWORD *)v76 = v77;
        ++v114;
        if ((void)v111)
        {
          mlir::Diagnostic::operator<<((uint64_t)&v111 + 8, v67);
          if ((void)v111)
          {
            int v106 = 3;
            uint64_t v107 = " but had ";
            uint64_t v108 = 9;
            unint64_t v78 = &v106;
            unint64_t v79 = (char *)v113;
            if (v114 >= v115)
            {
              unint64_t v96 = v114 + 1;
              if (v113 <= &v106 && (char *)v113 + 24 * v114 > (char *)&v106)
              {
                int64_t v101 = (char *)&v106 - (unsigned char *)v113;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
                unint64_t v79 = (char *)v113;
                unint64_t v78 = (int *)((char *)v113 + v101);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
                unint64_t v78 = &v106;
                unint64_t v79 = (char *)v113;
              }
            }
            unint64_t v80 = &v79[24 * v114];
            long long v81 = *(_OWORD *)v78;
            *((void *)v80 + 2) = *((void *)v78 + 2);
            *(_OWORD *)unint64_t v80 = v81;
            uint64_t v82 = ++v114;
            if ((void)v111)
            {
              int v106 = 5;
              uint64_t v107 = v46;
              int64_t v83 = &v106;
              int64_t v84 = (char *)v113;
              if (v82 >= v115)
              {
                unint64_t v97 = v82 + 1;
                BOOL v98 = (char *)v113 + 24 * v82 > (char *)&v106;
                if (v113 <= &v106 && v98)
                {
                  int64_t v102 = (char *)&v106 - (unsigned char *)v113;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
                  int64_t v84 = (char *)v113;
                  int64_t v83 = (int *)((char *)v113 + v102);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
                  int64_t v83 = &v106;
                  int64_t v84 = (char *)v113;
                }
              }
              int64_t v85 = &v84[24 * v114];
              long long v86 = *(_OWORD *)v83;
              *((void *)v85 + 2) = *((void *)v83 + 2);
              *(_OWORD *)int64_t v85 = v86;
              ++v114;
            }
          }
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v111);
    if ((void)v111) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v111);
    }
    if (!v121) {
      goto LABEL_78;
    }
    int64_t v87 = __p;
    if (__p)
    {
      int v88 = v120;
      v89 = __p;
      if (v120 != __p)
      {
        do
          int v88 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v88 - 1);
        while (v88 != v87);
        v89 = __p;
      }
      v120 = v87;
      operator delete(v89);
    }
    long long v24 = v117;
    if (v117)
    {
      uint64_t v90 = v118;
      uint64_t v26 = v117;
      if (v118 == v117) {
        goto LABEL_112;
      }
      do
      {
        uint64_t v92 = *--v90;
        uint64_t v91 = v92;
        *uint64_t v90 = 0;
        if (v92) {
          MEMORY[0x21667D390](v91, 0x1000C8077774924);
        }
      }
      while (v90 != v24);
      goto LABEL_111;
    }
    goto LABEL_113;
  }
  if (v45)
  {
    unint64_t v48 = (uint64_t *)Inputs;
    uint64_t v49 = 0;
    uint64_t v50 = 32 * v45;
    do
    {
      uint64_t v51 = (_OWORD *)(*(void *)a3 + v49);
      long long v52 = v51[1];
      v103[0] = *v51;
      v103[1] = v52;
      unint64_t v54 = *(unsigned int *)(a2 + 24);
      if (v54 >= *(unsigned int *)(a2 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v54 + 1, 8);
        unint64_t v54 = *(unsigned int *)(a2 + 24);
      }
      *(void *)(*(void *)(a2 + 16) + 8 * v54) = v53;
      unsigned int v55 = *(_DWORD *)(a2 + 24) + 1;
      *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v55;
      if (!*(void *)(*(void *)(a2 + 16) + 8 * v55 - 8)) {
        goto LABEL_77;
      }
      v49 += 32;
      ++v48;
    }
    while (v50 != v49);
  }
  uint64_t v20 = 1;
LABEL_78:
  if (v126 != v128) {
    free(v126);
  }
  return v20;
}

uint64_t anonymous namespace'::OperationParser::parseOptionalSSAUseList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(v4 + 56);
  uint64_t v5 = v4 + 56;
  if (v6 != 6 && !mlir::Token::isCodeCompletionFor(v5, 6)) {
    return 1;
  }
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  {
    uint64_t v7 = *(unsigned int *)(a2 + 8);
    unint64_t v8 = *(void *)a2;
    uint64_t v9 = (char *)&v26;
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      unint64_t v23 = v7 + 1;
      BOOL v24 = v8 + 32 * v7 > (unint64_t)&v26;
      if (v8 <= (unint64_t)&v26 && v24)
      {
        unint64_t v25 = (char *)&v26 - v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        unint64_t v8 = *(void *)a2;
        uint64_t v9 = &v25[*(void *)a2];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        unint64_t v8 = *(void *)a2;
        uint64_t v9 = (char *)&v26;
      }
    }
    long long v10 = (_OWORD *)(v8 + 32 * *(unsigned int *)(a2 + 8));
    long long v11 = *((_OWORD *)v9 + 1);
    *long long v10 = *(_OWORD *)v9;
    v10[1] = v11;
    ++*(_DWORD *)(a2 + 8);
    uint64_t v12 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v12 + 56) == 16)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
        uint64_t v13 = *(void *)(a1 + 8);
        *(_OWORD *)(v13 + 56) = v26;
        *(void *)(v13 + 72) = v27;
        long long v26 = 0uLL;
        uint64_t v27 = 0;
          return 0;
        uint64_t v14 = *(unsigned int *)(a2 + 8);
        unint64_t v15 = *(void *)a2;
        if (v14 >= *(_DWORD *)(a2 + 12))
        {
          unint64_t v19 = v14 + 1;
          BOOL v20 = v15 + 32 * v14 > (unint64_t)&v26;
          if (v15 <= (unint64_t)&v26 && v20)
          {
            uint64_t v21 = (char *)&v26 - v15;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
            unint64_t v15 = *(void *)a2;
            long long v16 = &v21[*(void *)a2];
            goto LABEL_9;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
          unint64_t v15 = *(void *)a2;
        }
        long long v16 = (char *)&v26;
LABEL_9:
        unint64_t v17 = (_OWORD *)(v15 + 32 * *(unsigned int *)(a2 + 8));
        long long v18 = *((_OWORD *)v16 + 1);
        _OWORD *v17 = *(_OWORD *)v16;
        v17[1] = v18;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v12 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v12 + 56) != 16) {
          return 1;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(void ***a1)
{
  {
    long long v11 = a1;
    a1 = v11;
    if (v3)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v13 = 84;
      unint64_t v4 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v4) {
        unint64_t v5 = v4;
      }
      else {
        unint64_t v5 = v13;
      }
      int v6 = &v12[v5];
      unint64_t v7 = v13 - v5;
      if (v13 - v5 >= 0x12) {
        uint64_t v8 = 18;
      }
      else {
        uint64_t v8 = v13 - v5;
      }
      unint64_t v9 = v7 - v8;
      if (v9 >= v9 - 1) {
        uint64_t v10 = v9 - 1;
      }
      else {
        uint64_t v10 = v9;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      a1 = v11;
    }
  }
  uint64_t v1 = *a1;
  if (v1[2] == &mlir::detail::TypeIDResolver<void,void>::id) {
    return 1;
  }
  else {
    return (*((uint64_t (**)(void **, uint64_t))*v1 + 4))(v1, mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
  }
}

uint64_t anonymous namespace'::OperationParser::parseRegion(_anonymous_namespace_::OperationParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a1 + 1);
  long long v12 = *(_OWORD *)(v6 + 56);
  uint64_t v13 = *(void *)(v6 + 72);
  v14[0] = (mlir::Block *)"expected '{' to begin a region";
  __int16 v16 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 20, (uint64_t)v14)) {
    return 0;
  }
  unint64_t v7 = *(mlir::AsmParserState **)(*((void *)a1 + 1) + 128);
  if (v7) {
    mlir::AsmParserState::startRegionDefinition(v7);
  }
  if (a4 || (uint64_t v8 = *((void *)a1 + 1), *(_DWORD *)(v8 + 56) != 27))
  {
    MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v12);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)v14);
  uint64_t v10 = *((void *)a1 + 1);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)v14;
  *(void *)(v10 + 72) = v15;
  uint64_t v11 = *(void *)(*((void *)a1 + 1) + 128);
  if (v11) {
    mlir::AsmParserState::finalizeRegionDefinition(v11);
  }
  return 1;
}

unint64_t anonymous namespace'::OperationParser::resolveSSAUse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v56[2] = *MEMORY[0x263EF8340];
  uint64_t v35 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(v6 + 8);
  if (v9 <= v8)
  {
    unint64_t v14 = (v8 + 1);
    if (v9 != v14)
    {
      if (v9 <= v14)
      {
        if (*(_DWORD *)(v6 + 12) < v14)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v14, 16);
          unsigned int v9 = *(_DWORD *)(v7 + 8);
        }
        if (v9 != v14) {
          bzero((void *)(*(void *)v7 + 16 * v9), 16 * (v14 - v9));
        }
      }
      *(_DWORD *)(v7 + 8) = v14;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(*(void *)v6 + 16 * v8);
    if (v10)
    {
      if (a3 != (*(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(const char **)a2;
        v47[0] = (unint64_t)"use of value '";
        __int16 v48 = 259;
        uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v11);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v47, (uint64_t)&v49);
        if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
          mlir::InFlightDiagnostic::abandon(&v49);
        }
        v56[0] = *(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v49)
        {
          __int16 v55 = 261;
          uint64_t v13 = *(mlir::OpResult **)(a2 + 16);
          unint64_t v53 = *(void ***)(a2 + 8);
          unint64_t v54 = v13;
          mlir::Diagnostic::operator<<((uint64_t)&v50, &v53);
          mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>((uint64_t)&v50, "' expects different type than prior uses: ", &v35, " vs ", v56);
        }
        mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, *(const char **)(*(void *)v7 + 16 * *(unsigned int *)(a2 + 24) + 8));
        mlir::Diagnostic::attachNote();
      }
LABEL_23:
      uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 128);
      if (v23) {
        mlir::AsmParserState::addUses(v23, v10, (unsigned char **)a2, 1);
      }
      return v10;
    }
  }
  if (!**(void **)v7
    || (unint64_t v53 = **(void ****)v7,
        uint64_t v49 = 0,
        (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), (unint64_t *)&v53, &v49) & 1) != 0))
  {
    uint64_t v15 = *(const char **)a2;
    uint64_t v38 = a3;
    mlir::OperationName::OperationName(&v37, "builtin.unrealized_conversion_cast", 34, ***(void ***)(a1 + 8));
    uint64_t v16 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v15);
    uint64_t v17 = v37;
    mlir::ValueRange::ValueRange((unint64_t *)&v53, (uint64_t)&v38, 1uLL);
    mlir::ValueRange::ValueRange(v47, 0, 0);
    uint64_t v49 = v51;
    uint64_t v50 = 0x400000000;
    uint64_t v52 = 4;
    mlir::BlockRange::BlockRange(v56, 0, 0);
    uint64_t v18 = mlir::Operation::create(v16, v17, (uint64_t)v53, v54, v47[0], v47[1], (mlir::NamedAttrList *)&v49, 0, v56[0], v56[1], 0);
    if (v49 != v51) {
      free(v49);
    }
    unint64_t v10 = v18 - 16;
    unint64_t v36 = v10;
    uint64_t v49 = 0;
    char v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v36, &v49);
    BOOL v20 = v49;
    if ((v19 & 1) == 0)
    {
      BOOL v20 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(a1 + 336, (uint64_t)&v36, &v36, v49);
      void *v20 = v36;
      v20[1] = 0;
    }
    v20[1] = v15;
    uint64_t v21 = *(const char **)a2;
    uint64_t v22 = (unint64_t *)(*(void *)v7 + 16 * *(unsigned int *)(a2 + 24));
    unint64_t *v22 = v10;
    v22[1] = (unint64_t)v21;
    goto LABEL_23;
  }
  BOOL v24 = *(const char **)a2;
  uint64_t v49 = "reference to invalid result number";
  v51[8] = 259;
  uint64_t v25 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v24);
  mlir::emitError(v25, (uint64_t)&v49, (uint64_t)v39);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(v39);
  }
  if (v39[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
  }
  if (v46)
  {
    long long v26 = v44;
    if (v44)
    {
      uint64_t v27 = v45;
      uint64_t v28 = v44;
      if (v45 != v44)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = v44;
      }
      uint64_t v45 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v42;
    if (v42)
    {
      uint64_t v30 = v43;
      long long v31 = v42;
      if (v43 != v42)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        long long v31 = v42;
      }
      unint64_t v43 = v29;
      operator delete(v31);
    }
    if (v40 != &v41) {
      free(v40);
    }
  }
  return 0;
}

uint64_t anonymous namespace'::OperationParser::parseSSAUse(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    v64[0] = 0;
    v64[1] = 0;
    uint64_t v65 = 0;
    DWORD2(v70) = 0;
    char v74 = 0;
    uint64_t v75 = 0;
    int v76 = 1;
    long long v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    *(void *)&long long v70 = &unk_26C35BB50;
    long long v77 = v64;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v70, 0, 0, 0);
    unsigned int v5 = *(_DWORD *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v63 = v6 + 88 * v5;
      while (1)
      {
        uint64_t v7 = *(uint64_t ***)v6;
        uint64_t v8 = *(unsigned int *)(v6 + 8);
        if (v8) {
          break;
        }
        unsigned int v9 = *(uint64_t ***)v6;
        unint64_t v14 = &v7[v8];
        if (v7 != v14) {
          goto LABEL_18;
        }
LABEL_4:
        v6 += 88;
        if (v6 == v63) {
          goto LABEL_61;
        }
      }
      unsigned int v9 = *(uint64_t ***)v6;
      if (*v7) {
        BOOL v10 = *v7 + 1 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        do
        {
          long long v12 = v9[1];
          ++v9;
          uint64_t v11 = v12;
          if (v12) {
            BOOL v13 = v11 + 1 == 0;
          }
          else {
            BOOL v13 = 1;
          }
        }
        while (v13);
      }
      unint64_t v14 = &v7[v8];
      if (v9 == v14) {
        goto LABEL_4;
      }
LABEL_18:
      uint64_t v15 = *v9;
      while (!*((_DWORD *)v15 + 4))
      {
        do
        {
LABEL_46:
          uint64_t v35 = v9[1];
          ++v9;
          uint64_t v15 = v35;
          if (v35) {
            BOOL v36 = v15 + 1 == 0;
          }
          else {
            BOOL v36 = 1;
          }
        }
        while (v36);
        if (v9 == v14) {
          goto LABEL_4;
        }
      }
      uint64_t v16 = *(void *)v15[1];
      if ((~*(_DWORD *)(v16 + 8) & 7) != 0) {
        uint64_t v17 = *(mlir::detail::OpResultImpl **)v15[1];
      }
      else {
        uint64_t v17 = 0;
      }
      if (v17)
      {
        int v18 = *(_DWORD *)(a1 + 352);
        if (v18)
        {
          uint64_t v19 = *(void *)(a1 + 336);
          {
            char v62 = v17;
            uint64_t v17 = v62;
            if (v37)
            {
              unint64_t v38 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v38 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v38;
              uint64_t v17 = v62;
            }
          }
          unint64_t v20 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ ((unint64_t)v17 >> 32));
          unint64_t v21 = 0x9DDFEA08EB382D69 * (((unint64_t)v17 >> 32) ^ (v20 >> 47) ^ v20);
          unsigned int v22 = (-348639895 * ((v21 >> 47) ^ v21)) & (v18 - 1);
          uint64_t v23 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v22);
          if (v23 == v17) {
            goto LABEL_40;
          }
          int v24 = 1;
          while (v23 != (mlir::detail::OpResultImpl *)-4096)
          {
            unsigned int v25 = v22 + v24++;
            unsigned int v22 = v25 & (v18 - 1);
            uint64_t v23 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v22);
            if (v23 == v17) {
              goto LABEL_40;
            }
          }
        }
        unint64_t v69 = *(void *)(mlir::detail::OpResultImpl::getOwner(v17) + 48);
        mlir::OperationName::print((mlir::OperationName *)&v69, (llvm::raw_ostream *)&v70);
        if ((char *)v72 - v73 > (char *)1)
        {
          *(_WORD *)uint64_t v73 = 8250;
          v73 += 2;
          goto LABEL_40;
        }
        uint64_t v28 = (llvm::raw_ostream *)&v70;
        goto LABEL_37;
      }
      long long v26 = (_DWORD *)v73;
      if ((char *)v72 - v73 > (char *)4)
      {
        *(unsigned char *)(v73 + 4) = 35;
        _DWORD *v26 = 543650401;
        v73 += 5;
        uint64_t v28 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, *(unsigned int *)(v16 + 24));
        uint64_t v29 = (_WORD *)*((void *)v28 + 4);
        if (*((void *)v28 + 3) - (void)v29 > 1uLL)
        {
LABEL_38:
          _WORD *v29 = 8250;
          *((void *)v28 + 4) += 2;
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v27 = llvm::raw_ostream::write((llvm::raw_ostream *)&v70, "arg #", 5uLL);
        uint64_t v28 = llvm::raw_ostream::operator<<(v27, *(unsigned int *)(v16 + 24));
        uint64_t v29 = (_WORD *)*((void *)v28 + 4);
        if (*((void *)v28 + 3) - (void)v29 > 1uLL) {
          goto LABEL_38;
        }
      }
LABEL_37:
      llvm::raw_ostream::write(v28, ": ", 2uLL);
LABEL_40:
      unint64_t v69 = *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v69, (llvm::raw_ostream *)&v70);
      if (*((_DWORD *)v15 + 4) >= 2u)
      {
        uint64_t v30 = (_DWORD *)v73;
        if ((char *)v72 - v73 > (char *)4)
        {
          *(unsigned char *)(v73 + 4) = 46;
          _DWORD *v30 = 774774828;
          v73 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v70, ", ...", 5uLL);
        }
      }
      uint64_t v31 = *(void *)(*(void *)(a1 + 8) + 136);
      uint64_t v32 = *v15;
      uint64_t v33 = v77;
      uint64_t v34 = v77[2];
      *(_OWORD *)std::string __p = *(_OWORD *)v77;
      uint64_t v68 = v34;
      v77[1] = 0;
      v33[2] = 0;
      *uint64_t v33 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(void *)v31 + 32))(v31, v15 + 5, v32, __p);
      if (SHIBYTE(v68) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_46;
    }
LABEL_61:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v70);
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
    return 0;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 64);
  *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *(void *)a2 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1 + 8) + 56));
  *(void *)&long long v70 = "expected SSA operand";
  LOWORD(v73) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 6, (uint64_t)&v70)) {
    return 0;
  }
  uint64_t v41 = *(void *)(a1 + 8);
  int v43 = *(_DWORD *)(v41 + 56);
  uint64_t v42 = (mlir::Token *)(v41 + 56);
  if (v43 != 5) {
    return 1;
  }
  if (a3)
  {
    unint64_t HashIdentifierNumber = mlir::Token::getHashIdentifierNumber(v42);
    if ((HashIdentifierNumber & 0xFF00000000) != 0)
    {
      *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = HashIdentifierNumber;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v70);
      uint64_t v45 = *(void *)(a1 + 8);
      *(_OWORD *)(v45 + 56) = v70;
      *(void *)(v45 + 72) = v71;
      return 1;
    }
    v64[0] = "invalid SSA value result number";
    __int16 v66 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v64, &v70);
    uint64_t v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if ((void)v70) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    }
    if (v82)
    {
      unint64_t v56 = v80;
      if (v80)
      {
        uint64_t v57 = v81;
        uint64_t v58 = v80;
        if (v81 != v80)
        {
          do
            uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          uint64_t v58 = v80;
        }
        long long v81 = v56;
        operator delete(v58);
      }
      uint64_t v51 = v78;
      if (!v78) {
        goto LABEL_96;
      }
      uint64_t v59 = v79;
      unint64_t v53 = v78;
      if (v79 == v78)
      {
LABEL_95:
        unint64_t v79 = v51;
        operator delete(v53);
LABEL_96:
        if (v72 != &v74) {
          free(v72);
        }
        return v46;
      }
      do
      {
        uint64_t v61 = *--v59;
        uint64_t v60 = v61;
        void *v59 = 0;
        if (v61) {
          MEMORY[0x21667D390](v60, 0x1000C8077774924);
        }
      }
      while (v59 != v51);
LABEL_94:
      unint64_t v53 = v78;
      goto LABEL_95;
    }
  }
  else
  {
    v64[0] = "result number not allowed in argument list";
    __int16 v66 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v64, &v70);
    uint64_t v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if ((void)v70) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    }
    if (v82)
    {
      __int16 v48 = v80;
      if (v80)
      {
        uint64_t v49 = v81;
        uint64_t v50 = v80;
        if (v81 != v80)
        {
          do
            uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          uint64_t v50 = v80;
        }
        long long v81 = v48;
        operator delete(v50);
      }
      uint64_t v51 = v78;
      if (!v78) {
        goto LABEL_96;
      }
      uint64_t v52 = v79;
      unint64_t v53 = v78;
      if (v79 == v78) {
        goto LABEL_95;
      }
      do
      {
        uint64_t v55 = *--v52;
        uint64_t v54 = v55;
        void *v52 = 0;
        if (v55) {
          MEMORY[0x21667D390](v54, 0x1000C8077774924);
        }
      }
      while (v52 != v51);
      goto LABEL_94;
    }
  }
  return v46;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    uint64_t v6 = &unk_267770000;
    {
      uint64_t v23 = a3;
      unint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      uint64_t v6 = &unk_267770000;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        uint64_t v6 = (void *)&unk_267770000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (v6[385] + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    int v10 = v3 - 1;
    unsigned int v11 = v9 & (v3 - 1);
    long long v12 = (void *)(v4 + 16 * v11);
    uint64_t v13 = *v12;
    if (*a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        unsigned int v18 = v11 + v16++;
        unsigned int v11 = v18 & v10;
        long long v12 = (void *)(v4 + 16 * (v18 & v10));
        uint64_t v13 = *v12;
        if (*a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        long long v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseSuccessors(llvm::SmallVectorImpl<mlir::Block *> &)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(_anonymous_namespace_::OperationParser **)a1;
  unint64_t v8 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v8;
  uint64_t v6 = *(unsigned int *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
  }
  *(void *)(*(void *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  return v3;
}

uint64_t anonymous namespace'::OperationParser::parseSuccessor(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)*((void *)this + 1);
  int v4 = *((_DWORD *)v3 + 14);
  if (v4 == 7)
  {
    uint64_t v12 = v3[8];
    uint64_t v13 = v3[9];
    *(void *)&long long v32 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v3 + 7));
    uint64_t v15 = *BlockInfoByName;
    if (!*BlockInfoByName) {
      operator new();
    }
    unint64_t v25 = *(uint64_t **)(*((void *)this + 1) + 128);
    if (v25)
    {
      mlir::AsmParserState::addUses(v25, (uint64_t)v15, (unsigned char **)&v32, 1);
      uint64_t v15 = *BlockInfoByName;
    }
    *a2 = v15;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v32);
    uint64_t v26 = *((void *)this + 1);
    *(_OWORD *)(v26 + 56) = v32;
    *(void *)(v26 + 72) = v33;
    return 1;
  }
  else if (v4 == 2)
  {
    uint64_t v5 = v3[9];
    if (!v5 || v5 == 1 && *(unsigned char *)v3[8] == 94)
    {
      uint64_t v6 = *((void *)this + 26) + 24 * *((unsigned int *)this + 54);
      if (*(_DWORD *)(v6 - 16))
      {
        uint64_t v7 = *(uint64_t **)(v6 - 24);
        uint64_t v8 = *(unsigned int *)(v6 - 8);
        if (v8)
        {
          uint64_t v9 = 32 * v8;
          for (uint64_t i = v7; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; i += 4)
          {
            v9 -= 32;
            if (!v9) {
              return 0;
            }
          }
        }
        else
        {
          uint64_t i = v7;
        }
        uint64_t v27 = &v7[4 * v8];
        if (i != v27)
        {
          uint64_t v28 = *i;
          while (1)
          {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 40))(*(void *)(*((void *)this + 1) + 136), v28, i[1]);
            i += 4;
            if (i == v27) {
              break;
            }
            while (1)
            {
              uint64_t v28 = *i;
              if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL) {
                break;
              }
              i += 4;
              if (i == v27) {
                return 0;
              }
            }
            uint64_t v16 = 0;
            if (i == v27) {
              return v16;
            }
          }
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v30 = "expected block name";
    __int16 v31 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v30, &v32);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v32);
    if ((void)v32) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
    }
    if (v40)
    {
      BOOL v17 = __p;
      if (__p)
      {
        unsigned int v18 = v39;
        int v19 = __p;
        if (v39 != __p)
        {
          do
            unsigned int v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          int v19 = __p;
        }
        uint64_t v39 = v17;
        operator delete(v19);
      }
      unint64_t v20 = v36;
      if (v36)
      {
        unint64_t v21 = v37;
        int v22 = v36;
        if (v37 != v36)
        {
          do
          {
            uint64_t v24 = *--v21;
            uint64_t v23 = v24;
            void *v21 = 0;
            if (v24) {
              MEMORY[0x21667D390](v23, 0x1000C8077774924);
            }
          }
          while (v21 != v20);
          int v22 = v36;
        }
        int v37 = v20;
        operator delete(v22);
      }
      if (v34 != &v35) {
        free(v34);
      }
    }
  }
  return v16;
}

uint64_t anonymous namespace'::OperationParser::getBlockInfoByName(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  uint64_t v4 = a1 + 24 * a2;
  uint64_t v33 = 0;
  uint64_t v6 = v33;
  if ((v5 & 1) == 0)
  {
    uint64_t v34 = v33;
    int v7 = *(_DWORD *)(v4 - 16);
    uint64_t v8 = *(unsigned int *)(v4 - 8);
    if (4 * v7 + 4 >= (3 * v8))
    {
      int v9 = 2 * v8;
    }
    else
    {
      int v9 = *(_DWORD *)(v4 - 8);
      if ((int)v8 + ~v7 - *(_DWORD *)(v4 - 12) > v8 >> 3)
      {
        *(_DWORD *)(v4 - 16) = v7 + 1;
        if (*(void *)v6 == -1)
        {
LABEL_6:
          *(_OWORD *)uint64_t v6 = v32;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
          return v6 + 16;
        }
LABEL_5:
        --*(_DWORD *)(v4 - 12);
        goto LABEL_6;
      }
    }
    unsigned int v11 = *(llvm **)(v4 - 24);
    unint64_t v12 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
    unint64_t v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    int v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 64;
    }
    *(_DWORD *)(v4 - 8) = v15;
    buffer = llvm::allocate_buffer(32 * v15, (std::align_val_t)8uLL);
    *(void *)(v4 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = buffer;
    if (v11)
    {
      *(void *)(v4 - 16) = 0;
      uint64_t v17 = *(unsigned int *)(v4 - 8);
      if (v17)
      {
        unsigned int v18 = buffer;
        if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
          goto LABEL_18;
        }
        uint64_t v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
        unsigned int v18 = &buffer[2 * (v19 & 0xFFFFFFFFFFFFFFELL)];
        unint64_t v20 = buffer + 2;
        uint64_t v21 = v19 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          *(v20 - 2) = xmmword_211EF0A40;
          _OWORD *v20 = xmmword_211EF0A40;
          v20 += 4;
          v21 -= 2;
        }
        while (v21);
        if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_18:
          int v22 = &buffer[2 * v17];
          do
          {
            _OWORD *v18 = xmmword_211EF0A40;
            v18 += 2;
          }
          while (v18 != v22);
        }
      }
      uint64_t v23 = (void *)(32 * v8);
      if (v8)
      {
        uint64_t v24 = 32 * v8;
        unint64_t v25 = v11;
        do
        {
          if (*(void *)v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v35 = 0;
            uint64_t v26 = v35;
            _OWORD *v35 = *(_OWORD *)v25;
            v26[1] = *((_OWORD *)v25 + 1);
            ++*(_DWORD *)(v4 - 16);
          }
          unint64_t v25 = (llvm *)((char *)v25 + 32);
          v24 -= 32;
        }
        while (v24);
      }
      llvm::deallocate_buffer(v11, v23);
    }
    *(void *)(v4 - 16) = 0;
    uint64_t v27 = *(unsigned int *)(v4 - 8);
    if (v27)
    {
      uint64_t v28 = buffer;
      if (((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_36;
      }
      uint64_t v29 = ((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      uint64_t v28 = &buffer[2 * (v29 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v30 = buffer + 2;
      uint64_t v31 = v29 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 2) = xmmword_211EF0A40;
        _OWORD *v30 = xmmword_211EF0A40;
        v30 += 4;
        v31 -= 2;
      }
      while (v31);
      if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          _OWORD *v28 = xmmword_211EF0A40;
          v28 += 2;
        }
        while (v28 != &buffer[2 * v27]);
      }
    }
    uint64_t v6 = v34;
    ++*(_DWORD *)(v4 - 16);
    if (*(void *)v6 == -1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  return v6 + 16;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition>>,llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    unsigned int v15 = 0;
    uint64_t result = 0;
    goto LABEL_80;
  }
  int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a3, *(void *)(a3 + 8));
  unsigned int v9 = a2 - 1;
  int v10 = *(void **)a3;
  size_t v11 = *(void *)(a3 + 8);
  if (!v11)
  {
    if (v10 == (void *)-2)
    {
      unint64_t v12 = 0;
      int v20 = 1;
      uint64_t v21 = HashValue & v9;
      unsigned int v15 = (void *)(a1 + 32 * v21);
      int v22 = (const void *)*v15;
      if (*v15 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v22 != (const void *)-2 && v15[1])
      {
LABEL_21:
        while (v22 != (const void *)-1)
        {
          if (v12) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v22 == (const void *)-2;
          }
          if (v23) {
            unint64_t v12 = v15;
          }
          int v24 = v20 + v21;
          ++v20;
          uint64_t v21 = v24 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v21);
          int v22 = (const void *)*v15;
          if (*v15 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_76;
      }
    }
    else
    {
      if (v10 != (void *)-1)
      {
        unint64_t v12 = 0;
        int v40 = 1;
        uint64_t v41 = HashValue & v9;
        unsigned int v15 = (void *)(a1 + 32 * v41);
        uint64_t v42 = *v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_74;
        }
        while (v42 != -1)
        {
          if (v12) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v42 == -2;
          }
          if (v45) {
            unint64_t v12 = v15;
          }
          int v46 = v40 + v41;
          ++v40;
          uint64_t v41 = v46 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v41);
          uint64_t v42 = *v15;
          if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_74:
            if (!v15[1]) {
              goto LABEL_79;
            }
          }
        }
        goto LABEL_76;
      }
      unint64_t v12 = 0;
      int v32 = 1;
      uint64_t v33 = HashValue & v9;
      unsigned int v15 = (void *)(a1 + 32 * v33);
      uint64_t v34 = *v15;
      if (*v15 == -2) {
        goto LABEL_46;
      }
LABEL_44:
      if (v34 != -1 && v15[1])
      {
LABEL_46:
        while (v34 != -1)
        {
          if (v12) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = v34 == -2;
          }
          if (v35) {
            unint64_t v12 = v15;
          }
          int v36 = v32 + v33;
          ++v32;
          uint64_t v33 = v36 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v33);
          uint64_t v34 = *v15;
          if (*v15 != -2) {
            goto LABEL_44;
          }
        }
        goto LABEL_76;
      }
    }
    goto LABEL_79;
  }
  if (v10 != (void *)-2)
  {
    if (v10 != (void *)-1)
    {
      __s1 = v10;
      unint64_t v12 = 0;
      int v37 = 1;
      uint64_t v38 = HashValue & v9;
      unsigned int v15 = (void *)(a1 + 32 * v38);
      uint64_t v39 = (const void *)*v15;
      if (*v15 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_64;
      }
      while (v39 != (const void *)-1)
      {
        if (v12) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v39 == (const void *)-2;
        }
        if (v43) {
          unint64_t v12 = v15;
        }
        int v44 = v37 + v38;
        ++v37;
        uint64_t v38 = v44 & v9;
        unsigned int v15 = (void *)(a1 + 32 * v38);
        uint64_t v39 = (const void *)*v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_64:
          if (v11 == v15[1] && !memcmp(__s1, v39, v11)) {
            goto LABEL_79;
          }
        }
      }
      goto LABEL_76;
    }
    unint64_t v12 = 0;
    int v25 = 1;
    uint64_t v26 = HashValue & v9;
    unsigned int v15 = (void *)(a1 + 32 * v26);
    uint64_t v27 = (const void *)*v15;
    if (*v15 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v27 != (const void *)-1)
    {
      if (v11 != v15[1] || (v28 = v25, int v29 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v27, v11), v25 = v28, v29))
      {
LABEL_34:
        while (v27 != (const void *)-1)
        {
          if (v12) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27 == (const void *)-2;
          }
          if (v30) {
            unint64_t v12 = v15;
          }
          int v31 = v25 + v26;
          ++v25;
          uint64_t v26 = v31 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v26);
          uint64_t v27 = (const void *)*v15;
          if (*v15 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_76;
      }
    }
LABEL_79:
    uint64_t result = 1;
    goto LABEL_80;
  }
  unint64_t v12 = 0;
  int v13 = 1;
  uint64_t v14 = HashValue & v9;
  unsigned int v15 = (void *)(a1 + 32 * v14);
  uint64_t v16 = (const void *)*v15;
  if (*v15 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v16 == (const void *)-2 || v11 == v15[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v16, v11)) {
    goto LABEL_79;
  }
LABEL_8:
  while (v16 != (const void *)-1)
  {
    if (v12) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v16 == (const void *)-2;
    }
    if (v17) {
      unint64_t v12 = v15;
    }
    int v18 = v13 + v14;
    ++v13;
    uint64_t v14 = v18 & v9;
    unsigned int v15 = (void *)(a1 + 32 * v14);
    uint64_t v16 = (const void *)*v15;
    if (*v15 != -1) {
      goto LABEL_5;
    }
  }
LABEL_76:
  uint64_t result = 0;
  if (v12) {
    unsigned int v15 = v12;
  }
LABEL_80:
  *a4 = v15;
  return result;
}

void *llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *int v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          *int v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      BOOL v17 = v4;
      do
      {
        uint64_t v24 = *(void *)v17;
        if ((*(void *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          BOOL v23 = (void *)(*(void *)a1 + 16 * v25);
          uint64_t v26 = *v23;
          if (v24 != *v23)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v23;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v16;
              BOOL v23 = (void *)(*(void *)a1 + 16 * (v30 & v16));
              uint64_t v26 = *v23;
              if (v24 == *v23) {
                goto LABEL_23;
              }
            }
            if (v27) {
              BOOL v23 = v27;
            }
          }
LABEL_23:
          *BOOL v23 = v24;
          v23[1] = *((void *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        BOOL v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    int v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      void *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      int v22 = &result[2 * v18];
      do
      {
        *int v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(uint64_t a1, void *a2)
{
  unint64_t v27 = 0;
  uint64_t v4 = (char *)(a1 + 16);
  unint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v27);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = 8 * v6;
  *(void *)&v5[8 * v6] = *a2;
  unsigned int v8 = *(char **)a1;
  unsigned int v9 = *(char **)a1;
  if (!v6) {
    goto LABEL_19;
  }
  unint64_t v10 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v10 < 0xB)
  {
    uint64_t v11 = v5;
LABEL_12:
    int v20 = &v8[v7];
    do
    {
      uint64_t v21 = *(void *)v9;
      *(void *)unsigned int v9 = 0;
      v9 += 8;
      *(void *)uint64_t v11 = v21;
      v11 += 8;
    }
    while (v9 != v20);
    goto LABEL_14;
  }
  BOOL v12 = v8 >= &v5[v7] || v5 >= &v8[v7];
  uint64_t v11 = v5;
  if (!v12) {
    goto LABEL_12;
  }
  unint64_t v13 = v10 + 1;
  uint64_t v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v11 = &v5[v14];
  unsigned int v9 = &v8[v14];
  int v15 = (long long *)(v8 + 16);
  int v16 = v5 + 16;
  uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v18 = *(v15 - 1);
    long long v19 = *v15;
    *(v15 - 1) = 0uLL;
    *int v15 = 0uLL;
    *(v16 - 1) = v18;
    *int v16 = v19;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v22 = *(void *)a1 - 8;
  do
  {
    BOOL v23 = *(mlir::Region **)(v22 + v7);
    *(void *)(v22 + v7) = 0;
    if (v23)
    {
      mlir::Region::~Region(v23);
      MEMORY[0x21667D3C0]();
    }
    v7 -= 8;
  }
  while (v7);
  unsigned int v9 = *(char **)a1;
LABEL_19:
  int v24 = v27;
  if (v9 != v4) {
    free(v9);
  }
  *(void *)a1 = v5;
  unsigned int v25 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 12) = v24;
  return (uint64_t)&v5[8 * v25 - 8];
}

uint64_t anonymous namespace'::OperationParser::parseBlock(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)this + 1);
  if (*a2 && *(_DWORD *)(v5 + 56) != 7)
  {
    *((void *)this + 50) = v4;
    *((void *)this + 51) = (char *)v4 + 32;
    while (1)
    {
      int v27 = *(_DWORD *)(*((void *)this + 1) + 56);
      if (v27 == 7 || v27 == 27) {
        break;
      }
        return 0;
    }
    return 1;
  }
  uint64_t OCGSize = (char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v5 + 56));
  uint64_t v7 = *((void *)this + 1);
  unsigned int v8 = *(void ***)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 72);
  uint64_t v54 = "expected block name";
  LOWORD(v57) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 7, (uint64_t)&v54)) {
    return 0;
  }
  uint64_t v11 = BlockInfoByName;
  BlockInfoByName[1] = (mlir::Block *)OCGSize;
  BOOL v12 = *BlockInfoByName;
  if (!*BlockInfoByName)
  {
    int v20 = *a2;
    if (!*a2) {
      operator new();
    }
    uint64_t v21 = 0;
    *BlockInfoByName = v20;
    uint64_t v22 = *(uint64_t **)(*((void *)this + 1) + 128);
    if (!v22)
    {
LABEL_9:
      *a2 = v20;
      if (*(_DWORD *)(*((void *)this + 1) + 56) != 21 {
        || (uint64_t v49 = (void **)v20,
      }
            BOOL v53 = ((*((void *)v20 + 7) - *((void *)v20 + 6)) & 0x7FFFFFFF8) != 0,
            LODWORD(v47[0]) = 0,
            uint64_t v54 = (const char *)this,
            v55[0] = &v53,
            v55[1] = v47,
            unint64_t v56 = &v49,
      {
        uint64_t v54 = "expected ':' after block name";
        LOWORD(v57) = 259;
        if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v54))
        {
          BOOL v23 = (char *)*a2 + 32;
          *((void *)this + 50) = *a2;
          *((void *)this + 51) = v23;
          do
          {
            int v24 = *(_DWORD *)(*((void *)this + 1) + 56);
            if (v24 == 7 || v24 == 27) {
              return 1;
            }
          }
        }
      }
      if (v21)
      {
        mlir::Block::dropAllDefinedValueUses(v21);
        mlir::Block::~Block(v21);
        MEMORY[0x21667D3C0]();
        return 0;
      }
      return 0;
    }
LABEL_8:
    mlir::AsmParserState::addDefinition(v22, (uint64_t)v20, OCGSize);
    int v20 = *v11;
    goto LABEL_9;
  }
  uint64_t v13 = *((void *)this + 34) + 24 * *((unsigned int *)this + 70);
  int v14 = *(_DWORD *)(v13 - 8);
  if (v14)
  {
    uint64_t v15 = *(void *)(v13 - 24);
    unsigned int v16 = v14 - 1;
    LODWORD(v17) = (v14 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    long long v18 = (mlir::Block **)(v15 + 16 * v17);
    long long v19 = *v18;
    if (*v18 == v12)
    {
LABEL_7:
      _OWORD *v18 = (mlir::Block *)-8192;
      *(int32x2_t *)(v13 - 16) = vadd_s32(*(int32x2_t *)(v13 - 16), (int32x2_t)0x1FFFFFFFFLL);
      int v20 = *BlockInfoByName;
      uint64_t v21 = *BlockInfoByName;
      uint64_t v22 = *(uint64_t **)(*((void *)this + 1) + 128);
      if (!v22) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v30 = 1;
    while (v19 != (mlir::Block *)-4096)
    {
      int v31 = v17 + v30++;
      uint64_t v17 = v31 & v16;
      long long v19 = *(mlir::Block **)(v15 + 16 * v17);
      if (v19 == v12)
      {
        long long v18 = (mlir::Block **)(v15 + 16 * v17);
        goto LABEL_7;
      }
    }
  }
  v47[0] = "redefinition of block '";
  __int16 v48 = 259;
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, OCGSize);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v47, (uint64_t)&v54);
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(&v54);
  }
  if (v54)
  {
    __int16 v52 = 261;
    uint64_t v49 = v8;
    uint64_t v50 = (const char *)v9;
    mlir::Diagnostic::operator<<((uint64_t)v55, &v49);
    if (v54)
    {
      LODWORD(v49) = 3;
      uint64_t v50 = "'";
      uint64_t v51 = 1;
      uint64_t v33 = &v49;
      uint64_t v34 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v45 = v57 + 1;
        if (v56 <= &v49 && (char *)v56 + 24 * v57 > (char *)&v49)
        {
          int64_t v46 = (char *)&v49 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
          uint64_t v34 = (char *)v56;
          uint64_t v33 = (void ***)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
          uint64_t v33 = &v49;
          uint64_t v34 = (char *)v56;
        }
      }
      BOOL v35 = &v34[24 * v57];
      long long v36 = *(_OWORD *)v33;
      *((void *)v35 + 2) = v33[2];
      *(_OWORD *)BOOL v35 = v36;
      ++v57;
    }
  }
  uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  }
  if (v64)
  {
    int v37 = __p;
    if (__p)
    {
      uint64_t v38 = v63;
      uint64_t v39 = __p;
      if (v63 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        uint64_t v39 = __p;
      }
      uint64_t v63 = v37;
      operator delete(v39);
    }
    int v40 = v60;
    if (v60)
    {
      uint64_t v41 = v61;
      uint64_t v42 = v60;
      if (v61 != v60)
      {
        do
        {
          uint64_t v44 = *--v41;
          uint64_t v43 = v44;
          *uint64_t v41 = 0;
          if (v44) {
            MEMORY[0x21667D390](v43, 0x1000C8077774924);
          }
        }
        while (v41 != v40);
        uint64_t v42 = v60;
      }
      uint64_t v61 = v40;
      operator delete(v42);
    }
    if (v56 != v59) {
      free(v56);
    }
  }
  return v26;
}

void anonymous namespace'::OperationParser::popSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v1 = *((void *)this + 34) + 24 * *((unsigned int *)this + 70);
  *(void *)(v1 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *(void *)(v1 - 16) = 0;
  *(_DWORD *)(v1 - 8) = 0;
  LODWORD(v1) = *((_DWORD *)this + 70) - 1;
  *((_DWORD *)this + 70) = v1;
  uint64_t v2 = *((void *)this + 34) + 24 * v1;
  llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
}

uint64_t sub_21157D7B0()
{
  return v0;
}

uint64_t llvm::StringMap<llvm::SmallVector<anonymous namespace'::OperationParser::ValueDefinition,1u>,llvm::MallocAllocator>::operator[](uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  unsigned int v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = v6;
  uint64_t v9 = *(void *)(*(void *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
  BOOL v12 = (const unsigned __int8 **)buffer;
  uint64_t v13 = (char *)(buffer + 5);
  if (a3) {
    memcpy(buffer + 5, a2, (size_t)a3);
  }
  a3[(void)v13] = 0;
  *BOOL v12 = a3;
  v12[1] = (const unsigned __int8 *)(v12 + 3);
  void v12[2] = (const unsigned __int8 *)0x100000000;
  *(void *)(v7 + 8 * v8) = v12;
  ++*(_DWORD *)(a1 + 12);
  int v14 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  uint64_t v9 = *v14;
  if (*v14) {
    BOOL v15 = v9 == -8;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    do
    {
      uint64_t v16 = v14[1];
      ++v14;
      uint64_t v9 = v16;
      if (v16) {
        BOOL v17 = v9 == -8;
      }
      else {
        BOOL v17 = 1;
      }
    }
    while (v17);
  }
  return v9 + 8;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseOptionalBlockArgList(mlir::Block *)::$_0>(uint64_t a1)
{
  uint64_t v1 = *(mlir::detail::Parser **)a1;
  long long v3 = *(_OWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = v1;
  long long v8 = 0uLL;
  *(void *)&long long v9 = 0;
    return 0;
  *(void *)&v6[0] = "expected ':' and type for SSA operand";
  __int16 v7 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)v1, 15, (uint64_t)v6)) {
    return 0;
  }
  uint64_t result = mlir::detail::Parser::parseType(v1);
  if (result)
  {
    v6[0] = v8;
    v6[1] = v9;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser::UnresolvedOperand,mlir::Type)>::callback_fn<anonymous namespace'::OperationParser::parseOptionalBlockArgList(mlir::Block *)::$_0::operator() const(void)::{lambda(mlir::OpAsmParser::UnresolvedOperand,mlir::Type)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v3 = *(char **)a2;
  long long v26 = *(_OWORD *)(a2 + 8);
  int v27 = *(void **)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  if (!**(unsigned char **)a1)
  {
    mlir::Lexer::getEncodedSourceLocation(*(void *)(v4 + 8) + 8, v3);
    mlir::Block::addArgument();
  }
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(**(void **)(a1 + 16) + 48);
  if (v6 >= ((unint64_t)(*(void *)(**(void **)(a1 + 16) + 56) - v7) >> 3))
  {
    v28[0] = "too many arguments specified in argument list";
    __int16 v29 = 259;
    mlir::detail::Parser::emitError(v4, (uint64_t)v28, &v30);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
    if (v30) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
    }
    if (v38)
    {
      long long v19 = __p;
      if (__p)
      {
        int v20 = v37;
        uint64_t v21 = __p;
        if (v37 != __p)
        {
          do
            int v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        int v37 = v19;
        operator delete(v21);
      }
      uint64_t v13 = v34;
      if (!v34) {
        goto LABEL_40;
      }
      uint64_t v22 = v35;
      BOOL v15 = v34;
      if (v35 == v34) {
        goto LABEL_39;
      }
      do
      {
        uint64_t v24 = *--v22;
        uint64_t v23 = v24;
        void *v22 = 0;
        if (v24) {
          MEMORY[0x21667D390](v23, 0x1000C8077774924);
        }
      }
      while (v22 != v13);
      goto LABEL_38;
    }
  }
  else
  {
    *uint64_t v5 = v6 + 1;
    uint64_t v8 = *(void *)(v7 + 8 * v6);
    if ((*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8) == a3)
    {
      {
        uint64_t v18 = *(void *)(*(void *)(v4 + 8) + 128);
        if (v18) {
          mlir::AsmParserState::addDefinition(v18, v8, v3);
        }
        int v30 = v3;
        long long v31 = v26;
        int v32 = v27;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v28[0] = "argument and block argument type mismatch";
      __int16 v29 = 259;
      mlir::detail::Parser::emitError(v4, (uint64_t)v28, &v30);
      uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
      if (v30) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
      }
      if (v38)
      {
        unint64_t v10 = __p;
        if (__p)
        {
          uint64_t v11 = v37;
          BOOL v12 = __p;
          if (v37 != __p)
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            BOOL v12 = __p;
          }
          int v37 = v10;
          operator delete(v12);
        }
        uint64_t v13 = v34;
        if (!v34) {
          goto LABEL_40;
        }
        int v14 = v35;
        BOOL v15 = v34;
        if (v35 == v34)
        {
LABEL_39:
          BOOL v35 = v13;
          operator delete(v15);
LABEL_40:
          if (v32 != &v33) {
            free(v32);
          }
          return v9;
        }
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *int v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
LABEL_38:
        BOOL v15 = v34;
        goto LABEL_39;
      }
    }
  }
  return v9;
}

uint64_t llvm::array_pod_sort_comparator<std::pair<char const*,mlir::Block *>>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 < *a1) {
    return 1;
  }
  unint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  return v4 < v3;
}

uint64_t mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  int v21 = 3;
  uint64_t v22 = __s;
  size_t v23 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  int v14 = &v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v12 + 24 * v13 > (unint64_t)&v21;
    if (v12 <= (unint64_t)&v21 && v19)
    {
      int v20 = (char *)&v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      int v14 = (int *)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      int v14 = &v21;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(a1, a3, a4, a5);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  uint64_t v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v10 + 1;
    BOOL v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      long long v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      unint64_t v9 = *(void *)(a1 + 16);
      uint64_t v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      unint64_t v9 = *(void *)(a1 + 16);
      uint64_t v7 = v17;
    }
  }
  unint64_t v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v7;
  *(void *)(v11 + 16) = *((void *)v7 + 2);
  *(_OWORD *)unint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v25 = 3;
  long long v26 = __s;
  size_t v27 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      size_t v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = &v25;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v12 = *a3;
  uint64_t v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v14 + 1;
    BOOL v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      uint64_t v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = &v25;
    }
  }
  uint64_t v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v13;
  *(void *)(v16 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(a1, v7);
    unint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *uint64_t v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        unint64_t v15 = &result[2 * v11];
        do
        {
          *uint64_t v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    uint64_t v16 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v17 = 16 * v3;
      unint64_t v18 = (unint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v18, &v25);
          unint64_t v19 = v25;
          unint64_t *v25 = *v18;
          v19[1] = v18[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    BOOL v22 = result + 2;
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      void *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      uint64_t v24 = &result[2 * v20];
      do
      {
        *uint64_t v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseOperandList(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AsmParser::Delimiter,BOOL,int)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v14, 0, sizeof(v14));
    unint64_t v9 = v4 + 1;
    BOOL v10 = *(void *)v3 + 32 * v4 > (unint64_t)v14;
    if (*(void *)v3 <= (unint64_t)v14 && v10)
    {
      uint64_t v13 = (char *)v14 - *(void *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      uint64_t v11 = *(void *)v3;
      uint64_t v12 = &v13[*(void *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      uint64_t v11 = *(void *)v3;
      uint64_t v12 = (char *)v14;
    }
    unint64_t v5 = (_OWORD *)(v11 + 32 * *(unsigned int *)(v3 + 8));
    long long v6 = *(_OWORD *)v12;
    v5[1] = *((_OWORD *)v12 + 1);
  }
  else
  {
    unint64_t v5 = (_OWORD *)(*(void *)v3 + 32 * v4);
    long long v6 = 0uLL;
    v5[1] = 0u;
  }
  *unint64_t v5 = v6;
  unsigned int v7 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 672))(v2, *(void *)v3 + 32 * v7 - 32, *(unsigned __int8 *)a1[2]);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::Attribute &,llvm::StringRef,mlir::NamedAttrList &,mlir::AsmParser::Delimiter)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 672))(v4, v16, 1)) {
    return 0;
  }
  if (a2) {
    uint64_t v5 = a1[1];
  }
  else {
    uint64_t v5 = a1[2];
  }
  unsigned int v8 = (_DWORD *)(v5 + 8);
  uint64_t v7 = *(unsigned int *)(v5 + 8);
  unint64_t v9 = *(void *)v5;
  BOOL v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v13 = v7 + 1;
    BOOL v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      unint64_t v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = &v15[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = (char *)v16;
    }
  }
  uint64_t v11 = (_OWORD *)(v9 + 32 * *v8);
  long long v12 = *((_OWORD *)v10 + 1);
  *uint64_t v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AffineExpr &)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 672))(v4, v16, 1)) {
    return 0;
  }
  if (a2) {
    uint64_t v5 = a1[1];
  }
  else {
    uint64_t v5 = a1[2];
  }
  unsigned int v8 = (_DWORD *)(v5 + 8);
  uint64_t v7 = *(unsigned int *)(v5 + 8);
  unint64_t v9 = *(void *)v5;
  BOOL v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v13 = v7 + 1;
    BOOL v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      unint64_t v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = &v15[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = (char *)v16;
    }
  }
  uint64_t v11 = (_OWORD *)(v9 + 32 * *v8);
  long long v12 = *((_OWORD *)v10 + 1);
  *uint64_t v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseArgumentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,mlir::AsmParser::Delimiter,BOOL,BOOL)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v17, 0, sizeof(v17));
    unint64_t v8 = v4 + 1;
    BOOL v9 = *(void *)v3 + (v4 << 6) > (unint64_t)v17;
    if (*(void *)v3 <= (unint64_t)v17 && v9)
    {
      uint64_t v16 = (char *)v17 - *(void *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      uint64_t v10 = *(void *)v3;
      uint64_t v11 = &v16[*(void *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      uint64_t v10 = *(void *)v3;
      uint64_t v11 = (char *)v17;
    }
    long long v12 = (_OWORD *)(v10 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    long long v15 = *((_OWORD *)v11 + 3);
    void v12[2] = *((_OWORD *)v11 + 2);
    v12[3] = v15;
    *long long v12 = v13;
    v12[1] = v14;
  }
  else
  {
    uint64_t v5 = (_OWORD *)(*(void *)v3 + (v4 << 6));
    v5[2] = 0u;
    void v5[3] = 0u;
    *uint64_t v5 = 0u;
    v5[1] = 0u;
  }
  unsigned int v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  return (*(uint64_t (**)(uint64_t, unint64_t, void, void))(*(void *)v2 + 720))(v2, *(void *)v3 + ((unint64_t)v6 << 6) - 64, *(unsigned __int8 *)a1[2], *(unsigned __int8 *)a1[3]);
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    unint64_t v13 = v4 + 1;
    BOOL v14 = *(void *)v3 + (v4 << 6) > (unint64_t)&v27;
    if (*(void *)v3 <= (unint64_t)&v27 && v14)
    {
      int v25 = (char *)&v27 - *(void *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      uint64_t v15 = *(void *)v3;
      uint64_t v16 = &v25[*(void *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      uint64_t v15 = *(void *)v3;
      uint64_t v16 = (char *)&v27;
    }
    uint64_t v17 = (_OWORD *)(v15 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    long long v18 = *(_OWORD *)v16;
    long long v19 = *((_OWORD *)v16 + 1);
    long long v20 = *((_OWORD *)v16 + 3);
    v17[2] = *((_OWORD *)v16 + 2);
    v17[3] = v20;
    _OWORD *v17 = v18;
    v17[1] = v19;
  }
  else
  {
    uint64_t v5 = (_OWORD *)(*(void *)v3 + (v4 << 6));
    v5[2] = 0u;
    void v5[3] = 0u;
    *uint64_t v5 = 0u;
    v5[1] = 0u;
  }
  unsigned int v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t, void, void))(*(void *)v2 + 720))(v2, *(void *)v3 + ((unint64_t)v6 << 6) - 64, 0, 0)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)v2 + 136))(v2))
  {
    return 0;
  }
  uint64_t v7 = a1[2];
  uint64_t v8 = *(unsigned int *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    long long v27 = 0u;
    long long v28 = 0u;
    unint64_t v21 = v8 + 1;
    BOOL v22 = *(void *)v7 + 32 * v8 > (unint64_t)&v27;
    if (*(void *)v7 <= (unint64_t)&v27 && v22)
    {
      long long v26 = (char *)&v27 - *(void *)v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      uint64_t v23 = *(void *)v7;
      uint64_t v24 = &v26[*(void *)v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      uint64_t v23 = *(void *)v7;
      uint64_t v24 = (char *)&v27;
    }
    BOOL v9 = (_OWORD *)(v23 + 32 * *(unsigned int *)(v7 + 8));
    long long v10 = *(_OWORD *)v24;
    v9[1] = *((_OWORD *)v24 + 1);
  }
  else
  {
    BOOL v9 = (_OWORD *)(*(void *)v7 + 32 * v8);
    long long v10 = 0uLL;
    v9[1] = 0u;
  }
  *BOOL v9 = v10;
  unsigned int v11 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v11;
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 672))(v2, *(void *)v7 + 32 * v11 - 32, 1) != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseCustomOperation(llvm::ArrayRef<std::tuple<llvm::StringRef,unsigned int,llvm::SMLoc>>)::$_2>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v4 = **a1;
  uint64_t v42 = "invalid properties ";
  __int16 v43 = 259;
  mlir::emitError(v4, (uint64_t)&v42, (uint64_t)&v48);
  if (v48)
  {
    uint64_t v5 = &v44;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, *a1[1]);
    unsigned int v6 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
      {
        int64_t v39 = (char *)&v44 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        unsigned int v6 = (char *)v51;
        uint64_t v5 = (void ***)((char *)v51 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v5 = &v44;
        unsigned int v6 = (char *)v51;
      }
    }
    uint64_t v7 = &v6[24 * v52];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = v5[2];
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v52;
    if (v48)
    {
      LODWORD(v44) = 3;
      unint64_t v45 = " for op ";
      uint64_t v46 = 8;
      long long v10 = &v44;
      unsigned int v11 = (char *)v51;
      if (v9 >= v53)
      {
        unint64_t v36 = v9 + 1;
        BOOL v37 = (char *)v51 + 24 * v9 > (char *)&v44;
        if (v51 <= &v44 && v37)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          unsigned int v11 = (char *)v51;
          long long v10 = (void ***)((char *)v51 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v10 = &v44;
          unsigned int v11 = (char *)v51;
        }
      }
      long long v12 = &v11[24 * v52];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = v10[2];
      *(_OWORD *)long long v12 = v13;
      ++v52;
    }
  }
  uint64_t v44 = *(void ***)(*(void *)(*a1[2] + 48) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v44);
  uint64_t v16 = v48;
  if (v48)
  {
    __int16 v47 = 261;
    uint64_t v44 = AttrData;
    unint64_t v45 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
    uint64_t v16 = v48;
    if (v48)
    {
      LODWORD(v44) = 3;
      unint64_t v45 = ": ";
      uint64_t v46 = 2;
      uint64_t v17 = &v44;
      long long v18 = (char *)v51;
      if (v52 >= v53)
      {
        unint64_t v38 = v52 + 1;
        if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
        {
          int64_t v41 = (char *)&v44 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          long long v18 = (char *)v51;
          uint64_t v17 = (void ***)((char *)v51 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          uint64_t v17 = &v44;
          long long v18 = (char *)v51;
        }
      }
      long long v19 = &v18[24 * v52];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)long long v19 = v20;
      ++v52;
      uint64_t v16 = v48;
    }
  }
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v59)
  {
    *(void *)(a2 + 8) = v49;
    unint64_t v21 = v52;
    *(_DWORD *)(a2 + 16) = v50;
    BOOL v22 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v21 || &v48 == (uint64_t *)a2)
    {
      int v25 = 1;
      goto LABEL_23;
    }
    uint64_t v23 = v54;
    if (v51 != v54)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v51;
      unsigned int v24 = v53;
      *(_DWORD *)(a2 + 32) = v21;
      *(_DWORD *)(a2 + 36) = v24;
      uint64_t v51 = v54;
      unsigned int v53 = 0;
      int v25 = 1;
LABEL_22:
      unsigned int v52 = 0;
LABEL_23:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v55;
      *(void *)(a2 + 152) = v56;
      v55[0] = 0;
      v55[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v58;
      uint64_t v56 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v58 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v25)
      {
        if (v51 != v54) {
          free(v51);
        }
        unsigned __int8 v59 = 0;
      }
      goto LABEL_27;
    }
    if (v21 < 5)
    {
      unint64_t v26 = v21;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v21, 24);
      unint64_t v26 = v52;
      if (!v52)
      {
LABEL_21:
        *(_DWORD *)(a2 + 32) = v21;
        int v25 = v59;
        goto LABEL_22;
      }
      uint64_t v23 = v51;
      BOOL v22 = *(void **)(a2 + 24);
    }
    memcpy(v22, v23, 24 * v26);
    goto LABEL_21;
  }
LABEL_27:
  mlir::InFlightDiagnostic::abandon(&v48);
  if (v48) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  }
  if (v59)
  {
    long long v27 = __p[0];
    if (__p[0])
    {
      long long v28 = __p[1];
      long long v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          long long v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        long long v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    long long v30 = v55[0];
    if (v55[0])
    {
      long long v31 = v55[1];
      int v32 = v55[0];
      if (v55[1] != v55[0])
      {
        do
        {
          uint64_t v34 = *--v31;
          uint64_t v33 = v34;
          *long long v31 = 0;
          if (v34) {
            MEMORY[0x21667D390](v33, 0x1000C8077774924);
          }
        }
        while (v31 != v30);
        int v32 = v55[0];
      }
      v55[1] = v30;
      operator delete(v32);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseGenericOperation(void)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  mlir::emitError(**(void **)a1, (uint64_t)&v37);
  uint64_t v4 = v37;
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v5 = &v33;
    unsigned int v6 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unsigned int v6 = (char *)v40;
        uint64_t v5 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = &v33;
        unsigned int v6 = (char *)v40;
      }
    }
    uint64_t v7 = &v6[24 * v41];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = v5[2];
    *(_OWORD *)uint64_t v7 = v8;
    ++v41;
    uint64_t v4 = v37;
    if (v37)
    {
      uint64_t v9 = *(void ***)(a1 + 8);
      __int16 v36 = 260;
      uint64_t v33 = v9;
      mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
      uint64_t v4 = v37;
      if (v37)
      {
        LODWORD(v33) = 3;
        uint64_t v34 = "' op ";
        uint64_t v35 = 5;
        long long v10 = &v33;
        unsigned int v11 = (char *)v40;
        if (v41 >= v42)
        {
          unint64_t v30 = v41 + 1;
          if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
          {
            int64_t v32 = (char *)&v33 - (unsigned char *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            unsigned int v11 = (char *)v40;
            long long v10 = (void ***)((char *)v40 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            long long v10 = &v33;
            unsigned int v11 = (char *)v40;
          }
        }
        long long v12 = &v11[24 * v41];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)long long v12 = v13;
        ++v41;
        uint64_t v4 = v37;
      }
    }
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v14 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v15 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v14 || &v37 == (uint64_t *)a2)
    {
      int v18 = 1;
      goto LABEL_20;
    }
    uint64_t v16 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v17 = v42;
      *(_DWORD *)(a2 + 32) = v14;
      *(_DWORD *)(a2 + 36) = v17;
      int64_t v40 = v43;
      unsigned int v42 = 0;
      int v18 = 1;
LABEL_19:
      unsigned int v41 = 0;
LABEL_20:
      uint64_t v20 = v47;
      *(void *)(a2 + 152) = v45;
      *(_OWORD *)(a2 + 136) = v44;
      long long v44 = 0uLL;
      *(_OWORD *)(a2 + 160) = __p;
      *(void *)(a2 + 176) = v20;
      uint64_t v45 = 0;
      long long __p = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v18)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_24;
    }
    if (v14 < 5)
    {
      unint64_t v19 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v14, 24);
      unint64_t v19 = v41;
      if (!v41)
      {
LABEL_18:
        *(_DWORD *)(a2 + 32) = v14;
        int v18 = v48;
        goto LABEL_19;
      }
      uint64_t v16 = v40;
      uint64_t v15 = *(void **)(a2 + 24);
    }
    memcpy(v15, v16, 24 * v19);
    goto LABEL_18;
  }
LABEL_24:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    unint64_t v21 = (void *)__p;
    if ((void)__p)
    {
      BOOL v22 = (void *)*((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          BOOL v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    unsigned int v24 = (void *)v44;
    if ((void)v44)
    {
      int v25 = (void *)*((void *)&v44 + 1);
      unint64_t v26 = (void *)v44;
      if (*((void *)&v44 + 1) != (void)v44)
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = (void *)v44;
      }
      *((void *)&v44 + 1) = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseGenericOperation(void)::$_1>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = **(void **)a1;
  unsigned int v41 = "invalid properties ";
  __int16 v42 = 259;
  mlir::emitError(v4, (uint64_t)&v41, (uint64_t)&v47);
  uint64_t v5 = v47;
  if (v47)
  {
    unsigned int v6 = &v43;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v43, **(void **)(a1 + 8));
    uint64_t v7 = (char *)v50;
    if (v51 >= v52)
    {
      unint64_t v34 = v51 + 1;
      if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
      {
        int64_t v38 = (char *)&v43 - (unsigned char *)v50;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        uint64_t v7 = (char *)v50;
        unsigned int v6 = (void ***)((char *)v50 + v38);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        unsigned int v6 = &v43;
        uint64_t v7 = (char *)v50;
      }
    }
    long long v8 = &v7[24 * v51];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)long long v8 = v9;
    uint64_t v10 = ++v51;
    uint64_t v5 = v47;
    if (v47)
    {
      LODWORD(v43) = 3;
      long long v44 = " for op ";
      uint64_t v45 = 8;
      unsigned int v11 = &v43;
      long long v12 = (char *)v50;
      if (v10 >= v52)
      {
        unint64_t v35 = v10 + 1;
        BOOL v36 = (char *)v50 + 24 * v10 > (char *)&v43;
        if (v50 <= &v43 && v36)
        {
          int64_t v39 = (char *)&v43 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          long long v12 = (char *)v50;
          unsigned int v11 = (void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          unsigned int v11 = &v43;
          long long v12 = (char *)v50;
        }
      }
      long long v13 = &v12[24 * v51];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v51;
      uint64_t v5 = v47;
      if (v47)
      {
        uint64_t v15 = *(void ***)(a1 + 16);
        __int16 v46 = 260;
        __int16 v43 = v15;
        mlir::Diagnostic::operator<<((uint64_t)&v48, &v43);
        uint64_t v5 = v47;
        if (v47)
        {
          LODWORD(v43) = 3;
          long long v44 = ": ";
          uint64_t v45 = 2;
          uint64_t v16 = &v43;
          unsigned int v17 = (char *)v50;
          if (v51 >= v52)
          {
            unint64_t v37 = v51 + 1;
            if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
            {
              int64_t v40 = (char *)&v43 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              unsigned int v17 = (char *)v50;
              uint64_t v16 = (void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              uint64_t v16 = &v43;
              unsigned int v17 = (char *)v50;
            }
          }
          int v18 = &v17[24 * v51];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)int v18 = v19;
          ++v51;
          uint64_t v5 = v47;
        }
      }
    }
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v58)
  {
    *(void *)(a2 + 8) = v48;
    unint64_t v20 = v51;
    *(_DWORD *)(a2 + 16) = v49;
    unint64_t v21 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v20 || &v47 == (uint64_t *)a2)
    {
      int v24 = 1;
      goto LABEL_22;
    }
    BOOL v22 = v53;
    if (v50 != v53)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v50;
      unsigned int v23 = v52;
      *(_DWORD *)(a2 + 32) = v20;
      *(_DWORD *)(a2 + 36) = v23;
      int v50 = v53;
      unsigned int v52 = 0;
      int v24 = 1;
LABEL_21:
      unsigned int v51 = 0;
LABEL_22:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v54;
      *(void *)(a2 + 152) = v55;
      v54[0] = 0;
      v54[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v57;
      uint64_t v55 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v57 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v24)
      {
        if (v50 != v53) {
          free(v50);
        }
        unsigned __int8 v58 = 0;
      }
      goto LABEL_26;
    }
    if (v20 < 5)
    {
      unint64_t v25 = v20;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v20, 24);
      unint64_t v25 = v51;
      if (!v51)
      {
LABEL_20:
        *(_DWORD *)(a2 + 32) = v20;
        int v24 = v58;
        goto LABEL_21;
      }
      BOOL v22 = v50;
      unint64_t v21 = *(void **)(a2 + 24);
    }
    memcpy(v21, v22, 24 * v25);
    goto LABEL_20;
  }
LABEL_26:
  mlir::InFlightDiagnostic::abandon(&v47);
  if (v47) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  }
  if (v58)
  {
    unint64_t v26 = __p[0];
    if (__p[0])
    {
      uint64_t v27 = __p[1];
      uint64_t v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    unint64_t v29 = v54[0];
    if (v54[0])
    {
      unint64_t v30 = v54[1];
      int64_t v31 = v54[0];
      if (v54[1] != v54[0])
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        int64_t v31 = v54[0];
      }
      v54[1] = v29;
      operator delete(v31);
    }
    if (v50 != v53) {
      free(v50);
    }
  }
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  uint64_t v7 = (void *)(*(void *)a1 + 16 * v6);
  *uint64_t v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

uint64_t mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>(uint64_t a1, char *__s, uint64_t a3, const char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  unint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  long long v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      int v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      long long v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      long long v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, const char *a3)
{
  __int16 v20 = 261;
  uint64_t v5 = *(const char **)(a2 + 8);
  BOOL v17 = *(void ***)a2;
  int v18 = v5;
  mlir::Diagnostic::operator<<(a1, &v17);
  size_t v6 = strlen(a3);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v17) = 3;
  int v18 = a3;
  size_t v19 = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unint64_t v10 = &v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v8 + 24 * v9 > (unint64_t)&v17;
    if (v8 <= (unint64_t)&v17 && v15)
    {
      unint64_t v16 = (char *)&v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      unint64_t v10 = (void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      unint64_t v10 = &v17;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, uint64_t a3, char *a4, unsigned int *a5, char *a6, uint64_t *a7)
{
  size_t v14 = strlen(__s);
  uint64_t v15 = a1 + 16;
  unint64_t v16 = *(void *)(a1 + 16);
  LODWORD(v26) = 3;
  uint64_t v27 = __s;
  size_t v28 = v14;
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  int v18 = &v26;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v23 = v17 + 1;
    BOOL v24 = v16 + 24 * v17 > (unint64_t)&v26;
    if (v16 <= (unint64_t)&v26 && v24)
    {
      unint64_t v25 = (char *)&v26 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      int v18 = (void ***)&v25[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      int v18 = &v26;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = v18[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  __int16 v29 = 261;
  size_t v21 = *(char **)(a3 + 8);
  unint64_t v26 = *(void ***)a3;
  uint64_t v27 = v21;
  mlir::Diagnostic::operator<<(a1, &v26);
  return mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, unsigned int *a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  int64_t v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      size_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
  int v18 = (char *)*a3;
  int v30 = 5;
  int64_t v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  long long v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      __int16 v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      long long v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      long long v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a4, a5);
}

uint64_t *llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    size_t v10 = buffer + 1;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    size_t v10 = buffer + 1;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  void *buffer = a3;
  *uint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

uint64_t llvm::array_pod_sort_comparator<char const*>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<anonymous namespace'::OperationParser::finalize(void)::$_1>(uint64_t **a1, uint64_t a2)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id) {
    uint64_t v6 = 0;
  }
  uint64_t v121 = v6;
  if (!v6 || *(void *)v4[1] != mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121)) {
    goto LABEL_57;
  }
  uint64_t v7 = *(void *)(v5 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
  uint64_t v8 = *(const char **)v7;
  uint64_t v9 = v4[2];
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v9, *(int8x16_t **)(v7 + 8), *(const unsigned __int8 **)(v7 + 16));
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v9 + 8)
    || (uint64_t v11 = *(void *)(*(void *)v9 + 8 * Key), (v12 = *(void *)(v11 + 8)) == 0))
  {
    __int16 v120 = 257;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v5 + 8) + 8, v8);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(void *)(v5 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(v125);
    }
    if (v125[0])
    {
      int v122 = 3;
      uint64_t v123 = "operation location alias was never defined";
      uint64_t v124 = 42;
      BOOL v14 = &v122;
      uint64_t v15 = (char *)v126;
      if (v127 >= v128)
      {
        unint64_t v108 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          int64_t v113 = (char *)&v122 - (unsigned char *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          uint64_t v15 = (char *)v126;
          BOOL v14 = (int *)((char *)v126 + v113);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          BOOL v14 = &v122;
          uint64_t v15 = (char *)v126;
        }
      }
      unsigned int v16 = &v15[24 * v127];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)unsigned int v16 = v17;
      ++v127;
    }
    char v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    }
    if (v134)
    {
      unint64_t v19 = __p;
      if (__p)
      {
        long long v20 = v133;
        uint64_t v21 = __p;
        if (v133 != __p)
        {
          do
            long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        long long v133 = v19;
        operator delete(v21);
      }
      long long v22 = v130;
      if (!v130) {
        goto LABEL_54;
      }
      unint64_t v23 = v131;
      unint64_t v24 = v130;
      if (v131 == v130) {
        goto LABEL_53;
      }
      do
      {
        uint64_t v26 = *--v23;
        uint64_t v25 = v26;
        *unint64_t v23 = 0;
        if (v26) {
          MEMORY[0x21667D390](v25, 0x1000C8077774924);
        }
      }
      while (v23 != v22);
      goto LABEL_52;
    }
  }
  else
  {
    if (mlir::LocationAttr::classof(*(void *)(v11 + 8)))
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v12;
      goto LABEL_57;
    }
    __int16 v120 = 257;
    uint64_t v27 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v5 + 8) + 8, v8);
    mlir::emitError(v27, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(void *)(v5 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(v125);
    }
    if (v125[0])
    {
      int v122 = 3;
      uint64_t v123 = "expected location, but found '";
      uint64_t v124 = 30;
      size_t v28 = &v122;
      __int16 v29 = (char *)v126;
      if (v127 >= v128)
      {
        unint64_t v109 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          int64_t v114 = (char *)&v122 - (unsigned char *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          __int16 v29 = (char *)v126;
          size_t v28 = (int *)((char *)v126 + v114);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          size_t v28 = &v122;
          __int16 v29 = (char *)v126;
        }
      }
      int v30 = &v29[24 * v127];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)int v30 = v31;
      ++v127;
      if (v125[0])
      {
        size_t v32 = &v122;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v12);
        uint64_t v33 = (char *)v126;
        if (v127 >= v128)
        {
          unint64_t v110 = v127 + 1;
          if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
          {
            int64_t v115 = (char *)&v122 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            uint64_t v33 = (char *)v126;
            size_t v32 = (int *)((char *)v126 + v115);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            size_t v32 = &v122;
            uint64_t v33 = (char *)v126;
          }
        }
        unint64_t v34 = &v33[24 * v127];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = *((void *)v32 + 2);
        *(_OWORD *)unint64_t v34 = v35;
        uint64_t v36 = ++v127;
        if (v125[0])
        {
          int v122 = 3;
          uint64_t v123 = "'";
          uint64_t v124 = 1;
          unint64_t v37 = &v122;
          int64_t v38 = (char *)v126;
          if (v36 >= v128)
          {
            unint64_t v111 = v36 + 1;
            BOOL v112 = (char *)v126 + 24 * v36 > (char *)&v122;
            if (v126 <= &v122 && v112)
            {
              int64_t v116 = (char *)&v122 - (unsigned char *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              int64_t v38 = (char *)v126;
              unint64_t v37 = (int *)((char *)v126 + v116);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              unint64_t v37 = &v122;
              int64_t v38 = (char *)v126;
            }
          }
          int64_t v39 = &v38[24 * v127];
          long long v40 = *(_OWORD *)v37;
          *((void *)v39 + 2) = *((void *)v37 + 2);
          *(_OWORD *)int64_t v39 = v40;
          ++v127;
        }
      }
    }
    char v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    }
    if (v134)
    {
      unsigned int v41 = __p;
      if (__p)
      {
        __int16 v42 = v133;
        __int16 v43 = __p;
        if (v133 != __p)
        {
          do
            __int16 v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          __int16 v43 = __p;
        }
        long long v133 = v41;
        operator delete(v43);
      }
      long long v22 = v130;
      if (!v130) {
        goto LABEL_54;
      }
      long long v44 = v131;
      unint64_t v24 = v130;
      if (v131 == v130)
      {
LABEL_53:
        v131 = v22;
        operator delete(v24);
LABEL_54:
        if (v126 != v129) {
          free(v126);
        }
        goto LABEL_56;
      }
      do
      {
        uint64_t v46 = *--v44;
        uint64_t v45 = v46;
        *long long v44 = 0;
        if (v46) {
          MEMORY[0x21667D390](v45, 0x1000C8077774924);
        }
      }
      while (v44 != v22);
LABEL_52:
      unint64_t v24 = v130;
      goto LABEL_53;
    }
  }
LABEL_56:
  if (!v18) {
    return 0;
  }
LABEL_57:
  unint64_t v47 = *(unsigned int *)(a2 + 44);
  unsigned int v48 = v47 & 0x7FFFFF;
  if ((v47 & 0x7FFFFF) != 0)
  {
    unint64_t v49 = ((a2 + 16 * ((v47 >> 23) & 1) + ((v47 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    unint64_t v117 = v49 + 24 * v48;
    while (1)
    {
      uint64_t v50 = *(void *)(v49 + 8);
      if (v50 != v49) {
        break;
      }
LABEL_142:
      v49 += 24;
      if (v49 == v117) {
        return 1;
      }
    }
    unint64_t v118 = v49;
    while (1)
    {
      uint64_t v51 = v50 - 8;
      if (!v50) {
        uint64_t v51 = 0;
      }
      unsigned int v52 = *(uint64_t **)(v51 + 48);
      unsigned int v53 = *(uint64_t **)(v51 + 56);
      if (v53 != v52) {
        break;
      }
LABEL_61:
      uint64_t v50 = *(void *)(v50 + 8);
      unint64_t v49 = v118;
      if (v50 == v118) {
        goto LABEL_142;
      }
    }
    while (1)
    {
      uint64_t v54 = *v52;
      uint64_t v55 = *a1;
      uint64_t v56 = **a1;
      uint64_t v57 = *(void *)(*v52 + 32);
      if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id) {
        uint64_t v57 = 0;
      }
      uint64_t v121 = v57;
      if (v57 && *(void *)v55[1] == mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121))
      {
        uint64_t v58 = *(void *)(v56 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
        uint64_t v59 = *(const char **)v58;
        uint64_t v60 = v55[2];
        int v61 = llvm::StringMapImpl::FindKey((uint64_t *)v60, *(int8x16_t **)(v58 + 8), *(const unsigned __int8 **)(v58 + 16));
        if (v61 == -1
          || v61 == (unint64_t)*(unsigned int *)(v60 + 8)
          || (uint64_t v62 = *(void *)(*(void *)v60 + 8 * v61), (v63 = *(void *)(v62 + 8)) == 0))
        {
          __int16 v120 = 257;
          uint64_t v64 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v56 + 8) + 8, v59);
          mlir::emitError(v64, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(void *)(v56 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(v125);
          }
          if (v125[0])
          {
            int v122 = 3;
            uint64_t v123 = "operation location alias was never defined";
            uint64_t v124 = 42;
            uint64_t v65 = (char *)v126;
            if (v127 >= v128)
            {
              unint64_t v98 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                int64_t v103 = (char *)&v122 - (unsigned char *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                uint64_t v65 = (char *)v126;
                __int16 v66 = (int *)((char *)v126 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                __int16 v66 = &v122;
                uint64_t v65 = (char *)v126;
              }
            }
            else
            {
              __int16 v66 = &v122;
            }
            char v67 = &v65[24 * v127];
            long long v68 = *(_OWORD *)v66;
            *((void *)v67 + 2) = *((void *)v66 + 2);
            *(_OWORD *)char v67 = v68;
            ++v127;
          }
          char v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          }
          if (v134)
          {
            long long v70 = __p;
            if (__p)
            {
              uint64_t v71 = v133;
              long long v72 = __p;
              if (v133 != __p)
              {
                do
                  uint64_t v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                long long v72 = __p;
              }
              long long v133 = v70;
              operator delete(v72);
            }
            uint64_t v73 = v130;
            if (v130)
            {
              char v74 = v131;
              uint64_t v75 = v130;
              if (v131 == v130) {
                goto LABEL_123;
              }
              do
              {
                uint64_t v77 = *--v74;
                uint64_t v76 = v77;
                *char v74 = 0;
                if (v77) {
                  MEMORY[0x21667D390](v76, 0x1000C8077774924);
                }
              }
              while (v74 != v73);
LABEL_122:
              uint64_t v75 = v130;
              goto LABEL_123;
            }
LABEL_124:
            if (v126 != v129) {
              free(v126);
            }
          }
LABEL_66:
          if (!v69) {
            return 0;
          }
          goto LABEL_67;
        }
        if (!mlir::LocationAttr::classof(*(void *)(v62 + 8)))
        {
          __int16 v120 = 257;
          uint64_t v78 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v56 + 8) + 8, v59);
          mlir::emitError(v78, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(void *)(v56 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(v125);
          }
          if (v125[0])
          {
            int v122 = 3;
            uint64_t v123 = "expected location, but found '";
            uint64_t v124 = 30;
            unint64_t v79 = (char *)v126;
            if (v127 >= v128)
            {
              unint64_t v99 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                int64_t v104 = (char *)&v122 - (unsigned char *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                unint64_t v79 = (char *)v126;
                unint64_t v80 = (int *)((char *)v126 + v104);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                unint64_t v80 = &v122;
                unint64_t v79 = (char *)v126;
              }
            }
            else
            {
              unint64_t v80 = &v122;
            }
            long long v81 = &v79[24 * v127];
            long long v82 = *(_OWORD *)v80;
            *((void *)v81 + 2) = *((void *)v80 + 2);
            *(_OWORD *)long long v81 = v82;
            ++v127;
            if (v125[0])
            {
              uint64_t v83 = &v122;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v63);
              int64_t v84 = (char *)v126;
              if (v127 >= v128)
              {
                unint64_t v100 = v127 + 1;
                if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
                {
                  int64_t v105 = (char *)&v122 - (unsigned char *)v126;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  int64_t v84 = (char *)v126;
                  uint64_t v83 = (int *)((char *)v126 + v105);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  uint64_t v83 = &v122;
                  int64_t v84 = (char *)v126;
                }
              }
              int64_t v85 = &v84[24 * v127];
              long long v86 = *(_OWORD *)v83;
              *((void *)v85 + 2) = *((void *)v83 + 2);
              *(_OWORD *)int64_t v85 = v86;
              uint64_t v87 = ++v127;
              if (v125[0])
              {
                int v122 = 3;
                uint64_t v123 = "'";
                uint64_t v124 = 1;
                int v88 = (char *)v126;
                if (v87 >= v128)
                {
                  unint64_t v101 = v87 + 1;
                  BOOL v102 = (char *)v126 + 24 * v87 > (char *)&v122;
                  if (v126 <= &v122 && v102)
                  {
                    int64_t v106 = (char *)&v122 - (unsigned char *)v126;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    int v88 = (char *)v126;
                    v89 = (int *)((char *)v126 + v106);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    v89 = &v122;
                    int v88 = (char *)v126;
                  }
                }
                else
                {
                  v89 = &v122;
                }
                uint64_t v90 = &v88[24 * v127];
                long long v91 = *(_OWORD *)v89;
                *((void *)v90 + 2) = *((void *)v89 + 2);
                *(_OWORD *)uint64_t v90 = v91;
                ++v127;
              }
            }
          }
          char v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          }
          if (v134)
          {
            uint64_t v92 = __p;
            if (__p)
            {
              unint64_t v93 = v133;
              unint64_t v94 = __p;
              if (v133 != __p)
              {
                do
                  unint64_t v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
                while (v93 != v92);
                unint64_t v94 = __p;
              }
              long long v133 = v92;
              operator delete(v94);
            }
            uint64_t v73 = v130;
            if (v130)
            {
              BOOL v95 = v131;
              uint64_t v75 = v130;
              if (v131 != v130)
              {
                do
                {
                  uint64_t v97 = *--v95;
                  uint64_t v96 = v97;
                  void *v95 = 0;
                  if (v97) {
                    MEMORY[0x21667D390](v96, 0x1000C8077774924);
                  }
                }
                while (v95 != v73);
                goto LABEL_122;
              }
LABEL_123:
              v131 = v73;
              operator delete(v75);
            }
            goto LABEL_124;
          }
          goto LABEL_66;
        }
        *(void *)(v54 + 32) = v63;
      }
LABEL_67:
      if (++v52 == v53) {
        goto LABEL_61;
      }
    }
  }
  return 1;
}

uint64_t *llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    size_t v10 = buffer + 2;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    size_t v10 = buffer + 2;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  void *buffer = a3;
  buffer[1] = 0;
  *uint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

uint64_t *llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 2;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v18 = v9[1];
        ++v9;
        uint64_t v10 = v18;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 2;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  uint64_t v13 = *a4;
  void *buffer = a3;
  buffer[1] = v13;
  *uint64_t v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v14 = *v9 == -8;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    do
    {
      uint64_t v16 = v9[1];
      ++v9;
      uint64_t v15 = v16;
      if (v16) {
        BOOL v17 = v15 == -8;
      }
      else {
        BOOL v17 = 1;
      }
    }
    while (v17);
  }
  return v9;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseFileMetadataDictionary(void)::$_0>(uint64_t *a1)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*a1 + 8) + 56));
  uint64_t v3 = *(void **)(v1 + 8);
  int v4 = *((_DWORD *)v3 + 14);
  if (v4 == 3 || v4 == 12)
  {
LABEL_6:
    uint64_t v6 = v3[8];
    uint64_t v7 = v3[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v36);
    uint64_t v8 = *(void *)(v1 + 8);
    *(_OWORD *)(v8 + 56) = v36;
    *(void *)(v8 + 72) = v37;
    *(void *)&long long v36 = "expected ':'";
    __int16 v39 = 259;
    if (mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v36))
    {
      if (v7 == 18)
      {
        if (*(void *)v6 != 0x6C616E7265747865
          || *(void *)(v6 + 8) != 0x6372756F7365725FLL
          || *(_WORD *)(v6 + 16) != 29541)
        {
LABEL_27:
          __int16 v33 = 1283;
          v32[0] = "unknown key '";
          v32[2] = v6;
          v32[3] = v7;
          v34[0] = v32;
          v34[2] = "' in file metadata dictionary";
          __int16 v35 = 770;
          uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v1 + 8) + 8, OCGSize);
          mlir::emitError(EncodedSourceLocation, (uint64_t)v34, (uint64_t)&v36);
          if (*(_DWORD *)(*(void *)(v1 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(&v36);
          }
          uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
          if ((void)v36) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
          }
          if (v45)
          {
            BOOL v17 = __p;
            if (__p)
            {
              uint64_t v18 = v44;
              unint64_t v19 = __p;
              if (v44 != __p)
              {
                do
                  uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
                while (v18 != v17);
                unint64_t v19 = __p;
              }
              long long v44 = v17;
              operator delete(v19);
            }
            long long v20 = v41;
            if (!v41) {
              goto LABEL_59;
            }
            uint64_t v21 = v42;
            long long v22 = v41;
            if (v42 == v41)
            {
LABEL_58:
              __int16 v42 = v20;
              operator delete(v22);
LABEL_59:
              if (v38 != &v40) {
                free(v38);
              }
              return v16;
            }
            do
            {
              uint64_t v24 = *--v21;
              uint64_t v23 = v24;
              void *v21 = 0;
              if (v24) {
                MEMORY[0x21667D390](v23, 0x1000C8077774924);
              }
            }
            while (v21 != v20);
LABEL_57:
            long long v22 = v41;
            goto LABEL_58;
          }
          return v16;
        }
        v32[0] = v1;
      }
      else
      {
        if (v7 != 17) {
          goto LABEL_27;
        }
        BOOL v9 = *(void *)v6 == 0x5F7463656C616964 && *(void *)(v6 + 8) == 0x656372756F736572;
        if (!v9 || *(unsigned char *)(v6 + 16) != 115) {
          goto LABEL_27;
        }
        v32[0] = v1;
      }
      v34[0] = v11;
      v34[1] = v32;
      *(void *)&long long v36 = "expected '{'";
      __int16 v39 = 259;
      if (mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v36))
      {
        *(void *)&long long v36 = v1;
        *((void *)&v36 + 1) = v34;
      }
    }
    return 0;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v3 + 7)))
  {
    uint64_t v3 = *(void **)(v1 + 8);
    goto LABEL_6;
  }
  v34[0] = "expected identifier key in file metadata dictionary";
  __int16 v35 = 259;
  mlir::detail::Parser::emitError(v1, (uint64_t)v34, &v36);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if ((void)v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  if (v45)
  {
    uint64_t v25 = __p;
    if (__p)
    {
      uint64_t v26 = v44;
      uint64_t v27 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        uint64_t v27 = __p;
      }
      long long v44 = v25;
      operator delete(v27);
    }
    long long v20 = v41;
    if (!v41) {
      goto LABEL_59;
    }
    size_t v28 = v42;
    long long v22 = v41;
    if (v42 == v41) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v30 = *--v28;
      uint64_t v29 = v30;
      void *v28 = 0;
      if (v30) {
        MEMORY[0x21667D390](v29, 0x1000C8077774924);
      }
    }
    while (v28 != v20);
    goto LABEL_57;
  }
  return v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseResourceFileMetadata(llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>)::$_0>(uint64_t *a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*a1 + 8) + 56));
  int v4 = *(void **)(v2 + 8);
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
  {
LABEL_6:
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v23);
    uint64_t v9 = *(void *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v23;
    *(void *)(v9 + 72) = v24;
    *(void *)&long long v23 = "expected ':'";
    __int16 v26 = 259;
    if (mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v23)
      && (v21[0] = "expected '{'", __int16 v22 = 259, mlir::detail::Parser::parseToken(v2, 20, (uint64_t)v21)))
    {
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))a1[1])(*(void *)(a1[1] + 8), v7, v8, OCGSize);
    }
    else
    {
      return 0;
    }
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    int v4 = *(void **)(v2 + 8);
    goto LABEL_6;
  }
  v21[0] = "expected identifier key for 'resource' entry";
  __int16 v22 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v21, &v23);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v23);
  if ((void)v23) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  }
  if (v32)
  {
    uint64_t v13 = __p;
    if (__p)
    {
      BOOL v14 = v31;
      uint64_t v15 = __p;
      if (v31 != __p)
      {
        do
          BOOL v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      long long v31 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v28;
    if (v28)
    {
      BOOL v17 = v29;
      uint64_t v18 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v20 = *--v17;
          uint64_t v19 = v20;
          void *v17 = 0;
          if (v20) {
            MEMORY[0x21667D390](v19, 0x1000C8077774924);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v28;
      }
      uint64_t v29 = v16;
      operator delete(v18);
    }
    if (v25 != &v27) {
      free(v25);
    }
  }
  return v10;
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0>(uint64_t *a1, void *a2, size_t a3, const char *a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  Dialect = mlir::MLIRContext::getOrLoadDialect(***(void ***)(*a1 + 8), a2, a3);
  if (Dialect)
  {
    uint64_t v9 = (uint64_t)Dialect;
    if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)Dialect))
    {
      uint64_t v41 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v9);
      if (v41)
      {
        uint64_t v48 = v7;
        unint64_t v49 = &v41;
      }
    }
    else
    {
      uint64_t v41 = 0;
    }
    __int16 v43 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v42, &v48);
    if (v48)
    {
      LODWORD(v44) = 3;
      char v45 = "unexpected 'resource' section for dialect '";
      uint64_t v46 = 43;
      uint64_t v20 = &v44;
      uint64_t v21 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v37 = v51 + 1;
        if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
        {
          int64_t v39 = (char *)&v44 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          uint64_t v21 = (char *)v50;
          uint64_t v20 = (void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          uint64_t v20 = &v44;
          uint64_t v21 = (char *)v50;
        }
      }
      __int16 v22 = &v21[24 * v51];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)__int16 v22 = v23;
      ++v51;
      if (v48)
      {
        uint64_t v24 = *(void ***)(v9 + 8);
        uint64_t v25 = *(const char **)(v9 + 16);
        __int16 v47 = 261;
        long long v44 = v24;
        char v45 = v25;
        mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
        if (v48)
        {
          LODWORD(v44) = 3;
          char v45 = "'";
          uint64_t v46 = 1;
          __int16 v26 = &v44;
          uint64_t v27 = (char *)v50;
          if (v51 >= v52)
          {
            unint64_t v38 = v51 + 1;
            if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
            {
              int64_t v40 = (char *)&v44 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              uint64_t v27 = (char *)v50;
              __int16 v26 = (void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              __int16 v26 = &v44;
              uint64_t v27 = (char *)v50;
            }
          }
          size_t v28 = &v27[24 * v51];
          long long v29 = *(_OWORD *)v26;
          *((void *)v28 + 2) = v26[2];
          *(_OWORD *)size_t v28 = v29;
          ++v51;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    }
    if (v58)
    {
      uint64_t v30 = __p;
      if (__p)
      {
        long long v31 = v57;
        char v32 = __p;
        if (v57 != __p)
        {
          do
            long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          char v32 = __p;
        }
        uint64_t v57 = v30;
        operator delete(v32);
      }
      uint64_t v15 = v54;
      if (!v54) {
        goto LABEL_44;
      }
      uint64_t v33 = v55;
      BOOL v17 = v54;
      if (v55 == v54)
      {
LABEL_43:
        uint64_t v55 = v15;
        operator delete(v17);
LABEL_44:
        if (v50 != v53) {
          free(v50);
        }
        return v10;
      }
      do
      {
        uint64_t v35 = *--v33;
        uint64_t v34 = v35;
        *uint64_t v33 = 0;
        if (v35) {
          MEMORY[0x21667D390](v34, 0x1000C8077774924);
        }
      }
      while (v33 != v15);
LABEL_42:
      BOOL v17 = v54;
      goto LABEL_43;
    }
  }
  else
  {
    __int16 v43 = 1283;
    v42[0] = "dialect '";
    v42[2] = a2;
    v42[3] = a3;
    long long v44 = (void **)v42;
    uint64_t v46 = (uint64_t)"' is unknown";
    __int16 v47 = 770;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v7 + 8) + 8, a4);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v44, (uint64_t)&v48);
    if (*(_DWORD *)(*(void *)(v7 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v48);
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    }
    if (v58)
    {
      uint64_t v12 = __p;
      if (__p)
      {
        uint64_t v13 = v57;
        BOOL v14 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          BOOL v14 = __p;
        }
        uint64_t v57 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v54;
      if (!v54) {
        goto LABEL_44;
      }
      uint64_t v16 = v55;
      BOOL v17 = v54;
      if (v55 == v54) {
        goto LABEL_43;
      }
      do
      {
        uint64_t v19 = *--v16;
        uint64_t v18 = v19;
        *uint64_t v16 = 0;
        if (v19) {
          MEMORY[0x21667D390](v18, 0x1000C8077774924);
        }
      }
      while (v16 != v15);
      goto LABEL_42;
    }
  }
  return v10;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*a1 + 8) + 56));
  long long v16 = 0uLL;
  mlir::detail::Parser::parseResourceHandle(v2, *(void **)a1[1], (uint64_t)&v16, (uint64_t)&v13);
  if (!v15) {
    return 0;
  }
  *(void *)uint64_t v8 = "expected ':'";
  LOWORD(v10) = 259;
  if (!mlir::detail::Parser::parseToken(v2, 15, (uint64_t)v8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  long long v13 = *(_OWORD *)(v4 + 56);
  uint64_t v14 = *(void *)(v4 + 72);
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)v8);
  uint64_t v5 = *(void *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v8;
  *(void *)(v5 + 72) = *(void *)&v8[16];
  *(void *)uint64_t v8 = &unk_26C357890;
  *(_OWORD *)&v8[8] = v16;
  uint64_t v9 = OCGSize;
  long long v10 = v13;
  uint64_t v11 = v14;
  uint64_t v12 = v2;
  uint64_t v6 = (*(uint64_t (**)(void, unsigned char *))(**(void **)a1[1] + 48))(*(void *)a1[1], v8);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v8);
  return v6;
}

void anonymous namespace'::ParsedResourceEntry::~ParsedResourceEntry(_anonymous_namespace_::ParsedResourceEntry *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

{
  uint64_t vars8;

  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ParsedResourceEntry::getKey(_anonymous_namespace_::ParsedResourceEntry *this)
{
  return *((void *)this + 1);
}

{
  return *((void *)this + 1);
}

void anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = (const char *)*((void *)this + 3);
  __int16 v7 = 257;
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v3 + 8) + 8, v4);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v6, (uint64_t)a2);
  if (*(_DWORD *)(*(void *)(v3 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(a2);
  }
}

uint64_t anonymous namespace'::ParsedResourceEntry::getKind(_anonymous_namespace_::ParsedResourceEntry *this)
{
  int v2 = *((_DWORD *)this + 8);
  uint64_t result = 1;
  if (v2 != 54 && v2 != 74)
  {
    if (*((void *)this + 6) >= 3uLL)
    {
      uint64_t v4 = (unsigned __int16 *)*((void *)this + 5);
      unsigned int v5 = bswap32(*v4) >> 16;
      if (v5 == 8752)
      {
        int v6 = *((unsigned __int8 *)v4 + 2) - 120;
      }
      else if (v5 >> 4 < 0x223)
      {
        int v6 = -1;
      }
      else
      {
        int v6 = 1;
      }
      return 2 * (v6 != 0);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

{
  return *((unsigned int *)this + 6);
}

uint64_t anonymous namespace'::ParsedResourceEntry::parseAsBool(_anonymous_namespace_::ParsedResourceEntry *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 8);
  int v2 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  int v3 = v4;
  if (v4 == 54)
  {
    int v5 = 0;
    goto LABEL_5;
  }
  if (v3 == 74)
  {
    int v5 = 1;
LABEL_5:
    int v6 = 1;
    return v5 | (v6 << 8);
  }
  uint64_t v8 = *((void *)this + 7);
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(v2);
  __int16 v22 = 1283;
  uint64_t v10 = *((void *)this + 1);
  uint64_t v11 = *((void *)this + 2);
  v21[0] = "expected 'true' or 'false' value for key '";
  v21[2] = v10;
  v21[3] = v11;
  v23[0] = v21;
  v23[2] = "'";
  __int16 v24 = 770;
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v8 + 8) + 8, OCGSize);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v23, (uint64_t)v25);
  if (*(_DWORD *)(*(void *)(v8 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(v25);
  }
  if (v25[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
  }
  if (v32)
  {
    long long v13 = __p;
    if (__p)
    {
      uint64_t v14 = v31;
      char v15 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        char v15 = __p;
      }
      long long v31 = v13;
      operator delete(v15);
    }
    long long v16 = v28;
    if (v28)
    {
      BOOL v17 = v29;
      uint64_t v18 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v20 = *--v17;
          uint64_t v19 = v20;
          void *v17 = 0;
          if (v20) {
            MEMORY[0x21667D390](v19, 0x1000C8077774924);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v28;
      }
      long long v29 = v16;
      operator delete(v18);
    }
    if (v26 != &v27) {
      free(v26);
    }
  }
  int v5 = 0;
  int v6 = 0;
  return v5 | (v6 << 8);
}

{
  char v2;
  int v3;
  unsigned __int8 v4;
  void ***v5;
  char *v6;
  char *v7;
  long long v8;
  char *v9;
  const char *v10;
  void ***v11;
  char *v12;
  char *v13;
  long long v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  void **v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned char v37[96];
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  char v42;
  uint64_t v43;

  __int16 v43 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 6) == 1)
  {
    LOBYTE(v32) = 0;
    int v3 = v2 != 0;
    int v4 = v32;
    if (!v2) {
      int v4 = 0;
    }
  }
  else
  {
    mlir::emitError(*(void *)(*((void *)this + 4) + 24), (uint64_t)&v32);
    if (v32)
    {
      LODWORD(v28) = 3;
      long long v29 = "expected a BOOL resource entry, but found a ";
      uint64_t v30 = 44;
      int v5 = &v28;
      int v6 = (char *)v34;
      if (v35 >= v36)
      {
        __int16 v24 = v35 + 1;
        if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
        {
          __int16 v26 = (char *)&v28 - (unsigned char *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          int v6 = (char *)v34;
          int v5 = (void ***)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          int v5 = &v28;
          int v6 = (char *)v34;
        }
      }
      __int16 v7 = &v6[24 * v35];
      uint64_t v8 = *(_OWORD *)v5;
      *((void *)v7 + 2) = v5[2];
      *(_OWORD *)__int16 v7 = v8;
      ++v35;
    }
    uint64_t v9 = mlir::toString(*((_DWORD *)this + 6));
    if (v32)
    {
      long long v31 = 261;
      size_t v28 = (void **)v9;
      long long v29 = v10;
      mlir::Diagnostic::operator<<((uint64_t)&v33, &v28);
      if (v32)
      {
        LODWORD(v28) = 3;
        long long v29 = " entry instead";
        uint64_t v30 = 14;
        uint64_t v11 = &v28;
        uint64_t v12 = (char *)v34;
        if (v35 >= v36)
        {
          uint64_t v25 = v35 + 1;
          if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
          {
            uint64_t v27 = (char *)&v28 - (unsigned char *)v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            uint64_t v12 = (char *)v34;
            uint64_t v11 = (void ***)((char *)v34 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            uint64_t v11 = &v28;
            uint64_t v12 = (char *)v34;
          }
        }
        long long v13 = &v12[24 * v35];
        uint64_t v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v35;
        if (v32) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
        }
      }
    }
    if (v42)
    {
      char v15 = __p;
      if (__p)
      {
        long long v16 = v41;
        BOOL v17 = __p;
        if (v41 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          BOOL v17 = __p;
        }
        uint64_t v41 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v38;
      if (v38)
      {
        uint64_t v19 = v39;
        uint64_t v20 = v38;
        if (v39 != v38)
        {
          do
          {
            __int16 v22 = *--v19;
            uint64_t v21 = v22;
            void *v19 = 0;
            if (v22) {
              MEMORY[0x21667D390](v21, 0x1000C8077774924);
            }
          }
          while (v19 != v18);
          uint64_t v20 = v38;
        }
        int64_t v39 = v18;
        operator delete(v20);
      }
      if (v34 != v37) {
        free(v34);
      }
    }
    int v4 = 0;
    int v3 = 0;
  }
  return v4 | (v3 << 8);
}

void anonymous namespace'::ParsedResourceEntry::parseAsString(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)this + 8);
  int v4 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  if (v5 == 11)
  {
    mlir::Token::getStringValue(v4, &v23);
    *a2 = v23;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    uint64_t v6 = *((void *)this + 7);
    uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(v4);
    __int16 v20 = 1283;
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    v19[0] = "expected string value for key '";
    v19[2] = v8;
    v19[3] = v9;
    v21[0] = v19;
    v21[2] = "'";
    __int16 v22 = 770;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v6 + 8) + 8, OCGSize);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v21, (uint64_t)&v23);
    if (*(_DWORD *)(*(void *)(v6 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v23);
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v23.__r_.__value_.__r.__words[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    if (v30)
    {
      uint64_t v11 = __p;
      if (__p)
      {
        uint64_t v12 = v29;
        long long v13 = __p;
        if (v29 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          long long v13 = __p;
        }
        long long v29 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v26;
      if (v26)
      {
        char v15 = v27;
        long long v16 = v26;
        if (v27 != v26)
        {
          do
          {
            uint64_t v18 = *--v15;
            uint64_t v17 = v18;
            *char v15 = 0;
            if (v18) {
              MEMORY[0x21667D390](v17, 0x1000C8077774924);
            }
          }
          while (v15 != v14);
          long long v16 = v26;
        }
        uint64_t v27 = v14;
        operator delete(v16);
      }
      if (v24 != &v25) {
        free(v24);
      }
    }
  }
}

void anonymous namespace'::ParsedResourceEntry::parseAsBlob(mlir::Token *this@<X0>, void (*a2)(void **__return_ptr, uint64_t, size_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlir::Token *)((char *)this + 32);
  if (*((_DWORD *)this + 8) != 11)
  {
    v61.__r_.__value_.__s.__data_[0] = 0;
    char v62 = 0;
LABEL_8:
    uint64_t v10 = *((void *)this + 7);
    uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize(v6);
    __int16 v57 = 1283;
    uint64_t v12 = (const char *)*((void *)this + 1);
    uint64_t v13 = *((void *)this + 2);
    v54[0] = "expected hex string blob for key '";
    uint64_t v55 = v12;
    uint64_t v56 = v13;
    v58[0] = v54;
    uint64_t v59 = "'";
    __int16 v60 = 770;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v10 + 8) + 8, OCGSize);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(void *)(v10 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(__dst);
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
    if (__dst[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v72)
    {
      char v15 = __p;
      if (__p)
      {
        long long v16 = v71;
        uint64_t v17 = __p;
        if (v71 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          uint64_t v17 = __p;
        }
        uint64_t v71 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v68;
      if (!v68) {
        goto LABEL_61;
      }
      uint64_t v19 = v69;
      __int16 v20 = v68;
      if (v69 == v68) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v22 = *--v19;
        uint64_t v21 = v22;
        void *v19 = 0;
        if (v22) {
          MEMORY[0x21667D390](v21, 0x1000C8077774924);
        }
      }
      while (v19 != v18);
      goto LABEL_59;
    }
    goto LABEL_63;
  }
  mlir::Token::getHexStringValue((mlir::Token *)((char *)this + 32), &v61);
  if (!v62) {
    goto LABEL_8;
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v61.__r_.__value_.__l.__size_ >= 4)
    {
      int8x8_t data_low = (int8x8_t)*(unsigned int *)v61.__r_.__value_.__l.__data_;
      if (!data_low.i32[0]) {
        goto LABEL_67;
      }
LABEL_42:
      uint8x8_t v34 = (uint8x8_t)vcnt_s8(data_low);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] < 2u) {
        goto LABEL_67;
      }
      uint64_t v35 = *((void *)this + 7);
      long long v36 = (const char *)MirInfoChannelAssignment::GetOCGSize(v6);
      __int16 v53 = 1283;
      uint64_t v37 = *((void *)this + 1);
      uint64_t v38 = *((void *)this + 2);
      v52[0] = "expected hex string blob for key '";
      v52[2] = v37;
      v52[3] = v38;
      v54[0] = v52;
      uint64_t v55 = "' to encode alignment in first 4 bytes, but got non-power-of-2 value: ";
      __int16 v57 = 770;
      v58[0] = v54;
      uint64_t v59 = (const char *)data_low;
      __int16 v60 = 2306;
      uint64_t v39 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v35 + 8) + 8, v36);
      mlir::emitError(v39, (uint64_t)v58, (uint64_t)__dst);
      if (*(_DWORD *)(*(void *)(v35 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(__dst);
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 64) = 0;
      if (__dst[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
      }
      if (v72)
      {
        int64_t v40 = __p;
        if (__p)
        {
          uint64_t v41 = v71;
          __int16 v42 = __p;
          if (v71 != __p)
          {
            do
              uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            __int16 v42 = __p;
          }
          uint64_t v71 = v40;
          operator delete(v42);
        }
        uint64_t v18 = v68;
        if (!v68) {
          goto LABEL_61;
        }
        __int16 v43 = v69;
        __int16 v20 = v68;
        if (v69 == v68)
        {
LABEL_60:
          char v69 = v18;
          operator delete(v20);
LABEL_61:
          if ((void *)v65 != v66) {
            free((void *)v65);
          }
          goto LABEL_63;
        }
        do
        {
          uint64_t v45 = *--v43;
          uint64_t v44 = v45;
          void *v43 = 0;
          if (v45) {
            MEMORY[0x21667D390](v44, 0x1000C8077774924);
          }
        }
        while (v43 != v18);
LABEL_59:
        __int16 v20 = v68;
        goto LABEL_60;
      }
      goto LABEL_63;
    }
LABEL_25:
    uint64_t v23 = *((void *)this + 7);
    __int16 v24 = (const char *)MirInfoChannelAssignment::GetOCGSize(v6);
    __int16 v57 = 1283;
    uint64_t v25 = (const char *)*((void *)this + 1);
    uint64_t v26 = *((void *)this + 2);
    v54[0] = "expected hex string blob for key '";
    uint64_t v55 = v25;
    uint64_t v56 = v26;
    v58[0] = v54;
    uint64_t v59 = "' to encode alignment in first 4 bytes";
    __int16 v60 = 770;
    uint64_t v27 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v23 + 8) + 8, v24);
    mlir::emitError(v27, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(void *)(v23 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(__dst);
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
    if (__dst[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v72)
    {
      size_t v28 = __p;
      if (__p)
      {
        long long v29 = v71;
        char v30 = __p;
        if (v71 != __p)
        {
          do
            long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          char v30 = __p;
        }
        uint64_t v71 = v28;
        operator delete(v30);
      }
      uint64_t v18 = v68;
      if (!v68) {
        goto LABEL_61;
      }
      uint64_t v31 = v69;
      __int16 v20 = v68;
      if (v69 == v68) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v33 = *--v31;
        uint64_t v32 = v33;
        *uint64_t v31 = 0;
        if (v33) {
          MEMORY[0x21667D390](v32, 0x1000C8077774924);
        }
      }
      while (v31 != v18);
      goto LABEL_59;
    }
LABEL_63:
    if (!v62) {
      return;
    }
    goto LABEL_64;
  }
  if (HIBYTE(v61.__r_.__value_.__r.__words[2]) <= 3u) {
    goto LABEL_25;
  }
  int8x8_t data_low = (int8x8_t)LODWORD(v61.__r_.__value_.__l.__data_);
  if (LODWORD(v61.__r_.__value_.__l.__data_)) {
    goto LABEL_42;
  }
LABEL_67:
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
  }
  size_t v47 = size - 4;
  if (size <= 4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 48) = 0;
    *(unsigned char *)(a4 + 56) = 0;
    *(unsigned char *)(a4 + 64) = 1;
    if (!v62) {
      return;
    }
    goto LABEL_64;
  }
  uint64_t v48 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v48 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  unint64_t v49 = (char *)v48->__r_.__value_.__r.__words + 4;
  a2(__dst, a3, v47, *(void *)&data_low);
  memcpy(__dst[0], v49, v47);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  unint64_t v50 = v66[1];
  *(void *)(a4 + 16) = v64;
  *(void *)(a4 + 48) = v50;
  if (v50 >= 8)
  {
    unsigned int v51 = (_OWORD *)(a4 + 24);
    if ((v50 & 2) != 0 && (v50 & 4) != 0)
    {
      (*(void (**)(_OWORD *, long long *))((v50 & 0xFFFFFFFFFFFFFFF8) + 8))(v51, &v65);
    }
    else
    {
      *unsigned int v51 = v65;
      *(void *)(a4 + 40) = v66[0];
    }
  }
  *(unsigned char *)(a4 + 56) = v67;
  *(unsigned char *)(a4 + 64) = 1;
  if (v62)
  {
LABEL_64:
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0>(uint64_t a1, const void *a2, size_t a3, const char *a4)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  __int16 v7 = *(void **)a1;
  uint64_t v8 = **(void **)(*(void *)a1 + 8);
  uint64_t v37 = a2;
  p_ParserFor = (void **)a3;
  uint64_t v33 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v8 + 16), (uint64_t)&v37, &v33)|| v33 == (void **)(*(void *)(v8 + 16) + 24 * *(unsigned int *)(v8 + 32)))
  {
    uint64_t v9 = *(void *)(v8 + 40);
    if (v9)
    {
      ParserFor = (void *)mlir::FallbackAsmResourceMap::getParserFor(v9, v37, (size_t)p_ParserFor);
      goto LABEL_31;
    }
    ParserFor = 0;
  }
  else
  {
    ParserFor = v33[2];
    if (ParserFor) {
      goto LABEL_31;
    }
  }
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v7[1] + 8, a4);
  mlir::emitWarning(EncodedSourceLocation, (uint64_t)&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint8x8_t v34 = "ignoring unknown external resources for '";
    uint64_t v35 = 41;
    uint64_t v11 = &v33;
    uint64_t v12 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v28 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v30 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        uint64_t v12 = (char *)v39;
        uint64_t v11 = (void ***)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        uint64_t v11 = &v33;
        uint64_t v12 = (char *)v39;
      }
    }
    uint64_t v13 = &v12[24 * v40];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v40;
    if (v37)
    {
      __int16 v36 = 261;
      uint64_t v33 = (void **)a2;
      uint8x8_t v34 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)&p_ParserFor, &v33);
      if (v37)
      {
        LODWORD(v33) = 3;
        uint8x8_t v34 = "'";
        uint64_t v35 = 1;
        char v15 = &v33;
        long long v16 = (char *)v39;
        if (v40 >= v41)
        {
          unint64_t v29 = v40 + 1;
          if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
          {
            int64_t v31 = (char *)&v33 - (unsigned char *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            long long v16 = (char *)v39;
            char v15 = (void ***)((char *)v39 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            char v15 = &v33;
            long long v16 = (char *)v39;
          }
        }
        uint64_t v17 = &v16[24 * v40];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)uint64_t v17 = v18;
        ++v40;
        if (v37) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
        }
      }
    }
  }
  if (v47)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      __int16 v20 = v46;
      uint64_t v21 = __p;
      if (v46 != __p)
      {
        do
          __int16 v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v46 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v43;
    if (v43)
    {
      uint64_t v23 = v44;
      __int16 v24 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        __int16 v24 = v43;
      }
      uint64_t v44 = v22;
      operator delete(v24);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
LABEL_31:
  uint64_t v37 = v7;
  p_ParserFor = &ParserFor;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    long long v14 = 0;
    uint64_t result = 0;
    goto LABEL_70;
  }
  uint64_t v6 = *a1;
  int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
  unsigned int v8 = v4 - 1;
  uint64_t v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      uint64_t v11 = 0;
      int v19 = 1;
      int v20 = HashValue & v8;
      long long v14 = (void *)(v6 + 24 * (HashValue & v8));
      uint64_t v21 = (const void *)*v14;
      if (*v14 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v21 == (const void *)-2;
          }
          if (v22) {
            uint64_t v11 = v14;
          }
          int v23 = v19 + v20;
          ++v19;
          int v20 = v23 & v8;
          long long v14 = (void *)(v6 + 24 * (v23 & v8));
          uint64_t v21 = (const void *)*v14;
          if (*v14 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v11 = 0;
      int v31 = 1;
      int v32 = HashValue & v8;
      long long v14 = (void *)(v6 + 24 * (HashValue & v8));
      uint64_t v33 = *v14;
      if (*v14 == -2) {
        goto LABEL_47;
      }
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v33 == -2;
            }
            if (v34) {
              uint64_t v11 = v14;
            }
            int v35 = v31 + v32;
            ++v31;
            int v32 = v35 & v8;
            long long v14 = (void *)(v6 + 24 * (v35 & v8));
            uint64_t v33 = *v14;
            if (*v14 != -2) {
              goto LABEL_43;
            }
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      uint64_t v11 = 0;
      int v36 = 1;
      int v37 = HashValue & v8;
      long long v14 = (void *)(v6 + 24 * (HashValue & v8));
      uint64_t v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_63;
      }
      while (v38 != (const void *)-1)
      {
        if (v11) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38 == (const void *)-2;
        }
        if (v39) {
          uint64_t v11 = v14;
        }
        int v40 = v36 + v37;
        ++v36;
        int v37 = v40 & v8;
        long long v14 = (void *)(v6 + 24 * (v40 & v8));
        uint64_t v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10)) {
            goto LABEL_69;
          }
        }
      }
      goto LABEL_66;
    }
    uint64_t v11 = 0;
    int v24 = 1;
    int v25 = HashValue & v8;
    long long v14 = (void *)(v6 + 24 * (HashValue & v8));
    uint64_t v26 = (const void *)*v14;
    if (*v14 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), int v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == (const void *)-2;
          }
          if (v29) {
            uint64_t v11 = v14;
          }
          int v30 = v24 + v25;
          ++v24;
          int v25 = v30 & v8;
          long long v14 = (void *)(v6 + 24 * (v30 & v8));
          uint64_t v26 = (const void *)*v14;
          if (*v14 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    uint64_t result = 1;
    goto LABEL_70;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  int v13 = HashValue & v8;
  long long v14 = (void *)(v6 + 24 * (HashValue & v8));
  char v15 = (const void *)*v14;
  if (*v14 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10)) {
    goto LABEL_69;
  }
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == (const void *)-2;
    }
    if (v16) {
      uint64_t v11 = v14;
    }
    int v17 = v12 + v13;
    ++v12;
    int v13 = v17 & v8;
    long long v14 = (void *)(v6 + 24 * (v17 & v8));
    char v15 = (const void *)*v14;
    if (*v14 != -1) {
      goto LABEL_5;
    }
  }
LABEL_66:
  uint64_t result = 0;
  if (v11) {
    long long v14 = v11;
  }
LABEL_70:
  *a3 = v14;
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t OCGSize = (void *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*a1 + 8) + 56));
  int v4 = *(void **)(v2 + 8);
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12) {
    goto LABEL_6;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    int v4 = *(void **)(v2 + 8);
LABEL_6:
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v27);
    uint64_t v9 = *(void *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v27;
    *(void *)(v9 + 72) = v28;
    *(void *)&long long v27 = "expected ':'";
    LOWORD(v30) = 259;
    if (!mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v27)) {
      return 0;
    }
    uint64_t v10 = *(void *)(v2 + 8);
    long long v24 = *(_OWORD *)(v10 + 56);
    uint64_t v25 = *(void *)(v10 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v27);
    uint64_t v11 = *(void *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = v27;
    *(void *)(v11 + 72) = v28;
    uint64_t v12 = *(void *)a1[1];
    if (!v12) {
      return 1;
    }
    uint64_t v31 = v25;
    uint64_t v32 = v2;
    long long v30 = v24;
    *(void *)&long long v27 = &unk_26C357890;
    *((void *)&v27 + 1) = v7;
    uint64_t v28 = v8;
    BOOL v29 = OCGSize;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v12 + 16))(v12, &v27);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v27);
    return v13;
  }
  *(void *)&long long v24 = "expected identifier key for 'external_resources' entry";
  __int16 v26 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v24, &v27);
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if ((void)v27) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  }
  if (v37)
  {
    char v15 = __p;
    if (__p)
    {
      BOOL v16 = v36;
      int v17 = __p;
      if (v36 != __p)
      {
        do
          BOOL v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        int v17 = __p;
      }
      int v36 = v15;
      operator delete(v17);
    }
    long long v18 = v33;
    if (v33)
    {
      int v19 = v34;
      int v20 = v33;
      if (v34 != v33)
      {
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        int v20 = v33;
      }
      BOOL v34 = v18;
      operator delete(v20);
    }
    if (v29 != (char *)&v30 + 8) {
      free(v29);
    }
  }
  return v13;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  uint64_t v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 32 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      int v16 = v11 + v14++;
      uint64_t v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 32 * v11);
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0x3800000000;
  return a2;
}

void *llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *uint64_t v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        BOOL v15 = &result[4 * v11];
        do
        {
          *int v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      int v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          uint64_t v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v22 = *(void *)a1 + 32 * v25;
          uint64_t v26 = *(void *)v22;
          if (v23 != *(void *)v22)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v22;
              }
              int v30 = v25 + v28++;
              uint64_t v25 = v30 & v24;
              uint64_t v22 = *(void *)a1 + 32 * v25;
              uint64_t v26 = *(void *)v22;
              if (v23 == *(void *)v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          *(void *)uint64_t v22 = v23;
          *(void *)(v22 + 8) = *((void *)v16 + 1);
          *(_OWORD *)(v22 + 16) = *((_OWORD *)v16 + 1);
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 2) = 0;
          *((_DWORD *)v16 + 6) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        int v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    int v19 = result + 4;
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      void *v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      uint64_t v21 = &result[4 * v17];
      do
      {
        *int v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  int v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    int v10 = buffer + 56;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    int v10 = buffer + 56;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  *(void *)buffer = a3;
  *(_OWORD *)(buffer + 40) = 0u;
  *(_OWORD *)(buffer + 8) = 0u;
  *(_OWORD *)(buffer + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0u;
  *((void *)buffer + 5) = &mlir::detail::TypeIDResolver<void,void>::id;
  *int v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  int v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

uint64_t mlir::Token::getEndLoc(mlir::Token *this)
{
  return *((void *)this + 1) + *((void *)this + 2);
}

uint64_t mlir::Token::getLocRange(mlir::Token *this)
{
  return *((void *)this + 1);
}

unint64_t mlir::Token::getUnsignedIntegerValue(mlir::Token *this)
{
  unint64_t v1 = *((void *)this + 2);
  if (v1 <= 1)
  {
    int v4 = (unsigned __int8 *)*((void *)this + 1);
    unint64_t v6 = 0;
    if (llvm::getAsUnsignedInteger(v4, v1, 0xAu, &v6)) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = (unsigned __int8 *)*((void *)this + 1);
    if (v2[1] == 120) {
      unsigned int v3 = 0;
    }
    else {
      unsigned int v3 = 10;
    }
    unint64_t v6 = 0;
    if (llvm::getAsUnsignedInteger(v2, v1, v3, &v6)) {
      return 0;
    }
  }
  if (!HIDWORD(v6)) {
    return v6 | 0x100000000;
  }
  return 0;
}

unint64_t mlir::Token::getUInt64IntegerValue(unsigned __int8 *a1, unint64_t a2)
{
  unsigned int v2 = 10;
  if (a2 >= 2)
  {
    if (a1[1] == 120) {
      unsigned int v2 = 0;
    }
    else {
      unsigned int v2 = 10;
    }
  }
  unint64_t v4 = 0;
  if (llvm::getAsUnsignedInteger(a1, a2, v2, &v4)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t mlir::Token::getFloatingPointValue(mlir::Token *this)
{
  double v2 = 0.0;
  if (llvm::StringRef::getAsDouble((mlir::Token *)((char *)this + 8), &v2, 1)) {
    return 0;
  }
  else {
    return *(void *)&v2;
  }
}

unint64_t mlir::Token::getIntTypeBitwidth(mlir::Token *this)
{
  unint64_t v1 = (unsigned char *)*((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  unint64_t v3 = 1;
  if (*v1 != 105) {
    unint64_t v3 = 2;
  }
  if (v2 < v3) {
    unint64_t v3 = *((void *)this + 2);
  }
  unint64_t v5 = 0;
  if ((llvm::getAsUnsignedInteger(&v1[v3], v2 - v3, 0xAu, &v5) & 1) != 0 || HIDWORD(v5)) {
    return 0;
  }
  else {
    return v5 | 0x100000000;
  }
}

uint64_t mlir::Token::getIntTypeSignedness(mlir::Token *this)
{
  int v1 = **((unsigned __int8 **)this + 1);
  if (v1 == 105) {
    return 0;
  }
  if (v1 == 115) {
    return 257;
  }
  return 256;
}

void mlir::Token::getStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    uint64_t v4 = *((void *)this + 1) + 1;
  }
  else {
    uint64_t v4 = *((void *)this + 1);
  }
  std::string::size_type v5 = v3 - (v3 != 0);
  if (*(_DWORD *)this != 2)
  {
    if (v5 >= v5 - 1) {
      --v5;
    }
    if (*(_DWORD *)this == 4)
    {
      if (v5) {
        ++v4;
      }
      v5 -= v5 != 0;
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, v5);
  if (v5)
  {
    unsigned int v6 = 0;
    do
    {
      int v8 = *(unsigned __int8 *)(v4 + v6);
      if (v8 == 92)
      {
        unsigned int v7 = v6 + 2;
        int v9 = *(char *)(v4 + v6 + 1);
        if (v9 <= 109)
        {
          LOBYTE(v8) = *(unsigned char *)(v4 + v6 + 1);
          if (v9 == 34 || v9 == 92) {
            goto LABEL_14;
          }
LABEL_23:
          uint64_t v10 = *(unsigned __int8 *)(v4 + v7);
          unsigned int v7 = v6 + 3;
          LOWORD(v8) = llvm::hexDigitValue(char)::LUT[v10] | (16
                                                            * llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v4 + v6 + 1)]);
          goto LABEL_14;
        }
        if (v9 == 116)
        {
          LOBYTE(v8) = 9;
          goto LABEL_14;
        }
        if (v9 != 110) {
          goto LABEL_23;
        }
        LOBYTE(v8) = 10;
      }
      else
      {
        unsigned int v7 = v6 + 1;
      }
LABEL_14:
      std::string::push_back(a2, v8);
      unsigned int v6 = v7;
    }
    while (v7 != v5);
  }
}

void mlir::Token::getHexStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  BOOL v5 = v3 != 0;
  unint64_t v6 = v3 - v5;
  if (v6 >= v6 - 1) {
    --v6;
  }
  memset(&v16, 0, sizeof(v16));
  if (v6 < 2 || *(_WORD *)(v4 + v5) != 30768 || (unint64_t v7 = v6 - 2, ((v6 - 2) & 1) != 0))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else if (v6 < 3 {
         || ((std::string::resize(&v16, (v6 - 1) >> 1, 0),
  }
              (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
           ? (int v8 = &v16)
           : (int v8 = (std::string *)v16.__r_.__value_.__r.__words[0]),
             v7 < 2))
  {
LABEL_18:
    *a2 = v16;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    uint64_t v9 = -(uint64_t)(v7 >> 1);
    uint64_t v10 = (unsigned __int8 *)(v5 + 2 + v4 + 1);
    while (1)
    {
      int v11 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v10 - 1)];
      int v12 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v10];
      if (v11 == 0xFFFF || v12 == 0xFFFF) {
        break;
      }
      v10 += 2;
      v8->__r_.__value_.__s.__data_[0] = v12 | (16 * v11);
      int v8 = (std::string *)((char *)v8 + 1);
      if (__CFADD__(v9++, 1)) {
        goto LABEL_18;
      }
    }
    int v15 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void mlir::Token::getSymbolReference(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = v3 != 0;
  if (v3) {
    BOOL v5 = (unsigned char *)(*((void *)this + 1) + 1);
  }
  else {
    BOOL v5 = (unsigned char *)*((void *)this + 1);
  }
  if (*v5 == 34)
  {
    mlir::Token::getStringValue(this, a2);
  }
  else
  {
    size_t v6 = v3 - v4;
    if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v6 >= 0x17)
    {
      uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v7 = v6 | 7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (std::string *)operator new(v7 + 1);
      a2->__r_.__value_.__l.__size_ = v6;
      a2->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      a2 = v9;
    }
    else
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = v6;
      if (v3 == v4)
      {
        a2->__r_.__value_.__s.__data_[v6] = 0;
        return;
      }
    }
    memmove(a2, v5, v6);
    a2->__r_.__value_.__s.__data_[v6] = 0;
  }
}

unint64_t mlir::Token::getHashIdentifierNumber(mlir::Token *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    unint64_t v2 = (unsigned __int8 *)(*((void *)this + 1) + 1);
  }
  else {
    unint64_t v2 = (unsigned __int8 *)*((void *)this + 1);
  }
  unint64_t v4 = 0;
  if ((llvm::getAsUnsignedInteger(v2, v1 - (v1 != 0), 0xAu, &v4) & 1) != 0 || HIDWORD(v4)) {
    return 0;
  }
  else {
    return v4 | 0x100000000;
  }
}

char *mlir::Token::getTokenSpelling(int a1)
{
  return (&off_26418CD50)[a1 - 13];
}

BOOL mlir::Token::isKeyword(mlir::Token *this)
{
  return (*(_DWORD *)this - 34) < 0x2D;
}

BOOL mlir::Token::isCodeCompletionFor(uint64_t a1, int a2)
{
  if (*(_DWORD *)a1 == 2
    && *(void *)(a1 + 16)
    && (char v2 = a2 - 5, (a2 - 5) <= 6)
    && ((0x4Fu >> v2) & 1) != 0)
  {
    return **(unsigned char **)(a1 + 8) == ((0x222222215E2523uLL >> (8 * v2)) & 0x7F);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseOptionalType(mlir::detail::Parser *this, mlir::Type *a2)
{
  int v2 = 0;
  BOOL v4 = 0;
  switch(*(_DWORD *)(*((void *)this + 1) + 56))
  {
    case 8:
    case 0xC:
    case 0x26:
    case 0x28:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x3A:
    case 0x3D:
    case 0x40:
    case 0x47:
    case 0x48:
    case 0x4B:
    case 0x4E:
      uint64_t v5 = mlir::detail::Parser::parseNonFunctionType(this);
      goto LABEL_3;
    case 9:
    case 0xA:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x49:
    case 0x4A:
    case 0x4C:
    case 0x4D:
      goto LABEL_4;
    case 0x15:
      uint64_t v5 = mlir::detail::Parser::parseFunctionType(this);
LABEL_3:
      *(void *)a2 = v5;
      BOOL v4 = v5 != 0;
      int v2 = 1;
LABEL_4:
      uint64_t result = v4 | (v2 << 8);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseType(mlir::detail::Parser *this)
{
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21) {
    return mlir::detail::Parser::parseFunctionType(this);
  }
  else {
    return mlir::detail::Parser::parseNonFunctionType(this);
  }
}

uint64_t mlir::detail::Parser::parseFunctionType(mlir::detail::Parser *this)
{
  _OWORD v17[4] = *MEMORY[0x263EF8340];
  int v15 = v17;
  uint64_t v16 = *(void *)"";
  int v12 = v14;
  uint64_t v13 = *(void *)"";
  if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v15)
    || (uint64_t v8 = "expected '->' in function type",
        __int16 v9 = 259,
        !mlir::detail::Parser::parseToken((uint64_t)this, 13, (uint64_t)&v8)))
  {
LABEL_12:
    uint64_t FunctionType = 0;
    uint64_t v5 = v12;
    if (v12 == v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v12)) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v2 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v2) {
      goto LABEL_12;
    }
    unsigned int v3 = v13;
    if (v13 >= HIDWORD(v13))
    {
      uint64_t v7 = v2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, v13 + 1, 8);
      uint64_t v2 = v7;
      unsigned int v3 = v13;
    }
    *((void *)v12 + v3) = v2;
    LODWORD(v13) = v13 + 1;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v15, v16);
  mlir::ValueRange::ValueRange(v10, (uint64_t)v12, v13);
  uint64_t FunctionType = mlir::Builder::getFunctionType((mlir::MLIRContext **)this, v11[0], v11[1], v10[0], v10[1]);
  uint64_t v5 = v12;
  if (v12 != v14) {
LABEL_13:
  }
    free(v5);
LABEL_14:
  if (v15 != v17) {
    free(v15);
  }
  return FunctionType;
}

uint64_t mlir::detail::Parser::parseNonFunctionType(mlir::detail::Parser *this)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  unsigned int v3 = (mlir::Token *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 2:
      if (mlir::Token::isCodeCompletionFor((uint64_t)v3, 8)) {
        goto LABEL_3;
      }
      uint64_t result = mlir::detail::Parser::codeCompleteType(this);
      break;
    case 8:
LABEL_3:
      uint64_t result = mlir::detail::Parser::parseExtendedType(this);
      break;
    case 0xC:
      unint64_t IntTypeBitwidth = mlir::Token::getIntTypeBitwidth(v3);
      if ((IntTypeBitwidth & 0xFF00000000) == 0)
      {
        *(void *)&long long v50 = "invalid integer width";
        __int16 v52 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, &v53);
        if (v53) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v54);
        goto LABEL_69;
      }
      unsigned int v14 = IntTypeBitwidth;
      if (BYTE3(IntTypeBitwidth))
      {
        uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1)
                                                                                                + 56));
        uint64_t v48 = "integer bitwidth is limited to ";
        __int16 v49 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v48, &v50);
        uint64_t v16 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&v50, &mlir::IntegerType::kMaxWidth);
        mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v16, " bits");
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v50);
        goto LABEL_69;
      }
      __int16 IntTypeSignedness = mlir::Token::getIntTypeSignedness((mlir::Token *)(*((void *)this + 1) + 56));
      if ((_BYTE)IntTypeSignedness) {
        int v45 = 1;
      }
      else {
        int v45 = 2;
      }
      if ((IntTypeSignedness & 0xFF00) != 0) {
        unsigned int v46 = v45;
      }
      else {
        unsigned int v46 = 0;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v50);
      uint64_t v47 = *((void *)this + 1);
      *(_OWORD *)(v47 + 56) = v50;
      *(void *)(v47 + 72) = v51;
      uint64_t result = mlir::IntegerType::get(***((void ***)this + 1), v14, v46);
      break;
    case 0x26:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v17 = *((void *)this + 1);
      *(_OWORD *)(v17 + 56) = v50;
      *(void *)(v17 + 72) = v51;
      uint64_t result = mlir::Builder::getBF16Type((mlir::BFloat16Type **)this, v18);
      break;
    case 0x28:
      uint64_t result = mlir::detail::Parser::parseComplexType(this);
      break;
    case 0x2C:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v19 = *((void *)this + 1);
      *(_OWORD *)(v19 + 56) = v50;
      *(void *)(v19 + 72) = v51;
      uint64_t result = mlir::Builder::getF16Type((mlir::Float16Type **)this, v20);
      break;
    case 0x2D:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v21 = *((void *)this + 1);
      *(_OWORD *)(v21 + 56) = v50;
      *(void *)(v21 + 72) = v51;
      uint64_t result = mlir::Builder::getF32Type((mlir::Float32Type **)this, v22);
      break;
    case 0x2E:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v23 = *((void *)this + 1);
      *(_OWORD *)(v23 + 56) = v50;
      *(void *)(v23 + 72) = v51;
      uint64_t result = mlir::Builder::getF64Type((mlir::Float64Type **)this, v24);
      break;
    case 0x2F:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v25 = *((void *)this + 1);
      *(_OWORD *)(v25 + 56) = v50;
      *(void *)(v25 + 72) = v51;
      uint64_t result = mlir::Builder::getF80Type((mlir::Float80Type **)this, v26);
      break;
    case 0x30:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v27 = *((void *)this + 1);
      *(_OWORD *)(v27 + 56) = v50;
      *(void *)(v27 + 72) = v51;
      uint64_t result = mlir::Builder::getFloat8E5M2Type((mlir::Float8E5M2Type **)this, v28);
      break;
    case 0x31:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v29 = *((void *)this + 1);
      *(_OWORD *)(v29 + 56) = v50;
      *(void *)(v29 + 72) = v51;
      uint64_t result = mlir::Builder::getFloat8E4M3FNType((ZinIrHazardNode **)this);
      break;
    case 0x32:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v30 = *((void *)this + 1);
      *(_OWORD *)(v30 + 56) = v50;
      *(void *)(v30 + 72) = v51;
      uint64_t result = mlir::Builder::getFloat8E5M2FNUZType((mlir::Float8E5M2FNUZType **)this, v31);
      break;
    case 0x33:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v32 = *((void *)this + 1);
      *(_OWORD *)(v32 + 56) = v50;
      *(void *)(v32 + 72) = v51;
      uint64_t result = mlir::Builder::getFloat8E4M3FNUZType((mlir::Float8E4M3FNUZType **)this, v33);
      break;
    case 0x34:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v34 = *((void *)this + 1);
      *(_OWORD *)(v34 + 56) = v50;
      *(void *)(v34 + 72) = v51;
      uint64_t result = mlir::Builder::getFloat8E4M3B11FNUZType((mlir::Float8E4M3B11FNUZType **)this, v35);
      break;
    case 0x35:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v36 = *((void *)this + 1);
      *(_OWORD *)(v36 + 56) = v50;
      *(void *)(v36 + 72) = v51;
      uint64_t result = mlir::Builder::getF128Type((mlir::Float128Type **)this, v37);
      break;
    case 0x3A:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v38 = *((void *)this + 1);
      *(_OWORD *)(v38 + 56) = v50;
      *(void *)(v38 + 72) = v51;
      uint64_t result = mlir::Builder::getIndexType((mlir::IndexType **)this, v39);
      break;
    case 0x3D:
      uint64_t result = mlir::detail::Parser::parseMemRefType(this);
      break;
    case 0x40:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v40 = *((void *)this + 1);
      *(_OWORD *)(v40 + 56) = v50;
      *(void *)(v40 + 72) = v51;
      uint64_t result = mlir::Builder::getNoneType((mlir::NoneType **)this, v41);
      break;
    case 0x47:
      uint64_t result = mlir::detail::Parser::parseTensorType(this);
      break;
    case 0x48:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v50);
      uint64_t v42 = *((void *)this + 1);
      *(_OWORD *)(v42 + 56) = v50;
      *(void *)(v42 + 72) = v51;
      uint64_t result = mlir::Builder::getTF32Type((mlir::FloatTF32Type **)this, v43);
      break;
    case 0x4B:
      uint64_t result = mlir::detail::Parser::parseTupleType(this);
      break;
    case 0x4E:
      uint64_t result = mlir::detail::Parser::parseVectorType(this);
      break;
    default:
      *(void *)&long long v50 = "expected non-function type";
      __int16 v52 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v50, v55);
      if (v55[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      }
      if (v62)
      {
        uint64_t v5 = v60;
        if (v60)
        {
          size_t v6 = v61;
          uint64_t v7 = v60;
          if (v61 != v60)
          {
            do
              size_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
            while (v6 != v5);
            uint64_t v7 = v60;
          }
          std::string v61 = v5;
          operator delete(v7);
        }
        uint64_t v8 = v58;
        if (v58)
        {
          __int16 v9 = v59;
          uint64_t v10 = v58;
          if (v59 != v58)
          {
            do
            {
              uint64_t v12 = *--v9;
              uint64_t v11 = v12;
              *__int16 v9 = 0;
              if (v12) {
                MEMORY[0x21667D390](v11, 0x1000C8077774924);
              }
            }
            while (v9 != v8);
            uint64_t v10 = v58;
          }
          uint64_t v59 = v8;
          operator delete(v10);
        }
        if (v56 != &v57) {
          free(v56);
        }
      }
LABEL_69:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseFunctionResultTypes(mlir::detail::Parser *a1, uint64_t a2)
{
  if (*(_DWORD *)(*((void *)a1 + 1) + 56) == 21)
  {
    return mlir::detail::Parser::parseTypeListParens((uint64_t)a1, a2);
  }
  else
  {
    uint64_t result = mlir::detail::Parser::parseNonFunctionType(a1);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      if (v5 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(a2 + 8);
      }
      *(void *)(*(void *)a2 + 8 * v5) = v4;
      ++*(_DWORD *)(a2 + 8);
      return 1;
    }
  }
  return result;
}

BOOL mlir::detail::Parser::parseTypeListParens(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v7 = "expected '('";
  __int16 v9 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v7)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
    uint64_t v5 = *(void *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v7;
    *(void *)(v5 + 72) = v8;
    return 1;
  }
  *(void *)&long long v7 = a1;
  *((void *)&v7 + 1) = a2;
  if (!mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v7, 0, 0))return 0; {
  *(void *)&long long v7 = "expected ')'";
  }
  __int16 v9 = 259;
  return mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v7) != 0;
}

uint64_t mlir::detail::Parser::parseTypeListNoParens(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  return mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v3, 0, 0);
}

uint64_t mlir::detail::Parser::parseComplexType(mlir::detail::Parser *this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v27);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(void *)(v2 + 72) = v28;
  *(void *)&long long v27 = "expected '<' in complex type";
  __int16 v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27)) {
    return 0;
  }
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    uint64_t v4 = mlir::detail::Parser::parseFunctionType(this);
    if (!v4) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v4) {
      return 0;
    }
  }
  *(void *)&long long v27 = "expected '>' in complex type";
  __int16 v29 = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v27))
  {
    uint64_t v5 = *(void **)(*(void *)v4 + 136);
    if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return mlir::ComplexType::get(v4);
    }
    *(void *)&long long v27 = "invalid element type for complex";
    __int16 v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v27, v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      uint64_t v19 = __p;
      if (__p)
      {
        uint64_t v20 = v36;
        uint64_t v21 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v36 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v33;
      if (v33)
      {
        uint64_t v23 = v34;
        int v24 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v26 = *--v23;
            uint64_t v25 = v26;
            *uint64_t v23 = 0;
            if (v26) {
              MEMORY[0x21667D390](v25, 0x1000C8077774924);
            }
          }
          while (v23 != v22);
          int v24 = v33;
        }
        uint64_t v34 = v22;
        operator delete(v24);
      }
      if (v31 != &v32) {
        free(v31);
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseMemRefType(mlir::detail::Parser *this)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v43);
  uint64_t v3 = *((void *)this + 1);
  *(_OWORD *)(v3 + 56) = v43;
  *(void *)(v3 + 72) = v44[0];
  *(void *)&long long v43 = "expected '<' in memref type";
  __int16 v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v43)) {
    return 0;
  }
  *(void *)&long long v43 = v44;
  *((void *)&v43 + 1) = *(void *)"";
  uint64_t v4 = *((void *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v30);
    uint64_t v5 = *((void *)this + 1);
    *(_OWORD *)(v5 + 56) = v30;
    *(void *)(v5 + 72) = v31;
    char v33 = 1;
    if (!mlir::detail::Parser::parseXInDimensionList(this)) {
      goto LABEL_55;
    }
    uint64_t v6 = *((void *)this + 1);
  }
  else
  {
    char v33 = 0;
    LOBYTE(v26[0]) = 1;
    *(void *)&long long v30 = this;
    *((void *)&v30 + 1) = v26;
    uint64_t v31 = &v43;
    while (1)
    {
      uint64_t v6 = *((void *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A) {
        break;
      }
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v30)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_55;
      }
    }
  }
  long long v7 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v6 + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    uint64_t v8 = mlir::detail::Parser::parseFunctionType(this);
    if (!v8) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v8 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v8) {
      goto LABEL_55;
    }
  }
  *(void *)&long long v30 = v8;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v30)
    || ((uint64_t v10 = *(void **)(*(void *)v30 + 136), v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (BOOL v11 = 1),
        !v11 ? (BOOL v12 = v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v12 = 1),
        !v12 ? (BOOL v13 = v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (BOOL v13 = 1),
        v13 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(void *)v30 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    v26[0] = this;
    v26[1] = &v28;
    v26[2] = &v27;
    void v26[3] = &v33;
    uint64_t v27 = 0;
    uint64_t v14 = *((void *)this + 1);
    if (*(_DWORD *)(v14 + 56) == 19)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
      uint64_t v15 = *((void *)this + 1);
      *(_OWORD *)(v15 + 56) = v30;
      *(void *)(v15 + 72) = v31;
    }
    else
    {
      *(void *)&long long v30 = "expected ',' or '>' in memref type";
      __int16 v32 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v30)
        || !mlir::detail::Parser::parseCommaSeparatedListUntil((uint64_t)this, 19, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>, (uint64_t)v26, 0))
      {
        goto LABEL_55;
      }
    }
    if (v33)
    {
      uint64_t v34 = OCGSize;
      *(void *)&long long v30 = this;
      *((void *)&v30 + 1) = &v34;
      uint64_t Checked = mlir::UnrankedMemRefType::getChecked((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v8, v27);
      uint64_t v16 = (void *)v43;
      if ((void *)v43 == v44) {
        return Checked;
      }
    }
    else
    {
      uint64_t v34 = OCGSize;
      *(void *)&long long v30 = this;
      *((void *)&v30 + 1) = &v34;
      uint64_t Checked = mlir::MemRefType::getChecked((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v43, (mlir::AffineMap *)DWORD2(v43), v8, v28, v29, v27);
      uint64_t v16 = (void *)v43;
      if ((void *)v43 == v44) {
        return Checked;
      }
    }
    goto LABEL_56;
  }
  *(void *)&long long v30 = "invalid memref element type";
  __int16 v32 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v7, (uint64_t)&v30, v35);
  if (v35[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  }
  if (v42)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v41;
      uint64_t v19 = __p;
      if (v41 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      unsigned int v41 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v38;
    if (v38)
    {
      uint64_t v21 = v39;
      uint64_t v22 = v38;
      if (v39 != v38)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v38;
      }
      BOOL v39 = v20;
      operator delete(v22);
    }
    if (v36 != &v37) {
      free(v36);
    }
  }
LABEL_55:
  uint64_t Checked = 0;
  uint64_t v16 = (void *)v43;
  if ((void *)v43 != v44) {
LABEL_56:
  }
    free(v16);
  return Checked;
}

uint64_t mlir::detail::Parser::parseXInDimensionList(mlir::detail::Parser *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (*(_DWORD *)(v2 + 56) == 3 && (uint64_t v3 = *(unsigned char **)(v2 + 64), *v3 == 120))
  {
    if (*(void *)(v2 + 72) != 1) {
      *(void *)(v2 + 40) = v3 + 1;
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v17);
    uint64_t v4 = *((void *)this + 1);
    *(_OWORD *)(v4 + 56) = v17;
    *(void *)(v4 + 72) = v18;
    return 1;
  }
  else
  {
    uint64_t v15 = "expected 'x' in dimension list";
    __int16 v16 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v15, &v17);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
    if ((void)v17) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
    }
    if (v25)
    {
      uint64_t v6 = __p;
      if (__p)
      {
        long long v7 = v24;
        uint64_t v8 = __p;
        if (v24 != __p)
        {
          do
            long long v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        uint64_t v24 = v6;
        operator delete(v8);
      }
      __int16 v9 = v21;
      if (v21)
      {
        uint64_t v10 = v22;
        BOOL v11 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v13 = *--v10;
            uint64_t v12 = v13;
            *uint64_t v10 = 0;
            if (v13) {
              MEMORY[0x21667D390](v12, 0x1000C8077774924);
            }
          }
          while (v10 != v9);
          BOOL v11 = v21;
        }
        uint64_t v22 = v9;
        operator delete(v11);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v5;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(mlir::detail::Parser *a1, uint64_t a2, char a3, int a4)
{
  char v8 = a3;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = a2;
  if (a4)
  {
    while ((*(_DWORD *)(*((void *)a1 + 1) + 56) | 0x10) == 0x1A)
    {
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7)
        || !mlir::detail::Parser::parseXInDimensionList(a1))
      {
        return 0;
      }
    }
    return 1;
  }
  if ((*(_DWORD *)(*((void *)a1 + 1) + 56) | 0x10) != 0x1A) {
    return 1;
  }
  do
  {
    if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7)) {
      break;
    }
    uint64_t v5 = *((void *)a1 + 1);
    if (*(_DWORD *)(v5 + 56) != 3 || **(unsigned char **)(v5 + 64) != 120) {
      return 1;
    }
  }
  while (mlir::detail::Parser::parseXInDimensionList(a1));
  return 0;
}

uint64_t mlir::detail::Parser::parseTensorType(mlir::detail::Parser *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v40);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v40;
  *(void *)(v2 + 72) = v41[0];
  *(void *)&long long v40 = "expected '<' in tensor type";
  __int16 v42 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v40)) {
    return 0;
  }
  *(void *)&long long v40 = v41;
  *((void *)&v40 + 1) = *(void *)"";
  uint64_t v3 = *((void *)this + 1);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v26);
    uint64_t v5 = *((void *)this + 1);
    *(_OWORD *)(v5 + 56) = v26;
    *(void *)(v5 + 72) = v27;
    if (!mlir::detail::Parser::parseXInDimensionList(this)) {
      goto LABEL_51;
    }
    uint64_t v6 = *((void *)this + 1);
  }
  else
  {
    LOBYTE(v30) = 1;
    *(void *)&long long v26 = this;
    *((void *)&v26 + 1) = &v30;
    uint64_t v27 = &v40;
    while (1)
    {
      uint64_t v6 = *((void *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A) {
        break;
      }
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v26)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_51;
      }
    }
  }
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v6 + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    char v8 = (uint64_t *)mlir::detail::Parser::parseFunctionType(this);
    long long v30 = 0;
    uint64_t v9 = *((void *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16) {
      goto LABEL_16;
    }
  }
  else
  {
    char v8 = (uint64_t *)mlir::detail::Parser::parseNonFunctionType(this);
    long long v30 = 0;
    uint64_t v9 = *((void *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16) {
      goto LABEL_16;
    }
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v9 + 8), (uint64_t)&v26);
  uint64_t v11 = *((void *)this + 1);
  *(_OWORD *)(v11 + 56) = v26;
  *(void *)(v11 + 72) = v27;
  unsigned __int16 v12 = mlir::detail::Parser::parseOptionalAttribute((uint64_t)this, &v30, 0);
  if (v12 < 0x100u
    || (_BYTE)v12
    && ((uint64_t v14 = v30) == 0
      ? (void *)(uint64_t v15 = 0)
      : (uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v30 + 8)) == 0
      ? (uint64_t v14 = 0)
      : (void *)(uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v14 + 8)),
        (*(void *)&long long v26 = v14, *((void *)&v26 + 1) = v15, !v14)
     || (uint64_t v29 = this,
         mlir::VerifiableTensorEncoding::verifyEncoding((uint64_t)&v26, v40, DWORD2(v40), (uint64_t)v8, (uint64_t)llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>, (uint64_t)&v29))))
  {
LABEL_16:
    if (v8)
    {
      *(void *)&long long v26 = "expected '>' in tensor type";
      __int16 v28 = 259;
      if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v26))
      {
        if (mlir::TensorType::isValidElementType(v8))
        {
          if (v4 == 30)
          {
            if (v30)
            {
              *(void *)&long long v26 = "cannot apply encoding to unranked tensor";
              __int16 v28 = 259;
              mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v26, v31);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
              uint64_t v10 = 0;
              uint64_t v13 = (void *)v40;
              if ((void *)v40 == v41) {
                return v10;
              }
              goto LABEL_52;
            }
            uint64_t v24 = mlir::UnrankedTensorType::get((uint64_t)v8);
          }
          else
          {
            uint64_t v24 = mlir::RankedTensorType::get(v40, DWORD2(v40), (uint64_t)v8, (uint64_t)v30);
          }
          uint64_t v10 = v24;
          uint64_t v13 = (void *)v40;
          if ((void *)v40 == v41) {
            return v10;
          }
LABEL_52:
          free(v13);
          return v10;
        }
        *(void *)&long long v26 = "invalid tensor element type";
        __int16 v28 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v26, v32);
        if (v32[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
        }
        if (v39)
        {
          __int16 v16 = __p;
          if (__p)
          {
            long long v17 = v38;
            uint64_t v18 = __p;
            if (v38 != __p)
            {
              do
                long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
              while (v17 != v16);
              uint64_t v18 = __p;
            }
            uint64_t v38 = v16;
            operator delete(v18);
          }
          uint64_t v19 = v35;
          if (v35)
          {
            uint64_t v20 = v36;
            uint64_t v21 = v35;
            if (v36 != v35)
            {
              do
              {
                uint64_t v23 = *--v20;
                uint64_t v22 = v23;
                void *v20 = 0;
                if (v23) {
                  MEMORY[0x21667D390](v22, 0x1000C8077774924);
                }
              }
              while (v20 != v19);
              uint64_t v21 = v35;
            }
            uint64_t v36 = v19;
            operator delete(v21);
          }
          if (v33 != &v34)
          {
            free(v33);
            uint64_t v10 = 0;
            uint64_t v13 = (void *)v40;
            if ((void *)v40 == v41) {
              return v10;
            }
            goto LABEL_52;
          }
        }
      }
    }
  }
LABEL_51:
  uint64_t v10 = 0;
  uint64_t v13 = (void *)v40;
  if ((void *)v40 != v41) {
    goto LABEL_52;
  }
  return v10;
}

uint64_t mlir::detail::Parser::parseTupleType(mlir::detail::Parser *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)v13);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v13;
  *(void *)(v2 + 72) = v14[0];
  v13[0] = "expected '<' in tuple type";
  __int16 v15 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)v13)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (*(_DWORD *)(v3 + 56) != 19)
  {
    v13[0] = v14;
    v13[1] = *(void **)"";
    v10[0] = this;
    v10[1] = v13;
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v10, 0, 0)&& (v10[0] = "expected '>' in tuple type", __int16 v11 = 259, mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v10)))
    {
      long long v7 = (mlir::MLIRContext *)***((void ***)this + 1);
      mlir::ValueRange::ValueRange(v12, (uint64_t)v13[0], LODWORD(v13[1]));
      uint64_t v6 = mlir::TupleType::get(v7, v12[0], v12[1]);
      char v8 = v13[0];
      if (v13[0] == v14) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 0;
      char v8 = v13[0];
      if (v13[0] == v14) {
        return v6;
      }
    }
    free(v8);
    return v6;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v13);
  uint64_t v4 = *((void *)this + 1);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)v13;
  *(void *)(v4 + 72) = v14[0];
  return mlir::TupleType::get(***((mlir::TupleType ****)this + 1), v5);
}

uint64_t mlir::detail::Parser::parseVectorType(mlir::detail::Parser *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v47);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v47;
  *(void *)(v2 + 72) = v48[0];
  *(void *)&long long v47 = "expected '<' in vector type";
  __int16 v49 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v47)) {
    return 0;
  }
  *(void *)&long long v47 = v48;
  *((void *)&v47 + 1) = *(void *)"";
  int v35 = &v37;
  long long v36 = xmmword_211ED5570;
  if (!mlir::detail::Parser::parseVectorDimensionList(this, (uint64_t)&v47, &v35))
  {
LABEL_74:
    uint64_t v7 = 0;
    uint64_t v22 = v35;
    if (v35 == &v37) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (DWORD2(v47))
  {
    uint64_t v3 = (uint64_t *)v47;
    uint64_t v4 = 8 * DWORD2(v47);
    while (*v3 > 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4) {
        goto LABEL_7;
      }
    }
    uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1)
                                                                                            + 56));
    v33[0] = "vector types must have positive constant sizes";
    __int16 v34 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)v33, v39);
    if (v39[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
    }
    if (v46)
    {
      uint64_t v24 = __p;
      if (__p)
      {
        char v25 = v45;
        long long v26 = __p;
        if (v45 != __p)
        {
          do
            char v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          long long v26 = __p;
        }
        __int16 v45 = v24;
        operator delete(v26);
      }
      uint64_t v27 = v42;
      if (v42)
      {
        __int16 v28 = v43;
        uint64_t v29 = v42;
        if (v43 != v42)
        {
          do
          {
            uint64_t v31 = *--v28;
            uint64_t v30 = v31;
            void *v28 = 0;
            if (v31) {
              MEMORY[0x21667D390](v30, 0x1000C8077774924);
            }
          }
          while (v28 != v27);
          uint64_t v29 = v42;
        }
        uint64_t v43 = v27;
        operator delete(v29);
      }
      if (v40 != &v41) {
        free(v40);
      }
    }
    goto LABEL_74;
  }
LABEL_7:
  uint64_t v5 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    uint64_t v6 = mlir::detail::Parser::parseFunctionType(this);
    if (!v6) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v6 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v6) {
      goto LABEL_74;
    }
  }
  v33[0] = "expected '>' in vector type";
  __int16 v34 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v33)) {
    goto LABEL_74;
  }
  char v8 = *(void **)(*(void *)v6 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t v7 = mlir::VectorType::get(v47, DWORD2(v47), v6, v35, v36);
    uint64_t v22 = v35;
    if (v35 == &v37) {
      goto LABEL_76;
    }
LABEL_75:
    free(v22);
    goto LABEL_76;
  }
  v33[0] = "vector elements must be int/index/float type";
  __int16 v34 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v5, (uint64_t)v33, v38);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v38);
  uint64_t v7 = 0;
  uint64_t v22 = v35;
  if (v35 != &v37) {
    goto LABEL_75;
  }
LABEL_76:
  if ((void *)v47 != v48) {
    free((void *)v47);
  }
  return v7;
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned int const&>(uint64_t a1, unsigned int *a2)
{
  if (*(void *)a1)
  {
    uint64_t v3 = a1 + 24;
    unint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *a2;
    int v14 = 5;
    uint64_t v15 = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v11 = v6 + 1;
      BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        uint64_t v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = &v14;
      }
    }
    uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::detail::Parser::parseVectorDimensionList(mlir::detail::Parser *a1, uint64_t a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)(a2 + 16);
  uint64_t v7 = a3 + 3;
  while (1)
  {
    uint64_t v8 = *((void *)a1 + 1);
    int v9 = *(_DWORD *)(v8 + 56);
    if (v9 == 22)
    {
      uint64_t v29 = 0;
      mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)&v30);
      uint64_t v11 = *((void *)a1 + 1);
      *(_OWORD *)(v11 + 56) = v30;
      *(void *)(v11 + 72) = v31;
      int v10 = 1;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29)) {
        return 0;
      }
    }
    else
    {
      if (v9 != 10) {
        return 1;
      }
      int v10 = 0;
      uint64_t v29 = 0;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29)) {
        return 0;
      }
    }
    uint64_t v12 = v29;
    unint64_t v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(unsigned int *)(a2 + 12)) {
      break;
    }
    *(void *)(*(void *)a2 + 8 * v13) = v29;
    ++*(_DWORD *)(a2 + 8);
    if (v10) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v16 = a3[1];
    if ((unint64_t)(v16 + 1) > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, v7, v16 + 1, 1);
      uint64_t v16 = a3[1];
    }
    *(unsigned char *)(*a3 + v16) = v10;
    ++a3[1];
    if (!mlir::detail::Parser::parseXInDimensionList(a1)) {
      return 0;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v13 + 1, 8);
  *(void *)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v12;
  if (!v10) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v14 = *((void *)a1 + 1);
  if (*(_DWORD *)(v14 + 56) == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
    uint64_t v15 = *((void *)a1 + 1);
    *(_OWORD *)(v15 + 56) = v30;
    *(void *)(v15 + 72) = v31;
    goto LABEL_11;
  }
  uint64_t v27 = "missing ']' closing scalable dimension";
  __int16 v28 = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v27, &v30);
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if ((void)v30) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  }
  if (v38)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v37;
      uint64_t v20 = __p;
      if (v37 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v37 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v34;
    if (v34)
    {
      uint64_t v22 = v35;
      uint64_t v23 = v34;
      if (v35 != v34)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v34;
      }
      int v35 = v21;
      operator delete(v23);
    }
    if (v32 != &v33) {
      free(v32);
    }
  }
  return v17;
}

uint64_t mlir::detail::Parser::parseIntegerInDimensionList(mlir::detail::Parser *this, unint64_t *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v4 = (void *)*((void *)this + 1);
  uint64_t v5 = (unsigned __int8 *)v4[8];
  unint64_t v6 = v4[9];
  if (v6 >= 2)
  {
    uint64_t v7 = v5 + 1;
    if (v5[1] == 120)
    {
      *a2 = 0;
      uint64_t v8 = (mlir::Lexer *)(v4 + 1);
      v4[5] = v7;
LABEL_7:
      mlir::Lexer::lexToken(v8, (uint64_t)&v24);
      uint64_t v11 = *((void *)this + 1);
      *(_OWORD *)(v11 + 56) = v24;
      *(void *)(v11 + 72) = v25;
      return 1;
    }
  }
  unint64_t UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(v5, v6);
  if (v10 && (UInt64IntegerValue & 0x8000000000000000) == 0)
  {
    *a2 = UInt64IntegerValue;
    uint64_t v8 = (mlir::Lexer *)(*((void *)this + 1) + 8);
    goto LABEL_7;
  }
  uint64_t v22 = "invalid dimension";
  __int16 v23 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v22, &v24);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if ((void)v24) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  }
  if (v32)
  {
    uint64_t v14 = __p;
    if (__p)
    {
      uint64_t v15 = v31;
      uint64_t v16 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      uint64_t v31 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v28;
    if (v28)
    {
      uint64_t v18 = v29;
      uint64_t v19 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v21 = *--v18;
          uint64_t v20 = v21;
          void *v18 = 0;
          if (v21) {
            MEMORY[0x21667D390](v20, 0x1000C8077774924);
          }
        }
        while (v18 != v17);
        uint64_t v19 = v28;
      }
      uint64_t v29 = v17;
      operator delete(v19);
    }
    if (v26 != &v27) {
      free(v26);
    }
  }
  return v12;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::detail::Parser **)a1;
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(*(void *)a1 + 8) + 56));
  uint64_t v4 = *((void *)v2 + 1);
  if (*(_DWORD *)(v4 + 56) != 26)
  {
    v23[0] = 0;
    if (!mlir::detail::Parser::parseIntegerInDimensionList(v2, (unint64_t *)v23)) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(unsigned int *)(v7 + 8);
    if (v10 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v7 + 8);
    }
    *(void *)(*(void *)v7 + 8 * v10) = v9;
    goto LABEL_10;
  }
  uint64_t v5 = (const char *)OCGSize;
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)v23);
  uint64_t v6 = *((void *)v2 + 1);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)v23;
  *(void *)(v6 + 72) = v24;
  if (**(unsigned char **)(a1 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 16), (void *)(v7 + 16), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(v7 + 8);
    }
    *(void *)(*(void *)v7 + 8 * v8) = 0x8000000000000000;
LABEL_10:
    ++*(_DWORD *)(v7 + 8);
    return 1;
  }
  uint64_t v21 = "expected static shape";
  __int16 v22 = 259;
  mlir::detail::Parser::emitError((uint64_t)v2, v5, (uint64_t)&v21, v23);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v31)
  {
    uint64_t v12 = __p;
    if (__p)
    {
      unint64_t v13 = v30;
      uint64_t v14 = __p;
      if (v30 != __p)
      {
        do
          unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      long long v30 = v12;
      operator delete(v14);
    }
    uint64_t v15 = v27;
    if (v27)
    {
      uint64_t v16 = v28;
      uint64_t v17 = v27;
      if (v28 != v27)
      {
        do
        {
          uint64_t v19 = *--v16;
          uint64_t v18 = v19;
          *uint64_t v16 = 0;
          if (v19) {
            MEMORY[0x21667D390](v18, 0x1000C8077774924);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v27;
      }
      __int16 v28 = v15;
      operator delete(v17);
    }
    if (v25 != &v26) {
      free(v25);
    }
  }
  return v11;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefElementTypeInterface]";
      unint64_t v22 = 82;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefElementTypeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[394];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      unint64_t v22 = 81;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[396];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VerifiableTensorEncoding]";
      unint64_t v22 = 80;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::VerifiableTensorEncoding,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[398];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t a1)
{
  unint64_t v2 = *(mlir::detail::Parser **)a1;
  if (*(_DWORD *)(*((void *)v2 + 1) + 56) == 21) {
    uint64_t v3 = mlir::detail::Parser::parseFunctionType(v2);
  }
  else {
    uint64_t v3 = mlir::detail::Parser::parseNonFunctionType(v2);
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(void *)(*(void *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  return v4 != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(mlir::StringAttr *****)a1;
  uint64_t v3 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)a1, 0);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*(void *)v3 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*(void *)v4 + 8);
    uint64_t v6 = *(llvm::APFloatBase ***)(a1 + 8);
    *uint64_t v6 = v4;
    v6[1] = (llvm::APFloatBase *)v5;
    if (**(unsigned char **)(a1 + 24))
    {
      v30[0] = "cannot have affine map for unranked memref type";
      __int16 v31 = 259;
      mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)v30, v32);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      }
      if (v39)
      {
        uint64_t v8 = __p;
        if (__p)
        {
          unint64_t v9 = v38;
          uint64_t v10 = __p;
          if (v38 != __p)
          {
            do
              unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
            while (v9 != v8);
            uint64_t v10 = __p;
          }
          char v38 = v8;
          operator delete(v10);
        }
        int v11 = v35;
        if (!v35) {
          goto LABEL_51;
        }
        int v12 = v36;
        unint64_t v13 = v35;
        if (v36 == v35)
        {
LABEL_50:
          long long v36 = v11;
          operator delete(v13);
LABEL_51:
          if (v33 != &v34) {
            free(v33);
          }
          return v7;
        }
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *int v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
LABEL_49:
        unint64_t v13 = v35;
        goto LABEL_50;
      }
    }
    else
    {
      if (!**(void **)(a1 + 16)) {
        return 1;
      }
      v30[0] = "expected memory space to be last in memref type";
      __int16 v31 = 259;
      mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)v30, v32);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      }
      if (v39)
      {
        __int16 v23 = __p;
        if (__p)
        {
          uint64_t v24 = v38;
          uint64_t v25 = __p;
          if (v38 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            uint64_t v25 = __p;
          }
          char v38 = v23;
          operator delete(v25);
        }
        int v11 = v35;
        if (!v35) {
          goto LABEL_51;
        }
        uint64_t v26 = v36;
        unint64_t v13 = v35;
        if (v36 == v35) {
          goto LABEL_50;
        }
        do
        {
          uint64_t v28 = *--v26;
          uint64_t v27 = v28;
          void *v26 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v26 != v11);
        goto LABEL_49;
      }
    }
  }
  else
  {
    unint64_t v16 = *(llvm::APFloatBase ***)(a1 + 16);
    if (!*v16)
    {
      *unint64_t v16 = v4;
      return 1;
    }
    v30[0] = "multiple memory spaces specified in memref type";
    __int16 v31 = 259;
    mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)v30, v32);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    }
    if (v39)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        unint64_t v18 = v38;
        uint64_t v19 = __p;
        if (v38 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        char v38 = v17;
        operator delete(v19);
      }
      int v11 = v35;
      if (!v35) {
        goto LABEL_51;
      }
      uint64_t v20 = v36;
      unint64_t v13 = v35;
      if (v36 == v35) {
        goto LABEL_50;
      }
      do
      {
        uint64_t v22 = *--v20;
        uint64_t v21 = v22;
        void *v20 = 0;
        if (v22) {
          MEMORY[0x21667D390](v21, 0x1000C8077774924);
        }
      }
      while (v20 != v11);
      goto LABEL_49;
    }
  }
  return v7;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::detail::Parser::emitError(v2, (uint64_t)v3, a2);
}

uint64_t mlir::BytecodeReader::Impl::read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[147];
  unint64_t v6 = a1[148];
  uint64_t v7 = a1[1];
  uint64_t v180 = v5;
  unint64_t v181 = v6;
  uint64_t v182 = v5;
  uint64_t v183 = v7;
  a1[9] = a3;
  a1[10] = a4;
  uint64_t v209 = 4;
  if (v6 > 3)
  {
    uint64_t v182 = v5 + 4;
    goto LABEL_58;
  }
  *(void *)&long long v185 = v6;
  mlir::emitError(v7, (uint64_t)&v188);
  uint64_t v8 = (char *)v188;
  if ((void)v188)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v188 + 8, "attempting to skip ", (char **)&v209, " bytes when only ", (char **)&v185, " remain");
    uint64_t v8 = (char *)v188;
  }
  unint64_t v220 = v8;
  LOBYTE(v221) = 0;
  unsigned __int8 v230 = 0;
  if (v205)
  {
    unint64_t v221 = (const char *)*((void *)&v188 + 1);
    int v9 = v191;
    int v222 = v189;
    uint64_t v10 = v225;
    long long __dst = v225;
    uint64_t v224 = 0x400000000;
    if (!v191)
    {
      int v12 = 1;
      goto LABEL_17;
    }
    int v11 = __src;
    if (__src != &v192)
    {
      long long __dst = __src;
      uint64_t v224 = v191;
      __src = &v192;
      HIDWORD(v191) = 0;
      int v12 = 1;
LABEL_16:
      LODWORD(v191) = 0;
LABEL_17:
      long long v226 = *(_OWORD *)v202;
      memset(v202, 0, sizeof(v202));
      long long v228 = *(_OWORD *)__p;
      unint64_t v227 = v202[2];
      uint64_t v229 = v204;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v204 = 0;
      unsigned __int8 v230 = 1;
      if (v12)
      {
        if (__src != &v192) {
          free(__src);
        }
        unsigned __int8 v205 = 0;
      }
      goto LABEL_21;
    }
    if (v191 < 5)
    {
      uint64_t v13 = v191;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v191, 24);
      uint64_t v13 = v191;
      if (!v191)
      {
LABEL_15:
        LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v9;
        int v12 = v205;
        goto LABEL_16;
      }
      int v11 = __src;
      uint64_t v10 = __dst;
    }
    memcpy(v10, v11, 24 * v13);
    goto LABEL_15;
  }
LABEL_21:
  mlir::InFlightDiagnostic::abandon(&v188);
  if ((void)v188) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v188);
  }
  if (v205)
  {
    uint64_t v14 = __p[0];
    if (__p[0])
    {
      uint64_t v15 = __p[1];
      unint64_t v16 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        unint64_t v16 = __p[0];
      }
      __p[1] = v14;
      operator delete(v16);
    }
    uint64_t v17 = v202[0];
    if (v202[0])
    {
      unint64_t v18 = v202[1];
      uint64_t v19 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          uint64_t v21 = *--v18;
          uint64_t v20 = v21;
          void *v18 = 0;
          if (v21) {
            MEMORY[0x21667D390](v20, 0x1000C8077774924);
          }
        }
        while (v18 != v17);
        uint64_t v19 = v202[0];
      }
      v202[1] = v17;
      operator delete(v19);
    }
    if (__src != &v192) {
      free(__src);
    }
  }
  char v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v220);
  if (v220) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  }
  if (v230)
  {
    __int16 v23 = (void *)v228;
    if ((void)v228)
    {
      uint64_t v24 = (void *)*((void *)&v228 + 1);
      uint64_t v25 = (void *)v228;
      if (*((void *)&v228 + 1) != (void)v228)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = (void *)v228;
      }
      *((void *)&v228 + 1) = v23;
      operator delete(v25);
    }
    uint64_t v26 = (void *)v226;
    if ((void)v226)
    {
      uint64_t v27 = (void *)*((void *)&v226 + 1);
      uint64_t v28 = (void *)v226;
      if (*((void *)&v226 + 1) != (void)v226)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        uint64_t v28 = (void *)v226;
      }
      *((void *)&v226 + 1) = v26;
      operator delete(v28);
    }
    if (__dst != v225) {
      free(__dst);
    }
  }
  if (!v22) {
    goto LABEL_152;
  }
LABEL_58:
  __int16 v31 = (int *)(a1 + 31);
  {
LABEL_152:
    uint64_t v70 = 0;
    goto LABEL_384;
  }
  uint64_t v209 = 6;
  if (*(void *)v31 < 7uLL)
  {
    if (*(void *)v31 <= 1uLL) {
      *((unsigned char *)a1 + 16) = 0;
    }
    goto LABEL_117;
  }
  mlir::emitError(v183, (uint64_t)&v188);
  uint64_t v32 = (char *)v188;
  if ((void)v188)
  {
    mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>((uint64_t)&v188 + 8, "bytecode version ", (char **)a1 + 31, " is newer than the current version ", (char **)&v209);
    uint64_t v32 = (char *)v188;
  }
  unint64_t v220 = v32;
  LOBYTE(v221) = 0;
  unsigned __int8 v230 = 0;
  if (v205)
  {
    unint64_t v221 = (const char *)*((void *)&v188 + 1);
    int v33 = v191;
    int v222 = v189;
    uint64_t v34 = v225;
    long long __dst = v225;
    uint64_t v224 = 0x400000000;
    if (!v191)
    {
      int v36 = 1;
      goto LABEL_76;
    }
    int v35 = __src;
    if (__src != &v192)
    {
      long long __dst = __src;
      uint64_t v224 = v191;
      __src = &v192;
      HIDWORD(v191) = 0;
      int v36 = 1;
LABEL_75:
      LODWORD(v191) = 0;
LABEL_76:
      long long v226 = *(_OWORD *)v202;
      memset(v202, 0, sizeof(v202));
      long long v228 = *(_OWORD *)__p;
      unint64_t v227 = v202[2];
      uint64_t v229 = v204;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v204 = 0;
      unsigned __int8 v230 = 1;
      if (v36)
      {
        if (__src != &v192) {
          free(__src);
        }
        unsigned __int8 v205 = 0;
      }
      goto LABEL_80;
    }
    if (v191 < 5)
    {
      uint64_t v37 = v191;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v191, 24);
      uint64_t v37 = v191;
      if (!v191)
      {
LABEL_74:
        LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v33;
        int v36 = v205;
        goto LABEL_75;
      }
      int v35 = __src;
      uint64_t v34 = __dst;
    }
    memcpy(v34, v35, 24 * v37);
    goto LABEL_74;
  }
LABEL_80:
  mlir::InFlightDiagnostic::abandon(&v188);
  if ((void)v188) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v188);
  }
  if (v205)
  {
    char v38 = __p[0];
    if (__p[0])
    {
      char v39 = __p[1];
      uint64_t v40 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          char v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        uint64_t v40 = __p[0];
      }
      __p[1] = v38;
      operator delete(v40);
    }
    uint64_t v41 = v202[0];
    if (v202[0])
    {
      __int16 v42 = v202[1];
      uint64_t v43 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          uint64_t v45 = *--v42;
          uint64_t v44 = v45;
          *__int16 v42 = 0;
          if (v45) {
            MEMORY[0x21667D390](v44, 0x1000C8077774924);
          }
        }
        while (v42 != v41);
        uint64_t v43 = v202[0];
      }
      v202[1] = v41;
      operator delete(v43);
    }
    if (__src != &v192) {
      free(__src);
    }
  }
  char v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v220);
  if (v220) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  }
  if (v230)
  {
    long long v47 = (void *)v228;
    if ((void)v228)
    {
      uint64_t v48 = (void *)*((void *)&v228 + 1);
      __int16 v49 = (void *)v228;
      if (*((void *)&v228 + 1) != (void)v228)
      {
        do
          uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
        while (v48 != v47);
        __int16 v49 = (void *)v228;
      }
      *((void *)&v228 + 1) = v47;
      operator delete(v49);
    }
    uint64_t v50 = (void *)v226;
    if ((void)v226)
    {
      uint64_t v51 = (void *)*((void *)&v226 + 1);
      __int16 v52 = (void *)v226;
      if (*((void *)&v226 + 1) != (void)v226)
      {
        do
        {
          uint64_t v54 = *--v51;
          uint64_t v53 = v54;
          *uint64_t v51 = 0;
          if (v54) {
            MEMORY[0x21667D390](v53, 0x1000C8077774924);
          }
        }
        while (v51 != v50);
        __int16 v52 = (void *)v226;
      }
      *((void *)&v226 + 1) = v50;
      operator delete(v52);
    }
    if (__dst != v225) {
      free(__dst);
    }
  }
  if (!v46) {
    goto LABEL_152;
  }
LABEL_117:
  v179 = *(mlir::MLIRContext **)*a1;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(v179);
  *(void *)&long long v188 = a1;
  __src = (char *)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,void>::Callbacks
        + 2;
  v178 = (mlir::MLIRContext *)mlir::DiagnosticEngine::registerHandler(DiagEngine, &v188);
  char v58 = (char)__src;
  if ((unint64_t)__src >= 8)
  {
    if ((__src & 4) != 0)
    {
      if ((__src & 2) != 0) {
        uint64_t v59 = (uint64_t *)&v188;
      }
      else {
        uint64_t v59 = (uint64_t *)v188;
      }
      (*(void (**)(uint64_t *, unint64_t, uint64_t))(((unint64_t)__src & 0xFFFFFFFFFFFFFFF8)
                                                                   + 16))(v59, v56, v57);
    }
    if ((v58 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v188, *((void **)&v188 + 1));
    }
  }
  LOBYTE(v188) = 0;
  LOBYTE(v189) = 0;
  LOBYTE(__src) = 0;
  char v192 = 0;
  LOBYTE(v193) = 0;
  char v195 = 0;
  LOBYTE(v196) = 0;
  char v198 = 0;
  LOBYTE(v199) = 0;
  char v200 = 0;
  LOBYTE(v201) = 0;
  LOBYTE(v202[0]) = 0;
  LOBYTE(v202[1]) = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  unsigned __int8 v205 = 0;
  LOBYTE(v206) = 0;
  unsigned __int8 v208 = 0;
  if (v182 != v180 + v181)
  {
    while (1)
    {
      LOBYTE(v184) = 0;
      v177[0] = 0;
      v177[1] = 0;
      __int16 v60 = (char *)&v188 + 24 * v184;
      if (v60[16]) {
        break;
      }
      *(_OWORD *)__int16 v60 = *(_OWORD *)v177;
      v60[16] = 1;
      if (v182 == v180 + v181)
      {
        if (!(_BYTE)v189) {
          goto LABEL_153;
        }
        if (!v192)
        {
          unsigned int v71 = 1;
          goto LABEL_154;
        }
        if (!v195)
        {
          unsigned int v71 = 2;
          goto LABEL_154;
        }
        if (!v198)
        {
          unsigned int v71 = 3;
          goto LABEL_154;
        }
        if (!v200)
        {
          unsigned int v71 = 4;
          goto LABEL_154;
        }
        int v61 = v208;
        if (!v208 && *v31 > 4)
        {
          unsigned int v71 = 8;
          goto LABEL_154;
        }
        uint64_t v62 = a1[1];
        long long v63 = v188;
        long long v185 = v188;
        uint64_t v186 = v188;
        uint64_t v187 = v62;
        v177[0] = 0;
        {
          int v171 = v61;
          unint64_t v64 = v177[0];
          unint64_t v65 = *((unsigned int *)a1 + 136);
          if (v177[0] != v65)
          {
            if (v177[0] >= v65)
            {
              if (v177[0] > *((unsigned int *)a1 + 137))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 67), a1 + 69, v177[0], 16);
                unint64_t v65 = *((unsigned int *)a1 + 136);
              }
              if (v64 != v65) {
                bzero((void *)(a1[67] + 16 * v65), 16 * (v64 - v65));
              }
            }
            LODWORD(v65) = v64;
            *((_DWORD *)a1 + 136) = v64;
            unint64_t v64 = v64;
          }
          uint64_t v172 = *((void *)&v63 + 1);
          if (v65)
          {
            uint64_t v66 = 16 * v64;
            unint64_t v67 = *((void *)&v63 + 1);
            while (1)
            {
              unint64_t v184 = 0;
              BOOL v68 = v67 >= v184;
              v67 -= v184;
              if (!v68) {
                break;
              }
              unint64_t v69 = v184 - 1;
              *(void *)(*((void *)&v63 + 1) + v66 - 16) = v63 + v67;
              *(void *)(*((void *)&v63 + 1) + v66 - 8) = v69;
              v66 -= 16;
              if (!v66) {
                goto LABEL_265;
              }
            }
            mlir::emitError(v187, (uint64_t)&v220);
            uint64_t v124 = v220;
            if (v220)
            {
              LODWORD(v209) = 3;
              v210 = "string size exceeds the available data size";
              uint64_t v211 = 43;
              __int16 v125 = &v209;
              v126 = (char *)__dst;
              if (v224 >= HIDWORD(v224))
              {
                unint64_t v168 = v224 + 1;
                if (__dst <= &v209 && (char *)__dst + 24 * v224 > (char *)&v209)
                {
                  int64_t v170 = (char *)&v209 - (unsigned char *)__dst;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v168, 24);
                  v126 = (char *)__dst;
                  __int16 v125 = (uint64_t *)((char *)__dst + v170);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v168, 24);
                  __int16 v125 = &v209;
                  v126 = (char *)__dst;
                }
              }
              unsigned int v127 = &v126[24 * v224];
              long long v128 = *(_OWORD *)v125;
              *((void *)v127 + 2) = v125[2];
              *(_OWORD *)unsigned int v127 = v128;
              LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v224 + 1;
              uint64_t v124 = v220;
            }
            uint64_t v209 = (uint64_t)v124;
            LOBYTE(v210) = 0;
            char v219 = 0;
            if (v230)
            {
              v210 = v221;
              int v129 = v224;
              LODWORD(v211) = v222;
              v130 = v214;
              unint64_t v212 = v214;
              uint64_t v213 = 0x400000000;
              if (v224)
              {
                v131 = v225;
                if (__dst != v225)
                {
                  unint64_t v212 = __dst;
                  uint64_t v213 = v224;
                  long long __dst = v225;
                  HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
                  int v132 = 1;
                  goto LABEL_333;
                }
                if (v224 < 5)
                {
                  uint64_t v134 = v224;
LABEL_331:
                  memcpy(v130, v131, 24 * v134);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
                  uint64_t v134 = v224;
                  if (v224)
                  {
                    v131 = __dst;
                    v130 = v212;
                    goto LABEL_331;
                  }
                }
                LODWORD(v213) = v129;
                int v132 = v230;
LABEL_333:
                LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
              }
              else
              {
                int v132 = 1;
              }
              long long v215 = v226;
              long long v226 = 0uLL;
              long long v217 = v228;
              unint64_t v216 = v227;
              uint64_t v218 = v229;
              unint64_t v227 = 0;
              long long v228 = 0uLL;
              uint64_t v229 = 0;
              char v219 = 1;
              if (v132)
              {
                if (__dst != v225) {
                  free(__dst);
                }
                unsigned __int8 v230 = 0;
              }
            }
            mlir::InFlightDiagnostic::abandon(&v220);
            if (v220) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
            }
            if (v230)
            {
              v152 = (void *)v228;
              if ((void)v228)
              {
                v153 = (void *)*((void *)&v228 + 1);
                v154 = (void *)v228;
                if (*((void *)&v228 + 1) != (void)v228)
                {
                  do
                    v153 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v153 - 1);
                  while (v153 != v152);
                  v154 = (void *)v228;
                }
                *((void *)&v228 + 1) = v152;
                operator delete(v154);
              }
              v155 = (void *)v226;
              if ((void)v226)
              {
                uint64_t v156 = (void *)*((void *)&v226 + 1);
                uint64_t v157 = (void *)v226;
                if (*((void *)&v226 + 1) != (void)v226)
                {
                  do
                  {
                    uint64_t v159 = *--v156;
                    uint64_t v158 = v159;
                    *uint64_t v156 = 0;
                    if (v159) {
                      MEMORY[0x21667D390](v158, 0x1000C8077774924);
                    }
                  }
                  while (v156 != v155);
                  uint64_t v157 = (void *)v226;
                }
                *((void *)&v226 + 1) = v155;
                operator delete(v157);
              }
              if (__dst != v225) {
                free(__dst);
              }
            }
            char v143 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
            if (v209) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
            }
            if (!v219) {
              goto LABEL_374;
            }
            v160 = (void *)v217;
            if ((void)v217)
            {
              v161 = (void *)*((void *)&v217 + 1);
              v162 = (void *)v217;
              if (*((void *)&v217 + 1) != (void)v217)
              {
                do
                  v161 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v161 - 1);
                while (v161 != v160);
                v162 = (void *)v217;
              }
              *((void *)&v217 + 1) = v160;
              operator delete(v162);
            }
            v147 = (void *)v215;
            if (!(void)v215) {
              goto LABEL_372;
            }
            v163 = (void *)*((void *)&v215 + 1);
            long long v149 = (void *)v215;
            if (*((void *)&v215 + 1) == (void)v215) {
              goto LABEL_371;
            }
            do
            {
              uint64_t v165 = *--v163;
              uint64_t v164 = v165;
              void *v163 = 0;
              if (v165) {
                MEMORY[0x21667D390](v164, 0x1000C8077774924);
              }
            }
            while (v163 != v147);
            goto LABEL_370;
          }
          unint64_t v67 = *((void *)&v63 + 1);
LABEL_265:
          if (v172 - ((void)v185 + *((void *)&v185 + 1)) + v186 == v67)
          {
            int v114 = v171;
            goto LABEL_376;
          }
          mlir::emitError(v187, (uint64_t)&v220);
          int64_t v115 = v220;
          if (v220)
          {
            LODWORD(v209) = 3;
            v210 = "unexpected trailing data between the offsets for strings and their data";
            uint64_t v211 = 71;
            int64_t v116 = &v209;
            unint64_t v117 = (char *)__dst;
            if (v224 >= HIDWORD(v224))
            {
              unint64_t v167 = v224 + 1;
              if (__dst <= &v209 && (char *)__dst + 24 * v224 > (char *)&v209)
              {
                int64_t v169 = (char *)&v209 - (unsigned char *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v167, 24);
                unint64_t v117 = (char *)__dst;
                int64_t v116 = (uint64_t *)((char *)__dst + v169);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v167, 24);
                int64_t v116 = &v209;
                unint64_t v117 = (char *)__dst;
              }
            }
            unint64_t v118 = &v117[24 * v224];
            long long v119 = *(_OWORD *)v116;
            *((void *)v118 + 2) = v116[2];
            *(_OWORD *)unint64_t v118 = v119;
            LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v224 + 1;
            int64_t v115 = v220;
          }
          uint64_t v209 = (uint64_t)v115;
          LOBYTE(v210) = 0;
          char v219 = 0;
          if (v230)
          {
            v210 = v221;
            int v120 = v224;
            LODWORD(v211) = v222;
            uint64_t v121 = v214;
            unint64_t v212 = v214;
            uint64_t v213 = 0x400000000;
            if (v224)
            {
              int v122 = v225;
              if (__dst != v225)
              {
                unint64_t v212 = __dst;
                uint64_t v213 = v224;
                long long __dst = v225;
                HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
                int v123 = 1;
                goto LABEL_293;
              }
              if (v224 < 5)
              {
                uint64_t v133 = v224;
LABEL_291:
                memcpy(v121, v122, 24 * v133);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
                uint64_t v133 = v224;
                if (v224)
                {
                  int v122 = __dst;
                  uint64_t v121 = v212;
                  goto LABEL_291;
                }
              }
              LODWORD(v213) = v120;
              int v123 = v230;
LABEL_293:
              LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
            }
            else
            {
              int v123 = 1;
            }
            long long v215 = v226;
            long long v226 = 0uLL;
            long long v217 = v228;
            unint64_t v216 = v227;
            uint64_t v218 = v229;
            unint64_t v227 = 0;
            long long v228 = 0uLL;
            uint64_t v229 = 0;
            char v219 = 1;
            if (v123)
            {
              if (__dst != v225) {
                free(__dst);
              }
              unsigned __int8 v230 = 0;
            }
          }
          mlir::InFlightDiagnostic::abandon(&v220);
          if (v220) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
          }
          if (v230)
          {
            uint64_t v135 = (void *)v228;
            if ((void)v228)
            {
              v136 = (void *)*((void *)&v228 + 1);
              v137 = (void *)v228;
              if (*((void *)&v228 + 1) != (void)v228)
              {
                do
                  v136 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v136 - 1);
                while (v136 != v135);
                v137 = (void *)v228;
              }
              *((void *)&v228 + 1) = v135;
              operator delete(v137);
            }
            v138 = (void *)v226;
            if ((void)v226)
            {
              v139 = (void *)*((void *)&v226 + 1);
              uint64_t v140 = (void *)v226;
              if (*((void *)&v226 + 1) != (void)v226)
              {
                do
                {
                  uint64_t v142 = *--v139;
                  uint64_t v141 = v142;
                  void *v139 = 0;
                  if (v142) {
                    MEMORY[0x21667D390](v141, 0x1000C8077774924);
                  }
                }
                while (v139 != v138);
                uint64_t v140 = (void *)v226;
              }
              *((void *)&v226 + 1) = v138;
              operator delete(v140);
            }
            if (__dst != v225) {
              free(__dst);
            }
          }
          char v143 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
          if (v209) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
          }
          if (v219)
          {
            v144 = (void *)v217;
            if ((void)v217)
            {
              long long v145 = (void *)*((void *)&v217 + 1);
              v146 = (void *)v217;
              if (*((void *)&v217 + 1) != (void)v217)
              {
                do
                  long long v145 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v145 - 1);
                while (v145 != v144);
                v146 = (void *)v217;
              }
              *((void *)&v217 + 1) = v144;
              operator delete(v146);
            }
            v147 = (void *)v215;
            if ((void)v215)
            {
              v148 = (void *)*((void *)&v215 + 1);
              long long v149 = (void *)v215;
              if (*((void *)&v215 + 1) != (void)v215)
              {
                do
                {
                  uint64_t v151 = *--v148;
                  uint64_t v150 = v151;
                  void *v148 = 0;
                  if (v151) {
                    MEMORY[0x21667D390](v150, 0x1000C8077774924);
                  }
                }
                while (v148 != v147);
LABEL_370:
                long long v149 = (void *)v215;
              }
LABEL_371:
              *((void *)&v215 + 1) = v147;
              operator delete(v149);
            }
LABEL_372:
            if (v212 != v214) {
              free(v212);
            }
          }
LABEL_374:
          if (v143)
          {
            int v114 = v208;
LABEL_376:
            if (!v114
            {
              if (mlir::BytecodeReader::Impl::parseDialectSection((unint64_t)a1, (uint64_t)__src, v191))
              {
                long long v175 = v201;
                long long v176 = v202[0];
                long long v173 = *(_OWORD *)&v202[1];
                v174 = __p[0];
                if (mlir::BytecodeReader::Impl::parseResourceSection(a1, (uint64_t)&v180, &v175, &v173))
                {
                }
              }
            }
          }
        }
LABEL_382:
        uint64_t v70 = 0;
        goto LABEL_383;
      }
    }
    toString((uint64_t)&v185, v184);
    mlir::emitError(v183, (uint64_t)&v220);
    uint64_t v77 = v220;
    if (v220)
    {
      mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v221, "duplicate top-level section: ", (void **)&v185);
      uint64_t v77 = v220;
    }
    uint64_t v209 = (uint64_t)v77;
    LOBYTE(v210) = 0;
    char v219 = 0;
    if (!v230)
    {
LABEL_225:
      mlir::InFlightDiagnostic::abandon(&v220);
      if (v220) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
      }
      if (v230)
      {
        unint64_t v100 = (void *)v228;
        if ((void)v228)
        {
          unint64_t v101 = (void *)*((void *)&v228 + 1);
          BOOL v102 = (void *)v228;
          if (*((void *)&v228 + 1) != (void)v228)
          {
            do
              unint64_t v101 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v101 - 1);
            while (v101 != v100);
            BOOL v102 = (void *)v228;
          }
          *((void *)&v228 + 1) = v100;
          operator delete(v102);
        }
        int64_t v103 = (void *)v226;
        if ((void)v226)
        {
          int64_t v104 = (void *)*((void *)&v226 + 1);
          int64_t v105 = (void *)v226;
          if (*((void *)&v226 + 1) != (void)v226)
          {
            do
            {
              uint64_t v107 = *--v104;
              uint64_t v106 = v107;
              void *v104 = 0;
              if (v107) {
                MEMORY[0x21667D390](v106, 0x1000C8077774924);
              }
            }
            while (v104 != v103);
            int64_t v105 = (void *)v226;
          }
          *((void *)&v226 + 1) = v103;
          operator delete(v105);
        }
        if (__dst != v225) {
          free(__dst);
        }
      }
      uint64_t v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
      if (v209) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
      }
      if (v219)
      {
        unint64_t v108 = (void *)v217;
        if ((void)v217)
        {
          unint64_t v109 = (void *)*((void *)&v217 + 1);
          unint64_t v110 = (void *)v217;
          if (*((void *)&v217 + 1) != (void)v217)
          {
            do
              unint64_t v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
            while (v109 != v108);
            unint64_t v110 = (void *)v217;
          }
          *((void *)&v217 + 1) = v108;
          operator delete(v110);
        }
        unint64_t v94 = (void *)v215;
        if (!(void)v215) {
          goto LABEL_259;
        }
        unint64_t v111 = (void *)*((void *)&v215 + 1);
        uint64_t v96 = (void *)v215;
        if (*((void *)&v215 + 1) == (void)v215) {
          goto LABEL_258;
        }
        do
        {
          uint64_t v113 = *--v111;
          uint64_t v112 = v113;
          void *v111 = 0;
          if (v113) {
            MEMORY[0x21667D390](v112, 0x1000C8077774924);
          }
        }
        while (v111 != v94);
        goto LABEL_257;
      }
      goto LABEL_261;
    }
    v210 = v221;
    int v78 = v224;
    LODWORD(v211) = v222;
    unint64_t v79 = v214;
    unint64_t v212 = v214;
    uint64_t v213 = 0x400000000;
    if (!v224)
    {
      int v81 = 1;
      goto LABEL_221;
    }
    unint64_t v80 = __dst;
    if (__dst != v225)
    {
      unint64_t v212 = __dst;
      uint64_t v213 = v224;
      long long __dst = v225;
      HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      int v81 = 1;
LABEL_220:
      LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
LABEL_221:
      long long v215 = v226;
      long long v226 = 0uLL;
      long long v217 = v228;
      unint64_t v216 = v227;
      uint64_t v218 = v229;
      unint64_t v227 = 0;
      long long v228 = 0uLL;
      uint64_t v229 = 0;
      char v219 = 1;
      if (v81)
      {
        if (__dst != v225) {
          free(__dst);
        }
        unsigned __int8 v230 = 0;
      }
      goto LABEL_225;
    }
    if (v224 < 5)
    {
      uint64_t v99 = v224;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
      uint64_t v99 = v224;
      if (!v224)
      {
LABEL_219:
        LODWORD(v213) = v78;
        int v81 = v230;
        goto LABEL_220;
      }
      unint64_t v80 = __dst;
      unint64_t v79 = v212;
    }
    memcpy(v79, v80, 24 * v99);
    goto LABEL_219;
  }
LABEL_153:
  unsigned int v71 = 0;
LABEL_154:
  toString((uint64_t)&v185, v71);
  mlir::emitError(v183, (uint64_t)&v220);
  char v72 = v220;
  if (v220)
  {
    mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v221, "missing data for top-level section: ", (void **)&v185);
    char v72 = v220;
  }
  uint64_t v209 = (uint64_t)v72;
  LOBYTE(v210) = 0;
  char v219 = 0;
  if (v230)
  {
    v210 = v221;
    int v73 = v224;
    LODWORD(v211) = v222;
    char v74 = v214;
    unint64_t v212 = v214;
    uint64_t v213 = 0x400000000;
    if (!v224)
    {
      int v76 = 1;
      goto LABEL_176;
    }
    uint64_t v75 = __dst;
    if (__dst != v225)
    {
      unint64_t v212 = __dst;
      uint64_t v213 = v224;
      long long __dst = v225;
      HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      int v76 = 1;
LABEL_175:
      LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
LABEL_176:
      long long v215 = v226;
      long long v226 = 0uLL;
      long long v217 = v228;
      unint64_t v216 = v227;
      uint64_t v218 = v229;
      unint64_t v227 = 0;
      long long v228 = 0uLL;
      uint64_t v229 = 0;
      char v219 = 1;
      if (v76)
      {
        if (__dst != v225) {
          free(__dst);
        }
        unsigned __int8 v230 = 0;
      }
      goto LABEL_180;
    }
    if (v224 < 5)
    {
      uint64_t v82 = v224;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
      uint64_t v82 = v224;
      if (!v224)
      {
LABEL_174:
        LODWORD(v213) = v73;
        int v76 = v230;
        goto LABEL_175;
      }
      uint64_t v75 = __dst;
      char v74 = v212;
    }
    memcpy(v74, v75, 24 * v82);
    goto LABEL_174;
  }
LABEL_180:
  mlir::InFlightDiagnostic::abandon(&v220);
  if (v220) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  }
  if (v230)
  {
    uint64_t v83 = (void *)v228;
    if ((void)v228)
    {
      int64_t v84 = (void *)*((void *)&v228 + 1);
      int64_t v85 = (void *)v228;
      if (*((void *)&v228 + 1) != (void)v228)
      {
        do
          int64_t v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
        while (v84 != v83);
        int64_t v85 = (void *)v228;
      }
      *((void *)&v228 + 1) = v83;
      operator delete(v85);
    }
    long long v86 = (void *)v226;
    if ((void)v226)
    {
      uint64_t v87 = (void *)*((void *)&v226 + 1);
      int v88 = (void *)v226;
      if (*((void *)&v226 + 1) != (void)v226)
      {
        do
        {
          uint64_t v90 = *--v87;
          uint64_t v89 = v90;
          void *v87 = 0;
          if (v90) {
            MEMORY[0x21667D390](v89, 0x1000C8077774924);
          }
        }
        while (v87 != v86);
        int v88 = (void *)v226;
      }
      *((void *)&v226 + 1) = v86;
      operator delete(v88);
    }
    if (__dst != v225) {
      free(__dst);
    }
  }
  uint64_t v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
  if (v209) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
  }
  if (v219)
  {
    long long v91 = (void *)v217;
    if ((void)v217)
    {
      uint64_t v92 = (void *)*((void *)&v217 + 1);
      unint64_t v93 = (void *)v217;
      if (*((void *)&v217 + 1) != (void)v217)
      {
        do
          uint64_t v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
        while (v92 != v91);
        unint64_t v93 = (void *)v217;
      }
      *((void *)&v217 + 1) = v91;
      operator delete(v93);
    }
    unint64_t v94 = (void *)v215;
    if (!(void)v215) {
      goto LABEL_259;
    }
    BOOL v95 = (void *)*((void *)&v215 + 1);
    uint64_t v96 = (void *)v215;
    if (*((void *)&v215 + 1) == (void)v215)
    {
LABEL_258:
      *((void *)&v215 + 1) = v94;
      operator delete(v96);
LABEL_259:
      if (v212 != v214) {
        free(v212);
      }
      goto LABEL_261;
    }
    do
    {
      uint64_t v98 = *--v95;
      uint64_t v97 = v98;
      void *v95 = 0;
      if (v98) {
        MEMORY[0x21667D390](v97, 0x1000C8077774924);
      }
    }
    while (v95 != v94);
LABEL_257:
    uint64_t v96 = (void *)v215;
    goto LABEL_258;
  }
LABEL_261:
  if (SHIBYTE(v186) < 0) {
    operator delete((void *)v185);
  }
LABEL_383:
  mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(&v178);
LABEL_384:
  a1[9] = 0;
  return v70;
}

uint64_t anonymous namespace'::EncodingReader::parseNullTerminatedString(_anonymous_namespace_::EncodingReader *this, llvm::StringRef *a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  __int16 v4 = (void *)*((void *)this + 2);
  uint64_t v5 = memchr(v4, 0, *(void *)this + *((void *)this + 1) - (void)v4);
  if (v5)
  {
    *(void *)a2 = v4;
    *((void *)a2 + 1) = v5 - (unsigned char *)v4;
    *((void *)this + 2) = v5 + 1;
    return 1;
  }
  mlir::emitError(*((void *)this + 3), (uint64_t)v47);
  uint64_t v8 = v47[0];
  if (v47[0])
  {
    LODWORD(v36) = 3;
    uint64_t v37 = "malformed null-terminated string, no null character found";
    uint64_t v38 = 57;
    int v9 = (char *)&v36;
    uint64_t v10 = (char *)v49;
    if (v50 >= HIDWORD(v50))
    {
      unint64_t v34 = v50 + 1;
      if (v49 <= &v36 && (char *)v49 + 24 * v50 > (char *)&v36)
      {
        int64_t v35 = (char *)&v36 - (unsigned char *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        uint64_t v10 = (char *)v49;
        int v9 = (char *)v49 + v35;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        int v9 = (char *)&v36;
        uint64_t v10 = (char *)v49;
      }
    }
    int v11 = &v10[24 * v50];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)int v11 = v12;
    LODWORD(v50) = v50 + 1;
    uint64_t v8 = v47[0];
  }
  uint64_t v36 = v8;
  LOBYTE(v37) = 0;
  char v46 = 0;
  if (v56)
  {
    uint64_t v37 = (const char *)v47[1];
    int v13 = v50;
    LODWORD(v38) = v48;
    uint64_t v14 = v41;
    long long __dst = v41;
    uint64_t v40 = *(void *)"";
    if (!v50)
    {
      int v16 = 1;
      goto LABEL_19;
    }
    uint64_t v15 = v51;
    if (v49 != v51)
    {
      long long __dst = v49;
      uint64_t v40 = v50;
      __int16 v49 = v51;
      HIDWORD(v50) = 0;
      int v16 = 1;
LABEL_18:
      LODWORD(v50) = 0;
LABEL_19:
      *(_OWORD *)__int16 v42 = v52;
      uint64_t v43 = v53;
      long long v52 = 0uLL;
      *(_OWORD *)uint64_t v44 = __p;
      uint64_t v45 = v55;
      uint64_t v53 = 0;
      long long __p = 0uLL;
      uint64_t v55 = 0;
      char v46 = 1;
      if (v16)
      {
        if (v49 != v51) {
          free(v49);
        }
        unsigned __int8 v56 = 0;
      }
      goto LABEL_23;
    }
    if (v50 < 5)
    {
      uint64_t v17 = v50;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v41, v50, 24);
      uint64_t v17 = v50;
      if (!v50)
      {
LABEL_17:
        LODWORD(v40) = v13;
        int v16 = v56;
        goto LABEL_18;
      }
      uint64_t v15 = v49;
      uint64_t v14 = __dst;
    }
    memcpy(v14, v15, 24 * v17);
    goto LABEL_17;
  }
LABEL_23:
  mlir::InFlightDiagnostic::abandon(v47);
  if (v47[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  }
  if (v56)
  {
    unint64_t v18 = (void *)__p;
    if ((void)__p)
    {
      uint64_t v19 = (void *)*((void *)&__p + 1);
      uint64_t v20 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = (void *)__p;
      }
      *((void *)&__p + 1) = v18;
      operator delete(v20);
    }
    uint64_t v21 = (void *)v52;
    if ((void)v52)
    {
      char v22 = (void *)*((void *)&v52 + 1);
      __int16 v23 = (void *)v52;
      if (*((void *)&v52 + 1) != (void)v52)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        __int16 v23 = (void *)v52;
      }
      *((void *)&v52 + 1) = v21;
      operator delete(v23);
    }
    if (v49 != v51) {
      free(v49);
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  if (v46)
  {
    uint64_t v26 = v44[0];
    if (v44[0])
    {
      uint64_t v27 = v44[1];
      uint64_t v28 = v44[0];
      if (v44[1] != v44[0])
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = v44[0];
      }
      v44[1] = v26;
      operator delete(v28);
    }
    uint64_t v29 = v42[0];
    if (v42[0])
    {
      uint64_t v30 = v42[1];
      __int16 v31 = v42[0];
      if (v42[1] != v42[0])
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        __int16 v31 = v42[0];
      }
      v42[1] = v29;
      operator delete(v31);
    }
    if (__dst != v41) {
      free(__dst);
    }
  }
  return v6;
}

uint64_t anonymous namespace'::EncodingReader::parseSection(_anonymous_namespace_::EncodingReader *a1, unsigned char *a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  char v36 = 0;
    return 0;
  unint64_t v35 = 0;
    return 0;
  char v6 = v36;
  unsigned int v7 = v36 & 0x7F;
  *a2 = v36 & 0x7F;
  if (v7 >= 9)
  {
    unsigned int v34 = v7;
    mlir::emitError(*((void *)a1 + 3), (uint64_t)v48);
    uint64_t v8 = *(void *)v48;
    if (*(void *)v48)
    {
      mlir::Diagnostic::append<char const(&)[21],unsigned int>((uint64_t)&v49, "invalid section ID: ", &v34);
      uint64_t v8 = *(void *)v48;
    }
    uint64_t v37 = v8;
    LOBYTE(v38) = 0;
    char v47 = 0;
    if (!v58) {
      goto LABEL_30;
    }
    uint64_t v38 = v49;
    int v9 = v52;
    int v39 = v50;
    uint64_t v10 = v42;
    long long __dst = v42;
    uint64_t v41 = *(void *)"";
    if (!v52)
    {
      int v12 = 1;
      goto LABEL_26;
    }
    int v11 = v51;
    if (v51 != v53)
    {
      long long __dst = v51;
      uint64_t v41 = v52;
      uint64_t v51 = v53;
      HIDWORD(v52) = 0;
      int v12 = 1;
LABEL_25:
      LODWORD(v52) = 0;
LABEL_26:
      long long v43 = v54;
      uint64_t v44 = v55;
      long long v54 = 0uLL;
      long long v45 = v56;
      uint64_t v46 = v57;
      uint64_t v55 = 0;
      long long v56 = 0uLL;
      uint64_t v57 = 0;
      char v47 = 1;
      if (v12)
      {
        if (v51 != v53) {
          free(v51);
        }
        unsigned __int8 v58 = 0;
      }
LABEL_30:
      mlir::InFlightDiagnostic::abandon(v48);
      if (*(void *)v48) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
      }
      if (v58)
      {
        unint64_t v18 = (void *)v56;
        if ((void)v56)
        {
          uint64_t v19 = (void *)*((void *)&v56 + 1);
          uint64_t v20 = (void *)v56;
          if (*((void *)&v56 + 1) != (void)v56)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = (void *)v56;
          }
          *((void *)&v56 + 1) = v18;
          operator delete(v20);
        }
        uint64_t v21 = (void *)v54;
        if ((void)v54)
        {
          char v22 = (void *)*((void *)&v54 + 1);
          __int16 v23 = (void *)v54;
          if (*((void *)&v54 + 1) != (void)v54)
          {
            do
            {
              uint64_t v25 = *--v22;
              uint64_t v24 = v25;
              void *v22 = 0;
              if (v25) {
                MEMORY[0x21667D390](v24, 0x1000C8077774924);
              }
            }
            while (v22 != v21);
            __int16 v23 = (void *)v54;
          }
          *((void *)&v54 + 1) = v21;
          operator delete(v23);
        }
        if (v51 != v53) {
          free(v51);
        }
      }
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
      if (v37) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
      if (v47)
      {
        uint64_t v26 = (void *)v45;
        if ((void)v45)
        {
          uint64_t v27 = (void *)*((void *)&v45 + 1);
          uint64_t v28 = (void *)v45;
          if (*((void *)&v45 + 1) != (void)v45)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            uint64_t v28 = (void *)v45;
          }
          *((void *)&v45 + 1) = v26;
          operator delete(v28);
        }
        uint64_t v29 = (void *)v43;
        if ((void)v43)
        {
          uint64_t v30 = (void *)*((void *)&v43 + 1);
          __int16 v31 = (void *)v43;
          if (*((void *)&v43 + 1) != (void)v43)
          {
            do
            {
              uint64_t v33 = *--v30;
              uint64_t v32 = v33;
              void *v30 = 0;
              if (v33) {
                MEMORY[0x21667D390](v32, 0x1000C8077774924);
              }
            }
            while (v30 != v29);
            __int16 v31 = (void *)v43;
          }
          *((void *)&v43 + 1) = v29;
          operator delete(v31);
        }
        if (__dst != v42) {
          free(__dst);
        }
      }
      return v16;
    }
    if (v52 < 5)
    {
      uint64_t v17 = v52;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v42, v52, 24);
      uint64_t v17 = v52;
      if (!v52)
      {
LABEL_24:
        LODWORD(v41) = v9;
        int v12 = v58;
        goto LABEL_25;
      }
      int v11 = v51;
      uint64_t v10 = __dst;
    }
    memcpy(v10, v11, 24 * v17);
    goto LABEL_24;
  }
  if (v6 < 0)
  {
    *(void *)int v48 = 0;
    {
      return 0;
    }
  }
  int v13 = (char *)v35;
}

void toString(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 0u:
      *(unsigned char *)(a1 + 23) = 10;
      strcpy((char *)a1, "String (0)");
      break;
    case 1u:
      *(unsigned char *)(a1 + 23) = 11;
      strcpy((char *)a1, "Dialect (1)");
      break;
    case 2u:
      *(unsigned char *)(a1 + 23) = 12;
      strcpy((char *)a1, "AttrType (2)");
      break;
    case 3u:
      *(unsigned char *)(a1 + 23) = 18;
      strcpy((char *)a1, "AttrTypeOffset (3)");
      break;
    case 4u:
      *(unsigned char *)(a1 + 23) = 6;
      strcpy((char *)a1, "IR (4)");
      break;
    case 5u:
      *(unsigned char *)(a1 + 23) = 12;
      strcpy((char *)a1, "Resource (5)");
      break;
    case 6u:
      *(unsigned char *)(a1 + 23) = 18;
      strcpy((char *)a1, "ResourceOffset (6)");
      break;
    case 7u:
      *(unsigned char *)(a1 + 23) = 19;
      strcpy((char *)a1, "DialectVersions (7)");
      break;
    case 8u:
      *(unsigned char *)(a1 + 23) = 14;
      strcpy((char *)a1, "Properties (8)");
      break;
    default:
      v2[0] = "Unknown (";
      v2[2] = a2;
      __int16 v3 = 2307;
      v4[0] = v2;
      v4[2] = ")";
      __int16 v5 = 770;
      llvm::Twine::str((llvm::Twine *)v4, (std::string *)a1);
      break;
  }
}

uint64_t anonymous namespace'::PropertiesSectionReader::initialize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  unint64_t v34 = 0;
  {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  uint64_t v33 = a2;
  unint64_t v8 = v34;
  if (v34 > *((unsigned int *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v34, 8);
    goto LABEL_7;
  }
  if (v34)
  {
    while (1)
    {
LABEL_7:
      uint64_t v9 = a1[1];
      uint64_t v10 = v30;
      uint64_t v11 = v31;
      uint64_t v12 = v32;
      unint64_t v13 = *((unsigned int *)a1 + 6);
      if (v13 >= *((unsigned int *)a1 + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v13 + 1, 8);
        unint64_t v13 = *((unsigned int *)a1 + 6);
      }
      *(void *)(a1[2] + 8 * v13) = v9 - (v10 + v11) + v12;
      ++*((_DWORD *)a1 + 6);
      v39[0] = 0;
      {
        return 0;
      }
      if (!--v8)
      {
        if (v32 == v30 + v31) {
          return 1;
        }
        goto LABEL_15;
      }
    }
  }
  if (v6 == v6 + v7) {
    return 1;
  }
LABEL_15:
  mlir::emitError(v33, (uint64_t)v40);
  if (v40[0])
  {
    LODWORD(v39[0]) = 3;
    v39[1] = (unint64_t)"Broken properties section: didn't exhaust the offsets table";
    v39[2] = 59;
    int8x8_t v15 = v39;
    uint64_t v16 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v28 = v42 + 1;
      if (v41 <= v39 && (char *)v41 + 24 * v42 > (char *)v39)
      {
        int64_t v29 = (char *)v39 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        uint64_t v16 = (char *)v41;
        int8x8_t v15 = (unint64_t *)((char *)v41 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        int8x8_t v15 = v39;
        uint64_t v16 = (char *)v41;
      }
    }
    uint64_t v17 = &v16[24 * v42];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)uint64_t v17 = v18;
    ++v42;
  }
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      uint64_t v20 = v48;
      uint64_t v21 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      int v48 = v19;
      operator delete(v21);
    }
    char v22 = v45;
    if (v45)
    {
      __int16 v23 = v46;
      uint64_t v24 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *__int16 v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v45;
      }
      uint64_t v46 = v22;
      operator delete(v24);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v14;
}

uint64_t mlir::BytecodeReader::Impl::parseDialectSection(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v46[25] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a2;
  uint64_t v44 = v4;
  unint64_t v40 = 0;
  __int16 v5 = (char **)(a1 + 272);
  unint64_t v6 = v40;
  unint64_t v7 = *(unsigned int *)(a1 + 280);
  if (v40 != v7)
  {
    if (v40 < v7)
    {
      uint64_t v8 = 8 * v7;
      unint64_t v9 = 8 * v40 - v8;
      uint64_t v10 = (uint64_t *)&(*v5)[v8 - 8];
      do
      {
        uint64_t v11 = *v10;
        *uint64_t v10 = 0;
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 56);
          *(void *)(v11 + 56) = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          MEMORY[0x21667D3C0](v11, 0x1072C4009F0BF78);
        }
        --v10;
        v9 += 8;
      }
      while (v9);
      goto LABEL_34;
    }
    if (v40 <= *(unsigned int *)(a1 + 284))
    {
      unint64_t v13 = *v5;
      unint64_t v20 = v40 - v7;
      if (v40 == v7) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    v39[0] = 0;
    unint64_t v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 272, (void *)(a1 + 288), v40, 8, v39);
    uint64_t v14 = *(char **)(a1 + 272);
    uint64_t v15 = *(unsigned int *)(a1 + 280);
    if (!v15)
    {
LABEL_30:
      int v33 = v39[0];
      if (v14 != (char *)(a1 + 288)) {
        free(v14);
      }
      *(void *)(a1 + 272) = v13;
      *(_DWORD *)(a1 + 284) = v33;
      unint64_t v7 = *(unsigned int *)(a1 + 280);
      unint64_t v20 = v6 - v7;
      if (v6 == v7) {
        goto LABEL_34;
      }
LABEL_33:
      bzero(&v13[8 * v7], 8 * v20);
LABEL_34:
      *(_DWORD *)(a1 + 280) = v6;
      goto LABEL_35;
    }
    unint64_t v16 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v17 = 8 * v15;
    if (v16 >= 0xB)
    {
      if (v14 >= &v13[v17] || (long long v18 = v13, v19 = *(char **)(a1 + 272), v13 >= &v14[v17]))
      {
        unint64_t v21 = v16 + 1;
        uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        long long v18 = &v13[v22];
        uint64_t v19 = &v14[v22];
        __int16 v23 = (long long *)(v14 + 16);
        uint64_t v24 = v13 + 16;
        uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *(v23 - 1);
          long long v27 = *v23;
          *(v23 - 1) = 0uLL;
          *__int16 v23 = 0uLL;
          *(v24 - 1) = v26;
          *uint64_t v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          uint64_t v30 = (uint64_t)(*v5 - 8);
          do
          {
            uint64_t v31 = *(void *)(v30 + v17);
            *(void *)(v30 + v17) = 0;
            if (v31)
            {
              uint64_t v32 = *(void *)(v31 + 56);
              *(void *)(v31 + 56) = 0;
              if (v32) {
                (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
              }
              MEMORY[0x21667D3C0](v31, 0x1072C4009F0BF78);
            }
            v17 -= 8;
          }
          while (v17);
          uint64_t v14 = *v5;
          goto LABEL_30;
        }
      }
    }
    else
    {
      long long v18 = v13;
      uint64_t v19 = *(char **)(a1 + 272);
    }
    unint64_t v28 = &v14[8 * v15];
    do
    {
      uint64_t v29 = *(void *)v19;
      *(void *)uint64_t v19 = 0;
      v19 += 8;
      *(void *)long long v18 = v29;
      v18 += 8;
    }
    while (v19 != v28);
    goto LABEL_23;
  }
LABEL_35:
  if (v6) {
    operator new();
  }
  v38[0] = a1;
  v38[1] = (unint64_t)&v41;
  if (*(void *)(a1 + 248) >= 4uLL)
  {
    v39[0] = 0;
    if (v39[0] > *(unsigned int *)(a1 + 372)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v39[0], 48);
    }
  }
  if (v43 == v41 + v42) {
    return 1;
  }
  while (1)
  {
    unint64_t v34 = *(unsigned int *)(a1 + 280);
    v39[0] = *(void *)(a1 + 272);
    v39[1] = v34;
    v46[0] = 0;
    unint64_t v45 = 0;
    unint64_t v35 = v45;
    if (v45)
    {
      uint64_t v36 = (uint64_t *)v46[0];
      {
        if (!--v35) {
          goto LABEL_43;
        }
      }
      return 0;
    }
LABEL_43:
    if (v43 == v41 + v42) {
      return 1;
    }
  }
}

uint64_t mlir::BytecodeReader::Impl::parseResourceSection(uint64_t *a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v181 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a3 + 16) != 0) == (*((unsigned char *)a4 + 16) != 0))
  {
    if (*((unsigned char *)a3 + 16))
    {
      v142[0] = &unk_26C356670;
      v142[1] = a1 + 11;
      uint64_t v15 = a1 + 53;
      v142[2] = a1 + 67;
      v142[3] = a1 + 53;
      v142[4] = a1 + 42;
      v142[5] = a2;
      v142[6] = a1 + 31;
      uint64_t v17 = *a1;
      uint64_t v16 = a1[1];
      uint64_t v18 = a1[34];
      uint64_t v141 = a1[151];
      v155[1] = *((unsigned int *)a1 + 70);
      uint64_t v156 = v16;
      uint64_t v154 = v16;
      v155[0] = v18;
      long long v152 = *a3;
      uint64_t v153 = v152;
      long long v149 = *a4;
      uint64_t v150 = v149;
      uint64_t v151 = v16;
      unint64_t v148 = 0;
      if (v148)
      {
        unint64_t v19 = 0;
        unint64_t v20 = (uint64_t *)(v17 + 16);
        uint64_t v140 = a1 + 61;
        do
        {
          long long v166 = 0uLL;
          *(void *)&long long v171 = 0;
          {
            return 0;
          }
          long long v21 = v166;
          long long v171 = v166;
          *(void *)&long long v157 = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v20, (uint64_t)&v171, &v157)|| (void)v157 == *(void *)(v17 + 16) + 24 * *(unsigned int *)(v17 + 32))
          {
            uint64_t v24 = *(void *)(v17 + 40);
            if (v24)
            {
              uint64_t ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v24, (const void *)v171, *((size_t *)&v171 + 1));
              int v23 = 0;
              goto LABEL_55;
            }
          }
          else
          {
            uint64_t ParserFor = *(void *)(v157 + 16);
            if (ParserFor)
            {
              int v23 = 0;
              goto LABEL_55;
            }
          }
          mlir::emitWarning(v156, (uint64_t)&v171);
          if ((void)v171)
          {
            LODWORD(v157) = 3;
            *((void *)&v157 + 1) = "ignoring unknown external resources for '";
            uint64_t v158 = 41;
            uint64_t v25 = (char *)v172;
            if (v173 >= v174)
            {
              unint64_t v61 = v173 + 1;
              if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
              {
                int64_t v63 = (char *)&v157 - (unsigned char *)v172;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v61, 24);
                uint64_t v25 = (char *)v172;
                long long v26 = (char *)v172 + v63;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v61, 24);
                long long v26 = (char *)&v157;
                uint64_t v25 = (char *)v172;
              }
            }
            else
            {
              long long v26 = (char *)&v157;
            }
            long long v27 = &v25[24 * v173];
            long long v28 = *(_OWORD *)v26;
            *((void *)v27 + 2) = *((void *)v26 + 2);
            *(_OWORD *)long long v27 = v28;
            ++v173;
            if ((void)v171)
            {
              LOWORD(v160) = 261;
              long long v157 = v21;
              mlir::Diagnostic::operator<<((uint64_t)&v171 + 8, (void ***)&v157);
              if ((void)v171)
              {
                LODWORD(v157) = 3;
                *((void *)&v157 + 1) = "'";
                uint64_t v158 = 1;
                uint64_t v29 = (char *)v172;
                if (v173 >= v174)
                {
                  unint64_t v62 = v173 + 1;
                  if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                  {
                    int64_t v64 = (char *)&v157 - (unsigned char *)v172;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v62, 24);
                    uint64_t v29 = (char *)v172;
                    uint64_t v30 = (char *)v172 + v64;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v62, 24);
                    uint64_t v30 = (char *)&v157;
                    uint64_t v29 = (char *)v172;
                  }
                }
                else
                {
                  uint64_t v30 = (char *)&v157;
                }
                uint64_t v31 = &v29[24 * v173];
                long long v32 = *(_OWORD *)v30;
                *((void *)v31 + 2) = *((void *)v30 + 2);
                *(_OWORD *)uint64_t v31 = v32;
                ++v173;
                if ((void)v171) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
                }
              }
            }
          }
          if (v180)
          {
            int v33 = __p;
            if (__p)
            {
              unint64_t v34 = v179;
              unint64_t v35 = __p;
              if (v179 != __p)
              {
                do
                  unint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
                while (v34 != v33);
                unint64_t v35 = __p;
              }
              v179 = v33;
              operator delete(v35);
            }
            uint64_t v36 = v176;
            if (v176)
            {
              uint64_t v37 = v177;
              uint64_t v38 = v176;
              if (v177 != v176)
              {
                do
                {
                  uint64_t v40 = *--v37;
                  uint64_t v39 = v40;
                  void *v37 = 0;
                  if (v40) {
                    MEMORY[0x21667D390](v39, 0x1000C8077774924);
                  }
                }
                while (v37 != v36);
                uint64_t v38 = v176;
              }
              uint64_t v177 = v36;
              operator delete(v38);
            }
            if (v172 != v175) {
              free(v172);
            }
          }
          uint64_t ParserFor = 0;
          int v23 = 1;
LABEL_55:
          uint64_t v41 = v156;
          unint64_t v170 = 0;
          uint64_t v42 = v20;
          uint64_t v43 = v15;
          unint64_t v44 = v170;
          if (v170)
          {
            do
            {
              long long v143 = 0uLL;
              LODWORD(v147) = 0;
              unint64_t v167 = 0;
              long long v169 = 0uLL;
              *(void *)&long long v171 = 0;
              {
                return 0;
              }
              if (!v23)
              {
                long long v163 = v169;
                uint64_t v164 = v169;
                uint64_t v165 = v41;
                int Key = llvm::StringMapImpl::FindKey(v140, (int8x16_t *)v143, *((const unsigned __int8 **)&v143 + 1));
                if (Key == -1 || Key == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  uint64_t v46 = 0;
                  char v47 = &byte_211F4AA5D;
                }
                else
                {
                  uint64_t v48 = *(void *)(*v140 + 8 * Key);
                  uint64_t v50 = *(char **)(v48 + 8);
                  uint64_t v49 = v48 + 8;
                  char v47 = v50;
                  int v51 = *(char *)(v49 + 23);
                  if (v51 >= 0) {
                    char v47 = (char *)v49;
                  }
                  uint64_t v46 = *(void *)(v49 + 8);
                  if (v51 >= 0) {
                    uint64_t v46 = v51;
                  }
                }
                *(void *)&long long v143 = v47;
                *((void *)&v143 + 1) = v46;
                *(void *)&long long v157 = &unk_26C3578E0;
                *((void *)&v157 + 1) = v47;
                uint64_t v158 = v46;
                int v159 = (int)v147;
                v160 = &v163;
                v161 = a1 + 67;
                uint64_t v162 = v141;
                if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)ParserFor + 16))(ParserFor, &v157))
                {
LABEL_173:
                  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v157);
                  return 0;
                }
                if (v164 != (void)v163 + *((void *)&v163 + 1))
                {
                  char v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
                  if ((void)v171) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
                  }
                  uint64_t v15 = v43;
                  if (v180)
                  {
                    uint64_t v53 = __p;
                    unint64_t v20 = v42;
                    if (__p)
                    {
                      long long v54 = v179;
                      uint64_t v55 = __p;
                      if (v179 != __p)
                      {
                        do
                          long long v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                        while (v54 != v53);
                        uint64_t v55 = __p;
                      }
                      v179 = v53;
                      operator delete(v55);
                    }
                    long long v56 = v176;
                    if (v176)
                    {
                      uint64_t v57 = v177;
                      unsigned __int8 v58 = v176;
                      if (v177 != v176)
                      {
                        do
                        {
                          uint64_t v60 = *--v57;
                          uint64_t v59 = v60;
                          *uint64_t v57 = 0;
                          if (v60) {
                            MEMORY[0x21667D390](v59, 0x1000C8077774924);
                          }
                        }
                        while (v57 != v56);
                        unsigned __int8 v58 = v176;
                      }
                      uint64_t v177 = v56;
                      operator delete(v58);
                    }
                    if (v172 != v175) {
                      free(v172);
                    }
                    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v157);
                  }
                  else
                  {
                    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v157);
                    unint64_t v20 = v42;
                  }
                  if (v52) {
                    goto LABEL_58;
                  }
                  return 0;
                }
                ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v157);
              }
            }
            while (--v44);
          }
          uint64_t v15 = v43;
          unint64_t v20 = v42;
LABEL_58:
          ++v19;
        }
        while (v19 < v148);
      }
      uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v156);
      if (v150 != (void)v149 + *((void *)&v149 + 1))
      {
        int v73 = (mlir::MLIRContext *)Context;
        char v74 = v175;
        while (1)
        {
          v147 = 0;
          {
            return 0;
          }
          uint64_t v75 = *(void *)*v147;
          if (!v75)
          {
            mlir::emitError(v154, (uint64_t)&v171);
            if ((void)v171)
            {
              LODWORD(v157) = 3;
              *((void *)&v157 + 1) = "dialect '";
              uint64_t v158 = 9;
              uint64_t v97 = (char *)&v157;
              uint64_t v98 = (char *)v172;
              if (v173 >= v174)
              {
                unint64_t v133 = v173 + 1;
                if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                {
                  int64_t v137 = (char *)&v157 - (unsigned char *)v172;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v133, 24);
                  uint64_t v98 = (char *)v172;
                  uint64_t v97 = (char *)v172 + v137;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v133, 24);
                  uint64_t v97 = (char *)&v157;
                  uint64_t v98 = (char *)v172;
                }
              }
              uint64_t v99 = &v98[24 * v173];
              long long v100 = *(_OWORD *)v97;
              *((void *)v99 + 2) = *((void *)v97 + 2);
              *(_OWORD *)uint64_t v99 = v100;
              ++v173;
              if ((void)v171)
              {
                uint64_t v101 = *v147;
                LOWORD(v160) = 261;
                uint64_t v103 = *(void *)(v101 + 24);
                uint64_t v102 = *(void *)(v101 + 32);
                *(void *)&long long v157 = v103;
                *((void *)&v157 + 1) = v102;
                mlir::Diagnostic::operator<<((uint64_t)&v171 + 8, (void ***)&v157);
                if ((void)v171)
                {
                  LODWORD(v157) = 3;
                  *((void *)&v157 + 1) = "' is unknown";
                  uint64_t v158 = 12;
                  int64_t v104 = (char *)&v157;
                  int64_t v105 = (char *)v172;
                  if (v173 >= v174)
                  {
                    unint64_t v135 = v173 + 1;
                    if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                    {
                      int64_t v139 = (char *)&v157 - (unsigned char *)v172;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v135, 24);
                      int64_t v105 = (char *)v172;
                      int64_t v104 = (char *)v172 + v139;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v135, 24);
                      int64_t v104 = (char *)&v157;
                      int64_t v105 = (char *)v172;
                    }
                  }
                  uint64_t v106 = &v105[24 * v173];
                  long long v107 = *(_OWORD *)v104;
                  *((void *)v106 + 2) = *((void *)v104 + 2);
                  *(_OWORD *)uint64_t v106 = v107;
                  ++v173;
                }
              }
            }
            uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
            if ((void)v171) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
            }
            if (!v180) {
              return v6;
            }
            unint64_t v108 = __p;
            if (__p)
            {
              unint64_t v109 = v179;
              unint64_t v110 = __p;
              if (v179 != __p)
              {
                do
                  unint64_t v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
                while (v109 != v108);
                unint64_t v110 = __p;
              }
              v179 = v108;
              operator delete(v110);
            }
            uint64_t v10 = v176;
            if (!v176) {
              goto LABEL_218;
            }
            unint64_t v111 = v177;
            uint64_t v12 = v176;
            if (v177 == v176) {
              goto LABEL_217;
            }
            do
            {
              uint64_t v113 = *--v111;
              uint64_t v112 = v113;
              void *v111 = 0;
              if (v113) {
                MEMORY[0x21667D390](v112, 0x1000C8077774924);
              }
            }
            while (v111 != v10);
            goto LABEL_216;
          }
          uint64_t v146 = 0;
          if (!mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v75))
          {
            uint64_t v146 = 0;
LABEL_196:
            mlir::emitError(v154, (uint64_t)&v171);
            if ((void)v171)
            {
              LODWORD(v157) = 3;
              *((void *)&v157 + 1) = "unexpected resources for dialect '";
              uint64_t v158 = 34;
              int v114 = (char *)&v157;
              int64_t v115 = (char *)v172;
              if (v173 >= v174)
              {
                unint64_t v132 = v173 + 1;
                if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                {
                  int64_t v136 = (char *)&v157 - (unsigned char *)v172;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v132, 24);
                  int64_t v115 = (char *)v172;
                  int v114 = (char *)v172 + v136;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v132, 24);
                  int v114 = (char *)&v157;
                  int64_t v115 = (char *)v172;
                }
              }
              int64_t v116 = &v115[24 * v173];
              long long v117 = *(_OWORD *)v114;
              *((void *)v116 + 2) = *((void *)v114 + 2);
              *(_OWORD *)int64_t v116 = v117;
              ++v173;
              if ((void)v171)
              {
                uint64_t v118 = *v147;
                LOWORD(v160) = 261;
                uint64_t v120 = *(void *)(v118 + 24);
                uint64_t v119 = *(void *)(v118 + 32);
                *(void *)&long long v157 = v120;
                *((void *)&v157 + 1) = v119;
                mlir::Diagnostic::operator<<((uint64_t)&v171 + 8, (void ***)&v157);
                if ((void)v171)
                {
                  LODWORD(v157) = 3;
                  *((void *)&v157 + 1) = "'";
                  uint64_t v158 = 1;
                  uint64_t v121 = (char *)&v157;
                  int v122 = (char *)v172;
                  if (v173 >= v174)
                  {
                    unint64_t v134 = v173 + 1;
                    if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                    {
                      int64_t v138 = (char *)&v157 - (unsigned char *)v172;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v134, 24);
                      int v122 = (char *)v172;
                      uint64_t v121 = (char *)v172 + v138;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v134, 24);
                      uint64_t v121 = (char *)&v157;
                      int v122 = (char *)v172;
                    }
                  }
                  int v123 = &v122[24 * v173];
                  long long v124 = *(_OWORD *)v121;
                  *((void *)v123 + 2) = *((void *)v121 + 2);
                  *(_OWORD *)int v123 = v124;
                  ++v173;
                }
              }
            }
            uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
            if ((void)v171) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
            }
            if (!v180) {
              return v6;
            }
            __int16 v125 = __p;
            if (__p)
            {
              v126 = v179;
              unsigned int v127 = __p;
              if (v179 != __p)
              {
                do
                  v126 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v126 - 1);
                while (v126 != v125);
                unsigned int v127 = __p;
              }
              v179 = v125;
              operator delete(v127);
            }
            uint64_t v10 = v176;
            if (!v176) {
              goto LABEL_218;
            }
            long long v128 = v177;
            uint64_t v12 = v176;
            if (v177 == v176) {
              goto LABEL_217;
            }
            do
            {
              uint64_t v130 = *--v128;
              uint64_t v129 = v130;
              void *v128 = 0;
              if (v130) {
                MEMORY[0x21667D390](v129, 0x1000C8077774924);
              }
            }
            while (v128 != v10);
            goto LABEL_216;
          }
          uint64_t v76 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v75);
          uint64_t v146 = v76;
          if (!v76) {
            goto LABEL_196;
          }
          uint64_t v77 = v76;
          *(void *)&long long v143 = &v146;
          *((void *)&v143 + 1) = &v152;
          v144 = &v147;
          long long v145 = v15;
          uint64_t v78 = v156;
          unint64_t v170 = 0;
          unint64_t v79 = v170;
          if (v170)
          {
            do
            {
              long long v169 = 0uLL;
              int v168 = 0;
              unint64_t v167 = 0;
              long long v166 = 0uLL;
              *(void *)&long long v171 = 0;
                                       (int8x16_t *)v169,
                                       *((const unsigned __int8 **)&v169 + 1)))
              {
                return 0;
              }
              if (*((void *)&v166 + 1))
              {
                long long v163 = v166;
                uint64_t v164 = v166;
                uint64_t v165 = v78;
                int v80 = llvm::StringMapImpl::FindKey(a1 + 61, (int8x16_t *)v169, *((const unsigned __int8 **)&v169 + 1));
                if (v80 == -1 || v80 == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  uint64_t v81 = 0;
                  uint64_t v82 = &byte_211F4AA5D;
                }
                else
                {
                  uint64_t v83 = *(void *)(a1[61] + 8 * v80);
                  int64_t v85 = *(char **)(v83 + 8);
                  uint64_t v84 = v83 + 8;
                  uint64_t v82 = v85;
                  int v86 = *(char *)(v84 + 23);
                  if (v86 >= 0) {
                    uint64_t v82 = (char *)v84;
                  }
                  uint64_t v81 = *(void *)(v84 + 8);
                  if (v86 >= 0) {
                    uint64_t v81 = v86;
                  }
                }
                *(void *)&long long v169 = v82;
                *((void *)&v169 + 1) = v81;
                *(void *)&long long v157 = &unk_26C3578E0;
                *((void *)&v157 + 1) = v82;
                uint64_t v158 = v81;
                int v159 = v168;
                v160 = &v163;
                v161 = a1 + 67;
                uint64_t v162 = v141;
                if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)v77 + 48))(v77, &v157)) {
                  goto LABEL_173;
                }
                if (v164 != (void)v163 + *((void *)&v163 + 1))
                {
                  char v87 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
                  if ((void)v171) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
                  }
                  if (v180)
                  {
                    int v88 = v74;
                    uint64_t v89 = __p;
                    if (__p)
                    {
                      uint64_t v90 = v179;
                      long long v91 = __p;
                      if (v179 != __p)
                      {
                        do
                          uint64_t v90 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v90 - 1);
                        while (v90 != v89);
                        long long v91 = __p;
                      }
                      v179 = v89;
                      operator delete(v91);
                    }
                    uint64_t v92 = v176;
                    if (v176)
                    {
                      unint64_t v93 = v177;
                      unint64_t v94 = v176;
                      if (v177 != v176)
                      {
                        do
                        {
                          uint64_t v96 = *--v93;
                          uint64_t v95 = v96;
                          *unint64_t v93 = 0;
                          if (v96) {
                            MEMORY[0x21667D390](v95, 0x1000C8077774924);
                          }
                        }
                        while (v93 != v92);
                        unint64_t v94 = v176;
                      }
                      uint64_t v177 = v92;
                      operator delete(v94);
                    }
                    char v74 = v88;
                    if (v172 != v88) {
                      free(v172);
                    }
                  }
                  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v157);
                  if (v87) {
                    break;
                  }
                  return 0;
                }
                ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v157);
              }
            }
            while (--v79);
          }
          uint64_t v6 = 1;
          if (v150 == (void)v149 + *((void *)&v149 + 1)) {
            return v6;
          }
        }
      }
    }
    return 1;
  }
  if (*((unsigned char *)a4 + 16))
  {
    uint64_t v5 = a1[1];
    *(void *)&long long v157 = "unexpected resource offset section when resource section is not present";
    LOWORD(v160) = 259;
    mlir::emitError(v5, (uint64_t)&v157, (uint64_t)&v171);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
    if ((void)v171) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
    }
    if (v180)
    {
      unint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v179;
        unint64_t v9 = __p;
        if (v179 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        v179 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v176;
      if (!v176) {
        goto LABEL_218;
      }
      uint64_t v11 = v177;
      uint64_t v12 = v176;
      if (v177 == v176)
      {
LABEL_217:
        uint64_t v177 = v10;
        operator delete(v12);
LABEL_218:
        if (v172 != v175) {
          free(v172);
        }
        return v6;
      }
      do
      {
        uint64_t v14 = *--v11;
        uint64_t v13 = v14;
        *uint64_t v11 = 0;
        if (v14) {
          MEMORY[0x21667D390](v13, 0x1000C8077774924);
        }
      }
      while (v11 != v10);
LABEL_216:
      uint64_t v12 = v176;
      goto LABEL_217;
    }
  }
  else
  {
    uint64_t v65 = a1[1];
    *(void *)&long long v157 = "expected resource offset section when resource section is present";
    LOWORD(v160) = 259;
    mlir::emitError(v65, (uint64_t)&v157, (uint64_t)&v171);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
    if ((void)v171) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
    }
    if (v180)
    {
      uint64_t v66 = __p;
      if (__p)
      {
        unint64_t v67 = v179;
        BOOL v68 = __p;
        if (v179 != __p)
        {
          do
            unint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
          while (v67 != v66);
          BOOL v68 = __p;
        }
        v179 = v66;
        operator delete(v68);
      }
      uint64_t v10 = v176;
      if (!v176) {
        goto LABEL_218;
      }
      unint64_t v69 = v177;
      uint64_t v12 = v176;
      if (v177 == v176) {
        goto LABEL_217;
      }
      do
      {
        uint64_t v71 = *--v69;
        uint64_t v70 = v71;
        *unint64_t v69 = 0;
        if (v71) {
          MEMORY[0x21667D390](v70, 0x1000C8077774924);
        }
      }
      while (v69 != v10);
      goto LABEL_216;
    }
  }
  return v6;
}

uint64_t anonymous namespace'::AttrTypeReader::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  v39[0] = a4;
  v39[1] = a5;
  uint64_t v10 = *(void *)(a1 + 136);
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v37 = a6;
  uint64_t v38 = v10;
  unint64_t v34 = 0;
  unint64_t v33 = 0;
  unint64_t v11 = v34;
  unint64_t v12 = *(unsigned int *)(a1 + 32);
  if (v34 != v12)
  {
    if (v34 >= v12)
    {
      if (v34 > *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v34, 40);
        unint64_t v12 = *(unsigned int *)(a1 + 32);
      }
      if (v11 != v12) {
        bzero((void *)(*(void *)(a1 + 24) + 40 * v12), 40 * ((40 * (v11 - v12) - 40) / 0x28) + 40);
      }
    }
    *(_DWORD *)(a1 + 32) = v11;
    LODWORD(v12) = v11;
  }
  uint64_t v13 = (void *)(a1 + 80);
  unint64_t v14 = v33;
  unint64_t v15 = *(unsigned int *)(a1 + 88);
  if (v33 != v15)
  {
    if (v33 >= v15)
    {
      if (v33 > *(unsigned int *)(a1 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 80, (void *)(a1 + 96), v33, 40);
        unint64_t v15 = *(unsigned int *)(a1 + 88);
      }
      if (v14 != v15) {
        bzero((void *)(*v13 + 40 * v15), 40 * ((40 * (v14 - v15) - 40) / 0x28) + 40);
      }
    }
    *(_DWORD *)(a1 + 88) = v14;
    LODWORD(v12) = *(_DWORD *)(a1 + 32);
    LODWORD(v15) = v14;
  }
  uint64_t v32 = 0;
  uint64_t v40 = 0;
  unint64_t v45 = (void *)(a1 + 24);
  uint64_t v46 = &v40;
  char v47 = &v35;
  uint64_t v48 = &v32;
  uint64_t v49 = v39;
  if (v12)
  {
    uint64_t v16 = v12;
    while (1)
    {
      uint64_t v43 = a2;
      uint64_t v44 = a3;
      uint64_t v42 = 0;
      unint64_t v41 = 0;
      unint64_t v17 = v41;
      if (v41)
      {
        uint64_t v18 = v42;
        while (_ZN4llvm12function_refIFN4mlir13LogicalResultEPN12_GLOBAL__N_115BytecodeDialectEEE11callback_fnIZZNS3_14AttrTypeReader10initializeENS_15MutableArrayRefINSt3__110unique_ptrIS4_NSB_14default_deleteIS4_EEEEEENS_8ArrayRefIhEESI_ENK3__0clIRNS_11SmallVectorINS9_5EntryINS1_9AttributeEEELj1EEEEEDaOT_EUlS5_E_EES2_lS5_((uint64_t)&v45, *v18))
        {
          if (!--v17) {
            goto LABEL_19;
          }
        }
        return 0;
      }
LABEL_19:
      if (v40 == v16)
      {
        LODWORD(v15) = *(_DWORD *)(a1 + 88);
        uint64_t v13 = (void *)(a1 + 80);
        break;
      }
    }
  }
  uint64_t v40 = 0;
  unint64_t v45 = v13;
  uint64_t v46 = &v40;
  char v47 = &v35;
  uint64_t v48 = &v32;
  uint64_t v49 = v39;
  if (v15)
  {
    uint64_t v19 = v15;
    do
    {
      uint64_t v43 = a2;
      uint64_t v44 = a3;
      uint64_t v42 = 0;
      unint64_t v41 = 0;
      unint64_t v20 = v41;
      if (v41)
      {
        long long v21 = v42;
        while (_ZN4llvm12function_refIFN4mlir13LogicalResultEPN12_GLOBAL__N_115BytecodeDialectEEE11callback_fnIZZNS3_14AttrTypeReader10initializeENS_15MutableArrayRefINSt3__110unique_ptrIS4_NSB_14default_deleteIS4_EEEEEENS_8ArrayRefIhEESI_ENK3__0clIRNS_11SmallVectorINS9_5EntryINS1_9AttributeEEELj1EEEEEDaOT_EUlS5_E_EES2_lS5_((uint64_t)&v45, *v21))
        {
          if (!--v20) {
            goto LABEL_30;
          }
        }
        return 0;
      }
LABEL_30:
      ;
    }
    while (v40 != v19);
  }
  if (v37 == v35 + v36) {
    return 1;
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    uint64_t v24 = __p;
    if (__p)
    {
      uint64_t v25 = v54;
      long long v26 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        long long v26 = __p;
      }
      long long v54 = v24;
      operator delete(v26);
    }
    long long v27 = v51;
    if (v51)
    {
      long long v28 = v52;
      uint64_t v29 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v51;
      }
      char v52 = v27;
      operator delete(v29);
    }
    if (v48 != &v50) {
      free(v48);
    }
  }
  return v22;
}

void mlir::BytecodeReader::Impl::parseIRSection(uint64_t a1)
{
}

uint64_t anonymous namespace'::EncodingReader::parseVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 2);
  if (v4 == (unsigned __int8 *)(*(void *)this + *((void *)this + 1)))
  {
    char v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
    if (*(void *)__dst) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v24)
    {
      unint64_t v9 = __p;
      if (__p)
      {
        uint64_t v10 = v23;
        unint64_t v11 = __p;
        if (v23 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          unint64_t v11 = __p;
        }
        int v23 = v9;
        operator delete(v11);
      }
      unint64_t v12 = v20;
      if (v20)
      {
        uint64_t v13 = v21;
        unint64_t v14 = v20;
        if (v21 != v20)
        {
          do
          {
            uint64_t v16 = *--v13;
            uint64_t v15 = v16;
            *uint64_t v13 = 0;
            if (v16) {
              MEMORY[0x21667D390](v15, 0x1000C8077774924);
            }
          }
          while (v13 != v12);
          unint64_t v14 = v20;
        }
        long long v21 = v12;
        operator delete(v14);
      }
      if (v18 != &v19) {
        free(v18);
      }
    }
    if (!v8) {
      return 0;
    }
    unint64_t v5 = *a2;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_26:
    if (v5)
    {
      unint64_t v6 = *(void *)__dst;
      goto LABEL_4;
    }
    return 0;
  }
  *((void *)this + 2) = v4 + 1;
  unint64_t v5 = *v4;
  *a2 = v5;
  if ((v5 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  unint64_t v6 = v5 >> 1;
LABEL_4:
  *a2 = v6;
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::sortUseListOrder(uint64_t a1, void *a2)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  int64_t v105 = a2;
  __int16 v3 = (void *)*a2;
  if (!*a2 || !*v3) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 528);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 512);
    int v7 = v5 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v9 = *(void **)(v6 + 48 * v8);
    if (v9 == a2)
    {
      BOOL v10 = 1;
    }
    else
    {
      int v100 = 1;
      do
      {
        BOOL v10 = v9 != (void *)-4096;
        if (v9 == (void *)-4096) {
          break;
        }
        unsigned int v101 = v8 + v100++;
        unsigned int v8 = v101 & v7;
        unint64_t v9 = *(void **)(v6 + 48 * v8);
        BOOL v10 = 1;
      }
      while (v9 != a2);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 704);
  uint64_t v13 = *(unsigned int *)(a1 + 720);
  if (!v13)
  {
LABEL_14:
    uint64_t v16 = (uint64_t *)(v12 + 16 * v13);
    goto LABEL_15;
  }
  uint64_t v14 = v3[2];
  LODWORD(v15) = ((v14 >> 4) ^ (v14 >> 9)) & (v13 - 1);
  uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 != v14)
  {
    int v18 = 1;
    while (v17 != -4096)
    {
      int v19 = v15 + v18++;
      uint64_t v15 = v19 & (v13 - 1);
      uint64_t v17 = *(void *)(v12 + 16 * v15);
      if (v17 == v14)
      {
        uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v20 = *((unsigned int *)v16 + 2);
  unint64_t v21 = mlir::OpOperand::getOperandNumber((unint64_t)v3) | (unint64_t)(v20 << 32);
  uint64_t v121 = (char *)&v123;
  int v123 = 0;
  unint64_t v124 = v21;
  uint64_t v122 = 0x300000001;
  uint64_t v22 = *(void **)*a2;
  if (!v22)
  {
    if (!v10) {
      goto LABEL_93;
    }
LABEL_38:
    uint64_t v48 = *(void *)(a1 + 512);
    unsigned int v49 = *(_DWORD *)(a1 + 528);
    if (v49)
    {
      unsigned int v50 = ((v105 >> 4) ^ (v105 >> 9)) & (v49 - 1);
      uint64_t v51 = v48 + 48 * v50;
      char v52 = *(void **)v51;
      if (*(void **)v51 == v105) {
        goto LABEL_45;
      }
      int v53 = 1;
      while (v52 != (void *)-4096)
      {
        unsigned int v54 = v50 + v53++;
        unsigned int v50 = v54 & (v49 - 1);
        uint64_t v51 = v48 + 48 * v50;
        char v52 = *(void **)v51;
        if (*(void **)v51 == v105) {
          goto LABEL_45;
        }
      }
    }
    uint64_t v51 = v48 + 48 * v49;
LABEL_45:
    long long __dst = v113;
    uint64_t v112 = *(void *)"";
    unint64_t v55 = *(unsigned int *)(v51 + 16);
    if (&__dst == (void **)(v51 + 8) || v55 == 0)
    {
      LODWORD(v55) = 0;
      char v114 = *(unsigned char *)(v51 + 40);
      unint64_t v108 = v110;
      unint64_t v109 = *(void *)"";
      uint64_t v57 = (void *)*v105;
      if (!*v105) {
        goto LABEL_64;
      }
      goto LABEL_51;
    }
    int64_t v64 = v113;
    unsigned int v65 = *(_DWORD *)(v51 + 16);
    if (v55 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v113, *(unsigned int *)(v51 + 16), 4);
      unsigned int v65 = *(_DWORD *)(v51 + 16);
      if (!v65) {
        goto LABEL_62;
      }
      int64_t v64 = __dst;
    }
    memcpy(v64, *(const void **)(v51 + 8), 4 * v65);
LABEL_62:
    LODWORD(v112) = v55;
    char v114 = *(unsigned char *)(v51 + 40);
    unint64_t v108 = v110;
    unint64_t v109 = *(void *)"";
    if (__dst == v113)
    {
      unsigned int v89 = v55;
      if (v55 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v55, 4), (unsigned int v89 = v112) != 0))
      {
        memcpy(v108, __dst, 4 * v89);
      }
      LODWORD(v109) = v55;
      LODWORD(v112) = 0;
      uint64_t v57 = (void *)*v105;
      if (!*v105)
      {
LABEL_64:
        unint64_t v58 = 0;
        if (!v114) {
          goto LABEL_65;
        }
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t v108 = __dst;
      unint64_t v109 = __PAIR64__(HIDWORD(v112), v55);
      long long __dst = v113;
      uint64_t v112 = 0;
      uint64_t v57 = (void *)*v105;
      if (!*v105) {
        goto LABEL_64;
      }
    }
LABEL_51:
    unint64_t v58 = 0;
    do
    {
      ++v58;
      uint64_t v57 = (void *)*v57;
    }
    while (v57);
    if (!v114)
    {
LABEL_65:
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      unsigned int v104 = 0;
      if (v55)
      {
LABEL_66:
        uint64_t v66 = 0;
        unint64_t v67 = (char *)v108;
        BOOL v68 = (char *)v108 + 4 * v55;
        while (1)
        {
          if (v104)
          {
            unsigned int v69 = *(_DWORD *)v67;
            unsigned int v70 = (37 * *(_DWORD *)v67) & (v104 - 1);
            int v71 = *((_DWORD *)v102 + v70);
            if (*(_DWORD *)v67 == v71)
            {
              if (v70 != v104) {
                goto LABEL_115;
              }
              goto LABEL_68;
            }
            int v72 = 1;
            do
            {
              if (v71 == -1) {
                goto LABEL_67;
              }
              unsigned int v73 = v70 + v72++;
              unsigned int v70 = v73 & (v104 - 1);
              int v71 = *((_DWORD *)v102 + v70);
            }
            while (v69 != v71);
            if (v70 != v104) {
              goto LABEL_115;
            }
          }
LABEL_67:
          unsigned int v69 = *(_DWORD *)v67;
LABEL_68:
          v66 += v69;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)&v102, v67, (uint64_t)&v115);
          v67 += 4;
          if (v67 == v68)
          {
            if (v58 == v109) {
              goto LABEL_111;
            }
            goto LABEL_115;
          }
        }
      }
LABEL_110:
      uint64_t v66 = 0;
      if (!v58)
      {
LABEL_111:
        if (v66 == ((v58 - 1) * v58) >> 1)
        {
          int64_t v115 = v121;
          uint64_t v116 = (uint64_t)&v108;
          v117[0] = 1;
          uint64_t v118 = &v121[16 * v122];
          uint64_t v119 = &v108;
          char v120 = 1;
          llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(v106, (unsigned int **)&v115);
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)v106);
          if (v106[0] != &v107) {
            free(v106[0]);
          }
          mlir::Value::shuffleUseList(&v105, (unsigned int *)v108, v109);
        }
      }
LABEL_115:
      llvm::deallocate_buffer(v102, (void *)(4 * v104));
    }
LABEL_54:
    if (v55)
    {
      uint64_t v11 = 0;
      if (v108 != v110) {
        free(v108);
      }
      if (__dst != v113) {
        free(__dst);
      }
      goto LABEL_120;
    }
    llvm::SmallVector<unsigned int,4u>::SmallVector(&v115, v58);
    uint64_t v59 = v115;
    uint64_t v60 = v116;
    if (v116)
    {
      unint64_t v61 = (v116 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v61 < 7)
      {
        LODWORD(v62) = 0;
        int64_t v63 = v115;
LABEL_102:
        uint64_t v96 = &v59[v60];
        do
        {
          *v63++ = v62;
          LODWORD(v62) = v62 + 1;
        }
        while (v63 != v96);
        goto LABEL_104;
      }
      unint64_t v90 = v61 + 1;
      uint64_t v62 = (v61 + 1) & 0x7FFFFFFFFFFFFFF8;
      int64_t v63 = (char *)v115 + 4 * v62;
      int32x4_t v91 = (int32x4_t)xmmword_211EE3A90;
      uint64_t v92 = (int32x4_t *)((char *)v115 + 16);
      v93.i64[0] = 0x400000004;
      v93.i64[1] = 0x400000004;
      v94.i64[0] = 0x800000008;
      v94.i64[1] = 0x800000008;
      uint64_t v95 = v62;
      do
      {
        v92[-1] = v91;
        *uint64_t v92 = vaddq_s32(v91, v93);
        int32x4_t v91 = vaddq_s32(v91, v94);
        v92 += 2;
        v95 -= 8;
      }
      while (v95);
      if (v90 != v62) {
        goto LABEL_102;
      }
    }
LABEL_104:
    if (v109)
    {
      unint64_t v97 = 0;
      uint64_t v98 = v108;
      do
      {
        v59[v98[v97]] = v98[v97 + 1];
        v97 += 2;
      }
      while (v97 < v109);
    }
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)&v115);
    if (v115 != v117) {
      free(v115);
    }
    LODWORD(v55) = v109;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    unsigned int v104 = 0;
    if (v109) {
      goto LABEL_66;
    }
    goto LABEL_110;
  }
  int v23 = 1;
  uint64_t v24 = 1;
  do
  {
    uint64_t v25 = *(void *)(a1 + 704);
    uint64_t v26 = *(unsigned int *)(a1 + 720);
    if (v26)
    {
      uint64_t v27 = v22[2];
      LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v26 - 1);
      uint64_t v29 = (uint64_t *)(v25 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 == v27) {
        goto LABEL_24;
      }
      int v31 = 1;
      while (v30 != -4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v26 - 1);
        uint64_t v30 = *(void *)(v25 + 16 * v28);
        if (v30 == v27)
        {
          uint64_t v29 = (uint64_t *)(v25 + 16 * v28);
          goto LABEL_24;
        }
      }
    }
    uint64_t v29 = (uint64_t *)(v25 + 16 * v26);
LABEL_24:
    uint64_t v33 = *((unsigned int *)v29 + 2);
    unint64_t v34 = mlir::OpOperand::getOperandNumber((unint64_t)v22) | (unint64_t)(v33 << 32);
    BOOL v35 = v21 > v34;
    uint64_t v36 = v122;
    if (v122 >= (unint64_t)HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, &v123, v122 + 1, 16);
      uint64_t v36 = v122;
    }
    v23 &= v35;
    uint64_t v37 = &v121[16 * v36];
    *(void *)uint64_t v37 = v24;
    *((void *)v37 + 1) = v34;
    unint64_t v38 = (v122 + 1);
    LODWORD(v122) = v122 + 1;
    ++v24;
    uint64_t v22 = (void *)*v22;
    unint64_t v21 = v34;
  }
  while (v22);
  if (((v10 | v23 ^ 1) & 1) == 0) {
    goto LABEL_93;
  }
  if ((v23 & 1) == 0)
  {
    unint64_t v39 = 126 - 2 * __clz(v38);
    if (v38) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>((int *)v121, (int *)&v121[16 * v38], v40, 1);
  }
  if (v10) {
    goto LABEL_38;
  }
  unint64_t v41 = (unsigned int *)v121;
  uint64_t v42 = v122;
  int64_t v115 = v117;
  uint64_t v116 = 0xC00000000;
  if (v122 >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v122, 4);
    uint64_t v43 = v116;
    uint64_t v44 = (unsigned int *)v115;
    unint64_t v45 = (char *)v115 + 4 * v116;
    unint64_t v46 = (v42 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 < 0x18) {
      goto LABEL_36;
    }
LABEL_83:
    if (v45 >= (char *)&v41[4 * v46 + 2] || (char v47 = v41, v41 >= &v44[v43 + 1 + v46]))
    {
      unint64_t v74 = v46 + 1;
      uint64_t v75 = (v46 + 1) & 7;
      if (!v75) {
        uint64_t v75 = 8;
      }
      unint64_t v76 = v74 - v75;
      v45 += 4 * v76;
      char v47 = &v41[4 * v76];
      uint64_t v77 = (const double *)(v41 + 16);
      uint64_t v78 = (int32x4_t *)&v44[v43 + 4];
      do
      {
        unint64_t v79 = v77 - 8;
        unsigned long long v80 = (unsigned __int128)vld2q_f64(v79);
        uint64_t v81 = v77 - 4;
        unsigned long long v82 = (unsigned __int128)vld2q_f64(v81);
        uint64_t v83 = v77 + 16;
        unsigned long long v85 = (unsigned __int128)vld2q_f64(v77);
        uint64_t v84 = v77 + 4;
        unsigned long long v86 = (unsigned __int128)vld2q_f64(v84);
        v78[-1] = vuzp1q_s32((int32x4_t)v80, (int32x4_t)v82);
        *uint64_t v78 = vuzp1q_s32((int32x4_t)v85, (int32x4_t)v86);
        v78 += 2;
        uint64_t v77 = v83;
        v76 -= 8;
      }
      while (v76);
    }
    goto LABEL_89;
  }
  if (v122)
  {
    uint64_t v43 = 0;
    uint64_t v44 = (unsigned int *)v117;
    unint64_t v45 = v117;
    unint64_t v46 = (v122 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 >= 0x18) {
      goto LABEL_83;
    }
LABEL_36:
    char v47 = v41;
    do
    {
LABEL_89:
      uint64_t v87 = *(void *)v47;
      v47 += 4;
      *(_DWORD *)unint64_t v45 = v87;
      v45 += 4;
    }
    while (v47 != &v41[4 * v42]);
    int v88 = v116;
  }
  else
  {
    int v88 = 0;
    uint64_t v44 = (unsigned int *)v117;
  }
  LODWORD(v116) = v88 + v42;
  mlir::Value::shuffleUseList(&v105, v44, (v88 + v42));
  if (v115 != v117) {
    free(v115);
  }
LABEL_93:
  uint64_t v11 = 1;
LABEL_120:
  if (v121 != (char *)&v123) {
    free(v121);
  }
  return v11;
}

void *llvm::SmallVector<unsigned int,4u>::SmallVector(void *a1, unint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = *(void *)"";
  if (a2)
  {
    if (a2 < 5)
    {
      uint64_t v4 = 0;
      unint64_t v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      uint64_t v4 = *((unsigned int *)a1 + 2);
      unint64_t v5 = a2 - v4;
      if (a2 == v4) {
        goto LABEL_7;
      }
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

void *llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(void *a1, unsigned int **a2)
{
  *a1 = a1 + 2;
  a1[1] = *(void *)"";
  __int16 v3 = *a2;
  uint64_t v4 = (uint64_t *)a2[1];
  unint64_t v5 = a2[3];
  uint64_t v6 = (char *)v5 - (char *)*a2;
  if ((unint64_t)v6 < 0x41)
  {
    unsigned int v7 = 0;
    if (v3 == v5) {
      goto LABEL_8;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 4, 4);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (v3 == v5) {
      goto LABEL_8;
    }
  }
  unsigned int v8 = (_DWORD *)(*a1 + 4 * v7);
  uint64_t v9 = *v4;
  do
  {
    unsigned int v10 = *v3;
    v3 += 4;
    *v8++ = *(_DWORD *)(v9 + 4 * v10);
  }
  while (v3 != v5);
  unsigned int v7 = *((_DWORD *)a1 + 2);
LABEL_8:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 4);
  return a1;
}

uint64_t mlir::BytecodeReader::Impl::parseBlockHeader(uint64_t a1, _anonymous_namespace_::EncodingReader *this, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t *)(a3 + 112);
    return 0;
  uint64_t v7 = *v6;
  *uint64_t v6 = (unint64_t)*v6 >> 1;
  if ((v7 & 1) == 0) {
    return 1;
  }
  uint64_t v9 = *(void *)(a3 + 104);
  unsigned int v10 = v9 ? (void *)(v9 - 8) : 0;
  unint64_t v28 = 0;
    return 0;
  BOOL v35 = (llvm *)&v37;
  uint64_t v36 = 0x600000000;
  int v32 = v34;
  uint64_t v33 = 0x600000000;
  unint64_t v12 = v28;
  if (v28 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, &v37, v28, 8);
    if (v12 > HIDWORD(v33)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v12, 8);
    }
  }
  uint64_t v13 = mlir::UnknownLoc::get(**(mlir::UnknownLoc ***)a1, v11);
  if (!v12)
  {
LABEL_27:
    mlir::ValueRange::ValueRange(v31, (uint64_t)v35, v36);
    mlir::Block::addArguments(v10, v31[0], v31[1], (uint64_t)v32, v33);
    mlir::ValueRange::ValueRange(v30, v10[6], (uint64_t)(v10[7] - v10[6]) >> 3);
    char v22 = mlir::BytecodeReader::Impl::defineValues((void *)a1, *((void *)this + 3), v30[0], v30[1]);
    int v23 = v32;
    if (v32 == v34) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v14 = v13;
  while (1)
  {
    uint64_t v27 = v14;
    if (*(void *)(a1 + 248) < 4uLL) {
      break;
    }
    unint64_t v29 = 0;
      goto LABEL_34;
    char v15 = v29;
    if (!v16) {
      goto LABEL_34;
    }
    uint64_t v17 = v16;
    if (v15) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v19 = v36;
    if (v36 >= (unint64_t)HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, &v37, v36 + 1, 8);
      uint64_t v19 = v36;
    }
    *((void *)v35 + v19) = v17;
    LODWORD(v36) = v36 + 1;
    uint64_t v20 = v27;
    uint64_t v21 = v33;
    if (v33 >= (unint64_t)HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
      uint64_t v21 = v33;
    }
    *((void *)v32 + v21) = v20;
    LODWORD(v33) = v33 + 1;
    if (!--v12) {
      goto LABEL_27;
    }
  }
  unint64_t v29 = 0;
  {
    if (v18)
    {
      uint64_t v17 = v18;
LABEL_21:
      if (!mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>(a1, this, &v27)) {
        goto LABEL_34;
      }
      goto LABEL_22;
    }
  }
LABEL_34:
  char v22 = 0;
  int v23 = v32;
  if (v32 != v34) {
LABEL_28:
  }
    free(v23);
LABEL_29:
  if (v35 != (llvm *)&v37) {
    free(v35);
  }
  if (!v22) {
    return 0;
  }
  if (*(void *)(a1 + 248) < 3uLL) {
    return 1;
  }
  LOBYTE(v31[0]) = 0;
    return 0;
  if (LOBYTE(v31[0]))
  {
    uint64_t v24 = *(void *)(a3 + 104);
    if (v24) {
      uint64_t v25 = v24 - 8;
    }
    else {
      uint64_t v25 = 0;
    }
    mlir::BytecodeReader::Impl::parseUseListOrderForRange((mlir::BytecodeReader::Impl *)&v35, this, ((*(void *)(v25 + 56) - *(void *)(v25 + 48)) >> 3));
  }
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::parseRegions(mlir::BytecodeReader::Impl *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v337 = *MEMORY[0x263EF8340];
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
LABEL_385:
    if (*(unsigned char *)(a3 + 120))
    {
      uint64_t v206 = (void *)*((void *)a1 + 86);
      uint64_t v207 = (void **)(v206 - 7);
      unsigned __int8 v208 = (void *)*(v206 - 4);
      if (v208 != v206 - 2) {
        free(v208);
      }
      uint64_t v209 = *v207;
      if (*v207)
      {
        *(v206 - 6) = v209;
        operator delete(v209);
      }
      *((void *)a1 + 86) = v207;
    }
    uint64_t v210 = *(void *)(a2 + 8);
    uint64_t v211 = *(void **)(v210 - 88);
    if (v211 != (void *)(v210 - 72)) {
      free(v211);
    }
    uint64_t v212 = *(void *)(v210 - 104);
    *(void *)(v210 - 104) = 0;
    if (v212) {
      MEMORY[0x21667D3C0](v212, 0x1070C401CF53446);
    }
    *(void *)(a2 + 8) = v210 - 128;
    return 1;
  }
  uint64_t v7 = (mlir::BytecodeReader::Impl *)((char *)a1 + 88);
  std::string::size_type v275 = (std::string::size_type)a1 + 536;
  uint64_t v274 = (void **)((char *)a1 + 424);
  v273 = (void **)((char *)a1 + 336);
  uint64_t v278 = (std::string::size_type *)((char *)a1 + 248);
  uint64_t v272 = (uint64_t)a1 + 512;
  v269 = (void **)((char *)a1 + 680);
  v279 = (mlir::BytecodeReader::Impl *)((char *)a1 + 88);
  while (!*(void *)(a3 + 104))
  {
    if (!mlir::BytecodeReader::Impl::parseRegion((uint64_t)a1, a3)) {
      return 0;
    }
    uint64_t v8 = *(void *)a3;
    if (**(void **)a3 != *(void *)a3) {
      break;
    }
LABEL_384:
    uint64_t v205 = v8 + 24;
    *(void *)a3 = v205;
    if (v205 == *(void *)(a3 + 8)) {
      goto LABEL_385;
    }
  }
  uint64_t v270 = a2;
  uint64_t v9 = *(_anonymous_namespace_::EncodingReader **)(a3 + 16);
  while (1)
  {
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 112) = v10 - 1;
    uint64_t v11 = v3;
    if (v10) {
      break;
    }
LABEL_376:
    uint64_t v8 = *(void *)(*(void *)(a3 + 104) + 8);
    *(void *)(a3 + 104) = v8;
    if (v8 == *(void *)a3)
    {
      *(void *)(a3 + 104) = 0;
      char v200 = (void **)*((void *)a1 + 86);
      uint64_t v201 = (uint64_t)*(v200 - 7);
      unint64_t v202 = ((uint64_t)*(v200 - 6) - v201) >> 3;
      uint64_t v203 = *(unsigned int *)(a3 + 32);
      unint64_t v204 = v202 - v203;
      if (v202 >= v203)
      {
        a2 = v270;
        if (v202 > v204) {
          *(v200 - 6) = (void *)(v201 + 8 * v204);
        }
      }
      else
      {
        std::vector<mlir::Value>::__append(v200 - 7, -v203);
        uint64_t v8 = *(void *)a3;
        a2 = v270;
      }
      --*((_DWORD *)v200 - 6);
      uint64_t v3 = v11;
      goto LABEL_384;
    }
    uint64_t v3 = v11;
    uint64_t v184 = 0;
    if (!mlir::BytecodeReader::Impl::parseBlockHeader((uint64_t)a1, v9, a3)) {
      return v184;
    }
  }
  while (1)
  {
    v280.__r_.__value_.__r.__words[0] = 0;
      return 0;
    uint64_t v12 = *((void *)v9 + 3);
    uint64_t v13 = (void *)*((void *)a1 + 45);
    std::string::size_type v14 = *((unsigned int *)a1 + 92);
    *(void *)v324 = "operation name";
    *(void *)&v324[8] = 14;
    unsigned int v287 = (mlir::Region *)v280.__r_.__value_.__r.__words[0];
    if (v280.__r_.__value_.__r.__words[0] >= v14)
    {
      char v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v298);
      if (v298) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v298);
      }
      if (v316)
      {
        uint64_t v18 = __p;
        if (__p)
        {
          uint64_t v19 = v315;
          uint64_t v20 = __p;
          if (v315 != __p)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = __p;
          }
          v315 = v18;
          operator delete(v20);
        }
        uint64_t v21 = v312;
        if (v312)
        {
          char v22 = v313;
          int v23 = v312;
          if (v313 != v312)
          {
            do
            {
              uint64_t v25 = *--v22;
              uint64_t v24 = v25;
              void *v22 = 0;
              if (v25) {
                MEMORY[0x21667D390](v24, 0x1000C8077774924);
              }
            }
            while (v22 != v21);
            int v23 = v312;
          }
          v313 = v21;
          operator delete(v23);
        }
        if (v301 != v304) {
          free(v301);
        }
      }
      if (!v17) {
        return 0;
      }
      char v15 = 0;
      unsigned int v16 = MEMORY[0x28];
      if (MEMORY[8]) {
        goto LABEL_48;
      }
    }
    else
    {
      char v15 = &v13[6 * v280.__r_.__value_.__r.__words[0]];
      unsigned int v16 = *((unsigned __int16 *)v15 + 20);
      if (*((unsigned char *)v15 + 8)) {
        goto LABEL_48;
      }
    }
    *(void *)v324 = &unk_26C356670;
    *(void *)&v324[8] = v7;
    *(void *)&v324[16] = v275;
    *(void *)&long long v325 = v274;
    *((void *)&v325 + 1) = v273;
    v326 = v9;
    uint64_t v327 = (uint64_t)v278;
      return 0;
    uint64_t v26 = (void *)v15[4];
    if (v26)
    {
      uint64_t v27 = v15[2];
      WORD4(v289) = 773;
      unint64_t v29 = *(mlir::Region **)(v27 + 24);
      uint64_t v28 = *(void *)(v27 + 32);
      unsigned int v287 = v29;
      *(void *)&long long v288 = v28;
      *((void *)&v288 + 1) = ".";
      uint64_t v30 = v15[3];
      v298 = &v287;
      uint64_t v300 = v30;
      long long v301 = v26;
      LOWORD(v302) = 1282;
      llvm::Twine::str((llvm::Twine *)&v298, &v280);
      uint64_t v31 = **(void **)a1;
      if (*((unsigned char *)v15 + 8)) {
        *((unsigned char *)v15 + 8) = 0;
      }
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v32 = &v280;
      }
      else {
        int v32 = (std::string *)v280.__r_.__value_.__r.__words[0];
      }
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v280.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v280.__r_.__value_.__l.__size_;
      }
      mlir::OperationName::OperationName(v15, v32, size, v31);
      *((unsigned char *)v15 + 8) = 1;
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v280.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      unint64_t v34 = (void *)v15[2];
      if (*v34)
      {
        mlir::emitError(*((void *)a1 + 1), (uint64_t)&v298);
        if (v298)
        {
          LODWORD(v287) = 3;
          *(void *)&long long v288 = "has an empty opname for dialect '";
          *((void *)&v288 + 1) = 33;
          int64_t v241 = &v287;
          v242 = (char *)v301;
          if (v302 >= v303)
          {
            unint64_t v263 = v302 + 1;
            if (v301 <= &v287 && (char *)v301 + 24 * v302 > (char *)&v287)
            {
              int64_t v267 = (char *)&v287 - (unsigned char *)v301;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v301, v304, v263, 24);
              v242 = (char *)v301;
              int64_t v241 = (mlir::Region **)((char *)v301 + v267);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v301, v304, v263, 24);
              int64_t v241 = &v287;
              v242 = (char *)v301;
            }
          }
          v243 = &v242[24 * v302];
          long long v244 = *(_OWORD *)v241;
          *((void *)v243 + 2) = v241[2];
          *(_OWORD *)v243 = v244;
          ++v302;
          if (v298)
          {
            uint64_t v245 = v15[2];
            WORD4(v289) = 261;
            int v247 = *(mlir::Region **)(v245 + 24);
            uint64_t v246 = *(void *)(v245 + 32);
            unsigned int v287 = v247;
            *(void *)&long long v288 = v246;
            mlir::Diagnostic::operator<<((uint64_t)&v299, (void ***)&v287);
            if (v298)
            {
              LODWORD(v287) = 3;
              *(void *)&long long v288 = "'\n";
              *((void *)&v288 + 1) = 2;
              long long v248 = &v287;
              uint64_t v249 = (char *)v301;
              if (v302 >= v303)
              {
                unint64_t v264 = v302 + 1;
                if (v301 <= &v287 && (char *)v301 + 24 * v302 > (char *)&v287)
                {
                  int64_t v268 = (char *)&v287 - (unsigned char *)v301;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v301, v304, v264, 24);
                  uint64_t v249 = (char *)v301;
                  long long v248 = (mlir::Region **)((char *)v301 + v268);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v301, v304, v264, 24);
                  long long v248 = &v287;
                  uint64_t v249 = (char *)v301;
                }
              }
              v250 = &v249[24 * v302];
              long long v251 = *(_OWORD *)v248;
              *((void *)v250 + 2) = v248[2];
              *(_OWORD *)v250 = v251;
              ++v302;
              if (v298) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v298);
              }
            }
          }
        }
        if (v316)
        {
          v252 = __p;
          if (__p)
          {
            uint64_t v253 = v315;
            char v254 = __p;
            if (v315 != __p)
            {
              do
                uint64_t v253 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v253 - 1);
              while (v253 != v252);
              char v254 = __p;
            }
            v315 = v252;
            operator delete(v254);
          }
          v255 = v312;
          if (v312)
          {
            uint64_t v256 = v313;
            v257 = v312;
            if (v313 != v312)
            {
              do
              {
                uint64_t v259 = *--v256;
                uint64_t v258 = v259;
                *uint64_t v256 = 0;
                if (v259) {
                  MEMORY[0x21667D390](v258, 0x1000C8077774924);
                }
              }
              while (v256 != v255);
              v257 = v312;
            }
            v313 = v255;
            operator delete(v257);
          }
          if (v301 != v304) {
            free(v301);
          }
        }
        return 0;
      }
      uint64_t v35 = **(void **)a1;
      if (*((unsigned char *)v15 + 8)) {
        *((unsigned char *)v15 + 8) = 0;
      }
      mlir::OperationName::OperationName(v15, v34[3], v34[4], v35);
      *((unsigned char *)v15 + 8) = 1;
    }
LABEL_48:
    uint64_t v36 = *v15;
    int v37 = (char *)*((void *)v9 + 2);
    unsigned int v277 = v11;
    if (v37 == (char *)(*(void *)v9 + *((void *)v9 + 1)))
    {
      char v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v298);
      if (v298) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v298);
      }
      if (v316)
      {
        uint64_t v40 = __p;
        if (__p)
        {
          unint64_t v41 = v315;
          uint64_t v42 = __p;
          if (v315 != __p)
          {
            do
              unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            uint64_t v42 = __p;
          }
          v315 = v40;
          operator delete(v42);
        }
        uint64_t v43 = v312;
        if (v312)
        {
          uint64_t v44 = v313;
          unint64_t v45 = v312;
          if (v313 != v312)
          {
            do
            {
              uint64_t v47 = *--v44;
              uint64_t v46 = v47;
              *uint64_t v44 = 0;
              if (v47) {
                MEMORY[0x21667D390](v46, 0x1000C8077774924);
              }
            }
            while (v44 != v43);
            unint64_t v45 = v312;
          }
          v313 = v43;
          operator delete(v45);
        }
        if (v301 != v304) {
          free(v301);
        }
      }
      if (!v39) {
        return 0;
      }
      char v38 = 0;
    }
    else
    {
      *((void *)v9 + 2) = v37 + 1;
      char v38 = *v37;
    }
    uint64_t v284 = 0;
    if (!mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>((uint64_t)a1, v9, &v284)) {
      return 0;
    }
    mlir::OperationState::OperationState(&v298, v284, v36);
    if (v38)
    {
      *(void *)v324 = 0;
        goto LABEL_415;
      v280.__r_.__value_.__r.__words[0] = v49;
      if (!v49) {
        goto LABEL_415;
      }
      unsigned int v50 = *(void **)(*(void *)v49 + 136);
      if (v50 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
        uint64_t v51 = v49;
      }
      else {
        uint64_t v51 = 0;
      }
      if (v50 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
      {
        uint64_t v51 = v49;
      }
      else
      {
        unsigned int v287 = (mlir::Region *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DictionaryAttr]";
        *(void *)&long long v288 = 70;
        unint64_t v52 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
        if ((unint64_t)v288 >= v52) {
          unint64_t v53 = v52;
        }
        else {
          unint64_t v53 = v288;
        }
        unsigned int v54 = (char *)v287 + v53;
        unint64_t v55 = v288 - v53;
        uint64_t v56 = 18;
        if (v55 < 0x12) {
          uint64_t v56 = v55;
        }
        uint64_t v57 = (mlir::Region *)&v54[v56];
        unint64_t v58 = v55 - v56;
        if (v58 >= v58 - 1) {
          --v58;
        }
        unsigned int v287 = v57;
        *(void *)&long long v288 = v58;
        char v59 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v324);
        if (*(void *)v324) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
        }
        if (v336)
        {
          uint64_t v60 = v334;
          if (v334)
          {
            unint64_t v61 = v335;
            uint64_t v62 = v334;
            if (v335 != v334)
            {
              do
                unint64_t v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
              while (v61 != v60);
              uint64_t v62 = v334;
            }
            v335 = v60;
            operator delete(v62);
          }
          int64_t v63 = v332;
          if (v332)
          {
            int64_t v64 = v333;
            unsigned int v65 = v332;
            if (v333 != v332)
            {
              do
              {
                uint64_t v67 = *--v64;
                uint64_t v66 = v67;
                void *v64 = 0;
                if (v67) {
                  MEMORY[0x21667D390](v66, 0x1000C8077774924);
                }
              }
              while (v64 != v63);
              unsigned int v65 = v332;
            }
            v333 = v63;
            operator delete(v65);
          }
          if ((void **)v325 != &v326) {
            free((void *)v325);
          }
        }
        if (!v59) {
          goto LABEL_415;
        }
      }
      mlir::NamedAttrList::NamedAttrList(v324, v51);
      BOOL v68 = *(void **)v324;
      if (*(unsigned char **)v324 != &v324[16])
      {
        if (__dst != &v311)
        {
          free(__dst);
          BOOL v68 = *(void **)v324;
        }
        long long __dst = v68;
        uint64_t v310 = *(void *)&v324[8];
        *(void *)v324 = &v324[16];
        *(void *)&v324[8] = 0;
        uint64_t v317 = v329;
        goto LABEL_110;
      }
      int v84 = *(_DWORD *)&v324[8];
      uint64_t v85 = v310;
      if (v310 >= *(_DWORD *)&v324[8])
      {
        if (*(_DWORD *)&v324[8]) {
          memmove(__dst, &v324[16], 16 * *(unsigned int *)&v324[8]);
        }
        goto LABEL_161;
      }
      if (HIDWORD(v310) >= *(_DWORD *)&v324[8])
      {
        if (v310)
        {
          memmove(__dst, &v324[16], 16 * v310);
          goto LABEL_159;
        }
      }
      else
      {
        LODWORD(v310) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, &v311, *(unsigned int *)&v324[8], 16);
      }
      uint64_t v85 = 0;
LABEL_159:
      if (v85 != *(unsigned int *)&v324[8]) {
        memcpy((char *)__dst + 16 * v85, (const void *)(*(void *)v324 + 16 * v85), 16 * *(unsigned int *)&v324[8] - 16 * v85);
      }
LABEL_161:
      LODWORD(v310) = v84;
      *(_DWORD *)&v324[8] = 0;
      uint64_t v317 = v329;
      if (*(unsigned char **)v324 != &v324[16]) {
        free(*(void **)v324);
      }
    }
LABEL_110:
    if ((v38 & 0x40) != 0)
    {
      if (v16 <= 0xFF)
      {
        uint64_t v222 = *((void *)a1 + 1);
        WORD4(v289) = 259;
        mlir::emitError(v222, (uint64_t)&v287, (uint64_t)v324);
        if (*(void *)v324)
        {
          std::string::size_type v223 = *v278;
          LODWORD(v280.__r_.__value_.__l.__data_) = 5;
          v280.__r_.__value_.__l.__size_ = v223;
          uint64_t v224 = &v280;
          uint64_t v225 = v325;
          if (DWORD2(v325) >= HIDWORD(v325))
          {
            unint64_t v260 = DWORD2(v325) + 1;
            if ((unint64_t)v325 <= (unint64_t)&v280
              && (unint64_t)v325 + 24 * DWORD2(v325) > (unint64_t)&v280)
            {
              v265 = (char *)&v280 - v325;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, &v326, v260, 24);
              uint64_t v225 = v325;
              uint64_t v224 = (std::string *)&v265[v325];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, &v326, v260, 24);
              uint64_t v224 = &v280;
              uint64_t v225 = v325;
            }
          }
          uint64_t v226 = v225 + 24 * DWORD2(v325);
          long long v227 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
          *(void *)(v226 + 16) = *((void *)&v224->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v226 = v227;
          uint64_t v228 = ++DWORD2(v325);
          if (*(void *)v324)
          {
            LODWORD(v280.__r_.__value_.__l.__data_) = 3;
            v280.__r_.__value_.__l.__size_ = (std::string::size_type)" with properties.";
            v280.__r_.__value_.__r.__words[2] = 17;
            uint64_t v229 = &v280;
            uint64_t v230 = v325;
            if (v228 >= HIDWORD(v325))
            {
              unint64_t v261 = v228 + 1;
              BOOL v262 = (unint64_t)v325 + 24 * v228 > (unint64_t)&v280;
              if ((unint64_t)v325 <= (unint64_t)&v280 && v262)
              {
                v266 = (char *)&v280 - v325;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, &v326, v261, 24);
                uint64_t v230 = v325;
                uint64_t v229 = (std::string *)&v266[v325];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, &v326, v261, 24);
                uint64_t v229 = &v280;
                uint64_t v230 = v325;
              }
            }
            uint64_t v231 = v230 + 24 * DWORD2(v325);
            long long v232 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
            *(void *)(v231 + 16) = *((void *)&v229->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v231 = v232;
            ++DWORD2(v325);
            if (*(void *)v324) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
            }
          }
        }
        if (v336)
        {
          int64_t v233 = v334;
          if (v334)
          {
            int64_t v234 = v335;
            int64_t v235 = v334;
            if (v335 != v334)
            {
              do
                int64_t v234 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v234 - 1);
              while (v234 != v233);
              int64_t v235 = v334;
            }
            v335 = v233;
            operator delete(v235);
          }
          int64_t v236 = v332;
          if (v332)
          {
            int64_t v237 = v333;
            int64_t v238 = v332;
            if (v333 != v332)
            {
              do
              {
                uint64_t v240 = *--v237;
                uint64_t v239 = v240;
                *int64_t v237 = 0;
                if (v240) {
                  MEMORY[0x21667D390](v239, 0x1000C8077774924);
                }
              }
              while (v237 != v236);
              int64_t v238 = v332;
            }
            v333 = v236;
            operator delete(v238);
          }
          if ((void **)v325 != &v326) {
            free((void *)v325);
          }
        }
        goto LABEL_415;
      }
      v280.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C356670;
      v280.__r_.__value_.__l.__size_ = (std::string::size_type)v279;
      v280.__r_.__value_.__r.__words[2] = v275;
      *(void *)&long long v281 = v274;
      *((void *)&v281 + 1) = v273;
      uint64_t v282 = v9;
      v283 = v278;
      unsigned int v69 = (void *)*((void *)a1 + 1);
      unint64_t v293 = 0;
        goto LABEL_415;
      if (v293 >= *((unsigned int *)a1 + 156))
      {
        unint64_t v294 = (unint64_t)"Properties idx out-of-bound for ";
        __int16 v296 = 259;
        (*(void (**)(unsigned char *__return_ptr, std::string *, unint64_t *))(v280.__r_.__value_.__r.__words[0]
                                                                                       + 16))(v324, &v280, &v294);
        unsigned int v287 = *(mlir::Region **)(v36 + 8);
        AttrData = (mlir::Region *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v287);
        if (*(void *)v324)
        {
          WORD4(v289) = 261;
          unsigned int v287 = AttrData;
          *(void *)&long long v288 = v75;
          mlir::Diagnostic::operator<<((uint64_t)&v324[8], (void ***)&v287);
        }
        char v73 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v324);
        if (*(void *)v324) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
        }
        if (v336)
        {
          unint64_t v76 = v334;
          if (v334)
          {
            uint64_t v77 = v335;
            uint64_t v78 = v334;
            if (v335 != v334)
            {
              do
                uint64_t v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
              while (v77 != v76);
              uint64_t v78 = v334;
            }
            v335 = v76;
            operator delete(v78);
          }
          unint64_t v79 = v332;
          if (!v332) {
            goto LABEL_182;
          }
          unsigned long long v80 = v333;
          uint64_t v81 = v332;
          if (v333 == v332) {
            goto LABEL_181;
          }
          do
          {
            uint64_t v83 = *--v80;
            uint64_t v82 = v83;
            *unsigned long long v80 = 0;
            if (v83) {
              MEMORY[0x21667D390](v82, 0x1000C8077774924);
            }
          }
          while (v80 != v79);
          goto LABEL_180;
        }
      }
      else
      {
        unint64_t v70 = *((void *)a1 + 76);
        if (v293 >= v70)
        {
          unint64_t v294 = (unint64_t)"Properties offset out-of-bound for ";
          __int16 v296 = 259;
          (*(void (**)(unsigned char *__return_ptr, std::string *, unint64_t *))(v280.__r_.__value_.__r.__words[0]
                                                                                         + 16))(v324, &v280, &v294);
          unsigned int v287 = *(mlir::Region **)(v36 + 8);
          unsigned long long v86 = (mlir::Region *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v287);
          if (*(void *)v324)
          {
            WORD4(v289) = 261;
            unsigned int v287 = v86;
            *(void *)&long long v288 = v87;
            mlir::Diagnostic::operator<<((uint64_t)&v324[8], (void ***)&v287);
          }
          char v73 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v324);
          if (*(void *)v324) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
          }
          if (v336)
          {
            int v88 = v334;
            if (v334)
            {
              unsigned int v89 = v335;
              unint64_t v90 = v334;
              if (v335 != v334)
              {
                do
                  unsigned int v89 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v89 - 1);
                while (v89 != v88);
                unint64_t v90 = v334;
              }
              v335 = v88;
              operator delete(v90);
            }
            unint64_t v79 = v332;
            if (!v332) {
              goto LABEL_182;
            }
            int32x4_t v91 = v333;
            uint64_t v81 = v332;
            if (v333 == v332) {
              goto LABEL_181;
            }
            do
            {
              uint64_t v93 = *--v91;
              uint64_t v92 = v93;
              *int32x4_t v91 = 0;
              if (v93) {
                MEMORY[0x21667D390](v92, 0x1000C8077774924);
              }
            }
            while (v91 != v79);
            goto LABEL_180;
          }
        }
        else
        {
          uint64_t v71 = *(void *)(*((void *)a1 + 77) + 8 * v293);
          unsigned int v287 = (mlir::Region *)(*((void *)a1 + 75) + v71);
          *(void *)&long long v288 = v70 - v71;
          *((void *)&v288 + 1) = v287;
          *(void *)&long long v289 = v69;
          *(_OWORD *)&v324[8] = *(_OWORD *)&v280.__r_.__value_.__r.__words[1];
          long long v325 = v281;
          *(void *)v324 = &unk_26C356670;
          v326 = &v287;
          uint64_t v327 = (uint64_t)v283;
          v285[0] = 0;
          unint64_t v294 = 0;
          uint64_t v295 = 0;
          {
            goto LABEL_415;
          }
          v292[0] = v294;
          v292[1] = v295;
          v292[2] = v294;
          v292[3] = v69;
          unsigned int v287 = (mlir::Region *)&unk_26C356670;
          long long v288 = *(_OWORD *)&v280.__r_.__value_.__r.__words[1];
          long long v289 = v281;
          v290 = (_anonymous_namespace_::EncodingReader *)v292;
          uint64_t v291 = v283;
          int v72 = (uint64_t (**)(mlir::Region **, mlir::Region ***))mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(v36 + 32);
          if (v72)
          {
            char v73 = (*v72)(&v287, &v298);
            goto LABEL_184;
          }
          if (*(_UNKNOWN **)(v36 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
          {
            uint64_t v194 = (_anonymous_namespace_::AttrTypeReader *)v288;
            *(void *)v324 = 0;
            {
              char v73 = v323 != 0;
            }
            else
            {
              char v73 = 0;
            }
            goto LABEL_184;
          }
          v285[0] = (unint64_t)"has properties but missing BytecodeOpInterface for ";
          __int16 v286 = 259;
          unint64_t v294 = *(void *)(v36 + 8);
          unint64_t v94 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v294);
          if (*(void *)v324)
          {
            __int16 v296 = 261;
            unint64_t v294 = v94;
            uint64_t v295 = v95;
            mlir::Diagnostic::operator<<((uint64_t)&v324[8], (void ***)&v294);
          }
          char v73 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v324);
          if (*(void *)v324) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
          }
          if (v336)
          {
            uint64_t v96 = v334;
            if (v334)
            {
              unint64_t v97 = v335;
              uint64_t v98 = v334;
              if (v335 != v334)
              {
                do
                  unint64_t v97 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v97 - 1);
                while (v97 != v96);
                uint64_t v98 = v334;
              }
              v335 = v96;
              operator delete(v98);
            }
            unint64_t v79 = v332;
            if (!v332) {
              goto LABEL_182;
            }
            uint64_t v99 = v333;
            uint64_t v81 = v332;
            if (v333 == v332)
            {
LABEL_181:
              v333 = v79;
              operator delete(v81);
LABEL_182:
              if ((void **)v325 != &v326) {
                free((void *)v325);
              }
              goto LABEL_184;
            }
            do
            {
              uint64_t v101 = *--v99;
              uint64_t v100 = v101;
              *uint64_t v99 = 0;
              if (v101) {
                MEMORY[0x21667D390](v100, 0x1000C8077774924);
              }
            }
            while (v99 != v79);
LABEL_180:
            uint64_t v81 = v332;
            goto LABEL_181;
          }
        }
      }
LABEL_184:
      if (!v73) {
        goto LABEL_415;
      }
    }
    if ((v38 & 2) != 0)
    {
      unsigned int v287 = 0;
        goto LABEL_415;
      uint64_t v102 = v287;
      unint64_t v103 = v306;
      if (v287 != (mlir::Region *)v306)
      {
        if ((unint64_t)v287 >= v306)
        {
          if ((unint64_t)v287 > v307)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v305, &v308, (unint64_t)v287, 8);
            unint64_t v103 = v306;
          }
          if (v102 != (mlir::Region *)v103) {
            bzero((void *)(v305 + 8 * v103), 8 * ((void)v102 - v103));
          }
        }
        unsigned int v306 = v102;
      }
      if ((int)v102 >= 1) {
        break;
      }
    }
LABEL_199:
    if ((v38 & 4) != 0)
    {
      v285[0] = 0;
        goto LABEL_415;
      unint64_t v107 = v285[0];
      uint64_t v108 = v301;
      if (v285[0] != v301)
      {
        if (v285[0] >= v301)
        {
          if (v285[0] > HIDWORD(v301))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, &v302, v285[0], 8);
            uint64_t v108 = v301;
          }
          if (v107 != v108) {
            bzero((void *)(v300 + 8 * v108), 8 * (v107 - v108));
          }
        }
        LODWORD(v301) = v107;
      }
      if ((int)v107 >= 1)
      {
        uint64_t v109 = 0;
        while (1)
        {
          unint64_t v110 = (void *)*((void *)a1 + 86);
          unint64_t v294 = 0;
            break;
          unint64_t v111 = v294;
          uint64_t v48 = (const mlir::OperationState *)*((void *)v9 + 3);
          uint64_t v113 = *(v110 - 7);
          uint64_t v112 = *(v110 - 6);
          unsigned int v287 = (mlir::Region *)"value";
          *(void *)&long long v288 = 5;
          v280.__r_.__value_.__r.__words[0] = v294;
          if (v294 >= (v112 - v113) >> 3)
          {
            mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v324);
            if (*(void *)v324) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
            }
            if (v336)
            {
              uint64_t v213 = v334;
              if (v334)
              {
                BOOL v214 = v335;
                long long v215 = v334;
                if (v335 != v334)
                {
                  do
                    BOOL v214 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v214 - 1);
                  while (v214 != v213);
                  long long v215 = v334;
                }
                v335 = v213;
                operator delete(v215);
              }
              unint64_t v216 = v332;
              if (v332)
              {
                long long v217 = v333;
                uint64_t v218 = v332;
                if (v333 != v332)
                {
                  do
                  {
                    uint64_t v220 = *--v217;
                    uint64_t v219 = v220;
                    *long long v217 = 0;
                    if (v220) {
                      MEMORY[0x21667D390](v219, 0x1000C8077774924);
                    }
                  }
                  while (v217 != v216);
                  uint64_t v218 = v332;
                }
                v333 = v216;
                operator delete(v218);
              }
              if ((void **)v325 != &v326) {
                free((void *)v325);
              }
            }
            break;
          }
          uint64_t v114 = *(void *)(v113 + 8 * v294);
          if (v114)
          {
            *(void *)(v300 + 8 * v109) = v114;
          }
          else
          {
            uint64_t ForwardRef = mlir::BytecodeReader::Impl::createForwardRef(a1, v48);
            *(void *)(v113 + 8 * v111) = ForwardRef;
            *(void *)(v300 + 8 * v109) = ForwardRef;
            if (!ForwardRef) {
              goto LABEL_415;
            }
          }
          if (v107 == ++v109) {
            goto LABEL_217;
          }
        }
        *(void *)(v300 + 8 * v109) = 0;
        goto LABEL_415;
      }
    }
LABEL_217:
    if ((v38 & 8) != 0)
    {
      v285[0] = 0;
        goto LABEL_415;
      unint64_t v116 = v285[0];
      uint64_t v117 = v319;
      if (v285[0] != v319)
      {
        if (v285[0] >= v319)
        {
          if (v285[0] > v320)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v318, &v321, v285[0], 8);
            uint64_t v117 = v319;
          }
          if (v116 != v117) {
            bzero((void *)(v318 + 8 * v117), 8 * (v116 - v117));
          }
        }
        unsigned int v319 = v116;
      }
      if ((int)v116 >= 1)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v116;
        do
        {
          uint64_t v120 = v318;
          unint64_t v294 = 0;
            goto LABEL_415;
          uint64_t v48 = (const mlir::OperationState *)*((void *)v9 + 3);
          uint64_t v121 = *(void *)(a3 + 40);
          unint64_t v122 = *(unsigned int *)(a3 + 48);
          unsigned int v287 = (mlir::Region *)"successor";
          *(void *)&long long v288 = 9;
          v280.__r_.__value_.__r.__words[0] = v294;
          if (v294 < v122)
          {
            *(void *)(v120 + 8 * v118) = *(void *)(v121 + 8 * v294);
          }
          else
          {
            char v123 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v324);
            if (*(void *)v324) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v324);
            }
            if (v336)
            {
              unint64_t v124 = v334;
              if (v334)
              {
                uint64_t v125 = v335;
                v126 = v334;
                if (v335 != v334)
                {
                  do
                    uint64_t v125 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v125 - 1);
                  while (v125 != v124);
                  v126 = v334;
                }
                v335 = v124;
                operator delete(v126);
              }
              unsigned int v127 = v332;
              if (v332)
              {
                long long v128 = v333;
                uint64_t v129 = v332;
                if (v333 != v332)
                {
                  do
                  {
                    uint64_t v131 = *--v128;
                    uint64_t v130 = v131;
                    void *v128 = 0;
                    if (v131) {
                      MEMORY[0x21667D390](v130, 0x1000C8077774924);
                    }
                  }
                  while (v128 != v127);
                  uint64_t v129 = v332;
                }
                v333 = v127;
                operator delete(v129);
              }
              if ((void **)v325 != &v326) {
                free((void *)v325);
              }
            }
            if (!v123) {
              goto LABEL_415;
            }
          }
        }
        while (++v118 != v119);
      }
    }
    BOOL v132 = (v38 & 0x20) != 0 && *v278 >= 3;
    int v133 = !v132;
    if (v132) {
      mlir::BytecodeReader::Impl::parseUseListOrderForRange((mlir::BytecodeReader::Impl *)v324, v9, v306);
    }
    v276 &= 0xFFFFFFFFFFFFFF00;
    if ((v38 & 0x10) != 0)
    {
      *(void *)v324 = 0;
      {
        if (v133) {
          goto LABEL_415;
        }
LABEL_310:
        long long v169 = (llvm *)v276;
        unsigned int v170 = v271;
        if (!v271)
        {
LABEL_318:
          uint64_t v175 = 0;
          goto LABEL_319;
        }
LABEL_311:
        uint64_t v171 = v170;
        uint64_t v172 = 48 * v170;
        unsigned int v173 = (char *)v169 + 24;
        do
        {
          if (*((_DWORD *)v173 - 6) <= 0xFFFFFFFD)
          {
            unsigned int v174 = (char *)*((void *)v173 - 2);
            if (v173 != v174) {
              free(v174);
            }
          }
          v173 += 48;
          v172 -= 48;
        }
        while (v172);
        uint64_t v175 = 48 * v171;
        long long v169 = (llvm *)v276;
LABEL_319:
        llvm::deallocate_buffer(v169, (void *)v175);
      }
      char v135 = v324[0];
      uint64_t v136 = *(void *)v324 >> 1;
      llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)&v322, *(void *)v324 >> 1);
      uint64_t v11 = v277;
      if ((int)v136 >= 1) {
        operator new();
      }
      int v134 = v135 & 1;
    }
    else
    {
      int v134 = 0;
      uint64_t v11 = v277;
    }
    int64_t v137 = (unsigned int *)mlir::Operation::create((mlir::Operation *)&v298, v48);
    uint64_t v138 = *(void *)(a3 + 104);
    if (v138) {
      uint64_t v139 = v138 - 8;
    }
    else {
      uint64_t v139 = 0;
    }
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v139 + 32, (uint64_t)v137);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v137);
    uint64_t v140 = *(void *)(v139 + 32);
    *uint64_t v141 = v140;
    v141[1] = v139 + 32;
    *(void *)(v140 + 8) = v141;
    *(void *)(v139 + 32) = v141;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v137);
    unint64_t v142 = v137[9];
    if (v142)
    {
      mlir::ValueRange::ValueRange(v297, (uint64_t)(v137 - 4), v142);
      if (!mlir::BytecodeReader::Impl::defineValues(a1, *((void *)v9 + 3), v297[0], v297[1]))
      {
        if (v133) {
          goto LABEL_415;
        }
        goto LABEL_310;
      }
    }
    if (!v133)
    {
      unint64_t v143 = v137[9];
      if (v143)
      {
        uint64_t v144 = 0;
        unsigned int v145 = v271;
        unsigned int v146 = v271 - 1;
        unint64_t v147 = v276;
        while (1)
        {
          if (v145)
          {
            unsigned int v153 = (37 * v144) & v146;
            uint64_t v154 = (int *)(v147 + 48 * v153);
            int v155 = *v154;
            if (*v154 != v144)
            {
              int v159 = 1;
              int v160 = *v154;
              unsigned int v161 = (37 * v144) & v146;
              while (v160 != -1)
              {
                unsigned int v162 = v161 + v159++;
                unsigned int v161 = v162 & v146;
                int v160 = *(_DWORD *)(v147 + 48 * v161);
                if (v160 == v144) {
                  goto LABEL_279;
                }
              }
              goto LABEL_276;
            }
LABEL_279:
            uint64_t v156 = (uint64_t)&v137[-6 * (v144 - 5) - 24];
            if (v144 <= 5) {
              uint64_t v156 = (uint64_t)&v137[4 * ~v144];
            }
            *(void *)v324 = v156;
            if (v155 != v144)
            {
              int v163 = 1;
              while (v155 != -1)
              {
                unsigned int v164 = v153 + v163++;
                unsigned int v153 = v164 & v146;
                uint64_t v154 = (int *)(v147 + 48 * (v164 & v146));
                int v155 = *v154;
                if (*v154 == v144) {
                  goto LABEL_282;
                }
              }
              uint64_t v154 = (int *)(v276 + 48 * v271);
            }
LABEL_282:
            int v157 = *((_DWORD *)a1 + 132);
            if (!v157)
            {
              uint64_t v158 = 0;
LABEL_284:
              llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<void *,mlir::BytecodeReader::Impl::UseListOrderStorage const&>(v272, v158, (uint64_t *)v324, (uint64_t)(v154 + 2));
              unint64_t v143 = v137[9];
              unint64_t v147 = v276;
              unsigned int v145 = v271;
              goto LABEL_276;
            }
            unint64_t v148 = (void *)*((void *)a1 + 64);
            int v149 = v157 - 1;
            unsigned int v150 = v149 & ((v156 >> 4) ^ (v156 >> 9));
            uint64_t v151 = (char *)&v148[6 * v150];
            uint64_t v152 = *(void *)v151;
            if (v156 != *(void *)v151)
            {
              uint64_t v165 = 0;
              int v166 = 1;
              while (v152 != -4096)
              {
                if (v165) {
                  BOOL v167 = 0;
                }
                else {
                  BOOL v167 = v152 == -8192;
                }
                unint64_t v147 = v276;
                if (v167) {
                  uint64_t v165 = v151;
                }
                unsigned int v168 = v150 + v166++;
                unsigned int v150 = v168 & v149;
                uint64_t v151 = (char *)&v148[6 * v150];
                uint64_t v152 = *(void *)v151;
                if (v156 == *(void *)v151) {
                  goto LABEL_276;
                }
              }
              if (v165) {
                uint64_t v158 = v165;
              }
              else {
                uint64_t v158 = v151;
              }
              goto LABEL_284;
            }
          }
LABEL_276:
          if (++v144 >= v143) {
            goto LABEL_310;
          }
        }
      }
      long long v169 = (llvm *)v276;
      unsigned int v170 = v271;
      if (!v271) {
        goto LABEL_318;
      }
      goto LABEL_311;
    }
    mlir::OperationState::~OperationState((mlir::OperationState *)&v298);
    unint64_t v176 = v137[11];
    if ((v176 & 0x7FFFFF) != 0)
    {
      *(void *)v324 = (((unint64_t)&v137[4 * ((v176 >> 23) & 1) + 17] + ((v176 >> 21) & 0x7F8)
                                                                               + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v137[10];
      *(void *)&v324[8] = *(void *)v324 + 24 * (v176 & 0x7FFFFF);
      *(void *)&v324[16] = v9;
      *(void *)&long long v325 = 0;
      DWORD2(v325) = 0;
      v326 = v328;
      uint64_t v327 = 0x600000000;
      long long v330 = 0uLL;
      char v331 = v134;
      if (v134 && *v278 >= 2)
      {
        LOBYTE(v294) = 0;
        *(_OWORD *)&v280.__r_.__value_.__l.__data_ = 0uLL;
        {
          if (v294 == 4) {
            operator new();
          }
          uint64_t v185 = *((void *)a1 + 1);
          unsigned int v287 = (mlir::Region *)"expected IR section for region";
          WORD4(v289) = 259;
          mlir::emitError(v185, (uint64_t)&v287, (uint64_t)&v298);
          uint64_t v184 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v298);
          if (v298) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v298);
          }
          if (v316)
          {
            uint64_t v186 = __p;
            if (__p)
            {
              uint64_t v187 = v315;
              long long v188 = __p;
              if (v315 != __p)
              {
                do
                  uint64_t v187 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v187 - 1);
                while (v187 != v186);
                long long v188 = __p;
              }
              v315 = v186;
              operator delete(v188);
            }
            unint64_t v189 = v312;
            if (v312)
            {
              v190 = v313;
              uint64_t v191 = v312;
              if (v313 != v312)
              {
                do
                {
                  uint64_t v193 = *--v190;
                  uint64_t v192 = v193;
                  void *v190 = 0;
                  if (v193) {
                    MEMORY[0x21667D390](v192, 0x1000C8077774924);
                  }
                }
                while (v190 != v189);
                uint64_t v191 = v312;
              }
              v313 = v189;
              operator delete(v191);
            }
            if (v301 != v304) {
              free(v301);
            }
          }
        }
        else
        {
          uint64_t v184 = 0;
        }
        goto LABEL_370;
      }
      unint64_t v177 = *(void *)(v270 + 8);
      if (v177 >= *(void *)(v270 + 16))
      {
        *(void *)(v270 + 8) = std::vector<mlir::BytecodeReader::Impl::RegionReadState>::__push_back_slow_path<mlir::BytecodeReader::Impl::RegionReadState>((void **)v270, (uint64_t)v324);
        if (!v134)
        {
LABEL_368:
          uint64_t v184 = 1;
LABEL_370:
          if (v326 != v328) {
            free(v326);
          }
          uint64_t v198 = v325;
          *(void *)&long long v325 = 0;
          if (v198) {
            MEMORY[0x21667D3C0](v198, 0x1070C401CF53446);
          }
          return v184;
        }
LABEL_334:
        uint64_t v182 = (void *)*((void *)a1 + 86);
        if ((unint64_t)v182 >= *((void *)a1 + 87))
        {
          uint64_t v183 = std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>(v269);
        }
        else
        {
          *((_OWORD *)v182 + 1) = 0u;
          *((_OWORD *)v182 + 2) = 0u;
          v182[6] = 0;
          *(_OWORD *)uint64_t v182 = 0u;
          v182[3] = v182 + 5;
          uint64_t v183 = (char *)(v182 + 7);
          *((_DWORD *)v182 + 9) = 4;
        }
        *((void *)a1 + 86) = v183;
        uint64_t v184 = 1;
        goto LABEL_370;
      }
      long long v178 = *(_OWORD *)v324;
      *(void *)(v177 + 16) = *(void *)&v324[16];
      *(_OWORD *)unint64_t v177 = v178;
      uint64_t v179 = v325;
      *(void *)&long long v325 = 0;
      *(void *)(v177 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v179;
      *(_DWORD *)(v177 + 32) = DWORD2(v325);
      char v180 = (void *)(v177 + 56);
      *(void *)(v177 + 40) = v177 + 56;
      *(void *)(v177 + 48) = 0x600000000;
      if ((unsigned char *)v177 == v324 || (int v181 = v327) == 0)
      {
LABEL_367:
        long long v197 = v330;
        *(unsigned char *)(v177 + 120) = v331;
        *(_OWORD *)(v177 + 104) = v197;
        *(void *)(v270 + 8) = v177 + 128;
        if (!v134) {
          goto LABEL_368;
        }
        goto LABEL_334;
      }
      if (v326 != v328)
      {
        *(void *)(v177 + 40) = v326;
        *(_DWORD *)(v177 + 48) = v181;
        *(_DWORD *)(v177 + 52) = HIDWORD(v327);
        v326 = v328;
        HIDWORD(v327) = 0;
LABEL_366:
        LODWORD(v327) = 0;
        goto LABEL_367;
      }
      if (v327 < 7)
      {
        uint64_t v196 = v328;
        uint64_t v195 = v327;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v177 + 40, (void *)(v177 + 56), v327, 8);
        uint64_t v195 = v327;
        if (!v327)
        {
LABEL_365:
          *(_DWORD *)(v177 + 48) = v181;
          goto LABEL_366;
        }
        uint64_t v196 = v326;
        char v180 = *(void **)(v177 + 40);
      }
      memcpy(v180, v196, 8 * v195);
      goto LABEL_365;
    }
    uint64_t v7 = v279;
    uint64_t v199 = *(void *)(a3 + 112);
    *(void *)(a3 + 112) = v199 - 1;
    if (!v199) {
      goto LABEL_376;
    }
  }
  uint64_t v104 = 0;
  while (1)
  {
    uint64_t v105 = v305;
    *(void *)v324 = 0;
      break;
    *(void *)(v105 + 8 * v104) = v106;
    if (!v106) {
      break;
    }
    if (v102 == ++v104) {
      goto LABEL_199;
    }
  }
LABEL_415:
  mlir::OperationState::~OperationState((mlir::OperationState *)&v298);
  return 0;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[54]>(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)v36);
  uint64_t v5 = v36[0];
  if (v36[0])
  {
    int v33 = 3;
    unint64_t v34 = a3;
    size_t v35 = strlen(a3);
    uint64_t v6 = &v33;
    uint64_t v7 = (char *)__src;
    if (v39 >= v40)
    {
      unint64_t v31 = v39 + 1;
      if (__src <= &v33 && (char *)__src + 24 * v39 > (char *)&v33)
      {
        int64_t v32 = (char *)&v33 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v41, v31, 24);
        uint64_t v7 = (char *)__src;
        uint64_t v6 = (int *)((char *)__src + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v41, v31, 24);
        uint64_t v6 = &v33;
        uint64_t v7 = (char *)__src;
      }
    }
    uint64_t v8 = &v7[24 * v39];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v39;
    uint64_t v5 = v36[0];
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v46)
  {
    *(void *)(a1 + 8) = v36[1];
    unint64_t v10 = v39;
    *(_DWORD *)(a1 + 16) = v37;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v10 || v36 == (void *)a1)
    {
      int v12 = 1;
      goto LABEL_17;
    }
    if (__src != v41)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      unsigned int v11 = v40;
      *(_DWORD *)(a1 + 32) = v10;
      *(_DWORD *)(a1 + 36) = v11;
      __src = v41;
      unsigned int v40 = 0;
      int v12 = 1;
LABEL_16:
      unsigned int v39 = 0;
LABEL_17:
      uint64_t v14 = v45;
      *(void *)(a1 + 152) = v43;
      *(_OWORD *)(a1 + 136) = v42;
      long long v42 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(void *)(a1 + 176) = v14;
      uint64_t v43 = 0;
      long long __p = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v12)
      {
        char v15 = (void *)__p;
        if ((void)__p)
        {
          unsigned int v16 = (void *)*((void *)&__p + 1);
          char v17 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              unsigned int v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            char v17 = (void *)__p;
          }
          *((void *)&__p + 1) = v15;
          operator delete(v17);
        }
        uint64_t v18 = (void *)v42;
        if ((void)v42)
        {
          uint64_t v19 = (void *)*((void *)&v42 + 1);
          uint64_t v20 = (void *)v42;
          if (*((void *)&v42 + 1) != (void)v42)
          {
            do
            {
              uint64_t v22 = *--v19;
              uint64_t v21 = v22;
              void *v19 = 0;
              if (v22) {
                MEMORY[0x21667D390](v21, 0x1000C8077774924);
              }
            }
            while (v19 != v18);
            uint64_t v20 = (void *)v42;
          }
          *((void *)&v42 + 1) = v18;
          operator delete(v20);
        }
        if (__src != v41) {
          free(__src);
        }
        unsigned __int8 v46 = 0;
      }
      goto LABEL_34;
    }
    if (v10 < 5)
    {
      unint64_t v13 = v10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v10, 24);
      unint64_t v13 = v39;
      if (!v39) {
        goto LABEL_15;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v13);
LABEL_15:
    *(_DWORD *)(a1 + 32) = v10;
    int v12 = v46;
    goto LABEL_16;
  }
LABEL_34:
  mlir::InFlightDiagnostic::abandon(v36);
  if (v36[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
  }
  if (v46)
  {
    int v23 = (void *)__p;
    if ((void)__p)
    {
      uint64_t v24 = (void *)*((void *)&__p + 1);
      uint64_t v25 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = (void *)__p;
      }
      *((void *)&__p + 1) = v23;
      operator delete(v25);
    }
    uint64_t v26 = (void *)v42;
    if ((void)v42)
    {
      uint64_t v27 = (void *)*((void *)&v42 + 1);
      uint64_t v28 = (void *)v42;
      if (*((void *)&v42 + 1) != (void)v42)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        uint64_t v28 = (void *)v42;
      }
      *((void *)&v42 + 1) = v26;
      operator delete(v28);
    }
    if (__src != v41) {
      free(__src);
    }
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<mlir::Operation>,llvm::ilist_traits<mlir::Operation>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (a4 != a5 && a2 != a5)
  {
    uint64_t result = llvm::ilist_traits<mlir::Operation>::transferNodesFromList(result, a3, (uint64_t)a4, (uint64_t)a5);
    uint64_t v8 = *a5;
    uint64_t v9 = *a4;
    *(void *)(v9 + 8) = a5;
    *a5 = v9;
    uint64_t v10 = *a2;
    *(void *)(v8 + 8) = a2;
    *a4 = v10;
    *(void *)(v10 + 8) = a4;
    *a2 = v8;
  }
  return result;
}

uint64_t mlir::BytecodeReader::Impl::parseRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_anonymous_namespace_::EncodingReader **)(a2 + 16);
  unint64_t v7 = 0;
    return 0;
  unint64_t v4 = v7;
  if (v7)
  {
    unint64_t v6 = 0;
    {
      *(_DWORD *)(a2 + 32) = v6;
      *(_DWORD *)(a2 + 48) = 0;
      if (v4 > *(unsigned int *)(a2 + 52)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v4, 8);
      }
      operator new();
    }
    return 0;
  }
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::createForwardRef(mlir::BytecodeReader::Impl *this, const mlir::OperationState *a2)
{
  uint64_t v3 = (mlir::BytecodeReader::Impl *)((char *)this + 832);
  unint64_t v4 = (ZinIrHalH13g *)*((void *)this + 104);
  uint64_t v5 = (ZinIrHalH13g **)((char *)this + 760);
  if (v4 == v3)
  {
    unint64_t v7 = (ZinIrHalH13g *)mlir::Operation::create((mlir::BytecodeReader::Impl *)((char *)this + 872), a2);
    llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)this + 760, (uint64_t)v7);
    ZinIrHalH13g::~ZinIrHalH13g(v7);
    uint64_t v8 = *((void *)this + 95);
    *uint64_t v9 = v8;
    v9[1] = v5;
    *(void *)(v8 + 8) = v9;
    *((void *)this + 95) = v9;
    ZinIrHalH13g::~ZinIrHalH13g(v7);
  }
  else
  {
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    mlir::Operation::moveBefore(v6, (mlir::BytecodeReader::Impl *)((char *)this + 728), (uint64_t *)this + 95);
  }
  ZinIrHalH13g::~ZinIrHalH13g(*v5);
  return v10 - 16;
}

BOOL mlir::isBytecode(uint64_t a1)
{
  return *(void *)(a1 + 8) >= 4uLL && **(_DWORD **)a1 == 1391414349;
}

uint64_t mlir::readBytecodeFile(_OWORD *a1, uint64_t a2, mlir::StringAttr **a3)
{
  long long v3 = a1[1];
  v9[0] = *a1;
  v9[1] = v3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = readBytecodeFileImpl((uint64_t)v9, a2, a3, (uint64_t)&v7);
  uint64_t v5 = result;
  uint64_t v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v5;
    }
  }
  return result;
}

uint64_t readBytecodeFileImpl(uint64_t a1, uint64_t a2, mlir::StringAttr **a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v8 = (mlir::MLIRContext *)mlir::FileLineColLoc::get(*a3, *(const char **)(a1 + 16), *(void *)(a1 + 24), 0, 0);
  if (*(void *)(a1 + 8) >= 4uLL && **(_DWORD **)a1 == 1391414349)
  {
    long long v19 = *(_OWORD *)(a1 + 16);
    v21[0] = *(_OWORD *)a1;
    v21[1] = v19;
    mlir::BytecodeReader::Impl::Impl((uint64_t)v24, v8, a3, 0, v21, a4);
    mlir::BytecodeReader::Impl::read((uint64_t *)v24, a2, 0, v20);
    mlir::BytecodeReader::Impl::~Impl(v24);
  }
  uint64_t v22 = "input buffer is not an MLIR bytecode file";
  __int16 v23 = 259;
  mlir::emitError((uint64_t)v8, (uint64_t)&v22, (uint64_t)v24);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v31)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      unsigned int v11 = v30;
      int v12 = __p;
      if (v30 != __p)
      {
        do
          unsigned int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        int v12 = __p;
      }
      uint64_t v30 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v27;
    if (v27)
    {
      uint64_t v14 = v28;
      char v15 = v27;
      if (v28 != v27)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        char v15 = v27;
      }
      uint64_t v28 = v13;
      operator delete(v15);
    }
    if (v25 != &v26) {
      free(v25);
    }
  }
  return v9;
}

uint64_t mlir::readBytecodeFile(const llvm::MemoryBuffer ****a1, uint64_t a2, mlir::StringAttr **a3)
{
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v7, ***a1);
  return readBytecodeFileImpl((uint64_t)v7, a2, a3, (uint64_t)a1);
}

uint64_t mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, char *__s, char **a3, char *a4, char **a5, char *a6)
{
  size_t v12 = strlen(__s);
  unint64_t v13 = *(void *)(a1 + 16);
  int v32 = 3;
  int v33 = __s;
  size_t v34 = v12;
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  char v15 = &v32;
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v26 = v14 + 1;
    BOOL v27 = v13 + 24 * v14 > (unint64_t)&v32;
    if (v13 <= (unint64_t)&v32 && v27)
    {
      uint64_t v30 = (char *)&v32 - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      char v15 = (int *)&v30[v13];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      char v15 = &v32;
    }
  }
  uint64_t v16 = v13 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  unsigned int v18 = *(_DWORD *)(a1 + 28);
  uint64_t v19 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v19;
  uint64_t v20 = *a3;
  int v32 = 5;
  int v33 = v20;
  unint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = &v32;
  if (v19 >= v18)
  {
    unint64_t v28 = v19 + 1;
    BOOL v29 = v21 + 24 * v19 > (unint64_t)&v32;
    if (v21 <= (unint64_t)&v32 && v29)
    {
      char v31 = (char *)&v32 - v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = (int *)&v31[v21];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = &v32;
    }
  }
  uint64_t v23 = v21 + 24 * *(unsigned int *)(a1 + 24);
  long long v24 = *(_OWORD *)v22;
  *(void *)(v23 + 16) = *((void *)v22 + 2);
  *(_OWORD *)uint64_t v23 = v24;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(a1, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, char *__s, char **a3, char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  uint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  size_t v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      unsigned int v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      size_t v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      size_t v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<unsigned long,char const(&)[8]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<unsigned long,char const(&)[8]>(uint64_t a1, char **a2, char *__s)
{
  uint64_t v6 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *a2;
  int v24 = 5;
  uint64_t v25 = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v24;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v5 + 24 * v8 > (unint64_t)&v24;
    if (v5 <= (unint64_t)&v24 && v20)
    {
      uint64_t v22 = (char *)&v24 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v22[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v9 = &v24;
    }
  }
  uint64_t v10 = v5 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  uint64_t v12 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v12;
  size_t v13 = strlen(__s);
  int v24 = 3;
  uint64_t v25 = __s;
  size_t v26 = v13;
  unint64_t v14 = *(void *)(a1 + 16);
  char v15 = &v24;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v12 + 1;
    if (v14 <= (unint64_t)&v24 && v14 + 24 * v12 > (unint64_t)&v24)
    {
      uint64_t v23 = (char *)&v24 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      char v15 = (int *)&v23[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      char v15 = &v24;
    }
  }
  uint64_t v16 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t anonymous namespace'::EncodingReader::parseByte<unsigned char>(void *a1, unsigned char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)(*a1 + a1[1]))
  {
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    }
    if (v20)
    {
      unint64_t v5 = __p;
      if (__p)
      {
        uint64_t v6 = v19;
        uint64_t v7 = __p;
        if (v19 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v19 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v16;
      if (v16)
      {
        uint64_t v9 = v17;
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            *uint64_t v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v16;
        }
        long long v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15) {
        free(v14);
      }
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2;
    return 1;
  }
  return v3;
}

uint64_t anonymous namespace'::EncodingReader::alignTo(_anonymous_namespace_::EncodingReader *this, __int32 a2, int8x8_t a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  a3.i32[0] = a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.i32[0] == 1)
  {
    uint64_t v5 = (a2 - 1);
    do
    {
      if ((v5 & *((void *)this + 2)) == 0) {
        return 1;
      }
      unsigned __int8 v74 = 0;
        return 0;
      unint64_t v6 = v74;
    }
    while (v74 == 203);
    if (v74)
    {
      uint64_t v7 = 16;
      do
      {
        *((unsigned char *)&v86 + v7--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 & 0xF];
        BOOL v8 = v6 > 0xF;
        v6 >>= 4;
      }
      while (v8);
      uint64_t v9 = v7 + 1;
      std::string::size_type v10 = 16 - v7;
      if ((unint64_t)(16 - v7) >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
    }
    else
    {
      LOBYTE(v88) = 48;
      uint64_t v9 = 16;
      std::string::size_type v10 = 1;
    }
    if (v10 > 0x16)
    {
      uint64_t v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v23 = v10 | 7;
      }
      uint64_t v24 = v23 + 1;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (v9 == 17)
      {
LABEL_30:
        p_dst->__r_.__value_.__s.__data_[0] = 0;
        uint64_t v25 = std::string::insert(&__dst, 0, "expected alignment byte (0xCB), but got: '0x");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v71.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        BOOL v27 = std::string::append(&v71, "'");
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v72 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        std::string::size_type v73 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        mlir::emitError(*((void *)this + 3), (uint64_t)&v86);
        BOOL v29 = v86;
        if (v86)
        {
          LOWORD(v79) = 260;
          uint64_t v75 = v72;
          mlir::Diagnostic::operator<<((uint64_t)&v87, &v75);
          BOOL v29 = v86;
        }
        uint64_t v75 = v29;
        LOBYTE(v76) = 0;
        char v85 = 0;
        if (!v96)
        {
LABEL_94:
          mlir::InFlightDiagnostic::abandon(&v86);
          if (v86) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
          }
          if (v96)
          {
            uint64_t v51 = (void *)__p;
            if ((void)__p)
            {
              unint64_t v52 = (void *)*((void *)&__p + 1);
              unint64_t v53 = (void *)__p;
              if (*((void *)&__p + 1) != (void)__p)
              {
                do
                  unint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                while (v52 != v51);
                unint64_t v53 = (void *)__p;
              }
              *((void *)&__p + 1) = v51;
              operator delete(v53);
            }
            unsigned int v54 = (void *)v92;
            if ((void)v92)
            {
              unint64_t v55 = (void *)*((void *)&v92 + 1);
              uint64_t v56 = (void *)v92;
              if (*((void *)&v92 + 1) != (void)v92)
              {
                do
                {
                  uint64_t v58 = *--v55;
                  uint64_t v57 = v58;
                  void *v55 = 0;
                  if (v58) {
                    MEMORY[0x21667D390](v57, 0x1000C8077774924);
                  }
                }
                while (v55 != v54);
                uint64_t v56 = (void *)v92;
              }
              *((void *)&v92 + 1) = v54;
              operator delete(v56);
            }
            if (__src != v91) {
              free(__src);
            }
          }
          uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
          if (v75) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
          }
          if (v85)
          {
            char v59 = (void *)v83;
            if ((void)v83)
            {
              uint64_t v60 = (void *)*((void *)&v83 + 1);
              unint64_t v61 = (void *)v83;
              if (*((void *)&v83 + 1) != (void)v83)
              {
                do
                  uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                unint64_t v61 = (void *)v83;
              }
              *((void *)&v83 + 1) = v59;
              operator delete(v61);
            }
            uint64_t v62 = (void *)v81;
            if ((void)v81)
            {
              int64_t v63 = (void *)*((void *)&v81 + 1);
              int64_t v64 = (void *)v81;
              if (*((void *)&v81 + 1) != (void)v81)
              {
                do
                {
                  uint64_t v66 = *--v63;
                  uint64_t v65 = v66;
                  *int64_t v63 = 0;
                  if (v66) {
                    MEMORY[0x21667D390](v65, 0x1000C8077774924);
                  }
                }
                while (v63 != v62);
                int64_t v64 = (void *)v81;
              }
              *((void *)&v81 + 1) = v62;
              operator delete(v64);
            }
            if (v78 != v80) {
              free(v78);
            }
          }
          if (SHIBYTE(v73) < 0)
          {
            operator delete(v72[0]);
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_132:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return v21;
              }
LABEL_136:
              operator delete(__dst.__r_.__value_.__l.__data_);
              return v21;
            }
          }
          else if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_132;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return v21;
          }
          goto LABEL_136;
        }
        unint64_t v76 = v87;
        int v30 = v90;
        LODWORD(v77) = v88;
        char v31 = v80;
        uint64_t v78 = v80;
        uint64_t v79 = *(void *)"";
        if (!v90)
        {
          int v33 = 1;
          goto LABEL_90;
        }
        int v32 = __src;
        if (__src != v91)
        {
          uint64_t v78 = __src;
          uint64_t v79 = v90;
          __src = v91;
          HIDWORD(v90) = 0;
          int v33 = 1;
LABEL_89:
          LODWORD(v90) = 0;
LABEL_90:
          long long v81 = v92;
          uint64_t v82 = v93;
          long long v92 = 0uLL;
          long long v83 = __p;
          uint64_t v84 = v95;
          uint64_t v93 = 0;
          long long __p = 0uLL;
          uint64_t v95 = 0;
          char v85 = 1;
          if (v33)
          {
            if (__src != v91) {
              free(__src);
            }
            unsigned __int8 v96 = 0;
          }
          goto LABEL_94;
        }
        if (v90 < 5)
        {
          uint64_t v50 = v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v90, 24);
          uint64_t v50 = v90;
          if (!v90)
          {
LABEL_88:
            LODWORD(v79) = v30;
            int v33 = v96;
            goto LABEL_89;
          }
          int v32 = __src;
          char v31 = v78;
        }
        memcpy(v31, v32, 24 * v50);
        goto LABEL_88;
      }
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
      p_dst = &__dst;
      if (v9 == 17) {
        goto LABEL_30;
      }
    }
    memcpy(p_dst, (char *)&v86 + v9, v10);
    p_dst = (std::string *)((char *)p_dst + v10);
    goto LABEL_30;
  }
  mlir::emitError(*((void *)this + 3), (uint64_t)&v86);
  uint64_t v12 = v86;
  if (v86)
  {
    LODWORD(v75) = 3;
    unint64_t v76 = "expected alignment to be a power-of-two";
    uint64_t v77 = 39;
    size_t v13 = &v75;
    unint64_t v14 = (char *)__src;
    if (v90 >= HIDWORD(v90))
    {
      unint64_t v68 = v90 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v90 > (char *)&v75)
      {
        int64_t v69 = (char *)&v75 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v91, v68, 24);
        unint64_t v14 = (char *)__src;
        size_t v13 = (void ***)((char *)__src + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v91, v68, 24);
        size_t v13 = &v75;
        unint64_t v14 = (char *)__src;
      }
    }
    uint64_t v15 = &v14[24 * v90];
    long long v16 = *(_OWORD *)v13;
    *((void *)v15 + 2) = v13[2];
    *(_OWORD *)uint64_t v15 = v16;
    LODWORD(v90) = v90 + 1;
    uint64_t v12 = v86;
  }
  uint64_t v75 = v12;
  LOBYTE(v76) = 0;
  char v85 = 0;
  if (v96)
  {
    unint64_t v76 = v87;
    int v17 = v90;
    LODWORD(v77) = v88;
    unsigned int v18 = v80;
    uint64_t v78 = v80;
    uint64_t v79 = *(void *)"";
    if (!v90)
    {
      int v20 = 1;
      goto LABEL_42;
    }
    unint64_t v19 = v91;
    if (__src != v91)
    {
      uint64_t v78 = __src;
      uint64_t v79 = v90;
      __src = v91;
      HIDWORD(v90) = 0;
      int v20 = 1;
LABEL_41:
      LODWORD(v90) = 0;
LABEL_42:
      long long v81 = v92;
      uint64_t v82 = v93;
      long long v92 = 0uLL;
      long long v83 = __p;
      uint64_t v84 = v95;
      uint64_t v93 = 0;
      long long __p = 0uLL;
      uint64_t v95 = 0;
      char v85 = 1;
      if (v20)
      {
        if (__src != v91) {
          free(__src);
        }
        unsigned __int8 v96 = 0;
      }
      goto LABEL_46;
    }
    if (v90 < 5)
    {
      uint64_t v22 = v90;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v90, 24);
      uint64_t v22 = v90;
      if (!v90)
      {
LABEL_40:
        LODWORD(v79) = v17;
        int v20 = v96;
        goto LABEL_41;
      }
      unint64_t v19 = __src;
      unsigned int v18 = v78;
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_40;
  }
LABEL_46:
  mlir::InFlightDiagnostic::abandon(&v86);
  if (v86) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
  }
  if (v96)
  {
    size_t v34 = (void *)__p;
    if ((void)__p)
    {
      size_t v35 = (void *)*((void *)&__p + 1);
      uint64_t v36 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          size_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        uint64_t v36 = (void *)__p;
      }
      *((void *)&__p + 1) = v34;
      operator delete(v36);
    }
    int v37 = (void *)v92;
    if ((void)v92)
    {
      char v38 = (void *)*((void *)&v92 + 1);
      unsigned int v39 = (void *)v92;
      if (*((void *)&v92 + 1) != (void)v92)
      {
        do
        {
          uint64_t v41 = *--v38;
          uint64_t v40 = v41;
          *char v38 = 0;
          if (v41) {
            MEMORY[0x21667D390](v40, 0x1000C8077774924);
          }
        }
        while (v38 != v37);
        unsigned int v39 = (void *)v92;
      }
      *((void *)&v92 + 1) = v37;
      operator delete(v39);
    }
    if (__src != v91) {
      free(__src);
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
  if (v75) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
  }
  if (v85)
  {
    long long v42 = (void *)v83;
    if ((void)v83)
    {
      uint64_t v43 = (void *)*((void *)&v83 + 1);
      uint64_t v44 = (void *)v83;
      if (*((void *)&v83 + 1) != (void)v83)
      {
        do
          uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        uint64_t v44 = (void *)v83;
      }
      *((void *)&v83 + 1) = v42;
      operator delete(v44);
    }
    uint64_t v45 = (void *)v81;
    if ((void)v81)
    {
      unsigned __int8 v46 = (void *)*((void *)&v81 + 1);
      uint64_t v47 = (void *)v81;
      if (*((void *)&v81 + 1) != (void)v81)
      {
        do
        {
          uint64_t v49 = *--v46;
          uint64_t v48 = v49;
          void *v46 = 0;
          if (v49) {
            MEMORY[0x21667D390](v48, 0x1000C8077774924);
          }
        }
        while (v46 != v45);
        uint64_t v47 = (void *)v81;
      }
      *((void *)&v81 + 1) = v45;
      operator delete(v47);
    }
    if (v78 != v80) {
      free(v78);
    }
  }
  return v21;
}

uint64_t anonymous namespace'::EncodingReader::parseBytes(void *a1, char *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t v3 = a1[2];
  if (*a1 + a1[1] - v3 >= (unint64_t)a2)
  {
    *a3 = v3;
    a3[1] = a2;
    a1[2] += a2;
    return 1;
  }
  else
  {
    unint64_t v14 = (char *)(*a1 + a1[1] - v3);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        unint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            unint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        std::string::size_type v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            *uint64_t v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          std::string::size_type v10 = v19;
        }
        int v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

uint64_t mlir::Diagnostic::append<char const(&)[21],unsigned int>(uint64_t a1, char *__s, unsigned int *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v26 = 3;
  BOOL v27 = __s;
  size_t v28 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v8 + 1;
    BOOL v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      uint64_t v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = &v26;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  uint64_t v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
  unint64_t v14 = (char *)*a3;
  int v26 = 5;
  BOOL v27 = v14;
  unint64_t v15 = *(void *)(a1 + 16);
  long long v16 = &v26;
  if (v13 >= v12)
  {
    unint64_t v22 = v13 + 1;
    BOOL v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      uint64_t v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      long long v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      long long v16 = &v26;
    }
  }
  uint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[21],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, uint64_t a2, char **a3, char **a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v29, "attempting to parse ", a3, " bytes when only ", a4, " remain");
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        unsigned int v12 = __p[0];
        if (__p[0])
        {
          uint64_t v13 = __p[1];
          unint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            unint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        unint64_t v15 = v35[0];
        if (v35[0])
        {
          long long v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              uint64_t v19 = *--v16;
              uint64_t v18 = v19;
              *long long v16 = 0;
              if (v19) {
                MEMORY[0x21667D390](v18, 0x1000C8077774924);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    unint64_t v20 = __p[0];
    if (__p[0])
    {
      BOOL v21 = __p[1];
      unint64_t v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          BOOL v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        unint64_t v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    BOOL v23 = v35[0];
    if (v35[0])
    {
      uint64_t v24 = v35[1];
      uint64_t v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        uint64_t v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir13LogicalResultEPN12_GLOBAL__N_115BytecodeDialectEEE11callback_fnIZZNS3_14AttrTypeReader10initializeENS_15MutableArrayRefINSt3__110unique_ptrIS4_NSB_14default_deleteIS4_EEEEEENS_8ArrayRefIhEESI_ENK3__0clIRNS_11SmallVectorINS9_5EntryINS1_9AttributeEEELj1EEEEEDaOT_EUlS5_E_EES2_lS5_(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = (*v5)++;
  uint64_t v7 = *v4;
  unint64_t v24 = 0;
  unint64_t v8 = v24;
  *(unsigned char *)(v7 + 40 * v6 + 16) = v24 & 1;
  unint64_t v9 = v8 >> 1;
  unint64_t v24 = v9;
  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = **(void **)(a1 + 24);
  if (v11 + v9 <= v10[1])
  {
    uint64_t v21 = *v10 + v11;
    unint64_t v22 = (void *)(v7 + 40 * v6);
    v22[3] = v21;
    v22[4] = v9;
    v22[1] = a2;
    **(void **)(a1 + 24) += v9;
    return 1;
  }
  else
  {
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      uint64_t v13 = __p;
      if (__p)
      {
        unint64_t v14 = v31;
        unint64_t v15 = __p;
        if (v31 != __p)
        {
          do
            unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          unint64_t v15 = __p;
        }
        char v31 = v13;
        operator delete(v15);
      }
      long long v16 = v28;
      if (v28)
      {
        uint64_t v17 = v29;
        uint64_t v18 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v20 = *--v17;
            uint64_t v19 = v20;
            void *v17 = 0;
            if (v20) {
              MEMORY[0x21667D390](v19, 0x1000C8077774924);
            }
          }
          while (v17 != v16);
          uint64_t v18 = v28;
        }
        uint64_t v29 = v16;
        operator delete(v18);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v12;
}

uint64_t mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>(uint64_t a1, char *__s, char **a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  char v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      uint64_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
  uint64_t v18 = *a3;
  int v30 = 5;
  char v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      uint64_t v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      uint64_t v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      uint64_t v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(uint64_t a1, char *__s, char **a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v26 = 3;
  BOOL v27 = __s;
  size_t v28 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v8 + 1;
    BOOL v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      unint64_t v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = &v26;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  uint64_t v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
  uint64_t v14 = *a3;
  int v26 = 5;
  BOOL v27 = v14;
  unint64_t v15 = *(void *)(a1 + 16);
  unsigned int v16 = &v26;
  if (v13 >= v12)
  {
    unint64_t v22 = v13 + 1;
    BOOL v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      BOOL v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v16 = &v26;
    }
  }
  uint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t anonymous namespace'::EncodingReader::parseBytes(_anonymous_namespace_::EncodingReader *this, size_t __n, unsigned __int8 *__dst)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v17 = (char *)__n;
  uint64_t v5 = (const void *)*((void *)this + 2);
  if (*(void *)this + *((void *)this + 1) - (void)v5 >= __n)
  {
    memcpy(__dst, v5, __n);
    *((void *)this + 2) += __n;
    return 1;
  }
  else
  {
    unsigned int v16 = (char *)(*(void *)this + *((void *)this + 1) - (void)v5);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v24;
        unint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        unint64_t v24 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v21;
      if (v21)
      {
        long long v11 = v22;
        unsigned int v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            *long long v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          unsigned int v12 = v21;
        }
        unint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t anonymous namespace'::EncodingReader::parseMultiByteVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  v5[1] = *MEMORY[0x263EF8340];
  size_t v3 = __clz(__rbit32(*a2));
  v5[0] = *a2;
    return 0;
  *a2 = v5[0] >> (v3 + 1);
  return 1;
}

uint64_t resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(uint64_t a1, uint64_t a2, unsigned int a3, char *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v18[0] = a6;
  v18[1] = a7;
  uint64_t v17 = a4;
  if (a3 <= (unint64_t)a4)
  {
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
    if (v19[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
    }
    if (v26)
    {
      uint64_t v8 = __p;
      if (__p)
      {
        unint64_t v9 = v25;
        uint64_t v10 = __p;
        if (v25 != __p)
        {
          do
            unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          uint64_t v10 = __p;
        }
        char v25 = v8;
        operator delete(v10);
      }
      long long v11 = v22;
      if (v22)
      {
        unsigned int v12 = v23;
        uint64_t v13 = v22;
        if (v23 != v22)
        {
          do
          {
            uint64_t v15 = *--v12;
            uint64_t v14 = v15;
            *unsigned int v12 = 0;
            if (v15) {
              MEMORY[0x21667D390](v14, 0x1000C8077774924);
            }
          }
          while (v12 != v11);
          uint64_t v13 = v22;
        }
        BOOL v23 = v11;
        operator delete(v13);
      }
      if (v20 != &v21) {
        free(v20);
      }
    }
  }
  else
  {
    *a5 = *(_OWORD *)(a2 + 16 * (void)a4);
    return 1;
  }
  return v7;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>((uint64_t)&v29, "invalid ", a3, " index: ", a4);
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        unsigned int v12 = __p[0];
        if (__p[0])
        {
          uint64_t v13 = __p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        uint64_t v15 = v35[0];
        if (v35[0])
        {
          unsigned int v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              uint64_t v19 = *--v16;
              uint64_t v18 = v19;
              *unsigned int v16 = 0;
              if (v19) {
                MEMORY[0x21667D390](v18, 0x1000C8077774924);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    uint64_t v20 = __p[0];
    if (__p[0])
    {
      uint64_t v21 = __p[1];
      unint64_t v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        unint64_t v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    BOOL v23 = v35[0];
    if (v35[0])
    {
      unint64_t v24 = v35[1];
      char v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *unint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        char v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>(uint64_t a1, char *__s, uint64_t a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v22) = 3;
  BOOL v23 = __s;
  size_t v24 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v13 + 1;
    BOOL v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      uint64_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = (void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = &v22;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  __int16 v25 = 261;
  uint64_t v17 = *(char **)(a3 + 8);
  unint64_t v22 = *(void ***)a3;
  BOOL v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

uint64_t parseEntry<llvm::MutableArrayRef<std::unique_ptr<anonymous namespace'::BytecodeDialect>>,std::unique_ptr<anonymous namespace'::BytecodeDialect>*>(_anonymous_namespace_::EncodingReader *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
    return 0;
  uint64_t v10 = *((void *)a1 + 3);
  uint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  v25[0] = a4;
  v25[1] = a5;
  size_t v24 = (char *)v23;
  if (v12 <= v23)
  {
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v32;
        long long v16 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          long long v16 = __p;
        }
        unsigned int v32 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v29;
      if (v29)
      {
        uint64_t v18 = v30;
        unint64_t v19 = v29;
        if (v30 != v29)
        {
          do
          {
            uint64_t v21 = *--v18;
            uint64_t v20 = v21;
            void *v18 = 0;
            if (v21) {
              MEMORY[0x21667D390](v20, 0x1000C8077774924);
            }
          }
          while (v18 != v17);
          unint64_t v19 = v29;
        }
        int v30 = v17;
        operator delete(v19);
      }
      if (v27 != &v28) {
        free(v27);
      }
    }
  }
  else
  {
    *a3 = v11 + 8 * v23;
    return 1;
  }
  return v13;
}

void anonymous namespace'::DialectReader::~DialectReader(_anonymous_namespace_::DialectReader *this)
{
}

void anonymous namespace'::DialectReader::emitError(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  mlir::emitError(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)&v20);
  uint64_t v5 = v20;
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v21, a2);
    uint64_t v5 = v20;
  }
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  if (v31)
  {
    *(void *)(a3 + 8) = v21;
    unint64_t v6 = v24;
    *(_DWORD *)(a3 + 16) = v22;
    uint64_t v7 = (void *)(a3 + 40);
    *(void *)(a3 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a3 + 40;
    *(void *)(a3 + 32) = *(void *)"";
    if (!v6 || &v20 == (uint64_t *)a3)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    unint64_t v8 = __src;
    if (__src != v26)
    {
      *(void *)(a3 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v25;
      *(_DWORD *)(a3 + 32) = v6;
      *(_DWORD *)(a3 + 36) = v9;
      __src = v26;
      int v25 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v24 = 0;
LABEL_16:
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v27;
      *(void *)(a3 + 152) = v28;
      v27[0] = 0;
      v27[1] = 0;
      *(_OWORD *)(a3 + 160) = *(_OWORD *)__p;
      *(void *)(a3 + 176) = v30;
      uint64_t v28 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v30 = 0;
      *(unsigned char *)(a3 + 184) = 1;
      if (v10)
      {
        if (__src != v26) {
          free(__src);
        }
        unsigned __int8 v31 = 0;
      }
      goto LABEL_20;
    }
    if (v6 < 5)
    {
      unint64_t v11 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v6, 24);
      unint64_t v11 = v24;
      if (!v24)
      {
LABEL_14:
        *(_DWORD *)(a3 + 32) = v6;
        int v10 = v31;
        goto LABEL_15;
      }
      unint64_t v8 = __src;
      uint64_t v7 = *(void **)(a3 + 24);
    }
    memcpy(v7, v8, 24 * v11);
    goto LABEL_14;
  }
LABEL_20:
  mlir::InFlightDiagnostic::abandon(&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v31)
  {
    unint64_t v12 = __p[0];
    if (__p[0])
    {
      uint64_t v13 = __p[1];
      uint64_t v14 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p[0];
      }
      __p[1] = v12;
      operator delete(v14);
    }
    uint64_t v15 = v27[0];
    if (v27[0])
    {
      long long v16 = v27[1];
      uint64_t v17 = v27[0];
      if (v27[1] != v27[0])
      {
        do
        {
          uint64_t v19 = *--v16;
          uint64_t v18 = v19;
          *long long v16 = 0;
          if (v19) {
            MEMORY[0x21667D390](v18, 0x1000C8077774924);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v27[0];
      }
      v27[1] = v15;
      operator delete(v17);
    }
    if (__src != v26) {
      free(__src);
    }
  }
}

uint64_t anonymous namespace'::DialectReader::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1) {
    uint64_t v6 = *(unsigned int *)(v4 + 8);
  }
  else {
    uint64_t v6 = Key;
  }
  uint64_t v7 = *(void *)v4 + 8 * v6;
  if (v7 == **(void **)(a1 + 32) + 8 * *(unsigned int *)(*(void *)(a1 + 32) + 8)) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)v7 + 8);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 24);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
    return 0;
  else {
    return *(void *)(*(void *)(*(void *)v7 + 8) + 56);
  }
}

uint64_t anonymous namespace'::DialectReader::getContext(_anonymous_namespace_::DialectReader *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 24);
  return mlir::Attribute::getContext((mlir::Attribute *)&v2);
}

uint64_t anonymous namespace'::DialectReader::getBytecodeVersion(_anonymous_namespace_::DialectReader *this)
{
  return **((void **)this + 6);
}

BOOL anonymous namespace'::DialectReader::readAttribute(_anonymous_namespace_::DialectReader *this, mlir::Attribute *a2)
{
  size_t v3 = (_anonymous_namespace_::AttrTypeReader *)*((void *)this + 1);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v7 = 0;
    return 0;
  *(void *)a2 = v5;
  return v5 != 0;
}

BOOL anonymous namespace'::DialectReader::readOptionalAttribute(_anonymous_namespace_::DialectReader *this, mlir::Attribute *a2)
{
  size_t v3 = (_anonymous_namespace_::AttrTypeReader *)*((void *)this + 1);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v7 = 0;
    return 0;
  if ((v7 & 1) == 0) {
    return 1;
  }
  *(void *)a2 = v6;
  return v6 != 0;
}

BOOL anonymous namespace'::DialectReader::readType(_anonymous_namespace_::DialectReader *this, mlir::Type *a2)
{
  size_t v3 = (_anonymous_namespace_::AttrTypeReader *)*((void *)this + 1);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v7 = 0;
    return 0;
  *(void *)a2 = v5;
  return v5 != 0;
}

uint64_t anonymous namespace'::DialectReader::readVarInt(_anonymous_namespace_::EncodingReader **this, unint64_t *a2)
{
}

uint64_t anonymous namespace'::DialectReader::readSignedVarInt(_anonymous_namespace_::EncodingReader **this, unint64_t *a2)
{
  unint64_t v4 = 0;
    return 0;
  *a2 = -(uint64_t)(v4 & 1) ^ (v4 >> 1);
  return 1;
}

void anonymous namespace'::DialectReader::readAPIntWithKnownWidth(_anonymous_namespace_::DialectReader *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  void v19[4] = *MEMORY[0x263EF8340];
  if (a2 <= 8)
  {
    LOBYTE(v17) = 0;
    {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2) {
        LOBYTE(v6) = 0;
      }
      unint64_t v7 = v6 & v17;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (a2 <= 0x40)
  {
    uint64_t v17 = 0;
    {
      unint64_t v7 = (-(uint64_t)(v17 & 1) ^ ((unint64_t)v17 >> 1)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
LABEL_9:
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = v7;
      *(unsigned char *)(a3 + 16) = 1;
      return;
    }
    goto LABEL_15;
  }
  unint64_t v16 = 0;
  {
LABEL_15:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return;
  }
  unint64_t v8 = v16;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (!v16)
  {
LABEL_22:
    llvm::APInt::APInt((uint64_t)&v14, a2, (uint64_t *)v17);
    *(_DWORD *)(a3 + 8) = v15;
    *(void *)a3 = v14;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t v13 = v17;
    if (v17 == v19) {
      return;
    }
    goto LABEL_23;
  }
  if (v16 < 5)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v16;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v16, 8);
    uint64_t v9 = v18;
    unint64_t v10 = v8 - v18;
    if (v8 == v18) {
      goto LABEL_19;
    }
  }
  bzero((char *)v17 + 8 * v9, 8 * v10);
LABEL_19:
  uint64_t v11 = 0;
  LODWORD(v18) = v8;
  while (1)
  {
    unint64_t v12 = (uint64_t *)((char *)v17 + v11);
    *unint64_t v12 = -(*v12 & 1) ^ ((unint64_t)*v12 >> 1);
    v11 += 8;
    if (!--v8) {
      goto LABEL_22;
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v13 = v17;
  if (v17 != v19) {
LABEL_23:
  }
    free(v13);
}

void anonymous namespace'::DialectReader::readAPFloatWithKnownSemantics(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  void v13[3] = *MEMORY[0x263EF8340];
  uint64_t SizeInBits = llvm::APFloatBase::getSizeInBits((uint64_t)a2);
  unint64_t v7 = (llvm::APFloatBase *)(*(void *(**)(const llvm::APInt **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(&v10, a1, SizeInBits);
  if (!v12)
  {
    *a3 = 0;
    a3[32] = 0;
    return;
  }
  unint64_t v8 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == a2) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, (uint64_t)a2);
  }
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v13, a2, &v10);
  uint64_t v9 = a3 + 8;
  if (v8 == (void *)v13[0])
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v13);
    a3[32] = 1;
    if (v8 != (void *)v13[0])
    {
LABEL_5:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v13);
      if (!v12) {
        return;
      }
      goto LABEL_11;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)v13);
    a3[32] = 1;
    if (v8 != (void *)v13[0]) {
      goto LABEL_5;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13);
  if (!v12) {
    return;
  }
LABEL_11:
  if (v11 >= 0x41)
  {
    if (v10) {
      MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
}

uint64_t anonymous namespace'::DialectReader::readString(_anonymous_namespace_::DialectReader *this, llvm::StringRef *a2)
{
  uint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v10 = 0;
    return 0;
  uint64_t v5 = (char *)v10;
  uint64_t v6 = *((void *)v4 + 3);
  uint64_t v7 = *(void *)v3;
  unsigned int v8 = *(_DWORD *)(v3 + 8);

  return resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v6, v7, v8, v5, a2, (uint64_t)"string", 6);
}

uint64_t anonymous namespace'::DialectReader::readBlob(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v6 = 0;
  {
    return 0;
  }
  uint64_t v4 = v7;
  *a2 = v6;
  a2[1] = v4;
  return 1;
}

uint64_t anonymous namespace'::DialectReader::readBool(_anonymous_namespace_::DialectReader *this, BOOL *a2)
{
}

void anonymous namespace'::DialectReader::readResourceHandle(_anonymous_namespace_::DialectReader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v21 = 0;
    goto LABEL_25;
  uint64_t v5 = *((void *)v4 + 3);
  uint64_t v6 = *v3;
  unint64_t v7 = *((unsigned int *)v3 + 2);
  v23[0] = "resource handle";
  v23[1] = 15;
  int v22 = (char *)v21;
  if (v21 >= v7)
  {
    char v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      char v12 = __p;
      if (__p)
      {
        uint64_t v13 = v30;
        uint64_t v14 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v30 = v12;
        operator delete(v14);
      }
      int v15 = v27;
      if (v27)
      {
        unint64_t v16 = v28;
        uint64_t v17 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v19 = *--v16;
            uint64_t v18 = v19;
            *unint64_t v16 = 0;
            if (v19) {
              MEMORY[0x21667D390](v18, 0x1000C8077774924);
            }
          }
          while (v16 != v15);
          uint64_t v17 = v27;
        }
        uint64_t v28 = v15;
        operator delete(v17);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
    if (v11)
    {
      uint64_t v9 = 0;
      *(void *)&long long v10 = &mlir::detail::TypeIDResolver<void,void>::id;
      goto LABEL_24;
    }
LABEL_25:
    char v20 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_26;
  }
  unint64_t v8 = (uint64_t *)(v6 + 24 * v21);
  uint64_t v9 = *v8;
  long long v10 = *(_OWORD *)(v8 + 1);
LABEL_24:
  *(void *)a2 = v9;
  *(_OWORD *)(a2 + 8) = v10;
  char v20 = 1;
LABEL_26:
  *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v20;
}

BOOL anonymous namespace'::BytecodeDialect::load(uint64_t a1, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)a3, *(void **)(a1 + 24), *(void *)(a1 + 32));
  if (Dialect)
  {
    uint64_t v9 = (uint64_t)Dialect;
    *(void *)a1 = Dialect;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v10 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)Dialect);
    if (v10) {
      uint64_t v10 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(v9);
    }
    *(void *)(a1 + 16) = v10;
    char v11 = *(const char **)(a1 + 48);
    if (!v11) {
      return 1;
    }
    goto LABEL_11;
  }
  if (mlir::MLIRContext::allowsUnregisteredDialects(a3))
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    char v11 = *(const char **)(a1 + 48);
    if (!v11) {
      return 1;
    }
LABEL_11:
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      uint64_t v14 = *(void *)(*(void *)(a2 + 40) + 24);
      uint64_t v49 = *(void ***)(a1 + 40);
      uint64_t v50 = v11;
      uint64_t v51 = (uint64_t)v49;
      uint64_t v52 = v14;
      unsigned int v54 = &unk_26C356670;
      long long v15 = *(_OWORD *)(a2 + 24);
      long long v55 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)uint64_t v56 = v15;
      v57[0] = &v49;
      v57[1] = v13;
      (*(void (**)(void *__return_ptr))(*(void *)v12 + 56))(v47);
      uint64_t v16 = v47[0];
      v47[0] = 0;
      uint64_t v17 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        uint64_t v18 = v47[0];
        v47[0] = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        uint64_t v16 = *(void *)(a1 + 56);
      }
      return v16 != 0;
    }
    v47[0] = "dialect '";
    __int16 v48 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, void *))(*(void *)a2 + 16))(&v54, a2, v47);
    if (v54)
    {
      __int16 v53 = 261;
      uint64_t v19 = *(const char **)(a1 + 32);
      uint64_t v49 = *(void ***)(a1 + 24);
      uint64_t v50 = v19;
      mlir::Diagnostic::operator<<((uint64_t)&v55, &v49);
      if (v54)
      {
        LODWORD(v49) = 3;
        uint64_t v50 = "' does not implement the bytecode interface, but found a version entry";
        uint64_t v51 = 70;
        char v20 = &v49;
        unint64_t v21 = (char *)v56[0];
        if (LODWORD(v56[1]) >= HIDWORD(v56[1]))
        {
          unint64_t v43 = LODWORD(v56[1]) + 1;
          if (v56[0] <= &v49 && (char *)v56[0] + 24 * LODWORD(v56[1]) > (char *)&v49)
          {
            int64_t v45 = (char *)&v49 - (char *)v56[0];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v43, 24);
            unint64_t v21 = (char *)v56[0];
            char v20 = (void ***)((char *)v56[0] + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v43, 24);
            char v20 = &v49;
            unint64_t v21 = (char *)v56[0];
          }
        }
        int v22 = &v21[24 * LODWORD(v56[1])];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)int v22 = v23;
        ++LODWORD(v56[1]);
      }
    }
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    }
    if (v62)
    {
      unsigned int v24 = __p;
      if (__p)
      {
        int v25 = v61;
        uint64_t v26 = __p;
        if (v61 != __p)
        {
          do
            int v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          uint64_t v26 = __p;
        }
        unint64_t v61 = v24;
        operator delete(v26);
      }
      uint64_t v27 = v58;
      if (!v58) {
        goto LABEL_56;
      }
      uint64_t v28 = v59;
      uint64_t v29 = v58;
      if (v59 == v58)
      {
LABEL_55:
        char v59 = v27;
        operator delete(v29);
LABEL_56:
        if (v56[0] != v57) {
          free(v56[0]);
        }
        return v3;
      }
      do
      {
        uint64_t v31 = *--v28;
        uint64_t v30 = v31;
        void *v28 = 0;
        if (v31) {
          MEMORY[0x21667D390](v30, 0x1000C8077774924);
        }
      }
      while (v28 != v27);
LABEL_54:
      uint64_t v29 = v58;
      goto LABEL_55;
    }
    return v3;
  }
  v47[0] = "dialect '";
  __int16 v48 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, void *))(*(void *)a2 + 16))(&v54, a2, v47);
  if (v54)
  {
    __int16 v53 = 261;
    uint64_t v32 = *(const char **)(a1 + 32);
    uint64_t v49 = *(void ***)(a1 + 24);
    uint64_t v50 = v32;
    mlir::Diagnostic::operator<<((uint64_t)&v55, &v49);
    if (v54)
    {
      LODWORD(v49) = 3;
      uint64_t v50 = "' is unknown. If this is intended, please call allowUnregisteredDialects() on the MLIRContext, or use -allow"
            "-unregistered-dialect with the MLIR tool used.";
      uint64_t v51 = 154;
      char v33 = &v49;
      uint64_t v34 = (char *)v56[0];
      if (LODWORD(v56[1]) >= HIDWORD(v56[1]))
      {
        unint64_t v44 = LODWORD(v56[1]) + 1;
        if (v56[0] <= &v49 && (char *)v56[0] + 24 * LODWORD(v56[1]) > (char *)&v49)
        {
          int64_t v46 = (char *)&v49 - (char *)v56[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v44, 24);
          uint64_t v34 = (char *)v56[0];
          char v33 = (void ***)((char *)v56[0] + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v44, 24);
          char v33 = &v49;
          uint64_t v34 = (char *)v56[0];
        }
      }
      size_t v35 = &v34[24 * LODWORD(v56[1])];
      long long v36 = *(_OWORD *)v33;
      *((void *)v35 + 2) = v33[2];
      *(_OWORD *)size_t v35 = v36;
      ++LODWORD(v56[1]);
    }
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  }
  if (v62)
  {
    int v37 = __p;
    if (__p)
    {
      uint64_t v38 = v61;
      unsigned __int8 v39 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        unsigned __int8 v39 = __p;
      }
      unint64_t v61 = v37;
      operator delete(v39);
    }
    uint64_t v27 = v58;
    if (!v58) {
      goto LABEL_56;
    }
    uint64_t v40 = v59;
    uint64_t v29 = v58;
    if (v59 == v58) {
      goto LABEL_55;
    }
    do
    {
      uint64_t v42 = *--v40;
      uint64_t v41 = v42;
      *uint64_t v40 = 0;
      if (v42) {
        MEMORY[0x21667D390](v41, 0x1000C8077774924);
      }
    }
    while (v40 != v27);
    goto LABEL_54;
  }
  return v3;
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeDialectInterface]";
      unint64_t v22 = 80;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      long long v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = v1[400];
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v4) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == v4)
      {
        uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_9:
  if (v6 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

uint64_t anonymous namespace'::AttrTypeReader::resolveAttribute(_anonymous_namespace_::AttrTypeReader *this, unint64_t a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if (*((unsigned int *)this + 8) <= a2)
  {
    mlir::emitError(*((void *)this + 17), (uint64_t)&v82);
    if (v82)
    {
      LODWORD(v75) = 3;
      uint64_t v76 = (uint64_t)"invalid ";
      *(void *)&long long v77 = 8;
      unsigned int v24 = &v75;
      int v25 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v60 = v85 + 1;
        if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
        {
          int64_t v64 = (char *)&v75 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          int v25 = (char *)v84;
          unsigned int v24 = (void ***)((char *)v84 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          unsigned int v24 = &v75;
          int v25 = (char *)v84;
        }
      }
      uint64_t v26 = &v25[24 * v85];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      ++v85;
      if (v82)
      {
        LOWORD(v78) = 261;
        uint64_t v75 = (void **)"Attribute";
        uint64_t v76 = 9;
        mlir::Diagnostic::operator<<((uint64_t)&v83, &v75);
        if (v82)
        {
          LODWORD(v75) = 3;
          uint64_t v76 = (uint64_t)" index: ";
          *(void *)&long long v77 = 8;
          uint64_t v28 = &v75;
          uint64_t v29 = (char *)v84;
          if (v85 >= v86)
          {
            unint64_t v61 = v85 + 1;
            if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
            {
              int64_t v65 = (char *)&v75 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v29 = (char *)v84;
              uint64_t v28 = (void ***)((char *)v84 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v28 = &v75;
              uint64_t v29 = (char *)v84;
            }
          }
          uint64_t v30 = &v29[24 * v85];
          long long v31 = *(_OWORD *)v28;
          *((void *)v30 + 2) = v28[2];
          *(_OWORD *)uint64_t v30 = v31;
          uint64_t v32 = ++v85;
          if (v82)
          {
            LODWORD(v75) = 5;
            uint64_t v76 = a2;
            char v33 = &v75;
            uint64_t v34 = (char *)v84;
            if (v32 >= v86)
            {
              unint64_t v62 = v32 + 1;
              BOOL v63 = (char *)v84 + 24 * v32 > (char *)&v75;
              if (v84 <= &v75 && v63)
              {
                int64_t v66 = (char *)&v75 - (unsigned char *)v84;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                uint64_t v34 = (char *)v84;
                char v33 = (void ***)((char *)v84 + v66);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                char v33 = &v75;
                uint64_t v34 = (char *)v84;
              }
            }
            size_t v35 = &v34[24 * v85];
            long long v36 = *(_OWORD *)v33;
            *((void *)v35 + 2) = v33[2];
            *(_OWORD *)size_t v35 = v36;
            ++v85;
            if (v82) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
            }
          }
        }
      }
    }
    if (!v92) {
      return 0;
    }
    int v37 = __p;
    if (__p)
    {
      uint64_t v38 = v91;
      unsigned __int8 v39 = __p;
      if (v91 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        unsigned __int8 v39 = __p;
      }
      int32x4_t v91 = v37;
      operator delete(v39);
    }
    uint64_t v40 = v88;
    if (!v88) {
      goto LABEL_71;
    }
    uint64_t v41 = v89;
    uint64_t v42 = v88;
    if (v89 == v88) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v44 = *--v41;
      uint64_t v43 = v44;
      *uint64_t v41 = 0;
      if (v44) {
        MEMORY[0x21667D390](v43, 0x1000C8077774924);
      }
    }
    while (v41 != v40);
    goto LABEL_69;
  }
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = v4 + 40 * a2;
  uint64_t result = *(void *)v5;
  if (*(void *)v5) {
    return result;
  }
  uint64_t v7 = v4 + 40 * a2;
  long long v9 = *(_OWORD *)(v7 + 24);
  int v8 = (_OWORD *)(v7 + 24);
  uint64_t v10 = *((void *)this + 17);
  long long v72 = v9;
  uint64_t v73 = v9;
  uint64_t v74 = v10;
  if (!*((unsigned char *)v8 - 8))
  {
    uint64_t v75 = (void **)"Attribute";
    uint64_t v76 = 9;
    uint64_t v67 = 0;
    unint64_t v68 = 0;
    {
      unint64_t v81 = 0;
      uint64_t Context = (uint64_t **)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
      mlir::parseAttribute(v67, v68, Context, 0, &v81, 1);
    }
    return 0;
  }
  uint64_t v11 = *((void *)this + 2);
  uint64_t v12 = *((void *)this + 18);
  uint64_t v75 = (void **)&unk_26C356670;
  uint64_t v76 = (uint64_t)this;
  long long v77 = *(_OWORD *)this;
  uint64_t v78 = v11;
  uint64_t v79 = &v72;
  uint64_t v80 = v12;
  uint64_t v13 = v4 + 40 * a2;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v14 = v13 + 8;
  unint64_t v16 = (mlir::MLIRContext *)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
  {
    uint64_t v17 = *((void *)this + 19);
    uint64_t v18 = *(unsigned int *)(v17 + 56);
    if (v18)
    {
      uint64_t v19 = *(void **)(v17 + 48);
      uint64_t v20 = 8 * v18;
      while ((*(unsigned __int8 (**)(void, void ***, void, void, uint64_t))(*(void *)*v19 + 16))(*v19, &v75, *(void *)(*(void *)v14 + 24), *(void *)(*(void *)v14 + 32), v5))
      {
        if (*(void *)v5) {
          goto LABEL_54;
        }
        long long v72 = *v8;
        uint64_t v73 = v72;
        ++v19;
        v20 -= 8;
        if (!v20) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    uint64_t v21 = *(void *)(*(void *)v14 + 16);
    if (v21)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v21 + 16))(v21, &v75);
      *(void *)uint64_t v5 = v22;
      char v23 = v22 != 0;
    }
    else
    {
      char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v92)
      {
        int64_t v46 = __p;
        if (__p)
        {
          uint64_t v47 = v91;
          __int16 v48 = __p;
          if (v91 != __p)
          {
            do
              uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            __int16 v48 = __p;
          }
          int32x4_t v91 = v46;
          operator delete(v48);
        }
        uint64_t v49 = v88;
        if (v88)
        {
          uint64_t v50 = v89;
          uint64_t v51 = v88;
          if (v89 != v88)
          {
            do
            {
              uint64_t v53 = *--v50;
              uint64_t v52 = v53;
              *uint64_t v50 = 0;
              if (v53) {
                MEMORY[0x21667D390](v52, 0x1000C8077774924);
              }
            }
            while (v50 != v49);
            uint64_t v51 = v88;
          }
          unsigned int v89 = v49;
          operator delete(v51);
        }
        if (v84 != v87) {
          free(v84);
        }
      }
    }
    if (v23)
    {
LABEL_54:
      if (v73 == (void)v72 + *((void *)&v72 + 1)) {
        return *(void *)v5;
      }
      __int16 v71 = 1283;
      uint64_t v67 = "unexpected trailing bytes after ";
      int64_t v69 = "Attribute";
      uint64_t v70 = 9;
      uint64_t v75 = (void **)&v67;
      *(void *)&long long v77 = " entry";
      LOWORD(v78) = 770;
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (!v92) {
        return 0;
      }
      unsigned int v54 = __p;
      if (__p)
      {
        long long v55 = v91;
        uint64_t v56 = __p;
        if (v91 != __p)
        {
          do
            long long v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          uint64_t v56 = __p;
        }
        int32x4_t v91 = v54;
        operator delete(v56);
      }
      uint64_t v40 = v88;
      if (!v88) {
        goto LABEL_71;
      }
      uint64_t v57 = v89;
      uint64_t v42 = v88;
      if (v89 == v88)
      {
LABEL_70:
        unsigned int v89 = v40;
        operator delete(v42);
LABEL_71:
        if (v84 != v87) {
          free(v84);
        }
        return 0;
      }
      do
      {
        uint64_t v59 = *--v57;
        uint64_t v58 = v59;
        *uint64_t v57 = 0;
        if (v59) {
          MEMORY[0x21667D390](v58, 0x1000C8077774924);
        }
      }
      while (v57 != v40);
LABEL_69:
      uint64_t v42 = v88;
      goto LABEL_70;
    }
  }
  return 0;
}

void anonymous namespace'::EncodingReader::emitError<llvm::Twine>(uint64_t a1, uint64_t a2, void ***a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v26);
  uint64_t v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v27, a3);
    uint64_t v5 = v26;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v37)
  {
    *(void *)(a1 + 8) = v27;
    unint64_t v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v6 || &v26 == (uint64_t *)a1)
    {
      int v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      int v31 = 0;
      int v8 = 1;
LABEL_15:
      unsigned int v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(void *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v36;
      uint64_t v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v8)
      {
        uint64_t v10 = __p[0];
        if (__p[0])
        {
          uint64_t v11 = __p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        uint64_t v13 = v33[0];
        if (v33[0])
        {
          uint64_t v14 = v33[1];
          uint64_t v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              uint64_t v17 = *--v14;
              uint64_t v16 = v17;
              *uint64_t v14 = 0;
              if (v17) {
                MEMORY[0x21667D390](v16, 0x1000C8077774924);
              }
            }
            while (v14 != v13);
            uint64_t v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32) {
          free(__src);
        }
        unsigned __int8 v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      unint64_t v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      unint64_t v9 = v30;
      if (!v30) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    int v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v37)
  {
    uint64_t v18 = __p[0];
    if (__p[0])
    {
      uint64_t v19 = __p[1];
      uint64_t v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    uint64_t v21 = v33[0];
    if (v33[0])
    {
      uint64_t v22 = v33[1];
      char v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        char v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32) {
      free(__src);
    }
  }
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[10],llvm::StringRef &,char const(&)[44]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v26);
  uint64_t v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v27, "dialect '", a3, "' does not implement the bytecode interface");
    uint64_t v5 = v26;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v37)
  {
    *(void *)(a1 + 8) = v27;
    unint64_t v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v6 || &v26 == (uint64_t *)a1)
    {
      int v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      int v31 = 0;
      int v8 = 1;
LABEL_15:
      unsigned int v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(void *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v36;
      uint64_t v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v8)
      {
        uint64_t v10 = __p[0];
        if (__p[0])
        {
          uint64_t v11 = __p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        uint64_t v13 = v33[0];
        if (v33[0])
        {
          uint64_t v14 = v33[1];
          uint64_t v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              uint64_t v17 = *--v14;
              uint64_t v16 = v17;
              *uint64_t v14 = 0;
              if (v17) {
                MEMORY[0x21667D390](v16, 0x1000C8077774924);
              }
            }
            while (v14 != v13);
            uint64_t v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32) {
          free(__src);
        }
        unsigned __int8 v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      unint64_t v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      unint64_t v9 = v30;
      if (!v30) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    int v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v37)
  {
    uint64_t v18 = __p[0];
    if (__p[0])
    {
      uint64_t v19 = __p[1];
      uint64_t v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    uint64_t v21 = v33[0];
    if (v33[0])
    {
      uint64_t v22 = v33[1];
      char v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        char v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32) {
      free(__src);
    }
  }
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>((uint64_t)&v29, "trailing characters found after ", a3, " assembly format: ", a4);
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        uint64_t v12 = __p[0];
        if (__p[0])
        {
          uint64_t v13 = __p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        uint64_t v15 = v35[0];
        if (v35[0])
        {
          uint64_t v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              uint64_t v19 = *--v16;
              uint64_t v18 = v19;
              *uint64_t v16 = 0;
              if (v19) {
                MEMORY[0x21667D390](v18, 0x1000C8077774924);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    uint64_t v20 = __p[0];
    if (__p[0])
    {
      uint64_t v21 = __p[1];
      uint64_t v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    char v23 = v35[0];
    if (v35[0])
    {
      uint64_t v24 = v35[1];
      uint64_t v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        uint64_t v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v22) = 3;
  char v23 = __s;
  size_t v24 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v13 + 1;
    BOOL v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      uint64_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = (void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = &v22;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  __int16 v25 = 261;
  uint64_t v17 = *(char **)(a3 + 8);
  uint64_t v22 = *(void ***)a3;
  char v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[19],llvm::StringRef>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[19],llvm::StringRef>(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v18) = 3;
  unint64_t v19 = __s;
  size_t v20 = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  size_t v10 = &v18;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v15 = v9 + 1;
    BOOL v16 = v8 + 24 * v9 > (unint64_t)&v18;
    if (v8 <= (unint64_t)&v18 && v16)
    {
      uint64_t v17 = (char *)&v18 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v15, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      size_t v10 = (void ***)&v17[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v15, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      size_t v10 = &v18;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  __int16 v21 = 261;
  uint64_t v13 = *(char **)(a3 + 8);
  uint64_t v18 = *(void ***)a3;
  unint64_t v19 = v13;
  mlir::Diagnostic::operator<<(a1, &v18);
  return a1;
}

uint64_t anonymous namespace'::AttrTypeReader::resolveType(_anonymous_namespace_::AttrTypeReader *this, unint64_t a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if (*((unsigned int *)this + 22) <= a2)
  {
    mlir::emitError(*((void *)this + 17), (uint64_t)&v82);
    if (v82)
    {
      LODWORD(v75) = 3;
      uint64_t v76 = (uint64_t)"invalid ";
      *(void *)&long long v77 = 8;
      size_t v24 = &v75;
      __int16 v25 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v60 = v85 + 1;
        if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
        {
          int64_t v64 = (char *)&v75 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          __int16 v25 = (char *)v84;
          size_t v24 = (void ***)((char *)v84 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          size_t v24 = &v75;
          __int16 v25 = (char *)v84;
        }
      }
      uint64_t v26 = &v25[24 * v85];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      ++v85;
      if (v82)
      {
        LOWORD(v78) = 261;
        uint64_t v75 = (void **)"Type";
        uint64_t v76 = 4;
        mlir::Diagnostic::operator<<((uint64_t)&v83, &v75);
        if (v82)
        {
          LODWORD(v75) = 3;
          uint64_t v76 = (uint64_t)" index: ";
          *(void *)&long long v77 = 8;
          uint64_t v28 = &v75;
          uint64_t v29 = (char *)v84;
          if (v85 >= v86)
          {
            unint64_t v61 = v85 + 1;
            if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
            {
              int64_t v65 = (char *)&v75 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v29 = (char *)v84;
              uint64_t v28 = (void ***)((char *)v84 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v28 = &v75;
              uint64_t v29 = (char *)v84;
            }
          }
          int v30 = &v29[24 * v85];
          long long v31 = *(_OWORD *)v28;
          *((void *)v30 + 2) = v28[2];
          *(_OWORD *)int v30 = v31;
          uint64_t v32 = ++v85;
          if (v82)
          {
            LODWORD(v75) = 5;
            uint64_t v76 = a2;
            int v33 = &v75;
            uint64_t v34 = (char *)v84;
            if (v32 >= v86)
            {
              unint64_t v62 = v32 + 1;
              BOOL v63 = (char *)v84 + 24 * v32 > (char *)&v75;
              if (v84 <= &v75 && v63)
              {
                int64_t v66 = (char *)&v75 - (unsigned char *)v84;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                uint64_t v34 = (char *)v84;
                int v33 = (void ***)((char *)v84 + v66);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                int v33 = &v75;
                uint64_t v34 = (char *)v84;
              }
            }
            size_t v35 = &v34[24 * v85];
            long long v36 = *(_OWORD *)v33;
            *((void *)v35 + 2) = v33[2];
            *(_OWORD *)size_t v35 = v36;
            ++v85;
            if (v82) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
            }
          }
        }
      }
    }
    if (!v92) {
      return 0;
    }
    unsigned __int8 v37 = __p;
    if (__p)
    {
      uint64_t v38 = v91;
      unsigned __int8 v39 = __p;
      if (v91 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        unsigned __int8 v39 = __p;
      }
      int32x4_t v91 = v37;
      operator delete(v39);
    }
    uint64_t v40 = v88;
    if (!v88) {
      goto LABEL_71;
    }
    uint64_t v41 = v89;
    uint64_t v42 = v88;
    if (v89 == v88) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v44 = *--v41;
      uint64_t v43 = v44;
      *uint64_t v41 = 0;
      if (v44) {
        MEMORY[0x21667D390](v43, 0x1000C8077774924);
      }
    }
    while (v41 != v40);
    goto LABEL_69;
  }
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = v4 + 40 * a2;
  uint64_t result = *(void *)v5;
  if (*(void *)v5) {
    return result;
  }
  uint64_t v7 = v4 + 40 * a2;
  long long v9 = *(_OWORD *)(v7 + 24);
  unint64_t v8 = (_OWORD *)(v7 + 24);
  uint64_t v10 = *((void *)this + 17);
  long long v72 = v9;
  uint64_t v73 = v9;
  uint64_t v74 = v10;
  if (!*((unsigned char *)v8 - 8))
  {
    uint64_t v75 = (void **)"Type";
    uint64_t v76 = 4;
    uint64_t v67 = 0;
    unint64_t v68 = 0;
    {
      unint64_t v81 = 0;
      uint64_t Context = (uint64_t **)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
      mlir::parseType(v67, v68, Context, &v81, 1);
    }
    return 0;
  }
  uint64_t v11 = *((void *)this + 2);
  uint64_t v12 = *((void *)this + 18);
  uint64_t v75 = (void **)&unk_26C356670;
  uint64_t v76 = (uint64_t)this;
  long long v77 = *(_OWORD *)this;
  uint64_t v78 = v11;
  uint64_t v79 = &v72;
  uint64_t v80 = v12;
  uint64_t v13 = v4 + 40 * a2;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v14 = v13 + 8;
  BOOL v16 = (mlir::MLIRContext *)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
  {
    uint64_t v17 = *((void *)this + 19);
    uint64_t v18 = *(unsigned int *)(v17 + 120);
    if (v18)
    {
      unint64_t v19 = *(void **)(v17 + 112);
      uint64_t v20 = 8 * v18;
      while ((*(unsigned __int8 (**)(void, void ***, void, void, uint64_t))(*(void *)*v19 + 16))(*v19, &v75, *(void *)(*(void *)v14 + 24), *(void *)(*(void *)v14 + 32), v5))
      {
        if (*(void *)v5) {
          goto LABEL_54;
        }
        long long v72 = *v8;
        uint64_t v73 = v72;
        ++v19;
        v20 -= 8;
        if (!v20) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    uint64_t v21 = *(void *)(*(void *)v14 + 16);
    if (v21)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v21 + 24))(v21, &v75);
      *(void *)uint64_t v5 = v22;
      char v23 = v22 != 0;
    }
    else
    {
      char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v92)
      {
        int64_t v46 = __p;
        if (__p)
        {
          uint64_t v47 = v91;
          __int16 v48 = __p;
          if (v91 != __p)
          {
            do
              uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            __int16 v48 = __p;
          }
          int32x4_t v91 = v46;
          operator delete(v48);
        }
        uint64_t v49 = v88;
        if (v88)
        {
          uint64_t v50 = v89;
          uint64_t v51 = v88;
          if (v89 != v88)
          {
            do
            {
              uint64_t v53 = *--v50;
              uint64_t v52 = v53;
              *uint64_t v50 = 0;
              if (v53) {
                MEMORY[0x21667D390](v52, 0x1000C8077774924);
              }
            }
            while (v50 != v49);
            uint64_t v51 = v88;
          }
          unsigned int v89 = v49;
          operator delete(v51);
        }
        if (v84 != v87) {
          free(v84);
        }
      }
    }
    if (v23)
    {
LABEL_54:
      if (v73 == (void)v72 + *((void *)&v72 + 1)) {
        return *(void *)v5;
      }
      __int16 v71 = 1283;
      uint64_t v67 = "unexpected trailing bytes after ";
      int64_t v69 = "Type";
      uint64_t v70 = 4;
      uint64_t v75 = (void **)&v67;
      *(void *)&long long v77 = " entry";
      LOWORD(v78) = 770;
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (!v92) {
        return 0;
      }
      unsigned int v54 = __p;
      if (__p)
      {
        long long v55 = v91;
        uint64_t v56 = __p;
        if (v91 != __p)
        {
          do
            long long v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          uint64_t v56 = __p;
        }
        int32x4_t v91 = v54;
        operator delete(v56);
      }
      uint64_t v40 = v88;
      if (!v88) {
        goto LABEL_71;
      }
      uint64_t v57 = v89;
      uint64_t v42 = v88;
      if (v89 == v88)
      {
LABEL_70:
        unsigned int v89 = v40;
        operator delete(v42);
LABEL_71:
        if (v84 != v87) {
          free(v84);
        }
        return 0;
      }
      do
      {
        uint64_t v59 = *--v57;
        uint64_t v58 = v59;
        *uint64_t v57 = 0;
        if (v59) {
          MEMORY[0x21667D390](v58, 0x1000C8077774924);
        }
      }
      while (v57 != v40);
LABEL_69:
      uint64_t v42 = v88;
      goto LABEL_70;
    }
  }
  return 0;
}

uint64_t anonymous namespace'::EncodingReader::parseByte<BOOL>(void *a1, BOOL *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)(*a1 + a1[1]))
  {
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    }
    if (v20)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        size_t v6 = v19;
        uint64_t v7 = __p;
        if (v19 != __p)
        {
          do
            size_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v19 = v5;
        operator delete(v7);
      }
      unint64_t v8 = v16;
      if (v16)
      {
        long long v9 = v17;
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            *long long v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v16;
        }
        uint64_t v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15) {
        free(v14);
      }
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2 != 0;
    return 1;
  }
  return v3;
}

uint64_t anonymous namespace'::EncodingReader::parseByte<mlir::AsmResourceEntryKind>(void *a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned __int8 *)a1[2];
  if (v2 == (unsigned __int8 *)(*a1 + a1[1]))
  {
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    }
    if (v20)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        size_t v6 = v19;
        uint64_t v7 = __p;
        if (v19 != __p)
        {
          do
            size_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v19 = v5;
        operator delete(v7);
      }
      unint64_t v8 = v16;
      if (v16)
      {
        long long v9 = v17;
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            *long long v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v16;
        }
        uint64_t v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15) {
        free(v14);
      }
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2;
    return 1;
  }
  return v3;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[46],llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v26);
  uint64_t v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v27, "unexpected trailing bytes in resource entry '", a3, "'");
    uint64_t v5 = v26;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v37)
  {
    *(void *)(a1 + 8) = v27;
    unint64_t v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v6 || &v26 == (uint64_t *)a1)
    {
      int v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      int v31 = 0;
      int v8 = 1;
LABEL_15:
      unsigned int v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(void *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v36;
      uint64_t v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v8)
      {
        uint64_t v10 = __p[0];
        if (__p[0])
        {
          uint64_t v11 = __p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        uint64_t v13 = v33[0];
        if (v33[0])
        {
          uint64_t v14 = v33[1];
          uint64_t v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              uint64_t v17 = *--v14;
              uint64_t v16 = v17;
              *uint64_t v14 = 0;
              if (v17) {
                MEMORY[0x21667D390](v16, 0x1000C8077774924);
              }
            }
            while (v14 != v13);
            uint64_t v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32) {
          free(__src);
        }
        unsigned __int8 v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      unint64_t v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      unint64_t v9 = v30;
      if (!v30) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    int v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v37)
  {
    uint64_t v18 = __p[0];
    if (__p[0])
    {
      unint64_t v19 = __p[1];
      char v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        char v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    uint64_t v21 = v33[0];
    if (v33[0])
    {
      uint64_t v22 = v33[1];
      char v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        char v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32) {
      free(__src);
    }
  }
}

void anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, uint64_t a2@<X8>)
{
}

double anonymous namespace'::ParsedResourceEntry::parseAsString@<D0>(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 6) == 2)
  {
    long long __src = 0uLL;
    uint64_t v4 = (uint64_t *)*((void *)this + 4);
    uint64_t v5 = *((void *)this + 5);
    *(void *)&long long __dst = 0;
    {
      int v7 = (const void *)__src;
      if (!(void)__src)
      {
        long long __dst = 0uLL;
        unint64_t v39 = 0;
LABEL_41:
        *(void *)&long long v6 = __dst;
        *(_OWORD *)a2 = __dst;
        *(void *)(a2 + 16) = v39;
        *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
        return *(double *)&v6;
      }
      size_t v8 = *((void *)&__src + 1);
      if (*((void *)&__src + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
        abort();
      }
      if (*((void *)&__src + 1) >= 0x17uLL)
      {
        uint64_t v28 = (*((void *)&__src + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*((void *)&__src + 1) | 7) != 0x17) {
          uint64_t v28 = *((void *)&__src + 1) | 7;
        }
        uint64_t v29 = v28 + 1;
        p_dst = (long long *)operator new(v28 + 1);
        *((void *)&__dst + 1) = v8;
        unint64_t v39 = v29 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v39) = BYTE8(__src);
        p_dst = &__dst;
        if (!*((void *)&__src + 1)) {
          goto LABEL_40;
        }
      }
      memmove(p_dst, v7, v8);
LABEL_40:
      *((unsigned char *)p_dst + v8) = 0;
      goto LABEL_41;
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  }
  else
  {
    mlir::emitError(*(void *)(*((void *)this + 4) + 24), (uint64_t)&__dst);
    if ((void)__dst)
    {
      LODWORD(__src) = 3;
      *((void *)&__src + 1) = "expected a string resource entry, but found a ";
      uint64_t v36 = 46;
      p_src = &__src;
      uint64_t v11 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &__src && (char *)v40 + 24 * v41 > (char *)&__src)
        {
          int64_t v32 = (char *)&__src - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = (char *)v40;
          p_src = (long long *)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          p_src = &__src;
          uint64_t v11 = (char *)v40;
        }
      }
      uint64_t v12 = &v11[24 * v41];
      long long v13 = *p_src;
      *((void *)v12 + 2) = *((void *)p_src + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v41;
    }
    uint64_t v14 = mlir::toString(*((_DWORD *)this + 6));
    if ((void)__dst
      && (__int16 v37 = 261,
          *(void *)&long long __src = v14,
          *((void *)&__src + 1) = v15,
          mlir::Diagnostic::operator<<((uint64_t)&__dst + 8, (void ***)&__src),
          (void)__dst))
    {
      LODWORD(__src) = 3;
      *((void *)&__src + 1) = " entry instead";
      uint64_t v36 = 14;
      uint64_t v16 = &__src;
      uint64_t v17 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v31 = v41 + 1;
        if (v40 <= &__src && (char *)v40 + 24 * v41 > (char *)&__src)
        {
          int64_t v33 = (char *)&__src - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v31, 24);
          uint64_t v17 = (char *)v40;
          uint64_t v16 = (long long *)((char *)v40 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v31, 24);
          uint64_t v16 = &__src;
          uint64_t v17 = (char *)v40;
        }
      }
      uint64_t v18 = &v17[24 * v41];
      long long v6 = *v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v6;
      ++v41;
      uint64_t v19 = __dst;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      if (v19) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__dst);
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
    }
    if (v48)
    {
      char v20 = __p;
      if (__p)
      {
        uint64_t v21 = v47;
        uint64_t v22 = __p;
        if (v47 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        uint64_t v47 = v20;
        operator delete(v22);
      }
      char v23 = v44;
      if (v44)
      {
        uint64_t v24 = v45;
        uint64_t v25 = v44;
        if (v45 != v44)
        {
          do
          {
            uint64_t v27 = *--v24;
            uint64_t v26 = v27;
            *uint64_t v24 = 0;
            if (v27) {
              MEMORY[0x21667D390](v26, 0x1000C8077774924);
            }
          }
          while (v24 != v23);
          uint64_t v25 = v44;
        }
        int64_t v45 = v23;
        operator delete(v25);
      }
      if (v40 != v43) {
        free(v40);
      }
    }
  }
  return *(double *)&v6;
}

void anonymous namespace'::ParsedResourceEntry::parseAsBlob(uint64_t a1@<X0>, void (*a2)(void **__return_ptr, uint64_t, void *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 24))
  {
    mlir::emitError(*(void *)(*(void *)(a1 + 32) + 24), (uint64_t)__dst);
    if (__dst[0])
    {
      v63.n128_u32[0] = 3;
      v63.n128_u64[1] = (unint64_t)"expected a blob resource entry, but found a ";
      uint64_t v64 = 44;
      long long v6 = &v63;
      unint64_t v7 = v54.n128_u64[0];
      if (v54.n128_u32[2] >= v54.n128_u32[3])
      {
        unint64_t v43 = v54.n128_u32[2] + 1;
        if (v54.n128_u64[0] <= (unint64_t)&v63
          && v54.n128_u64[0] + 24 * (unint64_t)v54.n128_u32[2] > (unint64_t)&v63)
        {
          int64_t v45 = (char *)&v63 - v54.n128_u64[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v43, 24);
          unint64_t v7 = v54.n128_u64[0];
          long long v6 = (__n128 *)&v45[v54.n128_u64[0]];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v43, 24);
          long long v6 = &v63;
          unint64_t v7 = v54.n128_u64[0];
        }
      }
      unint64_t v8 = v7 + 24 * v54.n128_u32[2];
      __n128 v9 = *v6;
      *(void *)(v8 + 16) = v6[1].n128_u64[0];
      *(__n128 *)unint64_t v8 = v9;
      ++v54.n128_u32[2];
    }
    uint64_t v10 = mlir::toString(*(_DWORD *)(a1 + 24));
    if (__dst[0]
      && (__int16 v66 = 261,
          v63.n128_u64[0] = (unint64_t)v10,
          v63.n128_u64[1] = v11,
          mlir::Diagnostic::operator<<((uint64_t)&__dst[1], (void ***)&v63),
          __dst[0]))
    {
      v63.n128_u32[0] = 3;
      v63.n128_u64[1] = (unint64_t)" entry instead";
      uint64_t v64 = 14;
      uint64_t v12 = &v63;
      unint64_t v13 = v54.n128_u64[0];
      if (v54.n128_u32[2] >= v54.n128_u32[3])
      {
        unint64_t v44 = v54.n128_u32[2] + 1;
        if (v54.n128_u64[0] <= (unint64_t)&v63
          && v54.n128_u64[0] + 24 * (unint64_t)v54.n128_u32[2] > (unint64_t)&v63)
        {
          int64_t v46 = (char *)&v63 - v54.n128_u64[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v44, 24);
          unint64_t v13 = v54.n128_u64[0];
          uint64_t v12 = (__n128 *)&v46[v54.n128_u64[0]];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v44, 24);
          uint64_t v12 = &v63;
          unint64_t v13 = v54.n128_u64[0];
        }
      }
      unint64_t v14 = v13 + 24 * v54.n128_u32[2];
      __n128 v15 = *v12;
      *(void *)(v14 + 16) = v12[1].n128_u64[0];
      *(__n128 *)unint64_t v14 = v15;
      ++v54.n128_u32[2];
      uint64_t v16 = __dst[0];
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 64) = 0;
      if (v16) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
      }
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 64) = 0;
    }
    if (v62)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        uint64_t v18 = v61;
        uint64_t v19 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        unint64_t v61 = v17;
        operator delete(v19);
      }
      char v20 = v58;
      if (v58)
      {
        uint64_t v21 = v59;
        uint64_t v22 = v58;
        if (v59 != v58)
        {
          do
          {
            uint64_t v24 = *--v21;
            uint64_t v23 = v24;
            void *v21 = 0;
            if (v24) {
              MEMORY[0x21667D390](v23, 0x1000C8077774924);
            }
          }
          while (v21 != v20);
          uint64_t v22 = v58;
        }
        uint64_t v59 = v20;
        operator delete(v22);
      }
      if ((uint64_t *)v54.n128_u64[0] != &v55) {
        free((void *)v54.n128_u64[0]);
      }
    }
    return;
  }
  long long __src = 0;
  uint64_t v49 = 0;
  *(void *)uint64_t v47 = 0;
  uint64_t v27 = *(_anonymous_namespace_::EncodingReader **)(a1 + 32);
    || (__dst[0] = 0,
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
    return;
  }
  unint64_t v30 = *(unint64_t **)(a1 + 48);
  unint64_t v31 = *v30;
  if (*v30)
  {
    int64_t v33 = __src;
    int64_t v32 = v49;
    unint64_t v34 = v30[1];
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    v50.n128_u64[0] = v31;
    v50.n128_u64[1] = v34;
        + 6;
        + 6;
        + 6;
       + 6 <= 7)
    {
      __dst[0] = v33;
      __dst[1] = v32;
      uint64_t v53 = v29;
          + 6;
    }
    else
    {
                                                 + 8))(&v63, &v50);
      unint64_t v35 = v65;
      unint64_t v51 = 0;
      __dst[0] = v33;
      __dst[1] = v32;
      uint64_t v53 = v29;
      uint64_t v56 = (char *)v65;
      if (v65 <= 7)
      {
        char v39 = 0;
        char v57 = 0;
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(void *)(a4 + 16) = v53;
        *(void *)(a4 + 48) = v35;
        goto LABEL_54;
      }
      if ((~(_BYTE)v65 & 6) != 0)
      {
        __n128 v54 = v63;
        uint64_t v55 = v64;
        char v57 = 0;
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(void *)(a4 + 16) = v53;
        *(void *)(a4 + 48) = v35;
LABEL_49:
        uint64_t v40 = (__n128 *)(a4 + 24);
        if ((v35 & 2) != 0 && (v35 & 4) != 0)
        {
          (*(void (**)(__n128 *, __n128 *))((v35 & 0xFFFFFFFFFFFFFFF8) + 8))(v40, &v54);
          char v39 = v57;
        }
        else
        {
          char v39 = 0;
          *uint64_t v40 = v54;
          *(void *)(a4 + 40) = v55;
        }
        uint64_t v56 = 0;
LABEL_54:
        *(unsigned char *)(a4 + 56) = v39;
        *(unsigned char *)(a4 + 64) = 1;
        char v41 = v51;
        if (v51 >= 8)
        {
          if ((v51 & 4) != 0)
          {
            if ((v51 & 2) != 0) {
              unsigned int v42 = &v50;
            }
            else {
              unsigned int v42 = (__n128 *)v50.n128_u64[0];
            }
            (*(void (**)(__n128 *))((v51 & 0xFFFFFFFFFFFFFFF8) + 16))(v42);
          }
          if ((v41 & 2) == 0) {
            llvm::deallocate_buffer((llvm *)v50.n128_u64[0], (void *)v50.n128_u64[1]);
          }
        }
        return;
      }
      (*(void (**)(__n128 *, __n128 *))((v65 & 0xFFFFFFFFFFFFFFF8) + 8))(&v54, &v63);
      unint64_t v35 = (unint64_t)v56;
    }
    char v39 = 0;
    char v57 = 0;
    *(_OWORD *)a4 = *(_OWORD *)__dst;
    *(void *)(a4 + 16) = v53;
    *(void *)(a4 + 48) = v35;
    if (v35 < 8) {
      goto LABEL_54;
    }
    goto LABEL_49;
  }
  size_t v36 = (size_t)v49;
  a2(__dst, a3, v49, v29);
  memcpy(__dst[0], __src, v36);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  unint64_t v37 = (unint64_t)v56;
  *(void *)(a4 + 16) = v53;
  *(void *)(a4 + 48) = v37;
  if (v37 >= 8)
  {
    uint64_t v38 = (__n128 *)(a4 + 24);
    if ((v37 & 2) != 0 && (v37 & 4) != 0)
    {
      (*(void (**)(__n128 *, __n128 *))((v37 & 0xFFFFFFFFFFFFFFF8) + 8))(v38, &v54);
    }
    else
    {
      *uint64_t v38 = v54;
      *(void *)(a4 + 40) = v55;
    }
  }
  *(unsigned char *)(a4 + 56) = v57;
  *(unsigned char *)(a4 + 64) = 1;
}

__n128 llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::MoveImpl<anonymous namespace'::ParsedResourceEntry::parseAsBlob(llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>)::{lambda(void *,unsigned long,unsigned long)#1}>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::DestroyImpl<anonymous namespace'::ParsedResourceEntry::parseAsBlob(llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>)::{lambda(void *,unsigned long,unsigned long)#1}>(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>::callback_fn<anonymous namespace'::ResourceSectionReader::initialize(mlir::Location,mlir::ParserConfig const&,llvm::MutableArrayRef<std::unique_ptr<anonymous namespace'::BytecodeDialect>>,anonymous namespace'::StringSectionReader &,llvm::ArrayRef<unsigned char>,llvm::ArrayRef<unsigned char>,anonymous namespace'::DialectReader &,std::shared_ptr<llvm::SourceMgr> const&)::$_1>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 24);
  (*(void (**)(void *__return_ptr))(***(void ***)a1 + 32))(v49);
  if (v50)
  {
    (*(void (**)(long long *__return_ptr))(***(void ***)a1 + 40))(&v55);
    unint64_t v7 = llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>(v6 + 64, a2, a3);
    uint64_t v8 = *v7 + 8;
    if (*(char *)(*v7 + 31) < 0) {
      operator delete(*(void **)v8);
    }
    long long v9 = v55;
    *(void *)(v8 + 16) = v56;
    *(_OWORD *)uint64_t v8 = v9;
    uint64_t v10 = *(unsigned int *)(v6 + 8);
    unint64_t v11 = *(void *)v6;
    uint64_t v12 = (char *)v49;
    if (v10 >= *(_DWORD *)(v6 + 12))
    {
      unint64_t v40 = v10 + 1;
      BOOL v41 = v11 + 24 * v10 > (unint64_t)v49;
      if (v11 <= (unint64_t)v49 && v41)
      {
        int64_t v45 = (char *)v49 - v11;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v40, 24);
        unint64_t v11 = *(void *)v6;
        uint64_t v12 = &v45[*(void *)v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v40, 24);
        unint64_t v11 = *(void *)v6;
        uint64_t v12 = (char *)v49;
      }
    }
    uint64_t v13 = v11 + 24 * *(unsigned int *)(v6 + 8);
    long long v14 = *(_OWORD *)v12;
    *(void *)(v13 + 16) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    ++*(_DWORD *)(v6 + 8);
    return 1;
  }
  else
  {
    mlir::emitError(*(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v55);
    if ((void)v55)
    {
      LODWORD(v51) = 3;
      uint64_t v52 = "unknown 'resource' key '";
      uint64_t v53 = 24;
      uint64_t v17 = &v51;
      uint64_t v18 = (char *)v57;
      if (v58 >= v59)
      {
        unint64_t v42 = v58 + 1;
        if (v57 <= &v51 && (char *)v57 + 24 * v58 > (char *)&v51)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
          uint64_t v18 = (char *)v57;
          uint64_t v17 = (void ***)((char *)v57 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
          uint64_t v17 = &v51;
          uint64_t v18 = (char *)v57;
        }
      }
      uint64_t v19 = &v18[24 * v58];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)uint64_t v19 = v20;
      ++v58;
      if ((void)v55)
      {
        __int16 v54 = 261;
        unint64_t v51 = (void **)a2;
        uint64_t v52 = (const char *)a3;
        mlir::Diagnostic::operator<<((uint64_t)&v55 + 8, &v51);
        if ((void)v55)
        {
          LODWORD(v51) = 3;
          uint64_t v52 = "' for dialect '";
          uint64_t v53 = 15;
          uint64_t v21 = &v51;
          uint64_t v22 = (char *)v57;
          if (v58 >= v59)
          {
            unint64_t v43 = v58 + 1;
            if (v57 <= &v51 && (char *)v57 + 24 * v58 > (char *)&v51)
            {
              int64_t v47 = (char *)&v51 - (unsigned char *)v57;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v43, 24);
              uint64_t v22 = (char *)v57;
              uint64_t v21 = (void ***)((char *)v57 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v43, 24);
              uint64_t v21 = &v51;
              uint64_t v22 = (char *)v57;
            }
          }
          uint64_t v23 = &v22[24 * v58];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = v21[2];
          *(_OWORD *)uint64_t v23 = v24;
          ++v58;
          if ((void)v55)
          {
            uint64_t v25 = ***(void ***)(a1 + 16);
            __int16 v54 = 261;
            uint64_t v27 = *(void ***)(v25 + 24);
            uint64_t v26 = *(const char **)(v25 + 32);
            unint64_t v51 = v27;
            uint64_t v52 = v26;
            mlir::Diagnostic::operator<<((uint64_t)&v55 + 8, &v51);
            if ((void)v55)
            {
              LODWORD(v51) = 3;
              uint64_t v52 = "'";
              uint64_t v53 = 1;
              int8x8_t v28 = &v51;
              uint64_t v29 = (char *)v57;
              if (v58 >= v59)
              {
                unint64_t v44 = v58 + 1;
                if (v57 <= &v51 && (char *)v57 + 24 * v58 > (char *)&v51)
                {
                  int64_t v48 = (char *)&v51 - (unsigned char *)v57;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  uint64_t v29 = (char *)v57;
                  int8x8_t v28 = (void ***)((char *)v57 + v48);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  int8x8_t v28 = &v51;
                  uint64_t v29 = (char *)v57;
                }
              }
              unint64_t v30 = &v29[24 * v58];
              long long v31 = *(_OWORD *)v28;
              *((void *)v30 + 2) = v28[2];
              *(_OWORD *)unint64_t v30 = v31;
              ++v58;
            }
          }
        }
      }
    }
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
    if ((void)v55) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
    }
    if (v65)
    {
      int64_t v32 = __p;
      if (__p)
      {
        int64_t v33 = v64;
        unint64_t v34 = __p;
        if (v64 != __p)
        {
          do
            int64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          unint64_t v34 = __p;
        }
        uint64_t v64 = v32;
        operator delete(v34);
      }
      unint64_t v35 = v61;
      if (v61)
      {
        size_t v36 = v62;
        unint64_t v37 = v61;
        if (v62 != v61)
        {
          do
          {
            uint64_t v39 = *--v36;
            uint64_t v38 = v39;
            *size_t v36 = 0;
            if (v39) {
              MEMORY[0x21667D390](v38, 0x1000C8077774924);
            }
          }
          while (v36 != v35);
          unint64_t v37 = v61;
        }
        char v62 = v35;
        operator delete(v37);
      }
      if (v57 != v60) {
        free(v57);
      }
    }
  }
  return v15;
}

uint64_t *llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  unint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 33), (std::align_val_t)8uLL);
    uint64_t v10 = buffer + 4;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 33), (std::align_val_t)8uLL);
    uint64_t v10 = buffer + 4;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  void *buffer = a3;
  buffer[1] = 0;
  buffer[2] = 0;
  buffer[3] = 0;
  *unint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  unint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

void std::vector<mlir::Value>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>(uint64_t a1, _anonymous_namespace_::EncodingReader *this, uint64_t *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unint64_t v28 = 0;
    return 0;
  uint64_t v27 = v6;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  if (mlir::LocationAttr::classof(v6)) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  if (v8) {
    return 1;
  }
  unint64_t v28 = (unint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::LocationAttr]";
  unint64_t v29 = 68;
  unint64_t v11 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
  if (v29 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v29;
  }
  unint64_t v13 = v28 + v12;
  unint64_t v14 = v29 - v12;
  if (v29 - v12 >= 0x12) {
    uint64_t v15 = 18;
  }
  else {
    uint64_t v15 = v29 - v12;
  }
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 - v15;
  if (v17 >= v17 - 1) {
    --v17;
  }
  v26[0] = v16;
  v26[1] = v17;
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v36)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v35;
      uint64_t v20 = __p;
      if (v35 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v35 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v32;
    if (v32)
    {
      uint64_t v22 = v33;
      uint64_t v23 = v32;
      if (v33 != v32)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v32;
      }
      int64_t v33 = v21;
      operator delete(v23);
    }
    if (v30 != &v31) {
      free(v30);
    }
  }
  return v9;
}

void mlir::BytecodeReader::Impl::parseUseListOrderForRange(mlir::BytecodeReader::Impl *this, _anonymous_namespace_::EncodingReader *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  v46[2] = *MEMORY[0x263EF8340];
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unsigned int v40 = 0;
  unint64_t v5 = 1;
  unint64_t v37 = 1;
  if (a3 < 2) {
    goto LABEL_4;
  }
  {
    unint64_t v5 = v37;
    if (v37)
    {
LABEL_4:
      uint64_t v6 = 0;
      while (1)
      {
        unint64_t v36 = 0;
          goto LABEL_54;
        unint64_t v35 = 0;
          goto LABEL_54;
        unint64_t v7 = v35;
        unint64_t v8 = v35 >> 1;
        v35 >>= 1;
        long long __src = v46;
        uint64_t v45 = *(void *)"";
        if (v7 <= 1)
        {
          int v34 = v36;
          long long __dst = v43;
          unint64_t v42 = *(void *)"";
          goto LABEL_20;
        }
        unint64_t v9 = v5;
        unint64_t v10 = v3;
        uint64_t v11 = v8 <= 1 ? 1 : v8;
        long long __dst = 0;
          break;
        BOOL v26 = 1;
LABEL_44:
        *(unsigned char *)this = 0;
        *((unsigned char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
        unint64_t v3 = v10;
        unint64_t v5 = v9;
        uint64_t v25 = __src;
        if (__src == v46) {
          goto LABEL_37;
        }
LABEL_36:
        free(v25);
LABEL_37:
        if (v26) {
          goto LABEL_55;
        }
        if (++v6 == v5) {
          goto LABEL_62;
        }
      }
      unint64_t v12 = 0;
      uint64_t v13 = v11 - 1;
      while (1)
      {
        int v14 = (int)__dst;
        uint64_t v15 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v46, v45 + 1, 4);
          uint64_t v15 = v45;
        }
        *((_DWORD *)__src + v15) = v14;
        unint64_t v16 = (v45 + 1);
        LODWORD(v45) = v45 + 1;
        if (v13 == v12) {
          break;
        }
        long long __dst = 0;
        ++v12;
        {
          BOOL v26 = v12 < v8;
          goto LABEL_44;
        }
      }
      int v34 = v36;
      long long __dst = v43;
      unint64_t v42 = *(void *)"";
      unint64_t v3 = v10;
      unint64_t v5 = v9;
      if (v16)
      {
        if (__src == v46)
        {
          unsigned int v27 = v16;
          if (v16 < 5
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v43, v16, 4), (unsigned int v27 = v45) != 0))
          {
            memcpy(__dst, __src, 4 * v27);
          }
          LODWORD(v42) = v16;
        }
        else
        {
          long long __dst = __src;
          unint64_t v42 = __PAIR64__(HIDWORD(v45), v16);
          long long __src = v46;
          HIDWORD(v45) = 0;
        }
        LODWORD(v45) = 0;
      }
LABEL_20:
      v43[16] = v7 & 1;
      if (v40)
      {
        unsigned int v17 = (37 * v34) & (v40 - 1);
        unint64_t v18 = (char *)v38 + 48 * v17;
        int v19 = *(_DWORD *)v18;
        if (v34 == *(_DWORD *)v18) {
          goto LABEL_33;
        }
        uint64_t v20 = 0;
        int v21 = 1;
        while (v19 != -1)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            uint64_t v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & (v40 - 1);
          unint64_t v18 = (char *)v38 + 48 * v17;
          int v19 = *(_DWORD *)v18;
          if (v34 == *(_DWORD *)v18) {
            goto LABEL_33;
          }
        }
        if (v20) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = v18;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>((uint64_t)&v38, v24, &v34, (uint64_t)&__dst);
LABEL_33:
      if (__dst != v43) {
        free(__dst);
      }
      BOOL v26 = 0;
      uint64_t v25 = __src;
      if (__src == v46) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_62:
    *(void *)this = v38;
    *((void *)this + 1) = v39;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *((_DWORD *)this + 4) = v40;
    unsigned int v40 = 0;
    *((unsigned char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
    unint64_t v28 = v38;
  }
  else
  {
LABEL_54:
    *(unsigned char *)this = 0;
    *((unsigned char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
LABEL_55:
    unint64_t v28 = v38;
    if (v40)
    {
      uint64_t v29 = 48 * v40;
      unint64_t v30 = (char *)v38 + 24;
      do
      {
        if (*((_DWORD *)v30 - 6) <= 0xFFFFFFFD)
        {
          uint64_t v31 = (char *)*((void *)v30 - 2);
          if (v30 != v31) {
            free(v31);
          }
        }
        v30 += 48;
        v29 -= 48;
      }
      while (v29);
      unint64_t v28 = v38;
      uint64_t v32 = 48 * v40;
LABEL_64:
      llvm::deallocate_buffer(v28, (void *)v32);
    }
  }
  uint64_t v32 = 0;
  goto LABEL_64;
}

void llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 12) >= a2) {
    return;
  }
  unint64_t v24 = 0;
  unint64_t v3 = (char *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v24);
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v8 = 8 * v6;
    if (v7 >= 0xB)
    {
      BOOL v11 = v5 >= &v4[v8] || v4 >= &v5[v8];
      unint64_t v9 = v4;
      unint64_t v10 = *(char **)a1;
      if (v11)
      {
        unint64_t v12 = v7 + 1;
        uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v9 = &v4[v13];
        unint64_t v10 = &v5[v13];
        int v14 = (long long *)(v5 + 16);
        uint64_t v15 = v4 + 16;
        uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v17 = *(v14 - 1);
          long long v18 = *v14;
          *(v14 - 1) = 0uLL;
          *int v14 = 0uLL;
          *(v15 - 1) = v17;
          *uint64_t v15 = v18;
          v14 += 2;
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_15:
          uint64_t v21 = *(void *)a1 - 8;
          do
          {
            BOOL v22 = *(mlir::Region **)(v21 + v8);
            *(void *)(v21 + v8) = 0;
            if (v22)
            {
              mlir::Region::~Region(v22);
              MEMORY[0x21667D3C0]();
            }
            v8 -= 8;
          }
          while (v8);
          unint64_t v5 = *(char **)a1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      unint64_t v9 = v4;
      unint64_t v10 = *(char **)a1;
    }
    int v19 = &v5[8 * v6];
    do
    {
      uint64_t v20 = *(void *)v10;
      *(void *)unint64_t v10 = 0;
      v10 += 8;
      *(void *)unint64_t v9 = v20;
      v9 += 8;
    }
    while (v10 != v19);
    goto LABEL_15;
  }
LABEL_20:
  int v23 = v24;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

uint64_t mlir::BytecodeReader::Impl::defineValues(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  v60[0] = a3;
  v60[1] = a4;
  uint64_t v4 = a1[86];
  uint64_t v5 = *(void *)(v4 - 32) + 4 * *(unsigned int *)(v4 - 24);
  int v7 = *(_DWORD *)(v5 - 4);
  uint64_t v6 = (unsigned int *)(v5 - 4);
  unsigned int v48 = v7 + a4;
  unint64_t v8 = (uint64_t)(*(void *)(v4 - 48) - *(void *)(v4 - 56)) >> 3;
  if (v8 < (v7 + a4))
  {
    int64_t v47 = (char *)(v8 - 1);
    mlir::emitError(a2, (uint64_t)&v61);
    unint64_t v9 = v61;
    if (v61)
    {
      mlir::Diagnostic::append<char const(&)[81],unsigned int &,char const(&)[3],unsigned int &,char const(&)[30],unsigned long>((uint64_t)&v62, "value index range was outside of the expected range for the parent region, got [", v6, ", ", &v48, "), but the maximum index was ", &v47);
      unint64_t v9 = v61;
    }
    uint64_t v49 = v9;
    LOBYTE(v50) = 0;
    char v59 = 0;
    if (!v71) {
      goto LABEL_34;
    }
    uint64_t v50 = v62;
    int v10 = v65;
    int v51 = v63;
    BOOL v11 = v54;
    long long __dst = v54;
    uint64_t v53 = *(void *)"";
    if (!v65)
    {
      int v13 = 1;
      goto LABEL_30;
    }
    unint64_t v12 = __src;
    if (__src != v66)
    {
      long long __dst = __src;
      uint64_t v53 = v65;
      long long __src = v66;
      HIDWORD(v65) = 0;
      int v13 = 1;
LABEL_29:
      LODWORD(v65) = 0;
LABEL_30:
      *(_OWORD *)long long v55 = v67;
      uint64_t v56 = v68;
      long long v67 = 0uLL;
      *(_OWORD *)char v57 = __p;
      uint64_t v58 = v70;
      uint64_t v68 = 0;
      long long __p = 0uLL;
      uint64_t v70 = 0;
      char v59 = 1;
      if (v13)
      {
        if (__src != v66) {
          free(__src);
        }
        unsigned __int8 v71 = 0;
      }
LABEL_34:
      mlir::InFlightDiagnostic::abandon(&v61);
      if (v61) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
      }
      if (v71)
      {
        unint64_t v30 = (void *)__p;
        if ((void)__p)
        {
          uint64_t v31 = (void *)*((void *)&__p + 1);
          uint64_t v32 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            uint64_t v32 = (void *)__p;
          }
          *((void *)&__p + 1) = v30;
          operator delete(v32);
        }
        int64_t v33 = (void *)v67;
        if ((void)v67)
        {
          int v34 = (void *)*((void *)&v67 + 1);
          unint64_t v35 = (void *)v67;
          if (*((void *)&v67 + 1) != (void)v67)
          {
            do
            {
              uint64_t v37 = *--v34;
              uint64_t v36 = v37;
              void *v34 = 0;
              if (v37) {
                MEMORY[0x21667D390](v36, 0x1000C8077774924);
              }
            }
            while (v34 != v33);
            unint64_t v35 = (void *)v67;
          }
          *((void *)&v67 + 1) = v33;
          operator delete(v35);
        }
        if (__src != v66) {
          free(__src);
        }
      }
      uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v49);
      if (v49) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
      }
      if (v59)
      {
        uint64_t v38 = v57[0];
        if (v57[0])
        {
          uint64_t v39 = v57[1];
          unsigned int v40 = v57[0];
          if (v57[1] != v57[0])
          {
            do
              uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
            while (v39 != v38);
            unsigned int v40 = v57[0];
          }
          v57[1] = v38;
          operator delete(v40);
        }
        BOOL v41 = v55[0];
        if (v55[0])
        {
          unint64_t v42 = v55[1];
          unint64_t v43 = v55[0];
          if (v55[1] != v55[0])
          {
            do
            {
              uint64_t v45 = *--v42;
              uint64_t v44 = v45;
              *unint64_t v42 = 0;
              if (v45) {
                MEMORY[0x21667D390](v44, 0x1000C8077774924);
              }
            }
            while (v42 != v41);
            unint64_t v43 = v55[0];
          }
          v55[1] = v41;
          operator delete(v43);
        }
        if (__dst != v54) {
          free(__dst);
        }
      }
      return v28;
    }
    if (v65 < 5)
    {
      uint64_t v29 = v65;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v54, v65, 24);
      uint64_t v29 = v65;
      if (!v65)
      {
LABEL_28:
        LODWORD(v53) = v10;
        int v13 = v71;
        goto LABEL_29;
      }
      unint64_t v12 = __src;
      BOOL v11 = __dst;
    }
    memcpy(v11, v12, 24 * v29);
    goto LABEL_28;
  }
  if (a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (mlir::Block *)(a1 + 100);
    uint64_t v16 = a1 + 104;
    uint64_t v17 = a4;
    do
    {
      uint64_t v19 = mlir::ValueRange::dereference_iterator(v60, v14);
      uint64_t v18 = *v6;
      uint64_t v20 = *(void *)(v4 - 56);
      uint64_t v21 = *(void ***)(v20 + 8 * v18);
      *(void *)(v20 + 8 * v18) = v19;
      unint64_t v61 = v21;
      if (v21)
      {
        BOOL v22 = (uint64_t *)v19;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v61);
        unint64_t v24 = v61;
        while (1)
        {
          uint64_t v25 = *v24;
          if (!*v24) {
            break;
          }
          BOOL v26 = (uint64_t *)v25[1];
          if (v26)
          {
            uint64_t *v26 = *v25;
            if (*v25) {
              *(void *)(*v25 + 8) = v25[1];
            }
          }
          void v25[3] = (uint64_t)v22;
          v25[1] = (uint64_t)v22;
          uint64_t v27 = *v22;
          uint64_t *v25 = *v22;
          if (v27) {
            *(void *)(v27 + 8) = v25;
          }
          uint64_t *v22 = (uint64_t)v25;
        }
        mlir::Operation::moveBefore(DefiningOp, v15, v16);
        LODWORD(v18) = *v6;
      }
      ++v14;
      *uint64_t v6 = v18 + 1;
    }
    while (v14 != v17);
  }
  return 1;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>((uint64_t)&v29, "expected attribute of type: ", a3, ", but got: ", a4);
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      long long __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        unint64_t v12 = __p[0];
        if (__p[0])
        {
          int v13 = __p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              int v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        uint64_t v15 = v35[0];
        if (v35[0])
        {
          uint64_t v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              uint64_t v19 = *--v16;
              uint64_t v18 = v19;
              *uint64_t v16 = 0;
              if (v19) {
                MEMORY[0x21667D390](v18, 0x1000C8077774924);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    uint64_t v20 = __p[0];
    if (__p[0])
    {
      uint64_t v21 = __p[1];
      BOOL v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        BOOL v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    int v23 = v35[0];
    if (v35[0])
    {
      unint64_t v24 = v35[1];
      uint64_t v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *unint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        uint64_t v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v22) = 3;
  int v23 = __s;
  size_t v24 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v13 + 1;
    BOOL v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      uint64_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = (void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = &v22;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  __int16 v25 = 261;
  uint64_t v17 = *(char **)(a3 + 8);
  BOOL v22 = *(void ***)a3;
  int v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[12],mlir::Attribute &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[12],mlir::Attribute &>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v25 = 3;
  uint64_t v26 = __s;
  size_t v27 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  int v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      int v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      int v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      int v9 = &v25;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v12 = *a3;
  uint64_t v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v14 + 1;
    BOOL v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      size_t v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = &v25;
    }
  }
  uint64_t v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v13;
  *(void *)(v16 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v22 = 75;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      unint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[312];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>(uint64_t a1, char *a2, _DWORD *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v11 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3) {
      goto LABEL_3;
    }
    int v11 = *(_DWORD *)(a1 + 16);
  }
  int v12 = *(int **)a1;
  unint64_t v13 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  unint64_t v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
  int v15 = ((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8);
  if ((v15 + 1) > 0x40) {
    unsigned int v16 = v15 + 1;
  }
  else {
    unsigned int v16 = 64;
  }
  *(_DWORD *)(a1 + 16) = v16;
  buffer = llvm::allocate_buffer(48 * v16, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v12)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(a1, v12, &v12[12 * v8]);
    llvm::deallocate_buffer((llvm *)v12, (void *)(48 * v8));
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    unint64_t v19 = 48 * v18 - 48;
    uint64_t v20 = buffer;
    if (v19 < 0x30) {
      goto LABEL_37;
    }
    unint64_t v21 = v19 / 0x30 + 1;
    uint64_t v20 = &buffer[12 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v22 = v21 & 0xFFFFFFFFFFFFFFELL;
    int v23 = buffer;
    do
    {
      *int v23 = -1;
      v23[12] = -1;
      v23 += 24;
      v22 -= 2;
    }
    while (v22);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        _DWORD *v20 = -1;
        v20 += 12;
      }
      while (v20 != &buffer[12 * v18]);
    }
    unsigned int v24 = v18 - 1;
    unsigned int v25 = (37 * *a3) & v24;
    a2 = (char *)&buffer[12 * v25];
    int v26 = *(_DWORD *)a2;
    if (*a3 != *(_DWORD *)a2)
    {
      size_t v27 = 0;
      int v28 = 1;
      while (v26 != -1)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v26 == -2;
        }
        if (v29) {
          size_t v27 = a2;
        }
        unsigned int v30 = v25 + v28++;
        unsigned int v25 = v30 & v24;
        a2 = (char *)&buffer[12 * v25];
        int v26 = *(_DWORD *)a2;
        if (*a3 == *(_DWORD *)a2) {
          goto LABEL_3;
        }
      }
      if (v27) {
        a2 = v27;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)a2 = *a3;
  *((void *)a2 + 1) = a2 + 24;
  *((void *)a2 + 2) = *(void *)"";
  if (*(_DWORD *)(a4 + 8)) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(a2 + 8), a4);
  }
  a2[40] = *(unsigned char *)(a4 + 32);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)a1;
    unint64_t v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      unint64_t v9 = *(_DWORD **)a1;
LABEL_7:
      unint64_t v13 = &v7[12 * v6];
      do
      {
        *unint64_t v9 = -1;
        v9 += 12;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x30 + 1;
    unint64_t v9 = &v7[12 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    int v12 = *(_DWORD **)a1;
    do
    {
      *int v12 = -1;
      v12[12] = -1;
      v12 += 24;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      int v14 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          int v16 = v15 - 1;
          unsigned int v17 = v16 & (37 * v14);
          uint64_t v18 = *(void *)a1 + 48 * v17;
          int v19 = *(_DWORD *)v18;
          if (v14 != *(_DWORD *)v18)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                uint64_t v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = *(void *)a1 + 48 * v17;
              int v19 = *(_DWORD *)v18;
              if (v14 == *(_DWORD *)v18) {
                goto LABEL_25;
              }
            }
            if (v20) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
LABEL_25:
        *(_DWORD *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v18 + 24;
        *(void *)(v18 + 16) = *(void *)"";
        if (v4[4]) {
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 2));
        }
        *(unsigned char *)(v18 + 40) = *((unsigned char *)v4 + 40);
        ++*(_DWORD *)(a1 + 8);
        unsigned int v24 = (int *)*((void *)v4 + 1);
        if (v24 != v4 + 6) {
          free(v24);
        }
      }
      v4 += 12;
    }
    while (v4 != a3);
  }
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12)) {
    return (char *)v3;
  }
  unint64_t v8 = *(void *)a1 + 8 * v4;
  if (*(void *)a1 > a2 || v8 <= a2)
  {
    unint64_t v52 = 0;
    unint64_t v10 = (char *)(a1 + 16);
    uint64_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v52);
    int v12 = *(char **)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (!v13)
    {
LABEL_22:
      int v29 = v52;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v29;
      return (char *)v3;
    }
    unint64_t v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (int v16 = v11, v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        unint64_t v18 = v14 + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        int v16 = &v11[v19];
        unsigned int v17 = &v12[v19];
        uint64_t v20 = (long long *)(v12 + 16);
        int v21 = v11 + 16;
        uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(v20 - 1);
          long long v24 = *v20;
          *(v20 - 1) = 0uLL;
          long long *v20 = 0uLL;
          *(v21 - 1) = v23;
          _OWORD *v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          uint64_t v27 = *(void *)a1 - 8;
          do
          {
            int v28 = *(mlir::Region **)(v27 + v15);
            *(void *)(v27 + v15) = 0;
            if (v28)
            {
              mlir::Region::~Region(v28);
              MEMORY[0x21667D3C0]();
            }
            v15 -= 8;
          }
          while (v15);
          int v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      int v16 = v11;
      unsigned int v17 = *(char **)a1;
    }
    unsigned int v25 = &v12[8 * v13];
    do
    {
      uint64_t v26 = *(void *)v17;
      *(void *)unsigned int v17 = 0;
      v17 += 8;
      *(void *)int v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  uint64_t v30 = a2 - *(void *)a1;
  unint64_t v52 = 0;
  uint64_t v31 = (char *)(a1 + 16);
  unsigned int v32 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v52);
  int v33 = *(char **)a1;
  uint64_t v34 = *(unsigned int *)(a1 + 8);
  if (v34)
  {
    unint64_t v35 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v36 = 8 * v34;
    if (v35 >= 0xB)
    {
      if (v33 >= &v32[v36] || (v37 = v32, uint64_t v38 = *(char **)a1, v32 >= &v33[v36]))
      {
        unint64_t v39 = v35 + 1;
        uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v37 = &v32[v40];
        uint64_t v38 = &v33[v40];
        BOOL v41 = (long long *)(v33 + 16);
        unint64_t v42 = v32 + 16;
        uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v44 = *(v41 - 1);
          long long v45 = *v41;
          *(v41 - 1) = 0uLL;
          *BOOL v41 = 0uLL;
          *(v42 - 1) = v44;
          *unint64_t v42 = v45;
          v41 += 2;
          v42 += 2;
          v43 -= 4;
        }
        while (v43);
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          uint64_t v48 = *(void *)a1 - 8;
          do
          {
            uint64_t v49 = *(mlir::Region **)(v48 + v36);
            *(void *)(v48 + v36) = 0;
            if (v49)
            {
              mlir::Region::~Region(v49);
              MEMORY[0x21667D3C0]();
            }
            v36 -= 8;
          }
          while (v36);
          int v33 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      uint64_t v37 = v32;
      uint64_t v38 = *(char **)a1;
    }
    int64_t v46 = &v33[8 * v34];
    do
    {
      uint64_t v47 = *(void *)v38;
      *(void *)uint64_t v38 = 0;
      v38 += 8;
      *(void *)uint64_t v37 = v47;
      v37 += 8;
    }
    while (v38 != v46);
    goto LABEL_35;
  }
LABEL_40:
  uint64_t v50 = v30 >> 3;
  int v51 = v52;
  if (v33 != v31) {
    free(v33);
  }
  *(void *)a1 = v32;
  *(_DWORD *)(a1 + 12) = v51;
  return &v32[8 * v50];
}

uint64_t mlir::Diagnostic::append<char const(&)[81],unsigned int &,char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(uint64_t a1, char *__s, unsigned int *a3, char *a4, unsigned int *a5, char *a6, char **a7)
{
  size_t v14 = strlen(__s);
  unint64_t v15 = *(void *)(a1 + 16);
  int v34 = 3;
  unint64_t v35 = __s;
  size_t v36 = v14;
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  unsigned int v17 = &v34;
  if (v16 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v28 = v16 + 1;
    BOOL v29 = v15 + 24 * v16 > (unint64_t)&v34;
    if (v15 <= (unint64_t)&v34 && v29)
    {
      unsigned int v32 = (char *)&v34 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v17 = (int *)&v32[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v17 = &v34;
    }
  }
  uint64_t v18 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v19 = *(_OWORD *)v17;
  *(void *)(v18 + 16) = *((void *)v17 + 2);
  *(_OWORD *)uint64_t v18 = v19;
  unsigned int v20 = *(_DWORD *)(a1 + 28);
  uint64_t v21 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v21;
  uint64_t v22 = (char *)*a3;
  int v34 = 5;
  unint64_t v35 = v22;
  unint64_t v23 = *(void *)(a1 + 16);
  long long v24 = &v34;
  if (v21 >= v20)
  {
    unint64_t v30 = v21 + 1;
    BOOL v31 = v23 + 24 * v21 > (unint64_t)&v34;
    if (v23 <= (unint64_t)&v34 && v31)
    {
      int v33 = (char *)&v34 - v23;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      unint64_t v23 = *(void *)(a1 + 16);
      long long v24 = (int *)&v33[v23];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      unint64_t v23 = *(void *)(a1 + 16);
      long long v24 = &v34;
    }
  }
  uint64_t v25 = v23 + 24 * *(unsigned int *)(a1 + 24);
  long long v26 = *(_OWORD *)v24;
  *(void *)(v25 + 16) = *((void *)v24 + 2);
  *(_OWORD *)uint64_t v25 = v26;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(uint64_t a1, char *__s, unsigned int *a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  BOOL v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      unint64_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
  uint64_t v18 = (char *)*a3;
  int v30 = 5;
  BOOL v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  unsigned int v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      BOOL v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unsigned int v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unsigned int v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

char *llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<void *,mlir::BytecodeReader::Impl::UseListOrderStorage const&>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v16 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      uint64_t v10 = *(void *)a2;
      goto LABEL_4;
    }
    int v16 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v17 = *(uint64_t **)a1;
  unint64_t v18 = (v16 - 1) | ((unint64_t)(v16 - 1) >> 1);
  unint64_t v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
  int v20 = ((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8);
  if ((v20 + 1) > 0x40) {
    unsigned int v21 = v20 + 1;
  }
  else {
    unsigned int v21 = 64;
  }
  *(_DWORD *)(a1 + 16) = v21;
  buffer = llvm::allocate_buffer(48 * v21, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v17)
  {
    uint64_t v23 = 6 * v8;
    llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(a1, v17, &v17[v23]);
    llvm::deallocate_buffer((llvm *)v17, (void *)(v23 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  unint64_t v25 = 48 * v24 - 48;
  unint64_t v26 = buffer;
  if (v25 < 0x30) {
    goto LABEL_44;
  }
  unint64_t v27 = v25 / 0x30 + 1;
  unint64_t v26 = &buffer[6 * (v27 & 0xFFFFFFFFFFFFFFELL)];
  uint64_t v28 = v27 & 0xFFFFFFFFFFFFFFELL;
  BOOL v29 = buffer;
  do
  {
    void *v29 = -4096;
    v29[6] = -4096;
    v29 += 12;
    v28 -= 2;
  }
  while (v28);
  if (v27 != (v27 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_44:
    do
    {
      void *v26 = -4096;
      v26 += 6;
    }
    while (v26 != &buffer[6 * v24]);
  }
  uint64_t v10 = *a3;
  int v30 = v24 - 1;
  unsigned int v31 = ((*a3 >> 4) ^ (*a3 >> 9)) & v30;
  a2 = (char *)&buffer[6 * v31];
  uint64_t v32 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    int v33 = 0;
    int v34 = 1;
    while (v32 != -4096)
    {
      if (v33) {
        BOOL v35 = 0;
      }
      else {
        BOOL v35 = v32 == -8192;
      }
      if (v35) {
        int v33 = a2;
      }
      unsigned int v36 = v31 + v34++;
      unsigned int v31 = v36 & v30;
      a2 = (char *)&buffer[6 * v31];
      uint64_t v32 = *(void *)a2;
      if (v10 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v33) {
      a2 = v33;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  unint64_t v11 = a2 + 24;
  *((void *)a2 + 1) = a2 + 24;
  *((void *)a2 + 2) = *(void *)"";
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  if (a2 + 8 != (char *)a4 && v12 != 0)
  {
    if (v12 < 5)
    {
      unsigned int v14 = *(_DWORD *)(a4 + 8);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 8), a2 + 24, *(unsigned int *)(a4 + 8), 4);
      unsigned int v14 = *(_DWORD *)(a4 + 8);
      if (!v14)
      {
LABEL_15:
        *((_DWORD *)a2 + 4) = v12;
        goto LABEL_16;
      }
      unint64_t v11 = (void *)*((void *)a2 + 1);
    }
    memcpy(v11, *(const void **)a4, 4 * v14);
    goto LABEL_15;
  }
LABEL_16:
  a2[40] = *(unsigned char *)(a4 + 32);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    unint64_t v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      unint64_t v9 = *(void **)a1;
LABEL_7:
      uint64_t v13 = &v7[6 * v6];
      do
      {
        *unint64_t v9 = -4096;
        v9 += 6;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x30 + 1;
    unint64_t v9 = &v7[6 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unsigned int v12 = *(void **)a1;
    do
    {
      *unsigned int v12 = -4096;
      v12[6] = -4096;
      v12 += 12;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          int v16 = v15 - 1;
          unsigned int v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v18 = *(void *)a1 + 48 * v17;
          uint64_t v19 = *(void *)v18;
          if (v14 != *(void *)v18)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -4096)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -8192;
              }
              if (v22) {
                uint64_t v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = *(void *)a1 + 48 * v17;
              uint64_t v19 = *(void *)v18;
              if (v14 == *(void *)v18) {
                goto LABEL_25;
              }
            }
            if (v20) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
LABEL_25:
        *(void *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v18 + 24;
        *(void *)(v18 + 16) = *(void *)"";
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 1));
        }
        *(unsigned char *)(v18 + 40) = *((unsigned char *)v4 + 40);
        ++*(_DWORD *)(a1 + 8);
        uint64_t v24 = (uint64_t *)v4[1];
        if (v24 != v4 + 3) {
          free(v24);
        }
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::BytecodeReader::Impl::Impl(uint64_t a1, mlir::MLIRContext *a2, mlir::UnknownLoc **a3, char a4, _OWORD *a5, uint64_t a6)
{
  void v18[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a4;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 24;
  *(void *)(a1 + 32) = a1 + 24;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 88) = a1 + 536;
  *(void *)(a1 + 96) = a1 + 424;
  *(void *)(a1 + 104) = a1 + 336;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x100000000;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0x100000000;
  *(void *)(a1 + 2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = a3;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 288;
  *(void *)(a1 + 280) = 0x600000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0x1000000000;
  *(void *)(a1 + 360) = a1 + 376;
  *(void *)(a1 + 368) = 0x100000000;
  *(void *)(a1 + 4(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 440;
  *(void *)(a1 + 432) = 0x200000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 504) = 0x2000000000;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = a1 + 552;
  *(void *)(a1 + 544) = 0x300000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 616) = a1 + 632;
  *(void *)(a1 + 6(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0x600000000;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 708) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 760) = a1 + 760;
  *(void *)(a1 + 768) = a1 + 760;
  *(void *)(a1 + 8(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 832) = a1 + 832;
  *(void *)(a1 + 840) = a1 + 832;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  unint64_t v10 = (void *)(a1 + 872);
  uint64_t v11 = mlir::UnknownLoc::get(*a3, a2);
  mlir::ValueRange::ValueRange(v18, 0, 0);
  uint64_t v15 = mlir::NoneType::get(*a3, v12);
  mlir::ValueRange::ValueRange(v17, (uint64_t)&v15, 1uLL);
  mlir::BlockRange::BlockRange(v16, 0, 0);
  mlir::OperationState::OperationState(v10, v11, (uint64_t)"builtin.unrealized_conversion_cast", 34, v18[0], v18[1], v17[0], v17[1], 0, 0, v16[0], v16[1], 0, 0);
  long long v13 = a5[1];
  *(_OWORD *)(a1 + 1176) = *a5;
  *(_OWORD *)(a1 + 1192) = v13;
  *(void *)(a1 + 1208) = a6;
  return a1;
}

void mlir::BytecodeReader::Impl::~Impl(llvm **this)
{
}

char *std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>(void **a1)
{
  unint64_t v2 = (char *)*a1;
  uint64_t v1 = (char *)a1[1];
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((v1 - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v2) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v2) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - v2) >> 3)) >= 0x249249249249249) {
    unint64_t v4 = 0x492492492492492;
  }
  if (v4 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v6 = 56 * v4;
  int v7 = (char *)operator new(56 * v4);
  unint64_t v8 = &v7[56 * v3];
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  unint64_t v9 = &v7[v6];
  *(_OWORD *)unint64_t v8 = 0u;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 3) = v8 + 40;
  *((_DWORD *)v8 + 9) = 4;
  unint64_t v10 = v8 + 56;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      unsigned int v12 = &v8[v11];
      long long v13 = &v1[v11];
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v1[v11 - 56];
      *((void *)v12 - 5) = *(void *)&v1[v11 - 40];
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v12 - 4) = &v8[v11 - 16];
      *(void *)&v8[v11 - 24] = *(void *)"";
      if (*(_DWORD *)&v1[v11 - 24]) {
        llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v8[v11 - 32], (uint64_t)(v13 - 32));
      }
      v11 -= 56;
    }
    while (&v1[v11] != v2);
    uint64_t v1 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = &v8[v11];
    a1[1] = v10;
    a1[2] = v9;
    if (v14 != v1)
    {
      uint64_t v15 = v14 - 16;
      do
      {
        unsigned int v17 = (char *)*((void *)v15 - 2);
        if (v15 != v17) {
          free(v17);
        }
        uint64_t v18 = (void *)*((void *)v15 - 5);
        if (v18)
        {
          *((void *)v15 - 4) = v18;
          operator delete(v18);
        }
        int v16 = v15 - 40;
        v15 -= 56;
      }
      while (v16 != v1);
    }
  }
  if (v1) {
    operator delete(v1);
  }
  return v8 + 56;
}

char *std::vector<mlir::BytecodeReader::Impl::RegionReadState>::__push_back_slow_path<mlir::BytecodeReader::Impl::RegionReadState>(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 7;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 57) {
    abort();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 6 > v3) {
    unint64_t v3 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 57) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v9 = &v8[128 * v2];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *((void *)v9 + 2) = v10;
  *((void *)v9 + 3) = v11;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  *((void *)v9 + 5) = v9 + 56;
  *((void *)v9 + 6) = 0x600000000;
  if (*(_DWORD *)(a2 + 48)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v9 + 40), a2 + 40);
  }
  unsigned int v12 = &v8[128 * v7];
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 + 104);
  v9[120] = *(unsigned char *)(a2 + 120);
  long long v13 = v9 + 128;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v18 = &v9[v16];
      uint64_t v19 = &v14[v16];
      long long v20 = *(_OWORD *)&v14[v16 - 128];
      *((void *)v18 - 14) = *(void *)&v14[v16 - 112];
      *((_OWORD *)v18 - 8) = v20;
      uint64_t v21 = *(void *)&v14[v16 - 104];
      *(void *)&v14[v16 - 104] = 0;
      *(void *)&v9[v16 - 88] = &v9[v16 - 72];
      uint64_t v22 = (uint64_t)&v9[v16 - 88];
      *(void *)(v22 - 16) = v21;
      *(_DWORD *)(v22 - 8) = *(_DWORD *)&v14[v16 - 96];
      *(void *)(v22 + 8) = 0x600000000;
      if (*(_DWORD *)&v14[v16 - 80]) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, (uint64_t)(v19 - 88));
      }
      long long v17 = *(_OWORD *)(v19 - 24);
      *(v18 - 8) = *(v19 - 8);
      *(_OWORD *)(v18 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
      v16 -= 128;
    }
    while (&v14[v16] != v15);
    uint64_t v14 = (char *)*a1;
    unsigned int v23 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v23 != v14)
    {
      uint64_t v24 = (char *)*((void *)v23 - 11);
      if (v23 - 72 != v24) {
        free(v24);
      }
      uint64_t v25 = *((void *)v23 - 13);
      *((void *)v23 - 13) = 0;
      if (v25) {
        MEMORY[0x21667D3C0](v25, 0x1070C401CF53446);
      }
      v23 -= 128;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v9 + 128;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      unint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    unint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 4 * v8);
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 4 * v9);
        uint64_t v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *unint64_t v7 = 0;
          return a1;
        }
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = *v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 4);
      uint64_t v9 = 0;
      uint64_t v10 = *v7;
      if (!*v7) {
        goto LABEL_15;
      }
    }
    memcpy((void *)(*(void *)a1 + 4 * v9), (const void *)(*(void *)a2 + 4 * v9), *(void *)a2 + 4 * v10 - (*(void *)a2 + 4 * v9));
    goto LABEL_15;
  }
  return a1;
}

void llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallImpl<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1>()
{
}

uint64_t mlir::Diagnostic::append<char const(&)[30],std::string>(uint64_t a1, char *__s, void **a3)
{
  uint64_t v6 = (void **)strlen(__s);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v17[0]) = 3;
  v17[1] = (void **)__s;
  unint64_t v17[2] = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v8 + 24 * v9 > (unint64_t)v17;
    if (v8 <= (unint64_t)v17 && v15)
    {
      uint64_t v16 = (char *)v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      uint64_t v10 = (void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      uint64_t v10 = v17;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  __int16 v18 = 260;
  v17[0] = a3;
  mlir::Diagnostic::operator<<(a1, v17);
  return a1;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(anonymous namespace'::BytecodeDialect *)>::callback_fn<mlir::BytecodeReader::Impl::parseDialectSection(llvm::ArrayRef<unsigned char>)::$_0>(void *a1, uint64_t a2)
{
  long long v24 = 0uLL;
  uint64_t v4 = *a1;
  unint64_t v3 = (uint64_t *)a1[1];
  if (*(void *)(*a1 + 248) <= 4uLL)
  {
    unint64_t v25 = 0;
    {
      char v5 = resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v3[3], *(void *)(v4 + 536), *(_DWORD *)(v4 + 544), (char *)v25, &v24, (uint64_t)"string", 6);
      __int16 v6 = 0;
      __int16 v7 = 0;
      uint64_t result = 0;
      if (!v5) {
        return result;
      }
      goto LABEL_8;
    }
    return 0;
  }
  unint64_t v25 = 0;
  char v9 = v25;
  if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v3[3], *(void *)(v4 + 536), *(_DWORD *)(v4 + 544), (char *)(v25 >> 1), &v24, (uint64_t)"string", 6))return 0; {
  __int16 v6 = v9 & 1;
  }
  __int16 v7 = 1;
LABEL_8:
  long long v10 = v24;
  __int16 v11 = v6 | (v7 << 8);
  uint64_t v12 = *(unsigned int *)(v4 + 368);
  if (v12 >= *(_DWORD *)(v4 + 372))
  {
    uint64_t v14 = v4 + 360;
    LOBYTE(v25) = 0;
    char v26 = 0;
    uint64_t v27 = a2;
    long long v28 = v24;
    __int16 v29 = v11;
    unint64_t v15 = v12 + 1;
    unint64_t v16 = *(void *)(v4 + 360);
    BOOL v17 = v16 + 48 * v12 > (unint64_t)&v25;
    if (v16 <= (unint64_t)&v25 && v17)
    {
      unsigned int v23 = (char *)&v25 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v4 + 376), v15, 48);
      uint64_t v18 = *(void *)(v4 + 360);
      uint64_t v19 = (unint64_t *)&v23[v18];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v4 + 376), v15, 48);
      uint64_t v18 = *(void *)(v4 + 360);
      uint64_t v19 = &v25;
    }
    long long v20 = (_OWORD *)(v18 + 48 * *(unsigned int *)(v4 + 368));
    long long v21 = *(_OWORD *)v19;
    long long v22 = *((_OWORD *)v19 + 2);
    v20[1] = *((_OWORD *)v19 + 1);
    v20[2] = v22;
    _OWORD *v20 = v21;
  }
  else
  {
    uint64_t v13 = *(void *)(v4 + 360) + 48 * v12;
    *(unsigned char *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = a2;
    *(_OWORD *)(v13 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
    *(_WORD *)(v13 + 40) = v11;
  }
  ++*(_DWORD *)(v4 + 368);
  return 1;
}

int *std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v90 = *((void *)a2 - 1);
                unint64_t v91 = *(void *)(v10 + 8);
                if (v90 > v91)
                {
                  int v92 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = *(a2 - 4);
                  *(a2 - 4) = v92;
                  *(void *)(v10 + 8) = v90;
                  *((void *)a2 - 1) = v91;
                }
                return result;
              case 3:
                unint64_t v93 = *(void *)(v10 + 24);
                unint64_t v94 = *(void *)(v10 + 8);
                unint64_t v95 = *((void *)a2 - 1);
                if (v93 <= v94)
                {
                  if (v95 > v93)
                  {
                    int v144 = *(_DWORD *)(v10 + 16);
                    *(_DWORD *)(v10 + 16) = *(a2 - 4);
                    *(a2 - 4) = v144;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v95;
                    *((void *)a2 - 1) = v93;
                    unint64_t v145 = *(void *)(v10 + 24);
                    unint64_t v146 = *(void *)(v10 + 8);
                    if (v145 > v146)
                    {
                      int v147 = *(_DWORD *)v10;
                      *(_DWORD *)unint64_t v10 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v147;
                      *(void *)(v10 + 8) = v145;
                      *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v146;
                    }
                  }
                }
                else
                {
                  int v96 = *(_DWORD *)v10;
                  if (v95 <= v93)
                  {
                    *(_DWORD *)unint64_t v10 = *(_DWORD *)(v10 + 16);
                    *(_DWORD *)(v10 + 16) = v96;
                    *(void *)(v10 + 8) = v93;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v94;
                    unint64_t v155 = *((void *)a2 - 1);
                    if (v155 <= v94) {
                      return result;
                    }
                    *(_DWORD *)(v10 + 16) = *(a2 - 4);
                    *(a2 - 4) = v96;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v155;
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v10 = *(a2 - 4);
                    *(a2 - 4) = v96;
                    *(void *)(v10 + 8) = v95;
                  }
                  *((void *)a2 - 1) = v94;
                }
                break;
              case 4:
                return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32), a2 - 4);
              case 5:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32), (int *)(v10 + 48));
                unint64_t v97 = *((void *)a2 - 1);
                unint64_t v98 = *(void *)(v10 + 56);
                if (v97 > v98)
                {
                  int v99 = *(_DWORD *)(v10 + 48);
                  *(_DWORD *)(v10 + 48) = *(a2 - 4);
                  *(a2 - 4) = v99;
                  *(void *)(v10 + 56) = v97;
                  *((void *)a2 - 1) = v98;
                  unint64_t v100 = *(void *)(v10 + 56);
                  unint64_t v101 = *(void *)(v10 + 40);
                  if (v100 > v101)
                  {
                    int v102 = *(_DWORD *)(v10 + 32);
                    int v103 = *(_DWORD *)(v10 + 48);
                    *(_DWORD *)(v10 + 32) = v103;
                    *(_DWORD *)(v10 + 48) = v102;
                    *(void *)(v10 + 40) = v100;
                    *(void *)(v10 + 56) = v101;
                    unint64_t v104 = *(void *)(v10 + 24);
                    if (v100 > v104)
                    {
                      int v105 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v103;
                      *(_DWORD *)(v10 + 32) = v105;
                      *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v100;
                      *(void *)(v10 + 40) = v104;
                      unint64_t v106 = *(void *)(v10 + 8);
                      if (v100 > v106)
                      {
                        int v107 = *(_DWORD *)v10;
                        *(_DWORD *)unint64_t v10 = v103;
                        *(_DWORD *)(v10 + 16) = v107;
                        *(void *)(v10 + 8) = v100;
                        *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v106;
                      }
                    }
                  }
                }
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v108 = (int *)(v10 + 16);
            BOOL v110 = (int *)v10 == a2 || v108 == a2;
            if (a4)
            {
              if (!v110)
              {
                uint64_t v111 = 0;
                uint64_t v112 = (int *)v10;
                do
                {
                  unint64_t v114 = *((void *)v112 + 3);
                  unint64_t v115 = *((void *)v112 + 1);
                  uint64_t v112 = v108;
                  if (v114 > v115)
                  {
                    int v116 = *v108;
                    uint64_t v117 = v111;
                    do
                    {
                      uint64_t v118 = v10 + v117;
                      *(_DWORD *)(v118 + 16) = *(_DWORD *)(v10 + v117);
                      *(void *)(v118 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(void *)(v10 + v117 + 8);
                      if (!v117)
                      {
                        uint64_t v113 = v10;
                        goto LABEL_124;
                      }
                      v117 -= 16;
                    }
                    while (v114 > *(void *)(v118 - 8));
                    uint64_t v113 = v10 + v117 + 16;
LABEL_124:
                    *(_DWORD *)uint64_t v113 = v116;
                    *(void *)(v113 + 8) = v114;
                  }
                  uint64_t v108 = v112 + 4;
                  v111 += 16;
                }
                while (v112 + 4 != a2);
              }
            }
            else if (!v110)
            {
              unint64_t v148 = (unint64_t *)(v10 + 24);
              do
              {
                unint64_t v149 = *(void *)(v9 + 24);
                unint64_t v150 = *(void *)(v9 + 8);
                unint64_t v9 = (unint64_t)v108;
                if (v149 > v150)
                {
                  uint64_t v151 = *(void *)v108;
                  uint64_t v152 = v148;
                  do
                  {
                    unsigned int v153 = v152;
                    *((_DWORD *)v152 - 2) = *((_DWORD *)v152 - 6);
                    unint64_t v154 = *(v152 - 2);
                    v152 -= 2;
                    unint64_t *v153 = v154;
                  }
                  while (v149 > *(v153 - 4));
                  *((_DWORD *)v152 - 2) = v151;
                  unint64_t *v152 = v149;
                }
                uint64_t v108 = (int *)(v9 + 16);
                v148 += 2;
              }
              while ((int *)(v9 + 16) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((int *)v10 != a2)
            {
              int64_t v119 = (unint64_t)(v12 - 2) >> 1;
              int64_t v120 = v119;
              do
              {
                if (v119 >= v120)
                {
                  uint64_t v122 = (2 * v120) | 1;
                  unint64_t v123 = v10 + 16 * v122;
                  if (2 * v120 + 2 < v12)
                  {
                    BOOL v121 = *(void *)(v123 + 8) > *(void *)(v123 + 24);
                    v123 += 16 * v121;
                    if (v121) {
                      uint64_t v122 = 2 * v120 + 2;
                    }
                  }
                  unint64_t v124 = v10 + 16 * v120;
                  unint64_t v125 = *(void *)(v124 + 8);
                  if (*(void *)(v123 + 8) <= v125)
                  {
                    int v126 = *(_DWORD *)v124;
                    do
                    {
                      unint64_t v127 = v124;
                      unint64_t v124 = v123;
                      *(_DWORD *)unint64_t v127 = *(_DWORD *)v123;
                      *(void *)(v127 + 8) = *(void *)(v123 + 8);
                      if (v119 < v122) {
                        break;
                      }
                      uint64_t v128 = (2 * v122) | 1;
                      unint64_t v123 = v10 + 16 * v128;
                      uint64_t v129 = 2 * v122 + 2;
                      if (v129 < v12)
                      {
                        BOOL v121 = *(void *)(v123 + 8) > *(void *)(v123 + 24);
                        v123 += 16 * v121;
                        if (v121) {
                          uint64_t v128 = v129;
                        }
                      }
                      uint64_t result = *(int **)(v123 + 8);
                      uint64_t v122 = v128;
                    }
                    while ((unint64_t)result <= v125);
                    *(_DWORD *)unint64_t v124 = v126;
                    *(void *)(v124 + 8) = v125;
                  }
                }
                BOOL v121 = v120-- <= 0;
              }
              while (!v121);
              uint64_t v130 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v131 = 0;
                int v132 = *(_DWORD *)v10;
                uint64_t v133 = *(void *)(v10 + 8);
                unint64_t v134 = v10;
                do
                {
                  uint64_t v135 = v134 + 16 * v131 + 16;
                  uint64_t v136 = (2 * v131) | 1;
                  uint64_t v137 = 2 * v131 + 2;
                  if (v137 < v130)
                  {
                    BOOL v121 = *(void *)(v135 + 8) > *(void *)(v135 + 24);
                    v135 += 16 * v121;
                    if (v121) {
                      uint64_t v136 = v137;
                    }
                  }
                  *(_DWORD *)unint64_t v134 = *(_DWORD *)v135;
                  *(void *)(v134 + 8) = *(void *)(v135 + 8);
                  unint64_t v134 = v135;
                  uint64_t v131 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                if ((int *)v135 == a2 - 4)
                {
                  *(_DWORD *)uint64_t v135 = v132;
                  *(void *)(v135 + 8) = v133;
                }
                else
                {
                  *(_DWORD *)uint64_t v135 = *(a2 - 4);
                  *(void *)(v135 + 8) = *((void *)a2 - 1);
                  *(a2 - 4) = v132;
                  *((void *)a2 - 1) = v133;
                  uint64_t v138 = v135 - v10 + 16;
                  if (v138 >= 17)
                  {
                    unint64_t v139 = (((unint64_t)v138 >> 4) - 2) >> 1;
                    uint64_t v140 = v10 + 16 * v139;
                    unint64_t v141 = *(void *)(v135 + 8);
                    if (*(void *)(v140 + 8) > v141)
                    {
                      int v142 = *(_DWORD *)v135;
                      do
                      {
                        uint64_t v143 = v135;
                        uint64_t v135 = v140;
                        *(_DWORD *)uint64_t v143 = *(_DWORD *)v140;
                        *(void *)(v143 + 8) = *(void *)(v140 + 8);
                        if (!v139) {
                          break;
                        }
                        unint64_t v139 = (v139 - 1) >> 1;
                        uint64_t v140 = v10 + 16 * v139;
                      }
                      while (*(void *)(v140 + 8) > v141);
                      *(_DWORD *)uint64_t v135 = v142;
                      *(void *)(v135 + 8) = v141;
                    }
                  }
                }
                a2 -= 4;
                BOOL v121 = v130-- <= 2;
              }
              while (!v121);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
          unint64_t v15 = *((void *)a2 - 1);
          if ((unint64_t)v11 < 0x801) {
            break;
          }
          unint64_t v16 = *(void *)(v14 + 8);
          unint64_t v17 = *(void *)(v10 + 8);
          if (v16 <= v17)
          {
            if (v15 > v16)
            {
              int v22 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = *(a2 - 4);
              *(a2 - 4) = v22;
              *(void *)(v14 + 8) = v15;
              *((void *)a2 - 1) = v16;
              unint64_t v23 = *(void *)(v14 + 8);
              unint64_t v24 = *(void *)(v10 + 8);
              if (v23 > v24)
              {
                int v25 = *(_DWORD *)v10;
                *(_DWORD *)unint64_t v10 = *(_DWORD *)v14;
                *(_DWORD *)unint64_t v14 = v25;
                *(void *)(v10 + 8) = v23;
                *(void *)(v14 + 8) = v24;
              }
            }
          }
          else
          {
            int v18 = *(_DWORD *)v10;
            if (v15 <= v16)
            {
              *(_DWORD *)unint64_t v10 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = v18;
              *(void *)(v10 + 8) = v16;
              *(void *)(v14 + 8) = v17;
              unint64_t v31 = *((void *)a2 - 1);
              if (v31 <= v17) {
                goto LABEL_24;
              }
              *(_DWORD *)unint64_t v14 = *(a2 - 4);
              *(a2 - 4) = v18;
              *(void *)(v14 + 8) = v31;
            }
            else
            {
              *(_DWORD *)unint64_t v10 = *(a2 - 4);
              *(a2 - 4) = v18;
              *(void *)(v10 + 8) = v15;
            }
            *((void *)a2 - 1) = v17;
          }
LABEL_24:
          unint64_t v32 = v10 + 16 * v13;
          unint64_t v33 = v32 - 16;
          unint64_t v34 = *(void *)(v32 - 8);
          unint64_t v35 = *(void *)(v10 + 24);
          unint64_t v36 = *((void *)a2 - 3);
          if (v34 <= v35)
          {
            if (v36 > v34)
            {
              int v38 = *(_DWORD *)v33;
              *(_DWORD *)unint64_t v33 = *(a2 - 8);
              *(a2 - 8) = v38;
              *(void *)(v33 + 8) = v36;
              *((void *)a2 - 3) = v34;
              unint64_t v39 = *(void *)(v33 + 8);
              unint64_t v40 = *(void *)(v10 + 24);
              if (v39 > v40)
              {
                int v41 = *(_DWORD *)(v10 + 16);
                *(_DWORD *)(v10 + 16) = *(_DWORD *)v33;
                *(_DWORD *)unint64_t v33 = v41;
                *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v39;
                *(void *)(v33 + 8) = v40;
              }
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 16);
            if (v36 <= v34)
            {
              *(_DWORD *)(v10 + 16) = *(_DWORD *)v33;
              *(_DWORD *)unint64_t v33 = v37;
              *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v34;
              *(void *)(v33 + 8) = v35;
              unint64_t v44 = *((void *)a2 - 3);
              if (v44 <= v35) {
                goto LABEL_38;
              }
              *(_DWORD *)unint64_t v33 = *(a2 - 8);
              *(a2 - 8) = v37;
              *(void *)(v33 + 8) = v44;
            }
            else
            {
              *(_DWORD *)(v10 + 16) = *(a2 - 8);
              *(a2 - 8) = v37;
              *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v36;
            }
            *((void *)a2 - 3) = v35;
          }
LABEL_38:
          unint64_t v45 = v10 + 16 * v13;
          unint64_t v46 = v45 + 16;
          unint64_t v47 = *(void *)(v45 + 24);
          unint64_t v48 = *(void *)(v10 + 40);
          unint64_t v49 = *((void *)a2 - 5);
          if (v47 <= v48)
          {
            if (v49 > v47)
            {
              int v51 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = *(a2 - 12);
              *(a2 - 12) = v51;
              *(void *)(v46 + 8) = v49;
              *((void *)a2 - 5) = v47;
              unint64_t v52 = *(void *)(v46 + 8);
              unint64_t v53 = *(void *)(v10 + 40);
              if (v52 > v53)
              {
                int v54 = *(_DWORD *)(v10 + 32);
                *(_DWORD *)(v10 + 32) = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v54;
                *(void *)(v10 + 40) = v52;
                *(void *)(v46 + 8) = v53;
              }
            }
          }
          else
          {
            int v50 = *(_DWORD *)(v10 + 32);
            if (v49 <= v47)
            {
              *(_DWORD *)(v10 + 32) = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v50;
              *(void *)(v10 + 40) = v47;
              *(void *)(v46 + 8) = v48;
              unint64_t v55 = *((void *)a2 - 5);
              if (v55 <= v48) {
                goto LABEL_47;
              }
              *(_DWORD *)unint64_t v46 = *(a2 - 12);
              *(a2 - 12) = v50;
              *(void *)(v46 + 8) = v55;
            }
            else
            {
              *(_DWORD *)(v10 + 32) = *(a2 - 12);
              *(a2 - 12) = v50;
              *(void *)(v10 + 40) = v49;
            }
            *((void *)a2 - 5) = v48;
          }
LABEL_47:
          unint64_t v56 = *(void *)(v14 + 8);
          unint64_t v57 = *(void *)(v33 + 8);
          unint64_t v58 = *(void *)(v46 + 8);
          if (v56 <= v57)
          {
            int v59 = *(_DWORD *)v14;
            if (v58 > v56)
            {
              int v60 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v14 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v59;
              *(void *)(v14 + 8) = v58;
              *(void *)(v46 + 8) = v56;
              if (v58 <= v57)
              {
                unint64_t v57 = v58;
                int v59 = v60;
              }
              else
              {
                int v59 = *(_DWORD *)v33;
                *(_DWORD *)unint64_t v33 = v60;
                *(_DWORD *)unint64_t v14 = v59;
                *(void *)(v33 + 8) = v58;
                *(void *)(v14 + 8) = v57;
              }
            }
            else
            {
              unint64_t v57 = *(void *)(v14 + 8);
            }
          }
          else
          {
            int v59 = *(_DWORD *)v33;
            if (v58 <= v56)
            {
              *(_DWORD *)unint64_t v33 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = v59;
              *(void *)(v33 + 8) = v56;
              *(void *)(v14 + 8) = v57;
              if (v58 > v57)
              {
                int v61 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v14 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v59;
                *(void *)(v14 + 8) = v58;
                *(void *)(v46 + 8) = v57;
                unint64_t v57 = v58;
                int v59 = v61;
              }
            }
            else
            {
              *(_DWORD *)unint64_t v33 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v59;
              *(void *)(v33 + 8) = v58;
              *(void *)(v46 + 8) = v57;
              int v59 = *(_DWORD *)v14;
              unint64_t v57 = v56;
            }
          }
          int v62 = *(_DWORD *)v10;
          *(_DWORD *)unint64_t v10 = v59;
          *(_DWORD *)unint64_t v14 = v62;
          unint64_t v63 = v10 + 16 * v13;
          uint64_t v64 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = v57;
          *(void *)(v63 + 8) = v64;
          --a3;
          uint64_t v30 = *(void *)v10;
          if (a4) {
            goto LABEL_34;
          }
LABEL_58:
          unint64_t v43 = *(void *)(v10 + 8);
          if (*(void *)(v10 - 8) > v43) {
            goto LABEL_59;
          }
          if (v43 > *((void *)a2 - 1))
          {
            unint64_t v79 = v10;
            do
            {
              unint64_t v10 = v79 + 16;
              unint64_t v80 = *(void *)(v79 + 24);
              v79 += 16;
            }
            while (v43 <= v80);
          }
          else
          {
            unint64_t v81 = v10 + 16;
            do
            {
              unint64_t v10 = v81;
              if (v81 >= (unint64_t)a2) {
                break;
              }
              unint64_t v82 = *(void *)(v81 + 8);
              v81 += 16;
            }
            while (v43 <= v82);
          }
          uint64_t v83 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v84 = a2;
            do
            {
              uint64_t v83 = v84 - 4;
              unint64_t v85 = *((void *)v84 - 1);
              v84 -= 4;
            }
            while (v43 > v85);
          }
          while (v10 < (unint64_t)v83)
          {
            int v86 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *v83;
            *uint64_t v83 = v86;
            uint64_t v87 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *((void *)v83 + 1);
            *((void *)v83 + 1) = v87;
            do
            {
              unint64_t v88 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v43 <= v88);
            do
            {
              unint64_t v89 = *((void *)v83 - 1);
              v83 -= 4;
            }
            while (v43 > v89);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(void *)(v9 + 8) = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 16) = v30;
          *(void *)(v10 - 8) = v43;
        }
        unint64_t v19 = *(void *)(v10 + 8);
        unint64_t v20 = *(void *)(v14 + 8);
        if (v19 > v20)
        {
          int v21 = *(_DWORD *)v14;
          if (v15 <= v19)
          {
            *(_DWORD *)unint64_t v14 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = v21;
            *(void *)(v14 + 8) = v19;
            *(void *)(v10 + 8) = v20;
            unint64_t v42 = *((void *)a2 - 1);
            if (v42 <= v20) {
              goto LABEL_33;
            }
            *(_DWORD *)unint64_t v10 = *(a2 - 4);
            *(a2 - 4) = v21;
            *(void *)(v10 + 8) = v42;
          }
          else
          {
            *(_DWORD *)unint64_t v14 = *(a2 - 4);
            *(a2 - 4) = v21;
            *(void *)(v14 + 8) = v15;
          }
          *((void *)a2 - 1) = v20;
LABEL_33:
          --a3;
          uint64_t v30 = *(void *)v10;
          if ((a4 & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_34;
        }
        if (v15 <= v19) {
          goto LABEL_33;
        }
        int v26 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = *(a2 - 4);
        *(a2 - 4) = v26;
        *(void *)(v10 + 8) = v15;
        *((void *)a2 - 1) = v19;
        unint64_t v27 = *(void *)(v10 + 8);
        unint64_t v28 = *(void *)(v14 + 8);
        if (v27 <= v28) {
          goto LABEL_33;
        }
        int v29 = *(_DWORD *)v14;
        *(_DWORD *)unint64_t v14 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = v29;
        *(void *)(v14 + 8) = v27;
        *(void *)(v10 + 8) = v28;
        --a3;
        uint64_t v30 = *(void *)v10;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
LABEL_34:
        unint64_t v43 = *(void *)(v10 + 8);
LABEL_59:
        uint64_t v65 = 0;
        do
        {
          unint64_t v66 = *(void *)(v10 + v65 + 24);
          v65 += 16;
        }
        while (v66 > v43);
        unint64_t v67 = v10 + v65;
        uint64_t v68 = a2;
        if (v65 == 16)
        {
          unsigned __int8 v71 = a2;
          while (v67 < (unint64_t)v71)
          {
            int64_t v69 = v71 - 4;
            unint64_t v72 = *((void *)v71 - 1);
            v71 -= 4;
            if (v72 > v43) {
              goto LABEL_67;
            }
          }
          int64_t v69 = v71;
          unint64_t v10 = v67;
        }
        else
        {
          do
          {
            int64_t v69 = v68 - 4;
            unint64_t v70 = *((void *)v68 - 1);
            v68 -= 4;
          }
          while (v70 <= v43);
LABEL_67:
          unint64_t v10 = v67;
          if (v67 < (unint64_t)v69)
          {
            unint64_t v73 = (unint64_t)v69;
            do
            {
              int v74 = *(_DWORD *)v10;
              *(_DWORD *)unint64_t v10 = *(_DWORD *)v73;
              *(_DWORD *)unint64_t v73 = v74;
              uint64_t v75 = *(void *)(v10 + 8);
              *(void *)(v10 + 8) = *(void *)(v73 + 8);
              *(void *)(v73 + 8) = v75;
              do
              {
                unint64_t v76 = *(void *)(v10 + 24);
                v10 += 16;
              }
              while (v76 > v43);
              do
              {
                unint64_t v77 = *(void *)(v73 - 8);
                v73 -= 16;
              }
              while (v77 <= v43);
            }
            while (v10 < v73);
          }
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(void *)(v9 + 8) = *(void *)(v10 - 8);
        }
        *(_DWORD *)(v10 - 16) = v30;
        *(void *)(v10 - 8) = v43;
        if (v67 >= (unint64_t)v69) {
          break;
        }
LABEL_78:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v78 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(v9, (int *)(v10 - 16));
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v78) {
        goto LABEL_78;
      }
    }
    a2 = (int *)(v10 - 16);
    if (!v78) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(uint64_t a1, int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *((void *)a2 - 1);
      unint64_t v7 = *(void *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        *(void *)(a1 + 8) = v6;
        *((void *)a2 - 1) = v7;
      }
      return result;
    case 3:
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *((void *)a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(a2 - 4);
          *(a2 - 4) = v30;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v11;
          *((void *)a2 - 1) = v9;
          unint64_t v31 = *(void *)(a1 + 24);
          unint64_t v32 = *(void *)(a1 + 8);
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v33;
            *(void *)(a1 + 8) = v31;
            *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v12;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
          unint64_t v37 = *((void *)a2 - 1);
          if (v37 > v10)
          {
            *(_DWORD *)(a1 + 16) = *(a2 - 4);
            *(a2 - 4) = v12;
            *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v37;
            *((void *)a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *(a2 - 4);
          *(a2 - 4) = v12;
          *(void *)(a1 + 8) = v11;
          *((void *)a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (int *)(a1 + 48));
      unint64_t v19 = *((void *)a2 - 1);
      unint64_t v20 = *(void *)(a1 + 56);
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = *(a2 - 4);
      *(a2 - 4) = v21;
      *(void *)(a1 + 56) = v19;
      *((void *)a2 - 1) = v20;
      unint64_t v22 = *(void *)(a1 + 56);
      unint64_t v23 = *(void *)(a1 + 40);
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *(_DWORD *)(a1 + 32);
      int v25 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 32) = v25;
      *(_DWORD *)(a1 + 48) = v24;
      *(void *)(a1 + 40) = v22;
      *(void *)(a1 + 56) = v23;
      unint64_t v26 = *(void *)(a1 + 24);
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = v27;
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v22;
      *(void *)(a1 + 40) = v26;
      unint64_t v28 = *(void *)(a1 + 8);
      if (v22 <= v28) {
        return 1;
      }
      int v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *(_DWORD *)(a1 + 16) = v29;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v28;
      return 1;
    default:
      unint64_t v13 = *(void *)(a1 + 8);
      unint64_t v14 = (unint64_t *)(a1 + 24);
      unint64_t v15 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 40);
      if (v15 > v13)
      {
        int v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v17;
          *(void *)(a1 + 8) = v15;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          int v18 = (unint64_t *)(a1 + 24);
        }
        else
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          int v18 = (unint64_t *)(a1 + 8);
        }
        unint64_t v14 = (unint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *(_DWORD *)(a1 + 16);
        int v35 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 16) = v35;
        *(_DWORD *)(a1 + 32) = v34;
        *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v16;
        *(void *)(a1 + 40) = v15;
        if (v16 > v13)
        {
          int v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *(_DWORD *)(a1 + 16) = v36;
          int v18 = (unint64_t *)(a1 + 8);
LABEL_29:
          unint64_t *v18 = v16;
          *unint64_t v14 = v13;
        }
      }
LABEL_30:
      int v38 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      int v41 = (int *)(a1 + 32);
      while (1)
      {
        unint64_t v42 = *((void *)v38 + 1);
        if (v42 > *((void *)v41 + 1)) {
          break;
        }
LABEL_39:
        int v41 = v38;
        v39 += 16;
        v38 += 4;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *v38;
      uint64_t v44 = v39;
      do
      {
        uint64_t v45 = a1 + v44;
        *(_DWORD *)(v45 + 48) = *(_DWORD *)(a1 + v44 + 32);
        *(void *)(v45 + 56) = *(void *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          *(void *)(a1 + 8) = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 4 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *(void *)(v45 + 24));
      uint64_t v46 = a1 + v44;
      *(_DWORD *)(v46 + 48) = v43;
      *(void *)(v46 + 56) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 4 == a2;
  }
}

int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(int *result, int *a2, int *a3, int *a4)
{
  unint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = *((void *)result + 1);
  unint64_t v6 = *((void *)a3 + 1);
  if (v4 > v5)
  {
    int v7 = *result;
    if (v6 <= v4)
    {
      *BOOL result = *a2;
      *a2 = v7;
      *((void *)result + 1) = v4;
      *((void *)a2 + 1) = v5;
      unint64_t v4 = *((void *)a3 + 1);
      if (v4 <= v5) {
        goto LABEL_11;
      }
      *a2 = *a3;
      *a3 = v7;
      *((void *)a2 + 1) = v4;
    }
    else
    {
      *BOOL result = *a3;
      *a3 = v7;
      *((void *)result + 1) = v6;
    }
    *((void *)a3 + 1) = v5;
    unint64_t v4 = v5;
LABEL_11:
    unint64_t v12 = *((void *)a4 + 1);
    if (v12 <= v4) {
      return result;
    }
    goto LABEL_14;
  }
  if (v6 <= v4)
  {
    unint64_t v4 = *((void *)a3 + 1);
    unint64_t v12 = *((void *)a4 + 1);
    if (v12 <= v6) {
      return result;
    }
    goto LABEL_14;
  }
  int v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  *((void *)a2 + 1) = v6;
  *((void *)a3 + 1) = v4;
  unint64_t v9 = *((void *)a2 + 1);
  unint64_t v10 = *((void *)result + 1);
  if (v9 <= v10) {
    goto LABEL_11;
  }
  int v11 = *result;
  *BOOL result = *a2;
  *a2 = v11;
  *((void *)result + 1) = v9;
  *((void *)a2 + 1) = v10;
  unint64_t v4 = *((void *)a3 + 1);
  unint64_t v12 = *((void *)a4 + 1);
  if (v12 <= v4) {
    return result;
  }
LABEL_14:
  int v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  *((void *)a3 + 1) = v12;
  *((void *)a4 + 1) = v4;
  unint64_t v14 = *((void *)a3 + 1);
  unint64_t v15 = *((void *)a2 + 1);
  if (v14 > v15)
  {
    int v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    *((void *)a2 + 1) = v14;
    *((void *)a3 + 1) = v15;
    unint64_t v17 = *((void *)a2 + 1);
    unint64_t v18 = *((void *)result + 1);
    if (v17 > v18)
    {
      int v19 = *result;
      *BOOL result = *a2;
      *a2 = v19;
      *((void *)result + 1) = v17;
      *((void *)a2 + 1) = v18;
    }
  }
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(char *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  uint64_t v6 = *(void *)result;
  unsigned int v7 = *((_DWORD *)result + 4);
  if (!v7) {
    goto LABEL_22;
  }
  unsigned int v8 = v7 - 1;
  unsigned int v9 = (37 * *a2) & (v7 - 1);
  unint64_t v10 = (_DWORD *)(v6 + 4 * v9);
  int v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    char v12 = 0;
    goto LABEL_9;
  }
  int v13 = 0;
  int v14 = 1;
  while (v11 != -1)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v11 == -2;
    }
    if (v15) {
      int v13 = v10;
    }
    unsigned int v16 = v9 + v14++;
    unsigned int v9 = v16 & v8;
    unint64_t v10 = (_DWORD *)(v6 + 4 * (v16 & v8));
    int v11 = *v10;
    if (*a2 == *v10) {
      goto LABEL_3;
    }
  }
  if (v13) {
    unint64_t v10 = v13;
  }
  int v17 = *((_DWORD *)result + 2);
  if (4 * v17 + 4 >= 3 * v7)
  {
LABEL_22:
    v7 *= 2;
LABEL_23:
    BOOL result = llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)result, v7);
    uint64_t v6 = *(void *)v4;
    int v18 = *((_DWORD *)v4 + 4);
    if (v18)
    {
      int v19 = v18 - 1;
      unsigned int v20 = (37 * *a2) & (v18 - 1);
      unint64_t v10 = (_DWORD *)(v6 + 4 * v20);
      int v21 = *v10;
      if (*a2 != *v10)
      {
        unint64_t v22 = 0;
        int v23 = 1;
        while (v21 != -1)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == -2;
          }
          if (v24) {
            unint64_t v22 = v10;
          }
          unsigned int v25 = v20 + v23++;
          unsigned int v20 = v25 & v19;
          unint64_t v10 = (_DWORD *)(v6 + 4 * (v25 & v19));
          int v21 = *v10;
          if (*a2 == *v10) {
            goto LABEL_6;
          }
        }
        if (v22) {
          unint64_t v10 = v22;
        }
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_6;
  }
  if (v7 + ~v17 - *((_DWORD *)result + 3) <= v7 >> 3) {
    goto LABEL_23;
  }
LABEL_6:
  ++*((_DWORD *)v4 + 2);
  if (*v10 != -1) {
    --*((_DWORD *)v4 + 3);
  }
  *unint64_t v10 = *a2;
  unsigned int v7 = *((_DWORD *)v4 + 4);
  char v12 = 1;
LABEL_9:
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v6 + 4 * v7;
  *(unsigned char *)(a3 + 16) = v12;
  return result;
}

char *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = (char *)llvm::allocate_buffer(4 * v8, (std::align_val_t)4uLL);
  unint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11) {
      memset(result, 255, 4 * v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v4;
      do
      {
        int v16 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          int v17 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v18 = v17 & (37 * v16);
          BOOL v15 = &v10[4 * v18];
          int v19 = *(_DWORD *)v15;
          if (v16 != *(_DWORD *)v15)
          {
            unsigned int v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                unsigned int v20 = v15;
              }
              unsigned int v23 = v18 + v21++;
              unsigned int v18 = v23 & v17;
              BOOL v15 = &v10[4 * (v23 & v17)];
              int v19 = *(_DWORD *)v15;
              if (v16 == *(_DWORD *)v15) {
                goto LABEL_16;
              }
            }
            if (v20) {
              BOOL v15 = v20;
            }
          }
LABEL_16:
          *(_DWORD *)BOOL v15 = v16;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        int v13 = (llvm *)((char *)v13 + 4);
      }
      while (v13 != (llvm *)((char *)v4 + 4 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(4 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  if (v14)
  {
    return (char *)memset(result, 255, 4 * v14);
  }
  return result;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_0>(uint64_t *result, uint64_t a2)
{
  uint64_t v4 = *result;
  uint64_t v3 = (_DWORD *)result[1];
  int v5 = (*v3)++;
  unsigned int v6 = *(_DWORD *)(v4 + 720);
  if (!v6) {
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(v4 + 704);
  unsigned int v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v9 = (void *)(v7 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v12 = 0;
    int v13 = 1;
    while (v10 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == -8192;
      }
      if (v14) {
        int v12 = v9;
      }
      unsigned int v15 = v8 + v13++;
      unsigned int v8 = v15 & (v6 - 1);
      unsigned int v9 = (void *)(v7 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        return result;
      }
    }
    if (v12) {
      int v16 = v12;
    }
    else {
      int v16 = v9;
    }
    int v17 = *(_DWORD *)(v4 + 712);
    if (4 * v17 + 4 < 3 * v6)
    {
      if (v6 + ~v17 - *(_DWORD *)(v4 + 716) > v6 >> 3) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
LABEL_22:
    v6 *= 2;
LABEL_23:
    BOOL result = llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v4 + 704, v6);
    uint64_t v18 = *(void *)(v4 + 704);
    int v19 = *(_DWORD *)(v4 + 720) - 1;
    unsigned int v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
    int v16 = (void *)(v18 + 16 * v20);
    uint64_t v21 = *v16;
    if (*v16 == a2)
    {
LABEL_24:
      ++*(_DWORD *)(v4 + 712);
      if (a2 == -4096) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    BOOL v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        BOOL v22 = v16;
      }
      unsigned int v25 = v20 + v23++;
      unsigned int v20 = v25 & v19;
      int v16 = (void *)(v18 + 16 * (v25 & v19));
      uint64_t v21 = *v16;
      if (*v16 == a2) {
        goto LABEL_24;
      }
    }
    if (v22) {
      int v16 = v22;
    }
LABEL_6:
    uint64_t v11 = *v16;
    ++*(_DWORD *)(v4 + 712);
    if (v11 == -4096)
    {
LABEL_8:
      *int v16 = a2;
      *((_DWORD *)v16 + 2) = v5;
      return result;
    }
LABEL_7:
    --*(_DWORD *)(v4 + 716);
    goto LABEL_8;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Block *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56) - (void)v2;
  if (!v3) {
    return 1;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = 8 * (v3 >> 3);
  while (mlir::BytecodeReader::Impl::sortUseListOrder(v4, *v2))
  {
    ++v2;
    v5 -= 8;
    if (!v5) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_2>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 36);
  if (v2) {
    uint64_t v3 = a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  while (1)
  {
    NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v4);
    if (!mlir::BytecodeReader::Impl::sortUseListOrder(v5, NextResultAtOffset)) {
      break;
    }
    if (v2 == ++v4) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::raw_ostream::is_displayed(llvm::raw_ostream *this)
{
  return 0;
}

uint64_t llvm::raw_ostream::has_colors(llvm::raw_ostream *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

uint64_t llvm::raw_ostream::enable_colors(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return this;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<char const>(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &unk_267770000;
  {
    int64_t v69 = a1;
    uint64_t v3 = &unk_267770000;
    int v66 = v65;
    uint64_t v2 = a2;
    a1 = v69;
    if (v66)
    {
      unint64_t v67 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v67 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v67;
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = a2;
      a1 = v69;
    }
  }
  unint64_t v4 = v3[385];
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v15 = a1[5];
    unint64_t v16 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v17 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v18 = *a1 - 0x6D8ED9027DD26057 * v4;
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = v18 + v11 + v19;
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v23 = __ROR8__(v17, 33);
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v22;
    uint64_t v25 = __ROR8__(v21, 44) + v18 + __ROR8__(v24 + v9 + v18 + v20, 21);
    unint64_t v26 = 0xB492B66FBE98F273 * v23;
    uint64_t v27 = v21 + v20;
    uint64_t v28 = v22 + a1[4] - 0x4B6D499041670D8DLL * v23;
    uint64_t v29 = __ROR8__(v15 + v12 + v28, 44) + v28 + __ROR8__(v16 + v19 + v13 + v28, 21);
    uint64_t v30 = v15 + v12 + v28 + v13;
    unint64_t v31 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v32 = v24;
    }
    else
    {
      int v33 = a1 + 15;
      do
      {
        uint64_t v34 = *(v33 - 6);
        uint64_t v35 = __ROR8__(v16 + v27 + v26 + v34, 37);
        uint64_t v37 = *(v33 - 2);
        uint64_t v36 = *(v33 - 1);
        unint64_t v16 = v37 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v36, 42);
        uint64_t v38 = v24 + v30;
        uint64_t v39 = *(v33 - 7) - 0x4B6D499041670D8DLL * v25;
        uint64_t v40 = *(v33 - 4);
        uint64_t v41 = *(v33 - 5);
        uint64_t v42 = v39 + v34 + v41;
        unint64_t v32 = (0xB492B66FBE98F273 * v35) ^ v29;
        unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v38, 33);
        uint64_t v25 = __ROR8__(v42, 44) + v39 + __ROR8__(v32 + v30 + v39 + v40, 21);
        uint64_t v27 = v42 + v40;
        unint64_t v43 = v26 + v29 + *(v33 - 3);
        uint64_t v44 = *v33;
        v33 += 8;
        uint64_t v45 = __ROR8__(v16 + v41 + v43 + v44, 21);
        unint64_t v46 = v37 + v36 + v43;
        uint64_t v29 = v45 + v43 + __ROR8__(v46, 44);
        uint64_t v30 = v46 + v44;
        unint64_t v24 = v32;
        v31 -= 64;
      }
      while (v31);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v47 = *(void *)(v2 - 56);
      uint64_t v48 = *(void *)(v2 - 16);
      uint64_t v49 = *(void *)(v2 - 8);
      uint64_t v50 = v32 + v30;
      unint64_t v51 = (0xB492B66FBE98F273 * __ROR8__(v16 + v27 + v26 + v47, 37)) ^ v29;
      uint64_t v53 = *(void *)(v2 - 32);
      uint64_t v52 = *(void *)(v2 - 24);
      unint64_t v16 = v52 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v48, 42);
      uint64_t v54 = v51 + v30;
      uint64_t v55 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v25;
      uint64_t v58 = v2 - 48;
      uint64_t v56 = *(void *)(v2 - 48);
      uint64_t v57 = *(void *)(v58 + 8);
      uint64_t v59 = v55 + v47 + v56;
      unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
      uint64_t v25 = __ROR8__(v59, 44) + v55 + __ROR8__(v54 + v55 + v57, 21);
      uint64_t v27 = v59 + v57;
      unint64_t v60 = v26 + v29 + v53;
      unint64_t v61 = v52 + v48 + v60;
      uint64_t v29 = __ROR8__(v16 + v56 + v60 + v49, 21) + v60 + __ROR8__(v61, 44);
      uint64_t v30 = v61 + v49;
      unint64_t v32 = v51;
    }
    unint64_t v62 = 0x9DDFEA08EB382D69
        * (v29 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v29)));
    uint64_t v63 = v26 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v62 ^ (v62 >> 47));
    unint64_t v64 = 0x9DDFEA08EB382D69
        * ((v32
          - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) >> 47))) ^ v63);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) >> 47));
  }
  else
  {
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)a1, v5, v4);
  }
}

unint64_t llvm::hashing::detail::hash_short(llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 > 4)
  {
    if (a2 - 9 > 7)
    {
      if (a2 - 17 > 0xF)
      {
        if (a2 < 0x21)
        {
          if (a2)
          {
            unint64_t v32 = (0x9AE16A3B2F90404FLL
                 * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
            return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
          }
          else
          {
            return a3 ^ 0x9AE16A3B2F90404FLL;
          }
        }
        else
        {
          uint64_t v12 = (char *)this + a2;
          uint64_t v13 = *(void *)((char *)this + a2 - 16);
          uint64_t v14 = *(void *)((char *)this + a2 - 8);
          uint64_t v15 = *(void *)this - 0x3C5A37A36834CED9 * (v13 + a2);
          uint64_t v17 = *((void *)this + 2);
          uint64_t v16 = *((void *)this + 3);
          uint64_t v18 = __ROR8__(v15 + v16, 52);
          uint64_t v19 = v15 + *((void *)this + 1);
          uint64_t v20 = __ROR8__(v19, 7);
          uint64_t v21 = v19 + v17;
          uint64_t v22 = v20 + __ROR8__(*(void *)this - 0x3C5A37A36834CED9 * (v13 + a2), 37) + v18;
          uint64_t v23 = *(void *)((char *)this + a2 - 32) + v17;
          uint64_t v24 = __ROR8__(v23 + v14, 52);
          uint64_t v25 = v22 + __ROR8__(v21, 31);
          uint64_t v26 = __ROR8__(v23, 37);
          uint64_t v27 = *((void *)v12 - 3) + v23;
          uint64_t v28 = __ROR8__(v27, 7);
          uint64_t v29 = v27 + v13;
          uint64_t v30 = __ROR8__(v29, 31);
          unint64_t v31 = ((0xC3A5C85C97CB3127
                * ((0xC3A5C85C97CB3127 * (v29 + v14 + v25) - 0x651E95C4D06FBFB1
                                                             * (v21 + v16 + v26 + v24 + v28 + v30)) ^ ((0xC3A5C85C97CB3127 * (v29 + v14 + v25) - 0x651E95C4D06FBFB1 * (v21 + v16 + v26 + v24 + v28 + v30)) >> 47))) ^ a3)
              + v25;
          return 0x9AE16A3B2F90404FLL * (v31 ^ (v31 >> 47));
        }
      }
      else
      {
        uint64_t v8 = *((void *)this + 1);
        unint64_t v9 = 0x9AE16A3B2F90404FLL * *(void *)((char *)this + a2 - 8);
        uint64_t v10 = __ROR8__(0xB492B66FBE98F273 * *(void *)this - v8, 43)
            - 0x3C5A37A36834CED9 * *(void *)((char *)this + a2 - 16)
            + __ROR8__(v9 ^ a3, 30);
        unint64_t v11 = a3 + a2 + __ROR8__(v8 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(void *)this - v9;
        return 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(void *)((char *)this + a2 - 8);
      uint64_t v7 = __ROR8__(v6 + a2, a2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                    * (*(void *)this ^ a3 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v7)))) >> 47))) ^ v6;
    }
  }
  else
  {
    unint64_t v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  }
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24)) {
    llvm::deallocate_buffer(**(llvm ***)(a1 + 16), (void *)0x1000);
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(_DWORD *)(a1 + 72)) {
    llvm::deallocate_buffer(*(llvm **)v2, *(void **)(v2 + 8));
  }
  if (v2 != a1 + 80) {
    free(*(void **)(a1 + 64));
  }
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 32)) {
    free(v3);
  }
  return a1;
}

uint64_t llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    int v5 = v4 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    uint64_t v7 = (void *)(*(void *)a1 + 24 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7) {
      return 0;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v8 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v8 == -8192;
      }
      if (v18) {
        uint64_t v16 = v7;
      }
      unsigned int v19 = v6 + v17++;
      unsigned int v6 = v19 & v5;
      uint64_t v7 = (void *)(*(void *)a1 + 24 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return 0;
      }
    }
    if (v16) {
      uint64_t v10 = v16;
    }
    else {
      uint64_t v10 = v7;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>,mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&,llvm::detail::DenseSetEmpty&>(a1, v10, v2);
  uint64_t v11 = a1 + 24;
  unint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if (v13 >= *(_DWORD *)(a1 + 36))
  {
    unint64_t v20 = v13 + 1;
    unint64_t v21 = v12 + 24 * v13;
    if (v12 <= (unint64_t)v2 && v21 > (unint64_t)v2)
    {
      uint64_t v23 = (char *)v2 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v20, 24);
      unint64_t v12 = *(void *)(a1 + 24);
      uint64_t v2 = (uint64_t *)&v23[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v20, 24);
      unint64_t v12 = *(void *)(a1 + 24);
    }
  }
  unint64_t v14 = v12 + 24 * *(unsigned int *)(a1 + 32);
  long long v15 = *(_OWORD *)v2;
  *(void *)(v14 + 16) = v2[2];
  *(_OWORD *)unint64_t v14 = v15;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = &unk_267771000;
  {
    uint64_t v2 = (void *)&unk_267771000;
    uint64_t v1 = a1;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      unint64_t v17 = 98;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      uint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      uint64_t v2 = (void *)&unk_267771000;
      uint64_t v1 = a1;
    }
  }
  unint64_t v3 = (void *)(v1 + 72);
  uint64_t v4 = v2[404];
  uint64_t v5 = *(void *)(v1 + 96);
  if ((v5 & 2) == 0) {
    unint64_t v3 = (void *)*v3;
  }
  return (*(uint64_t (**)(void *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFF8))(v3, v4);
}

uint64_t mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = &unk_267771000;
  {
    uint64_t v2 = (void *)&unk_267771000;
    uint64_t v1 = a1;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      unint64_t v17 = 98;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      uint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      uint64_t v2 = (void *)&unk_267771000;
      uint64_t v1 = a1;
    }
  }
  unint64_t v3 = (void *)(v1 + 72);
  uint64_t v4 = v2[402];
  uint64_t v5 = *(void *)(v1 + 96);
  if ((v5 & 2) == 0) {
    unint64_t v3 = (void *)*v3;
  }
  return (*(uint64_t (**)(void *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFF8))(v3, v4);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>,mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, void *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v11 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (void *)(*(void *)a1 + 24 * v12);
  uint64_t v13 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        uint64_t v14 = a2;
      }
      unsigned int v17 = v12 + v15++;
      unsigned int v12 = v17 & v11;
      a2 = (void *)(*(void *)a1 + 24 * (v17 & v11));
      uint64_t v13 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v14) {
      a2 = v14;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  long long v9 = *(_OWORD *)a3;
  a2[2] = a3[2];
  *(_OWORD *)a2 = v9;
  return a2;
}

int64x2_t *llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = (int64x2_t *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x48)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      unsigned int v12 = &result->i64[3 * (v16 & 0x1FFFFFFFFFFFFFFCLL)];
      int64x2_t v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v18 = v16 & 0x1FFFFFFFFFFFFFFCLL;
      unsigned int v19 = result;
      do
      {
        int64x2_t *v19 = v17;
        v19[1] = (int64x2_t)xmmword_211F0B190;
        void v19[4] = (int64x2_t)xmmword_211F0B190;
        void v19[5] = (int64x2_t)xmmword_211F0B180;
        v19[2] = (int64x2_t)xmmword_211F0B180;
        void v19[3] = v17;
        v19 += 6;
        v18 -= 4;
      }
      while (v18);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        if (v3)
        {
          unint64_t v21 = v4;
          do
          {
            uint64_t v29 = *(void *)v21;
            if ((*(void *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              int v30 = *(_DWORD *)(a1 + 16) - 1;
              unsigned int v31 = v30 & ((v29 >> 4) ^ (v29 >> 9));
              uint64_t v27 = (void *)(*(void *)a1 + 24 * v31);
              uint64_t v32 = *v27;
              if (v29 != *v27)
              {
                int v33 = 0;
                int v34 = 1;
                while (v32 != -4096)
                {
                  if (v33) {
                    BOOL v35 = 0;
                  }
                  else {
                    BOOL v35 = v32 == -8192;
                  }
                  if (v35) {
                    int v33 = v27;
                  }
                  unsigned int v36 = v31 + v34++;
                  unsigned int v31 = v36 & v30;
                  uint64_t v27 = (void *)(*(void *)a1 + 24 * (v36 & v30));
                  uint64_t v32 = *v27;
                  if (v29 == *v27) {
                    goto LABEL_26;
                  }
                }
                if (v33) {
                  uint64_t v27 = v33;
                }
              }
LABEL_26:
              long long v28 = *(_OWORD *)v21;
              v27[2] = *((void *)v21 + 2);
              *(_OWORD *)uint64_t v27 = v28;
              ++*(_DWORD *)(a1 + 8);
            }
            unint64_t v21 = (llvm *)((char *)v21 + 24);
          }
          while (v21 != (llvm *)((char *)v4 + 24 * v3));
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      unsigned int v12 = (uint64_t *)result;
    }
    unint64_t v20 = &result->i64[3 * v10];
    do
    {
      *unsigned int v12 = -4096;
      v12[1] = -4096;
      unint64_t v12[2] = 0;
      v12 += 3;
    }
    while (v12 != v20);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x48)
    {
      int v15 = (uint64_t *)result;
LABEL_21:
      uint64_t v26 = &result->i64[3 * v13];
      do
      {
        *int v15 = -4096;
        v15[1] = -4096;
        v15[2] = 0;
        v15 += 3;
      }
      while (v15 != v26);
      return result;
    }
    unint64_t v22 = v14 / 0x18 + 1;
    int v15 = &result->i64[3 * (v22 & 0x1FFFFFFFFFFFFFFCLL)];
    int64x2_t v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v24 = v22 & 0x1FFFFFFFFFFFFFFCLL;
    uint64_t v25 = result;
    do
    {
      int64x2_t *v25 = v23;
      v25[1] = (int64x2_t)xmmword_211F0B190;
      v25[4] = (int64x2_t)xmmword_211F0B190;
      v25[5] = (int64x2_t)xmmword_211F0B180;
      void v25[2] = (int64x2_t)xmmword_211F0B180;
      void v25[3] = v23;
      v25 += 6;
      v24 -= 4;
    }
    while (v24);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL)) {
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::CastOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v15 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      unint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v17 = 71;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      long long v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, v3[354], v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::CastOpInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v22 = 71;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[354];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void mlir::OperationState::addAttribute(mlir::Attribute *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a1);
  __int16 v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  ZinMirCacheTensors::ZinMirCacheTensors(v12, v9, a4);
  mlir::NamedAttrList::push_back((uint64_t)a1 + 112, v12[0], v12[1]);
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance;
  }
  {
    unint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
    unint64_t v9 = 76;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    unint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  unint64_t v4 = v39;
  if (mlir::detail::DenseArrayAttrImpl<int>::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v8 = &v40;
    unint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v9 = (char *)v46;
        unint64_t v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v8 = &v40;
        unint64_t v9 = (char *)v46;
      }
    }
    unint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)unint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::DenseArrayAttrImpl<int32_t>]";
  unint64_t v41 = 91;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v16 = &v40;
      uint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v17 = (char *)v46;
          unint64_t v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v16 = &v40;
          uint64_t v17 = (char *)v46;
        }
      }
      unint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)unint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        unint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v21 = (char *)v46;
            uint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            unint64_t v21 = (char *)v46;
          }
        }
        unint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)unint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = __p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      uint64_t v53 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v50;
    if (v50)
    {
      long long v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      unint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::DialectBytecodeWriter::writeSparseArray<int>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  if (a3)
  {
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (a2[v8])
      {
        unsigned int v7 = v8;
        ++v6;
      }
      ++v8;
    }
    while (a3 != v8);
    if (v7 > 0x100) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v7 = 0;
    unsigned int v6 = 0;
  }
  if (v6 > a3 >> 1)
  {
LABEL_15:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, 2 * a3);
    if (a3)
    {
      uint64_t v14 = 4 * a3;
      do
      {
        uint64_t v15 = *v4++;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v15);
        v14 -= 4;
      }
      while (v14);
    }
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, (2 * v6) | 1);
  if (v6)
  {
    uint64_t v10 = v7 + 1;
    uint64_t v11 = 32 - __clz(v7);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v11);
    uint64_t v12 = 0;
    do
    {
      int v13 = v4[v12];
      if (v13) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, (v13 << v11) | v12);
      }
      ++v12;
    }
    while (v10 != v12);
  }
  return result;
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance;
  }
  {
    uint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
    unint64_t v9 = 75;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    unint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance;
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance;
  }
  {
    uint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
    unint64_t v9 = 79;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    unint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  unint64_t v6 = (const char *)*((unsigned int *)a2 + 2);
  uint64_t v7 = (const char *)*(unsigned int *)(a3 + 8);
  if (v6 == v7)
  {
    if (v6)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = *(void **)a3;
      uint64_t v11 = 32 * (void)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v45 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      int v46 = 5;
      unsigned int v47 = v6;
      int v13 = &v46;
      uint64_t v14 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          uint64_t v14 = (char *)v50;
          int v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          int v13 = &v46;
          uint64_t v14 = (char *)v50;
        }
      }
      uint64_t v15 = &v14[24 * v51];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      uint64_t v17 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        unsigned int v47 = " operands present, but expected ";
        uint64_t v48 = 32;
        unint64_t v18 = &v46;
        long long v19 = (char *)v50;
        if (v17 >= v52)
        {
          unint64_t v37 = v17 + 1;
          BOOL v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            long long v19 = (char *)v50;
            unint64_t v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            unint64_t v18 = &v46;
            long long v19 = (char *)v50;
          }
        }
        uint64_t v20 = &v19[24 * v51];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = *((void *)v18 + 2);
        *(_OWORD *)uint64_t v20 = v21;
        uint64_t v22 = ++v51;
        if (v49[0])
        {
          int v46 = 5;
          unsigned int v47 = v7;
          long long v23 = &v46;
          uint64_t v24 = (char *)v50;
          if (v22 >= v52)
          {
            unint64_t v39 = v22 + 1;
            BOOL v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              uint64_t v24 = (char *)v50;
              long long v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              long long v23 = &v46;
              uint64_t v24 = (char *)v50;
            }
          }
          uint64_t v25 = &v24[24 * v51];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)uint64_t v25 = v26;
          ++v51;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        long long v28 = v57;
        uint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            long long v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = __p;
        }
        uint64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v54;
      if (v54)
      {
        uint64_t v31 = v55;
        unint64_t v32 = v54;
        if (v55 != v54)
        {
          do
          {
            uint64_t v34 = *--v31;
            uint64_t v33 = v34;
            *uint64_t v31 = 0;
            if (v34) {
              MEMORY[0x21667D390](v33, 0x1000C8077774924);
            }
          }
          while (v31 != v30);
          unint64_t v32 = v54;
        }
        uint64_t v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53) {
        free(v50);
      }
    }
  }
  return v12;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        unint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  BOOL v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::UnitAttr]";
  unint64_t v41 = 64;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    BOOL v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          uint64_t v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      long long v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        long long v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            long long v19 = (char *)v46;
            unint64_t v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            long long v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    long long v23 = __p;
    if (__p)
    {
      uint64_t v24 = v53;
      uint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      uint64_t v27 = v51;
      long long v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        long long v28 = v50;
      }
      unsigned int v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::AsmParser::parseType<mlir::FunctionType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  long long v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = __p;
    if (__p)
    {
      long long v9 = v25;
      unint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          long long v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        unint64_t v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    unint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      unint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *uint64_t v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
        unint64_t v13 = v22;
      }
      long long v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[1];
  uint64_t v8 = **a2;
  uint64_t v7 = (*a2)[1];
  uint64_t v10 = *v6;
  uint64_t v9 = v6[1];
  v65[0] = v8;
  v60[0] = v10;
  BOOL v11 = v7 == 0;
  BOOL v12 = v9 == 0;
  BOOL v13 = (v7 | v9) == 0;
  if (!(v7 | v9))
  {
    uint64_t v14 = (const char *)a3[1];
    if (v14)
    {
      uint64_t v15 = 0;
LABEL_31:
      __int16 v61 = 257;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v65, a1, a4, v60);
      if (v65[0])
      {
        int v62 = 5;
        uint64_t v63 = v15;
        uint64_t v29 = &v62;
        uint64_t v30 = (char *)v66;
        if (v67 >= v68)
        {
          unint64_t v52 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            int64_t v57 = (char *)&v62 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
            uint64_t v30 = (char *)v66;
            uint64_t v29 = (int *)((char *)v66 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
            uint64_t v29 = &v62;
            uint64_t v30 = (char *)v66;
          }
        }
        uint64_t v31 = &v30[24 * v67];
        long long v32 = *(_OWORD *)v29;
        *((void *)v31 + 2) = *((void *)v29 + 2);
        *(_OWORD *)uint64_t v31 = v32;
        uint64_t v33 = ++v67;
        if (v65[0])
        {
          int v62 = 3;
          uint64_t v63 = " operands present, but expected ";
          uint64_t v64 = 32;
          unint64_t v34 = &v62;
          int64_t v35 = (char *)v66;
          if (v33 >= v68)
          {
            unint64_t v53 = v33 + 1;
            BOOL v54 = (char *)v66 + 24 * v33 > (char *)&v62;
            if (v66 <= &v62 && v54)
            {
              int64_t v58 = (char *)&v62 - (unsigned char *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
              int64_t v35 = (char *)v66;
              unint64_t v34 = (int *)((char *)v66 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
              unint64_t v34 = &v62;
              int64_t v35 = (char *)v66;
            }
          }
          int64_t v36 = &v35[24 * v67];
          long long v37 = *(_OWORD *)v34;
          *((void *)v36 + 2) = *((void *)v34 + 2);
          *(_OWORD *)int64_t v36 = v37;
          uint64_t v38 = ++v67;
          if (v65[0])
          {
            int v62 = 5;
            uint64_t v63 = v14;
            uint64_t v39 = &v62;
            BOOL v40 = (char *)v66;
            if (v38 >= v68)
            {
              unint64_t v55 = v38 + 1;
              BOOL v56 = (char *)v66 + 24 * v38 > (char *)&v62;
              if (v66 <= &v62 && v56)
              {
                int64_t v59 = (char *)&v62 - (unsigned char *)v66;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
                BOOL v40 = (char *)v66;
                uint64_t v39 = (int *)((char *)v66 + v59);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
                uint64_t v39 = &v62;
                BOOL v40 = (char *)v66;
              }
            }
            unint64_t v41 = &v40[24 * v67];
            long long v42 = *(_OWORD *)v39;
            *((void *)v41 + 2) = *((void *)v39 + 2);
            *(_OWORD *)unint64_t v41 = v42;
            ++v67;
          }
        }
      }
      uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      }
      if (v74)
      {
        __int16 v43 = __p;
        if (__p)
        {
          uint64_t v44 = v73;
          uint64_t v45 = __p;
          if (v73 != __p)
          {
            do
              uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
            while (v44 != v43);
            uint64_t v45 = __p;
          }
          unint64_t v73 = v43;
          operator delete(v45);
        }
        int v46 = v70;
        if (v70)
        {
          unsigned int v47 = v71;
          unsigned int v48 = v70;
          if (v71 != v70)
          {
            do
            {
              uint64_t v50 = *--v47;
              uint64_t v49 = v50;
              *unsigned int v47 = 0;
              if (v50) {
                MEMORY[0x21667D390](v49, 0x1000C8077774924);
              }
            }
            while (v47 != v46);
            unsigned int v48 = v70;
          }
          unsigned __int8 v71 = v46;
          operator delete(v48);
        }
        if (v66 != v69) {
          free(v66);
        }
      }
      return v28;
    }
    return 1;
  }
  uint64_t v15 = 0;
  uint64_t v17 = v10;
  uint64_t v18 = v8;
  uint64_t v19 = v8 + 32 * v7;
  uint64_t v20 = v10 + 32 * v9;
  while (1)
  {
    if (v18 != v19)
    {
      uint64_t v21 = v65;
LABEL_9:
      void *v21 = v18 + 32;
      uint64_t v18 = v65[0];
      uint64_t v22 = v60[0];
      goto LABEL_10;
    }
    uint64_t v22 = v10 + 32 * v9;
    uint64_t v18 = v19;
    if (v17 != v20)
    {
      uint64_t v21 = v60;
      uint64_t v18 = v17;
      goto LABEL_9;
    }
LABEL_10:
    ++v15;
    uint64_t v17 = v22;
    if (v18 == v19)
    {
      uint64_t v17 = v22;
      if (v22 == v20) {
        break;
      }
    }
  }
  uint64_t v14 = (const char *)a3[1];
  if (v14 != v15) {
    goto LABEL_31;
  }
  if (v13) {
    return 1;
  }
  long long v23 = (void *)*a3;
  while (1)
  {
    uint64_t v24 = v12 ? 0 : v10;
    uint64_t v25 = (v8 == 0) | v11 ? v24 : v8;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v25, *v23, a5))break; {
    if (v11)
    }
      uint64_t v26 = v10;
    else {
      uint64_t v26 = v8;
    }
    uint64_t v27 = v26 + 32;
    if (v11) {
      uint64_t v10 = v27;
    }
    else {
      uint64_t v8 = v27;
    }
    ++v23;
    BOOL v12 = v10 == v20;
    BOOL v11 = v8 == v19;
    if (v8 == v19 && v10 == v20) {
      return 1;
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v7 = v6;
  uint64_t v8 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v8 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 40);
  }
  else
  {
    *((void *)v6 + 4) = v8 + 1;
    *uint64_t v8 = 40;
  }
  v11[0] = ", ";
  v11[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)v11);
  uint64_t v9 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v9 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((void *)v7 + 4) = v9 + 1;
    *uint64_t v9 = 41;
  }
  return mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>(a1, a3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::bufferization::ToMemrefOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v12 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::bufferization::ToTensorOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a4)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
  }
  if (a5)
  {
    uint64_t v11 = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(a2)
              + 8) = v11;
  }
  long long __src = v25;
  uint64_t v24 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v26 = v22;
  if (v24 != 1)
  {
    if (!v24)
    {
      if (HIDWORD(v24))
      {
        unsigned int v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v25, 1uLL, 8);
      unsigned int v13 = v24;
      if (v24 != 1) {
        goto LABEL_10;
      }
    }
LABEL_11:
    LODWORD(v(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
  }
  uint64_t v14 = mlir::ValueRange::dereference_iterator(&v26, 0);
  uint64_t TensorTypeFromMemRefType = mlir::memref::getTensorTypeFromMemRefType(*(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  *(void *)long long __src = TensorTypeFromMemRefType;
  long long v16 = __src;
  uint64_t v17 = v24;
  uint64_t v18 = *(unsigned int *)(a2 + 72);
  unint64_t v19 = v18 + v24;
  if (v19 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if (v17)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (__src != v25) {
    free(__src);
  }
}

uint64_t mlir::DialectBytecodeReader::readSparseArray<int>(uint64_t a1, _DWORD *a2, const char *a3)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  unint64_t v101 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v101)) {
    return 0;
  }
  unint64_t v6 = v101;
  unint64_t v7 = v101 >> 1;
  v101 >>= 1;
  if (v6 < 2) {
    return 1;
  }
  if (v6)
  {
    unint64_t v98 = 0;
    if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v98))
    {
      if (v98 >= 9)
      {
        v99[0] = "reading sparse array with indexing above 8 bits: ";
        __int16 v100 = 259;
        (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)a1 + 16))(v105, a1, v99);
        if (v105[0])
        {
          int v102 = 5;
          int v103 = (const char *)v98;
          int64_t v36 = &v102;
          long long v37 = (char *)v106;
          if (v107 >= v108)
          {
            unint64_t v76 = v107 + 1;
            if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
            {
              int64_t v90 = (char *)&v102 - (unsigned char *)v106;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v76, 24);
              long long v37 = (char *)v106;
              int64_t v36 = (int *)((char *)v106 + v90);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v76, 24);
              int64_t v36 = &v102;
              long long v37 = (char *)v106;
            }
          }
          uint64_t v38 = &v37[24 * v107];
          long long v39 = *(_OWORD *)v36;
          *((void *)v38 + 2) = *((void *)v36 + 2);
          *(_OWORD *)uint64_t v38 = v39;
          ++v107;
          if (v105[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
          }
        }
        if (!v114) {
          return 0;
        }
        BOOL v40 = __p;
        if (__p)
        {
          unint64_t v41 = v113;
          long long v42 = __p;
          if (v113 != __p)
          {
            do
              unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            long long v42 = __p;
          }
          uint64_t v113 = v40;
          operator delete(v42);
        }
        uint64_t v31 = v110;
        if (!v110) {
          goto LABEL_78;
        }
        __int16 v43 = v111;
        uint64_t v33 = v110;
        if (v111 == v110) {
          goto LABEL_77;
        }
        do
        {
          uint64_t v45 = *--v43;
          uint64_t v44 = v45;
          void *v43 = 0;
          if (v45) {
            MEMORY[0x21667D390](v44, 0x1000C8077774924);
          }
        }
        while (v43 != v31);
        goto LABEL_76;
      }
      uint64_t v46 = v101;
      if (!v101) {
        return 1;
      }
      while (1)
      {
        unint64_t v97 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v97)) {
          break;
        }
        unint64_t v47 = v97 & ~(-1 << v98);
        if (v47 >= (unint64_t)a3)
        {
          v99[0] = "reading a sparse array found index ";
          __int16 v100 = 259;
          (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)a1 + 16))(v105, a1, v99);
          if (v105[0])
          {
            int v102 = 5;
            int v103 = (const char *)v47;
            unsigned int v48 = &v102;
            uint64_t v49 = (char *)v106;
            if (v107 >= v108)
            {
              unint64_t v81 = v107 + 1;
              if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
              {
                int64_t v93 = (char *)&v102 - (unsigned char *)v106;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v81, 24);
                uint64_t v49 = (char *)v106;
                unsigned int v48 = (int *)((char *)v106 + v93);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v81, 24);
                unsigned int v48 = &v102;
                uint64_t v49 = (char *)v106;
              }
            }
            uint64_t v50 = &v49[24 * v107];
            long long v51 = *(_OWORD *)v48;
            *((void *)v50 + 2) = *((void *)v48 + 2);
            *(_OWORD *)uint64_t v50 = v51;
            uint64_t v52 = ++v107;
            if (v105[0])
            {
              int v102 = 3;
              int v103 = " but only ";
              uint64_t v104 = 10;
              unint64_t v53 = &v102;
              BOOL v54 = (char *)v106;
              if (v52 >= v108)
              {
                unint64_t v82 = v52 + 1;
                BOOL v83 = (char *)v106 + 24 * v52 > (char *)&v102;
                if (v106 <= &v102 && v83)
                {
                  int64_t v94 = (char *)&v102 - (unsigned char *)v106;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v82, 24);
                  BOOL v54 = (char *)v106;
                  unint64_t v53 = (int *)((char *)v106 + v94);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v82, 24);
                  unint64_t v53 = &v102;
                  BOOL v54 = (char *)v106;
                }
              }
              unint64_t v55 = &v54[24 * v107];
              long long v56 = *(_OWORD *)v53;
              *((void *)v55 + 2) = *((void *)v53 + 2);
              *(_OWORD *)unint64_t v55 = v56;
              uint64_t v57 = ++v107;
              if (v105[0])
              {
                int v102 = 5;
                int v103 = a3;
                int64_t v58 = &v102;
                int64_t v59 = (char *)v106;
                if (v57 >= v108)
                {
                  unint64_t v84 = v57 + 1;
                  BOOL v85 = (char *)v106 + 24 * v57 > (char *)&v102;
                  if (v106 <= &v102 && v85)
                  {
                    int64_t v95 = (char *)&v102 - (unsigned char *)v106;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v84, 24);
                    int64_t v59 = (char *)v106;
                    int64_t v58 = (int *)((char *)v106 + v95);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v84, 24);
                    int64_t v58 = &v102;
                    int64_t v59 = (char *)v106;
                  }
                }
                unint64_t v60 = &v59[24 * v107];
                long long v61 = *(_OWORD *)v58;
                *((void *)v60 + 2) = *((void *)v58 + 2);
                *(_OWORD *)unint64_t v60 = v61;
                uint64_t v62 = ++v107;
                if (v105[0])
                {
                  int v102 = 3;
                  int v103 = " storage available.";
                  uint64_t v104 = 19;
                  uint64_t v63 = &v102;
                  uint64_t v64 = (char *)v106;
                  if (v62 >= v108)
                  {
                    unint64_t v86 = v62 + 1;
                    BOOL v87 = (char *)v106 + 24 * v62 > (char *)&v102;
                    if (v106 <= &v102 && v87)
                    {
                      int64_t v96 = (char *)&v102 - (unsigned char *)v106;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v86, 24);
                      uint64_t v64 = (char *)v106;
                      uint64_t v63 = (int *)((char *)v106 + v96);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v86, 24);
                      uint64_t v63 = &v102;
                      uint64_t v64 = (char *)v106;
                    }
                  }
                  int v65 = &v64[24 * v107];
                  long long v66 = *(_OWORD *)v63;
                  *((void *)v65 + 2) = *((void *)v63 + 2);
                  *(_OWORD *)int v65 = v66;
                  ++v107;
                  if (v105[0]) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
                  }
                }
              }
            }
          }
          if (!v114) {
            return 0;
          }
          unsigned int v67 = __p;
          if (__p)
          {
            unsigned int v68 = v113;
            int64_t v69 = __p;
            if (v113 != __p)
            {
              do
                unsigned int v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
              while (v68 != v67);
              int64_t v69 = __p;
            }
            uint64_t v113 = v67;
            operator delete(v69);
          }
          uint64_t v31 = v110;
          if (!v110) {
            goto LABEL_78;
          }
          unint64_t v70 = v111;
          uint64_t v33 = v110;
          if (v111 == v110) {
            goto LABEL_77;
          }
          do
          {
            uint64_t v72 = *--v70;
            uint64_t v71 = v72;
            *unint64_t v70 = 0;
            if (v72) {
              MEMORY[0x21667D390](v71, 0x1000C8077774924);
            }
          }
          while (v70 != v31);
          goto LABEL_76;
        }
        a2[v47] = v97 >> v98;
        if (!--v46) {
          return 1;
        }
      }
    }
  }
  else
  {
    if (v7 <= (unint64_t)a3)
    {
      while (1)
      {
        v105[0] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 72))(a1, v105)) {
          break;
        }
        *a2++ = v105[0];
        if (!--v7) {
          return 1;
        }
      }
      return 0;
    }
    v99[0] = "trying to read an array of ";
    __int16 v100 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)a1 + 16))(v105, a1, v99);
    if (v105[0])
    {
      int v102 = 5;
      int v103 = (const char *)v101;
      uint64_t v9 = &v102;
      uint64_t v10 = (char *)v106;
      if (v107 >= v108)
      {
        unint64_t v73 = v107 + 1;
        if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
        {
          int64_t v88 = (char *)&v102 - (unsigned char *)v106;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v73, 24);
          uint64_t v10 = (char *)v106;
          uint64_t v9 = (int *)((char *)v106 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v73, 24);
          uint64_t v9 = &v102;
          uint64_t v10 = (char *)v106;
        }
      }
      uint64_t v11 = &v10[24 * v107];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v107;
      if (v105[0])
      {
        int v102 = 3;
        int v103 = " but only ";
        uint64_t v104 = 10;
        uint64_t v14 = &v102;
        uint64_t v15 = (char *)v106;
        if (v13 >= v108)
        {
          unint64_t v74 = v13 + 1;
          BOOL v75 = (char *)v106 + 24 * v13 > (char *)&v102;
          if (v106 <= &v102 && v75)
          {
            int64_t v89 = (char *)&v102 - (unsigned char *)v106;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v74, 24);
            uint64_t v15 = (char *)v106;
            uint64_t v14 = (int *)((char *)v106 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v74, 24);
            uint64_t v14 = &v102;
            uint64_t v15 = (char *)v106;
          }
        }
        long long v16 = &v15[24 * v107];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)long long v16 = v17;
        uint64_t v18 = ++v107;
        if (v105[0])
        {
          int v102 = 5;
          int v103 = a3;
          unint64_t v19 = &v102;
          uint64_t v20 = (char *)v106;
          if (v18 >= v108)
          {
            unint64_t v77 = v18 + 1;
            BOOL v78 = (char *)v106 + 24 * v18 > (char *)&v102;
            if (v106 <= &v102 && v78)
            {
              int64_t v91 = (char *)&v102 - (unsigned char *)v106;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v77, 24);
              uint64_t v20 = (char *)v106;
              unint64_t v19 = (int *)((char *)v106 + v91);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v77, 24);
              unint64_t v19 = &v102;
              uint64_t v20 = (char *)v106;
            }
          }
          unint64_t v21 = &v20[24 * v107];
          long long v22 = *(_OWORD *)v19;
          *((void *)v21 + 2) = *((void *)v19 + 2);
          *(_OWORD *)unint64_t v21 = v22;
          uint64_t v23 = ++v107;
          if (v105[0])
          {
            int v102 = 3;
            int v103 = " storage available.";
            uint64_t v104 = 19;
            uint64_t v24 = &v102;
            uint64_t v25 = (char *)v106;
            if (v23 >= v108)
            {
              unint64_t v79 = v23 + 1;
              BOOL v80 = (char *)v106 + 24 * v23 > (char *)&v102;
              if (v106 <= &v102 && v80)
              {
                int64_t v92 = (char *)&v102 - (unsigned char *)v106;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v79, 24);
                uint64_t v25 = (char *)v106;
                uint64_t v24 = (int *)((char *)v106 + v92);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v79, 24);
                uint64_t v24 = &v102;
                uint64_t v25 = (char *)v106;
              }
            }
            long long v26 = &v25[24 * v107];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = *((void *)v24 + 2);
            *(_OWORD *)long long v26 = v27;
            ++v107;
            if (v105[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
            }
          }
        }
      }
    }
    if (v114)
    {
      uint64_t v28 = __p;
      if (__p)
      {
        uint64_t v29 = v113;
        uint64_t v30 = __p;
        if (v113 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        uint64_t v113 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v110;
      if (!v110) {
        goto LABEL_78;
      }
      long long v32 = v111;
      uint64_t v33 = v110;
      if (v111 == v110)
      {
LABEL_77:
        uint64_t v111 = v31;
        operator delete(v33);
LABEL_78:
        if (v106 != v109) {
          free(v106);
        }
        return 0;
      }
      do
      {
        uint64_t v35 = *--v32;
        uint64_t v34 = v35;
        *long long v32 = 0;
        if (v35) {
          MEMORY[0x21667D390](v34, 0x1000C8077774924);
        }
      }
      while (v32 != v31);
LABEL_76:
      uint64_t v33 = v110;
      goto LABEL_77;
    }
  }
  return 0;
}

void mlir::SideEffects::DefaultResource::~DefaultResource(mlir::SideEffects::DefaultResource *this)
{
}

const char *mlir::SideEffects::DefaultResource::getName(mlir::SideEffects::DefaultResource *this)
{
  return "<Default>";
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::AsmParser::parseType<mlir::TensorType>(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v20)) {
    return 0;
  }
  uint64_t v5 = v20;
  unint64_t v6 = *(void **)(*(void *)v20 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v18 = "invalid kind of type specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v4, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v27;
      long long v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        long long v12 = __p;
      }
      long long v27 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v24;
    if (v24)
    {
      uint64_t v14 = v25;
      uint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v24;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = &unk_267771000;
  {
    uint64_t v15 = a1;
    unint64_t v3 = (void *)&unk_267771000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v17 = 79;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, v3[11], v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v22 = 79;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[11];
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v14 = *(void *)a1 + (v6 << 6);
    if (*(void *)a1 <= a3 && v14 > a3)
    {
      unint64_t v16 = a3 - *(void *)a1;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(a1, v7);
      unint64_t v3 = *(void *)a1 + v16;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(a1, v7);
    }
  }
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (a2)
  {
    unint64_t v9 = (void *)(*(void *)a1 + (v8 << 6));
    uint64_t v10 = a2;
    while (1)
    {
      int v12 = v9 + 2;
      *unint64_t v9 = v9 + 2;
      v9[1] = 0x600000000;
      if (v9 == (void *)v3) {
        goto LABEL_7;
      }
      unint64_t v13 = *(unsigned int *)(v3 + 8);
      if (!*(_DWORD *)(v3 + 8)) {
        goto LABEL_7;
      }
      if (v13 < 7)
      {
        uint64_t v11 = *(unsigned int *)(v3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(v3 + 8), 8);
        uint64_t v11 = *(unsigned int *)(v3 + 8);
        if (!v11) {
          goto LABEL_6;
        }
        int v12 = (void *)*v9;
      }
      memcpy(v12, *(const void **)v3, 8 * v11);
LABEL_6:
      *((_DWORD *)v9 + 2) = v13;
LABEL_7:
      v9 += 8;
      if (!--v10)
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unint64_t v3 = (_DWORD *)(a1 + 16);
  BOOL v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 64, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = v7 << 6;
    unint64_t v9 = v4;
    do
    {
      *unint64_t v9 = v9 + 2;
      v9[1] = 0x600000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 8;
      v6 += 16;
      v8 -= 64;
    }
    while (v8);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = v10 << 6;
      do
      {
        int v12 = *(char **)((char *)v6 + v11 - 64);
        if ((char *)v6 + v11 - 48 != v12) {
          free(v12);
        }
        v11 -= 64;
      }
      while (v11);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>>(mlir::IndexType **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.dim", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"tensor.dim";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::tensor::DimOp::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::DimOp,void>::id) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::detail::TypedValue<mlir::TensorType>,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    void v18[2] = (uint64_t)"tensor.extract";
    unint64_t v18[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(void *)(a4 + 8));
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  int v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

uint64_t **llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>(uint64_t ***a1, void *a2)
{
  uint64_t result = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = &result[5 * v4];
    uint64_t v6 = 40 * v4;
    uint64_t v7 = (void *)&unk_267771000;
    while (1)
    {
      uint64_t v8 = **result;
      {
        uint64_t v25 = result;
        uint64_t v23 = v5;
        uint64_t v24 = a2;
        uint64_t v21 = v8;
        uint64_t v22 = v6;
        uint64_t v8 = v21;
        uint64_t v6 = v22;
        uint64_t v7 = &unk_267771000;
        uint64_t v5 = v23;
        a2 = v24;
        int v12 = v11;
        uint64_t result = v25;
        if (v12)
        {
          long long v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
          unint64_t v27 = 79;
          unint64_t v13 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
          if (v27 >= v13) {
            unint64_t v14 = v13;
          }
          else {
            unint64_t v14 = v27;
          }
          uint64_t v15 = &v26[v14];
          unint64_t v16 = v27 - v14;
          uint64_t v17 = 18;
          if (v16 < 0x12) {
            uint64_t v17 = v16;
          }
          uint64_t v18 = (uint64_t)&v15[v17];
          unint64_t v19 = v16 - v17;
          if (v19 >= v19 - 1) {
            uint64_t v20 = v19 - 1;
          }
          else {
            uint64_t v20 = v19;
          }
          mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v18, v20);
          uint64_t v8 = v21;
          uint64_t v6 = v22;
          uint64_t v7 = (void *)&unk_267771000;
          uint64_t v5 = v23;
          a2 = v24;
          uint64_t result = v25;
        }
      }
      if (v8 == v7[423])
      {
        unint64_t v9 = (unint64_t)result[2];
        unint64_t v10 = v9 <= 7 ? 0 : v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
        if (*a2 == v10) {
          break;
        }
      }
      result += 5;
      v6 -= 40;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine(llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  if (a2)
  {
    if (this == (llvm::hashing::detail::hash_combine_recursive_helper *)__src || __src == a4) {
      goto LABEL_44;
    }
    if ((char *)this + 1 == __src)
    {
      char v17 = *(unsigned char *)this;
      uint64_t v18 = a4 - __src;
      memmove(this, __src, a4 - __src);
      *((unsigned char *)this + v18) = v17;
LABEL_44:
      uint64_t v46 = *((void *)this + 9);
      uint64_t v47 = *((void *)this + 11);
      uint64_t v48 = *((void *)this + 1);
      uint64_t v49 = *((void *)this + 12);
      uint64_t v50 = *((void *)this + 13);
      uint64_t v52 = *((void *)this + 6);
      uint64_t v51 = *((void *)this + 7);
      uint64_t v53 = *((void *)this + 14);
      unint64_t v54 = v53 ^ (0xB492B66FBE98F273 * __ROR8__(v46 + *((void *)this + 8) + v47 + v48, 37));
      uint64_t v55 = v47 - 0x4B6D499041670D8DLL * __ROR8__(v49 + v46 + v52, 42);
      uint64_t v56 = v50 + *((void *)this + 10);
      uint64_t v57 = *(void *)this - 0x4B6D499041670D8DLL * v49;
      uint64_t v58 = v57 + v50;
      uint64_t v60 = *((void *)this + 2);
      uint64_t v59 = *((void *)this + 3);
      uint64_t v61 = v57 + v48 + v60;
      uint64_t v62 = *((void *)this + 5);
      unint64_t v63 = v55 + v62;
      uint64_t v64 = __ROR8__(v56, 33);
      uint64_t v65 = __ROR8__(v58 + v59 + v54, 21) + v57 + __ROR8__(v61, 44);
      uint64_t v66 = v61 + v59;
      uint64_t v67 = v60 + v63;
      uint64_t v68 = *((void *)this + 4) + v53 - 0x4B6D499041670D8DLL * v64;
      uint64_t v69 = v62 + v52 + v68;
      uint64_t v70 = __ROR8__(v68 + v51 + v67, 21) + v68 + __ROR8__(v69, 44);
      *((void *)this + 11) = v66;
      *((void *)this + 12) = v65;
      *((void *)this + 13) = v69 + v51;
      *((void *)this + 14) = v70;
      *((void *)this + 9) = v63;
      *((void *)this + 10) = v54;
      *((void *)this + 8) = 0xB492B66FBE98F273 * v64;
      unint64_t v71 = v54
          - 0x4B6D499041670D8DLL * (v63 ^ (v63 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * ((v69 + v51) ^ ((0x9DDFEA08EB382D69 * ((v69 + v51) ^ v66)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                   * ((v69 + v51) ^ v66)))) ^ ((0x9DDFEA08EB382D69 * ((v69 + v51) ^ ((0x9DDFEA08EB382D69 * ((v69 + v51) ^ v66)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v69 + v51) ^ v66)))) >> 47));
      unint64_t v72 = 0x9DDFEA08EB382D69
          * (v70 ^ ((0x9DDFEA08EB382D69 * (v70 ^ v65)) >> 47) ^ (0x9DDFEA08EB382D69 * (v70 ^ v65)));
      unint64_t v73 = 0xB492B66FBE98F273
          * (v64 + ((__src - (char *)this + a2) ^ ((unint64_t)(__src - (char *)this + a2) >> 47)))
          - 0x622015F714C7D297 * (v72 ^ (v72 >> 47));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69
             * (v73 ^ ((0x9DDFEA08EB382D69 * (v73 ^ v71)) >> 47) ^ (0x9DDFEA08EB382D69 * (v73 ^ v71)))) ^ ((0x9DDFEA08EB382D69 * (v73 ^ ((0x9DDFEA08EB382D69 * (v73 ^ v71)) >> 47) ^ (0x9DDFEA08EB382D69 * (v73 ^ v71)))) >> 47));
    }
    if (__src + 1 == a4)
    {
      char v19 = *(a4 - 1);
      if (a4 - 1 != (char *)this) {
        memmove((char *)this + 1, this, a4 - 1 - (char *)this);
      }
      *(unsigned char *)this = v19;
      goto LABEL_44;
    }
    uint64_t v7 = __src - (char *)this;
    uint64_t v8 = a4 - __src;
    if (__src - (char *)this != a4 - __src)
    {
      uint64_t v20 = __src - (char *)this;
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = v8;
        uint64_t v8 = v21 % v8;
      }
      while (v8);
      if (v20)
      {
        uint64_t v22 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v20);
        do
        {
          char v24 = *((unsigned char *)v22 - 1);
          uint64_t v22 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v22 - 1);
          char v23 = v24;
          uint64_t v25 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v22 + v7);
          long long v26 = v22;
          do
          {
            unint64_t v27 = v26;
            long long v26 = v25;
            *(unsigned char *)unint64_t v27 = *(unsigned char *)v25;
            char v28 = (char *)(a4 - (char *)v25);
            BOOL v29 = __OFSUB__(v7, v28);
            uint64_t v31 = v7 - (void)v28;
            char v30 = (v31 < 0) ^ v29;
            uint64_t v25 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v31);
            if (v30) {
              uint64_t v25 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v26 + v7);
            }
          }
          while (v25 != v22);
          *(unsigned char *)long long v26 = v23;
        }
        while (v22 != this);
      }
      goto LABEL_44;
    }
    unint64_t v9 = &a4[~(unint64_t)__src];
    if (v9 >= &__src[~(unint64_t)this]) {
      unint64_t v9 = &__src[~(unint64_t)this];
    }
    unint64_t v10 = (unint64_t)(v9 + 1);
    int v11 = __src;
    int v12 = this;
    if (v10 >= 8)
    {
      if (&__src[v10] <= (char *)this || (int v11 = __src, v12 = this, (char *)this + v10 <= __src))
      {
        if (v10 >= 0x20)
        {
          unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFE0;
          long long v32 = (long long *)((char *)this + 16);
          uint64_t v33 = __src + 16;
          unint64_t v34 = v10 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v35 = *(v32 - 1);
            long long v36 = *v32;
            long long v37 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *long long v32 = v37;
            *((_OWORD *)v33 - 1) = v35;
            *(_OWORD *)uint64_t v33 = v36;
            v32 += 2;
            v33 += 32;
            v34 -= 32;
          }
          while (v34);
          if (v10 == v13) {
            goto LABEL_44;
          }
          if ((v10 & 0x18) == 0)
          {
            int v12 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v13);
            int v11 = &__src[v13];
            goto LABEL_40;
          }
        }
        else
        {
          unint64_t v13 = 0;
        }
        int v11 = &__src[v10 & 0xFFFFFFFFFFFFFFF8];
        int v12 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + (v10 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = (uint64_t *)((char *)this + v13);
        long long v39 = &__src[v13];
        unint64_t v40 = v13 - (v10 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v41 = *v38;
          *v38++ = *(void *)v39;
          *(void *)long long v39 = v41;
          v39 += 8;
          v40 += 8;
        }
        while (v40);
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_44;
        }
      }
    }
LABEL_40:
    long long v42 = v11 + 1;
    __int16 v43 = (char *)v12 + 1;
    do
    {
      char v44 = *(v43 - 1);
      *(v43 - 1) = *(v42 - 1);
      *(v42 - 1) = v44;
      if (v43 == __src) {
        break;
      }
      ++v43;
    }
    while (v42++ != a4);
    goto LABEL_44;
  }
  unint64_t v14 = __src - (char *)this;
  unint64_t v15 = *((void *)this + 15);

  return llvm::hashing::detail::hash_short(this, v14, v15);
}

uint64_t mlir::AsmParser::parseType<mlir::BaseMemRefType>(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v20)) {
    return 0;
  }
  uint64_t v5 = v20;
  uint64_t v6 = *(void **)(*(void *)v20 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v18 = "invalid kind of type specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v4, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    unint64_t v10 = __p;
    if (__p)
    {
      int v11 = v27;
      int v12 = __p;
      if (v27 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        int v12 = __p;
      }
      unint64_t v27 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v24;
    if (v24)
    {
      unint64_t v14 = v25;
      unint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v24;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

uint64_t llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = result;
  if (result != a3 || a2 != a4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(*(void *)(result + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v13 != a3 || a2 + 1 != a4)
    {
      if (v13 != a3)
      {
        for (uint64_t i = (uint64_t *)(v13 + 32 * a2 + 56); ; i += 4)
        {
          uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
          uint64_t v17 = *(const char **)a7;
          unint64_t v18 = *(void *)(a7 + 8);
          __int16 v19 = (void *)*((void *)v16 + 4);
          if (v18 > *((void *)v16 + 3) - (void)v19)
          {
            llvm::raw_ostream::write(v16, v17, *(void *)(a7 + 8));
          }
          else if (v18)
          {
            memcpy(v19, v17, *(void *)(a7 + 8));
            *((void *)v16 + 4) += v18;
          }
          uint64_t v15 = *i;
          (*(void (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      uint64_t v20 = ~a2 + a4;
      uint64_t v21 = (uint64_t *)(v13 + 32 * a2 + 56);
      do
      {
        uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
        char v24 = *(const char **)a7;
        unint64_t v25 = *(void *)(a7 + 8);
        long long v26 = (void *)*((void *)v23 + 4);
        if (v25 > *((void *)v23 + 3) - (void)v26)
        {
          llvm::raw_ostream::write(v23, v24, *(void *)(a7 + 8));
        }
        else if (v25)
        {
          memcpy(v26, v24, *(void *)(a7 + 8));
          *((void *)v23 + 4) += v25;
        }
        uint64_t v22 = *v21;
        v21 += 4;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v5 = v4;
  uint64_t v6 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 3uLL)
  {
    *uint64_t v6 = 540945696;
    *((void *)v4 + 4) += 4;
  }
  else
  {
    uint64_t v5 = llvm::raw_ostream::write(v4, " -> ", 4uLL);
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  BOOL v13 = (*a2 != v9 || v8 != v10) && v7 == v9 && v8 + 1 == v10;
  if (!v13
    || *(_UNKNOWN **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v8) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    unint64_t v14 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v14 >= *((void *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 40);
    }
    else
    {
      *((void *)v5 + 4) = v14 + 1;
      *unint64_t v14 = 40;
    }
    uint64_t v17 = ", ";
    uint64_t v18 = 2;
    uint64_t result = (llvm::raw_ostream *)llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)&v17);
    uint64_t v16 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v16 >= *((void *)v5 + 3))
    {
      return llvm::raw_ostream::write(v5, 41);
    }
    else
    {
      *((void *)v5 + 4) = v16 + 1;
      *uint64_t v16 = 41;
    }
  }
  else
  {
    uint64_t v17 = ", ";
    uint64_t v18 = 2;
    return (llvm::raw_ostream *)llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)&v17);
  }
  return result;
}

uint64_t llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = this;
  if (this != a3 || a2 != a4)
  {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(this, a2);
    this = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = a2 + 1;
    if (v13 != a3 || v15 != a4)
    {
      if (v13 != a3)
      {
        while (1)
        {
          uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
          uint64_t v18 = *(const char **)a7;
          unint64_t v19 = *(void *)(a7 + 8);
          uint64_t v20 = (void *)*((void *)v17 + 4);
          if (v19 > *((void *)v17 + 3) - (void)v20)
          {
            llvm::raw_ostream::write(v17, v18, *(void *)(a7 + 8));
          }
          else if (v19)
          {
            memcpy(v20, v18, *(void *)(a7 + 8));
            *((void *)v17 + 4) += v19;
          }
          uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15);
          (*(void (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
          ++v15;
        }
      }
      do
      {
        uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
        uint64_t v23 = *(const char **)a7;
        unint64_t v24 = *(void *)(a7 + 8);
        unint64_t v25 = (void *)*((void *)v22 + 4);
        if (v24 > *((void *)v22 + 3) - (void)v25)
        {
          llvm::raw_ostream::write(v22, v23, *(void *)(a7 + 8));
        }
        else if (v24)
        {
          memcpy(v25, v23, *(void *)(a7 + 8));
          *((void *)v22 + 4) += v24;
        }
        uint64_t v21 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15);
        this = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
        ++v15;
      }
      while (a4 != v15);
    }
  }
  return this;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::IntegerAttr]";
  unint64_t v41 = 67;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            uint64_t v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      unint64_t v27 = v51;
      char v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        char v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::IntegerAttr]";
  unint64_t v41 = 67;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            uint64_t v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      unint64_t v27 = v51;
      char v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        char v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    unint64_t v10 = a2;
    unint64_t v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v4 = *a1;
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = v4;
  unint64_t v12 = 0;
  uint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, *a2);
  unint64_t v13 = v12;
  uint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    int v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)int v8 = v9;
    ++v47;
  }
  unint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::AffineMapAttr]";
  unint64_t v41 = 69;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            uint64_t v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      unint64_t v27 = v51;
      char v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        char v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::AsmParser::parseOptionalInteger<long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned int v27 = 1;
  long long v26 = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 352))(a1, &v26);
  if (v5 < 0x100u || v5 == 0)
  {
    unsigned __int8 v7 = v5;
    int v8 = HIBYTE(v5);
    if (v27 < 0x41) {
      return v7 | (v8 << 8);
    }
    goto LABEL_43;
  }
  llvm::APInt::sextOrTrunc((uint64_t)&v26, 0x40u, (uint64_t)&v28);
  unsigned int v9 = v29;
  if (v29 >= 0x41)
  {
    unsigned int v12 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v28);
    unint64_t v13 = v28;
    if (v12 <= 0x40)
    {
      *a2 = *v28;
    }
    else
    {
      uint64_t v10 = -1;
      *a2 = -1;
      if (!v13)
      {
        unsigned int v11 = v27;
        unsigned int v29 = v27;
        if (v27 > 0x40) {
          goto LABEL_20;
        }
        goto LABEL_14;
      }
    }
    MEMORY[0x21667D390]();
    uint64_t v10 = *a2;
    unsigned int v11 = v27;
    unsigned int v29 = v27;
    if (v27 > 0x40) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v10 = (uint64_t)v28;
    *a2 = (uint64_t)v28;
    unsigned int v11 = v27;
    unsigned int v29 = v27;
    if (v27 > 0x40) {
LABEL_20:
    }
      llvm::APInt::initSlowCase((llvm::APInt *)&v28);
  }
LABEL_14:
  if (v11) {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  }
  else {
    unint64_t v14 = 0;
  }
  char v28 = (void *)(v14 & v10);
  if (v28 == v26)
  {
    unsigned __int8 v7 = 1;
    int v8 = 1;
    return v7 | (v8 << 8);
  }
  unint64_t v24 = "integer value too large";
  __int16 v25 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&v28, a1, v4, &v24);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v36)
  {
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = v35;
      long long v17 = __p;
      if (v35 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        long long v17 = __p;
      }
      int64_t v35 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v32;
    if (v32)
    {
      unint64_t v19 = v33;
      uint64_t v20 = v32;
      if (v33 != v32)
      {
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        uint64_t v20 = v32;
      }
      unint64_t v33 = v18;
      operator delete(v20);
    }
    if (v30 != &v31) {
      free(v30);
    }
  }
  unsigned __int8 v7 = 0;
  int v8 = 1;
  if (v27 >= 0x41)
  {
LABEL_43:
    if (v26) {
      MEMORY[0x21667D390](v26, 0x1000C8000313F17);
    }
  }
  return v7 | (v8 << 8);
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(void *a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *long long __dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      unint64_t v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      uint64_t v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v22 = v21 + v14;
      uint64_t v24 = a1[2];
      uint64_t v23 = a1[3];
      uint64_t v25 = a1[5];
      uint64_t v26 = v19 + v25;
      unint64_t v27 = a1[4] + v17 + v20;
      uint64_t v28 = v21 + v12 + v24;
      unint64_t v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      size_t v30 = 8 - v8;
      uint64_t v31 = (char *)a1 + 8 - v8;
      if ((unint64_t)v31 > a4) {
        return (char *)a1;
      }
      goto LABEL_7;
    }
    unint64_t v32 = a1[15];
    uint64_t v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    unint64_t v34 = v32 ^ (v32 >> 47);
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + v32 + v33;
    uint64_t v37 = a1[6];
    uint64_t v38 = a1[7];
    uint64_t v39 = a1[5];
    uint64_t v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    unint64_t v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    unint64_t v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    uint64_t v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    uint64_t v47 = a1[2];
    uint64_t v46 = a1[3];
    uint64_t v48 = v45 + v35 + v47;
    unint64_t v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    unint64_t v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    size_t v30 = 8 - v8;
    uint64_t v31 = (char *)a1 + 8 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(void *a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  int __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *long long __dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      unint64_t v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      uint64_t v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v22 = v21 + v14;
      uint64_t v24 = a1[2];
      uint64_t v23 = a1[3];
      uint64_t v25 = a1[5];
      uint64_t v26 = v19 + v25;
      unint64_t v27 = a1[4] + v17 + v20;
      uint64_t v28 = v21 + v12 + v24;
      unint64_t v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      size_t v30 = 4 - v8;
      uint64_t v31 = (char *)a1 + 4 - v8;
      if ((unint64_t)v31 > a4) {
        return (char *)a1;
      }
      goto LABEL_7;
    }
    unint64_t v32 = a1[15];
    uint64_t v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    unint64_t v34 = v32 ^ (v32 >> 47);
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + v32 + v33;
    uint64_t v37 = a1[6];
    uint64_t v38 = a1[7];
    uint64_t v39 = a1[5];
    uint64_t v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    unint64_t v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    unint64_t v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    uint64_t v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    uint64_t v47 = a1[2];
    uint64_t v46 = a1[3];
    uint64_t v48 = v45 + v35 + v47;
    unint64_t v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    unint64_t v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    size_t v30 = 4 - v8;
    uint64_t v31 = (char *)a1 + 4 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(uint64_t *__sz, uint64_t a2, char a3)
{
  unsigned __int16 v5 = __sz + 10;
  __sz[10] += a2;
  uint64_t v6 = (1 << a3) - 1;
  uint64_t v7 = *__sz;
  uint64_t v8 = -(1 << a3);
  uint64_t v9 = ((v6 + *__sz) & v8) - *__sz;
  if (*__sz) {
    BOOL v10 = v9 + a2 > (unint64_t)(__sz[1] - *__sz);
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    uint64_t v11 = a2 + (1 << a3);
    uint64_t v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) <= 0x1000)
    {
      unsigned int v17 = *((_DWORD *)__sz + 6) >> 7;
      if (v17 >= 0x1E) {
        LOBYTE(v17) = 30;
      }
      uint64_t v18 = 4096 << v17;
      buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
      uint64_t v20 = *((unsigned int *)__sz + 6);
      if (v20 >= *((_DWORD *)__sz + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(__sz + 2), __sz + 4, v20 + 1, 8);
        LODWORD(v20) = *((_DWORD *)__sz + 6);
      }
      *(void *)(__sz[2] + 8 * v20) = buffer;
      ++*((_DWORD *)__sz + 6);
      uint64_t result = (unint64_t)&buffer[v6] & v8;
      *__sz = result + a2;
      __sz[1] = (uint64_t)&buffer[v18];
    }
    else
    {
      uint64_t v13 = llvm::allocate_buffer(v11 - 1, (std::align_val_t)8uLL);
      uint64_t v14 = *((unsigned int *)__sz + 18);
      if (v14 >= *((_DWORD *)__sz + 19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(__sz + 8), v5, v14 + 1, 16);
        LODWORD(v14) = *((_DWORD *)__sz + 18);
      }
      uint64_t v15 = (void *)(__sz[8] + 16 * v14);
      *uint64_t v15 = v13;
      v15[1] = v12;
      ++*((_DWORD *)__sz + 18);
      return ((unint64_t)v13 + v6) & v8;
    }
  }
  else
  {
    uint64_t result = v7 + v9;
    *__sz = v7 + v9 + a2;
  }
  return result;
}

uint64_t mlir::InFlightDiagnostic::append<char const*&>(uint64_t a1, const char **a2)
{
  if (*(void *)a1)
  {
    unint64_t v3 = *a2;
    if (*a2) {
      size_t v4 = strlen(*a2);
    }
    else {
      size_t v4 = 0;
    }
    int v15 = 3;
    uint64_t v16 = v3;
    size_t v17 = v4;
    uint64_t v5 = *(unsigned int *)(a1 + 32);
    unint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = &v15;
    if (v5 >= *(_DWORD *)(a1 + 36))
    {
      uint64_t v11 = a1 + 24;
      unint64_t v12 = v5 + 1;
      BOOL v13 = v6 + 24 * v5 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        uint64_t v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v7 = &v15;
      }
    }
    uint64_t v8 = v6 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

BOOL mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[1];
  if (v3 - v2 != a2[3] - v4) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  BOOL v7 = *a1 == a1[2];
  if (v3 == v2 && *a1 == a1[2]) {
    return 1;
  }
  unint64_t v9 = *(void *)(*(void *)(v5 + 32 * v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(*a2, a2[1]) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v7)
  {
    if (v9 == v10)
    {
      uint64_t v17 = v4 + 1;
      uint64_t v18 = (uint64_t *)(v5 + 32 * v2 + 56);
      do
      {
        uint64_t v19 = *v18;
        v18 += 4;
        unint64_t v20 = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v17++);
      }
      while (v20 == (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    }
    return 0;
  }
  if (v9 != v10) {
    return 0;
  }
  uint64_t v11 = v4 + 1;
  unint64_t v12 = (uint64_t *)(v5 + 32 * v2 + 56);
  uint64_t v13 = ~v2 + v3;
  do
  {
    BOOL result = v13 == 0;
    if (!v13) {
      break;
    }
    uint64_t v14 = *v12;
    v12 += 4;
    unint64_t v15 = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v11);
    BOOL result = 0;
    ++v11;
    --v13;
  }
  while (v15 == (*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

uint64_t mlir::OpAsmDialectInterface::getAlias()
{
  return 0;
}

{
  return 0;
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      unint64_t v176 = 109;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      uint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[445];
  BOOL v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    BOOL v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      uint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      BOOL v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      uint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[322];
  unint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[31];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 90;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[37] == a1;
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v154 = 104;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[318];
  BOOL v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    BOOL v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      BOOL v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  unint64_t v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    unint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

uint64_t mlir::AsmParser::parseType<mlir::MemRefType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = __p;
    if (__p)
    {
      unint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      uint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *uint64_t v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
        uint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::AsmParser::parseType<mlir::RankedTensorType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = __p;
    if (__p)
    {
      unint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      uint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *uint64_t v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
        uint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v20, a3)) {
    return 0;
  }
  uint64_t v7 = v20;
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  uint64_t v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v27;
      uint64_t v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v24;
    if (v24)
    {
      uint64_t v14 = v25;
      uint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v24;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

uint64_t mlir::CallOpInterface::resolveCallable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v5 = (mlir::Operation *)(v4 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8 & (v4 << 61 >> 63);
  if (v9) {
    return mlir::Value::getDefiningOp((mlir::Value *)&v9);
  }
  uint64_t v7 = *(mlir::SymbolTable **)a1;
  if (a2)
  {
    return mlir::SymbolTableCollection::lookupNearestSymbolFrom(a2, v7, (uint64_t)v5);
  }
  else
  {
    uint64_t v8 = *(mlir::SymbolTable **)a1;
    return mlir::SymbolTable::lookupNearestSymbolFrom(v8, v5);
  }
}

uint64_t mlir::CallOpInterface::getArgOperands(mlir::CallOpInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 16))(*((void *)this + 1), *(void *)this);
}

unint64_t mlir::complex::ConstantOp::fold(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::complex::ConstantOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "cst", 3);
}

BOOL mlir::complex::ConstantOp::isBuildableWith(uint64_t a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v21 = v2;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id ? a2 : 0;
  uint64_t v20 = v3;
  if (!v3) {
    return 0;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  if (v4 != 2) {
    return 0;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v20);
  uint64_t v6 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void **)(**(void **)v6 + 136);
  if (v8 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v7 = 0;
  }
  uint64_t v19 = v7;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v9 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void **)(**(void **)v9 + 136);
    if (v11 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v10 = 0;
    }
    uint64_t v19 = v10;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v12 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8);
      uint64_t v13 = *(void **)(*(void *)v12 + 136);
      if (v13 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v12 = 0;
      }
      uint64_t v18 = v12;
      if (v13 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        uint64_t v14 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
        if (v14 == Value) {
          return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18) == v14;
        }
      }
    }
    return 0;
  }
  uint64_t v16 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8);
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v16 = 0;
  }
  uint64_t v18 = v16;
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19) != Value)
  {
    return 0;
  }
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18) == Value;
}

uint64_t mlir::complex::ConstantOp::verify(mlir::complex::ConstantOp *this)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v83 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
  if (v2 == 2)
  {
    v87[0] = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v87);
    uint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
    uint64_t v5 = *(void *)v4;
    if (*(_UNKNOWN **)(**(void **)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
      uint64_t v5 = 0;
    }
    uint64_t v80 = v5;
    uint64_t v6 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83) + 8);
    if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
      uint64_t v6 = 0;
    }
    uint64_t v79 = v6;
    if (v80 && v6)
    {
      if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80)
        && Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79))
      {
        return 1;
      }
      __int16 v82 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, v81, (uint64_t)v87);
      if (v87[0])
      {
        int v84 = 3;
        int v85 = "requires attribute's element types (";
        uint64_t v86 = 36;
        uint64_t v7 = &v84;
        uint64_t v8 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v62 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v72 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v62, 24);
            uint64_t v8 = (char *)v88;
            uint64_t v7 = (int *)((char *)v88 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v62, 24);
            uint64_t v7 = &v84;
            uint64_t v8 = (char *)v88;
          }
        }
        uint64_t v9 = &v8[24 * v89];
        long long v10 = *(_OWORD *)v7;
        *((void *)v9 + 2) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v9 = v10;
        ++v89;
      }
      uint64_t v11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      if (v87[0])
      {
        uint64_t v12 = &v84;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v11);
        uint64_t v13 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v63 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v73 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v63, 24);
            uint64_t v13 = (char *)v88;
            uint64_t v12 = (int *)((char *)v88 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v63, 24);
            uint64_t v12 = &v84;
            uint64_t v13 = (char *)v88;
          }
        }
        uint64_t v14 = &v13[24 * v89];
        long long v15 = *(_OWORD *)v12;
        *((void *)v14 + 2) = *((void *)v12 + 2);
        *(_OWORD *)uint64_t v14 = v15;
        uint64_t v16 = ++v89;
        if (v87[0])
        {
          int v84 = 3;
          int v85 = ", ";
          uint64_t v86 = 2;
          uint64_t v17 = &v84;
          uint64_t v18 = (char *)v88;
          if (v16 >= v90)
          {
            unint64_t v65 = v16 + 1;
            BOOL v66 = (char *)v88 + 24 * v16 > (char *)&v84;
            if (v88 <= &v84 && v66)
            {
              int64_t v75 = (char *)&v84 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v65, 24);
              uint64_t v18 = (char *)v88;
              uint64_t v17 = (int *)((char *)v88 + v75);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v65, 24);
              uint64_t v17 = &v84;
              uint64_t v18 = (char *)v88;
            }
          }
          uint64_t v19 = &v18[24 * v89];
          long long v20 = *(_OWORD *)v17;
          *((void *)v19 + 2) = *((void *)v17 + 2);
          *(_OWORD *)uint64_t v19 = v20;
          ++v89;
        }
      }
      uint64_t v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
      if (v87[0])
      {
        uint64_t v22 = &v84;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v21);
        uint64_t v23 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v64 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v74 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v64, 24);
            uint64_t v23 = (char *)v88;
            uint64_t v22 = (int *)((char *)v88 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v64, 24);
            uint64_t v22 = &v84;
            uint64_t v23 = (char *)v88;
          }
        }
        uint64_t v24 = &v23[24 * v89];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        uint64_t v26 = ++v89;
        if (v87[0])
        {
          int v84 = 3;
          int v85 = ") to match the element type of the op's return type (";
          uint64_t v86 = 53;
          uint64_t v27 = &v84;
          char v28 = (char *)v88;
          if (v26 >= v90)
          {
            unint64_t v67 = v26 + 1;
            BOOL v68 = (char *)v88 + 24 * v26 > (char *)&v84;
            if (v88 <= &v84 && v68)
            {
              int64_t v76 = (char *)&v84 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v67, 24);
              char v28 = (char *)v88;
              uint64_t v27 = (int *)((char *)v88 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v67, 24);
              uint64_t v27 = &v84;
              char v28 = (char *)v88;
            }
          }
          uint64_t v29 = &v28[24 * v89];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          ++v89;
          if (v87[0])
          {
            int v31 = &v84;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, Value);
            unint64_t v32 = (char *)v88;
            if (v89 >= v90)
            {
              unint64_t v69 = v89 + 1;
              if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
              {
                int64_t v77 = (char *)&v84 - (unsigned char *)v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v69, 24);
                unint64_t v32 = (char *)v88;
                int v31 = (int *)((char *)v88 + v77);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v69, 24);
                int v31 = &v84;
                unint64_t v32 = (char *)v88;
              }
            }
            uint64_t v33 = &v32[24 * v89];
            long long v34 = *(_OWORD *)v31;
            *((void *)v33 + 2) = *((void *)v31 + 2);
            *(_OWORD *)uint64_t v33 = v34;
            uint64_t v35 = ++v89;
            if (v87[0])
            {
              int v84 = 3;
              int v85 = ")";
              uint64_t v86 = 1;
              int v36 = &v84;
              int v37 = (char *)v88;
              if (v35 >= v90)
              {
                unint64_t v70 = v35 + 1;
                BOOL v71 = (char *)v88 + 24 * v35 > (char *)&v84;
                if (v88 <= &v84 && v71)
                {
                  int64_t v78 = (char *)&v84 - (unsigned char *)v88;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
                  int v37 = (char *)v88;
                  int v36 = (int *)((char *)v88 + v78);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
                  int v36 = &v84;
                  int v37 = (char *)v88;
                }
              }
              unint64_t v38 = &v37[24 * v89];
              long long v39 = *(_OWORD *)v36;
              *((void *)v38 + 2) = *((void *)v36 + 2);
              *(_OWORD *)unint64_t v38 = v39;
              ++v89;
            }
          }
        }
      }
      uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
      if (v87[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      }
      if (v96)
      {
        unint64_t v41 = __p;
        if (__p)
        {
          uint64_t v42 = v95;
          unint64_t v43 = __p;
          if (v95 != __p)
          {
            do
              uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            unint64_t v43 = __p;
          }
          unint64_t v95 = v41;
          operator delete(v43);
        }
        uint64_t v44 = v92;
        if (!v92) {
          goto LABEL_71;
        }
        int v45 = v93;
        int v46 = v92;
        if (v93 == v92)
        {
LABEL_70:
          unint64_t v93 = v44;
          operator delete(v46);
LABEL_71:
          if (v88 != v91) {
            free(v88);
          }
          return v40;
        }
        do
        {
          uint64_t v48 = *--v45;
          uint64_t v47 = v48;
          void *v45 = 0;
          if (v48) {
            MEMORY[0x21667D390](v47, 0x1000C8077774924);
          }
        }
        while (v45 != v44);
LABEL_69:
        int v46 = v92;
        goto LABEL_70;
      }
    }
    else
    {
      v81[0] = (void **)"requires attribute's elements to be float attributes";
      __int16 v82 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v81, (uint64_t)v87);
      uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
      if (v87[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      }
      if (v96)
      {
        int v55 = __p;
        if (__p)
        {
          unint64_t v56 = v95;
          unint64_t v57 = __p;
          if (v95 != __p)
          {
            do
              unint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            unint64_t v57 = __p;
          }
          unint64_t v95 = v55;
          operator delete(v57);
        }
        uint64_t v44 = v92;
        if (!v92) {
          goto LABEL_71;
        }
        int v58 = v93;
        int v46 = v92;
        if (v93 == v92) {
          goto LABEL_70;
        }
        do
        {
          uint64_t v60 = *--v58;
          uint64_t v59 = v60;
          void *v58 = 0;
          if (v60) {
            MEMORY[0x21667D390](v59, 0x1000C8077774924);
          }
        }
        while (v58 != v44);
        goto LABEL_69;
      }
    }
  }
  else
  {
    v81[0] = (void **)"requires 'value' to be a complex constant, represented as array of two values";
    __int16 v82 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v81, (uint64_t)v87);
    uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
    if (v87[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
    }
    if (v96)
    {
      int v49 = __p;
      if (__p)
      {
        unint64_t v50 = v95;
        uint64_t v51 = __p;
        if (v95 != __p)
        {
          do
            unint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          uint64_t v51 = __p;
        }
        unint64_t v95 = v49;
        operator delete(v51);
      }
      uint64_t v44 = v92;
      if (!v92) {
        goto LABEL_71;
      }
      unint64_t v52 = v93;
      int v46 = v92;
      if (v93 == v92) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v54 = *--v52;
        uint64_t v53 = v54;
        void *v52 = 0;
        if (v54) {
          MEMORY[0x21667D390](v53, 0x1000C8077774924);
        }
      }
      while (v52 != v44);
      goto LABEL_69;
    }
  }
  return v40;
}

uint64_t mlir::complex::BitcastOp::fold(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  unint64_t v2 = *(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = v1 | 4;
  if (v2 == (*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8)) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t mlir::complex::BitcastOp::verify(mlir::complex::BitcastOp *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  unint64_t v41 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = *(void *)(v1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (v41 == v40) {
    return 1;
  }
  if (!mlir::Type::isIntOrFloat((mlir::Type *)&v41)
    && *(_UNKNOWN **)(*(void *)v41 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v38[0] = (void **)"operand must be int/float/complex";
    __int16 v39 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v38, (uint64_t)v42);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v49)
    {
      uint64_t v4 = __p;
      if (__p)
      {
        uint64_t v5 = v48;
        uint64_t v6 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v48 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v45;
      if (!v45) {
        goto LABEL_74;
      }
      uint64_t v8 = v46;
      uint64_t v9 = v45;
      if (v46 == v45)
      {
LABEL_73:
        int v46 = v7;
        operator delete(v9);
LABEL_74:
        if (v43 != &v44) {
          free(v43);
        }
        return v3;
      }
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x21667D390](v10, 0x1000C8077774924);
        }
      }
      while (v8 != v7);
LABEL_72:
      uint64_t v9 = v45;
      goto LABEL_73;
    }
    return v3;
  }
  BOOL isIntOrFloat = mlir::Type::isIntOrFloat((mlir::Type *)&v40);
  unint64_t v13 = v40;
  uint64_t v14 = *(void **)(*(void *)v40 + 136);
  if (isIntOrFloat)
  {
    long long v15 = (void **)v41;
    uint64_t v16 = *(void **)(*(void *)v41 + 136);
    if ((v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (v14 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
    {
      if (v14 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_44:
    v38[0] = (void **)"requires input or output is a complex type";
    __int16 v39 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v38, (uint64_t)v42);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v49)
    {
      long long v25 = __p;
      if (__p)
      {
        uint64_t v26 = v48;
        uint64_t v27 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          uint64_t v27 = __p;
        }
        uint64_t v48 = v25;
        operator delete(v27);
      }
      uint64_t v7 = v45;
      if (!v45) {
        goto LABEL_74;
      }
      char v28 = v46;
      uint64_t v9 = v45;
      if (v46 == v45) {
        goto LABEL_73;
      }
      do
      {
        uint64_t v30 = *--v28;
        uint64_t v29 = v30;
        void *v28 = 0;
        if (v30) {
          MEMORY[0x21667D390](v29, 0x1000C8077774924);
        }
      }
      while (v28 != v7);
      goto LABEL_72;
    }
    return v3;
  }
  if (v14 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v38[0] = (void **)"result must be int/float/complex";
    __int16 v39 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v38, (uint64_t)v42);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v49)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        uint64_t v18 = v48;
        uint64_t v19 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        uint64_t v48 = v17;
        operator delete(v19);
      }
      uint64_t v7 = v45;
      if (!v45) {
        goto LABEL_74;
      }
      long long v20 = v46;
      uint64_t v9 = v45;
      if (v46 == v45) {
        goto LABEL_73;
      }
      do
      {
        uint64_t v22 = *--v20;
        uint64_t v21 = v22;
        void *v20 = 0;
        if (v22) {
          MEMORY[0x21667D390](v21, 0x1000C8077774924);
        }
      }
      while (v20 != v7);
      goto LABEL_72;
    }
    return v3;
  }
  long long v15 = (void **)v41;
  if (*(_UNKNOWN **)(*(void *)v41 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    goto LABEL_44;
  }
LABEL_38:
  unint64_t v40 = (unint64_t)v15;
  unint64_t v41 = v13;
  uint64_t v16 = *(void **)(*(void *)v13 + 136);
  long long v15 = (void **)v13;
LABEL_39:
  if (v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = 0;
  }
  v38[0] = v23;
  v42[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v38);
  int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v42);
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v40) == 2 * IntOrFloatBitWidth) {
    return 1;
  }
  v38[0] = (void **)"casting bitwidths do not match";
  __int16 v39 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v38, (uint64_t)v42);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  }
  if (v49)
  {
    int v31 = __p;
    if (__p)
    {
      unint64_t v32 = v48;
      uint64_t v33 = __p;
      if (v48 != __p)
      {
        do
          unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        uint64_t v33 = __p;
      }
      uint64_t v48 = v31;
      operator delete(v33);
    }
    uint64_t v7 = v45;
    if (!v45) {
      goto LABEL_74;
    }
    long long v34 = v46;
    uint64_t v9 = v45;
    if (v46 == v45) {
      goto LABEL_73;
    }
    do
    {
      uint64_t v36 = *--v34;
      uint64_t v35 = v36;
      void *v34 = 0;
      if (v36) {
        MEMORY[0x21667D390](v35, 0x1000C8077774924);
      }
    }
    while (v34 != v7);
    goto LABEL_72;
  }
  return v3;
}

void mlir::complex::BitcastOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::complex::CreateOp::fold(uint64_t a1)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v5);
  if (result)
  {
    uint64_t v3 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ReOp,void>::id)
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v5);
      if (result)
      {
        if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ImOp,void>::id)
        {
          uint64_t v4 = *(void *)(*(void *)(v3 + 72) + 24);
          if (v4 == *(void *)(*(void *)(result + 72) + 24)) {
            return v4 | 4;
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t mlir::complex::ImOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a2 + 48);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)v3 + 136);
    if (v4 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
      uint64_t v3 = 0;
    }
    uint64_t v8 = v3;
    if (v4 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
      if (v5 == 2) {
        return *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8) + 8) & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  unint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 56) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

void mlir::complex::ImOp::getCanonicalizationPatterns()
{
}

unint64_t mlir::complex::ReOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a2 + 48);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)v3 + 136);
    if (v4 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
      uint64_t v3 = 0;
    }
    uint64_t v8 = v3;
    if (v4 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
      if (v5 == 2) {
        return *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8) & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  unint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

void mlir::complex::ReOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::complex::AddOp::fold(uint64_t *a1)
{
  void v21[3] = *MEMORY[0x263EF8340];
  uint64_t v20 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!DefiningOp)
  {
    uint64_t v20 = *(void *)(*(void *)(*a1 + 72) + 56);
    uint64_t v5 = mlir::Value::getDefiningOp((mlir::Value *)&v20);
    if (v5) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v6 = *a1;
    goto LABEL_10;
  }
  uint64_t v3 = *a1;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id)
  {
    uint64_t v4 = *(void *)(DefiningOp + 72);
    if (*(void *)(*(void *)(v3 + 72) + 56) == *(void *)(v4 + 56)) {
      goto LABEL_7;
    }
  }
  uint64_t v20 = *(void *)(*(void *)(v3 + 72) + 56);
  uint64_t v5 = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!v5) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v6 = *a1;
  if (*(_UNKNOWN **)(*(void *)(v5 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id
    || (uint64_t v4 = *(void *)(v5 + 72), *(void *)(*(void *)(v6 + 72) + 24) != *(void *)(v4 + 56)))
  {
LABEL_10:
    uint64_t v20 = *(void *)(*(void *)(v6 + 72) + 56);
    uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
    if (!result) {
      return result;
    }
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id) {
      return 0;
    }
    uint64_t v17 = *(void *)(result + 16 * (((unint64_t)*(unsigned int *)(result + 44) >> 23) & 1) + 64);
    uint64_t v16 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v17);
    uint64_t Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v16, (uint64_t)&v20);
    uint64_t v10 = (void *)v21[0];
    uint64_t v11 = llvm::APFloatBase::PPCDoubleDouble(Value);
    uint64_t v12 = (uint64_t *)v21[1];
    if (v11 != v10) {
      uint64_t v12 = &v20;
    }
    if ((*((unsigned char *)v12 + 28) & 7) == 3)
    {
      uint64_t v15 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v17) + 8);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v15, (uint64_t)v18);
      unint64_t v13 = (unsigned char *)v19[1];
      if (v11 != (void *)v19[0]) {
        unint64_t v13 = v18;
      }
      BOOL v14 = (v13[28] & 7) == 3;
      if (v11 != (void *)v19[0])
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (v11 == (void *)v21[0]) {
          goto LABEL_20;
        }
LABEL_23:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
        if (!v14) {
          return 0;
        }
        goto LABEL_24;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
      if (v11 != (void *)v21[0]) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v14 = 0;
      if (v11 != v10) {
        goto LABEL_23;
      }
    }
LABEL_20:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    if (!v14) {
      return 0;
    }
LABEL_24:
    uint64_t v7 = *(void *)(*(void *)(*a1 + 72) + 24);
    return v7 | 4;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v4 + 24);
  return v7 | 4;
}

uint64_t mlir::complex::SubOp::fold(uint64_t *a1)
{
  void v19[3] = *MEMORY[0x263EF8340];
  uint64_t v18 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (!DefiningOp)
  {
    uint64_t v3 = *a1;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::AddOp,void>::id
    || (uint64_t v4 = *(void *)(DefiningOp + 72), *(void *)(*(void *)(v3 + 72) + 56) != *(void *)(v4 + 56)))
  {
LABEL_6:
    uint64_t v18 = *(void *)(*(void *)(v3 + 72) + 56);
    uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
    if (!result) {
      return result;
    }
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id) {
      return 0;
    }
    uint64_t v15 = *(void *)(result + 16 * (((unint64_t)*(unsigned int *)(result + 44) >> 23) & 1) + 64);
    uint64_t v14 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
    uint64_t Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v14, (uint64_t)&v18);
    uint64_t v8 = (void *)v19[0];
    uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
    uint64_t v10 = (uint64_t *)v19[1];
    if (v9 != v8) {
      uint64_t v10 = &v18;
    }
    if ((*((unsigned char *)v10 + 28) & 7) == 3)
    {
      uint64_t v13 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15) + 8);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v13, (uint64_t)v16);
      uint64_t v11 = (unsigned char *)v17[1];
      if (v9 != (void *)v17[0]) {
        uint64_t v11 = v16;
      }
      BOOL v12 = (v11[28] & 7) == 3;
      if (v9 != (void *)v17[0])
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
        if (v9 == (void *)v19[0]) {
          goto LABEL_16;
        }
LABEL_19:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (!v12) {
          return 0;
        }
        goto LABEL_20;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
      if (v9 != (void *)v19[0]) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v12 = 0;
      if (v9 != v8) {
        goto LABEL_19;
      }
    }
LABEL_16:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
    if (!v12) {
      return 0;
    }
LABEL_20:
    uint64_t v5 = *(void *)(*(void *)(*a1 + 72) + 24);
    return v5 | 4;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  return v5 | 4;
}

uint64_t mlir::complex::NegOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::LogOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ExpOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::ExpOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::LogOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::ConjOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConjOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::MulOp::fold(uint64_t a1)
{
  void v16[3] = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id)
  {
    uint64_t v10 = *(void *)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
    uint64_t v13 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10);
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v13, (uint64_t)&v15);
    uint64_t v11 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10) + 8);
    uint64_t Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v11, (uint64_t)&v13);
    uint64_t v6 = (void *)v14[0];
    uint64_t v7 = llvm::APFloatBase::PPCDoubleDouble(Value);
    uint64_t v8 = (uint64_t *)v14[1];
    if (v7 != v6) {
      uint64_t v8 = &v13;
    }
    if ((*((unsigned char *)v8 + 28) & 7) != 3) {
      goto LABEL_18;
    }
    if (v7 == (void *)v16[0]) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)v7);
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v12, v16[0], (llvm::APInt *)1);
    if (v7 == (void *)v16[0])
    {
      int v9 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v16, (const llvm::detail::DoubleAPFloat *)v12);
      if (v7 != (void *)v12[0])
      {
LABEL_11:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
        if (v9 == 1) {
          goto LABEL_12;
        }
        goto LABEL_18;
      }
    }
    else
    {
      int v9 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v16, (const llvm::detail::IEEEFloat *)v12);
      if (v7 != (void *)v12[0]) {
        goto LABEL_11;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
    if (v9 == 1)
    {
LABEL_12:
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
      if (v7 == (void *)v14[0]) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v3 = 0;
    if (v7 == (void *)v14[0])
    {
LABEL_13:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
      if (v7 == (void *)v16[0])
      {
LABEL_14:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
        return v3;
      }
LABEL_20:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
      return v3;
    }
LABEL_19:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
    if (v7 == (void *)v16[0]) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  return 0;
}

BOOL mlir::complex::AbsOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::complex::AbsOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v15[2] = *MEMORY[0x263EF8340];
  v15[0] = a4;
  v15[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(void **)a11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  return 1;
}

uint64_t mlir::complex::AbsOp::verifyInvariantsImpl(mlir::complex::AbsOp *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  v20[0] = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  uint64_t v4 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
  v20[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v7 = *(void *)this - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  if (Value == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v18 = (void **)"failed to verify that complex element type matches result type";
  __int16 v19 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v18, (uint64_t)v20);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  }
  if (v27)
  {
    int v9 = __p;
    if (__p)
    {
      uint64_t v10 = v26;
      int v11 = __p;
      if (v26 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        int v11 = __p;
      }
      uint64_t v26 = v9;
      operator delete(v11);
    }
    unsigned int v12 = v23;
    if (v23)
    {
      uint64_t v13 = v24;
      unint64_t v14 = v23;
      if (v24 != v23)
      {
        do
        {
          uint64_t v16 = *--v13;
          uint64_t v15 = v16;
          *uint64_t v13 = 0;
          if (v16) {
            MEMORY[0x21667D390](v15, 0x1000C8077774924);
          }
        }
        while (v13 != v12);
        unint64_t v14 = v23;
      }
      uint64_t v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v8;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    goto LABEL_2;
  }
  v64[0] = a2;
  int v37 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v64) + 136);
  BOOL v38 = v37 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v39 = v38 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v40 = v39 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v41 = v40 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v42 = v41 || v37 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v43 = v42 || v37 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v44 = v43 || v37 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v45 = v44 || v37 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  if (v45 || v37 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    return 1;
  }
  if (v37 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v37 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
LABEL_2:
  __int16 v60 = 261;
  v59[0] = a3;
  v59[1] = a4;
  mlir::Operation::emitOpError(a1, v59, (uint64_t)v64);
  if (v64[0])
  {
    int v61 = 3;
    unint64_t v62 = " #";
    uint64_t v63 = 2;
    uint64_t v10 = &v61;
    int v11 = (char *)v65;
    if (v66 >= v67)
    {
      unint64_t v49 = v66 + 1;
      if (v65 <= &v61 && (char *)v65 + 24 * v66 > (char *)&v61)
      {
        int64_t v55 = (char *)&v61 - (unsigned char *)v65;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v49, 24);
        int v11 = (char *)v65;
        uint64_t v10 = (int *)((char *)v65 + v55);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v49, 24);
        uint64_t v10 = &v61;
        int v11 = (char *)v65;
      }
    }
    unsigned int v12 = &v11[24 * v66];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unsigned int v12 = v13;
    uint64_t v14 = ++v66;
    if (v64[0])
    {
      int v61 = 5;
      unint64_t v62 = (const char *)a5;
      uint64_t v15 = &v61;
      uint64_t v16 = (char *)v65;
      if (v14 >= v67)
      {
        unint64_t v50 = v14 + 1;
        BOOL v51 = (char *)v65 + 24 * v14 > (char *)&v61;
        if (v65 <= &v61 && v51)
        {
          int64_t v56 = (char *)&v61 - (unsigned char *)v65;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v50, 24);
          uint64_t v16 = (char *)v65;
          uint64_t v15 = (int *)((char *)v65 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v50, 24);
          uint64_t v15 = &v61;
          uint64_t v16 = (char *)v65;
        }
      }
      uint64_t v17 = &v16[24 * v66];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v66;
      if (v64[0])
      {
        int v61 = 3;
        unint64_t v62 = " must be complex type with floating-point elements, but got ";
        uint64_t v63 = 60;
        uint64_t v20 = &v61;
        uint64_t v21 = (char *)v65;
        if (v19 >= v67)
        {
          unint64_t v52 = v19 + 1;
          BOOL v53 = (char *)v65 + 24 * v19 > (char *)&v61;
          if (v65 <= &v61 && v53)
          {
            int64_t v57 = (char *)&v61 - (unsigned char *)v65;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
            uint64_t v21 = (char *)v65;
            uint64_t v20 = (int *)((char *)v65 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
            uint64_t v20 = &v61;
            uint64_t v21 = (char *)v65;
          }
        }
        uint64_t v22 = &v21[24 * v66];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        ++v66;
        if (v64[0])
        {
          uint64_t v24 = &v61;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v61, a2);
          long long v25 = (char *)v65;
          if (v66 >= v67)
          {
            unint64_t v54 = v66 + 1;
            if (v65 <= &v61 && (char *)v65 + 24 * v66 > (char *)&v61)
            {
              int64_t v58 = (char *)&v61 - (unsigned char *)v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              long long v25 = (char *)v65;
              uint64_t v24 = (int *)((char *)v65 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              uint64_t v24 = &v61;
              long long v25 = (char *)v65;
            }
          }
          uint64_t v26 = &v25[24 * v66];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v66;
        }
      }
    }
  }
  uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v64);
  if (v64[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v64);
  }
  if (v73)
  {
    uint64_t v29 = __p;
    if (__p)
    {
      uint64_t v30 = v72;
      int v31 = __p;
      if (v72 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        int v31 = __p;
      }
      int64_t v72 = v29;
      operator delete(v31);
    }
    unint64_t v32 = v69;
    if (v69)
    {
      uint64_t v33 = v70;
      long long v34 = v69;
      if (v70 != v69)
      {
        do
        {
          uint64_t v36 = *--v33;
          uint64_t v35 = v36;
          *uint64_t v33 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v33 != v32);
        long long v34 = v69;
      }
      unint64_t v70 = v32;
      operator delete(v34);
    }
    if (v65 != v68) {
      free(v65);
    }
  }
  return v28;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(*(void *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  uint64_t v10 = 1;
  if (v5 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    __int16 v51 = 261;
    v50[0] = a3;
    v50[1] = a4;
    mlir::Operation::emitOpError(a1, v50, (uint64_t)v55);
    if (v55[0])
    {
      int v52 = 3;
      BOOL v53 = " #";
      uint64_t v54 = 2;
      uint64_t v14 = &v52;
      uint64_t v15 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          int64_t v46 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          uint64_t v15 = (char *)v56;
          uint64_t v14 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          uint64_t v14 = &v52;
          uint64_t v15 = (char *)v56;
        }
      }
      uint64_t v16 = &v15[24 * v57];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      uint64_t v18 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        BOOL v53 = (const char *)a5;
        uint64_t v19 = &v52;
        uint64_t v20 = (char *)v56;
        if (v18 >= v58)
        {
          unint64_t v41 = v18 + 1;
          BOOL v42 = (char *)v56 + 24 * v18 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            int64_t v47 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v20 = (char *)v56;
            uint64_t v19 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v19 = &v52;
            uint64_t v20 = (char *)v56;
          }
        }
        uint64_t v21 = &v20[24 * v57];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v21 = v22;
        uint64_t v23 = ++v57;
        if (v55[0])
        {
          int v52 = 3;
          BOOL v53 = " must be floating-point, but got ";
          uint64_t v54 = 33;
          uint64_t v24 = &v52;
          long long v25 = (char *)v56;
          if (v23 >= v58)
          {
            unint64_t v43 = v23 + 1;
            BOOL v44 = (char *)v56 + 24 * v23 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              int64_t v48 = (char *)&v52 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              long long v25 = (char *)v56;
              uint64_t v24 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              uint64_t v24 = &v52;
              long long v25 = (char *)v56;
            }
          }
          uint64_t v26 = &v25[24 * v57];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v57;
          if (v55[0])
          {
            uint64_t v28 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, a2);
            uint64_t v29 = (char *)v56;
            if (v57 >= v58)
            {
              unint64_t v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                int64_t v49 = (char *)&v52 - (unsigned char *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                uint64_t v29 = (char *)v56;
                uint64_t v28 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                uint64_t v28 = &v52;
                uint64_t v29 = (char *)v56;
              }
            }
            uint64_t v30 = &v29[24 * v57];
            long long v31 = *(_OWORD *)v28;
            *((void *)v30 + 2) = *((void *)v28 + 2);
            *(_OWORD *)uint64_t v30 = v31;
            ++v57;
          }
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      unint64_t v32 = __p;
      if (__p)
      {
        uint64_t v33 = v63;
        long long v34 = __p;
        if (v63 != __p)
        {
          do
            uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          long long v34 = __p;
        }
        uint64_t v63 = v32;
        operator delete(v34);
      }
      uint64_t v35 = v60;
      if (v60)
      {
        uint64_t v36 = v61;
        int v37 = v60;
        if (v61 != v60)
        {
          do
          {
            uint64_t v39 = *--v36;
            uint64_t v38 = v39;
            *uint64_t v36 = 0;
            if (v39) {
              MEMORY[0x21667D390](v38, 0x1000C8077774924);
            }
          }
          while (v36 != v35);
          int v37 = v60;
        }
        int v61 = v35;
        operator delete(v37);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
  }
  return v10;
}

BOOL mlir::complex::AbsOp::parse(uint64_t a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  v17[0] = &v21;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0; {
  if (v18)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AbsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src)) {
    return 0;
  }
  uint64_t v21 = __src[0];
  uint64_t v16 = __src[0];
  if (*(_UNKNOWN **)(*(void *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((long long v13 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes(a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, a2 + 16) != 0;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v15 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(__src, a1, v8, v14);
    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

void mlir::complex::AbsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v31[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v6)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v6 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v9 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 32);
      }
      else
      {
        *((void *)v8 + 4) = v9 + 1;
        *uint64_t v9 = 32;
      }
      uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v11 = (void *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v11 > 7uLL)
      {
        *uint64_t v11 = 0x6874616D74736166;
        *((void *)v10 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v10, "fastmath", 8uLL);
      }
      uint64_t v29 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 104))(a2))
      {
        unsigned int v12 = (void *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v29, a2);
        if (v13 == (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2]) {
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v29);
        }
      }
    }
  }
  uint64_t v29 = v31;
  v31[0] = "fastmath";
  v31[1] = 8;
  uint64_t v30 = 0x200000001;
  uint64_t v14 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v15 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v15 && v15 == mlir::arith::FastMathFlagsAttr::get(v14, 0))
  {
    unsigned int v18 = v30;
    if (v30 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 16);
      unsigned int v18 = v30;
    }
    uint64_t v19 = (char *)v29 + 16 * v18;
    void *v19 = "fastmath";
    v19[1] = 8;
    LODWORD(v30) = v30 + 1;
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_18:
      p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
      goto LABEL_23;
    }
  }
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v16);
  p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_23:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v21, v29, v30);
  long long v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *uint64_t v23 = 32;
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v25 = (unsigned char *)*((void *)v24 + 4);
  if (*((unsigned char **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    unsigned char *v25 = 58;
    ++*((void *)v24 + 4);
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    unsigned char *v27 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v29 != v31) {
    free(v29);
  }
}

uint64_t mlir::complex::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.add", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::AddOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::AddOp::verifyInvariantsImpl(mlir::complex::AddOp *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::complex::AddOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AddOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::complex::AngleOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::AngleOp::parse(uint64_t a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  v17[0] = &v21;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0; {
  if (v18)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AngleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src)) {
    return 0;
  }
  uint64_t v21 = __src[0];
  uint64_t v16 = __src[0];
  if (*(_UNKNOWN **)(*(void *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((uint64_t v13 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes(a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, a2 + 16) != 0;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v15 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(__src, a1, v8, v14);
    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::Atan2Op::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::Atan2Op::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Atan2Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.bitcast", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::BitcastOp::verifyInvariantsImpl(mlir::complex::BitcastOp *this)
{
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v1 = *(void *)this - 16;
  }
  else {
    uint64_t v1 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v1, 0);
  return 1;
}

BOOL mlir::complex::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ConjOpGenericAdaptorBase::ConjOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.conj", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ConjOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::ConjOp::verifyInvariantsImpl(mlir::complex::ConjOp *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::complex::ConjOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    unint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(a2);
    *unint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConjOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.constant", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::ConstantOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      long long v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          long long v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          long long v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      long long v31 = v67;
      unint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      unsigned int v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "value", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected key entry for value in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      uint64_t v36 = &v56;
      int v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          int v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v40 = __p;
    if (__p)
    {
      unint64_t v41 = v67;
      BOOL v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      unsigned int v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      __int16 v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          __int16 v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          __int16 v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unsigned int v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      void *v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

void *mlir::complex::ConstantOp::setInherentAttr(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 5 && *(_DWORD *)a2 == 1970037110 && *(unsigned char *)(a2 + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = 0;
      }
      *uint64_t result = v5;
    }
    else
    {
      *uint64_t result = 0;
    }
  }
  return result;
}

BOOL mlir::complex::ConstantOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v6, (void **)"value", (const char *)5, a3, a4);
}

uint64_t mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1 || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: array attribute";
        uint64_t v31 = 47;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = __p;
    if (__p)
    {
      long long v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      BOOL v42 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      unint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::complex::ConstantOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::ArrayAttr]";
  unint64_t v41 = 65;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      long long v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          long long v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v19 = (char *)v46;
            uint64_t v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            uint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::complex::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(a2) = a4;
  uint64_t v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::complex::ConstantOp::verifyInvariantsImpl(mlir::complex::ConstantOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v3, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (void **)"requires attribute 'value'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v24;
        long long v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          long long v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        unint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            *unint64_t v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::complex::ConstantOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v15, v6)) {
    return 0;
  }
  if (v15)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v7 = v15;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  v13[0] = a1;
  v13[1] = &v14;
  void v13[2] = a2;
  uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
  if (v9)
  {
    if (!mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v9, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v13))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v13[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v13)) {
    return 0;
  }
  uint64_t v10 = v13[0];
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = v10;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::complex::ConstantOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v21[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v19 = v21;
  v21[0] = "value";
  v21[1] = 5;
  uint64_t v20 = 0x200000001;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v19, v20);
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *uint64_t v13 = 58;
    ++*((void *)v12 + 4);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v16 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v19 != v21) {
    free(v19);
  }
}

BOOL mlir::complex::CosOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::CosOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::CosOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::CreateOpGenericAdaptorBase::CreateOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.create", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::CreateOp::verifyInvariantsImpl(mlir::complex::CreateOp *this)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
  uint64_t v4 = *(void *)this;
  }
  if ((*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    int v14 = *(_DWORD *)(v4 + 36);
    uint64_t v15 = v4 - 16;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    v37[0] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37);
    uint64_t v18 = *(void *)this;
    if (Value == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      int v25 = *(_DWORD *)(v18 + 36);
      uint64_t v26 = v18 - 16;
      if (v25) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      v37[0] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                                                               + 56)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
        return 1;
      v35[0] = (void **)"failed to verify that complex element type matches imaginary operand type";
      __int16 v36 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
      if (v37[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
      }
      if (v44)
      {
        int64_t v28 = __p;
        if (__p)
        {
          uint64_t v29 = v43;
          uint64_t v30 = __p;
          if (v43 != __p)
          {
            do
              uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            uint64_t v30 = __p;
          }
          __int16 v43 = v28;
          operator delete(v30);
        }
        uint64_t v9 = v40;
        if (!v40) {
          goto LABEL_61;
        }
        uint64_t v31 = v41;
        uint64_t v11 = v40;
        if (v41 == v40) {
          goto LABEL_60;
        }
        do
        {
          uint64_t v33 = *--v31;
          uint64_t v32 = v33;
          *uint64_t v31 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v31 != v9);
        goto LABEL_59;
      }
    }
    else
    {
      v35[0] = (void **)"failed to verify that complex element type matches real operand type";
      __int16 v36 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
      if (v37[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
      }
      if (v44)
      {
        uint64_t v19 = __p;
        if (__p)
        {
          uint64_t v20 = v43;
          long long v21 = __p;
          if (v43 != __p)
          {
            do
              uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            long long v21 = __p;
          }
          __int16 v43 = v19;
          operator delete(v21);
        }
        uint64_t v9 = v40;
        if (!v40) {
          goto LABEL_61;
        }
        uint64_t v22 = v41;
        uint64_t v11 = v40;
        if (v41 == v40) {
          goto LABEL_60;
        }
        do
        {
          uint64_t v24 = *--v22;
          uint64_t v23 = v24;
          void *v22 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v22 != v9);
        goto LABEL_59;
      }
    }
  }
  else
  {
    v35[0] = (void **)"failed to verify that all of {real, imaginary} have same type";
    __int16 v36 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      unint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = v43;
        uint64_t v8 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        __int16 v43 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v40;
      if (!v40) {
        goto LABEL_61;
      }
      uint64_t v10 = v41;
      uint64_t v11 = v40;
      if (v41 == v40)
      {
LABEL_60:
        unint64_t v41 = v9;
        operator delete(v11);
LABEL_61:
        if (v38 != &v39) {
          free(v38);
        }
        return v5;
      }
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        *uint64_t v10 = 0;
        if (v13) {
          MEMORY[0x21667D390](v12, 0x1000C8077774924);
        }
      }
      while (v10 != v9);
LABEL_59:
      uint64_t v11 = v40;
      goto LABEL_60;
    }
  }
  return v5;
}

BOOL mlir::complex::CreateOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v18[4] = *MEMORY[0x263EF8340];
  memset(v18, 0, 24);
  memset(v17, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v18, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v15[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v15)) {
    return 0;
  }
  uint64_t __src = v15[0];
  uint64_t v14 = v15[0];
  if (*(_UNKNOWN **)(*(void *)v15[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v8 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v15) + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      mlir::OperationState::addTypes(a2, &__src, 1);
      v15[0] = __src;
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v15);
      uint64_t v10 = a2 + 16;
      if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, Value, v10))
      {
        v15[0] = __src;
        uint64_t v11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v15);
        return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, v11, v10) != 0;
      }
      return 0;
    }
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v13[16] = 257;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, _WORD *))(*(void *)a1 + 24))(v15, a1, v4, v13);
  uint64_t v5 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v15, "'complex' must be complex type with floating-point elements, but got ");
  uint64_t v6 = mlir::InFlightDiagnostic::append<mlir::Type &>(v5, &v14);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v6);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v15);
  return v7;
}

BOOL mlir::complex::DivOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::DivOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::DivOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::EqualOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v13 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  uint64_t v15 = a1;
  **(void **)a11 = mlir::Builder::getIntegerType((mlir::Builder *)&v15, 1u);
  return 1;
}

uint64_t mlir::complex::EqualOp::verifyInvariantsImpl(mlir::complex::EqualOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
  if ((*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
  }
    return 1;
  uint64_t v14 = (void **)"failed to verify that all of {lhs, rhs} have same type";
  __int16 v15 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  }
  if (v23)
  {
    uint64_t v5 = __p;
    if (__p)
    {
      uint64_t v6 = v22;
      uint64_t v7 = __p;
      if (v22 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      uint64_t v22 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v19;
    if (v19)
    {
      uint64_t v9 = v20;
      uint64_t v10 = v19;
      if (v20 != v19)
      {
        do
        {
          uint64_t v12 = *--v9;
          uint64_t v11 = v12;
          *uint64_t v9 = 0;
          if (v12) {
            MEMORY[0x21667D390](v11, 0x1000C8077774924);
          }
        }
        while (v9 != v8);
        uint64_t v10 = v19;
      }
      uint64_t v20 = v8;
      operator delete(v10);
    }
    if (v17 != &v18) {
      free(v17);
    }
  }
  return v4;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v49 = a2;
  uint64_t v9 = 1;
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&v49, 1))
  {
    __int16 v48 = 261;
    v47[0] = a3;
    v47[1] = a4;
    mlir::Operation::emitOpError(a1, v47, (uint64_t)v53);
    if (v53[0])
    {
      int v50 = 3;
      int64_t v51 = " #";
      uint64_t v52 = 2;
      uint64_t v10 = &v50;
      uint64_t v11 = (char *)v54;
      if (v55 >= v56)
      {
        unint64_t v37 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          int64_t v43 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          uint64_t v11 = (char *)v54;
          uint64_t v10 = (int *)((char *)v54 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          uint64_t v10 = &v50;
          uint64_t v11 = (char *)v54;
        }
      }
      uint64_t v12 = &v11[24 * v55];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = ++v55;
      if (v53[0])
      {
        int v50 = 5;
        int64_t v51 = (const char *)a5;
        __int16 v15 = &v50;
        uint64_t v16 = (char *)v54;
        if (v14 >= v56)
        {
          unint64_t v38 = v14 + 1;
          BOOL v39 = (char *)v54 + 24 * v14 > (char *)&v50;
          if (v54 <= &v50 && v39)
          {
            int64_t v44 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            uint64_t v16 = (char *)v54;
            __int16 v15 = (int *)((char *)v54 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            __int16 v15 = &v50;
            uint64_t v16 = (char *)v54;
          }
        }
        __int16 v17 = &v16[24 * v55];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)__int16 v17 = v18;
        uint64_t v19 = ++v55;
        if (v53[0])
        {
          int v50 = 3;
          int64_t v51 = " must be 1-bit signless integer, but got ";
          uint64_t v52 = 41;
          uint64_t v20 = &v50;
          long long v21 = (char *)v54;
          if (v19 >= v56)
          {
            unint64_t v40 = v19 + 1;
            BOOL v41 = (char *)v54 + 24 * v19 > (char *)&v50;
            if (v54 <= &v50 && v41)
            {
              int64_t v45 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              long long v21 = (char *)v54;
              uint64_t v20 = (int *)((char *)v54 + v45);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              uint64_t v20 = &v50;
              long long v21 = (char *)v54;
            }
          }
          uint64_t v22 = &v21[24 * v55];
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          ++v55;
          if (v53[0])
          {
            uint64_t v24 = &v50;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v49);
            int v25 = (char *)v54;
            if (v55 >= v56)
            {
              unint64_t v42 = v55 + 1;
              if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
              {
                int64_t v46 = (char *)&v50 - (unsigned char *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                int v25 = (char *)v54;
                uint64_t v24 = (int *)((char *)v54 + v46);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                uint64_t v24 = &v50;
                int v25 = (char *)v54;
              }
            }
            uint64_t v26 = &v25[24 * v55];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = *((void *)v24 + 2);
            *(_OWORD *)uint64_t v26 = v27;
            ++v55;
          }
        }
      }
    }
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v62)
    {
      int64_t v28 = __p;
      if (__p)
      {
        uint64_t v29 = v61;
        uint64_t v30 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        unsigned int v61 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v58;
      if (v58)
      {
        uint64_t v32 = v59;
        uint64_t v33 = v58;
        if (v59 != v58)
        {
          do
          {
            uint64_t v35 = *--v32;
            uint64_t v34 = v35;
            *uint64_t v32 = 0;
            if (v35) {
              MEMORY[0x21667D390](v34, 0x1000C8077774924);
            }
          }
          while (v32 != v31);
          uint64_t v33 = v58;
        }
        uint64_t v59 = v31;
        operator delete(v33);
      }
      if (v54 != v57) {
        free(v54);
      }
    }
  }
  return v9;
}

BOOL mlir::complex::EqualOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  v10[0] = (uint64_t)v13;
  v10[1] = 1;
  memset(v12, 0, 24);
  uint64_t v11 = 0;
  v9[0] = &v11;
  v9[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t __src = 0, mlir::AsmParser::parseType<mlir::ComplexType>(a1, &__src))
    && (uint64_t v11 = __src,
        uint64_t v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1),
        uint64_t __src = mlir::Builder::getIntegerType(v5, 1u),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v6 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, v6)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, *(void *)v9[0], v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::complex::detail::ExpOpGenericAdaptorBase::ExpOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.exp", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ExpOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::ExpOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ExpOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::Expm1Op::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::Expm1Op::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Expm1Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ImOpGenericAdaptorBase::ImOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.im", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ImOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::ImOp::parse(uint64_t a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  v17[0] = &v21;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0; {
  if (v18)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ImOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src)) {
    return 0;
  }
  uint64_t v21 = __src[0];
  uint64_t v16 = __src[0];
  if (*(_UNKNOWN **)(*(void *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((long long v13 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes(a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, a2 + 16) != 0;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v15 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(__src, a1, v8, v14);
    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::Log1pOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::Log1pOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Log1pOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::LogOpGenericAdaptorBase::LogOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.log", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::LogOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::LogOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::LogOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::MulOpGenericAdaptorBase::MulOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.mul", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::MulOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::MulOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::MulOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::NegOpGenericAdaptorBase::NegOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.neg", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::NegOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::NegOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::NegOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::NotEqualOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  v10[0] = (uint64_t)v13;
  v10[1] = 1;
  memset(v12, 0, 24);
  uint64_t v11 = 0;
  v9[0] = &v11;
  v9[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t __src = 0, mlir::AsmParser::parseType<mlir::ComplexType>(a1, &__src))
    && (uint64_t v11 = __src,
        uint64_t v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1),
        uint64_t __src = mlir::Builder::getIntegerType(v5, 1u),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v6 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, v6)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, *(void *)v9[0], v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::complex::PowOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::PowOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::PowOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::ReOpGenericAdaptorBase::ReOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.re", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ReOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::ReOp::parse(uint64_t a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  v17[0] = &v21;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0; {
  if (v18)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ReOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src)) {
    return 0;
  }
  uint64_t v21 = __src[0];
  uint64_t v16 = __src[0];
  if (*(_UNKNOWN **)(*(void *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((long long v13 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes(a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, a2 + 16) != 0;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v15 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(__src, a1, v8, v14);
    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::RsqrtOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::RsqrtOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::RsqrtOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::SignOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::SignOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SignOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::SinOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::SinOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SinOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::SqrtOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::SqrtOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SqrtOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::SubOpGenericAdaptorBase::SubOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.sub", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::SubOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::SubOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SubOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::complex::TanOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::TanOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::TanOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::TanhOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::complex::TanhOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::TanhOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void mlir::RewritePatternSet::addImpl<ArithBitcast,mlir::MLIRContext *&>()
{
}

void mlir::RewritePatternSet::addImpl<MergeComplexBitcast,mlir::MLIRContext *&>()
{
}

void mlir::RewritePatternSet::addImpl<MergeArithBitcast,mlir::MLIRContext *&>()
{
}

void mlir::RewritePattern::create<ArithBitcast,mlir::MLIRContext *&>()
{
}

void ArithBitcast::~ArithBitcast(ArithBitcast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::BitcastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::BitcastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::BitcastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t ArithBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    || *(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a2 + 72) + 24);
  unint64_t v9 = v3;
  uint64_t v6 = mlir::OpBuilder::create<mlir::arith::BitcastOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v9, &v8);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v6);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::BitcastOp,mlir::Type,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.bitcast", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"arith.bitcast";
    void v17[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::RewritePattern::create<MergeComplexBitcast,mlir::MLIRContext *&>()
{
}

void MergeComplexBitcast::~MergeComplexBitcast(MergeComplexBitcast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t MergeComplexBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (result
    && *(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::BitcastOp,void>::id)
  {
    goto LABEL_7;
  }
  unint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (!result) {
    return result;
  }
  if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id)
  {
LABEL_7:
    unint64_t v6 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v8 = *(void *)(*(void *)(result + 72) + 24);
    unint64_t v9 = v6;
    uint64_t v7 = mlir::OpBuilder::create<mlir::complex::BitcastOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v9, &v8);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v7);
    return 1;
  }
  return 0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::complex::BitcastOp,mlir::Type,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v25[28] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"complex.bitcast", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    __int16 v20 = 1283;
    uint64_t v19[2] = (uint64_t)"complex.bitcast";
    void v19[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  unsigned int v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    unsigned int v12 = v23;
  }
  *(void *)(v22 + 8 * v12) = v11;
  ++v23;
  long long v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::BitcastOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void mlir::RewritePattern::create<MergeArithBitcast,mlir::MLIRContext *&>()
{
}

void MergeArithBitcast::~MergeArithBitcast(MergeArithBitcast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::BitcastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::BitcastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::BitcastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t MergeArithBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::BitcastOp,void>::id)
    {
      unint64_t v6 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v8 = *(void *)(*(void *)(result + 72) + 24);
      unint64_t v9 = v6;
      uint64_t v7 = mlir::OpBuilder::create<mlir::complex::BitcastOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v9, &v8);
      (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *anonymous namespace'::FoldComponentNeg<mlir::complex::ImOp,1>::~FoldComponentNeg(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::FoldComponentNeg<mlir::complex::ImOp,1>::~FoldComponentNeg(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ImOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ImOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ImOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::FoldComponentNeg<mlir::complex::ImOp,1>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v10 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id)
    {
      uint64_t v10 = *(void *)(*(void *)(result + 72) + 24);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
      if (result)
      {
        uint64_t v6 = result;
        if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id)
        {
          unint64_t v9 = *(void *)(result - 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v9);
          unint64_t v9 = *(void *)(*(void *)(v6 + 72) + 56);
          uint64_t v10 = Value;
          uint64_t v8 = mlir::OpBuilder::create<mlir::arith::NegFOp,mlir::Type &,mlir::Value>(a3 + 1, *(void *)(a2 + 24), &v10, (uint64_t *)&v9);
          (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v8);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::NegFOp,mlir::Type &,mlir::Value>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.negf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"arith.negf";
    void v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::NegFOp::build(a1, (uint64_t)v19, *a3, *a4, 0);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *anonymous namespace'::FoldComponentNeg<mlir::complex::ReOp,0>::~FoldComponentNeg(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::FoldComponentNeg<mlir::complex::ReOp,0>::~FoldComponentNeg(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ReOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ReOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ReOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::FoldComponentNeg<mlir::complex::ReOp,0>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v10 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id)
    {
      uint64_t v10 = *(void *)(*(void *)(result + 72) + 24);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
      if (result)
      {
        uint64_t v6 = result;
        if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id)
        {
          unint64_t v9 = *(void *)(result - 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v9);
          unint64_t v9 = *(void *)(*(void *)(v6 + 72) + 24);
          uint64_t v10 = Value;
          uint64_t v8 = mlir::OpBuilder::create<mlir::arith::NegFOp,mlir::Type &,mlir::Value>(a3 + 1, *(void *)(a2 + 24), &v10, (uint64_t *)&v9);
          (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v8);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AbsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    __int16 v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        __int16 v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        __int16 v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    __int16 v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      __int16 v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unsigned int v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unsigned int v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::AsmParser::parseType<mlir::ComplexType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  __int16 v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = __p;
    if (__p)
    {
      unint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      int v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      unsigned int v12 = v23;
      long long v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *unsigned int v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
        long long v13 = v22;
      }
      unsigned int v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AddOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    __int16 v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      __int16 v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unsigned int v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unsigned int v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AngleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    __int16 v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      __int16 v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unsigned int v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unsigned int v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Atan2Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    __int16 v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      __int16 v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unsigned int v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unsigned int v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConjOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    __int16 v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      __int16 v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unsigned int v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unsigned int v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v20, a3)) {
    return 0;
  }
  uint64_t v7 = v20;
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  unsigned int v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v27;
      unsigned int v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unsigned int v12 = __p;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    long long v13 = v24;
    if (v24)
    {
      long long v14 = v25;
      unint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *long long v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v24;
      }
      int v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::CosOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::CosOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::CosOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::DivOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::DivOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::DivOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ExpOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Expm1Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ImOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ImOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ImOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Log1pOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::LogOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::LogOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::LogOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::MulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::MulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::MulOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::NegOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::NegOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::NegOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::PowOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::PowOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::PowOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ReOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ReOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ReOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::RsqrtOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SignOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SignOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SignOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SinOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SqrtOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SubOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SubOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SubOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::TanOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::TanhOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unsigned int v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unsigned int v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unsigned int v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      char v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        char v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void mlir::complex::ComplexDialect::ComplexDialect(mlir::complex::ComplexDialect *this, mlir::MLIRContext *a2)
{
  uint64_t v2 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"complex", 7, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ComplexDialect,void>::id);
  *uint64_t v2 = &unk_26C380130;
  unint64_t v3 = (uint64_t *)v2[4];
  if (!mlir::MLIRContext::isDialectLoading(v3, (uint64_t)"arith", 5))
  {
    uint64_t v4 = v3;
    mlir::MLIRContext::getOrLoadDialect(v3, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v4);
  }
  mlir::Dialect::addOperations<mlir::complex::AbsOp,mlir::complex::AddOp,mlir::complex::AngleOp,mlir::complex::Atan2Op,mlir::complex::BitcastOp,mlir::complex::ConjOp,mlir::complex::ConstantOp,mlir::complex::CosOp,mlir::complex::CreateOp,mlir::complex::DivOp,mlir::complex::EqualOp,mlir::complex::ExpOp,mlir::complex::Expm1Op,mlir::complex::ImOp,mlir::complex::Log1pOp,mlir::complex::LogOp,mlir::complex::MulOp,mlir::complex::NegOp,mlir::complex::NotEqualOp,mlir::complex::PowOp,mlir::complex::ReOp,mlir::complex::RsqrtOp,mlir::complex::SignOp,mlir::complex::SinOp,mlir::complex::SqrtOp,mlir::complex::SubOp,mlir::complex::TanOp,mlir::complex::TanhOp>();
}

void mlir::complex::ComplexDialect::~ComplexDialect(llvm **this)
{
}

void sub_2115B9D30()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::complex::AbsOp,mlir::complex::AddOp,mlir::complex::AngleOp,mlir::complex::Atan2Op,mlir::complex::BitcastOp,mlir::complex::ConjOp,mlir::complex::ConstantOp,mlir::complex::CosOp,mlir::complex::CreateOp,mlir::complex::DivOp,mlir::complex::EqualOp,mlir::complex::ExpOp,mlir::complex::Expm1Op,mlir::complex::ImOp,mlir::complex::Log1pOp,mlir::complex::LogOp,mlir::complex::MulOp,mlir::complex::NegOp,mlir::complex::NotEqualOp,mlir::complex::PowOp,mlir::complex::ReOp,mlir::complex::RsqrtOp,mlir::complex::SignOp,mlir::complex::SinOp,mlir::complex::SqrtOp,mlir::complex::SubOp,mlir::complex::TanOp,mlir::complex::TanhOp>()
{
}

ZinIrHalH13g *mlir::complex::ComplexDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a4;
  if (!mlir::complex::ConstantOp::isBuildableWith((uint64_t)a3, a4)) {
    return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
  }
  uint64_t v10 = a3;
  return mlir::OpBuilder::create<mlir::complex::ConstantOp,mlir::Type &,mlir::ArrayAttr>(a2, a5, &v11, (uint64_t *)&v10);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::complex::ConstantOp,mlir::Type &,mlir::ArrayAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"complex.constant", (const unsigned __int8 *)0x10, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"complex.constant";
    void v17[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::complex::ConstantOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

llvm::APFloatBase *mlir::complex::NumberAttr::get(uint64_t a1, double a2, double a3)
{
  v22[3] = *MEMORY[0x263EF8340];
  uint64_t v17 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
  uint64_t v5 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, a2);
  uint64_t v6 = llvm::APFloatBase::IEEEdouble(v5);
  llvm::APFloat::Storage::Storage(v22, v19, v6);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  char v15 = 0;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&Value);
  llvm::APFloat::convert((uint64_t)v21, FloatSemantics, 1, &v15);
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v18, a3);
  llvm::APFloat::Storage::Storage(v20, v18, v6);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v18);
  uint64_t v8 = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&Value);
  llvm::APFloat::convert((uint64_t)v19, v8, 1, &v15);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::complex::NumberAttr,void>::id;
  v18[1] = Context;
  uint64_t v11 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::complex::detail::NumberAttrStorage,llvm::APFloat &,llvm::APFloat &,mlir::ComplexType &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir7complex6detail17NumberAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_10NumberAttrEJRNS_7APFloatESE_RNS1_11ComplexTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS5_, (uint64_t)v18, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::NumberAttr,void>::id, (uint64_t)v21, (uint64_t)v19, &v17);
  unsigned int v12 = (void *)v20[0];
  long long v13 = llvm::APFloatBase::PPCDoubleDouble(v11);
  if (v13 == v12)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v20);
    if (v13 != (void *)v22[0]) {
      goto LABEL_3;
    }
LABEL_6:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
    return v11;
  }
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v20);
  if (v13 == (void *)v22[0]) {
    goto LABEL_6;
  }
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
  return v11;
}

llvm::APFloatBase *mlir::complex::ComplexDialect::parseAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v45 = a2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  BYTE2(v49) = 0;
  uint64_t v47 = 0;
  unsigned __int8 v48 = 0;
  uint64_t v46 = v5;
  LOBYTE(v49) = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a2 + 608))(a2, &v47))
  {
    LOWORD(v49) = 256;
    if (!BYTE2(v49)) {
      BYTE2(v49) = 1;
    }
    goto LABEL_15;
  }
  unsigned int v41 = (void **)"number";
  unsigned int v42 = (const char *)6;
  if (BYTE2(v49)) {
    goto LABEL_15;
  }
  uint64_t v6 = (const char *)v48;
  if (!v48)
  {
    (*(void (**)(uint64_t, void ***, uint64_t))(*(void *)v45 + 616))(v45, &v41, 1);
    if (!BYTE2(v49))
    {
      uint64_t v6 = (const char *)v48;
      goto LABEL_45;
    }
LABEL_15:
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v45) > 0xFFu) {
      return v8;
    }
    goto LABEL_16;
  }
  if (v48 == (void *)6 && *(_DWORD *)v47 == 1651340654 && *(_WORD *)(v47 + 4) == 29285)
  {
    uint64_t v8 = mlir::complex::NumberAttr::parse(a2);
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    LOBYTE(v49) = v8 != 0;
    *(_WORD *)((char *)&v49 + 1) = 257;
    if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v45) > 0xFFu) {
      return v8;
    }
    goto LABEL_16;
  }
LABEL_45:
  uint64_t v8 = 0;
  uint64_t v9 = (void **)v47;
  LOWORD(v49) = 0;
  BYTE2(v49) = 1;
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v45) > 0xFFu) {
    return v8;
  }
LABEL_16:
  __int16 v40 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a2 + 24))(&v45, a2, v4, v39);
  if (v45)
  {
    LODWORD(v41) = 3;
    uint64_t v43 = 19;
    char v10 = &v41;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v33 = v49 + 1;
      if (v48 <= &v41 && (char *)v48 + 24 * v49 > (char *)&v41)
      {
        int64_t v36 = (char *)&v41 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v33, 24);
        uint64_t v11 = (char *)v48;
        char v10 = (void ***)((char *)v48 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v33, 24);
        char v10 = &v41;
        uint64_t v11 = (char *)v48;
      }
    }
    unsigned int v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)unsigned int v12 = v13;
    ++v49;
    if (v45)
    {
      __int16 v44 = 261;
      unsigned int v41 = v9;
      unsigned int v42 = v6;
      mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
      if (v45)
      {
        LODWORD(v41) = 3;
        uint64_t v43 = 14;
        uint64_t v14 = &v41;
        char v15 = (char *)v48;
        if (v49 >= v50)
        {
          unint64_t v34 = v49 + 1;
          if (v48 <= &v41 && (char *)v48 + 24 * v49 > (char *)&v41)
          {
            int64_t v37 = (char *)&v41 - (unsigned char *)v48;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v34, 24);
            char v15 = (char *)v48;
            uint64_t v14 = (void ***)((char *)v48 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v34, 24);
            uint64_t v14 = &v41;
            char v15 = (char *)v48;
          }
        }
        __int16 v16 = &v15[24 * v49];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)__int16 v16 = v17;
        ++v49;
        if (v45)
        {
          __int16 v18 = *(void ***)(a1 + 8);
          int v19 = *(const char **)(a1 + 16);
          __int16 v44 = 261;
          unsigned int v41 = v18;
          unsigned int v42 = v19;
          mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
          if (v45)
          {
            LODWORD(v41) = 3;
            uint64_t v43 = 1;
            unint64_t v20 = &v41;
            uint64_t v21 = (char *)v48;
            if (v49 >= v50)
            {
              unint64_t v35 = v49 + 1;
              if (v48 <= &v41 && (char *)v48 + 24 * v49 > (char *)&v41)
              {
                int64_t v38 = (char *)&v41 - (unsigned char *)v48;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
                uint64_t v21 = (char *)v48;
                unint64_t v20 = (void ***)((char *)v48 + v38);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
                unint64_t v20 = &v41;
                uint64_t v21 = (char *)v48;
              }
            }
            uint64_t v22 = &v21[24 * v49];
            long long v23 = *(_OWORD *)v20;
            *((void *)v22 + 2) = v20[2];
            *(_OWORD *)uint64_t v22 = v23;
            ++v49;
            if (v45) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
            }
          }
        }
      }
    }
  }
  if (v56)
  {
    unsigned int v24 = __p;
    if (__p)
    {
      int v25 = v55;
      char v26 = __p;
      if (v55 != __p)
      {
        do
          int v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        char v26 = __p;
      }
      unsigned int v55 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v52;
    if (v52)
    {
      uint64_t v28 = v53;
      unint64_t v29 = v52;
      if (v53 != v52)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        unint64_t v29 = v52;
      }
      int64_t v53 = v27;
      operator delete(v29);
    }
    if (v48 != v51) {
      free(v48);
    }
  }
  return 0;
}

void mlir::complex::ComplexDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::complex::NumberAttr,void>::id)
  {
    uint64_t v6 = a2;
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a3 + 16))(a3);
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 29285;
      *(_DWORD *)uint64_t v5 = 1651340654;
      *((void *)v4 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v4, "number", 6uLL);
    }
    mlir::complex::NumberAttr::print((mlir::complex::NumberAttr *)&v6, a3);
  }
}

void mlir::complex::NumberAttr::print(mlir::complex::NumberAttr *this, mlir::AsmPrinter *a2)
{
  void v21[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (_WORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 1uLL)
  {
    *uint64_t v5 = 14908;
    *((void *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, "<:", 2uLL);
  }
  uint64_t v17 = *(void *)(*(void *)this + 72);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
  (*(void (**)(mlir::AsmPrinter *, uint64_t))(*(void *)a2 + 32))(a2, Value);
  long long v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if (*((unsigned char **)v7 + 3) == v8)
  {
    long long v7 = llvm::raw_ostream::write(v7, " ", 1uLL);
  }
  else
  {
    *uint64_t v8 = 32;
    ++*((void *)v7 + 4);
  }
  uint64_t v9 = (const llvm::detail::DoubleAPFloat *)(*(void *)this + 16);
  char v10 = *(void **)v9;
  uint64_t v11 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v11 == v10) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v21, v9);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v21, v9);
  }
  (*(void (**)(mlir::AsmPrinter *, unsigned char *))(*(void *)a2 + 24))(a2, v20);
  unsigned int v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    *long long v13 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  uint64_t v14 = (const llvm::detail::DoubleAPFloat *)(*(void *)this + 48);
  if (v11 == *(void **)v14) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v14);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v14);
  }
  (*(void (**)(mlir::AsmPrinter *, unsigned char *))(*(void *)a2 + 24))(a2, v18);
  char v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) != v16)
  {
    *__int16 v16 = 62;
    ++*((void *)v15 + 4);
    if (v11 != (void *)v19[0]) {
      goto LABEL_18;
    }
LABEL_22:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
    if (v11 != (void *)v21[0]) {
      goto LABEL_19;
    }
LABEL_23:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    return;
  }
  llvm::raw_ostream::write(v15, ">", 1uLL);
  if (v11 == (void *)v19[0]) {
    goto LABEL_22;
  }
LABEL_18:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  if (v11 == (void *)v21[0]) {
    goto LABEL_23;
  }
LABEL_19:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
}

llvm::APFloatBase *mlir::complex::NumberAttr::parse(uint64_t a1)
{
  uint64_t v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 152))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  double v4 = 0.0;
  double v5 = 0.0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)
    || !(*(unsigned __int8 (**)(uint64_t, double *))(*(void *)a1 + 344))(a1, &v5)
    || !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    || !(*(unsigned __int8 (**)(uint64_t, double *))(*(void *)a1 + 344))(a1, &v4)
    || !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    return 0;
  }
  uint64_t v2 = mlir::ComplexType::get(v6);
  return mlir::complex::NumberAttr::get(v2, v5, v4);
}

void llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>()
{
}

void mlir::RegisteredOperationName::insert<mlir::complex::BitcastOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::complex::CreateOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AbsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.abs", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::AbsOp,void>::id, (uint64_t)&v9);
  double v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    double v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BB68;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::AbsOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::AbsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AbsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AbsOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AbsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::AbsOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AbsOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::AbsOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  unint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.abs";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v234 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v40 = v39;
    a1 = v234;
    if (v40)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v248 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v248;
      }
      uint64_t v43 = &v247[v42];
      unint64_t v44 = v248 - v42;
      if (v248 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v248 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v234;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v222 = v2;
    uint64_t v235 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v49 = v48;
    uint64_t v2 = v222;
    a1 = v235;
    if (v49)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v248 = 81;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v248;
      }
      uint64_t v52 = &v247[v51];
      unint64_t v53 = v248 - v51;
      if (v248 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v248 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v222;
      a1 = v235;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v223 = v2;
    uint64_t v236 = a1;
    uint64_t v211 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v211;
    uint64_t v2 = v223;
    int v58 = v57;
    a1 = v236;
    if (v58)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl<Empty>]";
      unint64_t v248 = 109;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v248;
      }
      unsigned int v61 = &v247[v60];
      unint64_t v62 = v248 - v60;
      if (v248 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v248 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v211;
      uint64_t v2 = v223;
      a1 = v236;
    }
  }
  uint64_t v6 = v5[499];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v224 = v2;
    uint64_t v237 = a1;
    uint64_t v201 = v6;
    uint64_t v212 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v201;
    uint64_t v4 = v212;
    int v67 = v66;
    uint64_t v2 = v224;
    a1 = v237;
    if (v67)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v248 = 86;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v248;
      }
      unint64_t v70 = &v247[v69];
      unint64_t v71 = v248 - v69;
      if (v248 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v248 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v201;
      uint64_t v4 = v212;
      uint64_t v2 = v224;
      a1 = v237;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v225 = v2;
    uint64_t v238 = a1;
    uint64_t v202 = v6;
    uint64_t v213 = v4;
    uint64_t v192 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v192;
    uint64_t v6 = v202;
    uint64_t v4 = v213;
    int v76 = v75;
    uint64_t v2 = v225;
    a1 = v238;
    if (v76)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v248 = 82;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v248;
      }
      uint64_t v79 = &v247[v78];
      unint64_t v80 = v248 - v78;
      if (v248 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v248 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v192;
      uint64_t v6 = v202;
      uint64_t v4 = v213;
      uint64_t v2 = v225;
      a1 = v238;
    }
  }
  uint64_t v10 = v9[29];
  char v11 = &unk_267770000;
  {
    uint64_t v226 = v2;
    uint64_t v239 = a1;
    uint64_t v203 = v6;
    uint64_t v214 = v4;
    uint64_t v184 = v10;
    uint64_t v193 = v8;
    char v11 = (void *)&unk_267770000;
    uint64_t v10 = v184;
    uint64_t v8 = v193;
    uint64_t v6 = v203;
    uint64_t v4 = v214;
    int v85 = v84;
    uint64_t v2 = v226;
    a1 = v239;
    if (v85)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v248 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v248;
      }
      unint64_t v88 = &v247[v87];
      unint64_t v89 = v248 - v87;
      if (v248 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v248 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      char v11 = (void *)&unk_267770000;
      uint64_t v10 = v184;
      uint64_t v8 = v193;
      uint64_t v6 = v203;
      uint64_t v4 = v214;
      uint64_t v2 = v226;
      a1 = v239;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v227 = v2;
    uint64_t v240 = a1;
    uint64_t v204 = v6;
    uint64_t v215 = v4;
    uint64_t v185 = v10;
    uint64_t v194 = v8;
    uint64_t v177 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v177;
    uint64_t v10 = v185;
    uint64_t v8 = v194;
    uint64_t v6 = v204;
    uint64_t v4 = v215;
    int v94 = v93;
    uint64_t v2 = v227;
    a1 = v240;
    if (v94)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v248 = 89;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v248;
      }
      uint64_t v97 = &v247[v96];
      unint64_t v98 = v248 - v96;
      if (v248 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v248 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v177;
      uint64_t v10 = v185;
      uint64_t v8 = v194;
      uint64_t v6 = v204;
      uint64_t v4 = v215;
      uint64_t v2 = v227;
      a1 = v240;
    }
  }
  uint64_t v14 = v13[320];
  char v15 = &unk_267771000;
  {
    uint64_t v228 = v2;
    uint64_t v241 = a1;
    uint64_t v205 = v6;
    uint64_t v216 = v4;
    uint64_t v186 = v10;
    uint64_t v195 = v8;
    uint64_t v171 = v14;
    uint64_t v178 = v12;
    char v15 = (void *)&unk_267771000;
    uint64_t v14 = v171;
    uint64_t v12 = v178;
    uint64_t v10 = v186;
    uint64_t v8 = v195;
    uint64_t v6 = v205;
    uint64_t v4 = v216;
    int v103 = v102;
    uint64_t v2 = v228;
    a1 = v241;
    if (v103)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v248 = 95;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v248;
      }
      unint64_t v106 = &v247[v105];
      unint64_t v107 = v248 - v105;
      if (v248 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v248 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      char v15 = (void *)&unk_267771000;
      uint64_t v14 = v171;
      uint64_t v12 = v178;
      uint64_t v10 = v186;
      uint64_t v8 = v195;
      uint64_t v6 = v205;
      uint64_t v4 = v216;
      uint64_t v2 = v228;
      a1 = v241;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v229 = v2;
    uint64_t v242 = a1;
    uint64_t v206 = v6;
    uint64_t v217 = v4;
    uint64_t v187 = v10;
    uint64_t v196 = v8;
    uint64_t v172 = v14;
    uint64_t v179 = v12;
    uint64_t v166 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v166;
    uint64_t v14 = v172;
    uint64_t v12 = v179;
    uint64_t v10 = v187;
    uint64_t v8 = v196;
    uint64_t v6 = v206;
    uint64_t v4 = v217;
    int v112 = v111;
    uint64_t v2 = v229;
    a1 = v242;
    if (v112)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v248 = 99;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v248;
      }
      uint64_t v115 = &v247[v114];
      unint64_t v116 = v248 - v114;
      if (v248 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v248 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v166;
      uint64_t v14 = v172;
      uint64_t v12 = v179;
      uint64_t v10 = v187;
      uint64_t v8 = v196;
      uint64_t v6 = v206;
      uint64_t v4 = v217;
      uint64_t v2 = v229;
      a1 = v242;
    }
  }
  uint64_t v18 = v17[324];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v230 = v2;
    uint64_t v243 = a1;
    uint64_t v207 = v6;
    uint64_t v218 = v4;
    uint64_t v188 = v10;
    uint64_t v197 = v8;
    uint64_t v173 = v14;
    uint64_t v180 = v12;
    uint64_t v162 = v18;
    uint64_t v167 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v162;
    uint64_t v16 = v167;
    uint64_t v14 = v173;
    uint64_t v12 = v180;
    uint64_t v10 = v188;
    uint64_t v8 = v197;
    uint64_t v6 = v207;
    uint64_t v4 = v218;
    int v121 = v120;
    uint64_t v2 = v230;
    a1 = v243;
    if (v121)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v248 = 93;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v248;
      }
      uint64_t v124 = &v247[v123];
      unint64_t v125 = v248 - v123;
      if (v248 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v248 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v162;
      uint64_t v16 = v167;
      uint64_t v14 = v173;
      uint64_t v12 = v180;
      uint64_t v10 = v188;
      uint64_t v8 = v197;
      uint64_t v6 = v207;
      uint64_t v4 = v218;
      uint64_t v2 = v230;
      a1 = v243;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v231 = v2;
    uint64_t v244 = a1;
    uint64_t v208 = v6;
    uint64_t v219 = v4;
    uint64_t v189 = v10;
    uint64_t v198 = v8;
    uint64_t v174 = v14;
    uint64_t v181 = v12;
    uint64_t v163 = v18;
    uint64_t v168 = v16;
    uint64_t v159 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v159;
    uint64_t v18 = v163;
    uint64_t v16 = v168;
    uint64_t v14 = v174;
    uint64_t v12 = v181;
    uint64_t v10 = v189;
    uint64_t v8 = v198;
    uint64_t v6 = v208;
    uint64_t v4 = v219;
    int v130 = v129;
    uint64_t v2 = v231;
    a1 = v244;
    if (v130)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v248 = 83;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v248;
      }
      uint64_t v133 = &v247[v132];
      unint64_t v134 = v248 - v132;
      if (v248 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v248 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v159;
      uint64_t v18 = v163;
      uint64_t v16 = v168;
      uint64_t v14 = v174;
      uint64_t v12 = v181;
      uint64_t v10 = v189;
      uint64_t v8 = v198;
      uint64_t v6 = v208;
      uint64_t v4 = v219;
      uint64_t v2 = v231;
      a1 = v244;
    }
  }
  uint64_t v22 = v21[332];
  long long v23 = &unk_267771000;
  {
    uint64_t v232 = v2;
    uint64_t v245 = a1;
    uint64_t v209 = v6;
    uint64_t v220 = v4;
    uint64_t v190 = v10;
    uint64_t v199 = v8;
    uint64_t v175 = v14;
    uint64_t v182 = v12;
    uint64_t v164 = v18;
    uint64_t v169 = v16;
    uint64_t v157 = v22;
    uint64_t v160 = v20;
    long long v23 = (void *)&unk_267771000;
    uint64_t v22 = v157;
    uint64_t v20 = v160;
    uint64_t v18 = v164;
    uint64_t v16 = v169;
    uint64_t v14 = v175;
    uint64_t v12 = v182;
    uint64_t v10 = v190;
    uint64_t v8 = v199;
    uint64_t v6 = v209;
    uint64_t v4 = v220;
    int v139 = v138;
    uint64_t v2 = v232;
    a1 = v245;
    if (v139)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      unint64_t v248 = 99;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v248;
      }
      uint64_t v142 = &v247[v141];
      unint64_t v143 = v248 - v141;
      if (v248 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v248 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      long long v23 = (void *)&unk_267771000;
      uint64_t v22 = v157;
      uint64_t v20 = v160;
      uint64_t v18 = v164;
      uint64_t v16 = v169;
      uint64_t v14 = v175;
      uint64_t v12 = v182;
      uint64_t v10 = v190;
      uint64_t v8 = v199;
      uint64_t v6 = v209;
      uint64_t v4 = v220;
      uint64_t v2 = v232;
      a1 = v245;
    }
  }
  uint64_t v24 = v23[326];
  int v25 = &unk_267771000;
  {
    uint64_t v233 = v2;
    uint64_t v246 = a1;
    uint64_t v210 = v6;
    uint64_t v221 = v4;
    uint64_t v191 = v10;
    uint64_t v200 = v8;
    uint64_t v176 = v14;
    uint64_t v183 = v12;
    uint64_t v165 = v18;
    uint64_t v170 = v16;
    uint64_t v158 = v22;
    uint64_t v161 = v20;
    uint64_t v156 = v24;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v156;
    uint64_t v22 = v158;
    uint64_t v20 = v161;
    uint64_t v18 = v165;
    uint64_t v16 = v170;
    uint64_t v14 = v176;
    uint64_t v12 = v183;
    uint64_t v10 = v191;
    uint64_t v8 = v200;
    uint64_t v6 = v210;
    uint64_t v4 = v221;
    int v148 = v147;
    uint64_t v2 = v233;
    a1 = v246;
    if (v148)
    {
      int v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v248 = 90;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v248;
      }
      uint64_t v151 = &v247[v150];
      unint64_t v152 = v248 - v150;
      if (v248 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v248 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v156;
      uint64_t v22 = v158;
      uint64_t v20 = v161;
      uint64_t v18 = v165;
      uint64_t v16 = v170;
      uint64_t v14 = v176;
      uint64_t v12 = v183;
      uint64_t v10 = v191;
      uint64_t v8 = v200;
      uint64_t v6 = v210;
      uint64_t v4 = v221;
      uint64_t v2 = v233;
      a1 = v246;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v25[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v8 = a1, mlir::complex::AbsOp::verifyInvariantsImpl((mlir::complex::AbsOp *)&v8)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::AbsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.add", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::AddOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BC30;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::AddOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::AddOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AddOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AddOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::AddOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AddOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::AddOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.add";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::AddOp::fold(&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v259 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      unint64_t v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      unint64_t v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<Empty>]";
      unint64_t v274 = 111;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      unint64_t v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[503];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      unint64_t v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v274 = 90;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      unint64_t v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      unint64_t v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      unint64_t v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      unint64_t v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      unint64_t v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[324];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      unint64_t v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v274 = 97;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      unint64_t v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[328];
  long long v23 = &unk_267771000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    long long v23 = (void *)&unk_267771000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v274 = 83;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      unint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      long long v23 = (void *)&unk_267771000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[332];
  int v25 = &unk_267771000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      unint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[326];
  uint64_t v27 = &unk_267771000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    uint64_t v27 = (void *)&unk_267771000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v274 = 90;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      uint64_t v27 = (void *)&unk_267771000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::AddOp>,mlir::OpTrait::OneResult<mlir::complex::AddOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::AddOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::AddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::AddOp>,mlir::OpTrait::OpInvariants<mlir::complex::AddOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::AddOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::AddOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::AddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::AddOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::AddOp>,mlir::OpTrait::Elementwise<mlir::complex::AddOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::AddOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::AddOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::AddOp>,mlir::OpTrait::OneResult<mlir::complex::AddOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::AddOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::AddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::AddOp>,mlir::OpTrait::OpInvariants<mlir::complex::AddOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::AddOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::AddOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::AddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::AddOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::AddOp>,mlir::OpTrait::Elementwise<mlir::complex::AddOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::AddOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::AddOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::complex::AddOp::verifyInvariantsImpl((mlir::complex::AddOp *)&v8))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AngleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.angle", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::AngleOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C7E8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::AngleOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::AngleOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AngleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AngleOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::AngleOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::AngleOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::AngleOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::AngleOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.angle";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v8 = a1, mlir::complex::AbsOp::verifyInvariantsImpl((mlir::complex::AbsOp *)&v8)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::AngleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Atan2Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.atan2", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::Atan2Op,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C8B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::Atan2Op::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::Atan2Op>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Atan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Atan2Op>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Atan2Op>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::Atan2Op>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Atan2Op>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::Atan2Op>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.atan2";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::AddOp>,mlir::OpTrait::OneResult<mlir::complex::AddOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::AddOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::AddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::AddOp>,mlir::OpTrait::OpInvariants<mlir::complex::AddOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::AddOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::AddOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::AddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::AddOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::AddOp>,mlir::OpTrait::Elementwise<mlir::complex::AddOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::AddOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::AddOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::Atan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::BitcastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      int64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::BitcastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::BitcastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::BitcastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::BitcastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::BitcastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::BitcastOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::complex::BitcastOp::verifyInvariantsImpl((mlir::complex::BitcastOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::complex::BitcastOp::verify((mlir::complex::BitcastOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::complex::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConjOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.conj", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ConjOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C4C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::ConjOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConjOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConjOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConjOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConjOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ConjOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ConjOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ConjOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.conj";
  v16[1] = 12;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::ConjOpGenericAdaptorBase::ConjOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::ConjOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v259 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      unint64_t v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      unint64_t v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<Empty>]";
      unint64_t v274 = 111;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      unint64_t v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[503];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      unint64_t v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v274 = 82;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      unint64_t v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      unint64_t v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      unint64_t v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v274 = 97;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      unint64_t v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[328];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      unint64_t v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[322];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      unint64_t v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[324];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      unint64_t v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v274 = 83;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      unint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[332];
  int v25 = &unk_267771000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      unint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[326];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v274 = 90;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v9 = a1, mlir::complex::ConjOp::verifyInvariantsImpl((mlir::complex::ConjOp *)&v9))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v6))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::ConjOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.constant", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B848;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::ConstantOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::ConstantOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::complex::ConstantOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::ConstantOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::complex::ConstantOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::complex::ConstantOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ConstantOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConstantOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ConstantOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::complex::ConstantOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::complex::ConstantOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::ConstantOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    char v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<Empty>]";
      unint64_t v223 = 111;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[503];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267770000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v223 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267770000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267770000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      unint64_t v223 = 84;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267770000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[387];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[322];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[324];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      unint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[350] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::ConstantOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::complex::ConstantOp::verifyInvariantsImpl((mlir::complex::ConstantOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::complex::ConstantOp::verify((mlir::complex::ConstantOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::complex::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CosOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.cos", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::CosOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BCF8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::CosOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::CosOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CosOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CosOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::CosOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::CosOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::CosOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.cos";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::CosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::CreateOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      int64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::CreateOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CreateOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CreateOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::CreateOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CreateOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CreateOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::CreateOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::CreateOpGenericAdaptorBase::CreateOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::CreateOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      uint64_t v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<Empty>]";
      unint64_t v154 = 111;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      unint64_t v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[503];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      unint64_t v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v154 = 90;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      unint64_t v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      unint64_t v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      unint64_t v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      unint64_t v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      unint64_t v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::complex::CreateOp::verifyInvariantsImpl((mlir::complex::CreateOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::complex::CreateOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::DivOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.div", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::DivOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BDC0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::DivOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::DivOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::DivOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::DivOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::DivOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::DivOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::DivOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::DivOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.div";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::AddOp>,mlir::OpTrait::OneResult<mlir::complex::AddOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::AddOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::AddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::AddOp>,mlir::OpTrait::OpInvariants<mlir::complex::AddOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::AddOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::AddOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::AddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::AddOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::AddOp>,mlir::OpTrait::Elementwise<mlir::complex::AddOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::AddOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::AddOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::DivOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::EqualOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.eq", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::EqualOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C978;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::EqualOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::EqualOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::EqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::EqualOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::EqualOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::complex::EqualOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::EqualOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::EqualOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::EqualOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::complex::EqualOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.eq";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl<Empty>]";
      unint64_t v199 = 111;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[7];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      int v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v199 = 90;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      int v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[89];
  char v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    char v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      char v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      uint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[31];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v199 = 83;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      uint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[332];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v199 = 90;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::MulSIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::EqualOp>,mlir::OpTrait::OneResult<mlir::complex::EqualOp>,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl<mlir::complex::EqualOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::EqualOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::EqualOp>,mlir::OpTrait::OpInvariants<mlir::complex::EqualOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::EqualOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::EqualOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::EqualOp>,mlir::OpTrait::Elementwise<mlir::complex::EqualOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::EqualOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::EqualOp>,mlir::OpTrait::OneResult<mlir::complex::EqualOp>,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl<mlir::complex::EqualOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::EqualOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::EqualOp>,mlir::OpTrait::OpInvariants<mlir::complex::EqualOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::EqualOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::EqualOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::EqualOp>,mlir::OpTrait::Elementwise<mlir::complex::EqualOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::EqualOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v7 = a1, mlir::complex::EqualOp::verifyInvariantsImpl((mlir::complex::EqualOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::EqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ExpOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.exp", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ExpOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BE88;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::ExpOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ExpOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ExpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ExpOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ExpOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ExpOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ExpOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ExpOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.exp";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::ExpOpGenericAdaptorBase::ExpOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::ExpOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::ExpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Expm1Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.expm1", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::Expm1Op,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37CA40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::Expm1Op::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::Expm1Op>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Expm1Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Expm1Op>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Expm1Op>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::Expm1Op>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Expm1Op>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::Expm1Op>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.expm1";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::Expm1Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ImOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.im", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ImOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B9D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::ImOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ImOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ImOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ImOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ImOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ImOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ImOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ImOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.im";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::ImOpGenericAdaptorBase::ImOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::ImOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v8 = a1, mlir::complex::AbsOp::verifyInvariantsImpl((mlir::complex::AbsOp *)&v8)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::ImOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Log1pOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.log1p", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::Log1pOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37CB08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::Log1pOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::Log1pOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Log1pOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Log1pOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::Log1pOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::Log1pOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::Log1pOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::Log1pOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.log1p";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::Log1pOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::LogOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.log", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::LogOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BF50;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::LogOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::LogOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::LogOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::LogOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::LogOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::LogOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::LogOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::LogOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.log";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::LogOpGenericAdaptorBase::LogOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::LogOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::LogOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::MulOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.mul", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::MulOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C018;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::MulOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::MulOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::MulOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::MulOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::MulOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::MulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::MulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::MulOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.mul";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::MulOpGenericAdaptorBase::MulOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::MulOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::AddOp>,mlir::OpTrait::OneResult<mlir::complex::AddOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::AddOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::AddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::AddOp>,mlir::OpTrait::OpInvariants<mlir::complex::AddOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::AddOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::AddOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::AddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::AddOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::AddOp>,mlir::OpTrait::Elementwise<mlir::complex::AddOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::AddOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::AddOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::MulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NegOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.neg", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C0E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::NegOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::NegOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NegOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NegOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NegOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::NegOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NegOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::NegOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.neg";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::NegOpGenericAdaptorBase::NegOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::NegOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::NegOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NotEqualOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.neq", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::NotEqualOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B910;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::NotEqualOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::NotEqualOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NotEqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NotEqualOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::NotEqualOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::complex::EqualOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::NotEqualOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::NotEqualOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::NotEqualOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::complex::EqualOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.neq";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::MulSIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::EqualOp>,mlir::OpTrait::OneResult<mlir::complex::EqualOp>,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl<mlir::complex::EqualOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::EqualOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::EqualOp>,mlir::OpTrait::OpInvariants<mlir::complex::EqualOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::EqualOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::EqualOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::EqualOp>,mlir::OpTrait::Elementwise<mlir::complex::EqualOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::EqualOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::NotEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IntegerType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::PowOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.pow", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::PowOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C1A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::PowOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::PowOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::PowOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::PowOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::PowOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::PowOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::PowOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::PowOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.pow";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::AddOp>,mlir::OpTrait::OneResult<mlir::complex::AddOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::AddOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::AddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::complex::AddOp>,mlir::OpTrait::OpInvariants<mlir::complex::AddOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::AddOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::AddOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::AddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::AddOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::AddOp>,mlir::OpTrait::Elementwise<mlir::complex::AddOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::AddOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::AddOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::PowOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ReOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.re", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ReOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37BAA0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::ReOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::ReOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ReOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ReOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::ReOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ReOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::ReOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::ReOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::complex::AbsOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.re";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::complex::detail::ReOpGenericAdaptorBase::ReOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::complex::ReOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v8 = a1, mlir::complex::AbsOp::verifyInvariantsImpl((mlir::complex::AbsOp *)&v8)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::complex::ReOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::FloatType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::RsqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.rsqrt", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::RsqrtOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37CBD0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::RsqrtOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::RsqrtOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::RsqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::RsqrtOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::RsqrtOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::RsqrtOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::RsqrtOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::RsqrtOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.rsqrt";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::RsqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SignOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.sign", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::SignOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C590;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::SignOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SignOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SignOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SignOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SignOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::SignOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SignOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::SignOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.sign";
  v16[1] = 12;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::SignOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.sin", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::SinOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C270;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::SinOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SinOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SinOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SinOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::SinOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SinOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::SinOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.sin";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::SinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.sqrt", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::SqrtOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C658;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::SqrtOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SqrtOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SqrtOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SqrtOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::SqrtOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SqrtOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::complex::SqrtOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "complex.sqrt";
  v16[1] = 12;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::complex::AbsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::complex::ConjOp>,mlir::OpTrait::OneResult<mlir::complex::ConjOp>,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl<mlir::complex::ConjOp>,mlir::OpTrait::ZeroSuccessors<mlir::complex::ConjOp>,mlir::OpTrait::OneOperand<mlir::complex::ConjOp>,mlir::OpTrait::OpInvariants<mlir::complex::ConjOp>,mlir::BytecodeOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::complex::ConjOp>,mlir::ConditionallySpeculatable::Trait<mlir::complex::ConjOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::complex::ConjOp>,mlir::MemoryEffectOpInterface::Trait<mlir::complex::ConjOp>,mlir::OpTrait::Elementwise<mlir::complex::ConjOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::complex::ConjOp>,mlir::InferTypeOpInterface::Trait<mlir::complex::ConjOp>>(a1, a2);
}

BOOL mlir::Op<mlir::complex::SqrtOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SubOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"complex.sub", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37C338;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::complex::SubOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::complex::SubOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ComplexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Elementwise,mlir::arith::ArithFastMathInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::complex::SubOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SubOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SubOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::complex::SubOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SubOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::complex::SubOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}