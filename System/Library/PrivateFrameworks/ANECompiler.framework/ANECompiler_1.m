char *std::vector<operations_research::glop::SparseColumn>::__push_back_slow_path<operations_research::glop::SparseColumn>(void **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  long long v15;
  long long v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    v6 = 0x555555555555555;
  }
  else {
    v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v9 = &v7[48 * v6];
  v10 = *a2;
  *a2 = 0;
  *(void *)v8 = v10;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 3);
  v8[40] = *((unsigned char *)a2 + 40);
  v11 = v8 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_20;
  }
  do
  {
    v14 = *((void *)v13 - 6);
    v13 -= 48;
    *(void *)v13 = 0;
    *((void *)v8 - 6) = v14;
    v8 -= 48;
    v15 = *(_OWORD *)(v13 + 8);
    v16 = *(_OWORD *)(v13 + 24);
    v8[40] = v13[40];
    *(_OWORD *)(v8 + 24) = v16;
    *(_OWORD *)(v8 + 8) = v15;
  }
  while (v13 != v12);
  v17 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v17)
  {
    do
    {
      v19 = *((void *)v13 - 6);
      v13 -= 48;
      v18 = v19;
      *(void *)v13 = 0;
      if (v19) {
        MEMORY[0x23ECF2BA0](v18, 0x1000C8077774924);
      }
    }
    while (v13 != v17);
    v13 = v17;
  }
  if (v13) {
LABEL_20:
  }
    operator delete(v13);
  return v11;
}

void InitDefaultsscc_info_GlopParameters_ortools_2fglop_2fparameters_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/glop/parameters.pb.cc", a4);
  qword_26AEE1ED8 = 0;
  qword_26AEE1ED0 = 0;
  operations_research::glop::_GlopParameters_default_instance_ = (uint64_t)&unk_26F0BCF08;
  *(uint64_t *)((char *)&qword_26AEE1ED8 + 7) = 0;
  qword_26AEE1EE8 = 0x100000001;
  dword_26AEE1EF0 = 1;
  xmmword_26AEE1EF8 = xmmword_23CE7EEA0;
  unk_26AEE1F08 = xmmword_23CE7EEB0;
  xmmword_26AEE1F18 = xmmword_23CE7EEC0;
  qword_26AEE1F28 = 0x201010101;
  *(_OWORD *)algn_26AEE1F30 = xmmword_23CE7EED0;
  qword_26AEE1F40 = 0x3EB0C6F7A0B5ED8DLL;
  qword_26AEE1F48 = 0x200000040;
  unk_26AEE1F50 = xmmword_23CE7EEE0;
  unk_26AEE1F60 = xmmword_23CE7EEF0;
  qword_26AEE1F70 = -1;
  unk_26AEE1F78 = 0x3CD203AF9EE75616;
  qword_26AEE1F80 = 0x9600000003;
  dword_26AEE1F88 = 16843009;
  word_26AEE1F8C = 257;
  unk_26AEE1F90 = xmmword_23CE7EF00;
  unk_26AEE1FA0 = xmmword_23CE7EF10;
  qword_26AEE1FB0 = 0x3F847AE147AE147BLL;
  qword_26AEE1FB8 = 0x100000001;
  unk_26AEE1FC0 = xmmword_23CE7EF20;
  xmmword_26AEE1FD0 = xmmword_23CE7EF30;
  unk_26AEE1FE0 = xmmword_23CE7EF40;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::glop::_GlopParameters_default_instance_, v4);
}

uint64_t operations_research::glop::GlopParameters_PricingRule_descriptor(operations_research::glop *this)
{
  return qword_268BCC648;
}

double operations_research::glop::GlopParameters::GlopParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26F0BCF08;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 23) = 0;
  *(void *)(a1 + 32) = 0x100000001;
  *(_DWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_23CE7EEA0;
  *(_OWORD *)(a1 + 64) = xmmword_23CE7EEB0;
  *(_OWORD *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = xmmword_23CE7EEC0;
  *(void *)(a1 + 96) = 0x201010101;
  *(_OWORD *)(a1 + 104) = xmmword_23CE7EED0;
  *(void *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0x3EB0C6F7A0B5ED8DLL;
  *(void *)(a1 + 128) = 0x200000040;
  *(_OWORD *)(a1 + 136) = xmmword_23CE7EEE0;
  *(_OWORD *)(a1 + 152) = xmmword_23CE7EEF0;
  *(void *)(a1 + 168) = -1;
  *(void *)(a1 + 176) = 0x3CD203AF9EE75616;
  *(void *)(a1 + 184) = 0x9600000003;
  *(_WORD *)(a1 + 196) = 257;
  *(_DWORD *)(a1 + 192) = 16843009;
  *(_OWORD *)(a1 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = xmmword_23CE7EF00;
  *(_OWORD *)(a1 + 216) = xmmword_23CE7EF10;
  *(void *)(a1 + 232) = 0x3F847AE147AE147BLL;
  *(void *)(a1 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0x100000001;
  *(_OWORD *)(a1 + 248) = xmmword_23CE7EF20;
  *(void *)(a1 + 264) = 0x3EE4F8B588E368F1;
  double result = 0.0000001;
  *(_OWORD *)(a1 + 272) = xmmword_23CE7EF50;
  *(void *)(a1 + 288) = 0x4A511B0EC57E649ALL;
  return result;
}

operations_research::glop::GlopParameters *operations_research::glop::GlopParameters::GlopParameters(operations_research::glop::GlopParameters *this, const operations_research::glop::GlopParameters *a2)
{
  *((void *)this + 1) = 0;
  v4 = (unint64_t *)((char *)this + 8);
  *(void *)this = &unk_26F0BCF08;
  *((void *)this + 2) = *((void *)a2 + 2);
  *((_DWORD *)this + 6) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v7, v6);
  }
  memcpy((char *)this + 28, (char *)a2 + 28, 0x10CuLL);
  return this;
}

void operations_research::glop::GlopParameters::~GlopParameters(operations_research::glop::GlopParameters *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        uint64_t v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(void *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x23ECF2BC0](v2, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t vars8;

  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        uint64_t v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(void *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x23ECF2BC0](v2, 0x20C40DC1BFBCFLL);
    }
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::glop::GlopParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void operations_research::glop::GlopParameters::Clear(operations_research::glop::GlopParameters *this)
{
  *((unsigned char *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((_WORD *)this + 14) = 0;
  unsigned int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0xF8) != 0)
  {
    *((void *)this + 4) = 0x100000001;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
    *((_OWORD *)this + 3) = xmmword_23CE7EEA0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *((_OWORD *)this + 4) = xmmword_23CE7EEB0;
    *((_OWORD *)this + 5) = xmmword_23CE7EEC0;
    *((_DWORD *)this + 24) = 16843009;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 25) = 2;
    *(_OWORD *)((char *)this + 104) = xmmword_23CE7EED0;
    *((void *)this + 15) = 0x3EB0C6F7A0B5ED8DLL;
    *((void *)this + 16) = 0x200000040;
    *(_OWORD *)((char *)this + 136) = xmmword_23CE7EEE0;
  }
  if (HIBYTE(v1))
  {
    *(_OWORD *)((char *)this + 152) = xmmword_23CE7EEF0;
    *((void *)this + 21) = -1;
    *((void *)this + 22) = 0x3CD203AF9EE75616;
    *((void *)this + 23) = 0x9600000003;
    *((_WORD *)this + 96) = 257;
  }
  int v2 = *((_DWORD *)this + 5);
  if ((_BYTE)v2)
  {
    *(_DWORD *)((char *)this + 194) = 16843009;
    *(_OWORD *)((char *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = xmmword_23CE7EF00;
    *(_OWORD *)((char *)this + 216) = xmmword_23CE7EF10;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *((void *)this + 29) = 0x3F847AE147AE147BLL;
    *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0x100000001;
    *(_OWORD *)((char *)this + 248) = xmmword_23CE7EF20;
    *((void *)this + 33) = 0x3EE4F8B588E368F1;
    *((_OWORD *)this + 17) = xmmword_23CE7EF50;
  }
  *((void *)this + 36) = 0x4A511B0EC57E649ALL;
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 1) != 0 && *(void *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v3 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::glop::GlopParameters::_InternalParse(operations_research::glop::GlopParameters *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  v8 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
          return a2;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
        if (v67) {
          return a2;
        }
      }
      v9 = (char *)a2 + 1;
      unsigned int v10 = *(unsigned __int8 *)a2;
      if (*(char *)a2 < 0) {
        break;
      }
      unsigned int v11 = (v10 >> 3) - 1;
LABEL_7:
      switch(v11)
      {
        case 0u:
          if (v10 != 8) {
            goto LABEL_17;
          }
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          uint64_t v12 = *v9;
          if (*v9 < 0)
          {
            int v37 = v12 + (*(unsigned __int8 *)a2 << 7);
            uint64_t v12 = (v37 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v37 - 128));
              if (!a2) {
                return a2;
              }
              uint64_t v12 = v62;
              if (v62 <= 2)
              {
LABEL_11:
                *((_DWORD *)this + 4) |= 0x10u;
                *((_DWORD *)this + 9) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2) {
                goto LABEL_11;
              }
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_11;
          }
          if (*v8) {
            v38 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v38 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          }
          unsigned int v39 = 1;
          goto LABEL_210;
        case 1u:
          if (v10 != 16) {
            goto LABEL_17;
          }
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          uint64_t v12 = *v9;
          if (*v9 < 0)
          {
            int v40 = v12 + (*(unsigned __int8 *)a2 << 7);
            uint64_t v12 = (v40 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v40 - 128));
              if (!a2) {
                return a2;
              }
              uint64_t v12 = v63;
              if (v63 <= 2)
              {
LABEL_27:
                *((_DWORD *)this + 4) |= 0x20u;
                *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2) {
                goto LABEL_27;
              }
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_27;
          }
          if (*v8) {
            v38 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v38 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          }
          unsigned int v39 = 2;
          goto LABEL_210;
        case 3u:
          if (v10 != 32) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x1000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v17 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_32;
          }
          unint64_t v17 = v17 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v17);
            *((unsigned char *)this + 96) = v44 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_32:
            *((unsigned char *)this + 96) = v17 != 0;
          }
          continue;
        case 4u:
          if (v10 != 40) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x2000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v18 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_37;
          }
          unint64_t v18 = v18 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v18);
            *((unsigned char *)this + 97) = v45 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_37:
            *((unsigned char *)this + 97) = v18 != 0;
          }
          continue;
        case 5u:
          if (v10 != 49) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x40u;
          *((void *)this + 6) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 7u:
          if (v10 != 65) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x80u;
          *((void *)this + 7) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 8u:
          if (v10 != 73) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x100u;
          *((void *)this + 8) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 9u:
          if (v10 != 81) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x200u;
          *((void *)this + 9) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xAu:
          if (v10 != 89) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x400u;
          *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xBu:
          if (v10 != 97) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x800u;
          *((void *)this + 11) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xCu:
          if (v10 != 105) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x20000u;
          *((void *)this + 13) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xDu:
          if (v10 != 113) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x40000u;
          *((void *)this + 14) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xEu:
          if (v10 != 121) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x80000u;
          *((void *)this + 15) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xFu:
          if (v10 != 128) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x4000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v19 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          unint64_t v19 = v19 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v19);
            *((unsigned char *)this + 98) = v46 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_60:
            *((unsigned char *)this + 98) = v19 != 0;
          }
          continue;
        case 0x10u:
          if (v10 != 136) {
            goto LABEL_17;
          }
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          uint64_t v12 = *v9;
          if (*v9 < 0)
          {
            int v41 = v12 + (*(unsigned __int8 *)a2 << 7);
            uint64_t v12 = (v41 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v41 - 128));
              if (!a2) {
                return a2;
              }
              uint64_t v12 = v64;
              if (v64 <= 3)
              {
LABEL_64:
                *((_DWORD *)this + 4) |= 0x10000u;
                *((_DWORD *)this + 25) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 3) {
                goto LABEL_64;
              }
            }
          }
          else if (v12 <= 3)
          {
            goto LABEL_64;
          }
          if (*v8) {
            v38 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v38 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          }
          unsigned int v39 = 17;
          goto LABEL_210;
        case 0x11u:
          if (v10 != 144) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x8000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v20 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_69;
          }
          unint64_t v20 = v20 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v20);
            *((unsigned char *)this + 99) = v47 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_69:
            *((unsigned char *)this + 99) = v20 != 0;
          }
          continue;
        case 0x12u:
          if (v10 != 152) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x100000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v21) = *v9;
          if ((v21 & 0x80) == 0) {
            goto LABEL_74;
          }
          v21 = (const char *)(v21 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v21);
            *((_DWORD *)this + 32) = v48;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_74:
            *((_DWORD *)this + 32) = v21;
          }
          continue;
        case 0x13u:
          if (v10 != 160) {
            goto LABEL_17;
          }
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          uint64_t v12 = *v9;
          if (*v9 < 0)
          {
            int v42 = v12 + (*(unsigned __int8 *)a2 << 7);
            uint64_t v12 = (v42 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v42 - 128));
              if (!a2) {
                return a2;
              }
              uint64_t v12 = v65;
              if (v65 <= 2)
              {
LABEL_78:
                *((_DWORD *)this + 4) |= 0x200000u;
                *((_DWORD *)this + 33) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2) {
                goto LABEL_78;
              }
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_78;
          }
          if (*v8) {
            v38 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v38 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          }
          unsigned int v39 = 20;
          goto LABEL_210;
        case 0x14u:
          if (v10 != 169) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x400000u;
          *((void *)this + 17) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x15u:
          if (v10 != 177) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x800000u;
          *((void *)this + 18) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x17u:
          if (v10 != 192) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 1u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v22 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_87;
          }
          unint64_t v22 = v22 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v22);
            *((unsigned char *)this + 194) = v49 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_87:
            *((unsigned char *)this + 194) = v22 != 0;
          }
          continue;
        case 0x18u:
          if (v10 != 201) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x1000000u;
          *((void *)this + 19) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x19u:
          if (v10 != 209) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x2000000u;
          *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x1Au:
          if (v10 != 216) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x4000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v23 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_96;
          }
          unint64_t v23 = v23 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v23);
            *((void *)this + 21) = v50;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_96:
            *((void *)this + 21) = v23;
          }
          continue;
        case 0x1Cu:
          if (v10 != 232) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x10000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v24) = *v9;
          if ((v24 & 0x80) == 0) {
            goto LABEL_101;
          }
          v24 = (const char *)(v24 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v24);
            *((_DWORD *)this + 46) = v51;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_101:
            *((_DWORD *)this + 46) = v24;
          }
          continue;
        case 0x1Du:
          if (v10 != 241) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x8000000u;
          *((void *)this + 22) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x1Eu:
          if (v10 != 248) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 1u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v25 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_108;
          }
          unint64_t v25 = v25 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v25);
            *((unsigned char *)this + 28) = v52 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_108:
            *((unsigned char *)this + 28) = v25 != 0;
          }
          continue;
        case 0x1Fu:
          if ((_BYTE)v10) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 2u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v26 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_113;
          }
          unint64_t v26 = v26 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v26);
            *((unsigned char *)this + 29) = v53 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_113:
            *((unsigned char *)this + 29) = v26 != 0;
          }
          continue;
        case 0x20u:
          if (v10 != 8) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x20000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v27) = *v9;
          if ((v27 & 0x80) == 0) {
            goto LABEL_118;
          }
          v27 = (const char *)(v27 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v27);
            *((_DWORD *)this + 47) = v54;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_118:
            *((_DWORD *)this + 47) = v27;
          }
          continue;
        case 0x21u:
          if (v10 != 16) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 4u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v28 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_123;
          }
          unint64_t v28 = v28 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v28);
            *((unsigned char *)this + 196) = v55 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_123:
            *((unsigned char *)this + 196) = v28 != 0;
          }
          continue;
        case 0x22u:
          if (v10 != 24) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 8u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v29 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_128;
          }
          unint64_t v29 = v29 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v29);
            *((unsigned char *)this + 197) = v56 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_128:
            *((unsigned char *)this + 197) = v29 != 0;
          }
          continue;
        case 0x23u:
          if (v10 != 32) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x40000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v30 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_133;
          }
          unint64_t v30 = v30 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v30);
            *((unsigned char *)this + 192) = v57 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_133:
            *((unsigned char *)this + 192) = v30 != 0;
          }
          continue;
        case 0x24u:
          if (v10 != 40) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 0x80000000;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v31 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_138;
          }
          unint64_t v31 = v31 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v31);
            *((unsigned char *)this + 193) = v58 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_138:
            *((unsigned char *)this + 193) = v31 != 0;
          }
          continue;
        case 0x25u:
          if (v10 != 49) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x10u;
          *((void *)this + 25) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x26u:
          if (v10 != 57) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x20u;
          *((void *)this + 26) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x27u:
          if (v10 != 65) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x40u;
          *((void *)this + 27) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x28u:
          if (v10 != 73) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x80u;
          *((void *)this + 28) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x29u:
          if (v10 != 81) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x100u;
          *((void *)this + 29) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x2Au:
          if (v10 != 88) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x200u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v32) = *v9;
          if ((v32 & 0x80) == 0) {
            goto LABEL_153;
          }
          v32 = (const char *)(v32 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v32);
            *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v59;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_153:
            *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v32;
          }
          continue;
        case 0x2Bu:
          if (v10 != 96) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x400u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v33) = *v9;
          if ((v33 & 0x80) == 0) {
            goto LABEL_3;
          }
          v33 = (const char *)(v33 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v33);
            *((_DWORD *)this + 61) = v34;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_3:
            *((_DWORD *)this + 61) = v33;
          }
          continue;
        case 0x2Cu:
          if (v10 != 105) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x800u;
          *((void *)this + 31) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x33u:
          if (v10 != 161) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x1000u;
          *((void *)this + 32) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x34u:
          if (v10 != 168) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 4) |= 4u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v35 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_167;
          }
          unint64_t v35 = v35 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v35);
            *((unsigned char *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v60 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_167:
            *((unsigned char *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v35 != 0;
          }
          continue;
        case 0x35u:
          if (v10 != 177) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x2000u;
          *((void *)this + 33) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x36u:
          if (v10 != 185) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x4000u;
          *((void *)this + 34) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x37u:
          if (v10 != 193) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x8000u;
          *((void *)this + 35) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x38u:
          if (v10 != 200) {
            goto LABEL_17;
          }
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          uint64_t v12 = *v9;
          if (*v9 < 0)
          {
            int v43 = v12 + (*(unsigned __int8 *)a2 << 7);
            uint64_t v12 = (v43 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v43 - 128));
              if (!a2) {
                return a2;
              }
              uint64_t v12 = v66;
              if (v66 <= 2)
              {
LABEL_177:
                *((_DWORD *)this + 4) |= 8u;
                *((_DWORD *)this + 8) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2) {
                goto LABEL_177;
              }
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_177;
          }
          if (*v8) {
            v38 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v38 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          }
          unsigned int v39 = 57;
LABEL_210:
          google::protobuf::UnknownFieldSet::AddVarint((google::protobuf::UnknownFieldSet *)v38, v39, v12);
          break;
        case 0x39u:
          if (v10 != 208) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 2u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          unint64_t v36 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_182;
          }
          unint64_t v36 = v36 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v36);
            *((unsigned char *)this + 195) = v61 != 0;
            if (!a2) {
              return a2;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_182:
            *((unsigned char *)this + 195) = v36 != 0;
          }
          continue;
        case 0x3Au:
          if (v10 != 217) {
            goto LABEL_17;
          }
          *((_DWORD *)this + 5) |= 0x10000u;
          *((void *)this + 36) = *(void *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        default:
          goto LABEL_17;
      }
    }
    unsigned int v13 = v10 + (*v9 << 7);
    unsigned int v10 = v13 - 128;
    if (*v9 < 0) {
      break;
    }
    v9 = (char *)a2 + 2;
    unsigned int v11 = (v10 >> 3) - 1;
    if (v11 <= 0x3A) {
      goto LABEL_7;
    }
LABEL_17:
    if (v10) {
      BOOL v16 = (v10 & 7) == 4;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v10 - 1;
      return (google::protobuf::UnknownFieldSet *)v9;
    }
    if (*v8)
    {
      a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), (google::protobuf::UnknownFieldSet *)v9, (const char *)a3, a5);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      v68 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)v68, (google::protobuf::UnknownFieldSet *)v9, (const char *)a3, v69);
      if (!a2) {
        return a2;
      }
    }
  }
  uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v13 - 128));
  if (TagFallback)
  {
    v9 = (char *)TagFallback;
    unsigned int v10 = v15;
    unsigned int v11 = (v15 >> 3) - 1;
    if (v11 <= 0x3A) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::glop::GlopParameters::_InternalSerialize(operations_research::glop::GlopParameters *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x10) == 0)
  {
    if ((v6 & 0x20) == 0) {
      goto LABEL_3;
    }
LABEL_63:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v19 = *((int *)this + 10);
      *a2 = 16;
      if (v19 <= 0x7F)
      {
LABEL_65:
        a2[1] = v19;
        a2 += 2;
        if ((v6 & 0x1000) != 0) {
          goto LABEL_74;
        }
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v19 = *((int *)this + 10);
      *a2 = 16;
      if (v19 <= 0x7F) {
        goto LABEL_65;
      }
    }
    a2[1] = v19 | 0x80;
    unint64_t v20 = v19 >> 7;
    if (v19 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v20 | 0x80;
        unint64_t v21 = v20 >> 7;
        ++a2;
        unint64_t v22 = v20 >> 14;
        v20 >>= 7;
      }
      while (v22);
      *(a2 - 1) = v21;
      if ((v6 & 0x1000) != 0) {
        goto LABEL_74;
      }
    }
    else
    {
      a2[2] = v20;
      a2 += 3;
      if ((v6 & 0x1000) != 0) {
        goto LABEL_74;
      }
    }
LABEL_4:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_77;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v15 = *((int *)this + 9);
    *a2 = 8;
    if (v15 <= 0x7F)
    {
LABEL_54:
      a2[1] = v15;
      a2 += 2;
      if ((v6 & 0x20) != 0) {
        goto LABEL_63;
      }
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v15 = *((int *)this + 9);
    *a2 = 8;
    if (v15 <= 0x7F) {
      goto LABEL_54;
    }
  }
  a2[1] = v15 | 0x80;
  unint64_t v16 = v15 >> 7;
  if (v15 >> 14)
  {
    a2 += 3;
    do
    {
      *(a2 - 1) = v16 | 0x80;
      unint64_t v17 = v16 >> 7;
      ++a2;
      unint64_t v18 = v16 >> 14;
      v16 >>= 7;
    }
    while (v18);
    *(a2 - 1) = v17;
    if ((v6 & 0x20) != 0) {
      goto LABEL_63;
    }
  }
  else
  {
    a2[2] = v16;
    a2 += 3;
    if ((v6 & 0x20) != 0) {
      goto LABEL_63;
    }
  }
LABEL_3:
  if ((v6 & 0x1000) == 0) {
    goto LABEL_4;
  }
LABEL_74:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v23 = *((unsigned char *)this + 96);
  *a2 = 32;
  a2[1] = v23;
  a2 += 2;
  if ((v6 & 0x2000) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_80;
  }
LABEL_77:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v24 = *((unsigned char *)this + 97);
  *a2 = 40;
  a2[1] = v24;
  a2 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_83;
  }
LABEL_80:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v25 = *((void *)this + 6);
  *a2 = 49;
  *(void *)(a2 + 1) = v25;
  a2 += 9;
  if ((v6 & 0x80) == 0)
  {
LABEL_7:
    if ((v6 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v26 = *((void *)this + 7);
  *a2 = 65;
  *(void *)(a2 + 1) = v26;
  a2 += 9;
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_89;
  }
LABEL_86:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v27 = *((void *)this + 8);
  *a2 = 73;
  *(void *)(a2 + 1) = v27;
  a2 += 9;
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_92;
  }
LABEL_89:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v28 = *((void *)this + 9);
  *a2 = 81;
  *(void *)(a2 + 1) = v28;
  a2 += 9;
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_95;
  }
LABEL_92:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v29 = *((void *)this + 10);
  *a2 = 89;
  *(void *)(a2 + 1) = v29;
  a2 += 9;
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_98;
  }
LABEL_95:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v30 = *((void *)this + 11);
  *a2 = 97;
  *(void *)(a2 + 1) = v30;
  a2 += 9;
  if ((v6 & 0x20000) == 0)
  {
LABEL_12:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_101;
  }
LABEL_98:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v31 = *((void *)this + 13);
  *a2 = 105;
  *(void *)(a2 + 1) = v31;
  a2 += 9;
  if ((v6 & 0x40000) == 0)
  {
LABEL_13:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_104;
  }
LABEL_101:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v32 = *((void *)this + 14);
  *a2 = 113;
  *(void *)(a2 + 1) = v32;
  a2 += 9;
  if ((v6 & 0x80000) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_107;
  }
LABEL_104:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v33 = *((void *)this + 15);
  *a2 = 121;
  *(void *)(a2 + 1) = v33;
  a2 += 9;
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_16;
    }
LABEL_110:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v35 = *((int *)this + 25);
      *(_WORD *)a2 = 392;
      if (v35 <= 0x7F)
      {
LABEL_112:
        a2[2] = v35;
        a2 += 3;
        if ((v6 & 0x8000) != 0) {
          goto LABEL_121;
        }
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v35 = *((int *)this + 25);
      *(_WORD *)a2 = 392;
      if (v35 <= 0x7F) {
        goto LABEL_112;
      }
    }
    a2[2] = v35 | 0x80;
    unint64_t v36 = v35 >> 7;
    if (v35 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v36 | 0x80;
        unint64_t v37 = v36 >> 7;
        ++a2;
        unint64_t v38 = v36 >> 14;
        v36 >>= 7;
      }
      while (v38);
      *(a2 - 1) = v37;
      if ((v6 & 0x8000) != 0) {
        goto LABEL_121;
      }
    }
    else
    {
      a2[3] = v36;
      a2 += 4;
      if ((v6 & 0x8000) != 0) {
        goto LABEL_121;
      }
    }
LABEL_17:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_124;
  }
LABEL_107:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v34 = *((unsigned char *)this + 98);
  *(_WORD *)a2 = 384;
  a2[2] = v34;
  a2 += 3;
  if ((v6 & 0x10000) != 0) {
    goto LABEL_110;
  }
LABEL_16:
  if ((v6 & 0x8000) == 0) {
    goto LABEL_17;
  }
LABEL_121:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v39 = *((unsigned char *)this + 99);
  *(_WORD *)a2 = 400;
  a2[2] = v39;
  a2 += 3;
  if ((v6 & 0x100000) == 0)
  {
LABEL_18:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_19;
    }
LABEL_135:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v44 = *((int *)this + 33);
      *(_WORD *)a2 = 416;
      if (v44 <= 0x7F)
      {
LABEL_137:
        a2[2] = v44;
        a2 += 3;
        if ((v6 & 0x400000) != 0) {
          goto LABEL_146;
        }
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v44 = *((int *)this + 33);
      *(_WORD *)a2 = 416;
      if (v44 <= 0x7F) {
        goto LABEL_137;
      }
    }
    a2[2] = v44 | 0x80;
    unint64_t v45 = v44 >> 7;
    if (v44 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v45 | 0x80;
        unint64_t v46 = v45 >> 7;
        ++a2;
        unint64_t v47 = v45 >> 14;
        v45 >>= 7;
      }
      while (v47);
      *(a2 - 1) = v46;
      if ((v6 & 0x400000) != 0) {
        goto LABEL_146;
      }
    }
    else
    {
      a2[3] = v45;
      a2 += 4;
      if ((v6 & 0x400000) != 0) {
        goto LABEL_146;
      }
    }
LABEL_20:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_149;
  }
LABEL_124:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v40 = *((int *)this + 32);
    *(_WORD *)a2 = 408;
    if (v40 <= 0x7F)
    {
LABEL_126:
      a2[2] = v40;
      a2 += 3;
      if ((v6 & 0x200000) != 0) {
        goto LABEL_135;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v40 = *((int *)this + 32);
    *(_WORD *)a2 = 408;
    if (v40 <= 0x7F) {
      goto LABEL_126;
    }
  }
  a2[2] = v40 | 0x80;
  unint64_t v41 = v40 >> 7;
  if (v40 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v41 | 0x80;
      unint64_t v42 = v41 >> 7;
      ++a2;
      unint64_t v43 = v41 >> 14;
      v41 >>= 7;
    }
    while (v43);
    *(a2 - 1) = v42;
    if ((v6 & 0x200000) != 0) {
      goto LABEL_135;
    }
  }
  else
  {
    a2[3] = v41;
    a2 += 4;
    if ((v6 & 0x200000) != 0) {
      goto LABEL_135;
    }
  }
LABEL_19:
  if ((v6 & 0x400000) == 0) {
    goto LABEL_20;
  }
LABEL_146:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v48 = *((void *)this + 17);
  *(_WORD *)a2 = 425;
  *(void *)(a2 + 2) = v48;
  a2 += 10;
  if ((v6 & 0x800000) == 0)
  {
LABEL_21:
    if ((*((unsigned char *)this + 20) & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_152;
  }
LABEL_149:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v49 = *((void *)this + 18);
  *(_WORD *)a2 = 433;
  *(void *)(a2 + 2) = v49;
  a2 += 10;
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
LABEL_22:
    int v7 = *((_DWORD *)this + 4);
    if ((v7 & 0x1000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_155;
  }
LABEL_152:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v50 = *((unsigned char *)this + 194);
  *(_WORD *)a2 = 448;
  a2[2] = v50;
  a2 += 3;
  int v7 = *((_DWORD *)this + 4);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_158;
  }
LABEL_155:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v51 = *((void *)this + 19);
  *(_WORD *)a2 = 457;
  *(void *)(a2 + 2) = v51;
  a2 += 10;
  if ((v7 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_161;
  }
LABEL_158:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v52 = *((void *)this + 20);
  *(_WORD *)a2 = 465;
  *(void *)(a2 + 2) = v52;
  a2 += 10;
  if ((v7 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_26;
    }
LABEL_172:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v57 = *((int *)this + 46);
      *(_WORD *)a2 = 488;
      if (v57 <= 0x7F)
      {
LABEL_174:
        a2[2] = v57;
        a2 += 3;
        if ((v7 & 0x8000000) != 0) {
          goto LABEL_183;
        }
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v57 = *((int *)this + 46);
      *(_WORD *)a2 = 488;
      if (v57 <= 0x7F) {
        goto LABEL_174;
      }
    }
    a2[2] = v57 | 0x80;
    unint64_t v58 = v57 >> 7;
    if (v57 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v58 | 0x80;
        unint64_t v59 = v58 >> 7;
        ++a2;
        unint64_t v60 = v58 >> 14;
        v58 >>= 7;
      }
      while (v60);
      *(a2 - 1) = v59;
      if ((v7 & 0x8000000) != 0) {
        goto LABEL_183;
      }
    }
    else
    {
      a2[3] = v58;
      a2 += 4;
      if ((v7 & 0x8000000) != 0) {
        goto LABEL_183;
      }
    }
LABEL_27:
    if ((v7 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_186;
  }
LABEL_161:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v53 = *((void *)this + 21);
    *(_WORD *)a2 = 472;
    if (v53 <= 0x7F)
    {
LABEL_163:
      a2[2] = v53;
      a2 += 3;
      if ((v7 & 0x10000000) != 0) {
        goto LABEL_172;
      }
      goto LABEL_26;
    }
  }
  else
  {
    unint64_t v53 = *((void *)this + 21);
    *(_WORD *)a2 = 472;
    if (v53 <= 0x7F) {
      goto LABEL_163;
    }
  }
  a2[2] = v53 | 0x80;
  unint64_t v54 = v53 >> 7;
  if (v53 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v54 | 0x80;
      unint64_t v55 = v54 >> 7;
      ++a2;
      unint64_t v56 = v54 >> 14;
      v54 >>= 7;
    }
    while (v56);
    *(a2 - 1) = v55;
    if ((v7 & 0x10000000) != 0) {
      goto LABEL_172;
    }
  }
  else
  {
    a2[3] = v54;
    a2 += 4;
    if ((v7 & 0x10000000) != 0) {
      goto LABEL_172;
    }
  }
LABEL_26:
  if ((v7 & 0x8000000) == 0) {
    goto LABEL_27;
  }
LABEL_183:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v61 = *((void *)this + 22);
  *(_WORD *)a2 = 497;
  *(void *)(a2 + 2) = v61;
  a2 += 10;
  if ((v7 & 1) == 0)
  {
LABEL_28:
    if ((v7 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_189;
  }
LABEL_186:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v62 = *((unsigned char *)this + 28);
  *(_WORD *)a2 = 504;
  a2[2] = v62;
  a2 += 3;
  if ((v7 & 2) == 0)
  {
LABEL_29:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_30;
    }
LABEL_192:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v64 = *((int *)this + 47);
      *(_WORD *)a2 = 648;
      if (v64 <= 0x7F)
      {
LABEL_194:
        a2[2] = v64;
        a2 += 3;
        int v8 = *((_DWORD *)this + 5);
        if ((v8 & 4) != 0) {
          goto LABEL_203;
        }
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v64 = *((int *)this + 47);
      *(_WORD *)a2 = 648;
      if (v64 <= 0x7F) {
        goto LABEL_194;
      }
    }
    a2[2] = v64 | 0x80;
    unint64_t v65 = v64 >> 7;
    if (v64 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v65 | 0x80;
        unint64_t v66 = v65 >> 7;
        ++a2;
        unint64_t v67 = v65 >> 14;
        v65 >>= 7;
      }
      while (v67);
      *(a2 - 1) = v66;
      int v8 = *((_DWORD *)this + 5);
      if ((v8 & 4) != 0) {
        goto LABEL_203;
      }
    }
    else
    {
      a2[3] = v65;
      a2 += 4;
      int v8 = *((_DWORD *)this + 5);
      if ((v8 & 4) != 0) {
        goto LABEL_203;
      }
    }
LABEL_31:
    if ((v8 & 8) == 0) {
      goto LABEL_32;
    }
    goto LABEL_206;
  }
LABEL_189:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v63 = *((unsigned char *)this + 29);
  *(_WORD *)a2 = 640;
  a2[2] = v63;
  a2 += 3;
  if ((v7 & 0x20000000) != 0) {
    goto LABEL_192;
  }
LABEL_30:
  int v8 = *((_DWORD *)this + 5);
  if ((v8 & 4) == 0) {
    goto LABEL_31;
  }
LABEL_203:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v68 = *((unsigned char *)this + 196);
  *(_WORD *)a2 = 656;
  a2[2] = v68;
  a2 += 3;
  if ((v8 & 8) == 0)
  {
LABEL_32:
    int v9 = *((_DWORD *)this + 4);
    if ((v9 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_209;
  }
LABEL_206:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v69 = *((unsigned char *)this + 197);
  *(_WORD *)a2 = 664;
  a2[2] = v69;
  a2 += 3;
  int v9 = *((_DWORD *)this + 4);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_212;
  }
LABEL_209:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v70 = *((unsigned char *)this + 192);
  *(_WORD *)a2 = 672;
  a2[2] = v70;
  a2 += 3;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_34:
    int v10 = *((_DWORD *)this + 5);
    if ((v10 & 0x10) == 0) {
      goto LABEL_35;
    }
    goto LABEL_215;
  }
LABEL_212:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v71 = *((unsigned char *)this + 193);
  *(_WORD *)a2 = 680;
  a2[2] = v71;
  a2 += 3;
  int v10 = *((_DWORD *)this + 5);
  if ((v10 & 0x10) == 0)
  {
LABEL_35:
    if ((v10 & 0x20) == 0) {
      goto LABEL_36;
    }
    goto LABEL_218;
  }
LABEL_215:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v72 = *((void *)this + 25);
  *(_WORD *)a2 = 689;
  *(void *)(a2 + 2) = v72;
  a2 += 10;
  if ((v10 & 0x20) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_221;
  }
LABEL_218:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v73 = *((void *)this + 26);
  *(_WORD *)a2 = 697;
  *(void *)(a2 + 2) = v73;
  a2 += 10;
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x80) == 0) {
      goto LABEL_38;
    }
    goto LABEL_224;
  }
LABEL_221:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v74 = *((void *)this + 27);
  *(_WORD *)a2 = 705;
  *(void *)(a2 + 2) = v74;
  a2 += 10;
  if ((v10 & 0x80) == 0)
  {
LABEL_38:
    if ((v10 & 0x100) == 0) {
      goto LABEL_39;
    }
    goto LABEL_227;
  }
LABEL_224:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v75 = *((void *)this + 28);
  *(_WORD *)a2 = 713;
  *(void *)(a2 + 2) = v75;
  a2 += 10;
  if ((v10 & 0x100) == 0)
  {
LABEL_39:
    if ((v10 & 0x200) == 0) {
      goto LABEL_40;
    }
    goto LABEL_230;
  }
LABEL_227:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v76 = *((void *)this + 29);
  *(_WORD *)a2 = 721;
  *(void *)(a2 + 2) = v76;
  a2 += 10;
  if ((v10 & 0x200) == 0)
  {
LABEL_40:
    if ((v10 & 0x400) == 0) {
      goto LABEL_41;
    }
LABEL_241:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v81 = *((int *)this + 61);
      *(_WORD *)a2 = 736;
      if (v81 <= 0x7F)
      {
LABEL_243:
        a2[2] = v81;
        a2 += 3;
        if ((v10 & 0x800) != 0) {
          goto LABEL_252;
        }
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v81 = *((int *)this + 61);
      *(_WORD *)a2 = 736;
      if (v81 <= 0x7F) {
        goto LABEL_243;
      }
    }
    a2[2] = v81 | 0x80;
    unint64_t v82 = v81 >> 7;
    if (v81 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v82 | 0x80;
        unint64_t v83 = v82 >> 7;
        ++a2;
        unint64_t v84 = v82 >> 14;
        v82 >>= 7;
      }
      while (v84);
      *(a2 - 1) = v83;
      if ((v10 & 0x800) != 0) {
        goto LABEL_252;
      }
    }
    else
    {
      a2[3] = v82;
      a2 += 4;
      if ((v10 & 0x800) != 0) {
        goto LABEL_252;
      }
    }
LABEL_42:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_255;
  }
LABEL_230:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v77 = *((int *)this + 60);
    *(_WORD *)a2 = 728;
    if (v77 <= 0x7F)
    {
LABEL_232:
      a2[2] = v77;
      a2 += 3;
      if ((v10 & 0x400) != 0) {
        goto LABEL_241;
      }
      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v77 = *((int *)this + 60);
    *(_WORD *)a2 = 728;
    if (v77 <= 0x7F) {
      goto LABEL_232;
    }
  }
  a2[2] = v77 | 0x80;
  unint64_t v78 = v77 >> 7;
  if (v77 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v78 | 0x80;
      unint64_t v79 = v78 >> 7;
      ++a2;
      unint64_t v80 = v78 >> 14;
      v78 >>= 7;
    }
    while (v80);
    *(a2 - 1) = v79;
    if ((v10 & 0x400) != 0) {
      goto LABEL_241;
    }
  }
  else
  {
    a2[3] = v78;
    a2 += 4;
    if ((v10 & 0x400) != 0) {
      goto LABEL_241;
    }
  }
LABEL_41:
  if ((v10 & 0x800) == 0) {
    goto LABEL_42;
  }
LABEL_252:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v85 = *((void *)this + 31);
  *(_WORD *)a2 = 745;
  *(void *)(a2 + 2) = v85;
  a2 += 10;
  if ((v10 & 0x1000) == 0)
  {
LABEL_43:
    if ((*((unsigned char *)this + 16) & 4) == 0) {
      goto LABEL_44;
    }
    goto LABEL_258;
  }
LABEL_255:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v86 = *((void *)this + 32);
  *(_WORD *)a2 = 929;
  *(void *)(a2 + 2) = v86;
  a2 += 10;
  if ((*((unsigned char *)this + 16) & 4) == 0)
  {
LABEL_44:
    int v11 = *((_DWORD *)this + 5);
    if ((v11 & 0x2000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_261;
  }
LABEL_258:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v87 = *((unsigned char *)this + 30);
  *(_WORD *)a2 = 936;
  a2[2] = v87;
  a2 += 3;
  int v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x2000) == 0)
  {
LABEL_45:
    if ((v11 & 0x4000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_264;
  }
LABEL_261:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v88 = *((void *)this + 33);
  *(_WORD *)a2 = 945;
  *(void *)(a2 + 2) = v88;
  a2 += 10;
  if ((v11 & 0x4000) == 0)
  {
LABEL_46:
    if ((v11 & 0x8000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_267;
  }
LABEL_264:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v89 = *((void *)this + 34);
  *(_WORD *)a2 = 953;
  *(void *)(a2 + 2) = v89;
  a2 += 10;
  if ((v11 & 0x8000) == 0)
  {
LABEL_47:
    if ((*((unsigned char *)this + 16) & 8) == 0) {
      goto LABEL_48;
    }
LABEL_270:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v91 = *((int *)this + 8);
      *(_WORD *)a2 = 968;
      if (v91 <= 0x7F)
      {
LABEL_272:
        a2[2] = v91;
        a2 += 3;
        int v12 = *((_DWORD *)this + 5);
        if ((v12 & 2) != 0) {
          goto LABEL_281;
        }
        goto LABEL_49;
      }
    }
    else
    {
      unint64_t v91 = *((int *)this + 8);
      *(_WORD *)a2 = 968;
      if (v91 <= 0x7F) {
        goto LABEL_272;
      }
    }
    a2[2] = v91 | 0x80;
    unint64_t v92 = v91 >> 7;
    if (v91 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v92 | 0x80;
        unint64_t v93 = v92 >> 7;
        ++a2;
        unint64_t v94 = v92 >> 14;
        v92 >>= 7;
      }
      while (v94);
      *(a2 - 1) = v93;
      int v12 = *((_DWORD *)this + 5);
      if ((v12 & 2) != 0) {
        goto LABEL_281;
      }
    }
    else
    {
      a2[3] = v92;
      a2 += 4;
      int v12 = *((_DWORD *)this + 5);
      if ((v12 & 2) != 0) {
        goto LABEL_281;
      }
    }
LABEL_49:
    if ((v12 & 0x10000) == 0) {
      goto LABEL_50;
    }
LABEL_284:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v96 = *((void *)this + 36);
    *(_WORD *)a2 = 985;
    *(void *)(a2 + 2) = v96;
    a2 += 10;
    uint64_t v13 = *((void *)this + 1);
    if ((v13 & 1) == 0) {
      return (const google::protobuf::UnknownFieldSet *)a2;
    }
    goto LABEL_287;
  }
LABEL_267:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v90 = *((void *)this + 35);
  *(_WORD *)a2 = 961;
  *(void *)(a2 + 2) = v90;
  a2 += 10;
  if ((*((unsigned char *)this + 16) & 8) != 0) {
    goto LABEL_270;
  }
LABEL_48:
  int v12 = *((_DWORD *)this + 5);
  if ((v12 & 2) == 0) {
    goto LABEL_49;
  }
LABEL_281:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v95 = *((unsigned char *)this + 195);
  *(_WORD *)a2 = 976;
  a2[2] = v95;
  a2 += 3;
  if ((v12 & 0x10000) != 0) {
    goto LABEL_284;
  }
LABEL_50:
  uint64_t v13 = *((void *)this + 1);
  if ((v13 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
LABEL_287:

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::glop::GlopParameters::ByteSizeLong(operations_research::glop::GlopParameters *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (!(_BYTE)v1)
  {
    uint64_t v2 = 0;
    if ((v1 & 0xFF00) == 0) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }
  uint64_t v2 = 3;
  if ((v1 & 1) == 0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 2) != 0) {
    v2 += 3;
  }
  if ((v1 & 4) != 0) {
    v2 += 3;
  }
  if ((v1 & 8) != 0)
  {
    int v8 = *((_DWORD *)this + 8);
    uint64_t v9 = (9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6;
    if (v8 >= 0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 10;
    }
    v2 += v10 + 2;
    if ((v1 & 0x10) == 0)
    {
LABEL_10:
      if ((v1 & 0x20) == 0) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
  }
  else if ((v1 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  int v11 = *((_DWORD *)this + 9);
  uint64_t v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
  if (v11 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 10;
  }
  v2 += v13 + 1;
  if ((v1 & 0x20) != 0)
  {
LABEL_11:
    int v3 = *((_DWORD *)this + 10);
    uint64_t v4 = (9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6;
    if (v3 >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 10;
    }
    v2 += v5 + 1;
  }
LABEL_15:
  if ((v1 & 0x40) != 0) {
    v2 += 9;
  }
  if ((v1 & 0x80) != 0) {
    v2 += 9;
  }
  if ((v1 & 0xFF00) != 0)
  {
LABEL_20:
    if ((v1 & 0x100) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x200) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x400) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x800) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x1000) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x2000) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x4000) != 0) {
      v2 += 3;
    }
    if ((v1 & 0x8000) != 0) {
      v2 += 3;
    }
  }
LABEL_36:
  if ((v1 & 0xFF0000) != 0)
  {
    if ((v1 & 0x10000) != 0)
    {
      int v6 = *((_DWORD *)this + 25);
      if (v6 < 0) {
        uint64_t v7 = 10;
      }
      else {
        uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
      }
      v2 += v7 + 2;
    }
    if ((v1 & 0x20000) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x40000) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x80000) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x100000) != 0)
    {
      int v14 = *((_DWORD *)this + 32);
      uint64_t v15 = (9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6;
      if (v14 >= 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 10;
      }
      v2 += v16 + 2;
    }
    if ((v1 & 0x200000) != 0)
    {
      int v17 = *((_DWORD *)this + 33);
      uint64_t v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v17 >= 0) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 12;
      }
      v2 += v19;
    }
    if ((v1 & 0x400000) != 0) {
      v2 += 10;
    }
    if ((v1 & 0x800000) != 0) {
      v2 += 10;
    }
  }
  if (HIBYTE(v1))
  {
    if ((v1 & 0x1000000) != 0) {
      v2 += 10;
    }
    if ((v1 & 0x2000000) != 0) {
      v2 += 10;
    }
    if ((v1 & 0x4000000) != 0)
    {
      v2 += ((9 * (__clz(*((void *)this + 21) | 1) ^ 0x3F) + 73) >> 6) + 2;
      if ((v1 & 0x8000000) != 0) {
        v2 += 10;
      }
      if ((v1 & 0x10000000) == 0)
      {
LABEL_82:
        if ((v1 & 0x20000000) == 0)
        {
LABEL_87:
          if ((v1 & 0x40000000) != 0) {
            v2 += 3;
          }
          if (v1 < 0) {
            v2 += 3;
          }
          goto LABEL_91;
        }
LABEL_83:
        int v20 = *((_DWORD *)this + 47);
        uint64_t v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
        if (v20 >= 0) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 12;
        }
        v2 += v22;
        goto LABEL_87;
      }
    }
    else
    {
      if ((v1 & 0x8000000) != 0) {
        v2 += 10;
      }
      if ((v1 & 0x10000000) == 0) {
        goto LABEL_82;
      }
    }
    int v32 = *((_DWORD *)this + 46);
    uint64_t v33 = ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v32 >= 0) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 12;
    }
    v2 += v34;
    if ((v1 & 0x20000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_83;
  }
LABEL_91:
  int v23 = *((_DWORD *)this + 5);
  if ((_BYTE)v23)
  {
    if (v23) {
      v2 += 3;
    }
    if ((v23 & 2) != 0) {
      v2 += 3;
    }
    if ((v23 & 4) != 0) {
      v2 += 3;
    }
    if ((v23 & 8) != 0) {
      v2 += 3;
    }
    if ((v23 & 0x10) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x20) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x40) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x80) != 0) {
      v2 += 10;
    }
  }
  if ((v23 & 0xFF00) != 0)
  {
    if ((v23 & 0x100) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x200) != 0)
    {
      int v24 = *((_DWORD *)this + 60);
      uint64_t v25 = ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v24 >= 0) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 12;
      }
      v2 += v26;
    }
    if ((v23 & 0x400) != 0)
    {
      int v27 = *((_DWORD *)this + 61);
      uint64_t v28 = ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v27 >= 0) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 12;
      }
      v2 += v29;
    }
    if ((v23 & 0x800) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x1000) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x2000) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x4000) != 0) {
      v2 += 10;
    }
    if ((v23 & 0x8000) != 0) {
      v2 += 10;
    }
  }
  if ((v23 & 0x10000) != 0) {
    uint64_t v30 = (const google::protobuf::UnknownFieldSet *)(v2 + 10);
  }
  else {
    uint64_t v30 = (const google::protobuf::UnknownFieldSet *)v2;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::glop::GlopParameters *)((char *)this + 8), v30, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v30;
  return (char *)v30;
}

void operations_research::glop::GlopParameters::MergeFrom(operations_research::glop::GlopParameters *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::glop::GlopParameters::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

double operations_research::glop::GlopParameters::MergeFrom(operations_research::glop::GlopParameters *this, const operations_research::glop::GlopParameters *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)((char *)this + 8);
    int v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      int v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  unsigned int v10 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v10)
  {
    if (v10)
    {
      *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
      if ((v10 & 2) == 0)
      {
LABEL_8:
        if ((v10 & 4) == 0) {
          goto LABEL_9;
        }
        goto LABEL_75;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_8;
    }
    *((unsigned char *)this + 29) = *((unsigned char *)a2 + 29);
    if ((v10 & 4) == 0)
    {
LABEL_9:
      if ((v10 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_76;
    }
LABEL_75:
    *((unsigned char *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *((unsigned char *)a2 + 30);
    if ((v10 & 8) == 0)
    {
LABEL_10:
      if ((v10 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_77;
    }
LABEL_76:
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    if ((v10 & 0x10) == 0)
    {
LABEL_11:
      if ((v10 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_78;
    }
LABEL_77:
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    if ((v10 & 0x20) == 0)
    {
LABEL_12:
      if ((v10 & 0x40) == 0) {
        goto LABEL_13;
      }
      goto LABEL_79;
    }
LABEL_78:
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *((_DWORD *)a2 + 10);
    if ((v10 & 0x40) == 0)
    {
LABEL_13:
      if ((v10 & 0x80) == 0)
      {
LABEL_15:
        *((_DWORD *)this + 4) |= v10;
        goto LABEL_16;
      }
LABEL_14:
      double result = *((double *)a2 + 7);
      *((double *)this + 7) = result;
      goto LABEL_15;
    }
LABEL_79:
    double result = *((double *)a2 + 6);
    *((double *)this + 6) = result;
    if ((v10 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_16:
  if ((v10 & 0xFF00) == 0) {
    goto LABEL_27;
  }
  if ((v10 & 0x100) != 0)
  {
    double result = *((double *)a2 + 8);
    *((double *)this + 8) = result;
    if ((v10 & 0x200) == 0)
    {
LABEL_19:
      if ((v10 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_83;
    }
  }
  else if ((v10 & 0x200) == 0)
  {
    goto LABEL_19;
  }
  double result = *((double *)a2 + 9);
  *((double *)this + 9) = result;
  if ((v10 & 0x400) == 0)
  {
LABEL_20:
    if ((v10 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_84;
  }
LABEL_83:
  double result = *((double *)a2 + 10);
  *((double *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = result;
  if ((v10 & 0x800) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_85;
  }
LABEL_84:
  double result = *((double *)a2 + 11);
  *((double *)this + 11) = result;
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_86;
  }
LABEL_85:
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  if ((v10 & 0x2000) == 0)
  {
LABEL_23:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_24;
    }
LABEL_87:
    *((unsigned char *)this + 98) = *((unsigned char *)a2 + 98);
    if ((v10 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_86:
  *((unsigned char *)this + 97) = *((unsigned char *)a2 + 97);
  if ((v10 & 0x4000) != 0) {
    goto LABEL_87;
  }
LABEL_24:
  if ((v10 & 0x8000) != 0) {
LABEL_25:
  }
    *((unsigned char *)this + 99) = *((unsigned char *)a2 + 99);
LABEL_26:
  *((_DWORD *)this + 4) |= v10;
LABEL_27:
  if ((v10 & 0xFF0000) == 0) {
    goto LABEL_38;
  }
  if ((v10 & 0x10000) != 0)
  {
    *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
    if ((v10 & 0x20000) == 0)
    {
LABEL_30:
      if ((v10 & 0x40000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_91;
    }
  }
  else if ((v10 & 0x20000) == 0)
  {
    goto LABEL_30;
  }
  double result = *((double *)a2 + 13);
  *((double *)this + 13) = result;
  if ((v10 & 0x40000) == 0)
  {
LABEL_31:
    if ((v10 & 0x80000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_92;
  }
LABEL_91:
  double result = *((double *)a2 + 14);
  *((double *)this + 14) = result;
  if ((v10 & 0x80000) == 0)
  {
LABEL_32:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_93;
  }
LABEL_92:
  double result = *((double *)a2 + 15);
  *((double *)this + 15) = result;
  if ((v10 & 0x100000) == 0)
  {
LABEL_33:
    if ((v10 & 0x200000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_94;
  }
LABEL_93:
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  if ((v10 & 0x200000) == 0)
  {
LABEL_34:
    if ((v10 & 0x400000) == 0) {
      goto LABEL_35;
    }
LABEL_95:
    double result = *((double *)a2 + 17);
    *((double *)this + 17) = result;
    if ((v10 & 0x800000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_94:
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  if ((v10 & 0x400000) != 0) {
    goto LABEL_95;
  }
LABEL_35:
  if ((v10 & 0x800000) != 0)
  {
LABEL_36:
    double result = *((double *)a2 + 18);
    *((double *)this + 18) = result;
  }
LABEL_37:
  *((_DWORD *)this + 4) |= v10;
LABEL_38:
  if (!HIBYTE(v10)) {
    goto LABEL_48;
  }
  if ((v10 & 0x1000000) != 0)
  {
    double result = *((double *)a2 + 19);
    *((double *)this + 19) = result;
    if ((v10 & 0x2000000) == 0)
    {
LABEL_41:
      if ((v10 & 0x4000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_115;
    }
  }
  else if ((v10 & 0x2000000) == 0)
  {
    goto LABEL_41;
  }
  double result = *((double *)a2 + 20);
  *((double *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = result;
  if ((v10 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v10 & 0x8000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_116;
  }
LABEL_115:
  *((void *)this + 21) = *((void *)a2 + 21);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v10 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_117;
  }
LABEL_116:
  double result = *((double *)a2 + 22);
  *((double *)this + 22) = result;
  if ((v10 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_118;
  }
LABEL_117:
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_45:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_46;
    }
LABEL_119:
    *((unsigned char *)this + 192) = *((unsigned char *)a2 + 192);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_120:
    *((unsigned char *)this + 193) = *((unsigned char *)a2 + 193);
    goto LABEL_47;
  }
LABEL_118:
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  if ((v10 & 0x40000000) != 0) {
    goto LABEL_119;
  }
LABEL_46:
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_120;
  }
LABEL_47:
  *((_DWORD *)this + 4) |= v10;
LABEL_48:
  int v11 = *((_DWORD *)a2 + 5);
  if (!(_BYTE)v11) {
    goto LABEL_59;
  }
  if (v11)
  {
    *((unsigned char *)this + 194) = *((unsigned char *)a2 + 194);
    if ((v11 & 2) == 0)
    {
LABEL_51:
      if ((v11 & 4) == 0) {
        goto LABEL_52;
      }
      goto LABEL_99;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_51;
  }
  *((unsigned char *)this + 195) = *((unsigned char *)a2 + 195);
  if ((v11 & 4) == 0)
  {
LABEL_52:
    if ((v11 & 8) == 0) {
      goto LABEL_53;
    }
    goto LABEL_100;
  }
LABEL_99:
  *((unsigned char *)this + 196) = *((unsigned char *)a2 + 196);
  if ((v11 & 8) == 0)
  {
LABEL_53:
    if ((v11 & 0x10) == 0) {
      goto LABEL_54;
    }
    goto LABEL_101;
  }
LABEL_100:
  *((unsigned char *)this + 197) = *((unsigned char *)a2 + 197);
  if ((v11 & 0x10) == 0)
  {
LABEL_54:
    if ((v11 & 0x20) == 0) {
      goto LABEL_55;
    }
    goto LABEL_102;
  }
LABEL_101:
  double result = *((double *)a2 + 25);
  *((double *)this + 25) = result;
  if ((v11 & 0x20) == 0)
  {
LABEL_55:
    if ((v11 & 0x40) == 0) {
      goto LABEL_56;
    }
LABEL_103:
    double result = *((double *)a2 + 27);
    *((double *)this + 27) = result;
    if ((v11 & 0x80) == 0) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
LABEL_102:
  double result = *((double *)a2 + 26);
  *((double *)this + 26) = result;
  if ((v11 & 0x40) != 0) {
    goto LABEL_103;
  }
LABEL_56:
  if ((v11 & 0x80) != 0)
  {
LABEL_57:
    double result = *((double *)a2 + 28);
    *((double *)this + 28) = result;
  }
LABEL_58:
  *((_DWORD *)this + 5) |= v11;
LABEL_59:
  if ((v11 & 0xFF00) == 0) {
    goto LABEL_70;
  }
  if ((v11 & 0x100) != 0)
  {
    double result = *((double *)a2 + 29);
    *((double *)this + 29) = result;
    if ((v11 & 0x200) == 0)
    {
LABEL_62:
      if ((v11 & 0x400) == 0) {
        goto LABEL_63;
      }
      goto LABEL_107;
    }
  }
  else if ((v11 & 0x200) == 0)
  {
    goto LABEL_62;
  }
  *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *((_DWORD *)a2 + 60);
  if ((v11 & 0x400) == 0)
  {
LABEL_63:
    if ((v11 & 0x800) == 0) {
      goto LABEL_64;
    }
    goto LABEL_108;
  }
LABEL_107:
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  if ((v11 & 0x800) == 0)
  {
LABEL_64:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_109;
  }
LABEL_108:
  double result = *((double *)a2 + 31);
  *((double *)this + 31) = result;
  if ((v11 & 0x1000) == 0)
  {
LABEL_65:
    if ((v11 & 0x2000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_110;
  }
LABEL_109:
  double result = *((double *)a2 + 32);
  *((double *)this + 32) = result;
  if ((v11 & 0x2000) == 0)
  {
LABEL_66:
    if ((v11 & 0x4000) == 0) {
      goto LABEL_67;
    }
LABEL_111:
    double result = *((double *)a2 + 34);
    *((double *)this + 34) = result;
    if ((v11 & 0x8000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
LABEL_110:
  double result = *((double *)a2 + 33);
  *((double *)this + 33) = result;
  if ((v11 & 0x4000) != 0) {
    goto LABEL_111;
  }
LABEL_67:
  if ((v11 & 0x8000) != 0)
  {
LABEL_68:
    double result = *((double *)a2 + 35);
    *((double *)this + 35) = result;
  }
LABEL_69:
  *((_DWORD *)this + 5) |= v11;
LABEL_70:
  if ((v11 & 0x10000) != 0)
  {
    double result = *((double *)a2 + 36);
    *((_DWORD *)this + 5) |= 0x10000u;
    *((double *)this + 36) = result;
  }
  return result;
}

void operations_research::glop::GlopParameters::CopyFrom(operations_research::glop::GlopParameters *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    operations_research::glop::GlopParameters::Clear(this);
    if (v4)
    {
      operations_research::glop::GlopParameters::MergeFrom(this, v4);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
    }
  }
}

double operations_research::glop::GlopParameters::CopyFrom(operations_research::glop::GlopParameters *this, const operations_research::glop::GlopParameters *a2)
{
  if (a2 != this)
  {
    operations_research::glop::GlopParameters::Clear(this);
    return operations_research::glop::GlopParameters::MergeFrom(this, a2);
  }
  return result;
}

uint64_t operations_research::glop::GlopParameters::IsInitialized(operations_research::glop::GlopParameters *this)
{
  return 1;
}

uint64_t operations_research::glop::GlopParameters::GetMetadata(operations_research::glop::GlopParameters *this)
{
  return *off_26AED0A90;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::glop::GlopParameters>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x128uLL);
  }
  *(void *)unint64_t AlignedNoHook = &unk_26F0BCF08;
  *(void *)(AlignedNoHook + 8) = this;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 23) = 0;
  *(void *)(AlignedNoHook + 32) = 0x100000001;
  *(_DWORD *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
  *(_OWORD *)(AlignedNoHook + 48) = xmmword_23CE7EEA0;
  *(_OWORD *)(AlignedNoHook + 64) = xmmword_23CE7EEB0;
  *(_OWORD *)(AlignedNoHook + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = xmmword_23CE7EEC0;
  *(void *)(AlignedNoHook + 96) = 0x201010101;
  *(_OWORD *)(AlignedNoHook + 104) = xmmword_23CE7EED0;
  *(void *)(AlignedNoHook + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0x3EB0C6F7A0B5ED8DLL;
  *(void *)(AlignedNoHook + 128) = 0x200000040;
  *(_OWORD *)(AlignedNoHook + 136) = xmmword_23CE7EEE0;
  *(_OWORD *)(AlignedNoHook + 152) = xmmword_23CE7EEF0;
  *(void *)(AlignedNoHook + 168) = -1;
  *(void *)(AlignedNoHook + 176) = 0x3CD203AF9EE75616;
  *(void *)(AlignedNoHook + 184) = 0x9600000003;
  *(_WORD *)(AlignedNoHook + 196) = 257;
  *(_DWORD *)(AlignedNoHook + 192) = 16843009;
  *(_OWORD *)(AlignedNoHook + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = xmmword_23CE7EF00;
  *(_OWORD *)(AlignedNoHook + 216) = xmmword_23CE7EF10;
  *(void *)(AlignedNoHook + 232) = 0x3F847AE147AE147BLL;
  *(void *)(AlignedNoHook + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0x100000001;
  *(_OWORD *)(AlignedNoHook + 248) = xmmword_23CE7EF20;
  *(void *)(AlignedNoHook + 264) = 0x3EE4F8B588E368F1;
  double result = 0.0000001;
  *(_OWORD *)(AlignedNoHook + 272) = xmmword_23CE7EF50;
  *(void *)(AlignedNoHook + 288) = 0x4A511B0EC57E649ALL;
  return result;
}

double operations_research::glop::GlopParameters::New(operations_research::glop::GlopParameters *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::glop::GlopParameters>(0);
}

double operations_research::glop::GlopParameters::New(operations_research::glop::GlopParameters *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::glop::GlopParameters>(a2);
}

uint64_t operations_research::glop::GlopParameters::GetCachedSize(operations_research::glop::GlopParameters *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

char *google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(unint64_t *a1)
{
  uint64_t v2 = (atomic_ullong *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  uint64_t v2 = (atomic_ullong *)*v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (v2[14]) {
  unint64_t AlignedAndAddCleanup = (unint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<google::protobuf::UnknownFieldSet>>);
  }
  *(_OWORD *)unint64_t AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 16) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(void *)unint64_t AlignedAndAddCleanup = v2;
  return (char *)(AlignedAndAddCleanup + 8);
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<google::protobuf::UnknownFieldSet>>(uint64_t a1)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = (google::protobuf::UnknownFieldSet *)(a1 + 8);
  if (v3 != v4)
  {
    google::protobuf::UnknownFieldSet::ClearFallback(v5);
    int v3 = *(void **)v5;
  }
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void _GLOBAL__sub_I_parameters_pb_cc()
{
}

operations_research::glop::PrimalEdgeNorms *operations_research::glop::PrimalEdgeNorms::PrimalEdgeNorms(operations_research::glop::PrimalEdgeNorms *this, const operations_research::glop::CompactSparseMatrix *a2, const operations_research::glop::VariablesInfo *a3, const operations_research::glop::BasisFactorization *a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 24, 0);
  operations_research::glop::PrimalEdgeNorms::Stats::Stats((operations_research::glop::PrimalEdgeNorms *)((char *)this + 320));
  *(_WORD *)((char *)this + 721) = 257;
  *((void *)this + 99) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 76google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((void *)this + 111) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  return this;
}

void sub_23CB81884(_Unwind_Exception *a1)
{
  operations_research::glop::GlopParameters::~GlopParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::PrimalEdgeNorms::Clear(uint64_t this)
{
  *(_WORD *)(this + 721) = 257;
  return this;
}

uint64_t operations_research::glop::PrimalEdgeNorms::NeedsBasisRefactorization(operations_research::glop::PrimalEdgeNorms *this)
{
  return *((unsigned __int8 *)this + 721);
}

uint64_t operations_research::glop::PrimalEdgeNorms::GetEdgeSquaredNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  if (*((unsigned char *)this + 721)) {
    operations_research::glop::PrimalEdgeNorms::ComputeEdgeSquaredNorms(this);
  }
  return (uint64_t)this + 728;
}

void operations_research::glop::PrimalEdgeNorms::ComputeEdgeSquaredNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  unint64_t v2 = *(int *)(*(void *)this + 4);
  v37[0] = 0;
  uint64_t v3 = *((void *)this + 91);
  unint64_t v4 = (*((void *)this + 92) - v3) >> 3;
  if (v2 <= v4)
  {
    if (v2 < v4) {
      *((void *)this + 92) = v3 + 8 * v2;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 728, v2 - v4, v37);
  }
  uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                   + 1));
  uint64_t v6 = IsRelevantBitRow;
  uint64_t v7 = *(unint64_t **)(IsRelevantBitRow + 8);
  int v8 = *(unint64_t **)(IsRelevantBitRow + 16);
  if (v7 == v8) {
    goto LABEL_18;
  }
  unint64_t v9 = *v7;
  if (*v7)
  {
    int v10 = 0;
    goto LABEL_21;
  }
  uint64_t v11 = 0;
  unint64_t v12 = (char *)v8 - (char *)v7;
  unint64_t v13 = v12 >> 3;
  uint64_t v14 = (int)((uint64_t)v12 >> 3);
  if ((int)(v12 >> 3) <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = v12 >> 3;
  }
  if (v14 <= 1) {
    uint64_t v14 = 1;
  }
  uint64_t v16 = v14 - 1;
  while (v16 != v11)
  {
    int v17 = v11 + 1;
    if (v7[++v11])
    {
      int v15 = v17;
      break;
    }
  }
  if (v15 == v13)
  {
LABEL_18:
    unint64_t v19 = 0;
    int v10 = 0;
    uint64_t v20 = 0xFFFFFFFFLL;
    int v21 = *(_DWORD *)(IsRelevantBitRow + 40);
    if (v21 != -1) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  unint64_t v9 = v7[v15];
  int v10 = v15 << 6;
LABEL_21:
  uint64_t v20 = __clz(__rbit64(v9)) & 0x3F | v10;
  unint64_t v19 = (v9 - 1) & v9;
  int v21 = *(_DWORD *)(IsRelevantBitRow + 40);
  if (v20 != v21)
  {
    while (1)
    {
LABEL_25:
      uint64_t v22 = *((void *)this + 2);
      uint64_t v23 = *(void *)(*(void *)this + 56);
      uint64_t v24 = 8 * (int)v20;
      uint64_t v25 = *(void *)(v23 + v24);
      uint64_t v26 = *(void *)(v23 + (((v20 << 32) + 0x100000000) >> 29)) - v25;
      uint64_t v27 = *(void *)(*(void *)this + 32) + 4 * v25;
      uint64_t v28 = *(void *)(*(void *)this + 8) + 8 * v25;
      v37[0] = v26;
      v37[1] = v27;
      v37[2] = v28;
      operations_research::glop::BasisFactorization::RightSolveSquaredNorm(v22, (unint64_t *)v37);
      *(double *)(*((void *)this + 91) + v24) = v29 + 1.0;
      if (v19) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(v6 + 8);
      uint64_t v31 = *(void *)(v6 + 16) - v30;
      unint64_t v32 = (unint64_t)v31 >> 3;
      uint64_t v33 = (int)(v31 >> 3);
      if ((v10 >> 6) + 1 > (int)v32) {
        int v34 = (v10 >> 6) + 1;
      }
      else {
        int v34 = v32;
      }
      uint64_t v35 = ((uint64_t)v10 >> 6) + 1;
      while (v35 < v33)
      {
        if (*(void *)(v30 + 8 * v35++))
        {
          int v34 = v35 - 1;
          break;
        }
      }
      if (v34 == v32)
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0xFFFFFFFFLL;
        if (v21 == -1) {
          break;
        }
      }
      else
      {
        unint64_t v19 = *(void *)(v30 + 8 * v34);
        int v10 = v34 << 6;
LABEL_24:
        uint64_t v20 = (__clz(__rbit64(v19)) & 0x3F) + v10;
        v19 &= v19 - 1;
        if (v20 == v21) {
          break;
        }
      }
    }
  }
LABEL_35:
  *((unsigned char *)this + 721) = 0;
}

uint64_t operations_research::glop::PrimalEdgeNorms::GetDevexWeights(operations_research::glop::PrimalEdgeNorms *this)
{
  if (*((unsigned char *)this + 722))
  {
    if (*((unsigned char *)this + 216))
    {
      unint64_t v2 = (char *)*((void *)this + 94);
      uint64_t v3 = (char *)*((void *)this + 95);
      if (v2 == v3)
      {
        operations_research::glop::PrimalEdgeNorms::ComputeMatrixColumnNorms(this);
        unint64_t v2 = (char *)*((void *)this + 94);
        uint64_t v3 = (char *)*((void *)this + 95);
      }
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 97, v2, v3, (v3 - v2) >> 3);
    }
    else
    {
      unint64_t v4 = *(int *)(*(void *)this + 4);
      uint64_t v6 = 0x3FF0000000000000;
      std::vector<double>::assign((uint64_t)this + 776, v4, &v6);
    }
    *((_DWORD *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    *((unsigned char *)this + 722) = 0;
  }
  return (uint64_t)this + 776;
}

char *operations_research::glop::PrimalEdgeNorms::GetMatrixColumnNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  int v1 = (char *)this + 752;
  if (*((void *)this + 94) != *((void *)this + 95)) {
    return (char *)this + 752;
  }
  operations_research::glop::PrimalEdgeNorms::ComputeMatrixColumnNorms(this);
  return v1;
}

double operations_research::glop::PrimalEdgeNorms::ComputeMatrixColumnNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(int *)(*(void *)this + 4);
  v13[0] = 0;
  uint64_t v4 = *((void *)this + 94);
  unint64_t v5 = (*((void *)this + 95) - v4) >> 3;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *((void *)this + 95) = v4 + 8 * v3;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 752, v3 - v5, v13);
    uint64_t v2 = *(void *)this;
  }
  if (*(int *)(v2 + 4) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v2 + 56);
    do
    {
      uint64_t v9 = 8 * v7;
      int v10 = (void *)(v8 + 8 * v7++);
      uint64_t v11 = *(void *)(v2 + 32) + 4 * *v10;
      uint64_t v12 = *(void *)(v2 + 8) + 8 * *v10;
      v13[0] = v10[1] - *v10;
      v13[1] = v11;
      v13[2] = v12;
      double result = sqrt(operations_research::glop::SquaredNorm((unint64_t *)v13));
      *(double *)(*((void *)this + 94) + v9) = result;
      uint64_t v2 = *(void *)this;
      uint64_t v8 = *(void *)(*(void *)this + 56);
      *((void *)this + 111) += *(void *)(v8 + v9 + 8) - *(void *)(v8 + v9);
    }
    while (v7 < *(int *)(v2 + 4));
  }
  return result;
}

void operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(uint64_t a1, const operations_research::glop::ScatteredColumn *a2, operations_research::glop *this)
{
  if (!*(unsigned char *)(a1 + 721))
  {
    uint64_t v4 = 8 * (int)a2;
    double v5 = *(double *)(*(void *)(a1 + 728) + v4);
    double v6 = operations_research::glop::PreciseSquaredNorm(this, a2) + 1.0;
    *(double *)(*(void *)(a1 + 728) + v4) = v6;
    double v7 = sqrt(v6);
    double v8 = sqrt(v5);
    operations_research::RatioDistribution::Add(a1 + 560, (v7 - v8) / v7);
    if (fabs((v7 - v8) / v7) > *(double *)(a1 + 88))
    {
      if (*operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&)::vlocal__[0] >= 1
        && (operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/primal_edge_norms.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/glop/primal_edge_norms.cc", 79);
        uint64_t v9 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Recomputing edge norms: ", 24);
        int v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs ", 4);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v11);
      }
      *(unsigned char *)(a1 + 721) = 1;
    }
  }
}

void sub_23CB81E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::PrimalEdgeNorms::UpdateBeforeBasisPivot(uint64_t result, int a2, int a3, signed int a4, char **a5, uint64_t a6)
{
  uint64_t v10 = result;
  if (*(unsigned char *)(result + 721))
  {
    if (*(unsigned char *)(result + 722)) {
      return result;
    }
  }
  else
  {
    operations_research::glop::UpdateRow::ComputeUpdateRow((int **)a6, a4);
    operations_research::glop::PrimalEdgeNorms::ComputeDirectionLeftInverse((uint64_t *)v10, v12, a5);
    double result = operations_research::glop::PrimalEdgeNorms::UpdateEdgeSquaredNorms((void *)v10, a2, a3, a4, a5, (operations_research::glop::UpdateRow *)a6);
    if (*(unsigned char *)(v10 + 722)) {
      return result;
    }
  }
  int v13 = *(_DWORD *)(v10 + 800);
  *(_DWORD *)(v10 + 80google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v13 + 1;
  if (v13 >= *(_DWORD *)(v10 + 212))
  {
    *(unsigned char *)(v10 + 722) = 1;
  }
  else
  {
    operations_research::glop::UpdateRow::ComputeUpdateRow((int **)a6, a4);
    double v14 = fmax(sqrt(operations_research::glop::PreciseSquaredNorm((uint64_t)a5)) / fabs(*(double *)&(*a5)[8 * a4]), 1.0);
    double result = operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)a6);
    int v15 = *(int **)result;
    uint64_t v16 = *(int **)(result + 8);
    if (*(int **)result == v16)
    {
      uint64_t v18 = *(void *)(v10 + 776);
    }
    else
    {
      uint64_t v17 = *(void *)(a6 + 224);
      uint64_t v18 = *(void *)(v10 + 776);
      do
      {
        uint64_t v19 = *v15++;
        uint64_t v20 = 8 * v19;
        double v21 = *(double *)(v18 + 8 * v19);
        double v22 = v14 * fabs(*(double *)(v17 + 8 * v19));
        if (v21 >= v22) {
          double v22 = v21;
        }
        *(double *)(v18 + v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v22;
      }
      while (v15 != v16);
    }
    *(double *)(v18 + 8 * a3) = v14;
  }
  return result;
}

void operations_research::glop::PrimalEdgeNorms::ComputeDirectionLeftInverse(uint64_t *a1, uint64_t a2, char **a3)
{
  double v5 = a3[1];
  uint64_t v6 = v5 - *a3;
  double v7 = (double)(int)((unint64_t)v6 >> 3) * 0.05;
  double v8 = (void **)(a1 + 101);
  uint64_t v9 = (int **)(a1 + 105);
  uint64_t v10 = (int *)a1[105];
  uint64_t v11 = v10;
  uint64_t v12 = (int *)a1[106];
  if (v10 == v12 || (uint64_t v13 = v12 - v10, v7 + v7 <= (double)(unint64_t)(v13 + ((a3[5] - a3[4]) >> 2))))
  {
    if (v8 != (void **)a3)
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 101, *a3, v5, v6 >> 3);
      uint64_t v11 = *v9;
    }
    a1[106] = (uint64_t)v11;
    uint64_t v23 = a3[4];
    uint64_t v24 = a3[5];
    int64_t v25 = (v24 - v23) >> 2;
  }
  else
  {
    if (v7 <= (double)(unint64_t)v13)
    {
      uint64_t v35 = 0;
      int64_t v26 = (v6 << 29) & 0xFFFFFFFF00000000;
      uint64_t v27 = (void *)a1[101];
      unint64_t v28 = (a1[102] - (uint64_t)v27) >> 3;
      if (v26 >> 32 <= v28)
      {
        if (v26 >> 32 < v28) {
          a1[102] = (uint64_t)v27 + 8 * (v26 >> 32);
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)v8, (v26 >> 32) - v28, &v35);
        uint64_t v27 = *v8;
      }
      bzero(v27, v26 >> 29);
    }
    else
    {
      double v14 = *v8;
      unint64_t v15 = (char *)v12 - (char *)v10 - 4;
      if (v15 < 4) {
        goto LABEL_35;
      }
      uint64_t v16 = (v15 >> 2) + 1;
      uint64_t v11 = &v10[v16 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v17 = v10 + 1;
      uint64_t v18 = v16 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v19 = *v17;
        v14[*(v17 - 1)] = 0;
        v14[v19] = 0;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          uint64_t v20 = *v11++;
          v14[v20] = 0;
        }
        while (v11 != v12);
      }
      uint64_t v35 = 0;
      unint64_t v21 = (int)(v6 >> 3);
      unint64_t v22 = (a1[102] - (uint64_t)v14) >> 3;
      if (v21 <= v22)
      {
        if (v21 < v22) {
          a1[102] = (uint64_t)&v14[v21];
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)(a1 + 101), v21 - v22, &v35);
      }
    }
    a1[106] = a1[105];
    uint64_t v23 = a3[4];
    uint64_t v24 = a3[5];
    int64_t v25 = (v24 - v23) >> 2;
    if (v24 - v23 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *a3;
      uint64_t v31 = *v8;
      if (v25 <= 1) {
        uint64_t v32 = 1;
      }
      else {
        uint64_t v32 = (v24 - v23) >> 2;
      }
      uint64_t v33 = 4 * v32;
      do
      {
        v31[*(int *)&v23[v29]] = *(void *)&v30[8 * *(int *)&v23[v29]];
        v29 += 4;
      }
      while (v33 != v29);
    }
  }
  if (v7 > (double)(unint64_t)v25 && v9 != (int **)(a3 + 4)) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, v23, v24, v25);
  }
  operations_research::glop::BasisFactorization::LeftSolve(a1[2], (uint64_t)v8);
}

uint64_t operations_research::glop::PrimalEdgeNorms::UpdateEdgeSquaredNorms(void *a1, int a2, int a3, int a4, void *a5, operations_research::glop::UpdateRow *this)
{
  double v9 = *(double *)(*a5 + 8 * a4);
  double v10 = fmax(*(double *)(a1[91] + 8 * a2) / (v9 * v9), 1.0);
  uint64_t NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  uint64_t v12 = *(int **)NonZeroPositions;
  uint64_t v13 = *(int **)(NonZeroPositions + 8);
  uint64_t v14 = a1[91];
  if (*(int **)NonZeroPositions == v13)
  {
    int v15 = 0;
  }
  else
  {
    int v15 = 0;
    uint64_t v16 = *((void *)this + 28);
    uint64_t v17 = *a1;
    uint64_t v18 = *(void *)(*a1 + 56);
    uint64_t v19 = a1[111];
    do
    {
      uint64_t v20 = *v12;
      uint64_t v21 = *(void *)(v18 + 8 * v20);
      uint64_t v22 = *(void *)(v18 + (((v20 << 32) + 0x100000000) >> 29));
      double v23 = 0.0;
      BOOL v24 = v22 <= v21;
      uint64_t v25 = v22 - v21;
      if (!v24)
      {
        int64_t v26 = (int *)(*(void *)(v17 + 32) + 4 * v21);
        uint64_t v27 = (double *)(*(void *)(v17 + 8) + 8 * v21);
        uint64_t v28 = v25;
        do
        {
          double v29 = *v27++;
          double v30 = v29;
          uint64_t v31 = *v26++;
          double v23 = v23 + v30 * *(double *)(a1[101] + 8 * v31);
          --v28;
        }
        while (v28);
      }
      double v32 = *(double *)(v16 + 8 * v20);
      v19 += v25;
      a1[111] = v19;
      double v33 = *(double *)(v14 + 8 * v20) + v32 * (-2.0 / v9 * v23 + v32 * v10);
      *(double *)(v14 + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v33;
      double v34 = v32 / -v9 * (v32 / -v9) + 1.0;
      if (v33 < v34)
      {
        *(double *)(v14 + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v34;
        ++v15;
      }
      ++v12;
    }
    while (v12 != v13);
  }
  *(double *)(v14 + 8 * a3) = v10;

  return operations_research::IntegerDistribution::Add((uint64_t)(a1 + 80), v15);
}

operations_research::glop::PrimalEdgeNorms::Stats *operations_research::glop::PrimalEdgeNorms::Stats::Stats(operations_research::glop::PrimalEdgeNorms::Stats *this)
{
  strcpy((char *)this, "PrimalEdgeNorms");
  *((unsigned char *)this + 23) = 15;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_23CE7E3F0;
  strcpy((char *)__p[0], "direction_left_inverse_density");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 80), (long long *)__p, this);
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C4998;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_23CE7ECA0;
  strcpy((char *)__p[0], "direction_left_inverse_accuracy");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 160), (long long *)__p, this);
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "edges_norm_accuracy");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 240), (long long *)__p, this);
  *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "lower_bounded_norms");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 320), (long long *)__p, this) = &unk_26F0C4A58;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_23CB8257C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 271) < 0) {
    operator delete(*(void **)(v14 + 248));
  }
  *(void *)(v14 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*(void **)(v14 + 168));
  }
  *(void *)(v14 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0)
  {
    operator delete(*(void **)(v14 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::ReducedCosts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a7;
  operations_research::glop::GlopParameters::GlopParameters(a1 + 48, 0);
  operations_research::glop::ReducedCosts::Stats::Stats((operations_research::glop::ReducedCosts::Stats *)(a1 + 344));
  *(_DWORD *)(a1 + 664) = 16843008;
  *(_WORD *)(a1 + 668) = 0;
  *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 856) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 72google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 80google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 832) = 0;
  *(void *)(a1 + 864) = a1 + 832;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 88google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(_DWORD *)(a1 + 872) = -1;
  *(unsigned char *)(a1 + 888) = 0;
  return a1;
}

void sub_23CB82718(_Unwind_Exception *a1)
{
  operations_research::glop::GlopParameters::~GlopParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::NeedsBasisRefactorization(operations_research::glop::ReducedCosts *this)
{
  return *((unsigned __int8 *)this + 664);
}

uint64_t operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(operations_research::glop::VariablesInfo **this, int a2, double **a3, double *a4)
{
  if (*((unsigned char *)this + 666)) {
    operations_research::glop::ReducedCosts::ComputeBasicObjective((operations_research::glop::ReducedCosts *)this);
  }
  double v8 = this[90];
  double v9 = *(double *)(*(void *)this[1] + 8 * a2) + *((double *)this[87] + a2);
  double v10 = (int *)a3[4];
  uint64_t v11 = (int *)a3[5];
  if (v10 != v11)
  {
    uint64_t v12 = v11 - v10;
    if ((double)(int)((unint64_t)((char *)a3[1] - (char *)*a3) >> 3) * 0.8 >= (double)(unint64_t)v12)
    {
      if ((char *)v11 - (char *)v10 < 1)
      {
        double v28 = *((double *)v8 + a2);
        double v29 = v9 - 0.0;
        *((double *)v8 + a2) = v9 - 0.0;
        *a4 = v9 - 0.0;
        if (!*((unsigned char *)this + 888)) {
          goto LABEL_32;
        }
        goto LABEL_19;
      }
      if (v12 <= 1) {
        uint64_t v12 = 1;
      }
      double v24 = 0.0;
      double v25 = 0.0;
      do
      {
        uint64_t v26 = *v10++;
        double v27 = v25 + *((double *)this[84] + v26) * (*a3)[v26];
        double v23 = v24 + v27;
        double v25 = v27 + v24 - (v24 + v27);
        double v24 = v23;
        --v12;
      }
      while (v12);
      goto LABEL_14;
    }
  }
  uint64_t v13 = this[84];
  unint64_t v14 = this[85] - v13;
  if ((int)(v14 >> 3) >= 1)
  {
    int v15 = *a3;
    uint64_t v16 = (v14 >> 3);
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      double v19 = *(double *)v13;
      uint64_t v13 = (operations_research::glop::VariablesInfo *)((char *)v13 + 8);
      double v20 = v19;
      double v21 = *v15++;
      double v22 = v18 + v20 * v21;
      double v23 = v17 + v22;
      double v18 = v22 + v17 - (v17 + v22);
      double v17 = v23;
      --v16;
    }
    while (v16);
LABEL_14:
    double v28 = *((double *)v8 + a2);
    double v29 = v9 - v23;
    *((double *)v8 + a2) = v9 - v23;
    *a4 = v9 - v23;
    if (!*((unsigned char *)this + 888)) {
      goto LABEL_32;
    }
    goto LABEL_19;
  }
  double v28 = *((double *)v8 + a2);
  double v29 = v9 - 0.0;
  *((double *)v8 + a2) = v9 - 0.0;
  *a4 = v9 - 0.0;
  if (!*((unsigned char *)this + 888)) {
    goto LABEL_32;
  }
LABEL_19:
  double v30 = *((double *)v8 + a2);
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(this[3]);
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(this[3]);
  double v33 = *((double *)this + 103);
  unint64_t v34 = (unint64_t)a2 >> 6;
  uint64_t v35 = 1 << a2;
  BOOL v36 = (*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * v34) & (1 << a2)) != 0 && v30 < -v33;
  if (v36
    || ((*(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * v34) & v35) != 0 ? (BOOL v37 = v30 <= v33) : (BOOL v37 = 1), !v37))
  {
    unint64_t v42 = this[105];
    uint64_t v43 = 8 * v34;
    uint64_t v44 = *((void *)v42 + v34) | v35;
    *(void *)((char *)v42 + v43) = v44;
    if ((v44 & v35) != 0) {
      goto LABEL_32;
    }
LABEL_29:
    if (*((unsigned char *)this + 668)) {
      return 0;
    }
    uint64_t result = 0;
    *((_WORD *)this + 332) = 257;
    uint64_t v48 = (char *)this + 667;
    goto LABEL_45;
  }
  unint64_t v38 = this[105];
  uint64_t v39 = 8 * v34;
  uint64_t v40 = *((void *)v38 + v34) & ~v35;
  *(void *)((char *)v38 + v39) = v40;
  if ((v40 & v35) == 0) {
    goto LABEL_29;
  }
LABEL_32:
  if (*((unsigned char *)this + 667)) {
    return 1;
  }
  double v45 = fabs(v29) > 1.0 ? v29 : 1.0;
  operations_research::RatioDistribution::Add((uint64_t)(this + 63), (v28 - v29) / v45);
  if (vabdd_f64(v28, v29) / v45 <= *((double *)this + 13)) {
    return 1;
  }
  if (*operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,double *)::vlocal__[0] >= 1
    && (operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,double *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,double *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v49, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 104);
    unint64_t v46 = (void *)google::LogMessage::stream((google::LogMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Recomputing reduced costs, value = ", 35);
    unint64_t v47 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" error = ", 9);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v49);
  }
  if (*((unsigned char *)this + 668)) {
    return 1;
  }
  uint64_t v48 = (char *)this + 667;
  *((_WORD *)this + 332) = 257;
  uint64_t result = 1;
LABEL_45:
  *uint64_t v48 = 1;
  return result;
}

void sub_23CB82AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::ReducedCosts::ComputeBasicObjective(operations_research::glop::ReducedCosts *this)
{
  unint64_t v3 = **(int **)this;
  unint64_t v2 = *(int *)(*(void *)this + 4);
  uint64_t v14 = 0;
  uint64_t v4 = *((void *)this + 87);
  unint64_t v5 = (*((void *)this + 88) - v4) >> 3;
  if (v2 <= v5)
  {
    if (v2 < v5) {
      *((void *)this + 88) = v4 + 8 * v2;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 696, v2 - v5, &v14);
  }
  uint64_t v14 = 0;
  uint64_t v6 = *((void *)this + 84);
  unint64_t v7 = (*((void *)this + 85) - v6) >> 3;
  if (v3 <= v7)
  {
    if (v3 < v7) {
      *((void *)this + 85) = v6 + 8 * v3;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 672, v3 - v7, &v14);
  }
  if ((int)v3 >= 1)
  {
    double v8 = (int *)**((void **)this + 2);
    uint64_t v9 = **((void **)this + 1);
    uint64_t v10 = *((void *)this + 87);
    uint64_t v11 = (double *)*((void *)this + 84);
    uint64_t v12 = v3;
    do
    {
      uint64_t v13 = *v8++;
      *v11++ = *(double *)(v9 + 8 * v13) + *(double *)(v10 + 8 * v13);
      --v12;
    }
    while (v12);
  }
  *(_WORD *)((char *)this + 665) = 1;
}

uint64_t operations_research::glop::ReducedCosts::MakeReducedCostsPrecise(uint64_t this)
{
  if (!*(unsigned char *)(this + 668))
  {
    *(_WORD *)(this + 664) = 257;
    *(unsigned char *)(this + 667) = 1;
  }
  return this;
}

double operations_research::glop::ReducedCosts::ComputeMaximumDualResidual(operations_research::glop::ReducedCosts *this)
{
  double v1 = 0.0;
  if (*((unsigned char *)this + 667)) {
    return v1;
  }
  unint64_t v3 = *(void **)this;
  uint64_t v4 = **(int **)this;
  if (!v4) {
    return v1;
  }
  if ((v4 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  int v5 = *(_DWORD *)(*(void *)this + 4) - v4;
  uint64_t v6 = **(unsigned int **)this;
  unint64_t v7 = (float64x2_t *)operator new(8 * v6);
  bzero(v7, 8 * v4);
  uint64_t v8 = **((void **)this + 1);
  uint64_t v9 = *((void *)this + 87);
  uint64_t v10 = *((void *)this + 90);
  if (v4 < 0xA)
  {
    uint64_t v11 = 0;
LABEL_6:
    uint64_t v12 = &v7->f64[v11];
    uint64_t v13 = 8 * (v11 + v5);
    uint64_t v14 = (double *)(v10 + v13);
    int v15 = (double *)(v9 + v13);
    uint64_t v16 = (double *)(v8 + v13);
    uint64_t v17 = v6 - v11;
    do
    {
      double v18 = *v16++;
      double v19 = v18;
      double v20 = *v15++;
      double v21 = v19 + v20;
      double v22 = *v14++;
      *v12++ = v21 - v22;
      --v17;
    }
    while (v17);
    goto LABEL_8;
  }
  uint64_t v11 = 0;
  uint64_t v39 = 8 * v5;
  if ((unint64_t)v7 - v39 - v8 < 0x20) {
    goto LABEL_6;
  }
  if ((unint64_t)v7 - v39 - v9 < 0x20) {
    goto LABEL_6;
  }
  if ((unint64_t)v7 - v39 - v10 < 0x20) {
    goto LABEL_6;
  }
  uint64_t v11 = v6 & 0xFFFFFFFC;
  uint64_t v40 = v39 + 16;
  unint64_t v41 = (float64x2_t *)(v10 + v39 + 16);
  unint64_t v42 = v7 + 1;
  uint64_t v43 = (float64x2_t *)(v9 + v40);
  uint64_t v44 = (float64x2_t *)(v8 + v40);
  uint64_t v45 = v11;
  do
  {
    float64x2_t v46 = vsubq_f64(vaddq_f64(v44[-1], v43[-1]), v41[-1]);
    float64x2_t v47 = vsubq_f64(vaddq_f64(*v44, *v43), *v41);
    v41 += 2;
    v42[-1] = v46;
    *unint64_t v42 = v47;
    v42 += 2;
    v43 += 2;
    v44 += 2;
    v45 -= 4;
  }
  while (v45);
  if (v11 != v6) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v23 = 0;
  uint64_t v24 = v3[7];
  double v1 = 0.0;
  do
  {
    uint64_t v26 = *(int *)(**((void **)this + 2) + 4 * v23);
    uint64_t v27 = 8 * v26;
    uint64_t v28 = *(void *)(v24 + 8 * v26);
    uint64_t v29 = *(void *)(v24 + (((v26 << 32) + 0x100000000) >> 29));
    double v30 = 0.0;
    BOOL v31 = v29 <= v28;
    uint64_t v32 = v29 - v28;
    if (!v31)
    {
      double v33 = (int *)(v3[4] + 4 * v28);
      unint64_t v34 = (double *)(v3[1] + 8 * v28);
      do
      {
        double v35 = *v34++;
        double v36 = v35;
        uint64_t v37 = *v33++;
        double v30 = v30 + v36 * v7->f64[v37];
        --v32;
      }
      while (v32);
    }
    double v25 = vabdd_f64(*(double *)(**((void **)this + 1) + v27) + *(double *)(*((void *)this + 87) + v27), v30);
    if (v1 < v25) {
      double v1 = v25;
    }
    ++v23;
  }
  while (v23 != v6);
  operator delete(v7);
  return v1;
}

double operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility(operations_research::glop::ReducedCosts *this)
{
  double v1 = 0.0;
  if (*((unsigned char *)this + 667)) {
    return v1;
  }
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                   + 3));
  uint64_t v6 = *(unint64_t **)(IsRelevantBitRow + 8);
  unint64_t v7 = *(unint64_t **)(IsRelevantBitRow + 16);
  if (v6 != v7)
  {
    unint64_t v8 = *v6;
    if (*v6)
    {
      int v9 = 0;
      goto LABEL_18;
    }
    unint64_t v10 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    uint64_t v11 = (int)(v7 - v6);
    if ((int)v10 <= 1) {
      int v12 = 1;
    }
    else {
      int v12 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    }
    if (v11 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v13 = v11 - 1;
    while (v13 != v8)
    {
      int v14 = v8 + 1;
      if (v6[++v8])
      {
        int v12 = v14;
        break;
      }
    }
    if (v12 != v10)
    {
      unint64_t v8 = v6[v12];
      int v9 = v12 << 6;
LABEL_18:
      int v17 = __clz(__rbit64(v8)) & 0x3F | v9;
      unint64_t v16 = (v8 - 1) & v8;
      int v18 = *(_DWORD *)(IsRelevantBitRow + 40);
      if (v17 != v18) {
        goto LABEL_19;
      }
      return v1;
    }
  }
  unint64_t v16 = 0;
  int v9 = 0;
  int v17 = -1;
  int v18 = *(_DWORD *)(IsRelevantBitRow + 40);
  if (v18 != -1)
  {
LABEL_19:
    uint64_t v19 = (char *)v7 - (char *)v6;
    unint64_t v20 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    uint64_t v21 = (int)(v19 >> 3);
    double v1 = 0.0;
    while (1)
    {
      double v22 = *(double *)(*((void *)this + 90) + 8 * v17);
      unint64_t v23 = (unint64_t)v17 >> 6;
      uint64_t v24 = 1 << v17;
      if ((*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 < 0.0
        || (*(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 > 0.0)
      {
        double v25 = fabs(v22);
        if (v1 < v25) {
          double v1 = v25;
        }
      }
      if (v16) {
        goto LABEL_21;
      }
      if ((v9 >> 6) + 1 > (int)v20) {
        int v26 = (v9 >> 6) + 1;
      }
      else {
        int v26 = v20;
      }
      uint64_t v27 = ((uint64_t)v9 >> 6) + 1;
      while (v27 < v21)
      {
        if (v6[v27++])
        {
          int v26 = v27 - 1;
          break;
        }
      }
      if (v26 == v20)
      {
        unint64_t v16 = 0;
        int v17 = -1;
        if (v18 == -1) {
          return v1;
        }
      }
      else
      {
        unint64_t v16 = v6[v26];
        int v9 = v26 << 6;
LABEL_21:
        int v17 = (__clz(__rbit64(v16)) & 0x3F) + v9;
        v16 &= v16 - 1;
        if (v17 == v18) {
          return v1;
        }
      }
    }
  }
  return v1;
}

double operations_research::glop::ReducedCosts::ComputeSumOfDualInfeasibilities(operations_research::glop::ReducedCosts *this)
{
  double v1 = 0.0;
  if (*((unsigned char *)this + 667)) {
    return v1;
  }
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                   + 3));
  uint64_t v6 = *(unint64_t **)(IsRelevantBitRow + 8);
  unint64_t v7 = *(unint64_t **)(IsRelevantBitRow + 16);
  if (v6 != v7)
  {
    unint64_t v8 = *v6;
    if (*v6)
    {
      int v9 = 0;
      goto LABEL_18;
    }
    unint64_t v10 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    uint64_t v11 = (int)(v7 - v6);
    if ((int)v10 <= 1) {
      int v12 = 1;
    }
    else {
      int v12 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    }
    if (v11 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v13 = v11 - 1;
    while (v13 != v8)
    {
      int v14 = v8 + 1;
      if (v6[++v8])
      {
        int v12 = v14;
        break;
      }
    }
    if (v12 != v10)
    {
      unint64_t v8 = v6[v12];
      int v9 = v12 << 6;
LABEL_18:
      int v17 = __clz(__rbit64(v8)) & 0x3F | v9;
      unint64_t v16 = (v8 - 1) & v8;
      int v18 = *(_DWORD *)(IsRelevantBitRow + 40);
      if (v17 != v18) {
        goto LABEL_19;
      }
      return v1;
    }
  }
  unint64_t v16 = 0;
  int v9 = 0;
  int v17 = -1;
  int v18 = *(_DWORD *)(IsRelevantBitRow + 40);
  if (v18 != -1)
  {
LABEL_19:
    uint64_t v19 = (char *)v7 - (char *)v6;
    unint64_t v20 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    uint64_t v21 = (int)(v19 >> 3);
    double v1 = 0.0;
    while (1)
    {
      double v22 = *(double *)(*((void *)this + 90) + 8 * v17);
      unint64_t v23 = (unint64_t)v17 >> 6;
      uint64_t v24 = 1 << v17;
      if ((*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 < 0.0
        || (*(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 > 0.0)
      {
        double v1 = v1 + fabs(v22);
      }
      if (v16) {
        goto LABEL_21;
      }
      if ((v9 >> 6) + 1 > (int)v20) {
        int v25 = (v9 >> 6) + 1;
      }
      else {
        int v25 = v20;
      }
      uint64_t v26 = ((uint64_t)v9 >> 6) + 1;
      while (v26 < v21)
      {
        if (v6[v26++])
        {
          int v25 = v26 - 1;
          break;
        }
      }
      if (v25 == v20)
      {
        unint64_t v16 = 0;
        int v17 = -1;
        if (v18 == -1) {
          return v1;
        }
      }
      else
      {
        unint64_t v16 = v6[v25];
        int v9 = v25 << 6;
LABEL_21:
        int v17 = (__clz(__rbit64(v16)) & 0x3F) + v9;
        v16 &= v16 - 1;
        if (v17 == v18) {
          return v1;
        }
      }
    }
  }
  return v1;
}

double operations_research::glop::ReducedCosts::UpdateBeforeBasisPivot(uint64_t a1, int a2, signed int a3, void *a4, operations_research::glop::UpdateRow *a5)
{
  uint64_t v8 = a3;
  int v9 = *(_DWORD *)(**(void **)(a1 + 16) + 4 * a3);
  if (*(unsigned char *)(a1 + 888)) {
    *(void *)(*(void *)(a1 + 840) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  }
  operations_research::glop::ReducedCosts::UpdateReducedCosts((int **)a1, a2, v9, a3, (uint64_t)a5, *(double *)(*a4 + 8 * a3));
  if (*(unsigned char *)(a1 + 888))
  {
    uint64_t NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions(a5);
    double v11 = *(double *)(a1 + 824);
    uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
    uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
    int v14 = *(int **)NonZeroPositions;
    int v15 = *(int **)(NonZeroPositions + 8);
    if (*(int **)NonZeroPositions == v15)
    {
      uint64_t v17 = *(void *)(a1 + 840);
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 720);
      uint64_t v17 = *(void *)(a1 + 840);
      uint64_t v18 = *(void *)(CanDecreaseBitRow + 8);
      uint64_t v19 = *(void *)(CanIncreaseBitRow + 8);
      do
      {
        uint64_t v20 = *v14++;
        *(void *)(v17 + 8 * ((uint64_t)(int)v20 >> 6)) = ((unint64_t)(*(double *)(v16 + 8 * v20) > v11) << v20) & *(void *)(v18 + 8 * ((uint64_t)(int)v20 >> 6)) ^ *(void *)(v17 + 8 * ((uint64_t)(int)v20 >> 6)) & ~(1 << v20) ^ *(void *)(v19 + 8 * ((uint64_t)(int)v20 >> 6)) & ((unint64_t)(*(double *)(v16 + 8 * v20) < -v11) << v20);
      }
      while (v14 != v15);
    }
    *(void *)(v17 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
  }
  double result = *(double *)(**(void **)(a1 + 8) + 8 * a2) + *(double *)(*(void *)(a1 + 696) + 8 * a2);
  *(double *)(*(void *)(a1 + 672) + 8 * v8) = result;
  *(unsigned char *)(a1 + 665) = 1;
  return result;
}

void operations_research::glop::ReducedCosts::UpdateReducedCosts(int **a1, int a2, int a3, unsigned int a4, uint64_t a5, double a6)
{
  if (*((unsigned char *)a1 + 667)) {
    return;
  }
  double v8 = *(double *)&a1[90][2 * a2];
  if (v8 != 0.0)
  {
    *((unsigned char *)a1 + 669) = 0;
    operations_research::glop::UpdateRow::ComputeUpdateRow((int **)a5, a4);
    int v14 = **a1;
    int v13 = (*a1)[1];
    int v15 = v13 - v14;
    double v43 = v8 / -a6;
    uint64_t NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)a5);
    uint64_t v17 = *(int **)NonZeroPositions;
    uint64_t v18 = *(int **)(NonZeroPositions + 8);
    if (*(int **)NonZeroPositions != v18)
    {
      do
      {
        uint64_t v19 = *v17;
        if ((int)v19 >= v15) {
          break;
        }
        *(double *)&a1[90][2 * v19] = *(double *)&a1[90][2 * v19] + v43 * *(double *)(*(void *)(a5 + 224) + 8 * v19);
        ++v17;
      }
      while (v17 != v18);
    }
    *((unsigned char *)a1 + 668) = 0;
    UnitRowLeftInverse = (unint64_t *)operations_research::glop::UpdateRow::GetUnitRowLeftInverse((operations_research::glop::UpdateRow *)a5);
    uint64_t v21 = (int *)UnitRowLeftInverse[4];
    double v22 = (int *)UnitRowLeftInverse[5];
    if (v21 == v22)
    {
      unint64_t v27 = *UnitRowLeftInverse;
      unint64_t v28 = UnitRowLeftInverse[1] - *UnitRowLeftInverse;
      uint64_t v24 = a1[90];
      if ((int)(v28 >> 3) < 1)
      {
        double v25 = v8 / -a6;
      }
      else
      {
        unint64_t v29 = (v28 >> 3);
        double v25 = v8 / -a6;
        if (v29 >= 0xC
          && (int)((v28 >> 3) + v15 - 1) >= v15
          && ((unint64_t v30 = (unint64_t)&v24[2 * v15], v27 < v30 + 8 * v29) ? (v31 = v30 >= v27 + 8 * v29) : (v31 = 1),
              v31))
        {
          uint64_t v32 = (v28 >> 3) & 3;
          unint64_t v33 = v29 - v32;
          float64x2_t v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
          double v35 = (float64x2_t *)(v27 + 16);
          unint64_t v36 = v29 - v32;
          do
          {
            uint64_t v37 = (float64x2_t *)&v24[2 * v15];
            float64x2_t v38 = vmlaq_f64(v37[1], *v35, v34);
            *uint64_t v37 = vmlaq_f64(*v37, v35[-1], v34);
            v37[1] = v38;
            v35 += 2;
            v15 += 4;
            v36 -= 4;
          }
          while (v36);
          if (!v32) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v33 = 0;
        }
        int v39 = v13 + v33 - v14;
        uint64_t v40 = (double *)(v27 + 8 * v33);
        unint64_t v41 = v33 - v29;
        do
        {
          double v42 = *v40++;
          *(double *)&v24[2 * v39] = *(double *)&v24[2 * v39] + v43 * v42;
          ++v39;
          BOOL v31 = __CFADD__(v41++, 1);
        }
        while (!v31);
      }
    }
    else
    {
      unint64_t v23 = *UnitRowLeftInverse;
      uint64_t v24 = a1[90];
      double v25 = v8 / -a6;
      do
      {
        uint64_t v26 = *v21++;
        *(double *)&v24[2 * (int)v26 + 2 * v15] = *(double *)&v24[2 * (int)v26 + 2 * v15]
                                                + v43 * *(double *)(v23 + 8 * v26);
      }
      while (v21 != v22);
    }
LABEL_33:
    *(double *)&v24[2 * a3] = v25;
    *(void *)&v24[2 * a2] = 0;
    return;
  }
  if (*operations_research::glop::ReducedCosts::UpdateReducedCosts(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double,operations_research::glop::UpdateRow *)::vlocal__[0] >= 2
    && (operations_research::glop::ReducedCosts::UpdateReducedCosts(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double,operations_research::glop::UpdateRow *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::UpdateReducedCosts(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double,operations_research::glop::UpdateRow *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v44, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 460);
    int v9 = (void *)google::LogMessage::stream((google::LogMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Reduced costs didn't change.", 28);
    google::LogMessage::~LogMessage((google::LogMessage *)v44);
  }
  *((unsigned char *)a1 + 668) = 0;
}

void sub_23CB83600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::SetAndDebugCheckThatColumnIsDualFeasible(uint64_t result, int a2)
{
  *(void *)(*(void *)(result + 840) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  return result;
}

double operations_research::glop::ReducedCosts::SetNonBasicVariableCostToZero(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = 8 * a2;
  uint64_t v4 = *(void *)(a1 + 720);
  double result = *(double *)(v4 + v3) - *(double *)(**(void **)(a1 + 8) + v3);
  *(double *)(v4 + v3) = result;
  *a3 = 0;
  return result;
}

double operations_research::glop::ReducedCosts::SetParameters(operations_research::glop::ReducedCosts *this, const operations_research::glop::GlopParameters *a2)
{
  return operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::ReducedCosts *)((char *)this + 48), a2);
}

double operations_research::glop::ReducedCosts::ResetForNewObjective(operations_research::glop::ReducedCosts *this)
{
  *(void *)&double result = 65793;
  *(_DWORD *)((char *)this + 665) = 65793;
  return result;
}

uint64_t operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation(uint64_t this)
{
  *(_WORD *)(this + 665) = 257;
  return this;
}

void operations_research::glop::ReducedCosts::PerturbCosts(double ***this)
{
  if (*operations_research::glop::ReducedCosts::PerturbCosts(void)::vlocal__[0] >= 1
    && (operations_research::glop::ReducedCosts::PerturbCosts(void)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::PerturbCosts(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v28, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 242);
    unint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Perturbing the costs ... ", 25);
    google::LogMessage::~LogMessage((google::LogMessage *)v28);
  }
  uint64_t v3 = *((unsigned int *)*this + 1);
  uint64_t v4 = (v3 - *(_DWORD *)*this);
  if ((int)v4 < 1)
  {
    double v6 = 0.0;
  }
  else
  {
    int v5 = *this[1];
    double v6 = 0.0;
    uint64_t v7 = (v3 - *(_DWORD *)*this);
    do
    {
      double v8 = *v5++;
      double v9 = fabs(v8);
      if (v6 < v9) {
        double v6 = v9;
      }
      --v7;
    }
    while (v7);
  }
  unint64_t v10 = (void **)(this + 87);
  v28[0] = 0;
  uint64_t v11 = v3 << 32;
  int v12 = this[87];
  unint64_t v13 = this[88] - v12;
  if ((int)v3 <= v13)
  {
    if ((int)v3 < v13) {
      this[88] = &v12[(int)v3];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)(this + 87), (int)v3 - v13, v28);
    int v12 = (double **)*v10;
  }
  bzero(v12, v11 >> 29);
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; v4 != i; ++i)
    {
      double v16 = (*this[1])[i];
      uint64_t v17 = this[5];
      uint64_t v18 = v17[312];
      unint64_t v19 = ((unint64_t)v18 + 1) % 0x270;
      uint64_t v20 = 4 * (void)v18;
      uint64_t v21 = 4 * v19;
      LODWORD(v18) = *((_DWORD *)v17 + ((unint64_t)v18 + 397) % 0x270) ^ ((*((_DWORD *)v17 + v19) & 0x7FFFFFFE | *((_DWORD *)v17 + (void)v18) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)v17 + v19) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)((char *)v17 + v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v18;
      LODWORD(v18) = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      double v22 = (double)((v18 << 15) & 0xEFC60000 ^ v18 ^ (((v18 << 15) & 0xEFC60000 ^ v18) >> 18));
      if (v19 == 623) {
        unint64_t v23 = 0;
      }
      else {
        unint64_t v23 = v19 + 1;
      }
      uint64_t v24 = 397;
      if (v19 >= 0xE3) {
        uint64_t v24 = -227;
      }
      unsigned int v25 = *((_DWORD *)v17 + v24 + v19) ^ ((*((_DWORD *)v17 + v23) & 0x7FFFFFFE | *((_DWORD *)v17 + v19) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)v17 + v23) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)((char *)v17 + v21) = v25;
      unsigned int v26 = ((v25 ^ (v25 >> 11)) << 7) & 0x9D2C5680 ^ v25 ^ (v25 >> 11);
      v17[312] = (double *)v23;
      double v15 = (v6 * *((double *)this + 40) + *((double *)this + 39) * fabs(v16))
          * ((v22 + (double)((v26 << 15) & 0xEFC60000 ^ v26 ^ (((v26 << 15) & 0xEFC60000 ^ v26) >> 18)) * 4294967300.0)
           * 5.42101086e-20
           + 0.0
           + 1.0);
      int v27 = *(unsigned __int8 *)(*(void *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::VariablesInfo *)this[3])
                               + i);
      switch(v27)
      {
        case 1:
          goto LABEL_19;
        case 3:
          if (v16 > 0.0) {
            goto LABEL_19;
          }
          if (v16 >= 0.0) {
            continue;
          }
          break;
        case 2:
          break;
        default:
          continue;
      }
      double v15 = -v15;
LABEL_19:
      *((double *)*v10 + i) = v15;
    }
  }
}

void sub_23CB839C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double operations_research::glop::ReducedCosts::ShiftCost(uint64_t a1, int a2)
{
  double v2 = *(double *)(a1 + 280);
  double v3 = *(double *)(a1 + 824);
  uint64_t v4 = *(void *)(a1 + 720);
  double v5 = *(double *)(v4 + 8 * a2);
  if (v5 <= 0.0) {
    double v2 = -v2;
  }
  *(double *)(*(void *)(a1 + 696) + 8 * a2) = *(double *)(*(void *)(a1 + 696) + 8 * a2) - (v5 + v3 * v2);
  double result = -(v3 * v2);
  *(double *)(v4 + 8 * a2) = result;
  return result;
}

double operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(operations_research::glop::ReducedCosts *this)
{
  unint64_t v2 = *(int *)(*(void *)this + 4);
  uint64_t v7 = 0;
  uint64_t v3 = *((void *)this + 88);
  uint64_t v4 = (char *)*((void *)this + 87);
  unint64_t v5 = (v3 - (uint64_t)v4) >> 3;
  if (v2 <= v5)
  {
    if (v2 < v5) {
      *((void *)this + 88) = &v4[8 * v2];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 696, v2 - v5, &v7);
    uint64_t v4 = (char *)*((void *)this + 87);
  }
  bzero(v4, 8 * (int)v2);
  *(void *)&double result = 65793;
  *(_DWORD *)((char *)this + 665) = 65793;
  return result;
}

unsigned char *operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions(unsigned char *this, int a2)
{
  this[888] = a2;
  if (a2)
  {
    uint64_t v2 = (uint64_t)this;
    if (!this[667])
    {
      int v3 = *(_DWORD *)(*(void *)this + 4) & ~(*(int *)(*(void *)this + 4) >> 31);
      *((_DWORD *)this + 208) = v3;
      unint64_t v4 = (v3 + 63) >> 6;
      unint64_t v5 = (char *)*((void *)this + 105);
      uint64_t v6 = *(void *)(v2 + 848) - (void)v5;
      unint64_t v7 = v6 >> 3;
      uint64_t v10 = 0;
      if (v4 <= v6 >> 3)
      {
        if (v4 < v6 >> 3) {
          *(void *)(v2 + 848) = &v5[8 * v4];
        }
      }
      else
      {
        std::vector<unsigned long long>::__append(v2 + 840, v4 - (v6 >> 3), &v10);
        unint64_t v5 = *(char **)(v2 + 840);
      }
      if (v4 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v4;
      }
      bzero(v5, 8 * v8);
      uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*(operations_research::glop::VariablesInfo **)(v2 + 24));
      return (unsigned char *)operations_research::glop::ReducedCosts::UpdateEnteringCandidates<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(v2, IsRelevantBitRow);
    }
  }
  return this;
}

uint64_t operations_research::glop::ReducedCosts::GetReducedCosts(operations_research::glop::ReducedCosts *this)
{
  return (uint64_t)this + 720;
}

void operations_research::glop::ReducedCosts::RecomputeReducedCostsAndPrimalEnteringCandidatesIfNeeded(operations_research::glop::ReducedCosts *this)
{
  if (operations_research::glop::BasisFactorization::IsRefactorized(*((operations_research::glop::BasisFactorization **)this
                                                                     + 4)))
    *((unsigned char *)this + 664) = 0;
  if (*((unsigned char *)this + 667))
  {
    operations_research::glop::ReducedCosts::ComputeReducedCosts(this);
    if (*((unsigned char *)this + 888))
    {
      int v2 = *(_DWORD *)(*(void *)this + 4) & ~(*(int *)(*(void *)this + 4) >> 31);
      *((_DWORD *)this + 208) = v2;
      unint64_t v3 = (v2 + 63) >> 6;
      unint64_t v4 = (char *)*((void *)this + 105);
      uint64_t v5 = *((void *)this + 106) - (void)v4;
      unint64_t v6 = v5 >> 3;
      uint64_t v9 = 0;
      if (v3 <= v5 >> 3)
      {
        if (v3 < v5 >> 3) {
          *((void *)this + 106) = &v4[8 * v3];
        }
      }
      else
      {
        std::vector<unsigned long long>::__append((uint64_t)this + 840, v3 - (v5 >> 3), &v9);
        unint64_t v4 = (char *)*((void *)this + 105);
      }
      if (v3 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v3;
      }
      bzero(v4, 8 * v7);
      uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                       + 3));
      operations_research::glop::ReducedCosts::UpdateEnteringCandidates<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t)this, IsRelevantBitRow);
    }
  }
}

uint64_t operations_research::glop::ReducedCosts::GetDualValues(operations_research::glop::ReducedCosts *this)
{
  if (*((unsigned char *)this + 666)) {
    operations_research::glop::ReducedCosts::ComputeBasicObjective(this);
  }
  std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 93, *((char **)this + 84), *((char **)this + 85), (uint64_t)(*((void *)this + 85) - *((void *)this + 84)) >> 3);
  *((void *)this + 98) = *((void *)this + 97);
  operations_research::glop::BasisFactorization::LeftSolve(*((void *)this + 4), (uint64_t)this + 744);
  *((unsigned char *)this + 665) = 0;
  return (uint64_t)this + 744;
}

void operations_research::glop::ReducedCosts::ComputeReducedCosts(operations_research::glop::ReducedCosts *this)
{
  if (*((unsigned char *)this + 665))
  {
    if (*((unsigned char *)this + 666)) {
      operations_research::glop::ReducedCosts::ComputeBasicObjective(this);
    }
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 93, *((char **)this + 84), *((char **)this + 85), (uint64_t)(*((void *)this + 85) - *((void *)this + 84)) >> 3);
    *((void *)this + 98) = *((void *)this + 97);
    operations_research::glop::BasisFactorization::LeftSolve(*((void *)this + 4), (uint64_t)this + 744);
    *((unsigned char *)this + 665) = 0;
  }
  unint64_t v2 = *(int *)(*(void *)this + 4);
  v29[0] = 0;
  uint64_t v3 = *((void *)this + 90);
  unint64_t v4 = (*((void *)this + 91) - v3) >> 3;
  if (v2 <= v4)
  {
    if (v2 < v4) {
      *((void *)this + 91) = v3 + 8 * v2;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 720, v2 - v4, v29);
  }
  uint64_t IsBasicBitRow = operations_research::glop::VariablesInfo::GetIsBasicBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                             + 3));
  if ((int)v2 < 1)
  {
    double v13 = 0.0;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)this;
    uint64_t v8 = **((void **)this + 1);
    uint64_t v9 = *((void *)this + 87);
    uint64_t v10 = *(void *)(*(void *)this + 56);
    uint64_t v11 = *((void *)this + 90);
    uint64_t v12 = *(void *)(IsBasicBitRow + 8);
    double v13 = 0.0;
    do
    {
      uint64_t v16 = *(void *)(v10 + 8 * v6);
      unint64_t v17 = v6 + 1;
      uint64_t v18 = *(void *)(v10 + 8 * (v6 + 1));
      double v19 = 0.0;
      BOOL v20 = v18 <= v16;
      uint64_t v21 = v18 - v16;
      if (!v20)
      {
        double v22 = (int *)(*(void *)(v7 + 32) + 4 * v16);
        unint64_t v23 = (double *)(*(void *)(v7 + 8) + 8 * v16);
        do
        {
          double v24 = *v23++;
          double v25 = v24;
          uint64_t v26 = *v22++;
          double v19 = v19 + v25 * *(double *)(*((void *)this + 93) + 8 * v26);
          --v21;
        }
        while (v21);
      }
      double v14 = *(double *)(v8 + 8 * v6) + *(double *)(v9 + 8 * v6);
      *(double *)(v11 + 8 * v6) = v14 - v19;
      double v15 = vabdd_f64(v14, v19);
      if (v13 >= v15) {
        double v15 = v13;
      }
      if ((*(void *)(v12 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
        double v13 = v15;
      }
      ++v6;
    }
    while (v17 != v2);
  }
  *((unsigned char *)this + 667) = 0;
  *((unsigned char *)this + 669) = 1;
  *((unsigned char *)this + 668) = operations_research::glop::BasisFactorization::IsRefactorized(*((operations_research::glop::BasisFactorization **)this
                                                                                         + 4));
  double v27 = *((double *)this + 16);
  *((double *)this + 103) = v27;
  if (v13 > v27)
  {
    if (*operations_research::glop::ReducedCosts::ComputeReducedCosts(void)::vlocal__[0] >= 2
      && (operations_research::glop::ReducedCosts::ComputeReducedCosts(void)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::ComputeReducedCosts(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 422);
      unint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Changing dual_feasibility_tolerance to ", 39);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v29);
    }
    *((double *)this + 103) = v13;
  }
}

void sub_23CB83F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::ReducedCosts::UpdateEnteringCandidates<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 824);
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
  uint64_t result = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
  uint64_t v7 = *(unint64_t **)(a2 + 8);
  uint64_t v8 = *(unint64_t **)(a2 + 16);
  if (v7 != v8)
  {
    unint64_t v9 = *v7;
    if (*v7)
    {
      int v10 = 0;
      goto LABEL_17;
    }
    unint64_t v11 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    uint64_t v12 = (int)(v8 - v7);
    if ((int)v11 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    }
    if (v12 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v14 = v12 - 1;
    while (v14 != v9)
    {
      int v15 = v9 + 1;
      if (v7[++v9])
      {
        int v13 = v15;
        break;
      }
    }
    if (v13 != v11)
    {
      unint64_t v9 = v7[v13];
      int v10 = v13 << 6;
LABEL_17:
      int v18 = __clz(__rbit64(v9)) & 0x3F | v10;
      unint64_t v17 = (v9 - 1) & v9;
      int v19 = *(_DWORD *)(a2 + 40);
      if (v18 != v19) {
        goto LABEL_18;
      }
      return result;
    }
  }
  unint64_t v17 = 0;
  int v10 = 0;
  int v18 = -1;
  int v19 = *(_DWORD *)(a2 + 40);
  if (v19 != -1)
  {
LABEL_18:
    uint64_t v20 = *(void *)(a1 + 720);
    uint64_t v21 = *(void *)(a1 + 840);
    uint64_t v22 = *(void *)(CanDecreaseBitRow + 8);
    uint64_t v23 = *(void *)(result + 8);
    uint64_t v24 = (char *)v8 - (char *)v7;
    unint64_t v25 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    uint64_t v26 = (int)(v24 >> 3);
    uint64_t result = 1;
    while (1)
    {
      *(void *)(v21 + 8 * ((uint64_t)v18 >> 6)) = *(void *)(v22 + 8 * ((uint64_t)v18 >> 6)) & ((unint64_t)(*(double *)(v20 + 8 * v18) > v4) << v18) ^ *(void *)(v21 + 8 * ((uint64_t)v18 >> 6)) & ~(1 << v18) ^ *(void *)(v23 + 8 * ((uint64_t)v18 >> 6)) & ((unint64_t)(*(double *)(v20 + 8 * v18) < -v4) << v18);
      if (v17) {
        goto LABEL_20;
      }
      if ((v10 >> 6) + 1 > (int)v25) {
        int v27 = (v10 >> 6) + 1;
      }
      else {
        int v27 = v25;
      }
      uint64_t v28 = ((uint64_t)v10 >> 6) + 1;
      while (v28 < v26)
      {
        if (v7[v28++])
        {
          int v27 = v28 - 1;
          break;
        }
      }
      if (v27 == v25)
      {
        unint64_t v17 = 0;
        int v18 = -1;
        if (v19 == -1) {
          return result;
        }
      }
      else
      {
        unint64_t v17 = v7[v27];
        int v10 = v27 << 6;
LABEL_20:
        int v18 = (__clz(__rbit64(v17)) & 0x3F) + v10;
        v17 &= v17 - 1;
        if (v18 == v19) {
          return result;
        }
      }
    }
  }
  return result;
}

operations_research::glop::ReducedCosts::Stats *operations_research::glop::ReducedCosts::Stats::Stats(operations_research::glop::ReducedCosts::Stats *this)
{
  strcpy((char *)this, "ReducedCosts");
  *((unsigned char *)this + 23) = 12;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_23CE7FBD0;
  strcpy((char *)__p[0], "basic_objective_left_inverse_density");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::ReducedCosts::Stats *)((char *)this + 80), (long long *)__p, this);
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C4998;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "reduced_costs_accuracy");
  HIBYTE(__p[2]) = 22;
  operations_research::DistributionStat::DistributionStat((operations_research::glop::ReducedCosts::Stats *)((char *)this + 160), (long long *)__p, this);
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "cost_shift");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::ReducedCosts::Stats *)((char *)this + 240), (long long *)__p, this) = &unk_26F0C49F8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_23CB842D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*(void **)(v14 + 168));
  }
  *(void *)(v14 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0)
  {
    operator delete(*(void **)(v14 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

operations_research::glop::RevisedSimplex *operations_research::glop::RevisedSimplex::RevisedSimplex(operations_research::glop::RevisedSimplex *this)
{
  *(unsigned char *)this = 6;
  *(void *)((char *)this + 1) = 0;
  *(_DWORD *)((char *)this + 9) = 0;
  *((_OWORD *)this + 1) = 0u;
  unint64_t v2 = (operations_research::glop::RevisedSimplex *)((char *)this + 16);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 12) = 0u;
  uint64_t v3 = (char *)this + 216;
  double v4 = (char *)this + 256;
  uint64_t v5 = (char *)this + 280;
  *((void *)this + 49) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 47) = 0;
  *((_DWORD *)this + 96) = 0;
  *(_OWORD *)((char *)this + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((void *)this + 52) = (char *)this + 384;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 106) = -1;
  *((void *)this + 57) = 0;
  *(_OWORD *)((char *)this + 44google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((unsigned char *)this + 464) = 0;
  unint64_t v6 = (char *)this + 520;
  *((unsigned char *)this + 721) = 0;
  *((void *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  uint64_t v7 = (operations_research::glop::RevisedSimplex *)((char *)this + 840);
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 52google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 76google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  operations_research::glop::BasisFactorization::BasisFactorization((char *)this + 840, (char *)this + 16, (char *)this + 520);
  operations_research::glop::VariablesInfo::VariablesInfo((uint64_t)this + 5480, (uint64_t)v2, (uint64_t)v4, (uint64_t)v5);
  operations_research::glop::VariableValues::VariableValues((uint64_t)this + 5904, (uint64_t)this + 11616, (uint64_t)v2, (uint64_t)v6, (uint64_t)this + 5480, (uint64_t)v7);
  operations_research::glop::DualEdgeNorms::DualEdgeNorms((operations_research::glop::RevisedSimplex *)((char *)this + 6288), v7);
  operations_research::glop::PrimalEdgeNorms::PrimalEdgeNorms((operations_research::glop::RevisedSimplex *)((char *)this + 6944), v2, (operations_research::glop::RevisedSimplex *)((char *)this + 5480), v7);
  operations_research::glop::UpdateRow::UpdateRow();
  operations_research::glop::ReducedCosts::ReducedCosts((uint64_t)this + 8720, (uint64_t)v2, (uint64_t)v3, (uint64_t)v6, (uint64_t)this + 5480, (uint64_t)v7, (uint64_t)this + 16008);
  operations_research::glop::EnteringVariable::EnteringVariable();
  *((void *)this + 1289) = 0;
  *(_OWORD *)((char *)this + 1028google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 10296) = 0u;
  *(_OWORD *)((char *)this + 10248) = 0u;
  *(_OWORD *)((char *)this + 10264) = 0u;
  *(_OWORD *)((char *)this + 10216) = 0u;
  *(_OWORD *)((char *)this + 10232) = 0u;
  operations_research::glop::RevisedSimplex::IterationStats::IterationStats((operations_research::glop::RevisedSimplex *)((char *)this + 10320));
  operations_research::glop::RevisedSimplex::RatioTestStats::RatioTestStats((operations_research::glop::RevisedSimplex *)((char *)this + 10896));
  strcpy((char *)this + 11536, "SimplexFunctionStats");
  *((unsigned char *)this + 11559) = 20;
  *((_DWORD *)this + 289google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((void *)this + 1446) = 0;
  *((void *)this + 1448) = 0;
  *((void *)this + 1447) = 0;
  *((void *)this + 1451) = 0;
  *((void *)this + 145google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((void *)this + 1449) = (char *)this + 11600;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 11616, 0);
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 11912, 0);
  operations_research::glop::LuFactorization::LuFactorization((operations_research::glop::RevisedSimplex *)((char *)this + 12208));
  uint64_t v8 = 1;
  *((unsigned char *)this + 15932) = 1;
  *((_OWORD *)this + 996) = 0u;
  *((_OWORD *)this + 997) = 0u;
  *(_OWORD *)((char *)this + 15961) = 0u;
  *((void *)this + 1998) = 0;
  *((void *)this + 200google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  unsigned int v9 = 42;
  *((void *)this + 1999) = 0;
  uint64_t v10 = 4003;
  *((_DWORD *)this + 4002) = 42;
  do
  {
    int v11 = 1812433253 * (v9 ^ (v9 >> 30));
    unsigned int v9 = v11 + v8;
    *((_DWORD *)this + v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v10 + v11 - 4002;
    ++v8;
    ++v10;
  }
  while (v10 != 4626);
  *((void *)this + 2313) = 0;
  operations_research::glop::RevisedSimplex::SetParameters(this, (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  return this;
}

void sub_23CB8472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, operations_research::glop::RevisedSimplex::RatioTestStats *a10, operations_research::glop::RevisedSimplex::IterationStats *a11, operations_research::glop::EnteringVariable *a12, operations_research::glop::ReducedCosts *a13, operations_research::glop::UpdateRow *a14, operations_research::glop::DualEdgeNorms *a15, operations_research::glop::VariableValues *a16, operations_research::glop::ScatteredColumn *a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23)
{
  float64x2_t v34 = *v23;
  if (*v23)
  {
    v24[1999] = v34;
    operator delete(v34);
  }
  operations_research::glop::RevisedSimplex::RevisedSimplex(v30, v25);
  operations_research::glop::GlopParameters::~GlopParameters(v27);
  operations_research::glop::GlopParameters::~GlopParameters(v28);
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)(v24 + 1442));
  operations_research::glop::RevisedSimplex::RatioTestStats::~RatioTestStats(a10);
  operations_research::glop::RevisedSimplex::IterationStats::~IterationStats(a11);
  double v35 = v24[1280];
  if (v35)
  {
    v24[1281] = v35;
    operator delete(v35);
  }
  unint64_t v36 = *v31;
  if (*v31)
  {
    v24[1278] = v36;
    operator delete(v36);
  }
  operations_research::glop::EnteringVariable::~EnteringVariable(a12);
  operations_research::glop::ReducedCosts::~ReducedCosts(a13);
  operations_research::glop::UpdateRow::~UpdateRow(a14);
  operations_research::glop::PrimalEdgeNorms::~PrimalEdgeNorms(*(operations_research::glop::PrimalEdgeNorms **)(v33 - 88));
  operations_research::glop::DualEdgeNorms::~DualEdgeNorms(a15);
  operations_research::glop::VariableValues::~VariableValues(a16);
  operations_research::glop::VariablesInfo::~VariablesInfo(v26);
  operations_research::glop::BasisFactorization::~BasisFactorization(v32);
  uint64_t v37 = v24[102];
  if (v37)
  {
    v24[103] = v37;
    operator delete(v37);
  }
  operations_research::glop::ScatteredColumn::~ScatteredColumn(a17);
  float64x2_t v38 = v24[87];
  if (v38)
  {
    v24[88] = v38;
    operator delete(v38);
    int v39 = v24[84];
    if (!v39)
    {
LABEL_11:
      uint64_t v40 = v24[81];
      if (!v40) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }
  }
  else
  {
    int v39 = v24[84];
    if (!v39) {
      goto LABEL_11;
    }
  }
  v24[85] = v39;
  operator delete(v39);
  uint64_t v40 = v24[81];
  if (!v40)
  {
LABEL_12:
    unint64_t v41 = v24[78];
    if (!v41) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  v24[82] = v40;
  operator delete(v40);
  unint64_t v41 = v24[78];
  if (!v41)
  {
LABEL_13:
    double v42 = v24 + 68;
    double v43 = v24 + 72;
    uint64_t v44 = v24[75];
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  v24[79] = v41;
  operator delete(v41);
  double v42 = v24 + 68;
  double v43 = v24 + 72;
  uint64_t v44 = v24[75];
  if (!v44)
  {
LABEL_14:
    uint64_t v45 = *v43;
    if (!*v43) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  v24[76] = v44;
  operator delete(v44);
  uint64_t v45 = *v43;
  if (!*v43)
  {
LABEL_15:
    float64x2_t v46 = v24 + 49;
    operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(v42);
    float64x2_t v47 = *a18;
    if (!*a18) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  v24[73] = v45;
  operator delete(v45);
  float64x2_t v46 = v24 + 49;
  operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(v42);
  float64x2_t v47 = *a18;
  if (!*a18)
  {
LABEL_16:
    operations_research::glop::ScatteredColumn::~ScatteredColumn(v29);
    uint64_t v48 = *v46;
    if (!*v46) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  v24[66] = v47;
  operator delete(v47);
  operations_research::glop::ScatteredColumn::~ScatteredColumn(v29);
  uint64_t v48 = *v46;
  if (!*v46)
  {
LABEL_17:
    uint64_t v49 = *a19;
    if (!*a19) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  v24[50] = v48;
  operator delete(v48);
  uint64_t v49 = *a19;
  if (!*a19)
  {
LABEL_18:
    unsigned __int8 v50 = v24[41];
    if (!v50) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  v24[46] = v49;
  operator delete(v49);
  unsigned __int8 v50 = v24[41];
  if (!v50)
  {
LABEL_19:
    uint64_t v51 = v24[38];
    if (!v51) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  v24[42] = v50;
  operator delete(v50);
  uint64_t v51 = v24[38];
  if (!v51)
  {
LABEL_20:
    uint64_t v52 = *a20;
    if (!*a20) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
LABEL_35:
  v24[39] = v51;
  operator delete(v51);
  uint64_t v52 = *a20;
  if (!*a20)
  {
LABEL_21:
    unint64_t v53 = *a21;
    if (!*a21) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
LABEL_36:
  v24[36] = v52;
  operator delete(v52);
  unint64_t v53 = *a21;
  if (!*a21)
  {
LABEL_22:
    unint64_t v54 = *a22;
    if (!*a22) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
LABEL_37:
  v24[33] = v53;
  operator delete(v53);
  unint64_t v54 = *a22;
  if (!*a22)
  {
LABEL_23:
    unint64_t v55 = *a23;
    if (!*a23) {
      goto LABEL_24;
    }
    goto LABEL_39;
  }
LABEL_38:
  v24[28] = v54;
  operator delete(v54);
  unint64_t v55 = *a23;
  if (!*a23)
  {
LABEL_24:
    operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 104));
    operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 96));
    _Unwind_Resume(a1);
  }
LABEL_39:
  v24[25] = v55;
  operator delete(v55);
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 104));
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 96));
  _Unwind_Resume(a1);
}

void sub_23CB84A2C()
{
}

void sub_23CB84A34()
{
}

void sub_23CB84A3C()
{
}

void sub_23CB84A44()
{
}

void sub_23CB84A4C()
{
}

void sub_23CB84A54()
{
}

void sub_23CB84A5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  operations_research::glop::BasisFactorization::~BasisFactorization(v10);
  if (!*(void *)(v9 + 816)) {
    JUMPOUT(0x23CB8482CLL);
  }
  JUMPOUT(0x23CB84824);
}

void sub_23CB84A78()
{
  if (!*(void *)(v0 + 816)) {
    JUMPOUT(0x23CB8482CLL);
  }
  JUMPOUT(0x23CB84824);
}

double operations_research::glop::RevisedSimplex::SetParameters(operations_research::glop::RevisedSimplex *this, const operations_research::glop::GlopParameters *a2)
{
  uint64_t v4 = 0;
  unsigned int v5 = *((_DWORD *)a2 + 60);
  *((_DWORD *)this + 4002) = v5;
  uint64_t v6 = 1;
  do
  {
    int v7 = 1812433253 * (v5 ^ (v5 >> 30));
    unsigned int v5 = v7 + v6;
    *((_DWORD *)this + v4 + 4003) = v4 + v7 + 1;
    ++v6;
    ++v4;
  }
  while (v4 != 623);
  *((void *)this + 2313) = 0;
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 11912), a2);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 11616), a2);
  *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
  *((unsigned char *)this + 1704) = *((unsigned char *)this + 11813);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 1008), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 3336), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 5176), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::EnteringVariable::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 9616), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::ReducedCosts::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 8720), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));

  return operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
}

void operations_research::glop::EnteringVariable::~EnteringVariable(operations_research::glop::EnteringVariable *this)
{
  unint64_t v2 = (void *)*((void *)this + 72);
  if (v2)
  {
    *((void *)this + 73) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 69);
  if (v3)
  {
    *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 63);
  if (v4)
  {
    *((void *)this + 64) = v4;
    operator delete(v4);
  }
  *((void *)this + 52) = &unk_26F0BCDD8;
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::EnteringVariable *)((char *)this + 336));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::EnteringVariable *)((char *)this + 32));
}

void operations_research::glop::DualEdgeNorms::~DualEdgeNorms(operations_research::glop::DualEdgeNorms *this)
{
  unint64_t v2 = (void *)*((void *)this + 78);
  if (v2)
  {
    *((void *)this + 79) = v2;
    operator delete(v2);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::DualEdgeNorms *)((char *)this + 320));
  *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 271) < 0)
  {
    operator delete(*((void **)this + 31));
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_5:
      *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
      if ((*((char *)this + 111) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else
  {
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 191) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  operator delete(*((void **)this + 21));
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v3 = this;
    goto LABEL_8;
  }
LABEL_11:
  operator delete(*((void **)this + 11));
  uint64_t v3 = this;

LABEL_8:
  operations_research::StatsGroup::~StatsGroup(v3);
}

void **operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t operations_research::glop::RevisedSimplex::ClearStateForNextSolve(uint64_t this)
{
  *(void *)(this + 704) = *(void *)(this + 696);
  return this;
}

char **operations_research::glop::RevisedSimplex::LoadStateForNextSolve(uint64_t a1, char **a2)
{
  uint64_t result = (char **)(a1 + 696);
  if (result != a2) {
    uint64_t result = (char **)std::vector<operations_research::glop::VariableStatus>::__assign_with_size[abi:ne180100]<operations_research::glop::VariableStatus*,operations_research::glop::VariableStatus*>(result, *a2, a2[1], a2[1] - *a2);
  }
  *(unsigned char *)(a1 + 72google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
  return result;
}

uint64_t operations_research::glop::RevisedSimplex::NotifyThatMatrixIsUnchangedForNextSolve(uint64_t this)
{
  *(unsigned char *)(this + 721) = 1;
  return this;
}

void operations_research::glop::RevisedSimplex::Solve(operations_research::glop::RevisedSimplex *this@<X0>, const operations_research::glop::LinearProgram *a2@<X1>, operations_research::TimeLimit *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    uint64_t v12 = (char *)operator new(0x20uLL);
    strcpy(v12, "time_limit must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)&v98, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 137, 2);
    int v13 = (void *)google::LogMessage::stream((google::LogMessage *)&v98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, 28);
    google::LogMessage::~LogMessage((google::LogMessage *)&v98);
    std::string::__init_copy_ctor_external(&v94, v12, 0x1CuLL);
    operations_research::glop::Status::Status(a4, 3, (long long *)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    uint64_t v14 = v12;
LABEL_21:
    operator delete(v14);
    return;
  }
  uint64_t v8 = (absl::lts_2020_02_25 *)operations_research::glop::LinearProgram::IsInEquationForm(a2);
  if ((v8 & 1) == 0)
  {
    __p = operator new(0x30uLL);
    long long v93 = xmmword_23CE7ECB0;
    strcpy((char *)__p, "The problem is not in the equations form.");
    operations_research::glop::Status::Status(a4, 4, (long long *)&__p);
    if ((SHIBYTE(v93) & 0x80000000) == 0) {
      return;
    }
    uint64_t v14 = __p;
    goto LABEL_21;
  }
  unsigned __int8 v95 = &unk_26F0BCFF8;
  *(void *)&long long v96 = this;
  *((void *)&v96 + 1) = a3;
  v97 = &v95;
  v100 = (void **)&v98;
  v98 = (void (**)(void **))&unk_26F0BCFF8;
  long long v99 = v96;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v8);
  uint64_t v10 = *(void *)a3;
  operations_research::glop::RevisedSimplex::Initialize(this, a2, a4);
  if (!*(_DWORD *)a4)
  {
    if (*(char *)(a4 + 31) < 0) {
      operator delete(*(void **)(a4 + 8));
    }
    *((void *)this + 42) = *((void *)this + 41);
    operations_research::glop::UpdateRow::Invalidate((uint64_t)this + 7840);
    operations_research::glop::LuFactorization::Clear((operations_research::glop::RevisedSimplex *)((char *)this + 12208));
    *(unsigned char *)this = 6;
    *((unsigned char *)this + 15932) = 1;
    int v11 = (void *)((char *)this + 10264);
    *(_OWORD *)((char *)this + 10264) = 0u;
    *(_OWORD *)((char *)this + 1028google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
    *(_OWORD *)((char *)this + 10296) = 0u;
    *((unsigned char *)this + 72google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
    if (*_MergedGlobals_1[0] >= 1
      && (_MergedGlobals_1[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_1, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(this);
      operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(this);
      operations_research::glop::RevisedSimplex::DisplayBasicVariableStatistics(this);
      operations_research::glop::RevisedSimplex::DisplayProblem(this);
    }
    if (FLAGS_simplex_stop_after_first_basis)
    {
      operations_research::glop::RevisedSimplex::DisplayAllStats((size_t *)this);
      operations_research::glop::Status::Status(a4);
      goto LABEL_12;
    }
    int v15 = *((unsigned __int8 *)this + 11644);
    if (*off_26AECFB50[0] >= 1
      && (off_26AECFB50[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFB50, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 180);
      uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
      unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"------ ", 7);
      if (v15) {
        int v18 = "Dual simplex.";
      }
      else {
        int v18 = "Primal simplex.";
      }
      if (v15) {
        uint64_t v19 = 13;
      }
      else {
        uint64_t v19 = 15;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      google::LogMessage::~LogMessage((google::LogMessage *)v91);
    }
    if (*off_26AECFB58[0] >= 1
      && (off_26AECFB58[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFB58, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 181);
      uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"The matrix has ", 15);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" rows, ", 7);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" columns, ", 10);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" entries.", 9);
      google::LogMessage::~LogMessage((google::LogMessage *)v91);
    }
    if (*off_26AECFB60[0] >= 1
      && (off_26AECFB60[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFB60, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 187);
      uint64_t v24 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"------ First phase: feasibility.", 32);
      google::LogMessage::~LogMessage((google::LogMessage *)v91);
    }
    operations_research::glop::EnteringVariable::SetPricingRule((uint64_t)this + 9616, *((_DWORD *)this + 2913));
    if (v15)
    {
      if (*((unsigned char *)this + 11646)) {
        operations_research::glop::ReducedCosts::PerturbCosts((double ***)this + 1090);
      }
      operations_research::glop::VariablesInfo::MakeBoxedVariableRelevant((uint64_t)this + 5480, 0);
      operations_research::glop::RevisedSimplex::DualMinimize(this, a3, a4);
      if (*(_DWORD *)a4) {
        goto LABEL_12;
      }
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*(void **)(a4 + 8));
      }
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      if (*(unsigned char *)this != 2)
      {
        operations_research::glop::BasisFactorization::Refactorize((std::vector<int> *)this + 35, a4);
        if (*(_DWORD *)a4) {
          goto LABEL_12;
        }
        if (*(char *)(a4 + 31) < 0) {
          operator delete(*(void **)(a4 + 8));
        }
        operations_research::glop::RevisedSimplex::PermuteBasis(this);
        operations_research::glop::VariablesInfo::MakeBoxedVariableRelevant((uint64_t)this + 5480, 1);
        operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)this + 8720);
        uint64_t NonBasicBoxedVariables = operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
        operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((double *)this, NonBasicBoxedVariables, 0);
        operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
        operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      }
    }
    else
    {
      operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions((unsigned char *)this + 8720, 1);
      operations_research::glop::RevisedSimplex::Minimize(this, a3, a4);
      if (*(_DWORD *)a4) {
        goto LABEL_12;
      }
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*(void **)(a4 + 8));
      }
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      if (*(unsigned char *)this != 1)
      {
        operations_research::glop::RevisedSimplex::InitializeObjectiveAndTestIfUnchanged(this, a2);
        operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      }
    }
    operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    operations_research::glop::RevisedSimplex::DisplayErrors(this);
    *((unsigned char *)this + 15932) = 0;
    double v27 = (double)(CurrentTimeNanos - v10) * 0.000000001;
    *((double *)this + 1287) = (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v26) - *(void *)a3) * 0.000000001
                             - v27;
    uint64_t inited = operations_research::glop::EnteringVariable::SetPricingRule((uint64_t)this + 9616, *((_DWORD *)this + 2914));
    *((void *)this + 1284) = *((void *)this + 1283);
    if (*off_26AECFB68[0] >= 1)
    {
      if (off_26AECFB68[0] != &google::kLogSiteUninitialized
        || (uint64_t inited = google::InitVLOG3__((google *)off_26AECFB68, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), inited))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 241);
        unint64_t v29 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"------ Second phase: optimization.", 34);
        google::LogMessage::~LogMessage((google::LogMessage *)v91);
      }
    }
    if (*((double *)this + 1487) < 0.0)
    {
LABEL_63:
      if (*((unsigned char *)this + 11811) && *(unsigned char *)this != 2)
      {
        double v30 = *((double *)this + 1470);
        if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) > v30
          || operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) > v30)
        {
          goto LABEL_140;
        }
        unsigned int v31 = *(unsigned __int8 *)this;
        if (v31 > 8) {
          goto LABEL_141;
        }
        int v32 = 1 << v31;
        if ((v32 & 0x94) != 0)
        {
          double v33 = operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
        }
        else
        {
          if ((v32 & 0x122) == 0) {
            goto LABEL_141;
          }
          double v33 = operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
        }
        if (v33 > v30) {
LABEL_140:
        }
          *(unsigned char *)this = 11;
      }
LABEL_141:
      operations_research::glop::RevisedSimplex::SaveState(this);
      *((double *)this + 71) = operations_research::glop::RevisedSimplex::ComputeInitialProblemObjectiveValue(this);
      DualValues = (char **)operations_research::glop::ReducedCosts::GetDualValues((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      if ((char **)((char *)this + 576) != DualValues) {
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 72, *DualValues, DualValues[1], (DualValues[1] - *DualValues) >> 3);
      }
      ReducedCosts = (char **)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      unint64_t v60 = (operations_research::glop::RevisedSimplex *)((char *)this + 600);
      if ((char **)((char *)this + 600) != ReducedCosts) {
        unint64_t v60 = (absl::lts_2020_02_25 *)std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v60, *ReducedCosts, ReducedCosts[1], (ReducedCosts[1] - *ReducedCosts) >> 3);
      }
      if (!*((unsigned char *)a2 + 440))
      {
        int v65 = *(unsigned __int8 *)this;
        if ((v65 & 0xFE) == 4)
        {
          double v66 = -INFINITY;
          if (v65 == 5) {
            double v66 = INFINITY;
          }
          goto LABEL_172;
        }
LABEL_173:
        double v86 = (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v60) - *(void *)a3) * 0.000000001 - v27;
        *((double *)this + 1286) = v86;
        *((double *)this + 1288) = v86 - *((double *)this + 1287);
        *((void *)this + 1285) = *((void *)this + 1283) - *((void *)this + 1284);
        operations_research::glop::RevisedSimplex::DisplayAllStats((size_t *)this);
        operations_research::glop::Status::Status(a4);
        goto LABEL_12;
      }
      uint64_t v61 = (float64x2_t *)*((void *)this + 72);
      unint64_t v62 = *((void *)this + 73) - (void)v61;
      if ((int)(v62 >> 3) >= 1)
      {
        unint64_t v63 = (v62 >> 3);
        if (v63 < 4)
        {
          unint64_t v64 = 0;
LABEL_156:
          unint64_t v71 = v64 - v63;
          uint64_t v72 = &v61->f64[v64];
          do
          {
            *uint64_t v72 = -*v72;
            ++v72;
            BOOL v73 = __CFADD__(v71++, 1);
          }
          while (!v73);
          goto LABEL_159;
        }
        uint64_t v67 = (v62 >> 3) & 3;
        unint64_t v64 = v63 - v67;
        unsigned __int8 v68 = v61 + 1;
        unint64_t v69 = v63 - v67;
        do
        {
          float64x2_t v70 = vnegq_f64(*v68);
          v68[-1] = vnegq_f64(v68[-1]);
          float64x2_t *v68 = v70;
          v68 += 2;
          v69 -= 4;
        }
        while (v69);
        if (v67) {
          goto LABEL_156;
        }
      }
LABEL_159:
      uint64_t v74 = (float64x2_t *)*((void *)this + 75);
      unint64_t v75 = *((void *)this + 76) - (void)v74;
      if ((int)(v75 >> 3) < 1) {
        goto LABEL_168;
      }
      unint64_t v76 = (v75 >> 3);
      if (v76 >= 4)
      {
        uint64_t v78 = (v75 >> 3) & 3;
        unint64_t v77 = v76 - v78;
        unint64_t v79 = v74 + 1;
        unint64_t v80 = v76 - v78;
        do
        {
          float64x2_t v81 = vnegq_f64(*v79);
          v79[-1] = vnegq_f64(v79[-1]);
          *unint64_t v79 = v81;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (!v78)
        {
LABEL_168:
          int v84 = *(unsigned __int8 *)this;
          if ((v84 & 0xFE) == 4)
          {
            double v85 = -INFINITY;
            if (v84 == 5) {
              double v85 = INFINITY;
            }
            double v66 = -v85;
LABEL_172:
            *((double *)this + 71) = v66;
            goto LABEL_173;
          }
          goto LABEL_173;
        }
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v82 = v77 - v76;
      unint64_t v83 = &v74->f64[v77];
      do
      {
        *unint64_t v83 = -*v83;
        ++v83;
        BOOL v73 = __CFADD__(v82++, 1);
      }
      while (!v73);
      goto LABEL_168;
    }
    uint64_t v90 = (uint64_t *)((char *)this + 2880);
    int v34 = 1;
    while (1)
    {
      if (*((unsigned char *)this + 15933) || *v11 && *v11 >= *((void *)this + 1473)) {
        goto LABEL_63;
      }
      unint64_t v36 = (unsigned __int8 *)*((void *)a3 + 15);
      if (v36)
      {
        unsigned __int8 v37 = atomic_load(v36);
        if (v37) {
          goto LABEL_63;
        }
      }
      if (fmax(*((double *)a3 + 13) - *((double *)a3 + 14), 0.0) <= 0.0) {
        goto LABEL_63;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v39 = v38;
      uint64_t v40 = *((void *)a3 + 3) <= v38 - *((void *)a3 + 1) ? v38 - *((void *)a3 + 1) : *((void *)a3 + 3);
      operations_research::RunningMax<long long>::Add((int *)a3 + 8, v40);
      *((void *)a3 + 1) = v39;
      if (*(void *)(*((void *)a3 + 5) + 8 * *((int *)a3 + 17)) + v39 >= *((void *)a3 + 2))
      {
        if (FLAGS_time_limit_use_usertime
          && ((double v43 = *((double *)a3 + 12), !*((unsigned char *)a3 + 72))
            ? (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v44 = *((void *)a3 + 11))
            : (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v44 = absl::lts_2020_02_25::GetCurrentTimeNanos(v41) - *((void *)a3 + 10) + *((void *)a3 + 11)),
              double v45 = v43 + (double)v44 * -0.000000001,
              v45 > 0.0001))
        {
          char v42 = 0;
          uint64_t v46 = *((void *)a3 + 1) + (uint64_t)(v45 * 1000000000.0);
        }
        else
        {
          uint64_t v46 = 0;
          char v42 = 1;
        }
        *((void *)a3 + 2) = v46;
      }
      else
      {
        char v42 = 0;
      }
      if (v42) {
        goto LABEL_63;
      }
      if (FLAGS_simplex_stop_after_feasibility) {
        goto LABEL_63;
      }
      int v47 = *(unsigned __int8 *)this;
      if ((v47 - 7) >= 2) {
        goto LABEL_63;
      }
      if (v47 == 7)
      {
        operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions((unsigned char *)this + 8720, 1);
        operations_research::glop::RevisedSimplex::Minimize(this, a3, a4);
      }
      else
      {
        operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions((unsigned char *)this + 8720, 0);
        operations_research::glop::RevisedSimplex::DualMinimize(this, a3, a4);
      }
      if (*(_DWORD *)a4) {
        goto LABEL_12;
      }
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*(void **)(a4 + 8));
      }
      operations_research::glop::VariableValues::ResetAllNonBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      operations_research::glop::BasisFactorization::Refactorize((std::vector<int> *)this + 35, a4);
      if (*(_DWORD *)a4) {
        goto LABEL_12;
      }
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*(void **)(a4 + 8));
      }
      if (*((void *)this + 360) != *((void *)this + 361))
      {
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(v90, (std::vector<int> *)((char *)this + 520));
        if (*((void *)this + 45) != *((void *)this + 46)) {
          operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(v90, (char **)this + 45);
        }
        operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation((uint64_t)this + 8720);
        operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation((uint64_t)this + 6288, v90);
        *((void *)this + 361) = *((void *)this + 360);
        *((void *)this + 364) = *((void *)this + 363);
      }
      operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      operations_research::glop::RevisedSimplex::DisplayErrors(this);
      if (*(unsigned char *)this)
      {
        if (*(unsigned char *)this == 5)
        {
          double v87 = *((double *)this + 1470);
          if ((operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) > v87
             || operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) > v87
             || operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) > v87)
            && *off_26AECFB70[0] >= 1
            && (off_26AECFB70[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_26AECFB70, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 311);
            uint64_t v88 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
            uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"DUAL_UNBOUNDED was reported, but the residual and/or ", 53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"dual infeasibility is above the tolerance", 41);
            google::LogMessage::~LogMessage((google::LogMessage *)v91);
          }
          goto LABEL_63;
        }
        goto LABEL_73;
      }
      double v48 = *((double *)this + 1470);
      if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) <= v48
        && operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) <= v48)
      {
        break;
      }
      if (*off_26AECFB78[0] >= 1)
      {
        if (off_26AECFB78[0] != &google::kLogSiteUninitialized
          || (uint64_t inited = google::InitVLOG3__((google *)off_26AECFB78, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), inited))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 325);
          uint64_t v49 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"OPTIMAL was reported, yet one of the residuals is above the solution feasibility tolerance after the shift/perturbation are removed.", 132);
LABEL_116:
          google::LogMessage::~LogMessage((google::LogMessage *)v91);
        }
      }
LABEL_117:
      if (*((unsigned char *)this + 11811))
      {
        char v50 = 11;
LABEL_119:
        *(unsigned char *)this = v50;
      }
LABEL_73:
      double v35 = (double)v34++;
      if (*((double *)this + 1487) < v35) {
        goto LABEL_63;
      }
    }
    double v51 = *((double *)this + 1461);
    double v52 = *((double *)this + 1462);
    double v53 = operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
    double v54 = operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    if (v53 <= v51 || v54 <= v52)
    {
      if (v53 <= v51)
      {
        if (v54 <= v52) {
          goto LABEL_73;
        }
        if (*off_26AECFB90[0] >= 1)
        {
          if (off_26AECFB90[0] != &google::kLogSiteUninitialized
            || (uint64_t inited = google::InitVLOG3__((google *)off_26AECFB90, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), inited))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 354);
            unint64_t v57 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Re-optimizing with primal simplex ... ", 38);
            google::LogMessage::~LogMessage((google::LogMessage *)v91);
          }
        }
        char v50 = 7;
      }
      else if (*off_26AECFB88[0] < 1 {
             || off_26AECFB88[0] == &google::kLogSiteUninitialized
      }
             && (uint64_t inited = google::InitVLOG3__((google *)off_26AECFB88, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), !inited))
      {
        char v50 = 8;
      }
      else
      {
        google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 351);
        unint64_t v56 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Re-optimizing with dual simplex ... ", 36);
        google::LogMessage::~LogMessage((google::LogMessage *)v91);
        char v50 = 8;
      }
      goto LABEL_119;
    }
    if (*off_26AECFB80[0] < 1) {
      goto LABEL_117;
    }
    if (off_26AECFB80[0] == &google::kLogSiteUninitialized)
    {
      uint64_t inited = google::InitVLOG3__((google *)off_26AECFB80, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1);
      if (!inited) {
        goto LABEL_117;
      }
    }
    google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 344);
    unint64_t v55 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"OPTIMAL was reported, yet both of the infeasibility are above the tolerance after the shift/perturbation are removed.", 117);
    goto LABEL_116;
  }
LABEL_12:
  if (!v100) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*((void (**)(void **))*v100 + 6))(v100);
  if (v100 == (void **)&v98)
  {
    v98[4]((void **)&v98);
  }
  else if (v100)
  {
    (*((void (**)(void))*v100 + 5))();
  }
}

void sub_23CB85EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB85F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB86118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CB8612C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::Initialize(operations_research::glop::RevisedSimplex *this@<X0>, const operations_research::glop::LinearProgram *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = (char *)this + 15933;
  uint64_t v6 = (char *)this + 11644;
  int v7 = (operations_research::glop::RevisedSimplex *)((char *)this + 11616);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 11616), (operations_research::glop::RevisedSimplex *)((char *)this + 11912));
  *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
  *((unsigned char *)this + 1704) = v6[169];
  float64x2_t v81 = (operations_research::glop::RevisedSimplex *)((char *)this + 1008);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 1008), v7);
  unint64_t v80 = (operations_research::glop::RevisedSimplex *)((char *)this + 3336);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 3336), v7);
  unint64_t v79 = (operations_research::glop::RevisedSimplex *)((char *)this + 5176);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 5176), v7);
  uint64_t v78 = (operations_research::glop::RevisedSimplex *)((char *)this + 9616);
  operations_research::glop::EnteringVariable::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 9616), v7);
  unint64_t v83 = (operations_research::glop::RevisedSimplex *)((char *)this + 8720);
  operations_research::glop::ReducedCosts::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 8720), v7);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), v7);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), v7);
  operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), v7);
  int v88 = 0;
  __int16 v87 = 0;
  if (*((void *)this + 87) == *((void *)this + 88) || !*((unsigned char *)this + 721))
  {
    int v9 = operations_research::glop::RevisedSimplex::InitializeMatrixAndTestIfUnchanged((uint64_t)this, (uint64_t)a2, (BOOL *)&v87 + 1, (BOOL *)&v87, &v88);
    if ((_BYTE)v87)
    {
      if (v88 >= 1)
      {
        uint64_t v10 = *(int *)((char *)this + 9);
        uint64_t v11 = v10 - v88;
        if ((int)v10 - v88 <= 0)
        {
          uint64_t v13 = *((void *)a2 + 20);
          uint64_t v14 = *((void *)a2 + 23);
LABEL_14:
          uint64_t v15 = v10 - v88;
          while (*(double *)(v13 + 8 * v15) == 0.0 || *(double *)(v14 + 8 * v15) == 0.0)
          {
            if (++v15 >= v10)
            {
              uint64_t v16 = *(int *)((char *)this + 5);
              if ((int)v10 >= (int)v16)
              {
                int v76 = 1;
                BOOL v77 = 1;
                goto LABEL_24;
              }
              uint64_t v17 = *((void *)this + 32);
              if (*(double *)(v17 + 8 * v11) == *(double *)(v13 + 8 * v10))
              {
                uint64_t v18 = *((void *)this + 35);
                if (*(double *)(v18 + 8 * v11) == *(double *)(v14 + 8 * v10))
                {
                  uint64_t v66 = 0;
                  uint64_t v67 = 8 * v10 + 8;
                  uint64_t v68 = v14 + v67;
                  uint64_t v69 = v67 - 8 * v88;
                  uint64_t v70 = v18 + v69;
                  uint64_t v71 = v17 + v69;
                  uint64_t v72 = v13 + v67;
                  do
                  {
                    uint64_t v73 = v66;
                    if (~v10 + v16 == v66) {
                      break;
                    }
                    if (*(double *)(v71 + 8 * v66) != *(double *)(v72 + 8 * v66)) {
                      break;
                    }
                    double v74 = *(double *)(v70 + 8 * v66);
                    double v75 = *(double *)(v68 + 8 * v66++);
                  }
                  while (v74 == v75);
                  BOOL v77 = v10 + v73 + 1 >= v16;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
          uint64_t v13 = *((void *)a2 + 20);
          uint64_t v14 = *((void *)a2 + 23);
          while (*(double *)(*((void *)this + 32) + v12) == *(double *)(v13 + v12)
               && *(double *)(*((void *)this + 35) + v12) == *(double *)(v14 + v12))
          {
            v12 += 8;
            if (8 * (v10 - v88) == v12) {
              goto LABEL_14;
            }
          }
        }
      }
      BOOL v77 = 0;
LABEL_23:
      int v76 = 1;
    }
    else
    {
      int v76 = 0;
      BOOL v77 = 0;
    }
LABEL_24:
    int v8 = v9;
  }
  else
  {
    int v76 = 0;
    BOOL v77 = 0;
    int v8 = 1;
  }
  *((unsigned char *)this + 721) = 0;
  int v19 = operations_research::glop::RevisedSimplex::InitializeObjectiveAndTestIfUnchanged(this, a2);
  BOOL v20 = operations_research::glop::RevisedSimplex::InitializeBoundsAndTestIfUnchanged(this, a2);
  BOOL v21 = v20;
  if (v8 && v6[1])
  {
    if (((v19 ^ 1 | v20) & 1) == 0)
    {
      *((_DWORD *)this + 2908) |= 1u;
      char *v6 = 1;
      *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
      *((unsigned char *)this + 1704) = v6[169];
      operations_research::glop::GlopParameters::CopyFrom(v81, v7);
      operations_research::glop::GlopParameters::CopyFrom(v80, v7);
      operations_research::glop::GlopParameters::CopyFrom(v79, v7);
      operations_research::glop::EnteringVariable::SetParameters(v78, v7);
      operations_research::glop::ReducedCosts::SetParameters(v83, v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), v7);
      operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), v7);
    }
    if (((!v21 | v19) & 1) == 0)
    {
      *((_DWORD *)this + 2908) |= 1u;
      char *v6 = 0;
      *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
      *((unsigned char *)this + 1704) = v6[169];
      operations_research::glop::GlopParameters::CopyFrom(v81, v7);
      operations_research::glop::GlopParameters::CopyFrom(v80, v7);
      operations_research::glop::GlopParameters::CopyFrom(v79, v7);
      operations_research::glop::EnteringVariable::SetParameters(v78, v7);
      operations_research::glop::ReducedCosts::SetParameters(v83, v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), v7);
      operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), v7);
    }
  }
  *unsigned int v5 = 0;
  double v22 = *((double *)this + 1470);
  double v24 = *((double *)this + 30);
  double v23 = *((double *)this + 31);
  double v25 = 1.0 - v22;
  uint64_t v26 = 11840;
  if (v23 >= 0.0) {
    uint64_t v27 = 11840;
  }
  else {
    uint64_t v27 = 11832;
  }
  double v28 = *(double *)((char *)this + v27) / v23 - v24;
  double v29 = v22 + 1.0;
  uint64_t v30 = fabs(v28);
  if (v23 >= 0.0) {
    uint64_t v26 = 11832;
  }
  if (v30 >= 0x7FF0000000000000) {
    double v29 = 1.0;
  }
  double v31 = v28 * v29;
  double v32 = *(double *)((char *)this + v26) / v23 - v24;
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    double v33 = 1.0;
  }
  else {
    double v33 = v25;
  }
  *((double *)this + 22) = v32 * v33;
  *((double *)this + 23) = v31;
  if (*off_26AECFBE0[0] >= 1
    && (off_26AECFBE0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFBE0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    operations_research::glop::RevisedSimplex::SetVariableNames(this);
  }
  if (*((void *)this + 87) != *((void *)this + 88) && !*((unsigned char *)this + 720))
  {
    if (!*v6)
    {
      operations_research::glop::DualEdgeNorms::Clear((uint64_t)this + 6288);
      *((void *)this + 46) = *((void *)this + 45);
      if ((v8 & v21) != 1)
      {
        if ((v77 & v76) != 1) {
          goto LABEL_47;
        }
        int v48 = v88;
        operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, v88);
        uint64_t v49 = (int *)*((void *)this + 65);
        char v50 = (int *)*((void *)this + 66);
        if (v49 != v50)
        {
          int v51 = *(_DWORD *)((char *)this + 9) - v48;
          do
          {
            if (*v49 >= v51) {
              *v49 += v48;
            }
            ++v49;
          }
          while (v49 != v50);
        }
        operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
      }
      operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
      goto LABEL_113;
    }
    operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
    if (v19)
    {
      if (v8)
      {
        if (!v21)
        {
          operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, 0);
          operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
        }
        goto LABEL_113;
      }
      if (HIBYTE(v87))
      {
        operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, 0);
        operations_research::glop::DualEdgeNorms::ResizeOnNewRows((uint64_t)this + 6288, *(_DWORD *)((char *)this + 1));
        operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
        *((void *)this + 46) = *((void *)this + 45);
        operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)this + 65, (uint64_t)&v84);
        int v64 = v84;
        if (v86 < 0) {
          operator delete(__p);
        }
        if (!v64) {
          goto LABEL_113;
        }
      }
    }
  }
LABEL_47:
  if (*((void *)this + 87) == *((void *)this + 88)) {
    goto LABEL_98;
  }
  operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, 0);
  std::vector<int>::assign((std::vector<int> *)((char *)this + 520), *(int *)((char *)this + 1), &operations_research::glop::kInvalidCol);
  uint64_t IsBasicBitRow = operations_research::glop::VariablesInfo::GetIsBasicBitRow((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  double v35 = *(unint64_t **)(IsBasicBitRow + 8);
  unint64_t v36 = *(unint64_t **)(IsBasicBitRow + 16);
  if (v35 != v36)
  {
    unint64_t v37 = *v35;
    if (*v35)
    {
      int v38 = 0;
      goto LABEL_76;
    }
    unint64_t v39 = (unint64_t)((char *)v36 - (char *)v35) >> 3;
    uint64_t v40 = (int)(v36 - v35);
    if ((int)v39 <= 1) {
      int v41 = 1;
    }
    else {
      int v41 = (unint64_t)((char *)v36 - (char *)v35) >> 3;
    }
    if (v40 <= 1) {
      uint64_t v40 = 1;
    }
    uint64_t v42 = v40 - 1;
    while (v42 != v37)
    {
      int v43 = v37 + 1;
      if (v35[++v37])
      {
        int v41 = v43;
        break;
      }
    }
    if (v41 != v39)
    {
      unint64_t v37 = v35[v41];
      int v38 = v41 << 6;
LABEL_76:
      int v46 = __clz(__rbit64(v37)) & 0x3F | v38;
      unint64_t v45 = (v37 - 1) & v37;
      int v47 = *(_DWORD *)(IsBasicBitRow + 40);
      if (v46 != v47) {
        goto LABEL_77;
      }
      goto LABEL_90;
    }
  }
  unint64_t v45 = 0;
  int v38 = 0;
  int v46 = -1;
  int v47 = *(_DWORD *)(IsBasicBitRow + 40);
  if (v47 != -1)
  {
LABEL_77:
    uint64_t v52 = 0;
    uint64_t v53 = *((void *)this + 65);
    uint64_t v54 = (char *)v36 - (char *)v35;
    unint64_t v55 = (unint64_t)((char *)v36 - (char *)v35) >> 3;
    uint64_t v56 = (int)(v54 >> 3);
    while (1)
    {
      *(_DWORD *)(v53 + 4 * v52) = v46;
      if (v45) {
        goto LABEL_79;
      }
      if ((v38 >> 6) + 1 > (int)v55) {
        int v57 = (v38 >> 6) + 1;
      }
      else {
        int v57 = v55;
      }
      uint64_t v58 = ((uint64_t)v38 >> 6) + 1;
      while (v58 < v56)
      {
        if (v35[v58++])
        {
          int v57 = v58 - 1;
          break;
        }
      }
      if (v57 == v55)
      {
        unint64_t v45 = 0;
        int v46 = -1;
        ++v52;
        if (v47 == -1) {
          break;
        }
      }
      else
      {
        unint64_t v45 = v35[v57];
        int v38 = v57 << 6;
LABEL_79:
        int v46 = (__clz(__rbit64(v45)) & 0x3F) + v38;
        v45 &= v45 - 1;
        ++v52;
        if (v46 == v47) {
          break;
        }
      }
    }
  }
LABEL_90:
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::RevisedSimplex *)((char *)this + 840));
  operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
  operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
  operations_research::glop::DualEdgeNorms::Clear((uint64_t)this + 6288);
  *((void *)this + 46) = *((void *)this + 45);
  operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)this + 65, (uint64_t)&v84);
  int v60 = v84;
  if ((v86 & 0x80000000) == 0)
  {
    if (!v84) {
      goto LABEL_113;
    }
    goto LABEL_94;
  }
  operator delete(__p);
  if (!v60)
  {
LABEL_113:
    uint64_t v62 = a3;
    if (*off_26AECFBF8[0] >= 1
      && (off_26AECFBF8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFBF8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1323);
      int v65 = (void *)google::LogMessage::stream((google::LogMessage *)&v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Incremental solve.", 18);
      google::LogMessage::~LogMessage((google::LogMessage *)&v84);
    }
LABEL_117:
    operations_research::glop::Status::Status(v62);
    return;
  }
LABEL_94:
  if (*off_26AECFBE8[0] >= 1
    && (off_26AECFBE8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFBE8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1309);
    uint64_t v61 = (void *)google::LogMessage::stream((google::LogMessage *)&v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"RevisedSimplex is not using the warm start basis because it is not factorizable.", 80);
    google::LogMessage::~LogMessage((google::LogMessage *)&v84);
  }
LABEL_98:
  uint64_t v62 = a3;
  if (*off_26AECFBF0[0] >= 1
    && (off_26AECFBF0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFBF0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1315);
    unint64_t v63 = (void *)google::LogMessage::stream((google::LogMessage *)&v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Solve from scratch.", 19);
    google::LogMessage::~LogMessage((google::LogMessage *)&v84);
  }
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::RevisedSimplex *)((char *)this + 840));
  operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
  operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
  operations_research::glop::DualEdgeNorms::Clear((uint64_t)this + 6288);
  *((void *)this + 46) = *((void *)this + 45);
  operations_research::glop::RevisedSimplex::CreateInitialBasis(this, a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    goto LABEL_117;
  }
}

void sub_23CB86C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CB86C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CB86C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(operations_research::glop::RevisedSimplex *this)
{
  unint64_t v2 = *(int *)((char *)this + 1);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  if (!v2)
  {
    uint64_t v4 = 0;
    uint64_t v6 = *(unsigned int *)((char *)this + 5);
    if ((int)v6 < 1) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if ((v2 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = operator new(8 * ((v2 - 1) >> 6) + 8);
  uint64_t v4 = v3;
  if (v2 >= 0x41) {
    unint64_t v5 = (v2 - 1) >> 6;
  }
  else {
    unint64_t v5 = 0;
  }
  v3[v5] = 0;
  if (v2 >= 0x40) {
    bzero(v3, 8 * (v2 >> 6));
  }
  if ((v2 & 0x3F) != 0) {
    v4[v2 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
  uint64_t v6 = *(unsigned int *)((char *)this + 5);
  if ((int)v6 >= 1)
  {
LABEL_13:
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 9);
    uint64_t v9 = *((void *)this + 6);
    do
    {
      uint64_t v10 = *(void *)(v8 + 8 * v7++);
      uint64_t v11 = *(void *)(v8 + 8 * v7) - v10;
      if (v11 >= 1)
      {
        uint64_t v12 = (int *)(v9 + 4 * v10);
        do
        {
          int v13 = *v12++;
          *(void *)((char *)v4 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          --v11;
        }
        while (v11);
      }
    }
    while (v7 != v6);
  }
LABEL_19:
  if ((int)v2 < 1)
  {
    uint64_t v15 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      if (((*(void *)((char *)v4 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        uint64_t v15 = (v15 + 1);
        if (*operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(void)::vlocal__[0] >= 1
          && (operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(void)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1388);
          uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Row ", 4);
          uint64_t v17 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is empty.", 10);
          google::LogMessage::~LogMessage((google::LogMessage *)v19);
        }
      }
      ++v14;
    }
    while ((uint64_t)v14 < *(int *)((char *)this + 1));
  }
  operator delete(v4);
  return v15;
}

void sub_23CB86E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CB86E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(operations_research::glop::RevisedSimplex *this)
{
  if (*(int *)((char *)this + 5) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  do
  {
    if (*(void *)(*((void *)this + 9) + 8 * v2 + 8) == *(void *)(*((void *)this + 9) + 8 * v2))
    {
      uint64_t v3 = (v3 + 1);
      if (*operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(void)::vlocal__[0] >= 1
        && (operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(void)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v7, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1399);
        uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Column ", 7);
        unint64_t v5 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" is empty.", 10);
        google::LogMessage::~LogMessage((google::LogMessage *)v7);
      }
    }
    ++v2;
  }
  while (v2 < *(int *)((char *)this + 5));
  return v3;
}

void sub_23CB86FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::RevisedSimplex::DisplayBasicVariableStatistics(operations_research::glop::RevisedSimplex *this)
{
  TypeRow = (void *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  uint64_t v3 = *(unsigned int *)((char *)this + 1);
  if ((int)v3 >= 1)
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    double v9 = *((double *)this + 1461);
    uint64_t v10 = (int *)*((void *)this + 65);
    do
    {
      uint64_t v12 = *v10++;
      int v11 = v12;
      uint64_t v13 = 8 * v12;
      double v14 = *(double *)(*((void *)this + 743) + 8 * v12);
      if (!*(unsigned char *)(*TypeRow + v12)) {
        ++v5;
      }
      double v15 = *(double *)(*((void *)this + 35) + v13);
      double v16 = *(double *)(*((void *)this + 32) + v13);
      int v17 = v14 < v16 - v9 || v14 > v9 + v15;
      if (v11 >= *(_DWORD *)((char *)this + 9)) {
        ++v7;
      }
      BOOL v18 = v14 == v15;
      v8 += v17;
      if (v14 == v16) {
        BOOL v18 = 1;
      }
      int v19 = v6 + v18;
      if (v16 == v15) {
        ++v4;
      }
      else {
        int v6 = v19;
      }
      --v3;
    }
    while (v3);
  }
  if (*off_26AECFC00[0] > 0
    && (off_26AECFC00[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFC00, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1362);
    uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Basis size: ", 12);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_26AECFC08[0] >= 1
    && (off_26AECFC08[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFC08, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1363);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Number of basic infeasible variables: ", 38);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_26AECFC10[0] >= 1
    && (off_26AECFC10[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFC10, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1365);
    uint64_t v22 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Number of basic slack variables: ", 33);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_26AECFC18[0] >= 1
    && (off_26AECFC18[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFC18, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1366);
    double v23 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Number of basic variables at bound: ", 36);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_26AECFC20[0] >= 1
    && (off_26AECFC20[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFC20, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1367);
    double v24 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Number of basic fixed variables: ", 33);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_26AECFC28[0] >= 1
    && (off_26AECFC28[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFC28, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1368);
    double v25 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Number of basic free variables: ", 32);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
}

void sub_23CB873F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB8740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB87420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB87434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB87448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB8745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::RevisedSimplex::DisplayProblem(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*off_26AECFD48[0] >= 3
    && (off_26AECFD48[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFD48, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
  {
    operations_research::glop::RevisedSimplex::DisplayInfoOnVariables(this);
    char v35 = 5;
    strcpy((char *)&v33, "min: ");
    if (*(int *)((char *)this + 5) < 1) {
      goto LABEL_15;
    }
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    char v4 = 0;
    do
    {
      double v5 = *(double *)(*((void *)this + 27) + 8 * v3);
      BOOL v6 = v5 != 0.0;
      operations_research::glop::StringifyMonomial(*((void *)this + 68) + v2, FLAGS_simplex_display_numbers_as_fractions, (uint64_t)&__p, v5);
      uint64_t v7 = v32;
      if ((v32 & 0x80u) == 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      if ((v32 & 0x80u) != 0) {
        uint64_t v7 = v31;
      }
      unint64_t v36 = p_p;
      uint64_t v37 = v7;
      absl::lts_2020_02_25::StrAppend((uint64_t)&v33, (uint64_t)&v36);
      if ((char)v32 < 0) {
        operator delete(__p);
      }
      v4 |= v6;
      ++v3;
      v2 += 24;
    }
    while (v3 < *(int *)((char *)this + 5));
    if ((v4 & 1) == 0)
    {
LABEL_15:
      unint64_t v36 = " 0";
      uint64_t v37 = 2;
      absl::lts_2020_02_25::StrAppend((uint64_t)&v33, (uint64_t)&v36);
    }
    if (*off_26AECFD50[0] >= 3
      && (off_26AECFD50[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFD50, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3131);
      double v9 = (void *)google::LogMessage::stream((google::LogMessage *)&v36);
      if (v35 >= 0) {
        uint64_t v10 = &v33;
      }
      else {
        uint64_t v10 = v33;
      }
      if (v35 >= 0) {
        uint64_t v11 = v35;
      }
      else {
        uint64_t v11 = v34;
      }
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)";", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)&v36);
    }
    if (*(int *)((char *)this + 1) >= 1)
    {
      int v13 = 0;
      do
      {
        MEMORY[0x23ECF27D0](&v33, "");
        if (*(int *)((char *)this + 5) >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v15 = *((void *)this + 9);
            uint64_t v16 = *(void *)(v15 + 8 * v14);
            uint64_t v17 = v14 + 1;
            uint64_t v18 = *(void *)(v15 + 8 * (v14 + 1)) - v16;
            if (v18 < 1)
            {
              double v21 = 0.0;
            }
            else
            {
              int v19 = (int *)(*((void *)this + 6) + 4 * v16);
              uint64_t v20 = (double *)(*((void *)this + 3) + 8 * v16);
              double v21 = 0.0;
              do
              {
                int v22 = *v19++;
                if (v22 == v13) {
                  double v21 = *v20;
                }
                ++v20;
                --v18;
              }
              while (v18);
            }
            operations_research::glop::StringifyMonomial(*((void *)this + 68) + 24 * v14, FLAGS_simplex_display_numbers_as_fractions, (uint64_t)&__p, v21);
            uint64_t v23 = v32;
            if ((v32 & 0x80u) == 0) {
              double v24 = (const char *)&__p;
            }
            else {
              double v24 = (const char *)__p;
            }
            if ((v32 & 0x80u) != 0) {
              uint64_t v23 = v31;
            }
            unint64_t v36 = v24;
            uint64_t v37 = v23;
            absl::lts_2020_02_25::StrAppend((uint64_t)&v33, (uint64_t)&v36);
            if ((char)v32 < 0) {
              operator delete(__p);
            }
            uint64_t v14 = v17;
          }
          while (v17 < *(int *)((char *)this + 5));
        }
        if (*off_26AECFD58[0] > 2
          && (off_26AECFD58[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFD58, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3140);
          double v25 = (void *)google::LogMessage::stream((google::LogMessage *)&v36);
          if (v35 >= 0) {
            uint64_t v26 = &v33;
          }
          else {
            uint64_t v26 = v33;
          }
          if (v35 >= 0) {
            uint64_t v27 = v35;
          }
          else {
            uint64_t v27 = v34;
          }
          double v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" = 0;", 5);
          google::LogMessage::~LogMessage((google::LogMessage *)&v36);
        }
        ++v13;
      }
      while (v13 < *(_DWORD *)((char *)this + 1));
    }
    if (*off_26AECFD60[0] > 2
      && (off_26AECFD60[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFD60, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3142);
      double v29 = (void *)google::LogMessage::stream((google::LogMessage *)&v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"------", 6);
      google::LogMessage::~LogMessage((google::LogMessage *)&v36);
    }
    if (v35 < 0) {
      operator delete(v33);
    }
  }
}

void sub_23CB878E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::DisplayAllStats(size_t *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (FLAGS_simplex_display_stats)
  {
    uint64_t v2 = (uint64_t *)MEMORY[0x263EF8348];
    uint64_t v3 = *MEMORY[0x263EF8348];
    operations_research::glop::RevisedSimplex::StatString(this, &__p);
    p_p = &__p;
    uint64_t v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
    absl::lts_2020_02_25::str_format_internal::FprintF(v3, "%s", 2, (uint64_t)&p_p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = *v2;
    operations_research::glop::RevisedSimplex::GetPrettySolverStats((operations_research::glop::RevisedSimplex *)this, (uint64_t)&__p);
    p_p = &__p;
    uint64_t v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
    absl::lts_2020_02_25::str_format_internal::FprintF(v4, "%s", 2, (uint64_t)&p_p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB87AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **operations_research::glop::RevisedSimplex::DualMinimize@<X0>(operations_research::glop::RevisedSimplex *this@<X0>, operations_research::TimeLimit *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  BOOL v6 = 0;
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v7 = (char *)this + 15932;
  uint64_t v8 = (char *)this + 9387;
  v129 = &unk_26F0BD108;
  *(void *)&long long v130 = this;
  *((void *)&v130 + 1) = a2;
  v131 = &v129;
  v134 = (void **)&v132;
  v117 = (int **)((char *)this + 10216);
  v132 = (uint64_t (**)(void **))&unk_26F0BD108;
  v111 = (unint64_t **)((char *)this + 10240);
  double v9 = (operations_research::glop::RevisedSimplex *)((char *)this + 840);
  long long v133 = v130;
  v119 = (operations_research::glop::RevisedSimplex *)((char *)this + 5904);
  *((_DWORD *)this + 3982) = 0;
  v115 = (int **)((char *)this + 760);
  v116 = (uint64_t *)((char *)this + 728);
  BOOL v128 = 0;
  v121 = (operations_research::glop::RevisedSimplex *)((char *)this + 8720);
  v114 = (operations_research::glop::RevisedSimplex *)((char *)this + 5480);
  *((void *)this + 1278) = *((void *)this + 1277);
  uint64_t v10 = (int **)((char *)this + 7840);
  v118 = (char *)this + 9616;
  v113 = (int *)((char *)a2 + 32);
  *((void *)this + 1281) = *((void *)this + 1280);
  v112 = (char *)this + 6288;
  unsigned int v127 = 0;
  double v125 = 0.0;
  double v126 = 0.0;
  unsigned int v124 = 0;
  double v123 = 0.0;
  v120 = (operations_research::glop::RevisedSimplex *)((char *)this + 840);
  while (1)
  {
    operations_research::glop::RevisedSimplex::RefactorizeBasisIfNeeded(this, &v128, a3);
    if (*(_DWORD *)a3) {
      break;
    }
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    if (operations_research::glop::BasisFactorization::IsRefactorized(v9))
    {
      if (*v7 || *v8 || v8[2] | v6) {
        goto LABEL_11;
      }
      if (operations_research::glop::ReducedCosts::ComputeMaximumDualResidual(v121) > *((double *)this + 1193))
      {
        if (*off_26AECFC78[0] >= 1
          && (off_26AECFC78[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFC78, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2663);
          uint64_t v58 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Recomputing reduced costs. Dual residual = ", 43);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)v122);
        }
LABEL_11:
        operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)v121);
      }
      if (!*v7)
      {
        uint64_t NonBasicBoxedVariables = operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables(v114);
        operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((double *)this, NonBasicBoxedVariables, 0);
        operations_research::glop::VariableValues::RecomputeBasicVariableValues(v119);
        operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation(v119);
        uint64_t v12 = (double *)*((void *)this + 27);
        unint64_t v13 = *((void *)this + 28) - (void)v12;
        if ((int)(v13 >> 3) < 1)
        {
          if (*((double *)this + 23) < 0.0) {
            goto LABEL_128;
          }
        }
        else
        {
          uint64_t v14 = (double *)*((void *)this + 743);
          uint64_t v15 = (v13 >> 3);
          double v16 = 0.0;
          double v17 = 0.0;
          do
          {
            double v18 = *v12++;
            double v19 = v18;
            double v20 = *v14++;
            double v21 = v17 + v19 * v20;
            double v22 = v16 + v21;
            double v17 = v21 + v16 - (v16 + v21);
            double v16 = v22;
            --v15;
          }
          while (v15);
          if (v22 > *((double *)this + 23))
          {
LABEL_128:
            if (*off_26AECFC80[0] >= 1
              && (off_26AECFC80[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_26AECFC80, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2689);
              double v74 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
              double v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Stopping the dual simplex because", 33);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" the objective limit ", 21);
              int v76 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" has been reached.", 18);
              google::LogMessage::~LogMessage((google::LogMessage *)v122);
            }
            *(unsigned char *)this = 8;
            v7[1] = 1;
            goto LABEL_135;
          }
        }
      }
      operations_research::glop::ReducedCosts::GetReducedCosts(v121);
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      goto LABEL_22;
    }
    if (*v7) {
      goto LABEL_23;
    }
    operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((double *)this, v117, 1);
    *((void *)this + 1278) = *((void *)this + 1277);
    operations_research::glop::VariableValues::UpdatePrimalInfeasibilityInformation(v119, v115);
LABEL_22:
    if (!*v7)
    {
      operations_research::glop::RevisedSimplex::DualChooseLeavingVariableRow(this, (int *)&v127, &v126, &v125, a3);
      goto LABEL_25;
    }
LABEL_23:
    operations_research::glop::RevisedSimplex::DualPhaseIChooseLeavingVariableRow((uint64_t)this, (int *)&v127, &v126, &v125, a3);
LABEL_25:
    if (*(_DWORD *)a3) {
      break;
    }
    if (*(char *)(a3 + 31) < 0)
    {
      operator delete(*(void **)(a3 + 8));
      unsigned int v23 = v127;
      if (v127 != -1) {
        goto LABEL_28;
      }
LABEL_36:
      if (operations_research::glop::BasisFactorization::IsRefactorized(v9))
      {
        char v72 = *v7;
        if (*v7)
        {
          if (*((_DWORD *)this + 88)) {
            char v72 = 2;
          }
          else {
            char v72 = 8;
          }
        }
        *(unsigned char *)this = v72;
        goto LABEL_135;
      }
      if (*off_26AECFC88[0] >= 1
        && (off_26AECFC88[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFC88, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2726);
        uint64_t v26 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Optimal reached, double checking.", 33);
LABEL_2:
        google::LogMessage::~LogMessage((google::LogMessage *)v122);
      }
LABEL_3:
      BOOL v6 = 1;
      BOOL v128 = 1;
    }
    else
    {
      unsigned int v23 = v127;
      if (v127 == -1) {
        goto LABEL_36;
      }
LABEL_28:
      operations_research::glop::UpdateRow::ComputeUpdateRow(v10, v23);
      double v24 = (_DWORD *)*((void *)this + 1280);
      double v25 = (_DWORD *)*((void *)this + 1281);
      while (v24 != v25)
      {
        if (*v24 == v127) {
          operations_research::glop::UpdateRow::IgnoreUpdatePosition((uint64_t)v10, v24[1]);
        }
        v24 += 2;
      }
      if (*v7) {
        operations_research::glop::EnteringVariable::DualPhaseIChooseEnteringColumn((operations_research::glop::UpdateRow *)v10, (uint64_t)v118, &v124, &v123, a3, v126);
      }
      else {
        operations_research::glop::EnteringVariable::DualChooseEnteringColumn((operations_research::glop::UpdateRow *)v10, (uint64_t)v118, v117, (int *)&v124, &v123, a3, v126);
      }
      double v9 = v120;
      if (*(_DWORD *)a3) {
        break;
      }
      if (*(char *)(a3 + 31) < 0)
      {
        operator delete(*(void **)(a3 + 8));
        int v27 = v124;
        if (v124 != -1) {
          goto LABEL_45;
        }
LABEL_55:
        if (v8[1])
        {
          if (*v7)
          {
            if (*off_26AECFC98[0] >= 1
              && (off_26AECFC98[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_26AECFC98, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2771);
              uint64_t v73 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Unbounded dual feasibility problem !?", 37);
              google::LogMessage::~LogMessage((google::LogMessage *)v122);
            }
            *(unsigned char *)this = 9;
            goto LABEL_135;
          }
          *(unsigned char *)this = 5;
          UnitRowLeftInverse = (char **)operations_research::glop::UpdateRow::GetUnitRowLeftInverse((operations_research::glop::UpdateRow *)v10);
          if ((char **)((char *)this + 648) != UnitRowLeftInverse) {
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 81, *UnitRowLeftInverse, UnitRowLeftInverse[1], (UnitRowLeftInverse[1] - *UnitRowLeftInverse) >> 3);
          }
          operations_research::glop::UpdateRow::RecomputeFullUpdateRow((uint64_t *)v10, v127);
          unint64_t v79 = *(int *)((char *)this + 5);
          v122[0] = 0;
          unint64_t v80 = (char *)*((void *)this + 84);
          unint64_t v81 = (uint64_t)(*((void *)this + 85) - (void)v80) >> 3;
          if (v79 <= v81)
          {
            if (v79 < v81) {
              *((void *)this + 85) = &v80[8 * v79];
            }
          }
          else
          {
            std::vector<double>::__append((uint64_t)this + 672, v79 - v81, v122);
            unint64_t v80 = (char *)*((void *)this + 84);
          }
          bzero(v80, 8 * (int)v79);
          uint64_t NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)v10);
          unint64_t v83 = *(int **)NonZeroPositions;
          int v84 = *(int **)(NonZeroPositions + 8);
          if (*(int **)NonZeroPositions != v84)
          {
            uint64_t v85 = *((void *)this + 1008);
            uint64_t v86 = *((void *)this + 84);
            do
            {
              uint64_t v87 = *v83++;
              *(void *)(v86 + 8 * v87) = *(void *)(v85 + 8 * v87);
            }
            while (v83 != v84);
          }
          if (v126 >= 0.0) {
            goto LABEL_135;
          }
          int v88 = (float64x2_t *)*((void *)this + 81);
          unint64_t v89 = *((void *)this + 82) - (void)v88;
          if ((int)(v89 >> 3) >= 1)
          {
            unint64_t v90 = (v89 >> 3);
            if (v90 < 4)
            {
              unint64_t v91 = 0;
              goto LABEL_158;
            }
            uint64_t v92 = (v89 >> 3) & 3;
            unint64_t v91 = v90 - v92;
            long long v93 = v88 + 1;
            unint64_t v94 = v90 - v92;
            do
            {
              float64x2_t v95 = vnegq_f64(*v93);
              v93[-1] = vnegq_f64(v93[-1]);
              *long long v93 = v95;
              v93 += 2;
              v94 -= 4;
            }
            while (v94);
            if (v92)
            {
LABEL_158:
              unint64_t v96 = v91 - v90;
              v97 = &v88->f64[v91];
              do
              {
                double *v97 = -*v97;
                ++v97;
                BOOL v98 = __CFADD__(v96++, 1);
              }
              while (!v98);
            }
          }
          long long v99 = (float64x2_t *)*((void *)this + 84);
          unint64_t v100 = *((void *)this + 85) - (void)v99;
          if ((int)(v100 >> 3) >= 1)
          {
            unint64_t v101 = (v100 >> 3);
            if (v101 >= 4)
            {
              uint64_t v103 = (v100 >> 3) & 3;
              unint64_t v102 = v101 - v103;
              v104 = v99 + 1;
              unint64_t v105 = v101 - v103;
              do
              {
                float64x2_t v106 = vnegq_f64(*v104);
                v104[-1] = vnegq_f64(v104[-1]);
                float64x2_t *v104 = v106;
                v104 += 2;
                v105 -= 4;
              }
              while (v105);
              if (!v103) {
                goto LABEL_135;
              }
            }
            else
            {
              unint64_t v102 = 0;
            }
            unint64_t v107 = v102 - v101;
            v108 = &v99->f64[v102];
            do
            {
              double *v108 = -*v108;
              ++v108;
              BOOL v98 = __CFADD__(v107++, 1);
            }
            while (!v98);
          }
LABEL_135:
          operations_research::glop::Status::Status(a3);
          break;
        }
        if (*off_26AECFC90[0] >= 1
          && (off_26AECFC90[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFC90, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2764);
          uint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"No entering column. Double checking...", 38);
          goto LABEL_2;
        }
        goto LABEL_3;
      }
      int v27 = v124;
      if (v124 == -1) {
        goto LABEL_55;
      }
LABEL_45:
      if (fabs(*(double *)(*((void *)this + 1008) + 8 * v27)) < *((double *)this + 1477) && !v8[1])
      {
        if (*off_26AECFCA0[0] >= 1
          && (off_26AECFCA0[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFCA0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2795);
          int v57 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Trying not to pivot by ", 23);
          std::ostream::operator<<();
          goto LABEL_2;
        }
        goto LABEL_3;
      }
      operations_research::glop::RevisedSimplex::ComputeDirection((uint64_t)this, v27);
      if (fabs(*(double *)(*((void *)this + 91) + 8 * (int)v127)) >= *((double *)this + 1467))
      {
        *((void *)this + 1281) = *((void *)this + 1280);
        double v36 = operations_research::glop::BasisFactorization::DeterministicTime(v120)
            + (double)*((uint64_t *)this + 1012) * 0.000000002
            + (double)*((uint64_t *)this + 979) * 0.000000002;
        double v37 = *((double *)v3 + 14) + v36 - *((double *)this + 1289);
        *((double *)v3 + 14) = v37;
        *((double *)this + 1289) = v36;
        if (*((void *)this + 1283) == *((void *)this + 1473)) {
          goto LABEL_135;
        }
        uint64_t v38 = (unsigned __int8 *)*((void *)v3 + 15);
        if (v38)
        {
          unsigned __int8 v39 = atomic_load(v38);
          if (v39) {
            goto LABEL_135;
          }
          double v37 = *((double *)v3 + 14);
        }
        if (fmax(*((double *)v3 + 13) - v37, 0.0) <= 0.0) {
          goto LABEL_135;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v35);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41 = CurrentTimeNanos;
        if (*((void *)v3 + 3) <= CurrentTimeNanos - *((void *)v3 + 1)) {
          uint64_t v42 = CurrentTimeNanos - *((void *)v3 + 1);
        }
        else {
          uint64_t v42 = *((void *)v3 + 3);
        }
        operations_research::RunningMax<long long>::Add(v113, v42);
        *((void *)v3 + 1) = v41;
        if (*(void *)(*((void *)v3 + 5) + 8 * *((int *)v3 + 17)) + v41 >= *((void *)v3 + 2))
        {
          if (!FLAGS_time_limit_use_usertime) {
            goto LABEL_134;
          }
          double v44 = *((double *)v3 + 12);
          if (*((unsigned char *)v3 + 72))
          {
            double v45 = v44
                + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v43) - *((void *)v3 + 10) + *((void *)v3 + 11))
                * -0.000000001;
            if (v45 <= 0.0001) {
              goto LABEL_134;
            }
          }
          else
          {
            double v45 = v44 + (double)*((uint64_t *)v3 + 11) * -0.000000001;
            if (v45 <= 0.0001)
            {
LABEL_134:
              *((void *)v3 + 2) = 0;
              goto LABEL_135;
            }
          }
          *((void *)v3 + 2) = *((void *)v3 + 1) + (uint64_t)(v45 * 1000000000.0);
        }
        if (*v7)
        {
          double v59 = 0.0;
          operations_research::glop::RevisedSimplex::DualPhaseIUpdatePrice((uint64_t)this, v127, v124);
        }
        else
        {
          double v59 = (*(double *)(*((void *)this + 743) + 8 * *(int *)(*((void *)this + 65) + 4 * (int)v127)) - v125)
              / *(double *)(*((void *)this + 91) + 8 * (int)v127);
          operations_research::glop::VariableValues::UpdateOnPivoting((uint64_t)v119, v116, v124, v59);
        }
        operations_research::glop::ReducedCosts::UpdateBeforeBasisPivot((uint64_t)v121, v124, v127, v116, (operations_research::glop::UpdateRow *)v10);
        int v60 = v124;
        int v61 = v127;
        uint64_t v62 = (char **)operations_research::glop::UpdateRow::GetUnitRowLeftInverse((operations_research::glop::UpdateRow *)v10);
        operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot((uint64_t)v112, v60, v61, v116, v62);
        int v63 = *(_DWORD *)(*((void *)this + 65) + 4 * (int)v127);
        operations_research::glop::RevisedSimplex::UpdateAndPivot((uint64_t)this, v124, v127, a3, v125);
        if (*(_DWORD *)a3) {
          break;
        }
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*(void **)(a3 + 8));
        }
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(v119, v63);
        if (fabs(v59) * *((double *)this + 1461) <= 1.0)
        {
          BOOL v6 = v128;
        }
        else
        {
          BOOL v6 = 1;
          BOOL v128 = 1;
        }
        ++*((void *)this + 1283);
      }
      else
      {
        if (*off_26AECFCA8[0] >= 1
          && (off_26AECFCA8[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFCA8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v122, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2807);
          double v28 = (void *)google::LogMessage::stream((google::LogMessage *)v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Do not pivot by ", 16);
          double v29 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" because the direction is ", 26);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)v122);
        }
        BOOL v128 = 1;
        uint64_t v30 = v127;
        uint64_t v31 = (unint64_t *)*((void *)this + 1281);
        unint64_t v32 = *((void *)this + 1282);
        if ((unint64_t)v31 < v32)
        {
          *uint64_t v31 = v127 | ((unint64_t)v124 << 32);
          uint64_t v33 = (uint64_t)(v31 + 1);
          double v9 = v120;
          goto LABEL_116;
        }
        v109 = v8;
        v110 = v3;
        int v46 = *v111;
        uint64_t v47 = (char *)v31 - (char *)*v111;
        uint64_t v48 = v47 >> 3;
        unint64_t v49 = (v47 >> 3) + 1;
        if (v49 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v32 - (void)v46;
        if (v50 >> 2 > v49) {
          unint64_t v49 = v50 >> 2;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          if (v51 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v52 = v124;
          unint64_t v53 = v51;
          uint64_t v54 = operator new(8 * v51);
          unint64_t v51 = v53;
          uint64_t v48 = v47 >> 3;
          unint64_t v55 = (uint64_t *)&v54[8 * (v47 >> 3)];
          *unint64_t v55 = v30 | (v52 << 32);
          uint64_t v33 = (uint64_t)(v55 + 1);
          if (v31 == v46)
          {
LABEL_89:
            double v9 = v120;
            *((void *)this + 128google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v55;
            *((void *)this + 1281) = v33;
            *((void *)this + 1282) = &v54[8 * v51];
            uint64_t v8 = v109;
            uint64_t v3 = v110;
            if (v31) {
              goto LABEL_115;
            }
            goto LABEL_116;
          }
        }
        else
        {
          uint64_t v54 = 0;
          unint64_t v55 = (uint64_t *)(8 * v48);
          *(void *)(8 * v48) = v127 | ((unint64_t)v124 << 32);
          uint64_t v33 = 8 * v48 + 8;
          if (v31 == v46) {
            goto LABEL_89;
          }
        }
        unint64_t v56 = (char *)(v31 - 1) - (char *)v46;
        double v9 = v120;
        if (v56 < 0x58) {
          goto LABEL_176;
        }
        if ((unint64_t)((char *)v31 - &v54[v47]) < 0x20) {
          goto LABEL_176;
        }
        uint64_t v64 = (v56 >> 3) + 1;
        uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v66 = &v31[v65 / 0xFFFFFFFFFFFFFFF8];
        unint64_t v55 = (uint64_t *)((char *)v55 - v65);
        uint64_t v67 = &v54[8 * v48 - 16];
        uint64_t v68 = v31 - 2;
        uint64_t v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *uint64_t v67 = v70;
          v67 -= 2;
          v68 -= 4;
          v69 -= 4;
        }
        while (v69);
        uint64_t v31 = v66;
        if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_176:
          do
          {
            uint64_t v71 = *--v31;
            *--unint64_t v55 = v71;
          }
          while (v31 != v46);
        }
        uint64_t v31 = *v111;
        *((void *)this + 128google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v55;
        *((void *)this + 1281) = v33;
        *((void *)this + 1282) = &v54[8 * v51];
        uint64_t v8 = v109;
        uint64_t v3 = v110;
        if (v31) {
LABEL_115:
        }
          operator delete(v31);
LABEL_116:
        *((void *)this + 1281) = v33;
        BOOL v6 = 1;
      }
    }
  }
  if (!v134) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*((void (**)(void **))*v134 + 6))(v134);
  uint64_t result = v134;
  if (v134 == (void **)&v132) {
    return (void **)v132[4]((void **)&v132);
  }
  if (v134) {
    return (void **)(*((uint64_t (**)(void))*v134 + 5))();
  }
  return result;
}

void sub_23CB88A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::DisplayIterationInfo(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v28[2] = *MEMORY[0x263EF8340];
  if (*off_26AECFCB0[0] < 1
    || off_26AECFCB0[0] == &google::kLogSiteUninitialized
    && !google::InitVLOG3__((google *)off_26AECFCB0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1))
  {
    return;
  }
  uint64_t v2 = (char *)this + 15932;
  if (*((unsigned char *)this + 15932))
  {
    if (*((unsigned char *)this + 11644)) {
      double v3 = operations_research::glop::ReducedCosts::ComputeSumOfDualInfeasibilities((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    }
    else {
      double v3 = operations_research::glop::VariableValues::ComputeSumOfPrimalInfeasibilities((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
    }
    double v15 = v3;
    double v16 = off_26AECFCB8[0];
    if (*off_26AECFCB8[0] < 1) {
      return;
    }
  }
  else
  {
    uint64_t v4 = (double *)*((void *)this + 27);
    unint64_t v5 = *((void *)this + 28) - (void)v4;
    if ((int)(v5 >> 3) < 1)
    {
      double v14 = 0.0;
    }
    else
    {
      BOOL v6 = (double *)*((void *)this + 743);
      uint64_t v7 = (v5 >> 3);
      double v8 = 0.0;
      double v9 = 0.0;
      do
      {
        double v10 = *v4++;
        double v11 = v10;
        double v12 = *v6++;
        double v13 = v9 + v11 * v12;
        double v14 = v8 + v13;
        double v9 = v13 + v8 - (v8 + v13);
        double v8 = v14;
        --v7;
      }
      while (v7);
    }
    double v15 = *((double *)this + 31) * (v14 + *((double *)this + 30));
    double v16 = off_26AECFCB8[0];
    if (*off_26AECFCB8[0] < 1) {
      return;
    }
  }
  if (v16 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)off_26AECFCB8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2951);
    double v17 = (void *)google::LogMessage::stream((google::LogMessage *)v27);
    if (*v2) {
      double v18 = "Feasibility";
    }
    else {
      double v18 = "Optimization";
    }
    if (*v2) {
      uint64_t v19 = 11;
    }
    else {
      uint64_t v19 = 12;
    }
    double v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" phase, iteration # ", 20);
    double v21 = (void *)std::ostream::operator<<();
    double v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", objective = ", 14);
    *(double *)double v28 = v15;
    v28[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("%.15E", 5, (uint64_t)v28, 1, (uint64_t)__p);
    if ((v26 & 0x80u) == 0) {
      unsigned int v23 = __p;
    }
    else {
      unsigned int v23 = (void **)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v24 = v26;
    }
    else {
      uint64_t v24 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v27);
  }
}

void sub_23CB88D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a15);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a15);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::PermuteBasis(operations_research::glop::RevisedSimplex *this)
{
  if (*((void *)this + 360) != *((void *)this + 361))
  {
    uint64_t v2 = (uint64_t *)((char *)this + 2880);
    operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)this + 360, (std::vector<int> *)((char *)this + 520));
    if (*((void *)this + 45) != *((void *)this + 46)) {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(v2, (char **)this + 45);
    }
    operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation((uint64_t)this + 8720);
    operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation((uint64_t)this + 6288, v2);
    *((void *)this + 361) = *((void *)this + 360);
    *((void *)this + 364) = *((void *)this + 363);
  }
}

void operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(double *a1, uint64_t a2, char a3)
{
  std::string __p = 0;
  char v72 = 0;
  uint64_t v73 = 0;
  ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 1090));
  double v5 = a1[1193];
  uint64_t v68 = a1 + 685;
  StatusRow = (void *)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 685));
  BOOL v6 = *(unint64_t **)(a2 + 8);
  uint64_t v7 = *(unint64_t **)(a2 + 16);
  char v66 = a3;
  uint64_t v65 = a1;
  if (v6 == v7) {
    goto LABEL_14;
  }
  unint64_t v8 = *v6;
  if (*v6)
  {
    int v9 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = 0;
  unint64_t v11 = (char *)v7 - (char *)v6;
  unint64_t v12 = v11 >> 3;
  uint64_t v13 = (int)((uint64_t)v11 >> 3);
  if ((int)(v11 >> 3) <= 1) {
    int v14 = 1;
  }
  else {
    int v14 = v11 >> 3;
  }
  if (v13 <= 1) {
    uint64_t v13 = 1;
  }
  uint64_t v15 = v13 - 1;
  while (v15 != v10)
  {
    int v16 = v10 + 1;
    if (v6[++v10])
    {
      int v14 = v16;
      break;
    }
  }
  if (v14 == v12)
  {
LABEL_14:
    unint64_t v18 = 0;
    int v9 = 0;
    int v19 = -1;
    int v20 = *(_DWORD *)(a2 + 40);
    if (v20 != -1) {
      goto LABEL_21;
    }
    goto LABEL_81;
  }
  unint64_t v8 = v6[v14];
  int v9 = v14 << 6;
LABEL_17:
  int v19 = __clz(__rbit64(v8)) & 0x3F | v9;
  unint64_t v18 = (v8 - 1) & v8;
  int v20 = *(_DWORD *)(a2 + 40);
  if (v19 != v20)
  {
LABEL_21:
    while (1)
    {
      double v21 = *(double *)(*ReducedCosts + 8 * v19);
      int v22 = *(unsigned __int8 *)(*StatusRow + v19);
      if (v21 > v5 && v22 == 3) {
        break;
      }
      if (v21 < -v5 && v22 == 2)
      {
        operations_research::glop::VariablesInfo::Update(v68, v19, 3);
        double v25 = v72;
        if (v72 >= v73)
        {
          unsigned __int8 v26 = (int *)__p;
          int64_t v27 = (char *)v72 - (unsigned char *)__p;
          uint64_t v28 = ((char *)v72 - (unsigned char *)__p) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            goto LABEL_86;
          }
          uint64_t v30 = (char *)v73 - (unsigned char *)__p;
          if (((char *)v73 - (unsigned char *)__p) >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            if (v31 >> 62) {
              goto LABEL_87;
            }
            unint64_t v32 = operator new(4 * v31);
            uint64_t v33 = (int *)&v32[4 * v28];
            int *v33 = v19;
            uint64_t v34 = (uint64_t)(v33 + 1);
            if (v25 == v26) {
              goto LABEL_68;
            }
          }
          else
          {
            unint64_t v32 = 0;
            uint64_t v33 = (int *)(4 * v28);
            *(_DWORD *)(4 * v28) = v19;
            uint64_t v34 = 4 * v28 + 4;
            if (v25 == v26) {
              goto LABEL_68;
            }
          }
          unint64_t v48 = (char *)(v25 - 1) - (char *)v26;
          if (v48 < 0x2C) {
            goto LABEL_90;
          }
          if ((unint64_t)((char *)v25 - &v32[v27]) < 0x20) {
            goto LABEL_90;
          }
          uint64_t v49 = (v48 >> 2) + 1;
          uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v51 = &v25[v50 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v33 = (int *)((char *)v33 - v50);
          uint64_t v52 = &v32[4 * v28 - 16];
          unint64_t v53 = v25 - 4;
          uint64_t v54 = v49 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *uint64_t v52 = v55;
            v52 -= 2;
            v53 -= 8;
            v54 -= 8;
          }
          while (v54);
          double v25 = v51;
          if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_90:
            do
            {
              int v56 = *--v25;
              *--uint64_t v33 = v56;
            }
            while (v25 != v26);
          }
          goto LABEL_68;
        }
LABEL_42:
        *double v25 = v19;
        uint64_t v34 = (uint64_t)(v25 + 1);
LABEL_70:
        char v72 = (int *)v34;
      }
      if (v18) {
        goto LABEL_20;
      }
      uint64_t v57 = *(void *)(a2 + 8);
      uint64_t v58 = *(void *)(a2 + 16) - v57;
      unint64_t v59 = (unint64_t)v58 >> 3;
      uint64_t v60 = (int)(v58 >> 3);
      if ((v9 >> 6) + 1 > (int)v59) {
        int v61 = (v9 >> 6) + 1;
      }
      else {
        int v61 = v59;
      }
      uint64_t v62 = ((uint64_t)v9 >> 6) + 1;
      while (v62 < v60)
      {
        if (*(void *)(v57 + 8 * v62++))
        {
          int v61 = v62 - 1;
          break;
        }
      }
      if (v61 == v59)
      {
        unint64_t v18 = 0;
        int v19 = -1;
        if (v20 == -1) {
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v18 = *(void *)(v57 + 8 * v61);
        int v9 = v61 << 6;
LABEL_20:
        int v19 = (__clz(__rbit64(v18)) & 0x3F) + v9;
        v18 &= v18 - 1;
        if (v19 == v20) {
          goto LABEL_81;
        }
      }
    }
    operations_research::glop::VariablesInfo::Update(v68, v19, 2);
    double v25 = v72;
    if (v72 < v73) {
      goto LABEL_42;
    }
    unsigned __int8 v26 = (int *)__p;
    int64_t v35 = (char *)v72 - (unsigned char *)__p;
    uint64_t v36 = ((char *)v72 - (unsigned char *)__p) >> 2;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62) {
LABEL_86:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v38 = (char *)v73 - (unsigned char *)__p;
    if (((char *)v73 - (unsigned char *)__p) >> 1 > v37) {
      unint64_t v37 = v38 >> 1;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v37;
    }
    if (v31)
    {
      if (v31 >> 62) {
LABEL_87:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      unint64_t v32 = operator new(4 * v31);
      uint64_t v33 = (int *)&v32[4 * v36];
      int *v33 = v19;
      uint64_t v34 = (uint64_t)(v33 + 1);
      if (v25 == v26)
      {
LABEL_68:
        std::string __p = v33;
        uint64_t v73 = (int *)&v32[4 * v31];
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_70;
      }
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = (int *)(4 * v36);
      *(_DWORD *)(4 * v36) = v19;
      uint64_t v34 = 4 * v36 + 4;
      if (v25 == v26) {
        goto LABEL_68;
      }
    }
    unint64_t v39 = (char *)(v25 - 1) - (char *)v26;
    if (v39 < 0x2C) {
      goto LABEL_91;
    }
    if ((unint64_t)((char *)v25 - &v32[v35]) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v40 = (v39 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v42 = &v25[v41 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v33 = (int *)((char *)v33 - v41);
    int v43 = &v32[4 * v36 - 16];
    double v44 = v25 - 4;
    uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *int v43 = v46;
      v43 -= 2;
      v44 -= 8;
      v45 -= 8;
    }
    while (v45);
    double v25 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_91:
      do
      {
        int v47 = *--v25;
        *--uint64_t v33 = v47;
      }
      while (v25 != v26);
    }
    goto LABEL_68;
  }
LABEL_81:
  uint64_t v64 = (int *)__p;
  if (__p != v72)
  {
    operations_research::glop::VariableValues::UpdateGivenNonBasicVariables((uint64_t)(v65 + 738), (int **)&__p, v66);
    uint64_t v64 = (int *)__p;
  }
  if (v64)
  {
    char v72 = v64;
    operator delete(v64);
  }
}

void sub_23CB89310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::Minimize(operations_research::glop::RevisedSimplex *this@<X0>, operations_research::TimeLimit *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  if (a2)
  {
    double v126 = &unk_26F0BD088;
    *(void *)&long long v127 = this;
    *((void *)&v127 + 1) = a2;
    BOOL v128 = &v126;
    v131 = (void **)&v129;
    v129 = (void (**)(void **))&unk_26F0BD088;
    long long v130 = v127;
    *((_DWORD *)this + 3982) = 0;
    operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
    BOOL v6 = (char *)this + 15932;
    BOOL v124 = 0;
    if (*((unsigned char *)this + 15932))
    {
      uint64_t v7 = (char *)*((void *)this + 27);
      uint64_t v8 = *((void *)this + 28);
      unint64_t v9 = *(int *)((char *)this + 5);
      v123[0] = 0;
      unint64_t v10 = (v8 - (uint64_t)v7) >> 3;
      if (v9 <= v10)
      {
        if (v9 < v10) {
          *((void *)this + 28) = &v7[8 * v9];
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)this + 216, v9 - v10, v123);
        uint64_t v7 = (char *)*((void *)this + 27);
      }
      bzero(v7, 8 * (int)v9);
      uint64_t v14 = *(unsigned int *)((char *)this + 1);
      if ((int)v14 >= 1)
      {
        double v15 = *(double *)(*((void *)this + 738) + 72);
        int v16 = (int *)**((void **)this + 740);
        uint64_t v17 = *((void *)this + 743);
        uint64_t v18 = *((void *)this + 741);
        uint64_t v19 = **(void **)(v18 + 16);
        uint64_t v20 = *((void *)this + 27);
        do
        {
          uint64_t v22 = *v16++;
          uint64_t v21 = v22;
          double v23 = *(double *)(v17 + 8 * v22);
          double v24 = 1.0;
          if (v23 - *(double *)(v19 + 8 * v22) <= v15)
          {
            double v24 = 0.0;
            if (*(double *)(**(void **)(v18 + 8) + 8 * v21) - v23 > v15) {
              double v24 = -1.0;
            }
          }
          if (v24 != *(double *)(v20 + 8 * v21)) {
            *(double *)(v20 + 8 * v21) = v24;
          }
          --v14;
        }
        while (v14);
      }
      operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    }
    v117 = (char *)this + 9388;
    v116 = (operations_research::glop::RevisedSimplex *)((char *)this + 5904);
    v115 = (operations_research::glop::RevisedSimplex *)((char *)this + 7840);
    v114 = (operations_research::glop::RevisedSimplex *)((char *)this + 10816);
    while (1)
    {
      while (1)
      {
        operations_research::glop::RevisedSimplex::RefactorizeBasisIfNeeded(this, &v124, a3);
        if (*(_DWORD *)a3)
        {
LABEL_158:
          if (!v131) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*((void (**)(void **))*v131 + 6))(v131);
          if (v131 == (void **)&v129)
          {
            v129[4]((void **)&v129);
          }
          else if (v131)
          {
            (*((void (**)(void))*v131 + 5))();
          }
          return;
        }
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*(void **)(a3 + 8));
        }
        if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840)))
        {
          operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(this);
          operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
          if (!*v6) {
            goto LABEL_51;
          }
          uint64_t v25 = *(unsigned int *)((char *)this + 1);
          if ((int)v25 >= 1)
          {
            uint64_t v26 = 0;
            char v27 = 0;
            double v28 = *(double *)(*((void *)this + 738) + 72);
            uint64_t v29 = **((void **)this + 740);
            uint64_t v30 = *((void *)this + 743);
            uint64_t v31 = *((void *)this + 741);
            uint64_t v32 = **(void **)(v31 + 16);
            uint64_t v33 = *((void *)this + 27);
            do
            {
              while (1)
              {
                uint64_t v34 = *(int *)(v29 + 4 * v26);
                double v35 = *(double *)(v30 + 8 * v34);
                double v36 = 1.0;
                if (v35 - *(double *)(v32 + 8 * v34) <= v28)
                {
                  double v36 = 0.0;
                  if (*(double *)(**(void **)(v31 + 8) + 8 * v34) - v35 > v28) {
                    double v36 = -1.0;
                  }
                }
                if (v36 == *(double *)(v33 + 8 * v34)) {
                  break;
                }
                *(double *)(v33 + 8 * v34) = v36;
                char v27 = 1;
                if (v25 - 1 == v26++) {
                  goto LABEL_50;
                }
              }
              ++v26;
            }
            while (v25 != v26);
            if ((v27 & 1) == 0) {
              goto LABEL_57;
            }
LABEL_50:
            operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
            if (!*v6)
            {
LABEL_51:
              uint64_t v50 = (double *)*((void *)this + 27);
              unint64_t v51 = *((void *)this + 28) - (void)v50;
              if ((int)(v51 >> 3) < 1)
              {
                if (*((double *)this + 22) > 0.0) {
                  goto LABEL_144;
                }
              }
              else
              {
                uint64_t v52 = (double *)*((void *)this + 743);
                uint64_t v53 = (v51 >> 3);
                double v54 = 0.0;
                double v55 = 0.0;
                do
                {
                  double v56 = *v50++;
                  double v57 = v56;
                  double v58 = *v52++;
                  double v59 = v55 + v57 * v58;
                  double v60 = v54 + v59;
                  double v55 = v59 + v54 - (v54 + v59);
                  double v54 = v60;
                  --v53;
                }
                while (v53);
                if (v60 < *((double *)this + 22))
                {
LABEL_144:
                  if (*off_26AECFC40[0] >= 1
                    && (off_26AECFC40[0] != &google::kLogSiteUninitialized
                     || google::InitVLOG3__((google *)off_26AECFC40, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
                  {
                    google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2393);
                    unint64_t v89 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
                    unint64_t v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Stopping the primal simplex because", 35);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" the objective limit ", 21);
                    unint64_t v91 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" has been reached.", 18);
                    google::LogMessage::~LogMessage((google::LogMessage *)v123);
                  }
                  *(unsigned char *)this = 7;
                  *((unsigned char *)this + 15933) = 1;
LABEL_157:
                  operations_research::glop::Status::Status(a3);
                  goto LABEL_158;
                }
              }
            }
          }
        }
        else if (*v6)
        {
          uint64_t v38 = (int *)*((void *)this + 95);
          unint64_t v39 = (int *)*((void *)this + 96);
          if (v38 != v39)
          {
            char v40 = 0;
            double v41 = *(double *)(*((void *)this + 738) + 72);
            uint64_t v42 = **((void **)this + 740);
            uint64_t v43 = *((void *)this + 743);
            uint64_t v44 = *((void *)this + 741);
            uint64_t v45 = **(void **)(v44 + 16);
            uint64_t v46 = *((void *)this + 27);
            do
            {
              while (1)
              {
                uint64_t v47 = *(int *)(v42 + 4 * *v38);
                double v48 = *(double *)(v43 + 8 * v47);
                double v49 = 1.0;
                if (v48 - *(double *)(v45 + 8 * v47) <= v41)
                {
                  double v49 = 0.0;
                  if (*(double *)(**(void **)(v44 + 8) + 8 * v47) - v48 > v41) {
                    double v49 = -1.0;
                  }
                }
                if (v49 == *(double *)(v46 + 8 * v47)) {
                  break;
                }
                *(double *)(v46 + 8 * v47) = v49;
                ++v38;
                char v40 = 1;
                if (v38 == v39) {
                  goto LABEL_48;
                }
              }
              ++v38;
            }
            while (v38 != v39);
            if ((v40 & 1) == 0) {
              goto LABEL_57;
            }
LABEL_48:
            operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
          }
        }
LABEL_57:
        double v122 = 0.0;
        int v121 = -1;
        operations_research::glop::EnteringVariable::PrimalChooseEnteringColumn((operations_research::glop::RevisedSimplex *)((char *)this + 9616), &v121, a3);
        if (*(_DWORD *)a3) {
          goto LABEL_158;
        }
        if ((*(char *)(a3 + 31) & 0x80000000) == 0) {
          break;
        }
        operator delete(*(void **)(a3 + 8));
        if (v121 != -1) {
          goto LABEL_60;
        }
LABEL_75:
        if (*v117
          && operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840)))
        {
          char v88 = *v6;
          if (*v6)
          {
            if (operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility(v116) >= *((double *)this + 1461))
            {
              if (*off_26AECFC48[0] >= 1
                && (off_26AECFC48[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_26AECFC48, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
              {
                google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2423);
                uint64_t v92 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Infeasible problem! infeasibility = ", 36);
                std::ostream::operator<<();
                google::LogMessage::~LogMessage((google::LogMessage *)v123);
              }
              char v88 = 1;
            }
            else
            {
              char v88 = 7;
            }
          }
LABEL_154:
          *(unsigned char *)this = v88;
          goto LABEL_155;
        }
        if (*off_26AECFC50[0] >= 1
          && (off_26AECFC50[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFC50, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2432);
          uint64_t v73 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Optimal reached, double checking...", 35);
          google::LogMessage::~LogMessage((google::LogMessage *)v123);
        }
        operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)this + 8720);
        BOOL v124 = 1;
      }
      if (v121 == -1) {
        goto LABEL_75;
      }
LABEL_60:
      ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      double v122 = *(double *)(*ReducedCosts + 8 * v121);
      operations_research::glop::RevisedSimplex::ComputeDirection((uint64_t)this, v121);
      operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision((uint64_t)this + 6944, (const operations_research::glop::ScatteredColumn *)v121, (operations_research::glop::RevisedSimplex *)((char *)this + 728));
      if (operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision((operations_research::glop::VariablesInfo **)this + 1090, v121, (double **)this + 91, &v122))
      {
        double v63 = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::RevisedSimplex *)((char *)this + 840))
            + (double)*((uint64_t *)this + 1012) * 0.000000002
            + (double)*((uint64_t *)this + 979) * 0.000000002;
        double v64 = *((double *)a2 + 14) + v63 - *((double *)this + 1289);
        *((double *)a2 + 14) = v64;
        *((double *)this + 1289) = v63;
        if (*((void *)this + 1283) == *((void *)this + 1473)) {
          goto LABEL_155;
        }
        uint64_t v65 = (unsigned __int8 *)*((void *)a2 + 15);
        if (v65)
        {
          unsigned __int8 v66 = atomic_load(v65);
          if (v66) {
            goto LABEL_155;
          }
          double v64 = *((double *)a2 + 14);
        }
        if (fmax(*((double *)a2 + 13) - v64, 0.0) <= 0.0) {
          goto LABEL_155;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v62);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = CurrentTimeNanos;
        if (*((void *)a2 + 3) <= CurrentTimeNanos - *((void *)a2 + 1)) {
          uint64_t v69 = CurrentTimeNanos - *((void *)a2 + 1);
        }
        else {
          uint64_t v69 = *((void *)a2 + 3);
        }
        operations_research::RunningMax<long long>::Add((int *)a2 + 8, v69);
        *((void *)a2 + 1) = v68;
        if (*(void *)(*((void *)a2 + 5) + 8 * *((int *)a2 + 17)) + v68 >= *((void *)a2 + 2))
        {
          if (!FLAGS_time_limit_use_usertime) {
            goto LABEL_140;
          }
          double v71 = *((double *)a2 + 12);
          if (*((unsigned char *)a2 + 72))
          {
            double v72 = v71
                + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v70) - *((void *)a2 + 10) + *((void *)a2 + 11))
                * -0.000000001;
            if (v72 <= 0.0001) {
              goto LABEL_140;
            }
          }
          else
          {
            double v72 = v71 + (double)*((uint64_t *)a2 + 11) * -0.000000001;
            if (v72 <= 0.0001)
            {
LABEL_140:
              *((void *)a2 + 2) = 0;
              goto LABEL_155;
            }
          }
          *((void *)a2 + 2) = *((void *)a2 + 1) + (uint64_t)(v72 * 1000000000.0);
        }
        double v120 = 0.0;
        int v119 = 0;
        double v118 = 0.0;
        if (*v6)
        {
          operations_research::glop::RevisedSimplex::PrimalPhaseIChooseLeavingVariableRow((uint64_t)this, v121, &v124, &v119, &v120, &v118, v122);
LABEL_92:
          if (!v124)
          {
LABEL_93:
            if (fabs(v120) == INFINITY)
            {
              if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840))
                && *v117)
              {
                if (*v6)
                {
                  if (*off_26AECFC68[0] >= 1
                    && (off_26AECFC68[0] != &google::kLogSiteUninitialized
                     || google::InitVLOG3__((google *)off_26AECFC68, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
                  {
                    google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2486);
                    unint64_t v94 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Unbounded feasibility problem !?", 32);
                    google::LogMessage::~LogMessage((google::LogMessage *)v123);
                  }
                  char v88 = 9;
                  goto LABEL_154;
                }
                if (*off_26AECFC70[0] >= 1
                  && (off_26AECFC70[0] != &google::kLogSiteUninitialized
                   || google::InitVLOG3__((google *)off_26AECFC70, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
                {
                  google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2489);
                  float64x2_t v95 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Unbounded problem.", 18);
                  google::LogMessage::~LogMessage((google::LogMessage *)v123);
                }
                *(unsigned char *)this = 4;
                operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double>::AssignToZero((char **)this + 78, *(unsigned int *)((char *)this + 5));
                uint64_t v96 = *(unsigned int *)((char *)this + 1);
                v97 = (float64x2_t *)*((void *)this + 78);
                if ((int)v96 >= 1)
                {
                  BOOL v98 = (int *)*((void *)this + 65);
                  long long v99 = (double *)*((void *)this + 91);
                  do
                  {
                    uint64_t v101 = *v98++;
                    uint64_t v100 = v101;
                    double v102 = *v99++;
                    v97->f64[v100] = -v102;
                    --v96;
                  }
                  while (v96);
                }
                v97->f64[v121] = 1.0;
                if (v120 == -INFINITY)
                {
                  unint64_t v103 = *((void *)this + 79) - (void)v97;
                  if ((int)(v103 >> 3) >= 1)
                  {
                    unint64_t v104 = (v103 >> 3);
                    if (v104 >= 4)
                    {
                      uint64_t v106 = (v103 >> 3) & 3;
                      unint64_t v105 = v104 - v106;
                      unint64_t v107 = v97 + 1;
                      unint64_t v108 = v104 - v106;
                      do
                      {
                        float64x2_t v109 = vnegq_f64(*v107);
                        v107[-1] = vnegq_f64(v107[-1]);
                        *unint64_t v107 = v109;
                        v107 += 2;
                        v108 -= 4;
                      }
                      while (v108);
                      if (!v106) {
                        goto LABEL_155;
                      }
                    }
                    else
                    {
                      unint64_t v105 = 0;
                    }
                    unint64_t v110 = v105 - v104;
                    v111 = &v97->f64[v105];
                    do
                    {
                      double *v111 = -*v111;
                      ++v111;
                    }
                    while (!__CFADD__(v110++, 1));
                  }
                }
LABEL_155:
                uint64_t v93 = *((unsigned int *)this + 3982);
                if ((int)v93 >= 1) {
                  operations_research::IntegerDistribution::Add((uint64_t)v114, v93);
                }
                goto LABEL_157;
              }
              if (*off_26AECFC60[0] >= 1
                && (off_26AECFC60[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_26AECFC60, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
              {
                google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2480);
                int v76 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Infinite step length, double checking...", 40);
                google::LogMessage::~LogMessage((google::LogMessage *)v123);
              }
              operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)this + 8720);
            }
            else
            {
              if (v122 <= 0.0) {
                double v77 = v120;
              }
              else {
                double v77 = -v120;
              }
              if (*v6)
              {
                if (v119 == -1) {
                  goto LABEL_117;
                }
                uint64_t v113 = *(int *)(*((void *)this + 65) + 4 * v119);
                double v78 = *(double *)(*((void *)this + 743) + 8 * v113) - v118;
                double v79 = *(double *)(*((void *)this + 91) + 8 * v119);
                double v77 = v78 / v79;
                double v80 = -(v79 * (v78 / v79));
                BOOL v81 = v80 <= 0.0;
                if (v80 == 0.0) {
                  goto LABEL_116;
                }
              }
              else
              {
                if (v119 == -1)
                {
LABEL_117:
                  BOOL v82 = 0;
                  LODWORD(v113) = -1;
                  goto LABEL_118;
                }
                LODWORD(v113) = *(_DWORD *)(*((void *)this + 65) + 4 * v119);
                double v80 = -(*(double *)(*((void *)this + 91) + 8 * v119) * v77);
                BOOL v81 = v80 <= 0.0;
                if (v80 == 0.0) {
                  goto LABEL_116;
                }
              }
              if (!v81 && *(double *)(*((void *)this + 743) + 8 * (int)v113) >= v118)
              {
LABEL_116:
                BOOL v82 = 1;
                goto LABEL_118;
              }
              BOOL v82 = v80 < 0.0 && *(double *)(*((void *)this + 743) + 8 * (int)v113) <= v118;
LABEL_118:
              operations_research::glop::VariableValues::UpdateOnPivoting((uint64_t)v116, (uint64_t *)this + 91, v121, v77);
              if (v119 == -1)
              {
                if (v77 > 0.0)
                {
                  int v84 = 3;
                  goto LABEL_128;
                }
                if (v77 < 0.0)
                {
                  int v84 = 2;
LABEL_128:
                  int v85 = v121;
                  operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)this + 5480, v121, v84);
                  operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(v116, v85);
                }
                operations_research::glop::ReducedCosts::SetAndDebugCheckThatColumnIsDualFeasible((uint64_t)this + 8720, v121);
                goto LABEL_130;
              }
              operations_research::glop::PrimalEdgeNorms::UpdateBeforeBasisPivot((uint64_t)this + 6944, v121, *(_DWORD *)(*((void *)this + 65) + 4 * v119), v119, (char **)this + 91, (uint64_t)v115);
              operations_research::glop::ReducedCosts::UpdateBeforeBasisPivot((uint64_t)this + 8720, v121, v119, (void *)this + 91, v115);
              double v83 = v118;
              if (!v82) {
                *(double *)(*((void *)this + 743) + 8 * (int)v113) = v118;
              }
              operations_research::glop::RevisedSimplex::UpdateAndPivot((uint64_t)this, v121, v119, a3, v83);
              if (*(_DWORD *)a3) {
                goto LABEL_158;
              }
              if (*(char *)(a3 + 31) < 0) {
                operator delete(*(void **)(a3 + 8));
              }
LABEL_130:
              if (*v6 && v119 != -1)
              {
                operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(v116, v113);
                operations_research::glop::ReducedCosts::SetNonBasicVariableCostToZero((uint64_t)this + 8720, v113, (void *)(*((void *)this + 27) + 8 * (int)v113));
              }
              uint64_t v86 = *((unsigned int *)this + 3982);
              if (v120 == 0.0)
              {
                int v87 = v86 + 1;
              }
              else
              {
                if ((int)v86 < 1) {
                  goto LABEL_138;
                }
                operations_research::IntegerDistribution::Add((uint64_t)v114, v86);
                int v87 = 0;
              }
              *((_DWORD *)this + 3982) = v87;
LABEL_138:
              ++*((void *)this + 1283);
            }
          }
        }
        else
        {
          operations_research::glop::RevisedSimplex::ChooseLeavingVariableRow((uint64_t)this, v121, &v124, &v119, &v120, &v118, a3, v122);
          if (*(_DWORD *)a3) {
            goto LABEL_158;
          }
          if ((*(char *)(a3 + 31) & 0x80000000) == 0) {
            goto LABEL_92;
          }
          operator delete(*(void **)(a3 + 8));
          if (!v124) {
            goto LABEL_93;
          }
        }
      }
      else if (*off_26AECFC58[0] >= 1 {
             && (off_26AECFC58[0] != &google::kLogSiteUninitialized
      }
              || google::InitVLOG3__((google *)off_26AECFC58, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2447);
        double v74 = (void *)google::LogMessage::stream((google::LogMessage *)v123);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Skipping col #", 14);
        double v75 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" whose reduced cost is ", 23);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v123);
      }
    }
  }
  unint64_t v11 = (char *)operator new(0x20uLL);
  strcpy(v11, "time_limit must not be null.");
  unint64_t v12 = google::LogMessage::LogMessage((google::LogMessage *)&v129, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2353, 2);
  uint64_t v13 = (void *)google::LogMessage::stream(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v11, 28);
  google::LogMessage::~LogMessage((google::LogMessage *)&v129);
  std::string::__init_copy_ctor_external(&v125, v11, 0x1CuLL);
  operations_research::glop::Status::Status(a3, 3, (long long *)&v125);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  operator delete(v11);
}

void sub_23CB8A334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23CB8A348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23CB8A35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23CB8A370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23CB8A384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23CB8A398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a23);
  _Unwind_Resume(a1);
}

void sub_23CB8A57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23CB8A590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::InitializeObjectiveAndTestIfUnchanged(operations_research::glop::RevisedSimplex *this, const operations_research::glop::LinearProgram *a2)
{
  uint64_t v4 = *((void *)this + 27);
  uint64_t v5 = *((void *)this + 28);
  BOOL v6 = (unint64_t *)((char *)this + 216);
  unint64_t v7 = *(int *)((char *)this + 5);
  uint64_t v67 = 0;
  unint64_t v8 = (v5 - v4) >> 3;
  if (v7 <= v8)
  {
    if (v7 < v8) {
      *((void *)this + 28) = v4 + 8 * v7;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 216, v7 - v8, &v67);
  }
  uint64_t v9 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4;
  unsigned int v10 = -1431655765 * v9;
  if (!*((unsigned char *)a2 + 440))
  {
    if (-1431655765 * (int)v9 < 1)
    {
      uint64_t v19 = 1;
    }
    else
    {
      uint64_t v18 = (unint64_t *)((char *)a2 + 136);
      uint64_t v17 = (char *)*((void *)a2 + 17);
      if (*(double *)*v6 == *(double *)v17)
      {
        uint64_t v27 = 1;
        do
        {
          if (-1431655765 * v9 == v27)
          {
            uint64_t v19 = v27 >= (int)v10;
            goto LABEL_42;
          }
          double v28 = *(double *)(*v6 + 8 * v27);
          double v29 = *(double *)&v17[8 * v27++];
        }
        while (v28 == v29);
        uint64_t v19 = v27 - 1 >= (int)v10;
        if (v6 == v18) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v19 = 0;
        if (v6 == v18) {
          goto LABEL_42;
        }
      }
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v6, v17, *((char **)a2 + 18), (uint64_t)(*((void *)a2 + 18) - (void)v17) >> 3);
    }
LABEL_42:
    double v26 = *((double *)a2 + 54);
    *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *((void *)a2 + 53);
    goto LABEL_43;
  }
  if (-1431655765 * (int)v9 < 1)
  {
    uint64_t v19 = 1;
    goto LABEL_26;
  }
  unint64_t v11 = *((void *)a2 + 17);
  unint64_t v12 = *v6;
  unint64_t v13 = (-1431655765 * v9);
  if (v10 < 8uLL || (v12 < v11 + 8 * v13 ? (BOOL v14 = v11 >= v12 + 8 * v13) : (BOOL v14 = 1), !v14))
  {
    unint64_t v15 = 0;
    LOBYTE(v16) = 1;
    goto LABEL_20;
  }
  if (v13 >= 0x10)
  {
    unint64_t v15 = v13 - (v10 & 0xF);
    v30.i64[0] = 0x101010101010101;
    v30.i64[1] = 0x101010101010101;
    unint64_t v31 = v15;
    uint64_t v32 = (float64x2_t *)*v6;
    uint64_t v33 = (float64x2_t *)*((void *)a2 + 17);
    do
    {
      float64x2_t v35 = v33[6];
      float64x2_t v34 = v33[7];
      float64x2_t v37 = v33[4];
      float64x2_t v36 = v33[5];
      float64x2_t v39 = v33[2];
      float64x2_t v38 = v33[3];
      float64x2_t v41 = *v33;
      float64x2_t v40 = v33[1];
      v33 += 8;
      float64x2_t v42 = vnegq_f64(v41);
      float64x2_t v43 = vnegq_f64(v40);
      float64x2_t v44 = vnegq_f64(v39);
      float64x2_t v45 = vnegq_f64(v38);
      float64x2_t v46 = vnegq_f64(v37);
      float64x2_t v47 = vnegq_f64(v36);
      float64x2_t v48 = vnegq_f64(v35);
      float64x2_t v49 = vnegq_f64(v34);
      int8x16_t v30 = vbicq_s8(v30, vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v32, v42), (int32x4_t)vceqq_f64(v32[1], v43)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32[2], v44), (int32x4_t)vceqq_f64(v32[3], v45)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32[4], v46), (int32x4_t)vceqq_f64(v32[5], v47)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32[6], v48), (int32x4_t)vceqq_f64(v32[7], v49))))));
      v32[6] = v48;
      v32[7] = v49;
      v32[4] = v46;
      v32[5] = v47;
      v32[2] = v44;
      v32[3] = v45;
      float64x2_t *v32 = v42;
      v32[1] = v43;
      v32 += 8;
      v31 -= 16;
    }
    while (v31);
    v50.i64[0] = 0x101010101010101;
    v50.i64[1] = 0x101010101010101;
    unsigned int v16 = (vmaxvq_u8((uint8x16_t)vmvnq_s8(vceqq_s8(v30, v50))) & 1) == 0;
    if ((v10 & 0xF) == 0) {
      goto LABEL_24;
    }
    if ((v10 & 0xF) < 8uLL)
    {
LABEL_20:
      uint64_t v20 = (double *)(v12 + 8 * v15);
      uint64_t v21 = (double *)(v11 + 8 * v15);
      unint64_t v22 = v13 - v15;
      do
      {
        double v23 = *v21++;
        double v24 = -v23;
        if (*v20 != -v23) {
          LOBYTE(v16) = 0;
        }
        *v20++ = v24;
        --v22;
      }
      while (v22);
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v15 = 0;
    unsigned int v16 = 1;
  }
  uint64_t v51 = v10 & 7;
  uint64_t v52 = 8 * v15;
  uint64_t v53 = v15 + v51;
  unint64_t v15 = v13 - v51;
  int8x8_t v54 = vdup_n_s8(v16);
  double v55 = (float64x2_t *)(v11 + v52);
  double v56 = (float64x2_t *)(v12 + v52);
  uint64_t v57 = v53 - v13;
  do
  {
    float64x2_t v59 = v55[2];
    float64x2_t v58 = v55[3];
    float64x2_t v61 = *v55;
    float64x2_t v60 = v55[1];
    v55 += 4;
    float64x2_t v62 = vnegq_f64(v61);
    float64x2_t v63 = vnegq_f64(v60);
    float64x2_t v64 = vnegq_f64(v59);
    float64x2_t v65 = vnegq_f64(v58);
    int8x8_t v54 = vbic_s8(v54, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v56, v62), (int32x4_t)vceqq_f64(v56[1], v63)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v56[2], v64), (int32x4_t)vceqq_f64(v56[3], v65))))));
    v56[2] = v64;
    v56[3] = v65;
    *double v56 = v62;
    v56[1] = v63;
    v56 += 4;
    v57 += 8;
  }
  while (v57);
  LOBYTE(v16) = *(void *)&v54 == 0x101010101010101;
  if (v51) {
    goto LABEL_20;
  }
LABEL_24:
  uint64_t v19 = v16 & 1;
LABEL_26:
  double v25 = *((double *)a2 + 54);
  *((double *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = -*((double *)a2 + 53);
  double v26 = -v25;
LABEL_43:
  *((double *)this + 31) = v26;
  return v19;
}

void operations_research::glop::RevisedSimplex::DisplayErrors(operations_research::glop::RevisedSimplex *this)
{
  if (*off_26AECFCC0[0] >= 1
    && (off_26AECFCC0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFCC0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    if (*off_26AECFCC8[0] >= 1
      && (off_26AECFCC8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFCC8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2959);
      uint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Primal infeasibility (bounds) = ", 32);
      operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
    if (*off_26AECFCD0[0] >= 1
      && (off_26AECFCD0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFCD0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2961);
      double v3 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Primal residual |A.x - b| = ", 28);
      operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
    if (*off_26AECFCD8[0] >= 1
      && (off_26AECFCD8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFCD8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2963);
      uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Dual infeasibility (reduced costs) = ", 37);
      operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
    if (*off_26AECFCE0[0] >= 1
      && (off_26AECFCE0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFCE0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2965);
      uint64_t v5 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Dual residual |c_B - y.B| = ", 28);
      operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
  }
}

void sub_23CB8AB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB8ABA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB8ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB8ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *operations_research::glop::RevisedSimplex::SaveState(operations_research::glop::RevisedSimplex *this)
{
  StatusRow = (char **)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  uint64_t result = (void *)((char *)this + 696);
  if ((char **)((char *)this + 696) != StatusRow) {
    uint64_t result = std::vector<operations_research::glop::VariableStatus>::__assign_with_size[abi:ne180100]<operations_research::glop::VariableStatus*,operations_research::glop::VariableStatus*>(result, *StatusRow, StatusRow[1], StatusRow[1] - *StatusRow);
  }
  *((unsigned char *)this + 72google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  return result;
}

double operations_research::glop::RevisedSimplex::ComputeInitialProblemObjectiveValue(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v1 = (double *)*((void *)this + 27);
  unint64_t v2 = *((void *)this + 28) - (void)v1;
  if ((int)(v2 >> 3) < 1) {
    return *((double *)this + 31) * (*((double *)this + 30) + 0.0);
  }
  double v3 = (double *)*((void *)this + 743);
  uint64_t v4 = (v2 >> 3);
  double v5 = 0.0;
  double v6 = 0.0;
  do
  {
    double v7 = *v1++;
    double v8 = v7;
    double v9 = *v3++;
    double v10 = v6 + v8 * v9;
    double v11 = v5 + v10;
    double v6 = v10 + v5 - (v5 + v10);
    double v5 = v11;
    --v4;
  }
  while (v4);
  return *((double *)this + 31) * (v11 + *((double *)this + 30));
}

void operations_research::glop::anonymous namespace'::Cleanup::~Cleanup(operations_research::glop::_anonymous_namespace_::Cleanup *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  double v3 = (operations_research::glop::_anonymous_namespace_::Cleanup *)*((void *)this + 3);
  if (v3 == this)
  {
    (*(void (**)(operations_research::glop::_anonymous_namespace_::Cleanup *))(*(void *)this + 32))(this);
  }
  else if (v3)
  {
    (*(void (**)(operations_research::glop::_anonymous_namespace_::Cleanup *))(*(void *)v3 + 40))(v3);
  }
}

uint64_t operations_research::glop::RevisedSimplex::GetProblemStatus(operations_research::glop::RevisedSimplex *this)
{
  return *(char *)this;
}

double operations_research::glop::RevisedSimplex::GetObjectiveValue(operations_research::glop::RevisedSimplex *this)
{
  return *((double *)this + 71);
}

uint64_t operations_research::glop::RevisedSimplex::GetNumberOfIterations(operations_research::glop::RevisedSimplex *this)
{
  return *((void *)this + 1283);
}

uint64_t operations_research::glop::RevisedSimplex::GetProblemNumRows(operations_research::glop::RevisedSimplex *this)
{
  return *(unsigned int *)((char *)this + 1);
}

uint64_t operations_research::glop::RevisedSimplex::GetProblemNumCols(operations_research::glop::RevisedSimplex *this)
{
  return *(unsigned int *)((char *)this + 5);
}

double operations_research::glop::RevisedSimplex::GetVariableValue(uint64_t a1, int a2)
{
  return *(double *)(*(void *)(a1 + 5944) + 8 * a2);
}

double operations_research::glop::RevisedSimplex::GetReducedCost(uint64_t a1, int a2)
{
  return *(double *)(*(void *)(a1 + 600) + 8 * a2);
}

uint64_t operations_research::glop::RevisedSimplex::GetReducedCosts(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 600;
}

double operations_research::glop::RevisedSimplex::GetDualValue(uint64_t a1, int a2)
{
  return *(double *)(*(void *)(a1 + 576) + 8 * a2);
}

uint64_t operations_research::glop::RevisedSimplex::GetVariableStatus(uint64_t a1, int a2)
{
  return *(char *)(*(void *)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 5480))
                               + a2);
}

uint64_t operations_research::glop::RevisedSimplex::GetState(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 696;
}

uint64_t operations_research::glop::RevisedSimplex::GetConstraintStatus(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(*(void *)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 5480))
                          + *(int *)(a1 + 9)
                          + (uint64_t)a2);
  if (v2 == 2) {
    return 3;
  }
  if (v2 == 3) {
    return 2;
  }

  return operations_research::glop::VariableToConstraintStatus((char)v2);
}

uint64_t operations_research::glop::RevisedSimplex::GetDualRay(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 648;
}

uint64_t operations_research::glop::RevisedSimplex::GetDualRayRowCombination(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 672;
}

uint64_t operations_research::glop::RevisedSimplex::GetBasis(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 520) + 4 * a2);
}

void operations_research::glop::RevisedSimplex::GetPrettySolverStats(operations_research::glop::RevisedSimplex *this@<X0>, uint64_t a2@<X8>)
{
  v9[16] = *MEMORY[0x263EF8340];
  operations_research::glop::GetProblemStatusString(*(char *)this, (uint64_t)__p);
  uint64_t v4 = *((void *)this + 1286);
  v9[0] = __p;
  v9[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  uint64_t v5 = *((void *)this + 1283);
  v9[2] = v4;
  v9[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  uint64_t v6 = *((void *)this + 1287);
  v9[4] = v5;
  v9[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>;
  v9[6] = v6;
  v9[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v9[8] = *((void *)this + 1284);
  v9[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>;
  v9[10] = *((void *)this + 1288);
  v9[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v9[12] = *((void *)this + 1285);
  v9[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>;
  v9[14] = FLAGS_simplex_stop_after_first_basis;
  v9[15] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<BOOL>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("Problem status                               : %s\nSolving time                                 : %-6.4g\nNumber of iterations                         : %u\nTime for solvability (first phase)           : %-6.4g\nNumber of iterations for solvability         : %u\nTime for optimization                        : %-6.4g\nNumber of iterations for optimization        : %u\nStop after first basis                       : %d\n", 412, (uint64_t)v9, 8, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23CB8AFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 operations_research::glop::RevisedSimplex::SetVariableNames(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v2 = (void *)((char *)this + 544);
  unint64_t v3 = *(int *)((char *)this + 5);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v4 = *((void *)this + 69);
  uint64_t v5 = *((void *)this + 68);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
  if (v3 <= v6)
  {
    if (v3 < v6)
    {
      uint64_t v8 = v5 + 24 * (int)v3;
      while (v4 != v8)
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      *((void *)this + 69) = v8;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)((char *)this + 544), v3 - v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  LODWORD(v9) = *(_DWORD *)((char *)this + 9);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v18 = ++v11;
      uint64_t v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("x%d", 3, (uint64_t)&v18, 1, (uint64_t)&__p);
      uint64_t v12 = *v2 + v10;
      if (*(char *)(v12 + 23) < 0) {
        operator delete(*(void **)v12);
      }
      __n128 result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v12 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)uint64_t v12 = result;
      uint64_t v9 = *(int *)((char *)this + 9);
      v10 += 24;
    }
    while (v11 < v9);
  }
  if ((int)v9 < *(_DWORD *)((char *)this + 5))
  {
    uint64_t v13 = (int)v9;
    uint64_t v14 = 24 * (int)v9;
    int v15 = v9 + 1;
    do
    {
      uint64_t v18 = (v15 - *(_DWORD *)((char *)this + 9));
      uint64_t v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("s%d", 3, (uint64_t)&v18, 1, (uint64_t)&__p);
      uint64_t v16 = *((void *)this + 68) + v14;
      if (*(char *)(v16 + 23) < 0) {
        operator delete(*(void **)v16);
      }
      ++v13;
      __n128 result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)uint64_t v16 = result;
      v14 += 24;
      ++v15;
    }
    while (v13 < *(int *)((char *)this + 5));
  }
  return result;
}

void sub_23CB8B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::UseSingletonColumnInInitialBasis(uint64_t a1, uint64_t *a2)
{
  double v56 = 0;
  uint64_t v57 = 0;
  float64x2_t v58 = 0;
  uint64_t v2 = *(unsigned int *)(a1 + 5);
  int8x8_t v54 = 0;
  double v55 = 0;
  std::vector<std::string>::value_type __p = 0;
  if (!v2)
  {
    uint64_t v8 = 0;
    double v56 = 0;
    goto LABEL_65;
  }
  if ((v2 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (char *)operator new(8 * v2);
  size_t v5 = 8 * (int)v2;
  unint64_t v6 = &v4[v5];
  std::vector<std::string>::value_type __p = v4;
  double v55 = &v4[v5];
  bzero(v4, v5);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int8x8_t v54 = v6;
  uint64_t v12 = v57;
  uint64_t v52 = v4;
  do
  {
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(v13 + 8 * v9);
    uint64_t v15 = v9 + 1;
    if (*(void *)(v13 + 8 * (v9 + 1)) - v14 == 1)
    {
      *(void *)&long long v7 = *(void *)(*(void *)(a1 + 256) + 8 * v9);
      if (*(double *)&v7 != *(double *)(*(void *)(a1 + 280) + 8 * v9))
      {
        double v16 = *(double *)(*(void *)(a1 + 24) + 8 * v14);
        uint64_t v17 = *(void *)(a1 + 216);
        if (*(double *)(*(void *)(a1 + 5944) + 8 * v9) == *(double *)&v7) {
          double v18 = *(double *)(v17 + 8 * v9);
        }
        else {
          double v18 = -*(double *)(v17 + 8 * v9);
        }
        *(double *)&long long v7 = v18 / fabs(v16);
        *(void *)&v4[8 * v9] = v7;
        if (v8 < v10)
        {
          int *v8 = v9;
          uint64_t v12 = (uint64_t)(v8 + 1);
LABEL_5:
          LODWORD(v2) = *(_DWORD *)(a1 + 5);
          uint64_t v8 = (int *)v12;
          goto LABEL_6;
        }
        uint64_t v19 = v8 - v11;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
        {
          uint64_t v57 = v12;
          float64x2_t v58 = v10;
          double v56 = v11;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v10 - (char *)v11) >> 1 > v20) {
          unint64_t v20 = ((char *)v10 - (char *)v11) >> 1;
        }
        if ((unint64_t)((char *)v10 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 62)
          {
            uint64_t v57 = v12;
            float64x2_t v58 = v10;
            double v56 = v11;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v22 = operator new(4 * v21);
          double v23 = (int *)&v22[4 * v19];
          *double v23 = v9;
          uint64_t v12 = (uint64_t)(v23 + 1);
          if (v8 == v11) {
            goto LABEL_27;
          }
        }
        else
        {
          unint64_t v22 = 0;
          double v23 = (int *)(4 * v19);
          *(_DWORD *)(4 * v19) = v9;
          uint64_t v12 = 4 * v19 + 4;
          if (v8 == v11) {
            goto LABEL_27;
          }
        }
        unint64_t v24 = (char *)(v8 - 1) - (char *)v11;
        if (v24 >= 0xBC)
        {
          if (&v22[(char *)v8 - (char *)v11 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[(char *)v8 - (char *)v11 - 4])
          {
            double v25 = v8;
          }
          else if ((int *)((char *)v8 - (v24 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v8 - 1)
          {
            double v25 = v8;
          }
          else if ((unint64_t)((char *)v11 - v22) >= 0x20)
          {
            uint64_t v28 = (v24 >> 2) + 1;
            uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
            double v25 = &v8[v29 / 0xFFFFFFFFFFFFFFFCLL];
            double v23 = (int *)((char *)v23 - v29);
            int8x16_t v30 = &v22[4 * v19 - 16];
            unint64_t v31 = v8 - 4;
            uint64_t v32 = v28 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v7 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              *int8x16_t v30 = v7;
              v30 -= 2;
              v31 -= 8;
              v32 -= 8;
            }
            while (v32);
            if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_27;
            }
          }
          else
          {
            double v25 = v8;
          }
        }
        else
        {
          double v25 = v8;
        }
        do
        {
          int v26 = *--v25;
          *--double v23 = v26;
        }
        while (v25 != v11);
LABEL_27:
        uint64_t v10 = (int *)&v22[4 * v21];
        if (v11)
        {
          uint64_t v27 = v12;
          operator delete(v11);
          uint64_t v12 = v27;
        }
        uint64_t v11 = v23;
        uint64_t v4 = v52;
        goto LABEL_5;
      }
    }
LABEL_6:
    ++v9;
  }
  while (v15 < (int)v2);
  uint64_t v57 = v12;
  float64x2_t v58 = v10;
  double v56 = v11;
  if (v11 != v8)
  {
    p_p = &__p;
    uint64_t v8 = v56;
    uint64_t v33 = (unsigned int *)v57;
    if (v56 != (int *)v57)
    {
      for (uint64_t i = (unsigned int *)v56; i != v33; ++i)
      {
        uint64_t v35 = *i;
        uint64_t v36 = *(void *)(*(void *)(a1 + 72) + 8 * (int)v35);
        uint64_t v37 = *(void *)(a1 + 24);
        uint64_t v38 = *(int *)(*(void *)(a1 + 48) + 4 * v36);
        uint64_t v39 = *a2;
        if (*(_DWORD *)(*a2 + 4 * v38) == -1)
        {
          *(_DWORD *)(v39 + 4 * v38) = v35;
          uint64_t v40 = *(void *)(a1 + 816);
          double v41 = *(double *)(v40 + 8 * v38);
          if (v41 == 0.0) {
            continue;
          }
        }
        else
        {
          uint64_t v40 = *(void *)(a1 + 816);
          double v41 = *(double *)(v40 + 8 * v38);
          if (v41 == 0.0) {
            continue;
          }
        }
        double v42 = *(double *)(v37 + 8 * v36);
        uint64_t v43 = 8 * (int)v35;
        double v44 = *(double *)(*(void *)(a1 + 5944) + v43);
        double v45 = v41 / v42;
        double v46 = v41 / v42 + v44;
        double v47 = *(double *)(*(void *)(a1 + 256) + v43);
        if (v46 >= v47 && v46 <= *(double *)(*(void *)(a1 + 280) + 8 * (int)v35))
        {
          *(void *)(v40 + 8 * v38) = 0;
          *(_DWORD *)(v39 + 4 * v38) = v35;
        }
        else
        {
          if (v45 > 0.0 && v44 == v47)
          {
            double v42 = -v42;
            int v50 = 3;
          }
          else
          {
            if (v45 >= 0.0 || v44 != *(double *)(*(void *)(a1 + 280) + 8 * (int)v35)) {
              continue;
            }
            int v50 = 2;
          }
          *(double *)(v40 + 8 * v38) = v41
                                     + v42
                                     * (*(double *)(**(void **)(a1 + 5496) + 8 * (int)v35)
                                      - *(double *)(**(void **)(a1 + 5488) + 8 * (int)v35));
          operations_research::glop::VariablesInfo::UpdateToNonBasicStatus(a1 + 5480, v35, v50);
          operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((void *)(a1 + 5904), v35);
        }
      }
    }
  }
  if (__p)
  {
    int8x8_t v54 = __p;
    operator delete(__p);
  }
LABEL_65:
  if (v8)
  {
    uint64_t v57 = (uint64_t)v8;
    operator delete(v8);
  }
}

void sub_23CB8B68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v19 = v17;
    if (!v17) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v19 = v17;
    if (!v17) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::RevisedSimplex::InitializeMatrixAndTestIfUnchanged(uint64_t a1, uint64_t a2, BOOL *a3, BOOL *a4, _DWORD *a5)
{
  if (operations_research::glop::AreFirstColumnsAndRowsExactlyEquals(*(_DWORD *)(a1 + 1), *(_DWORD *)(a1 + 9), (uint64_t *)a2, a1 + 16))
  {
    int v10 = *(_DWORD *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 1);
    if (v10 == v11 && *(_DWORD *)(a1 + 5) == -1431655765 * ((*(void *)(a2 + 8) - *(void *)a2) >> 4)) {
      return 1;
    }
    if (v10 <= v11)
    {
      *a3 = 0;
      if (v10 != v11) {
        goto LABEL_8;
      }
    }
    else
    {
      BOOL v13 = operations_research::glop::LinearProgram::GetFirstSlackVariable((operations_research::glop::LinearProgram *)a2) == *(_DWORD *)(a1 + 9);
      int v14 = *(_DWORD *)(a2 + 24);
      int v15 = *(_DWORD *)(a1 + 1);
      *a3 = v13;
      if (v14 != v15) {
        goto LABEL_8;
      }
    }
    int FirstSlackVariable = operations_research::glop::LinearProgram::GetFirstSlackVariable((operations_research::glop::LinearProgram *)a2);
    int v21 = *(_DWORD *)(a1 + 9);
    *a4 = FirstSlackVariable > v21;
    if (FirstSlackVariable <= v21) {
      int v16 = 0;
    }
    else {
      int v16 = -1431655765 * ((*(void *)(a2 + 8) - *(void *)a2) >> 4) - *(_DWORD *)(a1 + 5);
    }
    goto LABEL_9;
  }
  *a3 = 0;
LABEL_8:
  int v16 = 0;
  *a4 = 0;
LABEL_9:
  *a5 = v16;
  *(_DWORD *)(a1 + 9) = operations_research::glop::LinearProgram::GetFirstSlackVariable((operations_research::glop::LinearProgram *)a2);
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 24);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  *(_DWORD *)(a1 + 5) = v17;
  int v22 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<std::string>::value_type __p = 0;
  uint64_t v26 = 0;
  if (v17 << 32) {
    std::vector<operations_research::glop::SparseColumn const*>::__append((unint64_t *)&__p, (int)v17, (const double *)&v26);
  }
  if ((int)v17 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    do
    {
      *(void *)((char *)__p + v18) = *(void *)a2 + v19;
      v19 += 48;
      v18 += 8;
    }
    while (48 * v17 != v19);
  }
  int v22 = *(_DWORD *)(a2 + 24);
  operations_research::glop::CompactSparseMatrix::PopulateFromMatrixView(a1 + 16, (uint64_t)&v22);
  if (__p)
  {
    unint64_t v24 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 11715)) {
    operations_research::glop::CompactSparseMatrix::PopulateFromTranspose((operations_research::glop::CompactSparseMatrix *)(a1 + 96), (const operations_research::glop::CompactSparseMatrix *)(a1 + 16));
  }
  return 0;
}

void sub_23CB8B914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::glop::RevisedSimplex::InitializeBoundsAndTestIfUnchanged(operations_research::glop::RevisedSimplex *this, const operations_research::glop::LinearProgram *a2)
{
  uint64_t v4 = (double **)((char *)this + 256);
  uint64_t v5 = *(unsigned int *)((char *)this + 5);
  uint64_t v23 = 0;
  unint64_t v6 = (int)v5;
  uint64_t v7 = *((void *)this + 32);
  unint64_t v8 = (*((void *)this + 33) - v7) >> 3;
  if ((int)v5 <= v8)
  {
    if ((int)v5 < v8) {
      *((void *)this + 33) = v7 + 8 * (int)v5;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 256, (int)v5 - v8, &v23);
    uint64_t v5 = *(unsigned int *)((char *)this + 5);
    unint64_t v6 = (int)v5;
  }
  uint64_t v9 = (void *)((char *)this + 280);
  uint64_t v23 = 0;
  uint64_t v10 = *((void *)this + 35);
  unint64_t v11 = (*((void *)this + 36) - v10) >> 3;
  if (v6 <= v11)
  {
    if (v6 < v11) {
      *((void *)this + 36) = v10 + 8 * v6;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 280, v6 - v11, &v23);
    uint64_t v5 = *(unsigned int *)((char *)this + 5);
    unint64_t v6 = (int)v5;
  }
  uint64_t v23 = 0;
  uint64_t v12 = v5 << 32;
  BOOL v13 = (char *)*((void *)this + 38);
  unint64_t v14 = (uint64_t)(*((void *)this + 39) - (void)v13) >> 3;
  if (v6 <= v14)
  {
    if (v6 < v14) {
      *((void *)this + 39) = &v13[8 * v6];
    }
  }
  else
  {
    int v15 = (char **)((char *)this + 304);
    std::vector<double>::__append((uint64_t)v15, v6 - v14, &v23);
    BOOL v13 = *v15;
  }
  bzero(v13, v12 >> 29);
  int v16 = -1431655765 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
  if (v16 < 1)
  {
    return 1;
  }
  else
  {
    unint64_t v17 = (char *)*((void *)a2 + 20);
    BOOL v18 = 0;
    if (**v4 == *(double *)v17)
    {
      uint64_t v20 = 0;
      do
      {
        if (*(double *)(*v9 + 8 * v20) != *(double *)(*((void *)a2 + 23) + 8 * v20)) {
          break;
        }
        BOOL v18 = v20 + 1 >= v16;
        if (-1431655765 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4) - 1 == v20) {
          return v18;
        }
        double v21 = (*v4)[v20 + 1];
        double v22 = *(double *)&v17[8 * v20++ + 8];
      }
      while (v21 == v22);
    }
    if (v4 != (double **)((char *)a2 + 160)) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v4, v17, *((char **)a2 + 21), (uint64_t)(*((void *)a2 + 21) - (void)v17) >> 3);
    }
    if (v9 != (void *)((char *)a2 + 184)) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v9, *((char **)a2 + 23), *((char **)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3);
    }
  }
  return v18;
}

void operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double>::AssignToZero(char **a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v3 = a2 << 32;
  uint64_t v4 = (int)a2;
  uint64_t v5 = *a1;
  unint64_t v7 = (a1[1] - v5) >> 3;
  BOOL v8 = (int)a2 >= v7;
  unint64_t v9 = (int)a2 - v7;
  if (v9 != 0 && v8)
  {
    std::vector<double>::__append((uint64_t)a1, v9, &v10);
    uint64_t v5 = *a1;
LABEL_4:
    bzero(v5, v3 >> 29);
    return;
  }
  if (v8) {
    goto LABEL_4;
  }
  a1[1] = &v5[8 * v4];
  bzero(v5, v3 >> 29);
}

void operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (void *)(a1 + 5480);
  operations_research::glop::VariablesInfo::InitializeAndComputeType((operations_research::glop::VariablesInfo *)(a1 + 5480));
  if (*(int *)(a1 + 5) >= 1)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = *(int *)(a1 + 9) - (uint64_t)a3;
    while (1)
    {
      double v10 = *(double *)(*(void *)(a1 + 256) + 8 * v7);
      double v11 = *(double *)(*(void *)(a1 + 280) + 8 * v7);
      if (v10 == v11)
      {
        int v12 = 1;
        if (v7 >= v9) {
          goto LABEL_23;
        }
      }
      else if (v10 == -INFINITY && v11 == INFINITY)
      {
        int v12 = 4;
        if (v7 >= v9) {
          goto LABEL_23;
        }
      }
      else
      {
        if (fabs(v10) > fabs(v11)) {
          int v12 = 3;
        }
        else {
          int v12 = 2;
        }
        if (v7 >= v9) {
          goto LABEL_23;
        }
      }
      if (v7 < (int)(*(_DWORD *)(a2 + 8) - *(void *)a2))
      {
        int v14 = *(unsigned __int8 *)(*(void *)a2 + v7);
        if (!*(unsigned char *)(*(void *)a2 + v7)) {
          goto LABEL_26;
        }
LABEL_18:
        if (v14 != v12 && v12 != 1)
        {
          switch(v14)
          {
            case 1:
            case 4:
              goto LABEL_37;
            case 2:
              if (v10 != -INFINITY) {
                LOBYTE(v12) = 2;
              }
              break;
            case 3:
              if (v11 != INFINITY) {
                LOBYTE(v12) = 3;
              }
              break;
            default:
              LOBYTE(v12) = v14;
              break;
          }
        }
        goto LABEL_37;
      }
LABEL_23:
      if (v7 < *(int *)(a1 + 9) || v7 - a3 >= (int)(*(_DWORD *)(a2 + 8) - *(void *)a2))
      {
LABEL_37:
        int v19 = (char)v12;
        uint64_t v17 = (uint64_t)v6;
        uint64_t v18 = v7;
LABEL_38:
        operations_research::glop::VariablesInfo::UpdateToNonBasicStatus(v17, v18, v19);
        if (++v7 >= *(int *)(a1 + 5)) {
          break;
        }
      }
      else
      {
        int v14 = *(unsigned __int8 *)(*(void *)a2 + v7 - a3);
        if (*(unsigned char *)(*(void *)a2 + v7 - a3)) {
          goto LABEL_18;
        }
LABEL_26:
        if (v8 == *(_DWORD *)(a1 + 1))
        {
          if (*operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(operations_research::glop::BasisState const&,gtl::IntType<operations_research::glop::ColIndex_tag_,int>)::vlocal__[0] >= 1
            && (operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(operations_research::glop::BasisState const&,gtl::IntType<operations_research::glop::ColIndex_tag_,int>)::vlocal__[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(operations_research::glop::BasisState const&,gtl::IntType<operations_research::glop::ColIndex_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v20, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 927);
            int v15 = (void *)google::LogMessage::stream((google::LogMessage *)v20);
            int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Too many basic variables in the warm-start basis.", 49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Only keeping the first ones as VariableStatus::BASIC.", 53);
            google::LogMessage::~LogMessage((google::LogMessage *)v20);
          }
          uint64_t v17 = (uint64_t)v6;
          uint64_t v18 = v7;
          int v19 = v12;
          goto LABEL_38;
        }
        ++v8;
        operations_research::glop::VariablesInfo::UpdateToBasicStatus(v6, v7++);
        if (v7 >= *(int *)(a1 + 5)) {
          break;
        }
      }
    }
  }
  operations_research::glop::VariableValues::ResetAllNonBasicVariableValues((operations_research::glop::VariableValues *)(a1 + 5904));
}

void sub_23CB8BE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::RevisedSimplex::CreateInitialBasis(operations_research::glop::RevisedSimplex *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (operations_research::glop::RevisedSimplex *)((char *)this + 5480);
  operations_research::glop::VariablesInfo::InitializeAndComputeType((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  if (*(int *)((char *)this + 5) >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    do
    {
      double v7 = *(double *)(*((void *)this + 32) + 8 * v4);
      double v8 = *(double *)(*((void *)this + 35) + 8 * v4);
      if (v7 == v8)
      {
        int v6 = 1;
      }
      else if (v7 == -INFINITY && v8 == INFINITY)
      {
        int v6 = 4;
      }
      else if (fabs(v7) > fabs(v8))
      {
        int v6 = 3;
      }
      else
      {
        int v6 = 2;
      }
      operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)v3, v4, v6);
      operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((void *)this + 738, v4);
      if (v6 == 4) {
        ++v5;
      }
      ++v4;
    }
    while (v4 < *(int *)((char *)this + 5));
  }
  if (*off_26AECFB98[0] > 0
    && (off_26AECFB98[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFB98, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 975);
    double v10 = (void *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Number of free variables in the problem: ", 41);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v100);
  }
  uint64_t v11 = *(int *)((char *)this + 1);
  uint64_t v12 = *(unsigned int *)((char *)this + 1);
  memset(&v101, 0, sizeof(v101));
  if (!v11) {
    goto LABEL_31;
  }
  if ((v12 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  BOOL v13 = (int *)operator new(4 * v12);
  v101.__begin_ = v13;
  v101.__end_cap_.__value_ = &v13[v11];
  memset(v13, 255, 4 * v11);
  v101.__end_ = &v13[v11];
  unsigned int v15 = *(_DWORD *)((char *)this + 9);
  if (v11 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = v11;
  }
  if (v16 >= 8)
  {
    v14.i32[0] = *(_DWORD *)((char *)this + 9);
    int32x4_t v18 = vdupq_n_s32(v15);
    v19.i64[0] = 0x400000004;
    v19.i64[1] = 0x400000004;
    int32x4_t v20 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_s32(v14, v19), 0);
    uint64_t v17 = v16 & 0x7FFFFFFFFFFFFFF8;
    int32x4_t v21 = (int32x4_t)xmmword_23CE7EC40;
    double v22 = (int32x4_t *)(v13 + 4);
    v23.i64[0] = 0x800000008;
    v23.i64[1] = 0x800000008;
    uint64_t v24 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v22[-1] = vaddq_s32(v18, v21);
      *double v22 = vaddq_s32(v20, v21);
      int32x4_t v21 = vaddq_s32(v21, v23);
      v22 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v16 == v17) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  do
  {
    v13[v17] = v15 + v17;
    ++v17;
  }
  while (v17 < v11);
LABEL_31:
  uint64_t v25 = (char *)this + 11644;
  if (*((unsigned char *)this + 11644) || *((_DWORD *)this + 2929) == 3 || !*((unsigned char *)this + 11809)) {
    goto LABEL_77;
  }
  if (*(int *)((char *)this + 5) < 1) {
    goto LABEL_59;
  }
  uint64_t v26 = 0;
  do
  {
    if (*(void *)(*((void *)this + 9) + 8 * v26 + 8) - *(void *)(*((void *)this + 9) + 8 * v26) != 1) {
      goto LABEL_36;
    }
    int v27 = *(unsigned __int8 *)(*(void *)operations_research::glop::VariablesInfo::GetStatusRow(v3) + v26);
    double v28 = *(double *)(*((void *)this + 27) + 8 * v26);
    if (v28 > 0.0)
    {
      double v29 = *(double *)(*((void *)this + 32) + 8 * v26);
      BOOL v30 = v29 > -INFINITY && v29 < INFINITY;
      if (v30 && v27 == 3)
      {
        int v35 = 2;
        goto LABEL_57;
      }
    }
    if (v28 < 0.0)
    {
      double v32 = *(double *)(*((void *)this + 35) + 8 * v26);
      BOOL v33 = v32 > -INFINITY && v32 < INFINITY;
      if (v33 && v27 == 2)
      {
        int v35 = 3;
LABEL_57:
        operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)v3, v26, v35);
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((void *)this + 738, v26);
      }
    }
LABEL_36:
    ++v26;
  }
  while (v26 < *(int *)((char *)this + 5));
  uint64_t v11 = *(int *)((char *)this + 1);
  LODWORD(v12) = *(_DWORD *)((char *)this + 1);
LABEL_59:
  v100[0] = 0;
  uint64_t v36 = (char *)*((void *)this + 102);
  unint64_t v37 = (uint64_t)(*((void *)this + 103) - (void)v36) >> 3;
  if (v11 <= v37)
  {
    if (v11 < v37) {
      *((void *)this + 103) = &v36[8 * v11];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 816, v11 - v37, v100);
    uint64_t v36 = (char *)*((void *)this + 102);
  }
  bzero(v36, 8 * (int)v12);
  uint64_t v38 = *(unsigned int *)((char *)this + 5);
  if ((int)v38 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = *((void *)this + 743);
    do
    {
      double v41 = *(double *)(v40 + 8 * v39);
      if (v41 == 0.0)
      {
        ++v39;
      }
      else
      {
        uint64_t v42 = *((void *)this + 9);
        uint64_t v43 = *(void *)(v42 + 8 * v39++);
        uint64_t v44 = *(void *)(v42 + 8 * v39);
        BOOL v45 = v44 <= v43;
        uint64_t v46 = v44 - v43;
        if (!v45)
        {
          double v47 = -v41;
          uint64_t v48 = *((void *)this + 102);
          float64x2_t v49 = (int *)(*((void *)this + 6) + 4 * v43);
          int v50 = (double *)(*((void *)this + 3) + 8 * v43);
          do
          {
            double v51 = *v50++;
            double v52 = v51;
            uint64_t v53 = *v49++;
            *(double *)(v48 + 8 * v53) = *(double *)(v48 + 8 * v53) + v47 * v52;
            --v46;
          }
          while (v46);
        }
      }
    }
    while (v39 != v38);
  }
  std::vector<int>::assign(&v101, *(int *)((char *)this + 1), &operations_research::glop::kInvalidCol);
  operations_research::glop::RevisedSimplex::UseSingletonColumnInInitialBasis((uint64_t)this, (uint64_t *)&v101);
  int v54 = *(_DWORD *)((char *)this + 1);
  if (v54 >= 1)
  {
    uint64_t v55 = 0;
    std::vector<int>::pointer begin = v101.__begin_;
    do
    {
      if (begin[v55] == -1)
      {
        begin[v55] = v55 + *(_DWORD *)((char *)this + 9);
        int v54 = *(_DWORD *)((char *)this + 1);
      }
      ++v55;
    }
    while (v55 < v54);
  }
LABEL_77:
  int v57 = *((_DWORD *)this + 2929);
  if ((v57 - 1) >= 2)
  {
    if (!v57) {
      goto LABEL_120;
    }
    if (v57 == 3)
    {
      uint64_t TypeRow = operations_research::glop::VariablesInfo::GetTypeRow(v3);
      operations_research::glop::InitialBasis::InitialBasis(v100, (uint64_t)this + 16, (uint64_t)this + 216, (uint64_t)this + 256, (uint64_t)this + 280, TypeRow);
      unsigned int v59 = *(_DWORD *)((char *)this + 5);
      if (*v25) {
        operations_research::glop::InitialBasis::GetDualMarosBasis((uint64_t)v100, v59, &v101);
      }
      else {
        operations_research::glop::InitialBasis::GetPrimalMarosBasis((uint64_t)v100, v59, &v101);
      }
      uint64_t v74 = *(unsigned int *)((char *)this + 1);
      if ((int)v74 >= 1)
      {
        unsigned int v75 = *(_DWORD *)((char *)this + 9);
        if (v74 >= 8)
        {
          uint64_t v76 = v74 & 0x7FFFFFF8;
          int32x4_t v78 = vdupq_n_s32(v75);
          v60.i32[0] = *(_DWORD *)((char *)this + 9);
          v79.i64[0] = 0x400000004;
          v79.i64[1] = 0x400000004;
          int32x4_t v80 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_s32(v60, v79), 0);
          int32x4_t v81 = (int32x4_t)xmmword_23CE7EC40;
          BOOL v82 = (int32x4_t *)(v101.__begin_ + 4);
          int32x4_t v83 = 0uLL;
          v84.i64[0] = 0x800000008;
          v84.i64[1] = 0x800000008;
          uint64_t v85 = v74 & 0xFFFFFFF8;
          int32x4_t v86 = 0uLL;
          do
          {
            int32x4_t v83 = vsubq_s32(v83, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v82[-1], vaddq_s32(v78, v81))));
            int32x4_t v86 = vsubq_s32(v86, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v82, vaddq_s32(v80, v81))));
            int32x4_t v81 = vaddq_s32(v81, v84);
            v82 += 2;
            v85 -= 8;
          }
          while (v85);
          int v77 = vaddvq_s32(vaddq_s32(v86, v83));
          if (v76 != v74) {
            goto LABEL_110;
          }
        }
        else
        {
          uint64_t v76 = 0;
          int v77 = 0;
LABEL_110:
          int v87 = v75 + v76;
          char v88 = &v101.__begin_[v76];
          uint64_t v89 = v74 - v76;
          do
          {
            int v90 = *v88++;
            if (v87 != v90) {
              ++v77;
            }
            ++v87;
            --v89;
          }
          while (v89);
        }
      }
      if (*off_26AECFBA0[0] > 0
        && (off_26AECFBA0[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFBA0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1047);
        unint64_t v91 = (void *)google::LogMessage::stream((google::LogMessage *)v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Number of Maros basis changes: ", 31);
        std::ostream::operator<<();
        goto LABEL_118;
      }
      goto LABEL_120;
    }
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1102, 1);
    double v72 = (void *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Unsupported initial_basis parameters: ", 38);
    std::ostream::operator<<();
LABEL_101:
    uint64_t v73 = (google::LogMessage *)v100;
LABEL_119:
    google::LogMessage::~LogMessage(v73);
    goto LABEL_120;
  }
  std::vector<int>::pointer v61 = v101.__begin_;
  if ((int)((unint64_t)((char *)v101.__end_ - (char *)v101.__begin_) >> 2) < 1) {
    goto LABEL_144;
  }
  int v62 = 0;
  uint64_t v63 = *((void *)this + 32);
  uint64_t v64 = *((void *)this + 35);
  uint64_t v65 = ((unint64_t)((char *)v101.__end_ - (char *)v101.__begin_) >> 2);
  do
  {
    if (*(double *)(v63 + 8 * *v61) == *(double *)(v64 + 8 * *v61))
    {
      *std::vector<int>::pointer v61 = -1;
      ++v62;
    }
    ++v61;
    --v65;
  }
  while (v65);
  if (!v62)
  {
LABEL_144:
    if (*off_26AECFBA8[0] < 1
      || off_26AECFBA8[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AECFBA8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1))
    {
      goto LABEL_120;
    }
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1061);
    long long v70 = (void *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Crash is set to ", 16);
    double v71 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" but there is no equality rows to remove from initial all slack basis.", 70);
    goto LABEL_101;
  }
  if (*off_26AECFBB0[0] >= 1
    && (off_26AECFBB0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFBB0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1066);
    unsigned __int8 v66 = (void *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Trying to remove ", 17);
    uint64_t v67 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" fixed variables from the initial basis.", 40);
    google::LogMessage::~LogMessage((google::LogMessage *)v100);
  }
  uint64_t v68 = operations_research::glop::VariablesInfo::GetTypeRow(v3);
  operations_research::glop::InitialBasis::InitialBasis(v100, (uint64_t)this + 16, (uint64_t)this + 216, (uint64_t)this + 256, (uint64_t)this + 280, v68);
  int v69 = *((_DWORD *)this + 2929);
  if (v69 == 2)
  {
    int v92 = *(_DWORD *)((char *)this + 5);
    if (*v25) {
      operations_research::glop::InitialBasis::CompleteTriangularDualBasis((uint64_t)v100, v92, &v101);
    }
    else {
      operations_research::glop::InitialBasis::CompleteTriangularPrimalBasis((uint64_t)v100, v92, &v101);
    }
    operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)&v101, a2);
    if (*(_DWORD *)a2)
    {
      if (*off_26AECFBC0[0] >= 1
        && (off_26AECFBC0[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFBC0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1093);
        float64x2_t v95 = (void *)google::LogMessage::stream((google::LogMessage *)v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Reverting to all slack basis.", 29);
        google::LogMessage::~LogMessage((google::LogMessage *)v99);
      }
      if (*(int *)((char *)this + 1) >= 1)
      {
        uint64_t v96 = 0;
        std::vector<int>::pointer v97 = v101.__begin_;
        do
        {
          v97[v96] = v96 + *(_DWORD *)((char *)this + 9);
          ++v96;
        }
        while (v96 < *(int *)((char *)this + 1));
      }
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*(void **)(a2 + 8));
      }
      goto LABEL_120;
    }
  }
  else
  {
    if (v69 != 1) {
      goto LABEL_120;
    }
    if (*((unsigned char *)this + 11714))
    {
      operations_research::glop::InitialBasis::CompleteBixbyBasis((uint64_t)v100, *(_DWORD *)((char *)this + 9), &v101);
      goto LABEL_120;
    }
    if (*off_26AECFBB8[0] >= 1
      && (off_26AECFBB8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFBB8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1075);
      uint64_t v93 = (void *)google::LogMessage::stream((google::LogMessage *)v99);
      unint64_t v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Bixby initial basis algorithm requires the problem ", 51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"to be scaled. Skipping Bixby's algorithm.", 41);
LABEL_118:
      uint64_t v73 = (google::LogMessage *)v99;
      goto LABEL_119;
    }
LABEL_120:
    operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)&v101, a2);
  }
  if (v101.__begin_)
  {
    v101.__end_ = v101.__begin_;
    operator delete(v101.__begin_);
  }
}

void sub_23CB8C8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CB8C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::InitializeFirstBasis(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v5 = (std::vector<int> *)(a1 + 520);
  if ((char **)(a1 + 520) != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 520), *a2, a2[1], (a2[1] - *a2) >> 2);
  }
  int v6 = *(_DWORD *)(a1 + 1);
  uint64_t v7 = *(void *)(a1 + 520);
  unint64_t v8 = (*(void *)(a1 + 528) - v7) >> 2;
  if (v6 <= v8)
  {
    if (v6 < v8) {
      *(void *)(a1 + 528) = v7 + 4 * v6;
    }
  }
  else
  {
    std::vector<int>::__append(v5, v6 - v8, &operations_research::glop::kInvalidCol);
    int v6 = *(_DWORD *)(a1 + 1);
  }
  if (v6 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 520);
    do
    {
      if (*(_DWORD *)(v10 + 4 * v9) == -1)
      {
        *(_DWORD *)(v10 + 4 * v9) = v9 + *(_DWORD *)(a1 + 9);
        int v6 = *(_DWORD *)(a1 + 1);
      }
      ++v9;
    }
    while (v9 < v6);
  }
  operations_research::glop::BasisFactorization::Initialize((std::vector<int> *)(a1 + 840), a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    if (*(void *)(a1 + 2880) != *(void *)(a1 + 2888))
    {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)(a1 + 2880), v5);
      if (*(void *)(a1 + 360) != *(void *)(a1 + 368)) {
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>((uint64_t *)(a1 + 2880), (char **)(a1 + 360));
      }
      operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation(a1 + 8720);
      operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation(a1 + 6288, (uint64_t *)(a1 + 2880));
      *(void *)(a1 + 2888) = *(void *)(a1 + 2880);
      *(void *)(a1 + 2912) = *(void *)(a1 + 2904);
    }
    double v12 = operations_research::glop::BasisFactorization::ComputeInfinityNormConditionNumberUpperBound((operations_research::glop::BasisFactorization *)(a1 + 840));
    if (v12 <= *(double *)(a1 + 11904))
    {
      if (*(int *)(a1 + 1) >= 1)
      {
        uint64_t v17 = 0;
        do
          operations_research::glop::VariablesInfo::Update((void *)(a1 + 5480), *(unsigned int *)(*(void *)(a1 + 520) + 4 * v17++), 0);
        while (v17 < *(int *)(a1 + 1));
      }
      int32x4_t v18 = (operations_research::glop::VariableValues *)(a1 + 5904);
      operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::VariableValues *)(a1 + 5904));
      if (*off_26AECFBD0[0] > 0
        && (off_26AECFBD0[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFBD0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        double v19 = *(double *)(a1 + 11688);
        if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::VariableValues *)(a1 + 5904)) > v19
          && *off_26AECFBD8[0] >= 1
          && (off_26AECFBD8[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFBD8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1152);
          int32x4_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
          unint64_t v37 = "The primal residual of the initial basis is above the tolerance, ";
          uint64_t v38 = 65;
          double v21 = operations_research::glop::VariableValues::ComputeMaximumPrimalResidual(v18);
          uint64_t v23 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v36, v21, v22);
          float64x2_t v34 = v36;
          uint64_t v35 = v23;
          v33[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" vs. ";
          v33[0].__r_.__value_.__l.__size_ = 5;
          uint64_t v25 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v32, v19, v24);
          v31[0] = v32;
          v31[1] = v25;
          absl::lts_2020_02_25::StrCat((uint64_t)&v37, (uint64_t)&v34, (uint64_t)v33, (uint64_t)v31, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          google::LogMessage::~LogMessage((google::LogMessage *)v29);
        }
      }
      operations_research::glop::Status::Status(a3);
    }
    else
    {
      unint64_t v37 = "The matrix condition number upper bound is too high: ";
      uint64_t v38 = 53;
      float64x2_t v34 = v36;
      uint64_t v35 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v36, v12, v11);
      absl::lts_2020_02_25::StrCat((uint64_t)&v37, (uint64_t)&v34, v33);
      if (*off_26AECFBC8[0] >= 1
        && (off_26AECFBC8[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFBC8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        BOOL v13 = google::LogMessage::LogMessage((google::LogMessage *)&v37, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1135);
        int32x4_t v14 = (void *)google::LogMessage::stream(v13);
        if ((v33[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v15 = v33;
        }
        else {
          unsigned int v15 = (std::string *)v33[0].__r_.__value_.__r.__words[0];
        }
        if ((v33[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(v33[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = v33[0].__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        google::LogMessage::~LogMessage((google::LogMessage *)&v37);
      }
      if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v30, v33[0].__r_.__value_.__l.__data_, v33[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v30 = v33[0];
      }
      operations_research::glop::Status::Status(a3, 1, (long long *)&v30);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_57:
        operator delete(v33[0].__r_.__value_.__l.__data_);
        return;
      }
      operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_57;
      }
    }
  }
}

void sub_23CB8CE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_23CB8CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(a24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x23CB8CEF4);
}

void sub_23CB8CEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(a24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x23CB8CEF4);
}

void sub_23CB8CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x23CB8CEF4);
}

void sub_23CB8CECC()
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 120));
  JUMPOUT(0x23CB8CED8);
}

void operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v1 = (operations_research::glop::RevisedSimplex *)((char *)this + 5904);
  if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) >= *((double *)this + 1465) * *((double *)this + 1461))
  {
    operations_research::glop::VariableValues::RecomputeBasicVariableValues(v1);
    if (*operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(void)::vlocal__[0] >= 1
      && (operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(void)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v4, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1420);
      uint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Primal infeasibility (bounds error) = ", 38);
      operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility(v1);
      uint64_t v3 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", Primal residual |A.x - b| = ", 30);
      operations_research::glop::VariableValues::ComputeMaximumPrimalResidual(v1);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v4);
    }
  }
}

void sub_23CB8D004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::RevisedSimplex::ComputeDirection(uint64_t a1, int a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 728);
  operations_research::glop::BasisFactorization::RightSolveForProblemColumn(a1 + 840, a2, a1 + 728);
  *(void *)(a1 + 808) = 0;
  uint64_t v4 = *(char **)(a1 + 760);
  int v5 = *(int **)(a1 + 768);
  if (v4 == (char *)v5)
  {
    int v12 = *(_DWORD *)(a1 + 1);
    if (v12 < 1) {
      return;
    }
    uint64_t v13 = 0;
    int32x4_t v14 = (void **)(a1 + 760);
    double v15 = 0.0;
    while (1)
    {
      double v18 = *(double *)(*v3 + 8 * v13);
      if (v18 != 0.0) {
        break;
      }
LABEL_16:
      if (++v13 >= v12) {
        return;
      }
    }
    unint64_t v19 = *(void *)(a1 + 776);
    if ((unint64_t)v4 < v19)
    {
      *(_DWORD *)uint64_t v4 = v13;
      uint64_t v16 = (uint64_t)(v4 + 4);
LABEL_13:
      *(void *)(a1 + 768) = v16;
      double v17 = fabs(v18);
      if (v15 < v17) {
        double v15 = v17;
      }
      *(double *)(a1 + 808) = v15;
      int v12 = *(_DWORD *)(a1 + 1);
      uint64_t v4 = (char *)v16;
      goto LABEL_16;
    }
    int32x4_t v20 = *v14;
    uint64_t v21 = v4 - (unsigned char *)*v14;
    uint64_t v22 = v21 >> 2;
    unint64_t v23 = (v21 >> 2) + 1;
    if (v23 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v19 - (void)v20;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v26 = operator new(4 * v25);
      int v27 = &v26[4 * v22];
      _DWORD *v27 = v13;
      uint64_t v16 = (uint64_t)(v27 + 1);
      if (v4 == v20) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v26 = 0;
      int v27 = (_DWORD *)(4 * v22);
      *(_DWORD *)(4 * v22) = v13;
      uint64_t v16 = 4 * v22 + 4;
      if (v4 == v20) {
        goto LABEL_42;
      }
    }
    unint64_t v28 = v4 - 4 - v20;
    if (v28 >= 0xBC)
    {
      if (&v26[v21 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4])
      {
        double v29 = (int *)v4;
      }
      else if (&v4[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
      {
        double v29 = (int *)v4;
      }
      else if ((unint64_t)(v4 - v26 - v21) >= 0x20)
      {
        uint64_t v30 = (v28 >> 2) + 1;
        uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        double v29 = (int *)&v4[-v31];
        int v27 = (_DWORD *)((char *)v27 - v31);
        double v32 = &v26[4 * v22 - 16];
        BOOL v33 = (int *)(v4 - 16);
        uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          _OWORD *v32 = v35;
          v32 -= 2;
          v33 -= 8;
          v34 -= 8;
        }
        while (v34);
        if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_42:
          *(void *)(a1 + 76google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v27;
          *(void *)(a1 + 768) = v16;
          *(void *)(a1 + 776) = &v26[4 * v25];
          if (v20)
          {
            operator delete(v20);
            double v15 = *(double *)(a1 + 808);
          }
          goto LABEL_13;
        }
      }
      else
      {
        double v29 = (int *)v4;
      }
    }
    else
    {
      double v29 = (int *)v4;
    }
    do
    {
      int v36 = *--v29;
      *--int v27 = v36;
    }
    while (v29 != (int *)v20);
    goto LABEL_42;
  }
  unint64_t v6 = (char *)v5 - v4;
  if ((char *)v5 - v4 >= 1)
  {
    uint64_t v7 = *v3;
    uint64_t v8 = v6 >> 2;
    if (v8 <= 1) {
      uint64_t v8 = 1;
    }
    double v9 = 0.0;
    do
    {
      uint64_t v10 = *(int *)v4;
      v4 += 4;
      double v11 = fabs(*(double *)(v7 + 8 * v10));
      if (v9 < v11) {
        double v9 = v11;
      }
      *(double *)(a1 + 808) = v9;
      --v8;
    }
    while (v8);
  }
}

void operations_research::glop::RevisedSimplex::ChooseLeavingVariableRow(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X2>, int *a4@<X3>, double *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  if (!a3)
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = xmmword_23CE7FBE0;
    strcpy(v104.__r_.__value_.__l.__data_, "refactorize must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v103, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1596, 2);
    int32x4_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v103);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v104;
    }
    else {
      uint64_t v21 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v103);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v102, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    }
    else {
      std::string v102 = v104;
    }
    operations_research::glop::Status::Status(a7, 3, (long long *)&v102);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
    double v29 = (void *)v102.__r_.__value_.__r.__words[0];
LABEL_86:
    operator delete(v29);
    goto LABEL_87;
  }
  double v9 = a4;
  if (!a4)
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = xmmword_23CE7FBE0;
    strcpy(v104.__r_.__value_.__l.__data_, "leaving_row must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v103, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1597, 2);
    unint64_t v23 = (void *)google::LogMessage::stream((google::LogMessage *)v103);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v104;
    }
    else {
      uint64_t v24 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v104.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    google::LogMessage::~LogMessage((google::LogMessage *)v103);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v101, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    }
    else {
      std::string v101 = v104;
    }
    operations_research::glop::Status::Status(a7, 3, (long long *)&v101);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
    double v29 = (void *)v101.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  uint64_t v10 = a5;
  if (!a5)
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = xmmword_23CE7FBE0;
    strcpy(v104.__r_.__value_.__l.__data_, "step_length must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v103, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1598, 2);
    uint64_t v26 = (void *)google::LogMessage::stream((google::LogMessage *)v103);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v27 = &v104;
    }
    else {
      int v27 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v104.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    google::LogMessage::~LogMessage((google::LogMessage *)v103);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v100, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    }
    else {
      std::string v100 = v104;
    }
    operations_research::glop::Status::Status(a7, 3, (long long *)&v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    {
      double v29 = (void *)v100.__r_.__value_.__r.__words[0];
      goto LABEL_86;
    }
LABEL_87:
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    return;
  }
  int v12 = a3;
  *(void *)(a1 + 15992) = *(void *)(a1 + 15984);
  uint64_t v15 = a2;
  double v16 = *(double *)(*(void *)(a1 + 5944) + 8 * a2);
  uint64_t v17 = a1 + 15936;
  if (a8 <= 0.0)
  {
    double v18 = *(double *)(*(void *)(a1 + 280) + 8 * v15) - v16;
    double v19 = operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<false>(a1, v17, v18);
    int *v9 = -1;
    if (v18 <= v19) {
      goto LABEL_6;
    }
  }
  else
  {
    double v18 = v16 - *(double *)(*(void *)(a1 + 256) + 8 * v15);
    double v19 = operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<true>(a1, v17, v18);
    int *v9 = -1;
    if (v18 <= v19)
    {
LABEL_6:
      *uint64_t v10 = v18;
      goto LABEL_126;
    }
  }
  uint64_t v30 = *(char **)(a1 + 15984);
  *(void *)(a1 + 15992) = v30;
  uint64_t v31 = *(void *)(a1 + 15944);
  if (v31 < 1)
  {
    double v36 = 0.0;
    goto LABEL_109;
  }
  uint64_t v97 = a7;
  BOOL v98 = v10;
  float64x2_t v95 = v12;
  uint64_t v96 = a6;
  uint64_t v32 = 0;
  BOOL v33 = (void **)(a1 + 15984);
  uint64_t v34 = *(void *)(a1 + 15960);
  uint64_t v35 = *(void *)(a1 + 15968);
  double v36 = 0.0;
  long long v99 = v9;
  do
  {
    double v37 = *(double *)(v35 + 8 * v32);
    if (v37 <= v19)
    {
      uint64_t v38 = *(int *)(v34 + 4 * v32);
      double v39 = fabs(*(double *)(*(void *)(a1 + 728) + 8 * v38));
      if (v39 >= v36)
      {
        if (v39 != v36) {
          goto LABEL_37;
        }
        if (v18 < 0.0)
        {
          if (v37 < v18) {
            goto LABEL_38;
          }
LABEL_49:
          if (v37 != v18)
          {
LABEL_37:
            uint64_t v30 = *(char **)(a1 + 15984);
            *(void *)(a1 + 15992) = v30;
            int *v9 = v38;
            double v36 = v39;
            double v18 = v37;
            goto LABEL_38;
          }
          unint64_t v41 = *(void *)(a1 + 16000);
          if ((unint64_t)v30 < v41)
          {
            *(_DWORD *)uint64_t v30 = v38;
            uint64_t v42 = (uint64_t)(v30 + 4);
LABEL_66:
            *(void *)(a1 + 15992) = v42;
            uint64_t v30 = (char *)v42;
            double v9 = v99;
            goto LABEL_38;
          }
          uint64_t v43 = (char *)*v33;
          uint64_t v44 = v30 - (unsigned char *)*v33;
          uint64_t v45 = v44 >> 2;
          unint64_t v46 = (v44 >> 2) + 1;
          if (v46 >> 62) {
            goto LABEL_132;
          }
          uint64_t v47 = v41 - (void)v43;
          if (v47 >> 1 > v46) {
            unint64_t v46 = v47 >> 1;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v93 = v46;
          unint64_t v94 = v33;
          if (v46)
          {
            uint64_t v92 = v30 - (unsigned char *)*v33;
            if (v46 >> 62) {
              goto LABEL_133;
            }
            uint64_t v48 = operator new(4 * v46);
            uint64_t v44 = v92;
            float64x2_t v49 = &v48[4 * v45];
            *float64x2_t v49 = v38;
            uint64_t v42 = (uint64_t)(v49 + 1);
            if (v30 != v43)
            {
LABEL_60:
              unint64_t v50 = v30 - 4 - v43;
              if (v50 < 0xBC
                || &v48[v44 - 4 - (v50 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v44 - 4]
                || &v30[-(v50 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v30 - 4
                || (unint64_t)(v30 - v48 - v44) < 0x20)
              {
                double v51 = v30;
                unint64_t v52 = v93;
              }
              else
              {
                uint64_t v54 = (v50 >> 2) + 1;
                uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
                double v51 = &v30[-v55];
                float64x2_t v49 = (_DWORD *)((char *)v49 - v55);
                double v56 = &v48[4 * v45 - 16];
                int v57 = v30 - 16;
                uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v59 = *(_OWORD *)v57;
                  *(v56 - 1) = *((_OWORD *)v57 - 1);
                  *double v56 = v59;
                  v56 -= 2;
                  v57 -= 32;
                  v58 -= 8;
                }
                while (v58);
                unint64_t v52 = v93;
                if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_63:
                  *(void *)(a1 + 15984) = v49;
                  *(void *)(a1 + 15992) = v42;
                  *(void *)(a1 + 1600google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v48[4 * v52];
                  if (v43) {
                    goto LABEL_64;
                  }
                  goto LABEL_65;
                }
              }
              do
              {
                int v53 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *--float64x2_t v49 = v53;
              }
              while (v51 != v43);
              goto LABEL_63;
            }
          }
          else
          {
            uint64_t v48 = 0;
            float64x2_t v49 = (_DWORD *)(4 * v45);
            *(_DWORD *)(4 * v45) = v38;
            uint64_t v42 = 4 * v45 + 4;
            if (v30 != v43) {
              goto LABEL_60;
            }
          }
          *(void *)(a1 + 15984) = v49;
          *(void *)(a1 + 15992) = v42;
          *(void *)(a1 + 1600google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v48[4 * v93];
          if (v43) {
LABEL_64:
          }
            operator delete(v43);
LABEL_65:
          BOOL v33 = v94;
          goto LABEL_66;
        }
        if (v37 >= 0.0 && v37 <= v18) {
          goto LABEL_49;
        }
      }
    }
LABEL_38:
    ++v32;
  }
  while (v32 != v31);
  int32x4_t v60 = *v33;
  if (*v33 == v30)
  {
    a6 = v96;
    a7 = v97;
    int v12 = v95;
    uint64_t v10 = v98;
  }
  else
  {
    unint64_t v61 = *(void *)(a1 + 16000);
    uint64_t v10 = v98;
    if ((unint64_t)v30 < v61)
    {
      *(_DWORD *)uint64_t v30 = *v9;
      int v62 = v30 + 4;
      a7 = v97;
      goto LABEL_108;
    }
    int64_t v63 = v30 - v60;
    uint64_t v64 = (v30 - v60) >> 2;
    unint64_t v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62) {
LABEL_132:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v66 = v61 - (void)v60;
    if (v66 >> 1 > v65) {
      unint64_t v65 = v66 >> 1;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    if (v67)
    {
      if (v67 >> 62) {
LABEL_133:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v68 = v33;
      int v69 = operator new(4 * v67);
    }
    else
    {
      uint64_t v68 = v33;
      int v69 = 0;
    }
    long long v70 = &v69[4 * v64];
    *long long v70 = *v9;
    if ((unint64_t)(v63 - 4) < 0x2C || (unint64_t)(v60 - v69) < 0x20)
    {
      double v71 = v30;
      double v72 = &v69[4 * v64];
      a7 = v97;
      goto LABEL_104;
    }
    unint64_t v86 = ((unint64_t)(v63 - 4) >> 2) + 1;
    uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
    double v71 = &v30[-v87];
    double v72 = (char *)&v70[v87 / 0xFFFFFFFFFFFFFFFCLL];
    char v88 = &v69[4 * v64 - 16];
    uint64_t v89 = v30 - 16;
    uint64_t v90 = v86 & 0x7FFFFFFFFFFFFFF8;
    a7 = v97;
    do
    {
      long long v91 = *(_OWORD *)v89;
      *(v88 - 1) = *((_OWORD *)v89 - 1);
      *char v88 = v91;
      v88 -= 2;
      v89 -= 32;
      v90 -= 8;
    }
    while (v90);
    if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_104:
        int v73 = *((_DWORD *)v71 - 1);
        v71 -= 4;
        *((_DWORD *)v72 - 1) = v73;
        v72 -= 4;
      }
      while (v71 != v60);
    }
    *(void *)(a1 + 15984) = v72;
    int v62 = (char *)(v70 + 1);
    *(void *)(a1 + 15992) = v70 + 1;
    *(void *)(a1 + 1600google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v69[4 * v67];
    if (v60)
    {
      operator delete(v60);
      int32x4_t v60 = *v68;
    }
    else
    {
      int32x4_t v60 = v72;
    }
LABEL_108:
    *(void *)(a1 + 15992) = v62;
    LODWORD(v104.__r_.__value_.__l.__data_) = 0;
    HIDWORD(v104.__r_.__value_.__r.__words[0]) = ((unint64_t)(v62 - v60) >> 2) - 1;
    int *v9 = *(_DWORD *)(*(void *)(a1 + 15984)
                    + 4
                    * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v104, a1 + 16008, &v104));
    int v12 = v95;
    a6 = v96;
  }
LABEL_109:
  if (v18 <= 0.0) {
    double v18 = *(double *)(a1 + 11848) * *(double *)(a1 + 11688) / v36;
  }
  *uint64_t v10 = v18;
  if (v36 >= *(double *)(a1 + 11728) * *(double *)(a1 + 808))
  {
LABEL_117:
    uint64_t v78 = *v9;
    if (v78 != -1)
    {
      BOOL v79 = *(double *)(*(void *)(a1 + 728) + 8 * v78) <= 0.0;
      uint64_t v80 = *(int *)(*(void *)(a1 + 520) + 4 * v78);
      uint64_t v81 = 256;
      if (a8 > 0.0 != v79) {
        uint64_t v81 = 280;
      }
      *a6 = *(void *)(*(void *)(a1 + v81) + 8 * v80);
    }
  }
  else
  {
    if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
    {
      if (*off_26AECFC38[0] >= 1
        && (off_26AECFC38[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFC38, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        uint64_t v74 = google::LogMessage::LogMessage((google::LogMessage *)&v104, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1733);
        unsigned int v75 = (void *)google::LogMessage::stream(v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Couldn't avoid pivoting by ", 27);
        uint64_t v76 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" direction_infinity_norm_ = ", 28);
        int v77 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" reduced cost = ", 16);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v104);
      }
      goto LABEL_117;
    }
    if (*off_26AECFC30[0] >= 1
      && (off_26AECFC30[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFC30, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      BOOL v82 = google::LogMessage::LogMessage((google::LogMessage *)&v104, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1719);
      int32x4_t v83 = (void *)google::LogMessage::stream(v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Refactorizing to avoid pivoting by ", 35);
      int32x4_t v84 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" direction_infinity_norm_ = ", 28);
      uint64_t v85 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" reduced cost = ", 16);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)&v104);
    }
    *int v12 = 1;
  }
LABEL_126:
  operations_research::glop::Status::Status(a7);
}

void sub_23CB8DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,_Unwind_Exception *exception_objecta,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  _Unwind_Resume(exception_object);
}

double operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<true>(uint64_t a1, uint64_t a2, double a3)
{
  double v6 = *(double *)(a1 + 11720);
  double v7 = *(double *)(a1 + 11688);
  double v8 = *(double *)(a1 + 11848);
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  BOOL IsRefactorized = operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840));
  uint64_t v10 = 11736;
  if (!IsRefactorized) {
    uint64_t v10 = 11704;
  }
  double v11 = *(int **)(a1 + 760);
  uint64_t v12 = *(void *)(a1 + 768) - (void)v11;
  if (v12 >= 1)
  {
    double v13 = v6 * v7;
    double v14 = v7 * v8;
    double v15 = *(double *)(a1 + v10);
    uint64_t v16 = (unint64_t)v12 >> 2;
    uint64_t v17 = *(void *)(a1 + 728);
    if (v16 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v16;
    }
    do
    {
      int v22 = *v11++;
      int v21 = v22;
      double v23 = fabs(*(double *)(v17 + 8 * v22));
      if (v23 > v15)
      {
        double v24 = *(double *)(*(void *)(a1 + 728) + 8 * v21);
        uint64_t v25 = v24 <= 0.0 ? 256 : 280;
        double v26 = (*(double *)(*(void *)(a1 + v25) + 8 * *(int *)(*(void *)(a1 + 520) + 4 * v21))
             - *(double *)(*(void *)(a1 + 5944) + 8 * *(int *)(*(void *)(a1 + 520) + 4 * v21)))
            / v24;
        if (v26 <= a3)
        {
          uint64_t v27 = *(void *)(a2 + 8);
          if (v27 == *(void *)(a2 + 16) && (!v27 || v27 < 2 * v27)) {
            operator new[]();
          }
          *(void *)(a2 + 8) = v27 + 1;
          uint64_t v19 = *(void *)(a2 + 32);
          *(_DWORD *)(*(void *)(a2 + 24) + 4 * v27) = v21;
          *(double *)(v19 + 8 * v27) = v26;
          *(unsigned char *)(a2 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
          double v20 = v14 / v23;
          if (v14 / v23 < v13 / v23 + v26) {
            double v20 = v13 / v23 + v26;
          }
          if (v20 < a3) {
            a3 = v20;
          }
        }
      }
      --v18;
    }
    while (v18);
  }
  return a3;
}

double operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<false>(uint64_t a1, uint64_t a2, double a3)
{
  double v6 = *(double *)(a1 + 11720);
  double v7 = *(double *)(a1 + 11688);
  double v8 = *(double *)(a1 + 11848);
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  BOOL IsRefactorized = operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840));
  uint64_t v10 = 11736;
  if (!IsRefactorized) {
    uint64_t v10 = 11704;
  }
  double v11 = *(int **)(a1 + 760);
  uint64_t v12 = *(void *)(a1 + 768) - (void)v11;
  if (v12 >= 1)
  {
    double v13 = v6 * v7;
    double v14 = v7 * v8;
    double v15 = *(double *)(a1 + v10);
    uint64_t v16 = (unint64_t)v12 >> 2;
    uint64_t v17 = *(void *)(a1 + 728);
    if (v16 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v16;
    }
    do
    {
      int v22 = *v11++;
      int v21 = v22;
      double v23 = fabs(*(double *)(v17 + 8 * v22));
      if (v23 > v15)
      {
        double v24 = *(double *)(*(void *)(a1 + 728) + 8 * v21);
        uint64_t v25 = v24 <= 0.0 ? 280 : 256;
        double v26 = (*(double *)(*(void *)(a1 + 5944) + 8 * *(int *)(*(void *)(a1 + 520) + 4 * v21))
             - *(double *)(*(void *)(a1 + v25) + 8 * *(int *)(*(void *)(a1 + 520) + 4 * v21)))
            / v24;
        if (v26 <= a3)
        {
          uint64_t v27 = *(void *)(a2 + 8);
          if (v27 == *(void *)(a2 + 16) && (!v27 || v27 < 2 * v27)) {
            operator new[]();
          }
          *(void *)(a2 + 8) = v27 + 1;
          uint64_t v19 = *(void *)(a2 + 32);
          *(_DWORD *)(*(void *)(a2 + 24) + 4 * v27) = v21;
          *(double *)(v19 + 8 * v27) = v26;
          *(unsigned char *)(a2 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
          double v20 = v14 / v23;
          if (v14 / v23 < v13 / v23 + v26) {
            double v20 = v13 / v23 + v26;
          }
          if (v20 < a3) {
            a3 = v20;
          }
        }
      }
      --v18;
    }
    while (v18);
  }
  return a3;
}

void operations_research::glop::RevisedSimplex::PrimalPhaseIChooseLeavingVariableRow(uint64_t a1, int a2, unsigned char *a3, _DWORD *a4, double *a5, void *a6, double a7)
{
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v132, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1805, 2);
    double v11 = (void *)google::LogMessage::stream((google::LogMessage *)&v132);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"refactorize", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" == NULL", 8);
LABEL_9:
    google::LogMessage::~LogMessage((google::LogMessage *)&v132);
    return;
  }
  if (!a4)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v132, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1806, 2);
    double v13 = (void *)google::LogMessage::stream((google::LogMessage *)&v132);
    double v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"leaving_row", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" == NULL", 8);
    goto LABEL_9;
  }
  if (!a5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v132, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1807, 2);
    double v15 = (void *)google::LogMessage::stream((google::LogMessage *)&v132);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"step_length", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    goto LABEL_9;
  }
  double v9 = *(double *)(*(void *)(a1 + 5944) + 8 * a2);
  if (a7 <= 0.0)
  {
    double v10 = *(double *)(*(void *)(a1 + 5944) + 8 * a2);
    double v9 = *(double *)(*(void *)(a1 + 280) + 8 * a2);
  }
  else
  {
    double v10 = *(double *)(*(void *)(a1 + 256) + 8 * a2);
  }
  double v17 = v9 - v10;
  uint64_t v18 = *(void *)(a1 + 760);
  uint64_t v19 = *(void *)(a1 + 768) - v18;
  if (v19 >= 1)
  {
    double v20 = 0;
    int v21 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    double v24 = *(double *)(a1 + 11688);
    uint64_t v25 = *(void *)(a1 + 728);
    uint64_t v26 = (unint64_t)v19 >> 2;
    if (v26 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v26;
    }
    double v131 = a7;
    while (1)
    {
      int v29 = *(_DWORD *)(v18 + 4 * v23);
      double v30 = *(double *)(v25 + 8 * v29);
      double v31 = fabs(v30);
      if (v31 < v24)
      {
LABEL_17:
        std::string::size_type v28 = v21;
        goto LABEL_18;
      }
      uint64_t v32 = 8 * *(int *)(*(void *)(a1 + 520) + 4 * v29);
      double v33 = *(double *)(*(void *)(a1 + 5944) + v32);
      double v34 = *(double *)(*(void *)(a1 + 256) + v32);
      double v35 = *(double *)(*(void *)(a1 + 280) + v32);
      if (a7 <= 0.0) {
        double v36 = -v30;
      }
      else {
        double v36 = *(double *)(v25 + 8 * v29);
      }
      double v37 = (v34 - v24 - v33) / v36;
      if (v37 < 0.0 || v37 >= v17) {
        goto LABEL_30;
      }
      if (v21 < (double *)v22)
      {
        *(_DWORD *)int v21 = v29;
        v21[1] = v37;
        v21[2] = v31;
        v21[3] = v34;
        v21 += 4;
LABEL_30:
        double v39 = (v24 + v35 - v33) / v36;
        if (v39 < 0.0 || v39 >= v17) {
          goto LABEL_17;
        }
        goto LABEL_35;
      }
      uint64_t v42 = ((char *)v21 - (char *)v20) >> 5;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 59) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v22 - (char *)v20) >> 4 > v43) {
        unint64_t v43 = (v22 - (char *)v20) >> 4;
      }
      if ((unint64_t)(v22 - (char *)v20) >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44)
      {
        if (v44 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v45 = (char *)operator new(32 * v44);
        a7 = v131;
        uint64_t v46 = (uint64_t)&v45[32 * v42];
        *(_DWORD *)uint64_t v46 = v29;
        *(double *)(v46 + 8) = v37;
        *(double *)(v46 + 16) = v31;
        *(double *)(v46 + 24) = v34;
        if (v21 != v20)
        {
LABEL_46:
          uint64_t v47 = v46;
          do
          {
            long long v48 = *((_OWORD *)v21 - 1);
            float64x2_t v49 = (double *)(v47 - 32);
            *(_OWORD *)(v47 - 32) = *((_OWORD *)v21 - 2);
            *(_OWORD *)(v47 - 16) = v48;
            v21 -= 4;
            v47 -= 32;
          }
          while (v21 != v20);
          int v22 = &v45[32 * v44];
          int v21 = (double *)(v46 + 32);
          if (!v20) {
            goto LABEL_50;
          }
LABEL_49:
          operator delete(v20);
          a7 = v131;
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v45 = 0;
        uint64_t v46 = 32 * v42;
        *(_DWORD *)uint64_t v46 = v29;
        *(double *)(v46 + 8) = v37;
        *(double *)(v46 + 16) = v31;
        *(double *)(v46 + 24) = v34;
        if (v21 != v20) {
          goto LABEL_46;
        }
      }
      float64x2_t v49 = (double *)v46;
      int v22 = &v45[32 * v44];
      int v21 = (double *)(v46 + 32);
      if (v20) {
        goto LABEL_49;
      }
LABEL_50:
      double v20 = v49;
      double v39 = (v24 + v35 - v33) / v36;
      if (v39 < 0.0 || v39 >= v17) {
        goto LABEL_17;
      }
LABEL_35:
      int v41 = *(_DWORD *)(v18 + 4 * v23);
      if (v21 >= (double *)v22)
      {
        uint64_t v51 = ((char *)v21 - (char *)v20) >> 5;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 59) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v22 - (char *)v20) >> 4 > v52) {
          unint64_t v52 = (v22 - (char *)v20) >> 4;
        }
        if ((unint64_t)(v22 - (char *)v20) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          if (v53 >> 59) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v54 = (char *)operator new(32 * v53);
          a7 = v131;
          uint64_t v55 = (uint64_t)&v54[32 * v51];
          *(_DWORD *)uint64_t v55 = v41;
          *(double *)(v55 + 8) = v39;
          *(double *)(v55 + 16) = v31;
          *(double *)(v55 + 24) = v35;
          if (v21 != v20)
          {
LABEL_65:
            double v56 = (void *)v55;
            do
            {
              long long v57 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v56 - 2) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v56 - 1) = v57;
              v56 -= 4;
              v21 -= 4;
            }
            while (v21 != v20);
            int v21 = v20;
            double v20 = (double *)v56;
            int v22 = &v54[32 * v53];
            std::string::size_type v28 = (double *)(v55 + 32);
            if (!v21) {
              goto LABEL_18;
            }
LABEL_74:
            operator delete(v21);
            a7 = v131;
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 32 * v51;
          *(_DWORD *)uint64_t v55 = v41;
          *(double *)(v55 + 8) = v39;
          *(double *)(v55 + 16) = v31;
          *(double *)(v55 + 24) = v35;
          if (v21 != v20) {
            goto LABEL_65;
          }
        }
        double v20 = (double *)v55;
        int v22 = &v54[32 * v53];
        std::string::size_type v28 = (double *)(v55 + 32);
        if (v21) {
          goto LABEL_74;
        }
      }
      else
      {
        *(_DWORD *)int v21 = v41;
        v21[1] = v39;
        v21[2] = v31;
        std::string::size_type v28 = v21 + 4;
        v21[3] = v35;
      }
LABEL_18:
      ++v23;
      int v21 = v28;
      if (v23 == v27) {
        goto LABEL_76;
      }
    }
  }
  std::string::size_type v28 = 0;
  double v20 = 0;
LABEL_76:
  if ((char *)v28 - (char *)v20 >= 33)
  {
    uint64_t v58 = ((char *)v28 - (char *)v20) >> 5;
    int64_t v59 = (unint64_t)(v58 - 2) >> 1;
    int64_t v60 = v59;
    do
    {
      if (v59 < v60) {
        goto LABEL_80;
      }
      uint64_t v62 = (2 * v60) | 1;
      unint64_t v61 = &v20[4 * v62];
      if (2 * v60 + 2 < v58)
      {
        double v63 = v61[1];
        double v64 = v61[5];
        if (v63 != v64)
        {
          if (v63 <= v64) {
            goto LABEL_87;
          }
          goto LABEL_86;
        }
        double v65 = v20[4 * v62 + 2];
        double v66 = v61[6];
        if (v65 != v66)
        {
          if (v65 >= v66) {
            goto LABEL_87;
          }
LABEL_86:
          v61 += 4;
          uint64_t v62 = 2 * v60 + 2;
          goto LABEL_87;
        }
        if (*(_DWORD *)v61 > *((_DWORD *)v61 + 8)) {
          goto LABEL_86;
        }
      }
LABEL_87:
      unint64_t v67 = &v20[4 * v60];
      double v68 = v61[1];
      double v69 = v67[1];
      if (v68 == v69)
      {
        double v70 = v61[2];
        double v71 = v67[2];
        if (v70 == v71)
        {
          if (*(_DWORD *)v61 > *(_DWORD *)v67) {
            goto LABEL_80;
          }
        }
        else if (v70 < v71)
        {
          goto LABEL_80;
        }
        double v73 = *v67;
        uint64_t v72 = *((void *)v67 + 3);
        long long v75 = *((_OWORD *)v61 + 1);
        *(_OWORD *)unint64_t v67 = *(_OWORD *)v61;
        for (*((_OWORD *)v67 + 1) = v75; v59 >= v62; *((_OWORD *)v77 + 1) = v76)
        {
LABEL_99:
          int v77 = v61;
          uint64_t v78 = 2 * v62;
          uint64_t v62 = (2 * v62) | 1;
          unint64_t v61 = &v20[4 * v62];
          uint64_t v79 = v78 + 2;
          if (v79 >= v58) {
            goto LABEL_104;
          }
          double v80 = v61[1];
          double v81 = v61[5];
          if (v80 == v81)
          {
            double v82 = v20[4 * v62 + 2];
            double v83 = v61[6];
            if (v82 == v83)
            {
              if (*(_DWORD *)v61 <= *((_DWORD *)v61 + 8)) {
                goto LABEL_104;
              }
LABEL_103:
              v61 += 4;
              uint64_t v62 = v79;
              goto LABEL_104;
            }
            if (v82 < v83) {
              goto LABEL_103;
            }
          }
          else if (v80 > v81)
          {
            goto LABEL_103;
          }
LABEL_104:
          double v84 = v61[1];
          if (v84 == v69)
          {
            double v85 = v61[2];
            if (v85 == v71)
            {
              if (*(_DWORD *)v61 > SLODWORD(v73)) {
                goto LABEL_78;
              }
            }
            else if (v85 < v71)
            {
LABEL_78:
              unint64_t v61 = v77;
              break;
            }
          }
          else if (v84 > v69)
          {
            goto LABEL_78;
          }
          long long v76 = *((_OWORD *)v61 + 1);
          *(_OWORD *)int v77 = *(_OWORD *)v61;
        }
      }
      else
      {
        if (v68 > v69) {
          goto LABEL_80;
        }
        double v71 = v67[2];
        uint64_t v72 = *((void *)v67 + 3);
        double v73 = *v67;
        long long v74 = *((_OWORD *)v61 + 1);
        *(_OWORD *)unint64_t v67 = *(_OWORD *)v61;
        *((_OWORD *)v67 + 1) = v74;
        if (v59 >= v62) {
          goto LABEL_99;
        }
      }
      *unint64_t v61 = v73;
      v61[1] = v69;
      v61[2] = v71;
      *((void *)v61 + 3) = v72;
LABEL_80:
      BOOL v104 = v60-- <= 0;
    }
    while (!v104);
  }
  *a4 = -1;
  if (v20 == v28) {
    goto LABEL_162;
  }
  double v86 = fabs(a7);
  double v87 = 0.0;
LABEL_122:
  double v89 = v20[2];
  if (v89 > v87)
  {
    uint64_t v90 = *((void *)v20 + 3);
    double v17 = v20[1];
    *a4 = *(void *)v20;
    *a6 = v90;
    double v87 = v89;
  }
  double v86 = v86 - v89;
  if (v86 > 0.0)
  {
    uint64_t v91 = (char *)v28 - (char *)v20;
    if ((char *)v28 - (char *)v20 < 33) {
      goto LABEL_121;
    }
    uint64_t v92 = 0;
    uint64_t v93 = v91 >> 5;
    long long v94 = *((_OWORD *)v20 + 1);
    long long v132 = *(_OWORD *)v20;
    long long v133 = v94;
    int64_t v95 = (unint64_t)((v91 >> 5) - 2) >> 1;
    uint64_t v96 = v20;
    while (1)
    {
      BOOL v98 = v96;
      uint64_t v99 = v92 + 1;
      v96 += 4 * v92 + 4;
      uint64_t v100 = 2 * v92;
      uint64_t v92 = (2 * v92) | 1;
      uint64_t v101 = v100 + 2;
      if (v101 >= v93) {
        goto LABEL_128;
      }
      double v102 = v96[1];
      double v103 = v96[5];
      BOOL v104 = v102 <= v103;
      if (v102 == v103)
      {
        double v105 = v98[4 * v99 + 2];
        double v106 = v96[6];
        if (v105 != v106)
        {
          if (v105 >= v106) {
            goto LABEL_128;
          }
          goto LABEL_127;
        }
        BOOL v104 = *(_DWORD *)v96 <= *((_DWORD *)v96 + 8);
      }
      if (v104) {
        goto LABEL_128;
      }
LABEL_127:
      v96 += 4;
      uint64_t v92 = v101;
LABEL_128:
      long long v97 = *((_OWORD *)v96 + 1);
      *(_OWORD *)BOOL v98 = *(_OWORD *)v96;
      *((_OWORD *)v98 + 1) = v97;
      if (v92 > v95)
      {
        unint64_t v107 = v28 - 4;
        if (v96 == v28 - 4)
        {
          long long v88 = v133;
          *(_OWORD *)uint64_t v96 = v132;
          *((_OWORD *)v96 + 1) = v88;
        }
        else
        {
          long long v108 = *((_OWORD *)v28 - 1);
          *(_OWORD *)uint64_t v96 = *(_OWORD *)v107;
          *((_OWORD *)v96 + 1) = v108;
          long long v109 = v133;
          *(_OWORD *)unint64_t v107 = v132;
          *((_OWORD *)v28 - 1) = v109;
          uint64_t v110 = (char *)v96 - (char *)v20 + 32;
          if (v110 >= 33)
          {
            unint64_t v111 = ((unint64_t)v110 >> 5) - 2;
            unint64_t v112 = v111 >> 1;
            uint64_t v113 = &v20[4 * (v111 >> 1)];
            double v114 = v113[1];
            double v115 = v96[1];
            if (v114 == v115)
            {
              double v116 = v113[2];
              double v117 = v96[2];
              if (v116 == v117)
              {
                if (*(_DWORD *)v113 > *(_DWORD *)v96)
                {
LABEL_148:
                  uint64_t v119 = *(void *)v96;
                  uint64_t v118 = *((void *)v96 + 3);
                  long long v121 = *((_OWORD *)v113 + 1);
                  *(_OWORD *)uint64_t v96 = *(_OWORD *)v113;
                  *((_OWORD *)v96 + 1) = v121;
                  if (v111 < 2) {
                    goto LABEL_158;
                  }
                  while (1)
                  {
LABEL_152:
                    double v123 = v113;
                    unint64_t v124 = v112 - 1;
                    unint64_t v112 = (v112 - 1) >> 1;
                    uint64_t v113 = &v20[4 * v112];
                    double v125 = v113[1];
                    if (v125 == v115)
                    {
                      double v126 = v113[2];
                      if (v126 == v117)
                      {
                        if (*(_DWORD *)v113 <= (int)v119) {
                          goto LABEL_157;
                        }
                      }
                      else if (v126 >= v117)
                      {
LABEL_157:
                        uint64_t v113 = v123;
                        goto LABEL_158;
                      }
                    }
                    else if (v125 <= v115)
                    {
                      goto LABEL_157;
                    }
                    long long v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)double v123 = *(_OWORD *)v113;
                    *((_OWORD *)v123 + 1) = v122;
                    if (v124 <= 1) {
                      goto LABEL_158;
                    }
                  }
                }
              }
              else if (v116 < v117)
              {
                goto LABEL_148;
              }
            }
            else if (v114 > v115)
            {
              double v117 = v96[2];
              uint64_t v118 = *((void *)v96 + 3);
              uint64_t v119 = *(void *)v96;
              long long v120 = *((_OWORD *)v113 + 1);
              *(_OWORD *)uint64_t v96 = *(_OWORD *)v113;
              *((_OWORD *)v96 + 1) = v120;
              if (v111 >= 2) {
                goto LABEL_152;
              }
LABEL_158:
              *(void *)uint64_t v113 = v119;
              v113[1] = v115;
              v113[2] = v117;
              *((void *)v113 + 3) = v118;
            }
          }
        }
LABEL_121:
        v28 -= 4;
        if (v20 == v28) {
          break;
        }
        goto LABEL_122;
      }
    }
  }
  if (*a4 == -1
    || v87 >= *(double *)(a1 + 11728) * *(double *)(a1 + 808)
    || operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
  {
LABEL_162:
    *a5 = v17;
    if (!v20) {
      return;
    }
  }
  else
  {
    *a3 = 1;
    if (!v20) {
      return;
    }
  }

  operator delete(v20);
}

void sub_23CB8EA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CB8EA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::DualChooseLeavingVariableRow(void *a1@<X0>, int *a2@<X1>, double *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    if (a3)
    {
      double v6 = a1;
      EdgeSquaredNorms = (void *)operations_research::glop::DualEdgeNorms::GetEdgeSquaredNorms((operations_research::glop::DualEdgeNorms *)(a1 + 786));
      int v9 = -1;
      double v10 = a2;
      *a2 = -1;
      PrimalSquaredInfeasibilities = (void *)operations_research::glop::VariableValues::GetPrimalSquaredInfeasibilities((operations_research::glop::VariableValues *)(v6 + 738));
      double v105 = (void **)(v6 + 1998);
      v6[1999] = v6[1998];
      uint64_t PrimalInfeasiblePositions = operations_research::glop::VariableValues::GetPrimalInfeasiblePositions((operations_research::glop::VariableValues *)(v6 + 738));
      double v13 = *(unint64_t **)(PrimalInfeasiblePositions + 8);
      double v14 = *(unint64_t **)(PrimalInfeasiblePositions + 16);
      uint64_t v100 = (operations_research::glop::Status *)a5;
      if (v13 == v14)
      {
        unint64_t v24 = 0;
        int v16 = 0;
        double v17 = v10;
        uint64_t v25 = *(unsigned int *)(PrimalInfeasiblePositions + 40);
        if (v25 == -1) {
          goto LABEL_47;
        }
      }
      else
      {
        unint64_t v15 = *v13;
        if (*v13)
        {
          int v16 = 0;
          double v17 = v10;
          goto LABEL_46;
        }
        uint64_t v27 = 0;
        unint64_t v28 = (char *)v14 - (char *)v13;
        unint64_t v29 = v28 >> 3;
        uint64_t v30 = (int)((uint64_t)v28 >> 3);
        if ((int)(v28 >> 3) <= 1) {
          int v31 = 1;
        }
        else {
          int v31 = v28 >> 3;
        }
        if (v30 <= 1) {
          uint64_t v30 = 1;
        }
        uint64_t v32 = v30 - 1;
        while (v32 != v27)
        {
          int v33 = v27 + 1;
          if (v13[++v27])
          {
            int v31 = v33;
            break;
          }
        }
        double v17 = a2;
        if (v31 != v29)
        {
          unint64_t v15 = v13[v31];
          int v16 = v31 << 6;
LABEL_46:
          int v9 = __clz(__rbit64(v15)) & 0x3F | v16;
          unint64_t v24 = (v15 - 1) & v15;
          uint64_t v25 = *(unsigned int *)(PrimalInfeasiblePositions + 40);
          if (v9 == v25)
          {
LABEL_47:
            double v35 = (char *)v6[1998];
            double v36 = (char *)v6[1999];
            if (v35 == v36)
            {
              int v74 = *v17;
              uint64_t v39 = (uint64_t)v100;
              if (*v17 != -1)
              {
LABEL_111:
                uint64_t v94 = *(int *)(v6[65] + 4 * v74);
                double v95 = *(double *)(v6[743] + 8 * v94);
                uint64_t v96 = (double *)(v6[32] + 8 * v94);
                double v97 = *v96;
                if (v95 >= *v96)
                {
                  uint64_t v96 = (double *)(v6[35] + 8 * v94);
                  double v97 = *v96;
                }
                *a3 = v97 - v95;
                *a4 = *(void *)v96;
              }
LABEL_114:
              operations_research::glop::Status::Status(v39);
              return;
            }
            unint64_t v37 = v6[2000];
            if ((unint64_t)v36 < v37)
            {
              *(_DWORD *)double v36 = *v17;
              uint64_t v38 = v36 + 4;
              uint64_t v39 = (uint64_t)v100;
              uint64_t v40 = v17;
              goto LABEL_110;
            }
            int64_t v75 = v36 - v35;
            uint64_t v76 = (v36 - v35) >> 2;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 62) {
LABEL_116:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            uint64_t v78 = v37 - (void)v35;
            if (v78 >> 1 > v77) {
              unint64_t v77 = v78 >> 1;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v79 = v77;
            }
            if (v79)
            {
              if (v79 >> 62) {
LABEL_117:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              double v80 = v17;
              double v81 = operator new(4 * v79);
              double v17 = v80;
              double v82 = (int *)&v81[4 * v76];
              *double v82 = *v80;
              unint64_t v83 = v75 - 4;
              if ((unint64_t)(v75 - 4) < 0x2C) {
                goto LABEL_100;
              }
            }
            else
            {
              double v81 = 0;
              double v82 = (int *)(4 * v76);
              *(_DWORD *)(4 * v76) = *v17;
              unint64_t v83 = v75 - 4;
              if ((unint64_t)(v75 - 4) < 0x2C)
              {
LABEL_100:
                double v84 = v82;
                do
                {
LABEL_106:
                  int v92 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--double v84 = v92;
                }
                while (v36 != v35);
LABEL_107:
                uint64_t v40 = v17;
                v6[1998] = v84;
                uint64_t v38 = v82 + 1;
                v6[1999] = v82 + 1;
                v6[2000] = &v81[4 * v79];
                if (v35) {
                  operator delete(v35);
                }
                uint64_t v39 = (uint64_t)v100;
LABEL_110:
                v6[1999] = v38;
                int v93 = (((unint64_t)v38 - v6[1998]) >> 2) - 1;
                LODWORD(v110.__r_.__value_.__l.__data_) = 0;
                HIDWORD(v110.__r_.__value_.__r.__words[0]) = v93;
                int v74 = *(_DWORD *)(v6[1998]
                                + 4
                                * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v110, (uint64_t)(v6 + 2001), &v110));
                *uint64_t v40 = v74;
                if (v74 != -1) {
                  goto LABEL_111;
                }
                goto LABEL_114;
              }
            }
            double v84 = v82;
            if ((unint64_t)(v35 - v81) >= 0x20)
            {
              uint64_t v85 = (v83 >> 2) + 1;
              uint64_t v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
              double v87 = &v36[-v86];
              double v84 = &v82[v86 / 0xFFFFFFFFFFFFFFFCLL];
              long long v88 = &v81[4 * v76 - 16];
              double v89 = v36 - 16;
              uint64_t v90 = v85 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v91 = *(_OWORD *)v89;
                *(v88 - 1) = *((_OWORD *)v89 - 1);
                *long long v88 = v91;
                v88 -= 2;
                v89 -= 32;
                v90 -= 8;
              }
              while (v90);
              double v36 = v87;
              if (v85 == (v85 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_107;
              }
            }
            goto LABEL_106;
          }
          goto LABEL_50;
        }
        unint64_t v24 = 0;
        int v16 = 0;
        int v9 = -1;
        uint64_t v25 = *(unsigned int *)(PrimalInfeasiblePositions + 40);
        if (v25 == -1) {
          goto LABEL_47;
        }
      }
LABEL_50:
      double v41 = 0.0;
      uint64_t v101 = PrimalInfeasiblePositions;
      double v102 = PrimalSquaredInfeasibilities;
      double v103 = EdgeSquaredNorms;
      BOOL v104 = v17;
      while (1)
      {
        uint64_t v42 = 8 * v9;
        double v43 = *(double *)(*EdgeSquaredNorms + v42);
        double v44 = *(double *)(*PrimalSquaredInfeasibilities + v42);
        if (v44 >= v41 * v43)
        {
          if (v44 == v41 * v43)
          {
            uint64_t v45 = (int *)v6[1999];
            unint64_t v46 = v6[2000];
            if ((unint64_t)v45 >= v46)
            {
              uint64_t v54 = v6;
              uint64_t v55 = v25;
              double v56 = (int *)*v105;
              uint64_t v57 = (char *)v45 - (unsigned char *)*v105;
              uint64_t v58 = v57 >> 2;
              unint64_t v59 = (v57 >> 2) + 1;
              if (v59 >> 62) {
                goto LABEL_116;
              }
              uint64_t v60 = v46 - (void)v56;
              if (v60 >> 1 > v59) {
                unint64_t v59 = v60 >> 1;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              unint64_t v106 = v59;
              if (v59)
              {
                if (v59 >> 62) {
                  goto LABEL_117;
                }
                unint64_t v61 = operator new(4 * v59);
                uint64_t v62 = (int *)&v61[4 * v58];
                *uint64_t v62 = v9;
                uint64_t v63 = (uint64_t)(v62 + 1);
                if (v45 != v56)
                {
LABEL_77:
                  unint64_t v64 = (char *)(v45 - 1) - (char *)v56;
                  if (v64 < 0x2C)
                  {
                    uint64_t v25 = v55;
                    double v6 = v54;
                    goto LABEL_85;
                  }
                  unint64_t v65 = (char *)v45 - &v61[v57];
                  uint64_t v25 = v55;
                  double v6 = v54;
                  if (v65 < 0x20) {
                    goto LABEL_120;
                  }
                  uint64_t v66 = (v64 >> 2) + 1;
                  uint64_t v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
                  double v68 = &v45[v67 / 0xFFFFFFFFFFFFFFFCLL];
                  uint64_t v62 = (int *)((char *)v62 - v67);
                  double v69 = &v61[4 * v58 - 16];
                  double v70 = v45 - 4;
                  uint64_t v71 = v66 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v72 = *(_OWORD *)v70;
                    *(v69 - 1) = *((_OWORD *)v70 - 1);
                    _OWORD *v69 = v72;
                    v69 -= 2;
                    v70 -= 8;
                    v71 -= 8;
                  }
                  while (v71);
                  uint64_t v45 = v68;
                  if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_120:
                    do
                    {
LABEL_85:
                      int v73 = *--v45;
                      *--uint64_t v62 = v73;
                    }
                    while (v45 != v56);
                  }
LABEL_86:
                  v6[1998] = v62;
                  v6[1999] = v63;
                  v6[2000] = &v61[4 * v106];
                  if (v56) {
                    operator delete(v56);
                  }
                  EdgeSquaredNorms = v103;
                  double v17 = v104;
                  uint64_t PrimalInfeasiblePositions = v101;
                  PrimalSquaredInfeasibilities = v102;
                  v6[1999] = v63;
                  goto LABEL_51;
                }
              }
              else
              {
                unint64_t v61 = 0;
                uint64_t v62 = (int *)(4 * v58);
                *(_DWORD *)(4 * v58) = v9;
                uint64_t v63 = 4 * v58 + 4;
                if (v45 != v56) {
                  goto LABEL_77;
                }
              }
              uint64_t v25 = v55;
              double v6 = v54;
              goto LABEL_86;
            }
            *uint64_t v45 = v9;
            v6[1999] = v45 + 1;
          }
          else
          {
            v6[1999] = v6[1998];
            *double v17 = v9;
            double v41 = v44 / v43;
          }
        }
LABEL_51:
        if (v24)
        {
LABEL_52:
          int v9 = (__clz(__rbit64(v24)) & 0x3F) + v16;
          v24 &= v24 - 1;
          if (v9 == v25) {
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v47 = *(void *)(PrimalInfeasiblePositions + 8);
          uint64_t v48 = *(void *)(PrimalInfeasiblePositions + 16) - v47;
          unint64_t v49 = (unint64_t)v48 >> 3;
          uint64_t v50 = (int)(v48 >> 3);
          if ((v16 >> 6) + 1 > (int)v49) {
            int v51 = (v16 >> 6) + 1;
          }
          else {
            int v51 = v49;
          }
          uint64_t v52 = ((uint64_t)v16 >> 6) + 1;
          while (v52 < v50)
          {
            if (*(void *)(v47 + 8 * v52++))
            {
              int v51 = v52 - 1;
              break;
            }
          }
          if (v51 != v49)
          {
            unint64_t v24 = *(void *)(v47 + 8 * v51);
            int v16 = v51 << 6;
            goto LABEL_52;
          }
          unint64_t v24 = 0;
          int v9 = -1;
          if (v25 == -1) {
            goto LABEL_47;
          }
        }
      }
    }
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_23CE7E400;
    strcpy(v110.__r_.__value_.__l.__data_, "cost_variation must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v109, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1911, 2);
    int v21 = (void *)google::LogMessage::stream((google::LogMessage *)v109);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v110;
    }
    else {
      int v22 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v110.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v109);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v107, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
    }
    else {
      std::string v107 = v110;
    }
    operations_research::glop::Status::Status(a5, 3, (long long *)&v107);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v26 = (void *)v107.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
  }
  else
  {
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_23CE7FBE0;
    strcpy(v110.__r_.__value_.__l.__data_, "leaving_row must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v109, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1910, 2);
    uint64_t v18 = (void *)google::LogMessage::stream((google::LogMessage *)v109);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v110;
    }
    else {
      uint64_t v19 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v110.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    google::LogMessage::~LogMessage((google::LogMessage *)v109);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v108, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
    }
    else {
      std::string v108 = v110;
    }
    operations_research::glop::Status::Status(a5, 3, (long long *)&v108);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v26 = (void *)v108.__r_.__value_.__r.__words[0];
LABEL_42:
      operator delete(v26);
    }
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
}

void sub_23CB8F24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *operations_research::glop::RevisedSimplex::DualPhaseIUpdatePrice(uint64_t a1, int a2, int a3)
{
  __n128 result = (uint64_t *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
  double v7 = *(double *)(a1 + 11704);
  uint64_t v8 = *(void *)(a1 + 360);
  uint64_t v9 = *(void *)(a1 + 728);
  double v10 = *(double *)(v8 + 8 * a2) / *(double *)(v9 + 8 * a2);
  double v11 = *(int **)(a1 + 760);
  uint64_t v12 = *(void *)(a1 + 768) - (void)v11;
  if (v12 >= 1)
  {
    uint64_t v13 = (unint64_t)v12 >> 2;
    uint64_t v14 = *(void *)(a1 + 520);
    uint64_t v15 = *result;
    if (v13 <= 1) {
      uint64_t v13 = 1;
    }
    do
    {
      while (1)
      {
        int v18 = *v11++;
        int v17 = v18;
        unint64_t v19 = v18;
        uint64_t v20 = 8 * v18;
        double v21 = *(double *)(v8 + v20) - *(double *)(v9 + v20) * v10;
        *(double *)(v8 + v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v21;
        if (v21 != 0.0) {
          break;
        }
        uint64_t v16 = 1 << v17;
LABEL_9:
        *(void *)(*(void *)(a1 + 392) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~v16;
        if (!--v13) {
          goto LABEL_21;
        }
      }
      int v22 = *(unsigned __int8 *)(v15 + *(int *)(v14 + 4 * v17));
      if ((v22 - 3) < 2 || (v21 < -v7 ? (BOOL v23 = v22 == 2) : (BOOL v23 = 0), v23))
      {
        uint64_t v16 = 1 << v17;
      }
      else
      {
        uint64_t v16 = 1 << v17;
        if (v21 <= v7 || v22 != 1) {
          goto LABEL_9;
        }
      }
      *(void *)(*(void *)(a1 + 392) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v16;
      --v13;
    }
    while (v13);
  }
LABEL_21:
  uint64_t v25 = 8 * a2;
  *(double *)(v8 + v25) = v10;
  uint64_t v26 = *(void *)(a1 + 328);
  uint64_t v27 = 8 * a3;
  *(double *)(v8 + v25) = v10 - *(double *)(v26 + v27);
  if (*(double *)(v26 + v27) != 0.0) {
    --*(_DWORD *)(a1 + 352);
  }
  *(void *)(v26 + 8 * a3) = 0;
  *(void *)(v26 + 8 * *(int *)(*(void *)(a1 + 520) + 4 * a2)) = 0;
  double v28 = *(double *)(v8 + 8 * a2);
  if (v28 == 0.0)
  {
    uint64_t v29 = 1 << a2;
LABEL_25:
    *(void *)(*(void *)(a1 + 392) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~v29;
    return result;
  }
  int v30 = *(unsigned __int8 *)(*result + a3);
  if ((v30 - 3) < 2 || (v28 < -v7 ? (BOOL v31 = v30 == 2) : (BOOL v31 = 0), v31))
  {
    uint64_t v29 = 1 << a2;
  }
  else
  {
    uint64_t v29 = 1 << a2;
    if (v28 <= v7 || v30 != 1) {
      goto LABEL_25;
    }
  }
  *(void *)(*(void *)(a1 + 392) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v29;
  return result;
}

void operations_research::glop::RevisedSimplex::DualPhaseIChooseLeavingVariableRow(uint64_t a1@<X0>, int *a2@<X1>, double *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v8 = a2;
      if (*(unsigned char *)(a1 + 9387) || *(unsigned char *)(a1 + 9389) || *(void *)(a1 + 360) == *(void *)(a1 + 368))
      {
        *(_DWORD *)(a1 + 352) = 0;
        unint64_t v10 = *(int *)(a1 + 1);
        v116.__r_.__value_.__r.__words[0] = 0;
        uint64_t v11 = v10 << 32;
        uint64_t v12 = *(char **)(a1 + 360);
        unint64_t v13 = (uint64_t)(*(void *)(a1 + 368) - (void)v12) >> 3;
        if (v10 <= v13)
        {
          if (v10 < v13) {
            *(void *)(a1 + 368) = &v12[8 * v10];
          }
        }
        else
        {
          std::vector<double>::__append(a1 + 360, v10 - v13, (uint64_t *)&v116);
          uint64_t v12 = *(char **)(a1 + 360);
        }
        bzero(v12, v11 >> 29);
        int v20 = *(_DWORD *)(a1 + 1) & ~(*(int *)(a1 + 1) >> 31);
        *(_DWORD *)(a1 + 384) = v20;
        unint64_t v21 = (v20 + 63) >> 6;
        int v22 = *(char **)(a1 + 392);
        uint64_t v23 = *(void *)(a1 + 400) - (void)v22;
        unint64_t v24 = v23 >> 3;
        v116.__r_.__value_.__r.__words[0] = 0;
        if (v21 <= v23 >> 3)
        {
          if (v21 < v23 >> 3) {
            *(void *)(a1 + 40google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v22[8 * v21];
          }
        }
        else
        {
          std::vector<unsigned long long>::__append(a1 + 392, v21 - (v23 >> 3), (uint64_t *)&v116);
          int v22 = *(char **)(a1 + 392);
        }
        if (v21 >= v24) {
          unint64_t v25 = v24;
        }
        else {
          unint64_t v25 = v21;
        }
        bzero(v22, 8 * v25);
        unint64_t v26 = *(int *)(a1 + 5);
        v116.__r_.__value_.__r.__words[0] = 0;
        uint64_t v27 = v26 << 32;
        double v28 = *(char **)(a1 + 328);
        unint64_t v29 = (uint64_t)(*(void *)(a1 + 336) - (void)v28) >> 3;
        if (v26 <= v29)
        {
          if (v26 < v29) {
            *(void *)(a1 + 336) = &v28[8 * v26];
          }
        }
        else
        {
          std::vector<double>::__append(a1 + 328, v26 - v29, (uint64_t *)&v116);
          double v28 = *(char **)(a1 + 328);
        }
        bzero(v28, v27 >> 29);
        uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
        operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(a1, IsRelevantBitRow);
        int *v8 = -1;
        if (!*(_DWORD *)(a1 + 352)) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t NonZeroPositions = (int **)operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)(a1 + 7840));
        operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(a1, NonZeroPositions);
        int *v8 = -1;
        if (!*(_DWORD *)(a1 + 352))
        {
LABEL_63:
          uint64_t v50 = a5;
          goto LABEL_118;
        }
      }
      std::string v107 = a4;
      uint64_t v108 = a5;
      EdgeSquaredNorms = (void *)operations_research::glop::DualEdgeNorms::GetEdgeSquaredNorms((operations_research::glop::DualEdgeNorms *)(a1 + 6288));
      uint64_t v32 = *(char **)(a1 + 15984);
      *(void *)(a1 + 15992) = v32;
      uint64_t v33 = *(unint64_t **)(a1 + 392);
      double v34 = *(unint64_t **)(a1 + 400);
      unint64_t v106 = a3;
      if (v33 != v34)
      {
        unint64_t v35 = *v33;
        if (*v33)
        {
          int v36 = 0;
          goto LABEL_65;
        }
        uint64_t v38 = 0;
        unint64_t v39 = (char *)v34 - (char *)v33;
        unint64_t v40 = v39 >> 3;
        uint64_t v41 = (int)((uint64_t)v39 >> 3);
        if ((int)(v39 >> 3) <= 1) {
          int v42 = 1;
        }
        else {
          int v42 = v39 >> 3;
        }
        if (v41 <= 1) {
          uint64_t v41 = 1;
        }
        uint64_t v43 = v41 - 1;
        do
        {
          if (v43 == v38) {
            goto LABEL_58;
          }
          int v44 = v38 + 1;
        }
        while (!v33[++v38]);
        int v42 = v44;
LABEL_58:
        if (v42 != v40)
        {
          unint64_t v35 = v33[v42];
          int v36 = v42 << 6;
LABEL_65:
          int v47 = __clz(__rbit64(v35)) & 0x3F | v36;
          unint64_t v46 = (v35 - 1) & v35;
          int v48 = *(_DWORD *)(a1 + 424);
          if (v47 == v48) {
            goto LABEL_114;
          }
LABEL_66:
          std::string v110 = v8;
          unint64_t v111 = (void **)(a1 + 15984);
          double v51 = 0.0;
          long long v109 = EdgeSquaredNorms;
          while (1)
          {
            uint64_t v52 = 8 * v47;
            double v53 = *(double *)(*(void *)(a1 + 360) + v52) * *(double *)(*(void *)(a1 + 360) + v52);
            double v54 = *(double *)(*EdgeSquaredNorms + v52);
            if (v53 >= v51 * v54)
            {
              if (v53 == v51 * v54)
              {
                unint64_t v55 = *(void *)(a1 + 16000);
                if ((unint64_t)v32 < v55)
                {
                  *(_DWORD *)uint64_t v32 = v47;
                  uint64_t v56 = (uint64_t)(v32 + 4);
LABEL_110:
                  *(void *)(a1 + 15992) = v56;
                  uint64_t v32 = (char *)v56;
                  goto LABEL_67;
                }
                unint64_t v64 = (char *)*v111;
                uint64_t v65 = v32 - (unsigned char *)*v111;
                uint64_t v66 = v65 >> 2;
                unint64_t v67 = (v65 >> 2) + 1;
                if (v67 >> 62) {
                  goto LABEL_143;
                }
                uint64_t v68 = v55 - (void)v64;
                if (v68 >> 1 > v67) {
                  unint64_t v67 = v68 >> 1;
                }
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
                }
                unint64_t v112 = v67;
                if (v67)
                {
                  if (v67 >> 62) {
                    goto LABEL_144;
                  }
                  double v69 = operator new(4 * v67);
                  double v70 = (int *)&v69[4 * v66];
                  *double v70 = v47;
                  uint64_t v56 = (uint64_t)(v70 + 1);
                  if (v32 == v64) {
                    goto LABEL_107;
                  }
LABEL_95:
                  unint64_t v71 = v32 - 4 - v64;
                  if (v71 < 0xBC)
                  {
                    long long v72 = v32;
                    goto LABEL_106;
                  }
                  if (&v69[v65 - 4 - (v71 & 0xFFFFFFFFFFFFFFFCLL)] > &v69[v65 - 4])
                  {
                    long long v72 = v32;
                    goto LABEL_106;
                  }
                  if (&v32[-(v71 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
                  {
                    long long v72 = v32;
                    goto LABEL_106;
                  }
                  if ((unint64_t)(v32 - v69 - v65) < 0x20)
                  {
                    long long v72 = v32;
                    goto LABEL_106;
                  }
                  uint64_t v73 = (v71 >> 2) + 1;
                  uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                  long long v72 = &v32[-v74];
                  double v70 = (int *)((char *)v70 - v74);
                  int64_t v75 = &v69[4 * v66 - 16];
                  uint64_t v76 = v32 - 16;
                  uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v78 = *(_OWORD *)v76;
                    *(v75 - 1) = *((_OWORD *)v76 - 1);
                    *int64_t v75 = v78;
                    v75 -= 2;
                    v76 -= 32;
                    v77 -= 8;
                  }
                  while (v77);
                  if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_106:
                      int v79 = *((_DWORD *)v72 - 1);
                      v72 -= 4;
                      *--double v70 = v79;
                    }
                    while (v72 != v64);
                  }
                }
                else
                {
                  double v69 = 0;
                  double v70 = (int *)(4 * v66);
                  *(_DWORD *)(4 * v66) = v47;
                  uint64_t v56 = 4 * v66 + 4;
                  if (v32 != v64) {
                    goto LABEL_95;
                  }
                }
LABEL_107:
                *(void *)(a1 + 15984) = v70;
                *(void *)(a1 + 15992) = v56;
                *(void *)(a1 + 1600google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v69[4 * v112];
                if (v64) {
                  operator delete(v64);
                }
                EdgeSquaredNorms = v109;
                uint64_t v8 = v110;
                goto LABEL_110;
              }
              uint64_t v32 = *(char **)(a1 + 15984);
              *(void *)(a1 + 15992) = v32;
              int *v8 = v47;
              double v51 = v53 / v54;
            }
LABEL_67:
            if (v46)
            {
LABEL_68:
              int v47 = (__clz(__rbit64(v46)) & 0x3F) + v36;
              v46 &= v46 - 1;
              if (v47 == v48) {
                goto LABEL_111;
              }
            }
            else
            {
              uint64_t v57 = *(void *)(a1 + 392);
              uint64_t v58 = *(void *)(a1 + 400) - v57;
              unint64_t v59 = (unint64_t)v58 >> 3;
              uint64_t v60 = (int)(v58 >> 3);
              if ((v36 >> 6) + 1 > (int)v59) {
                int v61 = (v36 >> 6) + 1;
              }
              else {
                int v61 = v59;
              }
              uint64_t v62 = ((uint64_t)v36 >> 6) + 1;
              while (v62 < v60)
              {
                if (*(void *)(v57 + 8 * v62++))
                {
                  int v61 = v62 - 1;
                  break;
                }
              }
              if (v61 != v59)
              {
                unint64_t v46 = *(void *)(v57 + 8 * v61);
                int v36 = v61 << 6;
                goto LABEL_68;
              }
              unint64_t v46 = 0;
              int v47 = -1;
              if (v48 == -1)
              {
LABEL_111:
                double v80 = *v111;
                if (*v111 != v32)
                {
                  unint64_t v81 = *(void *)(a1 + 16000);
                  if ((unint64_t)v32 < v81)
                  {
                    *(_DWORD *)uint64_t v32 = *v8;
                    double v82 = v32 + 4;
                    goto LABEL_137;
                  }
                  int64_t v89 = v32 - v80;
                  uint64_t v90 = (v32 - v80) >> 2;
                  unint64_t v91 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 62) {
LABEL_143:
                  }
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  uint64_t v92 = v81 - (void)v80;
                  if (v92 >> 1 > v91) {
                    unint64_t v91 = v92 >> 1;
                  }
                  if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v93 = v91;
                  }
                  if (v93)
                  {
                    if (v93 >> 62) {
LABEL_144:
                    }
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    uint64_t v94 = operator new(4 * v93);
                    double v95 = (int *)&v94[4 * v90];
                    *double v95 = *v8;
                    unint64_t v96 = v89 - 4;
                    if ((unint64_t)(v89 - 4) < 0x2C)
                    {
LABEL_132:
                      double v97 = v32;
                      BOOL v98 = v95;
                      goto LABEL_133;
                    }
                  }
                  else
                  {
                    uint64_t v94 = 0;
                    double v95 = (int *)(4 * v90);
                    *(_DWORD *)(4 * v9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *v8;
                    unint64_t v96 = v89 - 4;
                    if ((unint64_t)(v89 - 4) < 0x2C) {
                      goto LABEL_132;
                    }
                  }
                  if ((unint64_t)(v80 - v94) < 0x20) {
                    goto LABEL_132;
                  }
                  uint64_t v100 = (v96 >> 2) + 1;
                  uint64_t v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
                  double v97 = &v32[-v101];
                  BOOL v98 = &v95[v101 / 0xFFFFFFFFFFFFFFFCLL];
                  double v102 = &v94[4 * v90 - 16];
                  double v103 = v32 - 16;
                  uint64_t v104 = v100 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v105 = *(_OWORD *)v103;
                    *(v102 - 1) = *((_OWORD *)v103 - 1);
                    *double v102 = v105;
                    v102 -= 2;
                    v103 -= 32;
                    v104 -= 8;
                  }
                  while (v104);
                  if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_133:
                      int v99 = *((_DWORD *)v97 - 1);
                      v97 -= 4;
                      *--BOOL v98 = v99;
                    }
                    while (v97 != v80);
                  }
                  *(void *)(a1 + 15984) = v98;
                  double v82 = (char *)(v95 + 1);
                  *(void *)(a1 + 15992) = v95 + 1;
                  *(void *)(a1 + 1600google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v94[4 * v93];
                  if (v80)
                  {
                    operator delete(v80);
                    double v80 = *v111;
                  }
                  else
                  {
                    double v80 = v98;
                  }
LABEL_137:
                  *(void *)(a1 + 15992) = v82;
                  LODWORD(v116.__r_.__value_.__l.__data_) = 0;
                  HIDWORD(v116.__r_.__value_.__r.__words[0]) = ((unint64_t)(v82 - v80) >> 2) - 1;
                  int v83 = *(_DWORD *)(*(void *)(a1 + 15984)
                                  + 4
                                  * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v116, a1 + 16008, &v116));
                  int *v8 = v83;
                  double v84 = v107;
                  uint64_t v50 = v108;
                  uint64_t v85 = v106;
                  if (v83 == -1)
                  {
LABEL_118:
                    operations_research::glop::Status::Status(v50);
                    return;
                  }
LABEL_115:
                  double v86 = *(double *)(*(void *)(a1 + 360) + 8 * v83);
                  *uint64_t v85 = v86;
                  uint64_t v87 = *(int *)(*(void *)(a1 + 520) + 4 * v83);
                  uint64_t v88 = 256;
                  if (v86 < 0.0) {
                    uint64_t v88 = 280;
                  }
                  *double v84 = *(void *)(*(void *)(a1 + v88) + 8 * v87);
                  goto LABEL_118;
                }
LABEL_114:
                int v83 = *v8;
                double v84 = v107;
                uint64_t v50 = v108;
                uint64_t v85 = v106;
                if (*v8 == -1) {
                  goto LABEL_118;
                }
                goto LABEL_115;
              }
            }
          }
        }
      }
      unint64_t v46 = 0;
      int v36 = 0;
      int v47 = -1;
      int v48 = *(_DWORD *)(a1 + 424);
      if (v48 == -1) {
        goto LABEL_114;
      }
      goto LABEL_66;
    }
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v116.__r_.__value_.__r.__words[1] = xmmword_23CE7E400;
    strcpy(v116.__r_.__value_.__l.__data_, "cost_variation must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v115, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2087, 2);
    int v17 = (void *)google::LogMessage::stream((google::LogMessage *)v115);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v116;
    }
    else {
      int v18 = (std::string *)v116.__r_.__value_.__r.__words[0];
    }
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v116.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v115);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v113, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
    }
    else {
      std::string v113 = v116;
    }
    operations_research::glop::Status::Status(a5, 3, (long long *)&v113);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v37 = (void *)v113.__r_.__value_.__r.__words[0];
      goto LABEL_46;
    }
  }
  else
  {
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v116.__r_.__value_.__r.__words[1] = xmmword_23CE7FBE0;
    strcpy(v116.__r_.__value_.__l.__data_, "leaving_row must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v115, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2086, 2);
    uint64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)v115);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v116;
    }
    else {
      uint64_t v15 = (std::string *)v116.__r_.__value_.__r.__words[0];
    }
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = v116.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    google::LogMessage::~LogMessage((google::LogMessage *)v115);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v114, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
    }
    else {
      std::string v114 = v116;
    }
    operations_research::glop::Status::Status(a5, 3, (long long *)&v114);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v37 = (void *)v114.__r_.__value_.__r.__words[0];
LABEL_46:
      operator delete(v37);
    }
  }
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
}

void sub_23CB8FDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (operations_research::glop::VariablesInfo *)(a1 + 5480);
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(v4);
  ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 8720));
  double v6 = *(unint64_t **)(a2 + 8);
  double v7 = *(unint64_t **)(a2 + 16);
  unint64_t v111 = v4;
  if (v6 != v7)
  {
    unint64_t v8 = *v6;
    if (*v6)
    {
      uint64_t v9 = 0;
      goto LABEL_17;
    }
    uint64_t v10 = 0;
    unint64_t v11 = (char *)v7 - (char *)v6;
    unint64_t v12 = v11 >> 3;
    uint64_t v13 = (int)((uint64_t)v11 >> 3);
    if ((int)(v11 >> 3) <= 1) {
      int v14 = 1;
    }
    else {
      int v14 = v11 >> 3;
    }
    if (v13 <= 1) {
      uint64_t v13 = 1;
    }
    uint64_t v15 = v13 - 1;
    while (v15 != v10)
    {
      int v16 = v10 + 1;
      if (v6[++v10])
      {
        int v14 = v16;
        break;
      }
    }
    if (v14 != v12)
    {
      unint64_t v8 = v6[v14];
      uint64_t v9 = (v14 << 6);
LABEL_17:
      unint64_t v19 = __clz(__rbit64(v8)) & 0x3F | v9;
      unint64_t v18 = (v8 - 1) & v8;
      int v116 = *(_DWORD *)(a2 + 40);
      if (v19 == v116) {
        return;
      }
      goto LABEL_18;
    }
  }
  unint64_t v18 = 0;
  uint64_t v9 = 0;
  unint64_t v19 = 0xFFFFFFFFLL;
  int v116 = *(_DWORD *)(a2 + 40);
  if (v116 == -1) {
    return;
  }
LABEL_18:
  char v20 = 0;
  double v21 = *(double *)(a1 + 9544);
  int v22 = (operations_research::glop::ScatteredColumn *)(a1 + 440);
  double v115 = (void **)(a1 + 472);
  uint64_t v113 = a2;
  uint64_t v112 = CanDecreaseBitRow;
  do
  {
    while (1)
    {
      double v23 = *(double *)(*ReducedCosts + 8 * (int)v19);
      unint64_t v24 = (unint64_t)(int)v19 >> 6;
      if ((*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * v24) & (1 << v19)) != 0 && v23 < -v21)
      {
        uint64_t v29 = *(void *)(a1 + 328);
        double v30 = *(double *)(v29 + 8 * (int)v19);
        double v28 = 1.0;
        if (v30 == 1.0) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * v24) & (1 << v19);
        if (v23 <= v21 || v26 == 0) {
          double v28 = 0.0;
        }
        else {
          double v28 = -1.0;
        }
        uint64_t v29 = *(void *)(a1 + 328);
        double v30 = *(double *)(v29 + 8 * (int)v19);
        if (v28 == v30) {
          goto LABEL_78;
        }
        if (v28 == 0.0)
        {
          int v31 = -1;
LABEL_37:
          *(_DWORD *)(a1 + 352) += v31;
          goto LABEL_38;
        }
      }
      if (v30 == 0.0)
      {
        int v31 = 1;
        goto LABEL_37;
      }
LABEL_38:
      if ((v20 & 1) == 0)
      {
        unint64_t v32 = v18;
        unint64_t v33 = *(int *)(a1 + 1);
        uint64_t v121 = 0;
        uint64_t v34 = *(void *)(a1 + 440);
        unint64_t v35 = (*(void *)(a1 + 448) - v34) >> 3;
        if (v33 <= v35)
        {
          if (v33 < v35) {
            *(void *)(a1 + 448) = v34 + 8 * v33;
          }
        }
        else
        {
          std::vector<double>::__append((uint64_t)v22, v33 - v35, &v121);
        }
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v22);
        *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 472);
        uint64_t v29 = *(void *)(a1 + 328);
        unint64_t v18 = v32;
      }
      uint64_t v119 = (int)v19;
      uint64_t v120 = v9;
      double v36 = v28 - *(double *)(v29 + 8 * (int)v19);
      if (v36 != 0.0)
      {
        uint64_t v37 = *(void *)(a1 + 72);
        uint64_t v38 = *(void *)(v37 + 8 * (int)v19);
        uint64_t v39 = *(void *)(v37 + ((uint64_t)((v19 << 32) + 0x100000000) >> 29));
        if (v38 < v39)
        {
          unint64_t v114 = v18;
          while (2)
          {
            int v41 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v38);
            double v42 = v36 * *(double *)(*(void *)(a1 + 24) + 8 * v38);
            *(double *)(*(void *)(a1 + 440) + 8 * v41) = v42 + *(double *)(*(void *)(a1 + 440) + 8 * v41);
            uint64_t v43 = *(void *)(a1 + 496);
            unint64_t v44 = (unint64_t)v41 >> 6;
            uint64_t v45 = *(void *)(v43 + 8 * v44);
            if (v42 == 0.0 || (v45 & (1 << v41)) != 0) {
              goto LABEL_49;
            }
            *(void *)(v43 + 8 * v44) = v45 | (1 << v41);
            int v48 = *(char **)(a1 + 480);
            unint64_t v47 = *(void *)(a1 + 488);
            if ((unint64_t)v48 >= v47)
            {
              unint64_t v49 = (char *)*v115;
              uint64_t v50 = v48 - (unsigned char *)*v115;
              uint64_t v51 = v50 >> 2;
              unint64_t v52 = (v50 >> 2) + 1;
              if (v52 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v53 = v47 - (void)v49;
              if (v53 >> 1 > v52) {
                unint64_t v52 = v53 >> 1;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v52;
              }
              if (v54)
              {
                if (v54 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v55 = operator new(4 * v54);
                uint64_t v56 = &v55[4 * v51];
                *uint64_t v56 = v41;
                uint64_t v40 = (uint64_t)(v56 + 1);
                if (v48 == v49)
                {
LABEL_73:
                  *(void *)(a1 + 472) = v56;
                  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v40;
                  *(void *)(a1 + 488) = &v55[4 * v54];
                  if (v49) {
                    operator delete(v49);
                  }
LABEL_48:
                  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v40;
                  *(unsigned char *)(a1 + 464) = 0;
LABEL_49:
                  if (++v38 == v39)
                  {
                    uint64_t v29 = *(void *)(a1 + 328);
                    a2 = v113;
                    int v22 = (operations_research::glop::ScatteredColumn *)(a1 + 440);
                    uint64_t CanDecreaseBitRow = v112;
                    unint64_t v18 = v114;
                    goto LABEL_77;
                  }
                  continue;
                }
              }
              else
              {
                unint64_t v55 = 0;
                uint64_t v56 = (_DWORD *)(4 * v51);
                *(_DWORD *)(4 * v51) = v41;
                uint64_t v40 = 4 * v51 + 4;
                if (v48 == v49) {
                  goto LABEL_73;
                }
              }
              unint64_t v57 = v48 - 4 - v49;
              if (v57 < 0x2C) {
                goto LABEL_144;
              }
              if ((unint64_t)(v48 - &v55[v50]) < 0x20) {
                goto LABEL_144;
              }
              uint64_t v58 = (v57 >> 2) + 1;
              uint64_t v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v60 = &v48[-v59];
              uint64_t v56 = (_DWORD *)((char *)v56 - v59);
              int v61 = &v55[4 * v51 - 16];
              uint64_t v62 = v48 - 16;
              uint64_t v63 = v58 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *int v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 8;
              }
              while (v63);
              int v48 = v60;
              if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_144:
                do
                {
                  int v65 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *--uint64_t v56 = v65;
                }
                while (v48 != v49);
              }
              goto LABEL_73;
            }
            break;
          }
          *(_DWORD *)int v48 = v41;
          uint64_t v40 = (uint64_t)(v48 + 4);
          goto LABEL_48;
        }
      }
LABEL_77:
      uint64_t v9 = v120;
      *(double *)(v29 + 8 * v119) = v28;
      char v20 = 1;
LABEL_78:
      if (v18) {
        goto LABEL_20;
      }
      uint64_t v66 = *(void *)(a2 + 8);
      uint64_t v67 = *(void *)(a2 + 16) - v66;
      unint64_t v68 = (unint64_t)v67 >> 3;
      uint64_t v69 = (int)(v67 >> 3);
      int v70 = ((int)v9 >> 6) + 1 > (int)v68 ? ((int)v9 >> 6) + 1 : v68;
      uint64_t v71 = ((uint64_t)(int)v9 >> 6) + 1;
      while (v71 < v69)
      {
        if (*(void *)(v66 + 8 * v71++))
        {
          int v70 = v71 - 1;
          break;
        }
      }
      if (v70 == v68) {
        break;
      }
      unint64_t v18 = *(void *)(v66 + 8 * v70);
      uint64_t v9 = (v70 << 6);
LABEL_20:
      unint64_t v19 = (__clz(__rbit64(v18)) & 0x3F) + v9;
      v18 &= v18 - 1;
      if (v19 == v116) {
        goto LABEL_88;
      }
    }
    unint64_t v18 = 0;
    unint64_t v19 = 0xFFFFFFFFLL;
  }
  while (v116 != -1);
LABEL_88:
  if ((v20 & 1) == 0) {
    return;
  }
  uint64_t v73 = *(void *)(a1 + 472);
  uint64_t v74 = *(void *)(a1 + 480);
  if (v73 == v74
    || (double)(int)((*(void *)(a1 + 448) - *(void *)(a1 + 440)) >> 3) * 0.8 < (double)(unint64_t)((v74 - v73) >> 2))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v22);
    *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 472);
  }
  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v22);
  uint64_t TypeRow = (uint64_t *)operations_research::glop::VariablesInfo::GetTypeRow(v111);
  double v76 = *(double *)(a1 + 11704);
  operations_research::glop::BasisFactorization::RightSolve((operations_research::glop::BasisFactorization *)(a1 + 840), v22);
  uint64_t v77 = *(char **)(a1 + 472);
  long long v78 = *(char **)(a1 + 480);
  if (v77 == v78)
  {
    uint64_t v94 = *(unsigned int *)(a1 + 1);
    unint64_t v95 = (int)v94;
    unint64_t v96 = *(char **)(a1 + 440);
    if ((int)v94 <= 0)
    {
LABEL_133:
      uint64_t v121 = 0;
      uint64_t v109 = v94 << 32;
      unint64_t v110 = (uint64_t)(*(void *)(a1 + 448) - (void)v96) >> 3;
      if (v95 <= v110)
      {
        if (v95 < v110) {
          *(void *)(a1 + 448) = &v96[8 * v95];
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)v22, v95 - v110, &v121);
        unint64_t v96 = *(char **)v22;
      }
      bzero(v96, v109 >> 29);
      goto LABEL_138;
    }
    unint64_t v97 = 0;
    uint64_t v98 = *TypeRow;
    while (1)
    {
      double v103 = *(double *)&v96[8 * v97];
      if (v103 == 0.0) {
        goto LABEL_118;
      }
      uint64_t v104 = *(void *)(a1 + 360);
      double v105 = v103 + *(double *)(v104 + 8 * v97);
      *(double *)(v104 + 8 * v97) = v105;
      if (v105 == 0.0) {
        break;
      }
      int v106 = *(unsigned __int8 *)(v98 + *(int *)(*(void *)(a1 + 520) + 4 * v97));
      if ((v106 - 3) < 2 || (v105 < -v76 ? (BOOL v107 = v106 == 2) : (BOOL v107 = 0), v107))
      {
        uint64_t v99 = 1 << v97;
      }
      else
      {
        uint64_t v99 = 1 << v97;
        if (v105 <= v76 || v106 != 1) {
          goto LABEL_122;
        }
      }
      uint64_t v100 = *(void *)(a1 + 392);
      uint64_t v101 = (v97 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v102 = *(void *)(v100 + v101) | v99;
LABEL_117:
      *(void *)(v100 + v101) = v102;
LABEL_118:
      if (v94 == ++v97) {
        goto LABEL_133;
      }
    }
    uint64_t v99 = 1 << v97;
LABEL_122:
    uint64_t v100 = *(void *)(a1 + 392);
    uint64_t v101 = (v97 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v102 = *(void *)(v100 + v101) & ~v99;
    goto LABEL_117;
  }
  unint64_t v79 = v78 - v77;
  if (v78 - v77 >= 1)
  {
    double v80 = *(char **)v22;
    uint64_t v81 = v79 >> 2;
    uint64_t v82 = *(void *)(a1 + 360);
    uint64_t v83 = *(void *)(a1 + 520);
    uint64_t v84 = *TypeRow;
    if (v81 <= 1) {
      uint64_t v81 = 1;
    }
    do
    {
      while (1)
      {
        int v87 = *(_DWORD *)v77;
        v77 += 4;
        int v86 = v87;
        uint64_t v88 = 8 * v87;
        *(double *)(v82 + v88) = *(double *)&v80[v88] + *(double *)(v82 + v88);
        *(void *)&v80[v88] = 0;
        double v89 = *(double *)(v82 + v88);
        unint64_t v90 = (unint64_t)v87 >> 3;
        if (v89 != 0.0) {
          break;
        }
        uint64_t v85 = 1 << v86;
LABEL_101:
        *(void *)(*(void *)(a1 + 392) + (v90 & 0x1FFFFFFFFFFFFFF8)) &= ~v85;
        if (!--v81) {
          goto LABEL_138;
        }
      }
      int v91 = *(unsigned __int8 *)(v84 + *(int *)(v83 + 4 * v86));
      if ((v91 - 3) < 2 || (v89 < -v76 ? (BOOL v92 = v91 == 2) : (BOOL v92 = 0), v92))
      {
        uint64_t v85 = 1 << v86;
      }
      else
      {
        uint64_t v85 = 1 << v86;
        if (v89 <= v76 || v91 != 1) {
          goto LABEL_101;
        }
      }
      *(void *)(*(void *)(a1 + 392) + (v90 & 0x1FFFFFFFFFFFFFF8)) |= v85;
      --v81;
    }
    while (v81);
  }
LABEL_138:
  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 472);
}

void operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t a1, int **a2)
{
  uint64_t v4 = (operations_research::glop::VariablesInfo *)(a1 + 5480);
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(v4);
  ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 8720));
  unint64_t v8 = (unsigned int *)*a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9) {
    return;
  }
  char v10 = 0;
  double v11 = *(double *)(a1 + 9544);
  unint64_t v12 = (operations_research::glop::ScatteredColumn *)(a1 + 440);
  uint64_t v99 = ReducedCosts;
  uint64_t v100 = (void **)(a1 + 472);
  do
  {
    while (1)
    {
      unint64_t v15 = (int)*v8;
      uint64_t v16 = *v8;
      double v17 = *(double *)(*ReducedCosts + 8 * v15);
      if ((*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * (v15 >> 6)) & (1 << v15)) != 0 && v17 < -v11) {
        break;
      }
      if (v17 <= v11 || (*(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * (v15 >> 6)) & (1 << v15)) == 0) {
        double v20 = 0.0;
      }
      else {
        double v20 = -1.0;
      }
      uint64_t v13 = *(void *)(a1 + 328);
      double v14 = *(double *)(v13 + 8 * v15);
      if (v20 == v14) {
        goto LABEL_5;
      }
      uint64_t v21 = v16 << 32;
      if (v20 == 0.0)
      {
        int v22 = -1;
        goto LABEL_22;
      }
LABEL_20:
      if (v14 != 0.0) {
        goto LABEL_23;
      }
      int v22 = 1;
LABEL_22:
      *(_DWORD *)(a1 + 352) += v22;
LABEL_23:
      if ((v10 & 1) == 0)
      {
        unint64_t v23 = *(int *)(a1 + 1);
        uint64_t v102 = 0;
        uint64_t v24 = *(void *)(a1 + 440);
        unint64_t v25 = (*(void *)(a1 + 448) - v24) >> 3;
        if (v23 <= v25)
        {
          if (v23 < v25) {
            *(void *)(a1 + 448) = v24 + 8 * v23;
          }
        }
        else
        {
          std::vector<double>::__append((uint64_t)v12, v23 - v25, &v102);
        }
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v12);
        *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 472);
        uint64_t v13 = *(void *)(a1 + 328);
      }
      uint64_t v98 = CanDecreaseBitRow;
      double v26 = v20 - *(double *)(v13 + 8 * v15);
      if (v26 != 0.0)
      {
        uint64_t v27 = *(void *)(a1 + 72);
        uint64_t v28 = *(void *)(v27 + 8 * v15);
        uint64_t v29 = *(void *)(v27 + ((v21 + 0x100000000) >> 29));
        if (v28 < v29)
        {
          uint64_t v94 = v4;
          unint64_t v95 = v12;
          uint64_t v96 = *(void *)(v27 + ((v21 + 0x100000000) >> 29));
          uint64_t v97 = CanIncreaseBitRow;
          while (2)
          {
            int v31 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v28);
            double v32 = v26 * *(double *)(*(void *)(a1 + 24) + 8 * v28);
            *(double *)(*(void *)(a1 + 440) + 8 * v31) = v32 + *(double *)(*(void *)(a1 + 440) + 8 * v31);
            uint64_t v33 = *(void *)(a1 + 496);
            unint64_t v34 = (unint64_t)v31 >> 6;
            uint64_t v35 = *(void *)(v33 + 8 * v34);
            if (v32 == 0.0 || (v35 & (1 << v31)) != 0) {
              goto LABEL_34;
            }
            *(void *)(v33 + 8 * v34) = v35 | (1 << v31);
            uint64_t v38 = *(char **)(a1 + 480);
            unint64_t v37 = *(void *)(a1 + 488);
            if ((unint64_t)v38 >= v37)
            {
              uint64_t v39 = (char *)*v100;
              uint64_t v40 = v38 - (unsigned char *)*v100;
              uint64_t v41 = v40 >> 2;
              unint64_t v42 = (v40 >> 2) + 1;
              if (v42 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v43 = v37 - (void)v39;
              if (v43 >> 1 > v42) {
                unint64_t v42 = v43 >> 1;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
              }
              unint64_t v101 = v42;
              if (v42)
              {
                if (v42 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v44 = operator new(4 * v42);
                uint64_t v45 = &v44[4 * v41];
                *uint64_t v45 = v31;
                uint64_t v30 = (uint64_t)(v45 + 1);
                if (v38 != v39)
                {
LABEL_49:
                  unint64_t v46 = v38 - 4 - v39;
                  if (v46 < 0x2C) {
                    goto LABEL_120;
                  }
                  if ((unint64_t)(v38 - &v44[v40]) < 0x20) {
                    goto LABEL_120;
                  }
                  uint64_t v47 = (v46 >> 2) + 1;
                  uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                  unint64_t v49 = &v38[-v48];
                  uint64_t v45 = (_DWORD *)((char *)v45 - v48);
                  uint64_t v50 = &v44[4 * v41 - 16];
                  uint64_t v51 = v38 - 16;
                  uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v53 = *(_OWORD *)v51;
                    *(v50 - 1) = *((_OWORD *)v51 - 1);
                    *uint64_t v50 = v53;
                    v50 -= 2;
                    v51 -= 32;
                    v52 -= 8;
                  }
                  while (v52);
                  uint64_t v38 = v49;
                  if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_120:
                    do
                    {
                      int v54 = *((_DWORD *)v38 - 1);
                      v38 -= 4;
                      *--uint64_t v45 = v54;
                    }
                    while (v38 != v39);
                  }
                  *(void *)(a1 + 472) = v45;
                  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v30;
                  *(void *)(a1 + 488) = &v44[4 * v101];
                  if (v39)
                  {
LABEL_56:
                    uint64_t v55 = v30;
                    operator delete(v39);
                    uint64_t v30 = v55;
                  }
LABEL_57:
                  uint64_t v29 = v96;
                  uint64_t CanIncreaseBitRow = v97;
LABEL_33:
                  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v30;
                  *(unsigned char *)(a1 + 464) = 0;
LABEL_34:
                  if (++v28 == v29)
                  {
                    uint64_t v13 = *(void *)(a1 + 328);
                    uint64_t v4 = v94;
                    unint64_t v12 = v95;
                    goto LABEL_62;
                  }
                  continue;
                }
              }
              else
              {
                unint64_t v44 = 0;
                uint64_t v45 = (_DWORD *)(4 * v41);
                *(_DWORD *)(4 * v41) = v31;
                uint64_t v30 = 4 * v41 + 4;
                if (v38 != v39) {
                  goto LABEL_49;
                }
              }
              *(void *)(a1 + 472) = v45;
              *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v30;
              *(void *)(a1 + 488) = &v44[4 * v101];
              if (v39) {
                goto LABEL_56;
              }
              goto LABEL_57;
            }
            break;
          }
          *(_DWORD *)uint64_t v38 = v31;
          uint64_t v30 = (uint64_t)(v38 + 4);
          goto LABEL_33;
        }
      }
LABEL_62:
      *(double *)(v13 + 8 * v15) = v20;
      ++v8;
      char v10 = 1;
      uint64_t CanDecreaseBitRow = v98;
      ReducedCosts = v99;
      if (v8 == (unsigned int *)v9) {
        goto LABEL_65;
      }
    }
    uint64_t v13 = *(void *)(a1 + 328);
    double v14 = *(double *)(v13 + 8 * v15);
    if (v14 != 1.0)
    {
      uint64_t v21 = v16 << 32;
      double v20 = 1.0;
      goto LABEL_20;
    }
LABEL_5:
    ++v8;
  }
  while (v8 != (unsigned int *)v9);
  if ((v10 & 1) == 0) {
    return;
  }
LABEL_65:
  uint64_t v56 = *(void *)(a1 + 472);
  uint64_t v57 = *(void *)(a1 + 480);
  if (v56 == v57
    || (double)(int)((*(void *)(a1 + 448) - *(void *)(a1 + 440)) >> 3) * 0.8 < (double)(unint64_t)((v57 - v56) >> 2))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v12);
    *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 472);
  }
  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v12);
  uint64_t TypeRow = (uint64_t *)operations_research::glop::VariablesInfo::GetTypeRow(v4);
  double v59 = *(double *)(a1 + 11704);
  operations_research::glop::BasisFactorization::RightSolve((operations_research::glop::BasisFactorization *)(a1 + 840), v12);
  uint64_t v60 = *(char **)(a1 + 472);
  int v61 = *(char **)(a1 + 480);
  if (v60 == v61)
  {
    uint64_t v77 = *(unsigned int *)(a1 + 1);
    unint64_t v78 = (int)v77;
    unint64_t v79 = *(char **)(a1 + 440);
    if ((int)v77 <= 0)
    {
LABEL_109:
      uint64_t v102 = 0;
      uint64_t v92 = v77 << 32;
      unint64_t v93 = (uint64_t)(*(void *)(a1 + 448) - (void)v79) >> 3;
      if (v78 <= v93)
      {
        if (v78 < v93) {
          *(void *)(a1 + 448) = &v79[8 * v78];
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)v12, v78 - v93, &v102);
        unint64_t v79 = *(char **)v12;
      }
      bzero(v79, v92 >> 29);
      goto LABEL_114;
    }
    unint64_t v80 = 0;
    uint64_t v81 = *TypeRow;
    while (1)
    {
      double v86 = *(double *)&v79[8 * v80];
      if (v86 == 0.0) {
        goto LABEL_94;
      }
      uint64_t v87 = *(void *)(a1 + 360);
      double v88 = v86 + *(double *)(v87 + 8 * v80);
      *(double *)(v87 + 8 * v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v88;
      if (v88 == 0.0) {
        break;
      }
      int v89 = *(unsigned __int8 *)(v81 + *(int *)(*(void *)(a1 + 520) + 4 * v80));
      if ((v89 - 3) < 2 || (v88 < -v59 ? (BOOL v90 = v89 == 2) : (BOOL v90 = 0), v90))
      {
        uint64_t v82 = 1 << v80;
      }
      else
      {
        uint64_t v82 = 1 << v80;
        if (v88 <= v59 || v89 != 1) {
          goto LABEL_98;
        }
      }
      uint64_t v83 = *(void *)(a1 + 392);
      uint64_t v84 = (v80 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v85 = *(void *)(v83 + v84) | v82;
LABEL_93:
      *(void *)(v83 + v84) = v85;
LABEL_94:
      if (v77 == ++v80) {
        goto LABEL_109;
      }
    }
    uint64_t v82 = 1 << v80;
LABEL_98:
    uint64_t v83 = *(void *)(a1 + 392);
    uint64_t v84 = (v80 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v85 = *(void *)(v83 + v84) & ~v82;
    goto LABEL_93;
  }
  unint64_t v62 = v61 - v60;
  if (v61 - v60 >= 1)
  {
    uint64_t v63 = *(char **)v12;
    uint64_t v64 = v62 >> 2;
    uint64_t v65 = *(void *)(a1 + 360);
    uint64_t v66 = *(void *)(a1 + 520);
    uint64_t v67 = *TypeRow;
    if (v64 <= 1) {
      uint64_t v64 = 1;
    }
    do
    {
      while (1)
      {
        int v70 = *(_DWORD *)v60;
        v60 += 4;
        int v69 = v70;
        uint64_t v71 = 8 * v70;
        *(double *)(v65 + v71) = *(double *)&v63[v71] + *(double *)(v65 + v71);
        *(void *)&v63[v71] = 0;
        double v72 = *(double *)(v65 + v71);
        unint64_t v73 = (unint64_t)v70 >> 3;
        if (v72 != 0.0) {
          break;
        }
        uint64_t v68 = 1 << v69;
LABEL_77:
        *(void *)(*(void *)(a1 + 392) + (v73 & 0x1FFFFFFFFFFFFFF8)) &= ~v68;
        if (!--v64) {
          goto LABEL_114;
        }
      }
      int v74 = *(unsigned __int8 *)(v67 + *(int *)(v66 + 4 * v69));
      if ((v74 - 3) < 2 || (v72 < -v59 ? (BOOL v75 = v74 == 2) : (BOOL v75 = 0), v75))
      {
        uint64_t v68 = 1 << v69;
      }
      else
      {
        uint64_t v68 = 1 << v69;
        if (v72 <= v59 || v74 != 1) {
          goto LABEL_77;
        }
      }
      *(void *)(*(void *)(a1 + 392) + (v73 & 0x1FFFFFFFFFFFFFF8)) |= v68;
      --v64;
    }
    while (v64);
  }
LABEL_114:
  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 472);
}

void operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t *a1, std::vector<int> *a2)
{
  std::string __p = 0;
  std::vector<int>::pointer begin = a2->__begin_;
  end = a2->__end_;
  int64_t v6 = (char *)end - (char *)a2->__begin_;
  unint64_t v7 = v6 >> 2;
  if (end == a2->__begin_)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (char *)operator new((char *)end - (char *)a2->__begin_);
    uint64_t v9 = (const std::vector<int>::value_type *)&v8[4 * v7];
    std::string __p = v8;
    memcpy(v8, begin, v6);
    unint64_t v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0)
    {
LABEL_14:
      if (!v8) {
        return;
      }
      goto LABEL_15;
    }
  }
  unint64_t v11 = (int)(((char *)v9 - v8) >> 2);
  if (v11 <= v7)
  {
    if (v11 < v7) {
      a2->__end_ = &begin[v11];
    }
  }
  else
  {
    std::vector<int>::__append(a2, v11 - v7, v9 - 1);
    unint64_t v8 = __p;
  }
  if ((int)(v10 >> 2) < 1) {
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  std::vector<int>::pointer v14 = a2->__begin_;
  do
  {
    v14[*(int *)(v13 + v12)] = *(_DWORD *)&v8[v12];
    v12 += 4;
  }
  while ((v10 & 0x3FFFFFFFCLL) != v12);
LABEL_15:

  operator delete(v8);
}

void sub_23CB90D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::UpdateAndPivot(uint64_t a1@<X0>, int a2@<W1>, signed int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9 = *(int *)(*(void *)(a1 + 520) + 4 * a3);
  uint64_t v10 = a3;
  double v11 = *(double *)(*(void *)(a1 + 256) + 8 * v9);
  if (v11 == a5) {
    int v12 = 2;
  }
  else {
    int v12 = 3;
  }
  if (v11 == *(double *)(*(void *)(a1 + 280) + 8 * v9)) {
    int v13 = 1;
  }
  else {
    int v13 = v12;
  }
  double v14 = *(double *)(*(void *)(a1 + 5944) + 8 * v9);
  if (v14 != a5)
  {
    operations_research::RatioDistribution::Add(a1 + 10976, v14 - a5);
    LODWORD(v9) = *(_DWORD *)(*(void *)(a1 + 520) + 4 * v10);
  }
  operations_research::glop::VariablesInfo::Update((void *)(a1 + 5480), v9, v13);
  *(_DWORD *)(*(void *)(a1 + 520) + 4 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a2;
  operations_research::glop::VariablesInfo::Update((void *)(a1 + 5480), a2, 0);
  operations_research::glop::UpdateRow::Invalidate(a1 + 7840);
  double v15 = *(double *)(*(void *)(a1 + 728) + 8 * v10);
  v16.n128_f64[0] = (fabs(v15) + 1.0) * *(double *)(a1 + 11664);
  if (vabdd_f64(*(double *)(*(void *)(a1 + 8064) + 8 * a2), v15) <= v16.n128_f64[0])
  {
    operations_research::glop::BasisFactorization::Update(a1 + 840, a2, a3, a4, v16);
    if (*(_DWORD *)a4) {
      return;
    }
LABEL_17:
    if (*(char *)(a4 + 31) < 0)
    {
      operator delete(*(void **)(a4 + 8));
      if (!operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
      {
LABEL_25:
        operations_research::glop::Status::Status(a4);
        return;
      }
    }
    else if (!operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
    {
      goto LABEL_25;
    }
    if (*(void *)(a1 + 2880) != *(void *)(a1 + 2888))
    {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)(a1 + 2880), (std::vector<int> *)(a1 + 520));
      if (*(void *)(a1 + 360) != *(void *)(a1 + 368)) {
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>((uint64_t *)(a1 + 2880), (char **)(a1 + 360));
      }
      operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation(a1 + 8720);
      operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation(a1 + 6288, (uint64_t *)(a1 + 2880));
      *(void *)(a1 + 2888) = *(void *)(a1 + 2880);
      *(void *)(a1 + 2912) = *(void *)(a1 + 2904);
    }
    goto LABEL_25;
  }
  if (*operations_research::glop::RevisedSimplex::UpdateAndPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double)::vlocal__ >= 1
    && (operations_research::glop::RevisedSimplex::UpdateAndPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::RevisedSimplex::UpdateAndPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2294);
    double v17 = (void *)google::LogMessage::stream((google::LogMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Refactorizing: imprecise pivot ", 31);
    unint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" diff = ", 8);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
  operations_research::glop::BasisFactorization::ForceRefactorization((std::vector<int> *)(a1 + 840), a4);
  if (!*(_DWORD *)a4) {
    goto LABEL_17;
  }
}

void sub_23CB91028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::RevisedSimplex::RefactorizeBasisIfNeeded@<X0>(operations_research::glop::RevisedSimplex *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6 = *a2;
  unint64_t v7 = (std::vector<int> *)((char *)this + 840);
  if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840))) {
    goto LABEL_2;
  }
  if (operations_research::glop::ReducedCosts::NeedsBasisRefactorization((operations_research::glop::RevisedSimplex *)((char *)this + 8720))) {
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 11644))
  {
    char v9 = operations_research::glop::DualEdgeNorms::NeedsBasisRefactorization((operations_research::glop::RevisedSimplex *)((char *)this + 6288));
    if (v6) {
      goto LABEL_6;
    }
LABEL_21:
    if ((v9 & 1) == 0) {
      goto LABEL_2;
    }
    goto LABEL_6;
  }
  uint64_t v10 = 11652;
  if (!*((unsigned char *)this + 15932)) {
    uint64_t v10 = 11656;
  }
  if (*(_DWORD *)((char *)this + v10) != 1)
  {
    if (!v6) {
      goto LABEL_2;
    }
    goto LABEL_6;
  }
  char v9 = operations_research::glop::PrimalEdgeNorms::NeedsBasisRefactorization((operations_research::glop::RevisedSimplex *)((char *)this + 6944));
  if (!v6) {
    goto LABEL_21;
  }
LABEL_6:
  uint64_t result = operations_research::glop::BasisFactorization::Refactorize(v7, a3);
  if (*(_DWORD *)a3) {
    return result;
  }
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*(void **)(a3 + 8));
  }
  operations_research::glop::UpdateRow::Invalidate((uint64_t)this + 7840);
  if (*((void *)this + 360) != *((void *)this + 361))
  {
    operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)this + 360, (std::vector<int> *)((char *)this + 520));
    if (*((void *)this + 45) != *((void *)this + 46)) {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>((uint64_t *)this + 360, (char **)this + 45);
    }
    operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation((uint64_t)this + 8720);
    operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation((uint64_t)this + 6288, (uint64_t *)this + 360);
    *((void *)this + 361) = *((void *)this + 360);
    *((void *)this + 364) = *((void *)this + 363);
  }
LABEL_2:
  *a2 = 0;

  return operations_research::glop::Status::Status(a3);
}

void operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(double *a1, int **a2, char a3)
{
  std::string __p = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 1090));
  char v51 = a3;
  double v6 = a1[1193];
  uint64_t v50 = a1;
  uint64_t v52 = a1 + 685;
  uint64_t StatusRow = operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 685));
  unint64_t v8 = (unsigned int *)*a2;
  char v9 = a2[1];
  if (*a2 != v9)
  {
    uint64_t v10 = (void *)StatusRow;
    do
    {
      uint64_t v12 = (int)*v8;
      double v13 = *(double *)(*ReducedCosts + 8 * v12);
      uint64_t v14 = *v8;
      int v15 = *(unsigned __int8 *)(*v10 + v12);
      if (v13 > v6 && v15 == 3)
      {
        operations_research::glop::VariablesInfo::Update(v52, v14, 2);
        unint64_t v18 = v55;
        if (v55 >= v56)
        {
          unint64_t v19 = (char *)__p;
          int64_t v27 = v55 - (unsigned char *)__p;
          uint64_t v28 = (v55 - (unsigned char *)__p) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
LABEL_59:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v30 = v56 - (unsigned char *)__p;
          if ((v56 - (unsigned char *)__p) >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v29;
          }
          if (v24)
          {
            if (v24 >> 62) {
LABEL_60:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            unint64_t v25 = operator new(4 * v24);
            double v26 = &v25[4 * v28];
            *double v26 = v12;
            uint64_t v11 = (uint64_t)(v26 + 1);
            if (v18 == v19) {
              goto LABEL_52;
            }
          }
          else
          {
            unint64_t v25 = 0;
            double v26 = (_DWORD *)(4 * v28);
            *(_DWORD *)(4 * v28) = v12;
            uint64_t v11 = 4 * v28 + 4;
            if (v18 == v19) {
              goto LABEL_52;
            }
          }
          unint64_t v31 = v18 - 4 - v19;
          if (v31 < 0x2C) {
            goto LABEL_63;
          }
          if ((unint64_t)(v18 - &v25[v27]) < 0x20) {
            goto LABEL_63;
          }
          uint64_t v32 = (v31 >> 2) + 1;
          uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v34 = &v18[-v33];
          double v26 = (_DWORD *)((char *)v26 - v33);
          uint64_t v35 = &v25[4 * v28 - 16];
          double v36 = v18 - 16;
          uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *uint64_t v35 = v38;
            v35 -= 2;
            v36 -= 32;
            v37 -= 8;
          }
          while (v37);
          unint64_t v18 = v34;
          if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_63:
            do
            {
              int v39 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *--double v26 = v39;
            }
            while (v18 != v19);
          }
          goto LABEL_52;
        }
      }
      else
      {
        if (v13 >= -v6 || v15 != 2) {
          goto LABEL_5;
        }
        operations_research::glop::VariablesInfo::Update(v52, v14, 3);
        unint64_t v18 = v55;
        if (v55 >= v56)
        {
          unint64_t v19 = (char *)__p;
          int64_t v20 = v55 - (unsigned char *)__p;
          uint64_t v21 = (v55 - (unsigned char *)__p) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            goto LABEL_59;
          }
          uint64_t v23 = v56 - (unsigned char *)__p;
          if ((v56 - (unsigned char *)__p) >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 >> 62) {
              goto LABEL_60;
            }
            unint64_t v25 = operator new(4 * v24);
            double v26 = &v25[4 * v21];
            *double v26 = v12;
            uint64_t v11 = (uint64_t)(v26 + 1);
            if (v18 == v19) {
              goto LABEL_52;
            }
LABEL_46:
            unint64_t v40 = v18 - 4 - v19;
            if (v40 < 0x2C) {
              goto LABEL_64;
            }
            if ((unint64_t)(v18 - &v25[v20]) < 0x20) {
              goto LABEL_64;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v43 = &v18[-v42];
            double v26 = (_DWORD *)((char *)v26 - v42);
            unint64_t v44 = &v25[4 * v21 - 16];
            uint64_t v45 = v18 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *unint64_t v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            unint64_t v18 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_64:
              do
              {
                int v48 = *((_DWORD *)v18 - 1);
                v18 -= 4;
                *--double v26 = v48;
              }
              while (v18 != v19);
            }
          }
          else
          {
            unint64_t v25 = 0;
            double v26 = (_DWORD *)(4 * v21);
            *(_DWORD *)(4 * v21) = v12;
            uint64_t v11 = 4 * v21 + 4;
            if (v18 != v19) {
              goto LABEL_46;
            }
          }
LABEL_52:
          std::string __p = v26;
          uint64_t v56 = &v25[4 * v24];
          if (v19) {
            operator delete(v19);
          }
          goto LABEL_4;
        }
      }
      *(_DWORD *)unint64_t v18 = v12;
      uint64_t v11 = (uint64_t)(v18 + 4);
LABEL_4:
      uint64_t v55 = (char *)v11;
LABEL_5:
      ++v8;
    }
    while (v8 != (unsigned int *)v9);
  }
  unint64_t v49 = (char *)__p;
  if (__p != v55)
  {
    operations_research::glop::VariableValues::UpdateGivenNonBasicVariables((uint64_t)(v50 + 738), (int **)&__p, v51);
    unint64_t v49 = (char *)__p;
  }
  if (v49)
  {
    uint64_t v55 = v49;
    operator delete(v49);
  }
}

void sub_23CB91548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  operations_research::StatsGroup::StatString(this + 1290, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 1362, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v6 = &__p;
  }
  else {
    double v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 1244, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v8 = &__p;
  }
  else {
    unint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 1133, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 756, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &__p;
  }
  else {
    uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 908, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &__p;
  }
  else {
    uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 786, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __n128 v16 = &__p;
  }
  else {
    __n128 v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 1050, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v18 = &__p;
  }
  else {
    unint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::glop::BasisFactorization::StatString(this + 105, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v20 = &__p;
  }
  else {
    int64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::StatsGroup::StatString(this + 1442, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23CB91864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_23CB91954()
{
  if (*(char *)(v0 + 23) < 0) {
    JUMPOUT(0x23CB91944);
  }
  JUMPOUT(0x23CB9192CLL);
}

void operations_research::glop::BasisFactorization::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  operations_research::StatsGroup::StatString(this + 1, &v8);
  operations_research::glop::LuFactorization::StatString(this + 114, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  double v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
}

void sub_23CB91A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::SimpleVariableInfo(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v20[14] = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double v6 = (operations_research::glop::VariablesInfo *)(a1 + 685);
  char v7 = *(unsigned char *)(*(void *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::VariablesInfo *)(a1 + 685))
                + (int)a2);
  char v8 = *(unsigned char *)(*(void *)operations_research::glop::VariablesInfo::GetStatusRow(v6) + (int)a2);
  uint64_t v9 = a1[68];
  operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, *(double *)(a1[743] + 8 * (int)a2), (char *)v18);
  operations_research::glop::GetVariableStatusString(v8, (uint64_t)v16);
  operations_research::glop::GetVariableTypeString(v7, (uint64_t)v14);
  operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, *(double *)(a1[32] + 8 * (int)a2), (char *)v12);
  operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, *(double *)(a1[35] + 8 * (int)a2), (char *)__p);
  v20[0] = a2;
  v20[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v20[2] = v9 + 24 * (int)a2;
  v20[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[4] = v18;
  v20[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[6] = v16;
  v20[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[8] = v14;
  v20[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[10] = v12;
  v20[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[12] = __p;
  v20[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::AppendPack((uint64_t)a3, "%d (%s) = %s, %s, %s, [%s,%s]", 29, (uint64_t)v20, 7);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v12[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v14[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v19 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v18[0]);
    return;
  }
LABEL_10:
  operator delete(v16[0]);
  if (v19 < 0) {
    goto LABEL_11;
  }
}

void sub_23CB91C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v38 + 23) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a33);
  if ((*(char *)(v38 + 23) & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v38);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::DisplayInfoOnVariables(operations_research::glop::RevisedSimplex *this)
{
  if (*off_26AECFCE8[0] >= 3
    && (off_26AECFCE8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFCE8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
  {
    if (*(int *)((char *)this + 5) >= 1 && *off_26AECFCF0[0] >= 3)
    {
      uint64_t v2 = 0;
      for (uint64_t i = 0; i < *(int *)((char *)this + 5); ++i)
      {
        if (*off_26AECFCF0[0] < 3) {
          goto LABEL_8;
        }
        double v4 = *(double *)(*((void *)this + 743) + 8 * i);
        double v5 = *(double *)(*((void *)this + 27) + 8 * i);
        if (off_26AECFCF0[0] == &google::kLogSiteUninitialized
          && !google::InitVLOG3__((google *)off_26AECFCF0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3))
        {
          goto LABEL_8;
        }
        google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3006);
        double v6 = (void *)google::LogMessage::stream((google::LogMessage *)v36);
        operations_research::glop::RevisedSimplex::SimpleVariableInfo(this, i, v34);
        if ((v35 & 0x80u) == 0) {
          char v7 = v34;
        }
        else {
          char v7 = (void **)v34[0];
        }
        if ((v35 & 0x80u) == 0) {
          uint64_t v8 = v35;
        }
        else {
          uint64_t v8 = (uint64_t)v34[1];
        }
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)". ", 2);
        uint64_t v11 = *((void *)this + 68) + v2;
        int v12 = *(char *)(v11 + 23);
        if (v12 >= 0) {
          uint64_t v13 = *((void *)this + 68) + v2;
        }
        else {
          uint64_t v13 = *(void *)v11;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v11 + 8);
        }
        char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
        __n128 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" = ", 3);
        operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, v4, (char *)v32);
        if ((v33 & 0x80u) == 0) {
          char v17 = v32;
        }
        else {
          char v17 = (void **)v32[0];
        }
        if ((v33 & 0x80u) == 0) {
          uint64_t v18 = v33;
        }
        else {
          uint64_t v18 = (uint64_t)v32[1];
        }
        char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        int64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" * ", 3);
        operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, v5, (char *)v30);
        if ((v31 & 0x80u) == 0) {
          std::string::size_type v21 = v30;
        }
        else {
          std::string::size_type v21 = (void **)v30[0];
        }
        if ((v31 & 0x80u) == 0) {
          uint64_t v22 = v31;
        }
        else {
          uint64_t v22 = (uint64_t)v30[1];
        }
        std::string::size_type v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(obj) = ", 8);
        operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, v4 * v5, (char *)__p);
        if ((v29 & 0x80u) == 0) {
          unint64_t v25 = __p;
        }
        else {
          unint64_t v25 = (void **)__p[0];
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v26 = v29;
        }
        else {
          uint64_t v26 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
        if ((char)v29 < 0)
        {
          operator delete(__p[0]);
          if (((char)v31 & 0x80000000) == 0)
          {
LABEL_44:
            if (((char)v33 & 0x80000000) == 0) {
              goto LABEL_45;
            }
            goto LABEL_49;
          }
        }
        else if (((char)v31 & 0x80000000) == 0)
        {
          goto LABEL_44;
        }
        operator delete(v30[0]);
        if (((char)v33 & 0x80000000) == 0)
        {
LABEL_45:
          if ((char)v35 < 0) {
            goto LABEL_50;
          }
          goto LABEL_7;
        }
LABEL_49:
        operator delete(v32[0]);
        if ((char)v35 < 0) {
LABEL_50:
        }
          operator delete(v34[0]);
LABEL_7:
        google::LogMessage::~LogMessage((google::LogMessage *)v36);
LABEL_8:
        v2 += 24;
      }
    }
    if (*off_26AECFCF8[0] > 2
      && (off_26AECFCF8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFCF8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3011);
      int64_t v27 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"------", 6);
      google::LogMessage::~LogMessage((google::LogMessage *)v34);
    }
  }
}

void sub_23CB920C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CB920DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_6:
    google::LogMessage::~LogMessage((google::LogMessage *)&a33);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_23CB921C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    JUMPOUT(0x23CB92108);
  }
  JUMPOUT(0x23CB92100);
}

operations_research::glop::RevisedSimplex::IterationStats *operations_research::glop::RevisedSimplex::IterationStats::IterationStats(operations_research::glop::RevisedSimplex::IterationStats *this)
{
  strcpy((char *)this, "IterationStats");
  *((unsigned char *)this + 23) = 14;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  char v4 = 5;
  strcpy(__p, "total");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 80), (long long *)__p, this);
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C4938;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  if (v4 < 0) {
    operator delete(*(void **)__p);
  }
  char v4 = 6;
  strcpy(__p, "normal");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 184), (long long *)__p, this);
  *((void *)this + 23) = &unk_26F0C4938;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = 0;
  if (v4 < 0) {
    operator delete(*(void **)__p);
  }
  char v4 = 10;
  strcpy(__p, "bound_flip");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 288), (long long *)__p, this);
  *((void *)this + 36) = &unk_26F0C4938;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  if (v4 < 0) {
    operator delete(*(void **)__p);
  }
  char v4 = 10;
  strcpy(__p, "degenerate");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 392), (long long *)__p, this);
  *((void *)this + 49) = &unk_26F0C4938;
  *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 59) = 0;
  if (v4 < 0) {
    operator delete(*(void **)__p);
  }
  char v4 = 19;
  strcpy(__p, "degenerate_run_size");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 496), (long long *)__p, this) = &unk_26F0C4A58;
  if (v4 < 0) {
    operator delete(*(void **)__p);
  }
  return this;
}

void sub_23CB92464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 392) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 423) < 0) {
    operator delete(*(void **)(v14 + 400));
  }
  *(void *)(v14 + 288) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 319) < 0) {
    operator delete(*(void **)(v14 + 296));
  }
  *(void *)(v14 + 184) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 215) < 0) {
    operator delete(*(void **)(v14 + 192));
  }
  *(void *)(v14 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0) {
    operator delete(*(void **)(v14 + 88));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

operations_research::glop::RevisedSimplex::RatioTestStats *operations_research::glop::RevisedSimplex::RatioTestStats::RatioTestStats(operations_research::glop::RevisedSimplex::RatioTestStats *this)
{
  strcpy((char *)this, "RatioTestStats");
  *((unsigned char *)this + 23) = 14;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  uint64_t v2 = (void *)((char *)this + 80);
  BYTE7(v4[1]) = 11;
  strcpy((char *)v4, "bound_shift");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 80), v4, this);
  *uint64_t v2 = &unk_26F0C49F8;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 14;
  strcpy((char *)v4, "abs_used_pivot");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 160), v4, this);
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 16;
  strcpy((char *)v4, "abs_tested_pivot");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 240), v4, this);
  *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 17;
  strcpy((char *)v4, "abs_skipped_pivot");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 320), v4, this);
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 17;
  strcpy((char *)v4, "direction_density");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 400), v4, this);
  *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C4998;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 15;
  strcpy((char *)v4, "leaving_choices");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 480), v4, this);
  *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C4A58;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 16;
  strcpy((char *)v4, "num_perfect_ties");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 560), v4, this) = &unk_26F0C4A58;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  return this;
}

void sub_23CB928BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 511) < 0) {
    operator delete(*(void **)(v14 + 488));
  }
  *(void *)(v14 + 40google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 431) < 0) {
    operator delete(*(void **)(v14 + 408));
  }
  *(void *)(v14 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 351) < 0) {
    operator delete(*(void **)(v14 + 328));
  }
  *(void *)(v14 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 271) < 0) {
    operator delete(*(void **)(v14 + 248));
  }
  *(void *)(v14 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*(void **)(v14 + 168));
  }
  *(void *)(v14 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0) {
    operator delete(*(void **)(v14 + 88));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

void sub_23CB92A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x23CB929F8);
  }
  JUMPOUT(0x23CB929FCLL);
}

void sub_23CB92A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x23CB92A24);
  }
  JUMPOUT(0x23CB92A28);
}

void operations_research::glop::RevisedSimplex::RatioTestStats::~RatioTestStats(operations_research::glop::RevisedSimplex::RatioTestStats *this)
{
  *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 591) < 0)
  {
    operator delete(*((void **)this + 71));
    *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 511) & 0x80000000) == 0)
    {
LABEL_3:
      *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
      if ((*((char *)this + 431) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 511) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*((void **)this + 61));
  *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 431) & 0x80000000) == 0)
  {
LABEL_4:
    *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 351) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*((void **)this + 51));
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 351) & 0x80000000) == 0)
  {
LABEL_5:
    *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 271) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*((void **)this + 41));
  *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 271) & 0x80000000) == 0)
  {
LABEL_6:
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 191) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*((void **)this + 31));
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 191) & 0x80000000) == 0)
  {
LABEL_7:
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 111) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*((void **)this + 21));
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_8:
    uint64_t v2 = this;
    goto LABEL_10;
  }
LABEL_17:
  operator delete(*((void **)this + 11));
  uint64_t v2 = this;

LABEL_10:
  operations_research::StatsGroup::~StatsGroup(v2);
}

void operations_research::glop::RevisedSimplex::IterationStats::~IterationStats(operations_research::glop::RevisedSimplex::IterationStats *this)
{
  *((void *)this + 62) = &unk_26F0BCDD8;
  if (*((char *)this + 527) < 0)
  {
    operator delete(*((void **)this + 63));
    *((void *)this + 49) = &unk_26F0BCDD8;
    if ((*((char *)this + 423) & 0x80000000) == 0)
    {
LABEL_3:
      *((void *)this + 36) = &unk_26F0BCDD8;
      if ((*((char *)this + 319) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    *((void *)this + 49) = &unk_26F0BCDD8;
    if ((*((char *)this + 423) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*((void **)this + 50));
  *((void *)this + 36) = &unk_26F0BCDD8;
  if ((*((char *)this + 319) & 0x80000000) == 0)
  {
LABEL_4:
    *((void *)this + 23) = &unk_26F0BCDD8;
    if ((*((char *)this + 215) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*((void **)this + 37));
  *((void *)this + 23) = &unk_26F0BCDD8;
  if ((*((char *)this + 215) & 0x80000000) == 0)
  {
LABEL_5:
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 111) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*((void **)this + 24));
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v2 = this;
    goto LABEL_8;
  }
LABEL_13:
  operator delete(*((void **)this + 11));
  uint64_t v2 = this;

LABEL_8:
  operations_research::StatsGroup::~StatsGroup(v2);
}

void operations_research::glop::ReducedCosts::~ReducedCosts(operations_research::glop::ReducedCosts *this)
{
  uint64_t v2 = (void *)*((void *)this + 105);
  if (v2)
  {
    *((void *)this + 106) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 100);
  if (v3) {
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 97);
  if (v4)
  {
    *((void *)this + 98) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 93);
  if (v5)
  {
    *((void *)this + 94) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 90);
  if (v6)
  {
    *((void *)this + 91) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 87);
  if (v7)
  {
    *((void *)this + 88) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 84);
  if (v8)
  {
    *((void *)this + 85) = v8;
    operator delete(v8);
  }
  *((void *)this + 73) = &unk_26F0BCDD8;
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
    *((void *)this + 63) = &unk_26F0BCDD8;
    if ((*((char *)this + 535) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(*((void **)this + 64));
    *((void *)this + 53) = &unk_26F0BCDD8;
    if ((*((char *)this + 455) & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_21:
    operator delete(*((void **)this + 54));
    goto LABEL_18;
  }
  operator delete(*((void **)this + 74));
  *((void *)this + 63) = &unk_26F0BCDD8;
  if (*((char *)this + 535) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  *((void *)this + 53) = &unk_26F0BCDD8;
  if (*((char *)this + 455) < 0) {
    goto LABEL_21;
  }
LABEL_18:
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::ReducedCosts *)((char *)this + 344));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::ReducedCosts *)((char *)this + 48));
}

void operations_research::glop::UpdateRow::~UpdateRow(operations_research::glop::UpdateRow *this)
{
  *((void *)this + 10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 831) < 0)
  {
    operator delete(*((void **)this + 101));
    uint64_t v2 = (operations_research::glop::UpdateRow *)((char *)this + 560);
    *((void *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 751) & 0x80000000) == 0)
    {
LABEL_3:
      *((void *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
      if ((*((char *)this + 671) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v2 = (operations_research::glop::UpdateRow *)((char *)this + 560);
    *((void *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 751) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*((void **)this + 91));
  *((void *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 671) & 0x80000000) == 0)
  {
LABEL_4:
    operations_research::StatsGroup::~StatsGroup(v2);
    operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::UpdateRow *)((char *)this + 264));
    uint64_t v3 = (void *)*((void *)this + 28);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_21:
  operator delete(*((void **)this + 81));
  operations_research::StatsGroup::~StatsGroup(v2);
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::UpdateRow *)((char *)this + 264));
  uint64_t v3 = (void *)*((void *)this + 28);
  if (v3)
  {
LABEL_5:
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
LABEL_6:
  char v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 12);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 5);
  if (v9)
  {
    *((void *)this + 6) = v9;
    operator delete(v9);
  }
}

void operations_research::glop::PrimalEdgeNorms::~PrimalEdgeNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  uint64_t v2 = (void *)*((void *)this + 108);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 105);
  if (v3)
  {
    *((void *)this + 106) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 101);
  if (v4)
  {
    *((void *)this + 102) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 97);
  if (v5)
  {
    *((void *)this + 98) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 94);
  if (v6)
  {
    *((void *)this + 95) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 91);
  if (v7)
  {
    *((void *)this + 92) = v7;
    operator delete(v7);
  }
  *((void *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 671) < 0)
  {
    operator delete(*((void **)this + 81));
    *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 591) & 0x80000000) == 0)
    {
LABEL_15:
      *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
      if ((*((char *)this + 511) & 0x80000000) == 0) {
        goto LABEL_16;
      }
LABEL_20:
      operator delete(*((void **)this + 61));
      *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
      if ((*((char *)this + 431) & 0x80000000) == 0) {
        goto LABEL_17;
      }
LABEL_21:
      operator delete(*((void **)this + 51));
      goto LABEL_17;
    }
  }
  else
  {
    *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 591) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  operator delete(*((void **)this + 71));
  *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 511) < 0) {
    goto LABEL_20;
  }
LABEL_16:
  *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 431) < 0) {
    goto LABEL_21;
  }
LABEL_17:
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::PrimalEdgeNorms *)((char *)this + 320));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::PrimalEdgeNorms *)((char *)this + 24));
}

void operations_research::glop::VariableValues::~VariableValues(operations_research::glop::VariableValues *this)
{
  uint64_t v2 = (void *)*((void *)this + 45);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 42);
  if (v3)
  {
    *((void *)this + 43) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 35);
  if (v5) {
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 28);
  if (v7)
  {
    *((void *)this + 29) = v7;
    operator delete(v7);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::VariableValues *)((char *)this + 144));
  uint64_t v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    *((void *)this + 13) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 8);
  if (v9)
  {
    *((void *)this + 9) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 5);
  if (v10)
  {
    *((void *)this + 6) = v10;
    operator delete(v10);
  }
}

void operations_research::glop::VariablesInfo::~VariablesInfo(operations_research::glop::VariablesInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 45);
  if (v2)
  {
    *((void *)this + 46) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 38);
  if (v3)
  {
    *((void *)this + 39) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 31);
  if (v4)
  {
    *((void *)this + 32) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 24);
  if (v5)
  {
    *((void *)this + 25) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 18) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

void std::vector<operations_research::glop::SparseColumn const*>::__append(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v8 = (void *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 + 1;
      uint64_t v8 = (void *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      float64x2_t v18 = vld1q_dup_f64(a3);
      char v19 = (float64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *char v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
          *v8++ = *(void *)a3;
        while (v8 != (void *)(v7 + 8 * a2));
      }
      uint64_t v8 = (void *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + a2;
    if (v11 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - *a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= v11) {
      uint64_t v13 = (v9 >> 3) + a2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v15 = (char *)operator new(8 * v14);
    }
    else
    {
      char v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v10];
    uint64_t v22 = (char *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_47;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      unint64_t v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3) {
        goto LABEL_47;
      }
    }
    unint64_t v25 = v23 + 1;
    unint64_t v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    float64x2_t v26 = vld1q_dup_f64(a3);
    int64_t v27 = (float64x2_t *)&v15[8 * v10 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      float64x2_t *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        *(double *)unint64_t v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    unsigned __int8 v29 = (void *)*a1;
    if (v7 != *a1)
    {
      unint64_t v30 = v7 - *a1 - 8;
      if (v30 < 0x58) {
        goto LABEL_48;
      }
      if (v7 - (unint64_t)&v15[v9] < 0x20) {
        goto LABEL_48;
      }
      uint64_t v31 = (v30 >> 3) + 1;
      uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v8 = (void *)(v7 - v32);
      v21 -= v32;
      unsigned __int8 v33 = &v15[8 * v10 - 16];
      unint64_t v34 = (long long *)(v7 - 16);
      uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)unsigned __int8 v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          uint64_t v37 = *--v8;
          *(void *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      uint64_t v8 = (void *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<operations_research::glop::VariableStatus>::__assign_with_size[abi:ne180100]<operations_research::glop::VariableStatus*,operations_research::glop::VariableStatus*>(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t result = operator new(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  uint64_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  char v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

void operations_research::glop::LuFactorization::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  operations_research::StatsGroup::StatString(this + 168, &v8);
  operations_research::StatsGroup::StatString(this + 235, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
}

void sub_23CB93998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0BCFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BCFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  double result = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::BasisFactorization *)(v1 + 840))
         + (double)*(uint64_t *)(v1 + 8096) * 0.000000002
         + (double)*(uint64_t *)(v1 + 7832) * 0.000000002;
  *(double *)(v2 + 112) = *(double *)(v2 + 112) + result - *(double *)(v1 + 10312);
  *(double *)(v1 + 10312) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n, std::vector<std::string>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  std::vector<std::string>::pointer end = this->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) < __n)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    unint64_t v16 = (std::string *)&v12[24 * v8];
    unint64_t v30 = (std::string *)&v12[24 * v11];
    int v17 = SHIBYTE(__x->__r_.__value_.__r.__words[2]);
    if (v17 < 0)
    {
      std::vector<std::string>::size_type v24 = 24 * __n - 24;
      unint64_t v25 = v16;
      if ((v17 & 0x80) != 0) {
        goto LABEL_27;
      }
LABEL_26:
      long long v26 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
      v25->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
      while (v24)
      {
        ++v25;
        v24 -= 24;
        if ((*((unsigned char *)&__x->__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_26;
        }
LABEL_27:
        std::string::__init_copy_ctor_external(v25, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      std::vector<std::string>::pointer begin = this->__begin_;
      std::vector<std::string>::pointer end = this->__end_;
      unint64_t v21 = v16;
      uint64_t v22 = &v16[__n];
      if (end == this->__begin_) {
        goto LABEL_34;
      }
    }
    else
    {
      std::vector<std::string>::size_type v18 = 24 * __n;
      char v19 = v16;
      do
      {
        long long v20 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        v19->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        ++v19;
        v18 -= 24;
      }
      while (v18);
      unint64_t v21 = v16;
      uint64_t v22 = &v16[__n];
      std::vector<std::string>::pointer begin = this->__begin_;
      if (end == this->__begin_)
      {
LABEL_34:
        std::vector<std::string>::pointer v28 = end;
LABEL_35:
        this->__begin_ = v21;
        this->__end_ = v22;
        this->__end_cap_.__value_ = v30;
        if (end != v28)
        {
          std::vector<std::string>::pointer v29 = end - 1;
          do
          {
            if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29->__r_.__value_.__l.__data_);
            }
            --v29;
          }
          while (&v29[1] != v28);
          std::vector<std::string>::pointer end = v28;
        }
        if (end) {
          operator delete(end);
        }
        return;
      }
    }
    do
    {
      long long v27 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v21[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21[-1].__r_.__value_.__l.__data_ = v27;
      --v21;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --end;
    }
    while (end != begin);
    std::vector<std::string>::pointer v28 = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    goto LABEL_35;
  }
  if (__n)
  {
    uint64_t v13 = &end[__n];
    std::vector<std::string>::size_type v14 = 24 * __n;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v15 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
      }
      ++end;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::string>::pointer end = v13;
  }
  this->__end_ = end;
}

void sub_23CB93DF8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_23CB93E10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::anonymous namespace'::ColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(int *a1, int *a2, uint64_t **a3, uint64_t a4, char a5, double result)
{
int *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::anonymous namespace'::ColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,0>(int *result, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  int v6 = *a2;
  int v7 = *result;
  double v8 = *(double *)(a6 + 8 * *a2);
  double v9 = *(double *)(a6 + 8 * *result);
  int v10 = *a3;
  double v11 = *(double *)(a6 + 8 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      uint64_t v14 = *a4;
      if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v10)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    *a2 = v10;
    *a3 = v6;
    uint64_t v12 = *a2;
    uint64_t v13 = *result;
    if (*(double *)(a6 + 8 * v12) >= *(double *)(a6 + 8 * v13))
    {
      uint64_t v15 = v6;
      int v10 = v6;
      uint64_t v14 = *a4;
      if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v15)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    *double result = v12;
    *a2 = v13;
    int v10 = *a3;
  }
  else
  {
    if (v11 < v8)
    {
      *double result = v10;
      goto LABEL_9;
    }
    *double result = v6;
    *a2 = v7;
    int v10 = *a3;
    if (*(double *)(a6 + 8 * *a3) < v9)
    {
      *a2 = v10;
LABEL_9:
      *a3 = v7;
      int v10 = v7;
      uint64_t v14 = *a4;
      if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v7)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
  }
  uint64_t v14 = *a4;
  if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v10)) {
    goto LABEL_19;
  }
LABEL_16:
  *a3 = v14;
  *a4 = v10;
  uint64_t v16 = *a3;
  uint64_t v17 = *a2;
  if (*(double *)(a6 + 8 * v16) < *(double *)(a6 + 8 * v17))
  {
    *a2 = v16;
    *a3 = v17;
    uint64_t v18 = *a2;
    uint64_t v19 = *result;
    if (*(double *)(a6 + 8 * v18) < *(double *)(a6 + 8 * v19))
    {
      *double result = v18;
      *a2 = v19;
    }
  }
LABEL_19:
  uint64_t v20 = *a5;
  uint64_t v21 = *a4;
  if (*(double *)(a6 + 8 * v20) < *(double *)(a6 + 8 * v21))
  {
    *a4 = v20;
    *a5 = v21;
    uint64_t v22 = *a4;
    uint64_t v23 = *a3;
    if (*(double *)(a6 + 8 * v22) < *(double *)(a6 + 8 * v23))
    {
      *a3 = v22;
      *a4 = v23;
      uint64_t v24 = *a3;
      uint64_t v25 = *a2;
      if (*(double *)(a6 + 8 * v24) < *(double *)(a6 + 8 * v25))
      {
        *a2 = v24;
        *a3 = v25;
        uint64_t v26 = *a2;
        uint64_t v27 = *result;
        if (*(double *)(a6 + 8 * v26) < *(double *)(a6 + 8 * v27))
        {
          *double result = v26;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::anonymous namespace'::ColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, uint64_t *a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v14 = *(a2 - 1);
      uint64_t v15 = *a1;
      if (*(double *)(*a3 + 8 * v14) < *(double *)(*a3 + 8 * v15))
      {
        *a1 = v14;
        *(a2 - 1) = v15;
      }
      return 1;
    case 3:
      uint64_t v16 = *a3;
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      double v19 = *(double *)(*a3 + 8 * v18);
      double v20 = *(double *)(*a3 + 8 * v17);
      uint64_t v21 = *(a2 - 1);
      double v22 = *(double *)(*a3 + 8 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v18;
          uint64_t v45 = *a1;
          uint64_t v44 = a1[1];
          if (*(double *)(v16 + 8 * v44) < *(double *)(v16 + 8 * v45))
          {
            *a1 = v44;
            a1[1] = v45;
            return 1;
          }
        }
      }
      else
      {
        if (v22 < v19)
        {
          *a1 = v21;
          *(a2 - 1) = v17;
          return 1;
        }
        *a1 = v18;
        a1[1] = v17;
        uint64_t v46 = *(a2 - 1);
        if (*(double *)(v16 + 8 * v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v17;
          return 1;
        }
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      int v24 = a1[1];
      uint64_t v25 = a1 + 2;
      int v26 = a1[2];
      uint64_t v27 = *a3;
      int v28 = *a1;
      double v29 = *(double *)(*a3 + 8 * v24);
      double v30 = *(double *)(*a3 + 8 * *a1);
      uint64_t v31 = v26;
      double v32 = *(double *)(*a3 + 8 * v26);
      if (v29 >= v30)
      {
        if (v32 >= v29)
        {
          int v24 = a1[2];
        }
        else
        {
          uint64_t v33 = v24;
          *uint64_t v23 = v26;
          *uint64_t v25 = v24;
          uint64_t v34 = a1;
          uint64_t v35 = a1 + 1;
          uint64_t v31 = v24;
          if (v32 < v30) {
            goto LABEL_40;
          }
        }
        uint64_t v47 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v47) >= *(double *)(v27 + 8 * v31)) {
          return 1;
        }
      }
      else
      {
        uint64_t v33 = v28;
        if (v32 < v29)
        {
          uint64_t v34 = a1;
          uint64_t v35 = a1 + 2;
          int v24 = *a1;
          goto LABEL_40;
        }
        *a1 = v24;
        a1[1] = v28;
        uint64_t v34 = a1 + 1;
        uint64_t v35 = a1 + 2;
        int v24 = v28;
        if (v32 < v30)
        {
LABEL_40:
          *uint64_t v34 = v26;
          *uint64_t v35 = v28;
          uint64_t v47 = *(a2 - 1);
          if (*(double *)(v27 + 8 * v47) >= *(double *)(v27 + 8 * v33)) {
            return 1;
          }
          goto LABEL_44;
        }
        int v24 = v26;
        uint64_t v47 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v47) >= *(double *)(v27 + 8 * v31)) {
          return 1;
        }
      }
LABEL_44:
      *uint64_t v25 = v47;
      *(a2 - 1) = v24;
      uint64_t v48 = *v25;
      uint64_t v49 = *v23;
      double v50 = *(double *)(v27 + 8 * v48);
      if (v50 < *(double *)(v27 + 8 * v49))
      {
        a1[1] = v48;
        a1[2] = v49;
        uint64_t v51 = *a1;
        if (v50 < *(double *)(v27 + 8 * v51))
        {
          *a1 = v48;
          a1[1] = v51;
          return 1;
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      double v5 = a1 + 2;
      uint64_t v4 = a1[2];
      uint64_t v6 = a1[1];
      uint64_t v7 = *a3;
      double v8 = *(double *)(*a3 + 8 * v6);
      uint64_t v9 = *a1;
      double v10 = *(double *)(*a3 + 8 * v9);
      double v11 = *(double *)(*a3 + 8 * v4);
      if (v8 < v10)
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          uint64_t v12 = a1 + 1;
          uint64_t v13 = a1 + 2;
          if (v11 >= v10) {
            goto LABEL_20;
          }
        }
LABEL_19:
        *uint64_t v12 = v4;
        *uint64_t v13 = v9;
        goto LABEL_20;
      }
      if (v11 < v8)
      {
        a1[1] = v4;
        *double v5 = v6;
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 1;
        if (v11 < v10) {
          goto LABEL_19;
        }
      }
LABEL_20:
      long long v36 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v37 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v39 = *v36;
        uint64_t v40 = *v5;
        double v41 = *(double *)(v7 + 8 * v39);
        if (v41 < *(double *)(v7 + 8 * v40)) {
          break;
        }
LABEL_29:
        double v5 = v36++;
        if (v36 == a2) {
          return 1;
        }
      }
      uint64_t v42 = i;
      do
      {
        *(int *)((char *)a1 + v42) = v40;
        uint64_t v43 = v42 - 4;
        if (v42 == 4)
        {
          *a1 = v39;
          if (++v37 != 8) {
            goto LABEL_29;
          }
          return v36 + 1 == a2;
        }
        uint64_t v40 = *(int *)((char *)a1 + v42 - 8);
        v42 -= 4;
      }
      while (v41 < *(double *)(v7 + 8 * v40));
      *(int *)((char *)a1 + v43) = v39;
      if (++v37 != 8) {
        goto LABEL_29;
      }
      return v36 + 1 == a2;
  }
}

void std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0BD088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BD088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  double result = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::BasisFactorization *)(v1 + 840))
         + (double)*(uint64_t *)(v1 + 8096) * 0.000000002
         + (double)*(uint64_t *)(v1 + 7832) * 0.000000002;
  *(double *)(v2 + 112) = *(double *)(v2 + 112) + result - *(double *)(v1 + 10312);
  *(double *)(v1 + 10312) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0BD108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BD108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  double result = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::BasisFactorization *)(v1 + 840))
         + (double)*(uint64_t *)(v1 + 8096) * 0.000000002
         + (double)*(uint64_t *)(v1 + 7832) * 0.000000002;
  *(double *)(v2 + 112) = *(double *)(v2 + 112) + result - *(double *)(v1 + 10312);
  *(double *)(v1 + 10312) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target_type()
{
}

void OUTLINED_FUNCTION_0_0()
{
  JUMPOUT(0x23ECF2BA0);
}

uint64_t operations_research::glop::Status::Status(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t operations_research::glop::Status::Status(uint64_t result, int a2, long long *a3)
{
  *(_DWORD *)double result = a2;
  if (a2)
  {
    long long v3 = *a3;
    *(void *)(result + 24) = *((void *)a3 + 2);
    *(_OWORD *)(result + 8) = v3;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
  }
  else
  {
    *(unsigned char *)(result + 31) = 0;
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

char *operations_research::glop::GetErrorCodeString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "GLOP_OK");
      break;
    case 1:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "ERROR_LU");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "ERROR_BOUND");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "ERROR_NULL");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "INVALID_PROBLEM");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v4, (google::glog_internal_namespace_ *)"./ortools/glop/status.cc", 44, 2);
      long long v3 = (void *)google::LogMessage::stream((google::LogMessage *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid Status::ErrorCode ", 26);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v4);
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_23CE7EC90;
      strcpy(result, "UNKNOWN Status::ErrorCode");
      break;
  }
  return result;
}

void sub_23CB953E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::UpdateRow::UpdateRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a1 + 168;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 208) = -1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(unsigned char *)(a1 + 248) = 1;
  *(_DWORD *)(a1 + 249) = 0;
  *(void *)(a1 + 256) = 0;
  operations_research::glop::GlopParameters::GlopParameters(a1 + 264, 0);
  operations_research::glop::UpdateRow::Stats::Stats((operations_research::glop::UpdateRow::Stats *)(a1 + 560));
  return a1;
}

void sub_23CB954C8(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  operations_research::glop::GlopParameters::~GlopParameters(v6);
  double v8 = *v5;
  if (*v5)
  {
    v1[29] = v8;
    operator delete(v8);
    uint64_t v9 = *v4;
    if (!*v4)
    {
LABEL_3:
      double v10 = (void *)v1[18];
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[23] = v9;
  operator delete(v9);
  double v10 = (void *)v1[18];
  if (!v10)
  {
LABEL_4:
    double v11 = (void *)v1[15];
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[19] = v10;
  operator delete(v10);
  double v11 = (void *)v1[15];
  if (!v11)
  {
LABEL_5:
    operations_research::glop::ScatteredColumn::~ScatteredColumn(v2);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v1[16] = v11;
  operator delete(v11);
  operations_research::glop::ScatteredColumn::~ScatteredColumn(v2);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::UpdateRow::Invalidate(uint64_t this)
{
  *(unsigned char *)(this + 248) = 1;
  return this;
}

uint64_t operations_research::glop::UpdateRow::IgnoreUpdatePosition(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 224);
  if (a2 < (int)((unint64_t)(*(void *)(result + 232) - v2) >> 3)) {
    *(void *)(v2 + 8 * a2) = 0;
  }
  return result;
}

uint64_t operations_research::glop::UpdateRow::GetUnitRowLeftInverse(operations_research::glop::UpdateRow *this)
{
  return (uint64_t)this + 40;
}

uint64_t operations_research::glop::UpdateRow::ComputeAndGetUnitRowLeftInverse(uint64_t a1, unsigned int a2)
{
  *(unsigned char *)(a1 + 248) = 1;
  uint64_t v2 = a1 + 40;
  operations_research::glop::BasisFactorization::TemporaryLeftSolveForUnitRow(*(void *)(a1 + 32), a2, a1 + 40);
  return v2;
}

void operations_research::glop::UpdateRow::ComputeUpdateRow(int **a1, unsigned int a2)
{
  if (*((unsigned char *)a1 + 248) || *(_DWORD *)((char *)a1 + 249) != a2)
  {
    *((unsigned char *)a1 + 248) = 0;
    *(_DWORD *)((char *)a1 + 249) = a2;
    long long v3 = (uint64_t *)(a1 + 5);
    operations_research::glop::BasisFactorization::LeftSolveForUnitRow((uint64_t)a1[4], a2, (uint64_t)(a1 + 5));
    if (!*((unsigned char *)a1 + 363))
    {
      operations_research::glop::UpdateRow::ComputeUpdatesColumnWise((operations_research::glop::UpdateRow *)a1);
      uint64_t v38 = operations_research::glop::VariablesInfo::GetNumEntriesInRelevantColumns((operations_research::glop::VariablesInfo *)a1[2])
          + (*a1)[1];
      goto LABEL_81;
    }
    uint64_t v4 = a1[15];
    double v5 = *((double *)a1 + 65);
    a1[16] = v4;
    uint64_t v70 = (void **)(a1 + 15);
    uint64_t v7 = a1[9];
    uint64_t v6 = a1[10];
    if (v7 != v6)
    {
      uint64_t v8 = (char *)v6 - (char *)v7;
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = *v3;
        uint64_t v12 = (unint64_t)v8 >> 2;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        uint64_t v67 = *v3;
        uint64_t v68 = a1[9];
        uint64_t v66 = v13;
        while (1)
        {
          uint64_t v18 = v7[v10];
          if (fabs(*(double *)(v11 + 8 * v18)) <= v5) {
            goto LABEL_12;
          }
          double v19 = a1[17];
          if (v4 >= v19) {
            break;
          }
          int *v4 = v18;
          uint64_t v14 = (uint64_t)(v4 + 1);
LABEL_11:
          uint64_t v15 = v7[v10];
          uint64_t v16 = *((void *)a1[1] + 7);
          uint64_t v17 = *(void *)(v16 + (((v15 << 32) + 0x100000000) >> 29));
          a1[16] = (int *)v14;
          uint64_t v9 = v17 + v9 - *(void *)(v16 + 8 * v15);
          uint64_t v4 = (int *)v14;
LABEL_12:
          if (++v10 == v13) {
            goto LABEL_76;
          }
        }
        uint64_t v20 = v9;
        uint64_t v21 = (int *)*v70;
        uint64_t v22 = (char *)v4 - (unsigned char *)*v70;
        uint64_t v23 = v22 >> 2;
        unint64_t v24 = (v22 >> 2) + 1;
        if (v24 >> 62) {
          goto LABEL_84;
        }
        uint64_t v25 = (char *)v19 - (char *)v21;
        if (v25 >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 >> 62) {
            goto LABEL_85;
          }
          uint64_t v27 = operator new(4 * v26);
          int v28 = (int *)&v27[4 * v23];
          *int v28 = v18;
          uint64_t v14 = (uint64_t)(v28 + 1);
          if (v4 != v21)
          {
LABEL_24:
            unint64_t v29 = (char *)(v4 - 1) - (char *)v21;
            if (v29 >= 0xBC
              && &v27[v22 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] <= &v27[v22 - 4]
              && (int *)((char *)v4 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v4 - 1
              && (unint64_t)((char *)v4 - v27 - v22) >= 0x20)
            {
              uint64_t v32 = (v29 >> 2) + 1;
              uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
              double v30 = &v4[v33 / 0xFFFFFFFFFFFFFFFCLL];
              int v28 = (int *)((char *)v28 - v33);
              uint64_t v34 = &v27[4 * v23 - 16];
              uint64_t v35 = v4 - 4;
              uint64_t v36 = v32 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                *uint64_t v34 = v37;
                v34 -= 2;
                v35 -= 8;
                v36 -= 8;
              }
              while (v36);
              uint64_t v9 = v20;
              if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_30:
                a1[15] = v28;
                a1[16] = (int *)v14;
                a1[17] = (int *)&v27[4 * v26];
                if (!v21)
                {
LABEL_32:
                  uint64_t v11 = v67;
                  uint64_t v7 = v68;
                  uint64_t v13 = v66;
                  goto LABEL_11;
                }
LABEL_31:
                operator delete(v21);
                goto LABEL_32;
              }
            }
            else
            {
              double v30 = v4;
              uint64_t v9 = v20;
            }
            do
            {
              int v31 = *--v30;
              *--int v28 = v31;
            }
            while (v30 != v21);
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v27 = 0;
          int v28 = (int *)(4 * v23);
          *(_DWORD *)(4 * v23) = v18;
          uint64_t v14 = 4 * v23 + 4;
          if (v4 != v21) {
            goto LABEL_24;
          }
        }
        uint64_t v9 = v20;
        a1[15] = v28;
        a1[16] = (int *)v14;
        a1[17] = (int *)&v27[4 * v26];
        if (!v21) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
LABEL_75:
      uint64_t v9 = 0;
LABEL_76:
      uint64_t NumEntriesInRelevantColumns = operations_research::glop::VariablesInfo::GetNumEntriesInRelevantColumns((operations_research::glop::VariablesInfo *)a1[2]);
      if ((double)NumEntriesInRelevantColumns * 0.5 <= (double)v9)
      {
        uint64_t v65 = NumEntriesInRelevantColumns;
        operations_research::glop::UpdateRow::ComputeUpdatesColumnWise((operations_research::glop::UpdateRow *)a1);
        uint64_t v38 = v65 + (*a1)[1];
      }
      else
      {
        if ((double)(*a1)[1] * 1.1 > (double)v9)
        {
          operations_research::glop::UpdateRow::ComputeUpdatesRowWiseHypersparse((operations_research::glop::UpdateRow *)a1);
          uint64_t v64 = a1 + 32;
          uint64_t v38 = (uint64_t)a1[32];
LABEL_82:
          *uint64_t v64 = v38 + v9;
          return;
        }
        operations_research::glop::UpdateRow::ComputeUpdatesRowWise((operations_research::glop::UpdateRow *)a1);
        uint64_t v38 = v9 + **a1;
      }
LABEL_81:
      uint64_t v64 = a1 + 32;
      uint64_t v9 = (uint64_t)a1[32];
      goto LABEL_82;
    }
    unint64_t v39 = (char *)a1[6] - (char *)a1[5];
    if ((int)(v39 >> 3) < 1) {
      goto LABEL_75;
    }
    uint64_t v40 = 0;
    uint64_t v9 = 0;
    uint64_t v41 = (v39 >> 3);
    uint64_t v69 = v41;
    while (1)
    {
      if (fabs(*(double *)(*v3 + 8 * v40)) <= v5) {
        goto LABEL_45;
      }
      uint64_t v45 = a1[17];
      if (v4 >= v45) {
        break;
      }
      int *v4 = v40;
      uint64_t v42 = (uint64_t)(v4 + 1);
LABEL_44:
      uint64_t v43 = *((void *)a1[1] + 7);
      uint64_t v44 = *(void *)(v43 + 8 * (v40 + 1));
      a1[16] = (int *)v42;
      uint64_t v9 = v44 + v9 - *(void *)(v43 + 8 * v40);
      uint64_t v4 = (int *)v42;
LABEL_45:
      if (++v40 == v41) {
        goto LABEL_76;
      }
    }
    uint64_t v46 = (int *)*v70;
    uint64_t v47 = (char *)v4 - (unsigned char *)*v70;
    uint64_t v48 = v47 >> 2;
    unint64_t v49 = (v47 >> 2) + 1;
    if (v49 >> 62) {
LABEL_84:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v50 = (char *)v45 - (char *)v46;
    if (v50 >> 1 > v49) {
      unint64_t v49 = v50 >> 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      if (v51 >> 62) {
LABEL_85:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v52 = operator new(4 * v51);
      double v53 = (int *)&v52[4 * v48];
      *double v53 = v40;
      uint64_t v42 = (uint64_t)(v53 + 1);
      if (v4 == v46) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v52 = 0;
      double v53 = (int *)(4 * v48);
      *(_DWORD *)(4 * v48) = v40;
      uint64_t v42 = 4 * v48 + 4;
      if (v4 == v46) {
        goto LABEL_62;
      }
    }
    unint64_t v54 = (char *)(v4 - 1) - (char *)v46;
    if (v54 >= 0xBC)
    {
      if (&v52[v47 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v52[v47 - 4])
      {
        uint64_t v55 = v4;
      }
      else if ((int *)((char *)v4 - (v54 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v4 - 1)
      {
        uint64_t v55 = v4;
      }
      else if ((unint64_t)((char *)v4 - v52 - v47) >= 0x20)
      {
        uint64_t v57 = (v54 >> 2) + 1;
        uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v55 = &v4[v58 / 0xFFFFFFFFFFFFFFFCLL];
        double v53 = (int *)((char *)v53 - v58);
        uint64_t v59 = &v52[4 * v48 - 16];
        uint64_t v60 = v4 - 4;
        uint64_t v61 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *uint64_t v59 = v62;
          v59 -= 2;
          v60 -= 8;
          v61 -= 8;
        }
        while (v61);
        if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v55 = v4;
      }
    }
    else
    {
      uint64_t v55 = v4;
    }
    do
    {
      int v56 = *--v55;
      *--double v53 = v56;
    }
    while (v55 != v46);
LABEL_62:
    a1[15] = v53;
    a1[16] = (int *)v42;
    a1[17] = (int *)&v52[4 * v51];
    if (v46) {
      operator delete(v46);
    }
    uint64_t v41 = v69;
    goto LABEL_44;
  }
}

void operations_research::glop::UpdateRow::ComputeUpdatesRowWiseHypersparse(operations_research::glop::UpdateRow *this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(int *)(*(void *)this + 4);
  int v3 = v2 & ~((int)v2 >> 31);
  *((_DWORD *)this + 42) = v3;
  double v5 = (char **)((char *)this + 176);
  uint64_t v4 = (char *)*((void *)this + 22);
  unint64_t v6 = (v3 + 63) >> 6;
  uint64_t v7 = *((void *)v1 + 23) - (void)v4;
  unint64_t v8 = v7 >> 3;
  uint64_t v98 = 0;
  if (v6 <= v7 >> 3)
  {
    if (v6 < v7 >> 3) {
      *((void *)v1 + 23) = &v4[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v6 - (v7 >> 3), &v98);
    uint64_t v4 = *v5;
  }
  if (v6 >= v8) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = v6;
  }
  bzero(v4, 8 * v9);
  uint64_t v10 = *((void *)v1 + 28);
  uint64_t v11 = *((void *)v1 + 29);
  uint64_t v12 = (void *)((char *)v1 + 224);
  uint64_t v98 = 0;
  unint64_t v13 = (v11 - v10) >> 3;
  if (v2 <= v13)
  {
    if (v2 < v13) {
      *((void *)v1 + 29) = v10 + 8 * v2;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)v1 + 224, v2 - v13, &v98);
  }
  uint64_t v14 = (int *)*((void *)v1 + 15);
  uint64_t v15 = (int *)*((void *)v1 + 16);
  if (v14 != v15)
  {
    uint64_t v16 = *((void *)v1 + 5);
    uint64_t v17 = (void *)*((void *)v1 + 1);
    uint64_t v18 = v17[7];
    do
    {
      uint64_t v19 = *v14;
      uint64_t v20 = 8 * v19;
      uint64_t v21 = *(void *)(v18 + 8 * v19);
      uint64_t v22 = *(void *)(v18 + (((v19 << 32) + 0x100000000) >> 29));
      BOOL v23 = v22 <= v21;
      uint64_t v24 = v22 - v21;
      if (!v23)
      {
        double v25 = *(double *)(v16 + v20);
        unint64_t v26 = *v5;
        uint64_t v27 = *v12;
        int v28 = (int *)(v17[4] + 4 * v21);
        unint64_t v29 = (double *)(v17[1] + 8 * v21);
        do
        {
          while (1)
          {
            int v30 = *v28++;
            double v31 = v25 * *v29;
            uint64_t v32 = v30;
            unint64_t v33 = (unint64_t)v30 >> 6;
            uint64_t v34 = *(void *)&v26[8 * v33];
            uint64_t v35 = 1 << v30;
            if ((v34 & (1 << v30)) != 0) {
              break;
            }
            *(double *)(v27 + 8 * v32) = v31;
            *(void *)&v26[8 * v33] = v34 | v35;
            ++v29;
            if (!--v24) {
              goto LABEL_14;
            }
          }
          *(double *)(v27 + 8 * v32) = v31 + *(double *)(v27 + 8 * v32);
          ++v29;
          --v24;
        }
        while (v24);
      }
LABEL_14:
      ++v14;
    }
    while (v14 != v15);
  }
  uint64_t IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)v1
                                                                                   + 2));
  uint64_t v38 = (unint64_t *)*((void *)v1 + 22);
  long long v37 = (unint64_t *)*((void *)v1 + 23);
  unint64_t v39 = (char *)v37 - (char *)v38;
  unint64_t v40 = v37 - v38;
  uint64_t v41 = *(int8x16_t **)(IsRelevantBitRow + 8);
  unint64_t v42 = (uint64_t)(*(void *)(IsRelevantBitRow + 16) - (void)v41) >> 3;
  if (v42 >= v40) {
    unint64_t v42 = v37 - v38;
  }
  if ((int)v42 < 1) {
    goto LABEL_37;
  }
  if (v42 >= 6uLL
    && (v38 < (unint64_t *)v41 + v42
      ? (BOOL v43 = v41 >= (int8x16_t *)&v38[v42])
      : (BOOL v43 = 1),
        v43))
  {
    unint64_t v44 = v42 - (v42 & 3);
    uint64_t v45 = v41 + 1;
    uint64_t v46 = (int8x16_t *)(v38 + 2);
    unint64_t v47 = v44;
    do
    {
      int8x16_t v48 = vandq_s8(*v46, *v45);
      v46[-1] = vandq_s8(v46[-1], v45[-1]);
      *uint64_t v46 = v48;
      v45 += 2;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
    if ((v42 & 3) == 0) {
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v44 = 0;
  }
  unint64_t v49 = v42 - v44;
  uint64_t v50 = v44;
  unint64_t v51 = &v38[v44];
  uint64_t v52 = &v41->i64[v50];
  do
  {
    uint64_t v53 = *v52++;
    *v51++ &= v53;
    --v49;
  }
  while (v49);
LABEL_37:
  if (v40 > (int)v42) {
    bzero(&v38[(int)v42], (v39 & 0xFFFFFFFFFFFFFFF8) - 8 * (int)v42);
  }
  unint64_t v54 = (char *)*((void *)v1 + 18);
  uint64_t v96 = (void **)((char *)v1 + 144);
  *((void *)v1 + 19) = v54;
  if (v38 == v37) {
    goto LABEL_52;
  }
  unint64_t v55 = *v38;
  if (*v38)
  {
    uint64_t v56 = 0;
    goto LABEL_55;
  }
  uint64_t v57 = 0;
  uint64_t v58 = (int)((uint64_t)v39 >> 3);
  if ((int)(v39 >> 3) <= 1) {
    int v59 = 1;
  }
  else {
    int v59 = v39 >> 3;
  }
  if (v58 <= 1) {
    uint64_t v58 = 1;
  }
  uint64_t v60 = v58 - 1;
  while (v60 != v57)
  {
    int v61 = v57 + 1;
    if (v38[++v57])
    {
      int v59 = v61;
      break;
    }
  }
  if (v59 == (v39 >> 3))
  {
LABEL_52:
    unint64_t v63 = 0;
    uint64_t v56 = 0;
    int v64 = -1;
    int v65 = *((_DWORD *)v1 + 52);
    if (v65 == -1) {
      return;
    }
    goto LABEL_57;
  }
  unint64_t v55 = v38[v59];
  uint64_t v56 = (v59 << 6);
LABEL_55:
  int v64 = __clz(__rbit64(v55)) & 0x3F | v56;
  unint64_t v63 = (v55 - 1) & v55;
  int v65 = *((_DWORD *)v1 + 52);
  if (v64 != v65)
  {
LABEL_57:
    double v66 = *((double *)v1 + 65);
    int v95 = v65;
    while (1)
    {
      if (fabs(*(double *)(*v12 + 8 * v64)) <= v66) {
        goto LABEL_60;
      }
      unint64_t v68 = *((void *)v1 + 20);
      if ((unint64_t)v54 >= v68) {
        break;
      }
      *(_DWORD *)unint64_t v54 = v64;
      uint64_t v67 = (uint64_t)(v54 + 4);
LABEL_59:
      *((void *)v1 + 19) = v67;
      unint64_t v54 = (char *)v67;
LABEL_60:
      if (v63)
      {
LABEL_61:
        int v64 = (__clz(__rbit64(v63)) & 0x3F) + v56;
        v63 &= v63 - 1;
        if (v64 == v65) {
          return;
        }
      }
      else
      {
        uint64_t v82 = *((void *)v1 + 22);
        uint64_t v83 = *((void *)v1 + 23) - v82;
        unint64_t v84 = (unint64_t)v83 >> 3;
        uint64_t v85 = (int)(v83 >> 3);
        if (((int)v56 >> 6) + 1 > (int)v84) {
          int v86 = ((int)v56 >> 6) + 1;
        }
        else {
          int v86 = v84;
        }
        uint64_t v87 = ((uint64_t)(int)v56 >> 6) + 1;
        while (v87 < v85)
        {
          if (*(void *)(v82 + 8 * v87++))
          {
            int v86 = v87 - 1;
            break;
          }
        }
        if (v86 != v84)
        {
          unint64_t v63 = *(void *)(v82 + 8 * v86);
          uint64_t v56 = (v86 << 6);
          goto LABEL_61;
        }
        unint64_t v63 = 0;
        int v64 = -1;
        if (v65 == -1) {
          return;
        }
      }
    }
    uint64_t v69 = v1;
    uint64_t v70 = v12;
    uint64_t v71 = (char *)*v96;
    uint64_t v72 = v54 - (unsigned char *)*v96;
    uint64_t v73 = v72 >> 2;
    unint64_t v74 = (v72 >> 2) + 1;
    if (v74 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v75 = v68 - (void)v71;
    if (v75 >> 1 > v74) {
      unint64_t v74 = v75 >> 1;
    }
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v76 = v74;
    }
    uint64_t v97 = v56;
    if (v76)
    {
      if (v76 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v77 = operator new(4 * v76);
      unint64_t v78 = (int *)&v77[4 * v73];
      *unint64_t v78 = v64;
      uint64_t v67 = (uint64_t)(v78 + 1);
      if (v54 != v71)
      {
LABEL_73:
        unint64_t v79 = v54 - 4 - v71;
        if (v79 < 0xBC
          || &v77[v72 - 4 - (v79 & 0xFFFFFFFFFFFFFFFCLL)] > &v77[v72 - 4]
          || &v54[-(v79 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v54 - 4
          || (unint64_t)(v54 - v77 - v72) < 0x20)
        {
          uint64_t v80 = v54;
          uint64_t v12 = v70;
          uint64_t v1 = v69;
        }
        else
        {
          uint64_t v89 = (v79 >> 2) + 1;
          uint64_t v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v80 = &v54[-v90];
          unint64_t v78 = (int *)((char *)v78 - v90);
          int v91 = &v77[4 * v73 - 16];
          uint64_t v92 = v54 - 16;
          uint64_t v93 = v89 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v12 = v70;
          do
          {
            long long v94 = *(_OWORD *)v92;
            *(v91 - 1) = *((_OWORD *)v92 - 1);
            *int v91 = v94;
            v91 -= 2;
            v92 -= 32;
            v93 -= 8;
          }
          while (v93);
          uint64_t v1 = v69;
          if (v89 == (v89 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            *((void *)v1 + 18) = v78;
            *((void *)v1 + 19) = v67;
            *((void *)v1 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v77[4 * v76];
            if (!v71)
            {
LABEL_78:
              uint64_t v56 = v97;
              int v65 = v95;
              goto LABEL_59;
            }
LABEL_77:
            operator delete(v71);
            goto LABEL_78;
          }
        }
        do
        {
          int v81 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *--unint64_t v78 = v81;
        }
        while (v80 != v71);
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v77 = 0;
      unint64_t v78 = (int *)(4 * v73);
      *(_DWORD *)(4 * v73) = v64;
      uint64_t v67 = 4 * v73 + 4;
      if (v54 != v71) {
        goto LABEL_73;
      }
    }
    uint64_t v12 = v70;
    uint64_t v1 = v69;
    *((void *)v69 + 18) = v78;
    *((void *)v69 + 19) = v67;
    *((void *)v69 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v77[4 * v76];
    if (!v71) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
}

uint64_t operations_research::glop::UpdateRow::ComputeUpdatesRowWise(operations_research::glop::UpdateRow *this)
{
  unint64_t v2 = *(int *)(*(void *)this + 4);
  uint64_t v4 = (char *)*((void *)this + 28);
  uint64_t v5 = *((void *)this + 29);
  unint64_t v6 = (char **)((char *)this + 224);
  uint64_t v75 = 0;
  uint64_t v7 = v2 << 32;
  unint64_t v8 = (v5 - (uint64_t)v4) >> 3;
  if (v2 <= v8)
  {
    if (v2 < v8) {
      *((void *)this + 29) = &v4[8 * v2];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)v6, v2 - v8, &v75);
    uint64_t v4 = *v6;
  }
  bzero(v4, v7 >> 29);
  unint64_t v9 = (int *)*((void *)this + 15);
  uint64_t v10 = (int *)*((void *)this + 16);
  if (v9 != v10)
  {
    uint64_t v11 = *((void *)this + 5);
    uint64_t v12 = (void *)*((void *)this + 1);
    uint64_t v13 = v12[7];
    do
    {
      uint64_t v14 = *v9;
      uint64_t v15 = 8 * v14;
      uint64_t v16 = *(void *)(v13 + 8 * v14);
      uint64_t v17 = *(void *)(v13 + (((v14 << 32) + 0x100000000) >> 29));
      BOOL v18 = v17 <= v16;
      uint64_t v19 = v17 - v16;
      if (!v18)
      {
        double v20 = *(double *)(v11 + v15);
        uint64_t v21 = *v6;
        uint64_t v22 = (int *)(v12[4] + 4 * v16);
        BOOL v23 = (double *)(v12[1] + 8 * v16);
        do
        {
          uint64_t v25 = *v22++;
          uint64_t v24 = v25;
          double v26 = *v23++;
          *(double *)&v21[8 * v24] = *(double *)&v21[8 * v24] + v20 * v26;
          --v19;
        }
        while (v19);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *((void *)this + 19) = *((void *)this + 18);
  double v27 = *((double *)this + 65);
  uint64_t v73 = (void **)((char *)this + 144);
  uint64_t result = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                         + 2));
  unint64_t v29 = *(unint64_t **)(result + 8);
  int v30 = *(unint64_t **)(result + 16);
  if (v29 == v30) {
    goto LABEL_25;
  }
  unint64_t v31 = *v29;
  if (*v29)
  {
    uint64_t v32 = 0;
    goto LABEL_28;
  }
  uint64_t v33 = 0;
  unint64_t v34 = (char *)v30 - (char *)v29;
  unint64_t v35 = v34 >> 3;
  uint64_t v36 = (int)((uint64_t)v34 >> 3);
  if ((int)(v34 >> 3) <= 1) {
    int v37 = 1;
  }
  else {
    int v37 = v34 >> 3;
  }
  if (v36 <= 1) {
    uint64_t v36 = 1;
  }
  uint64_t v38 = v36 - 1;
  while (v38 != v33)
  {
    int v39 = v33 + 1;
    if (v29[++v33])
    {
      int v37 = v39;
      break;
    }
  }
  if (v37 == v35)
  {
LABEL_25:
    unint64_t v41 = 0;
    uint64_t v32 = 0;
    int v42 = -1;
    int v43 = *(_DWORD *)(result + 40);
    if (v43 == -1) {
      return result;
    }
    goto LABEL_30;
  }
  unint64_t v31 = v29[v37];
  uint64_t v32 = (v37 << 6);
LABEL_28:
  int v42 = __clz(__rbit64(v31)) & 0x3F | v32;
  unint64_t v41 = (v31 - 1) & v31;
  int v43 = *(_DWORD *)(result + 40);
  if (v42 != v43)
  {
LABEL_30:
    uint64_t v72 = result;
    int v71 = v43;
    while (1)
    {
      if (fabs(*(double *)&(*v6)[8 * v42]) <= v27) {
        goto LABEL_33;
      }
      uint64_t v46 = (int *)*((void *)this + 19);
      unint64_t v45 = *((void *)this + 20);
      if ((unint64_t)v46 >= v45) {
        break;
      }
      *uint64_t v46 = v42;
      uint64_t v44 = (uint64_t)(v46 + 1);
LABEL_32:
      *((void *)this + 19) = v44;
LABEL_33:
      if (v41)
      {
LABEL_34:
        int v42 = (__clz(__rbit64(v41)) & 0x3F) + v32;
        v41 &= v41 - 1;
        if (v42 == v43) {
          return result;
        }
      }
      else
      {
        uint64_t v55 = *(void *)(result + 8);
        uint64_t v56 = *(void *)(result + 16) - v55;
        unint64_t v57 = (unint64_t)v56 >> 3;
        uint64_t v58 = (int)(v56 >> 3);
        if (((int)v32 >> 6) + 1 > (int)v57) {
          int v59 = ((int)v32 >> 6) + 1;
        }
        else {
          int v59 = v57;
        }
        uint64_t v60 = ((uint64_t)(int)v32 >> 6) + 1;
        while (v60 < v58)
        {
          if (*(void *)(v55 + 8 * v60++))
          {
            int v59 = v60 - 1;
            break;
          }
        }
        if (v59 != v57)
        {
          unint64_t v41 = *(void *)(v55 + 8 * v59);
          uint64_t v32 = (v59 << 6);
          goto LABEL_34;
        }
        unint64_t v41 = 0;
        int v42 = -1;
        if (v43 == -1) {
          return result;
        }
      }
    }
    uint64_t v74 = v32;
    unint64_t v47 = (int *)*v73;
    uint64_t v48 = (char *)v46 - (unsigned char *)*v73;
    uint64_t v49 = v48 >> 2;
    unint64_t v50 = (v48 >> 2) + 1;
    if (v50 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v51 = v45 - (void)v47;
    if (v51 >> 1 > v50) {
      unint64_t v50 = v51 >> 1;
    }
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      if (v52 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v53 = operator new(4 * v52);
      unint64_t v54 = (int *)&v53[4 * v49];
      *unint64_t v54 = v42;
      uint64_t v44 = (uint64_t)(v54 + 1);
      if (v46 == v47) {
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v53 = 0;
      unint64_t v54 = (int *)(4 * v49);
      *(_DWORD *)(4 * v49) = v42;
      uint64_t v44 = 4 * v49 + 4;
      if (v46 == v47)
      {
LABEL_65:
        *((void *)this + 18) = v54;
        *((void *)this + 19) = v44;
        *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v53[4 * v52];
        if (v47) {
          operator delete(v47);
        }
        uint64_t result = v72;
        uint64_t v32 = v74;
        int v43 = v71;
        goto LABEL_32;
      }
    }
    unint64_t v62 = (char *)(v46 - 1) - (char *)v47;
    if (v62 < 0x2C) {
      goto LABEL_72;
    }
    if ((unint64_t)((char *)v46 - &v53[v48]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v63 = (v62 >> 2) + 1;
    uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
    int v65 = &v46[v64 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v54 = (int *)((char *)v54 - v64);
    double v66 = &v53[4 * v49 - 16];
    uint64_t v67 = v46 - 4;
    uint64_t v68 = v63 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v69 = *(_OWORD *)v67;
      *(v66 - 1) = *((_OWORD *)v67 - 1);
      *double v66 = v69;
      v66 -= 2;
      v67 -= 8;
      v68 -= 8;
    }
    while (v68);
    uint64_t v46 = v65;
    if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_72:
      do
      {
        int v70 = *--v46;
        *--unint64_t v54 = v70;
      }
      while (v46 != v47);
    }
    goto LABEL_65;
  }
  return result;
}

uint64_t operations_research::glop::UpdateRow::ComputeUpdatesColumnWise(operations_research::glop::UpdateRow *this)
{
  unint64_t v2 = *(int *)(*(void *)this + 4);
  uint64_t v4 = *((void *)this + 28);
  uint64_t v5 = *((void *)this + 29);
  int v3 = (char *)this + 224;
  double v6 = *((double *)this + 65);
  uint64_t v66 = 0;
  unint64_t v7 = (v5 - v4) >> 3;
  if (v2 <= v7)
  {
    if (v2 < v7) {
      *((void *)this + 29) = v4 + 8 * v2;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)v3, v2 - v7, &v66);
  }
  *((void *)this + 19) = *((void *)this + 18);
  uint64_t v64 = (void **)((char *)this + 144);
  uint64_t result = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                         + 2));
  unint64_t v9 = *(unint64_t **)(result + 8);
  uint64_t v10 = *(unint64_t **)(result + 16);
  if (v9 == v10) {
    goto LABEL_18;
  }
  unint64_t v11 = *v9;
  if (*v9)
  {
    uint64_t v12 = 0;
    goto LABEL_21;
  }
  uint64_t v13 = 0;
  unint64_t v14 = (char *)v10 - (char *)v9;
  unint64_t v15 = v14 >> 3;
  uint64_t v16 = (int)((uint64_t)v14 >> 3);
  if ((int)(v14 >> 3) <= 1) {
    int v17 = 1;
  }
  else {
    int v17 = v14 >> 3;
  }
  if (v16 <= 1) {
    uint64_t v16 = 1;
  }
  uint64_t v18 = v16 - 1;
  while (v18 != v13)
  {
    int v19 = v13 + 1;
    if (v9[++v13])
    {
      int v17 = v19;
      break;
    }
  }
  if (v17 == v15)
  {
LABEL_18:
    unint64_t v21 = 0;
    uint64_t v12 = 0;
    unint64_t v22 = 0xFFFFFFFFLL;
    int v23 = *(_DWORD *)(result + 40);
    if (v23 == -1) {
      return result;
    }
    goto LABEL_23;
  }
  unint64_t v11 = v9[v17];
  uint64_t v12 = (v17 << 6);
LABEL_21:
  unint64_t v22 = __clz(__rbit64(v11)) & 0x3F | v12;
  unint64_t v21 = (v11 - 1) & v11;
  int v23 = *(_DWORD *)(result + 40);
  if (v22 != v23)
  {
LABEL_23:
    uint64_t v63 = result;
    while (1)
    {
      uint64_t v25 = *(void *)this;
      uint64_t v26 = *(void *)(*(void *)this + 56);
      uint64_t v27 = *(void *)(v26 + 8 * (int)v22);
      uint64_t v28 = *(void *)(v26 + ((uint64_t)((v22 << 32) + 0x100000000) >> 29));
      double v29 = 0.0;
      BOOL v30 = v28 <= v27;
      uint64_t v31 = v28 - v27;
      if (!v30)
      {
        uint64_t v32 = (int *)(*(void *)(v25 + 32) + 4 * v27);
        uint64_t v33 = (double *)(*(void *)(v25 + 8) + 8 * v27);
        do
        {
          double v34 = *v33++;
          double v35 = v34;
          uint64_t v36 = *v32++;
          double v29 = v29 + v35 * *(double *)(*((void *)this + 5) + 8 * v36);
          --v31;
        }
        while (v31);
      }
      if (fabs(v29) <= v6) {
        goto LABEL_26;
      }
      uint64_t v38 = (char *)*((void *)this + 19);
      unint64_t v37 = *((void *)this + 20);
      if ((unint64_t)v38 >= v37) {
        break;
      }
      *(_DWORD *)uint64_t v38 = v22;
      uint64_t v24 = (uint64_t)(v38 + 4);
LABEL_25:
      *((void *)this + 19) = v24;
      *(double *)(*((void *)this + 28) + 8 * (int)v22) = v29;
LABEL_26:
      if (v21)
      {
LABEL_27:
        unint64_t v22 = (__clz(__rbit64(v21)) & 0x3F) + v12;
        v21 &= v21 - 1;
        if (v22 == v23) {
          return result;
        }
      }
      else
      {
        uint64_t v47 = *(void *)(result + 8);
        uint64_t v48 = *(void *)(result + 16) - v47;
        unint64_t v49 = (unint64_t)v48 >> 3;
        uint64_t v50 = (int)(v48 >> 3);
        if (((int)v12 >> 6) + 1 > (int)v49) {
          int v51 = ((int)v12 >> 6) + 1;
        }
        else {
          int v51 = v49;
        }
        uint64_t v52 = ((uint64_t)(int)v12 >> 6) + 1;
        while (v52 < v50)
        {
          if (*(void *)(v47 + 8 * v52++))
          {
            int v51 = v52 - 1;
            break;
          }
        }
        if (v51 != v49)
        {
          unint64_t v21 = *(void *)(v47 + 8 * v51);
          uint64_t v12 = (v51 << 6);
          goto LABEL_27;
        }
        unint64_t v21 = 0;
        unint64_t v22 = 0xFFFFFFFFLL;
        if (v23 == -1) {
          return result;
        }
      }
    }
    uint64_t v65 = v12;
    int v39 = (char *)*v64;
    uint64_t v40 = v38 - (unsigned char *)*v64;
    uint64_t v41 = v40 >> 2;
    unint64_t v42 = (v40 >> 2) + 1;
    if (v42 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = v37 - (void)v39;
    if (v43 >> 1 > v42) {
      unint64_t v42 = v43 >> 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      if (v44 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v45 = operator new(4 * v44);
      uint64_t v46 = &v45[4 * v41];
      *uint64_t v46 = v22;
      uint64_t v24 = (uint64_t)(v46 + 1);
      if (v38 == v39) {
        goto LABEL_61;
      }
    }
    else
    {
      unint64_t v45 = 0;
      uint64_t v46 = (_DWORD *)(4 * v41);
      *(_DWORD *)(4 * v41) = v22;
      uint64_t v24 = 4 * v41 + 4;
      if (v38 == v39)
      {
LABEL_61:
        *((void *)this + 18) = v46;
        *((void *)this + 19) = v24;
        *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v45[4 * v44];
        if (v39) {
          operator delete(v39);
        }
        uint64_t result = v63;
        uint64_t v12 = v65;
        goto LABEL_25;
      }
    }
    unint64_t v54 = v38 - 4 - v39;
    if (v54 < 0x2C) {
      goto LABEL_68;
    }
    if ((unint64_t)(v38 - &v45[v40]) < 0x20) {
      goto LABEL_68;
    }
    uint64_t v55 = (v54 >> 2) + 1;
    uint64_t v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v57 = &v38[-v56];
    uint64_t v46 = (_DWORD *)((char *)v46 - v56);
    uint64_t v58 = &v45[4 * v41 - 16];
    int v59 = v38 - 16;
    uint64_t v60 = v55 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v61 = *(_OWORD *)v59;
      *(v58 - 1) = *((_OWORD *)v59 - 1);
      *uint64_t v58 = v61;
      v58 -= 2;
      v59 -= 32;
      v60 -= 8;
    }
    while (v60);
    uint64_t v38 = v57;
    if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_68:
      do
      {
        int v62 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *--uint64_t v46 = v62;
      }
      while (v38 != v39);
    }
    goto LABEL_61;
  }
  return result;
}

uint64_t operations_research::glop::UpdateRow::GetCoefficients(operations_research::glop::UpdateRow *this)
{
  return (uint64_t)this + 224;
}

uint64_t operations_research::glop::UpdateRow::GetNonZeroPositions(operations_research::glop::UpdateRow *this)
{
  return (uint64_t)this + 144;
}

double operations_research::glop::UpdateRow::SetParameters(operations_research::glop::UpdateRow *this, const operations_research::glop::GlopParameters *a2)
{
  return operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::UpdateRow *)((char *)this + 264), a2);
}

uint64_t operations_research::glop::UpdateRow::RecomputeFullUpdateRow(uint64_t *a1, int a2)
{
  if (*((unsigned char *)a1 + 248))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v85, (google::glog_internal_namespace_ *)"./ortools/glop/update_row.cc", 245);
    int v81 = (void *)google::LogMessage::stream((google::LogMessage *)v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Check failed: !compute_update_row_ ", 35);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v85);
  }
  int v3 = (void **)a1;
  unint64_t v4 = *(int *)(*a1 + 4);
  uint64_t v5 = a1[28];
  uint64_t v6 = a1[29];
  unint64_t v7 = a1 + 28;
  double v8 = *((double *)a1 + 65);
  v85[0] = 0;
  unint64_t v9 = (v6 - v5) >> 3;
  if (v4 <= v9)
  {
    if (v4 < v9) {
      a1[29] = v5 + 8 * v4;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)(a1 + 28), v4 - v9, v85);
    uint64_t v5 = *v7;
  }
  uint64_t v10 = v3[18];
  v3[19] = v10;
  uint64_t v11 = *(void *)v3[3];
  uint64_t v12 = *(int *)(v11 + 4 * a2);
  *(void *)(v5 + 8 * v12) = 0x3FF0000000000000;
  unint64_t v84 = v3 + 18;
  unint64_t v13 = (unint64_t)v3[20];
  if ((unint64_t)v10 >= v13)
  {
    uint64_t v15 = v13 - (void)v10;
    uint64_t v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1) {
      uint64_t v16 = 1;
    }
    BOOL v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v17) {
      unint64_t v18 = v16;
    }
    if (v18 >> 62) {
LABEL_76:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v19 = a2;
    uint64_t v20 = v18;
    unint64_t v21 = operator new(4 * v18);
    _DWORD *v21 = *(_DWORD *)(v11 + 4 * v19);
    unint64_t v14 = v21 + 1;
    v3[18] = v21;
    v3[19] = v21 + 1;
    v3[20] = &v21[v20];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v10 = v12;
    unint64_t v14 = v10 + 1;
  }
  v3[19] = v14;
  uint64_t result = operations_research::glop::VariablesInfo::GetNotBasicBitRow((operations_research::glop::VariablesInfo *)v3[2]);
  int v23 = *(unint64_t **)(result + 8);
  uint64_t v24 = *(unint64_t **)(result + 16);
  if (v23 == v24) {
    goto LABEL_28;
  }
  unint64_t v25 = *v23;
  if (*v23)
  {
    uint64_t v26 = 0;
    goto LABEL_31;
  }
  uint64_t v27 = 0;
  unint64_t v28 = (char *)v24 - (char *)v23;
  unint64_t v29 = v28 >> 3;
  uint64_t v30 = (int)((uint64_t)v28 >> 3);
  if ((int)(v28 >> 3) <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v28 >> 3;
  }
  if (v30 <= 1) {
    uint64_t v30 = 1;
  }
  uint64_t v32 = v30 - 1;
  while (v32 != v27)
  {
    int v33 = v27 + 1;
    if (v23[++v27])
    {
      int v31 = v33;
      break;
    }
  }
  if (v31 == v29)
  {
LABEL_28:
    unint64_t v35 = 0;
    uint64_t v26 = 0;
    unint64_t v36 = 0xFFFFFFFFLL;
    uint64_t v37 = *(unsigned int *)(result + 40);
    if (v37 == -1) {
      return result;
    }
    goto LABEL_33;
  }
  unint64_t v25 = v23[v31];
  uint64_t v26 = (v31 << 6);
LABEL_31:
  unint64_t v36 = __clz(__rbit64(v25)) & 0x3F | v26;
  unint64_t v35 = (v25 - 1) & v25;
  uint64_t v37 = *(unsigned int *)(result + 40);
  if (v36 != v37)
  {
LABEL_33:
    uint64_t v82 = v3;
    uint64_t v83 = result;
    while (1)
    {
      int v39 = *v3;
      uint64_t v40 = *((void *)*v3 + 7);
      uint64_t v41 = *(void *)(v40 + 8 * (int)v36);
      uint64_t v42 = *(void *)(v40 + ((uint64_t)((v36 << 32) + 0x100000000) >> 29));
      double v43 = 0.0;
      BOOL v44 = v42 <= v41;
      uint64_t v45 = v42 - v41;
      if (!v44)
      {
        uint64_t v46 = (int *)(v39[4] + 4 * v41);
        uint64_t v47 = (double *)(v39[1] + 8 * v41);
        do
        {
          double v48 = *v47++;
          double v49 = v48;
          uint64_t v50 = *v46++;
          double v43 = v43 + v49 * *((double *)v3[5] + v50);
          --v45;
        }
        while (v45);
      }
      if (fabs(v43) <= v8) {
        goto LABEL_36;
      }
      uint64_t v52 = (char *)v3[19];
      unint64_t v51 = (unint64_t)v3[20];
      if ((unint64_t)v52 >= v51) {
        break;
      }
      *(_DWORD *)uint64_t v52 = v36;
      uint64_t v38 = (uint64_t)(v52 + 4);
LABEL_35:
      v3[19] = (void *)v38;
      *((double *)v3[28] + (int)v36) = v43;
LABEL_36:
      if (v35)
      {
LABEL_37:
        unint64_t v36 = (__clz(__rbit64(v35)) & 0x3F) + v26;
        v35 &= v35 - 1;
        if (v36 == v37) {
          return result;
        }
      }
      else
      {
        uint64_t v65 = *(void *)(result + 8);
        uint64_t v66 = *(void *)(result + 16) - v65;
        unint64_t v67 = (unint64_t)v66 >> 3;
        uint64_t v68 = (int)(v66 >> 3);
        if (((int)v26 >> 6) + 1 > (int)v67) {
          int v69 = ((int)v26 >> 6) + 1;
        }
        else {
          int v69 = v67;
        }
        uint64_t v70 = ((uint64_t)(int)v26 >> 6) + 1;
        while (v70 < v68)
        {
          if (*(void *)(v65 + 8 * v70++))
          {
            int v69 = v70 - 1;
            break;
          }
        }
        if (v69 != v67)
        {
          unint64_t v35 = *(void *)(v65 + 8 * v69);
          uint64_t v26 = (v69 << 6);
          goto LABEL_37;
        }
        unint64_t v35 = 0;
        unint64_t v36 = 0xFFFFFFFFLL;
        if (v37 == -1) {
          return result;
        }
      }
    }
    uint64_t v53 = v26;
    uint64_t v54 = v37;
    uint64_t v55 = (char *)*v84;
    uint64_t v56 = v52 - (unsigned char *)*v84;
    uint64_t v57 = v56 >> 2;
    unint64_t v58 = (v56 >> 2) + 1;
    if (v58 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v59 = v51 - (void)v55;
    if (v59 >> 1 > v58) {
      unint64_t v58 = v59 >> 1;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      if (v58 >> 62) {
        goto LABEL_76;
      }
      unint64_t v60 = v58;
      long long v61 = operator new(4 * v58);
      int v62 = &v61[4 * v57];
      *int v62 = v36;
      uint64_t v38 = (uint64_t)(v62 + 1);
      if (v52 != v55) {
        goto LABEL_51;
      }
    }
    else
    {
      unint64_t v60 = 0;
      long long v61 = 0;
      int v62 = (_DWORD *)(4 * v57);
      *(_DWORD *)(4 * v57) = v36;
      uint64_t v38 = 4 * v57 + 4;
      if (v52 != v55)
      {
LABEL_51:
        unint64_t v63 = v52 - 4 - v55;
        unint64_t v64 = v60;
        if (v63 >= 0x2C)
        {
          unint64_t v72 = v52 - &v61[v56];
          uint64_t v37 = v54;
          uint64_t v26 = v53;
          int v3 = v82;
          if (v72 >= 0x20)
          {
            uint64_t v73 = (v63 >> 2) + 1;
            uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v75 = &v52[-v74];
            int v62 = (_DWORD *)((char *)v62 - v74);
            unint64_t v76 = &v61[4 * v57 - 16];
            uint64_t v77 = v52 - 16;
            uint64_t v78 = v73 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v79 = *(_OWORD *)v77;
              *(v76 - 1) = *((_OWORD *)v77 - 1);
              *unint64_t v76 = v79;
              v76 -= 2;
              v77 -= 32;
              v78 -= 8;
            }
            while (v78);
            uint64_t v52 = v75;
            if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_71;
            }
          }
        }
        else
        {
          uint64_t v37 = v54;
          uint64_t v26 = v53;
          int v3 = v82;
        }
        do
        {
          int v80 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *--int v62 = v80;
        }
        while (v52 != v55);
LABEL_71:
        v3[18] = v62;
        v3[19] = (void *)v38;
        v3[20] = &v61[4 * v64];
        if (v55) {
          operator delete(v55);
        }
        uint64_t result = v83;
        goto LABEL_35;
      }
    }
    uint64_t v37 = v54;
    uint64_t v26 = v53;
    unint64_t v64 = v60;
    int v3 = v82;
    goto LABEL_71;
  }
  return result;
}

void sub_23CB96D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

operations_research::glop::UpdateRow::Stats *operations_research::glop::UpdateRow::Stats::Stats(operations_research::glop::UpdateRow::Stats *this)
{
  strcpy((char *)this, "UpdateRow");
  *((unsigned char *)this + 23) = 9;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_23CE7FBE0;
  strcpy((char *)__p[0], "unit_row_left_inverse_density");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::UpdateRow::Stats *)((char *)this + 80), (long long *)__p, this);
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C4998;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_23CE7E3F0;
  strcpy((char *)__p[0], "unit_row_left_inverse_accuracy");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::UpdateRow::Stats *)((char *)this + 160), (long long *)__p, this);
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0C49F8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "update_row_density");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::UpdateRow::Stats *)((char *)this + 240), (long long *)__p, this) = &unk_26F0C4998;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_23CB96F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*(void **)(v14 + 168));
  }
  *(void *)(v14 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0)
  {
    operator delete(*(void **)(v14 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::VariableValues::VariableValues(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = a5;
  *(void *)(result + 32) = a6;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(_OWORD *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_DWORD *)(result + 88) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = result + 88;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(_DWORD *)(result + 128) = -1;
  strcpy((char *)(result + 144), "VariableValues");
  *(unsigned char *)(result + 167) = 14;
  *(_DWORD *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = result + 208;
  *(void *)(result + 232) = 0;
  *(void *)(result + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(unsigned char *)(result + 248) = 0;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 368) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(void *)(result + 224) = 0;
  *(_OWORD *)(result + 313) = 0u;
  return result;
}

void operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(void *a1, int a2)
{
  unint64_t v4 = (operations_research::glop::VariablesInfo *)a1[3];
  uint64_t v5 = (uint64_t *)*((void *)v4 + 1);
  uint64_t v6 = (uint64_t *)*((void *)v4 + 2);
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  unint64_t v9 = a1 + 5;
  unint64_t v10 = *(int *)(a1[1] + 4);
  v15[0] = 0;
  unint64_t v11 = (v8 - v7) >> 3;
  if (v10 <= v11)
  {
    if (v10 < v11) {
      a1[6] = v7 + 8 * v10;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)(a1 + 5), v10 - v11, v15);
    unint64_t v4 = (operations_research::glop::VariablesInfo *)a1[3];
  }
  switch(*(unsigned char *)(*(void *)operations_research::glop::VariablesInfo::GetStatusRow(v4) + a2))
  {
    case 0:
      google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/glop/variable_values.cc", 59, 2);
      unint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SetNonBasicVariableValueFromStatus() shouldn't ", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"be called on a BASIC variable.", 30);
      google::LogMessage::~LogMessage((google::LogMessage *)v15);
      break;
    case 1:
    case 2:
      uint64_t v12 = *v5;
      goto LABEL_9;
    case 3:
      uint64_t v12 = *v6;
LABEL_9:
      *(void *)(*v9 + 8 * a2) = *(void *)(v12 + 8 * a2);
      break;
    case 4:
      *(void *)(*v9 + 8 * a2) = 0;
      break;
    default:
      return;
  }
}

void sub_23CB971D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::VariableValues::ResetAllNonBasicVariableValues(operations_research::glop::VariableValues *this)
{
  unint64_t v2 = (operations_research::glop::VariablesInfo *)*((void *)this + 3);
  int v3 = (void *)*((void *)v2 + 1);
  unint64_t v4 = (void *)*((void *)v2 + 2);
  uint64_t StatusRow = (uint64_t *)operations_research::glop::VariablesInfo::GetStatusRow(v2);
  unint64_t v6 = *(int *)(*((void *)this + 1) + 4);
  uint64_t v14 = 0;
  uint64_t v7 = *((void *)this + 5);
  unint64_t v8 = (*((void *)this + 6) - v7) >> 3;
  if (v6 <= v8)
  {
    if (v6 < v8) {
      *((void *)this + 6) = v7 + 8 * v6;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 40, v6 - v8, &v14);
  }
  if ((int)v6 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *StatusRow;
    do
    {
      int v13 = *(unsigned __int8 *)(v10 + v9);
      unint64_t v11 = v3;
      if ((v13 - 1) >= 2)
      {
        if (v13 == 4)
        {
          uint64_t v12 = 0;
          goto LABEL_9;
        }
        if (v13 != 3) {
          goto LABEL_10;
        }
        unint64_t v11 = v4;
      }
      uint64_t v12 = *(void *)(*v11 + 8 * v9);
LABEL_9:
      *(void *)(*((void *)this + 5) + 8 * v9) = v12;
LABEL_10:
      ++v9;
    }
    while (v6 != v9);
  }
}

double operations_research::glop::VariableValues::RecomputeBasicVariableValues(operations_research::glop::VariableValues *this)
{
  unint64_t v2 = **((int **)this + 1);
  *((void *)this + 33) = *((void *)this + 32);
  unint64_t v4 = (char *)*((void *)this + 28);
  uint64_t v5 = *((void *)this + 29);
  unint64_t v6 = (operations_research::glop::VariableValues *)((char *)this + 224);
  uint64_t v50 = 0;
  uint64_t v7 = v2 << 32;
  unint64_t v8 = (v5 - (uint64_t)v4) >> 3;
  if (v2 <= v8)
  {
    if (v2 < v8) {
      *((void *)this + 29) = &v4[8 * v2];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)v6, v2 - v8, &v50);
    unint64_t v4 = *(char **)v6;
  }
  unint64_t v2 = v2;
  bzero(v4, v7 >> 29);
  uint64_t NotBasicBitRow = operations_research::glop::VariablesInfo::GetNotBasicBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                               + 3));
  uint64_t v10 = *(unint64_t **)(NotBasicBitRow + 8);
  unint64_t v11 = *(unint64_t **)(NotBasicBitRow + 16);
  if (v10 != v11)
  {
    unint64_t v12 = *v10;
    if (*v10)
    {
      int v13 = 0;
      goto LABEL_21;
    }
    unint64_t v14 = (unint64_t)((char *)v11 - (char *)v10) >> 3;
    uint64_t v15 = (int)(v11 - v10);
    if ((int)v14 <= 1) {
      int v16 = 1;
    }
    else {
      int v16 = (unint64_t)((char *)v11 - (char *)v10) >> 3;
    }
    if (v15 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = v15 - 1;
    while (v17 != v12)
    {
      int v18 = v12 + 1;
      if (v10[++v12])
      {
        int v16 = v18;
        break;
      }
    }
    if (v16 != v14)
    {
      unint64_t v12 = v10[v16];
      int v13 = v16 << 6;
LABEL_21:
      int v21 = __clz(__rbit64(v12)) & 0x3F | v13;
      unint64_t v20 = (v12 - 1) & v12;
      int v22 = *(_DWORD *)(NotBasicBitRow + 40);
      if (v21 != v22) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }
  unint64_t v20 = 0;
  int v13 = 0;
  int v21 = -1;
  int v22 = *(_DWORD *)(NotBasicBitRow + 40);
  if (v22 != -1)
  {
LABEL_22:
    uint64_t v23 = *((void *)this + 5);
    uint64_t v24 = (void *)*((void *)this + 1);
    uint64_t v25 = (char *)v11 - (char *)v10;
    unint64_t v26 = (unint64_t)((char *)v11 - (char *)v10) >> 3;
    uint64_t v27 = (int)(v25 >> 3);
    while (1)
    {
      double v28 = *(double *)(v23 + 8 * v21);
      if (v28 != 0.0)
      {
        uint64_t v29 = v24[7];
        uint64_t v30 = *(void *)(v29 + 8 * v21);
        uint64_t v31 = *(void *)(v29 + ((((uint64_t)v21 << 32) + 0x100000000) >> 29));
        BOOL v32 = v31 <= v30;
        uint64_t v33 = v31 - v30;
        if (!v32)
        {
          double v34 = -v28;
          unint64_t v35 = *(char **)v6;
          unint64_t v36 = (int *)(v24[4] + 4 * v30);
          uint64_t v37 = (double *)(v24[1] + 8 * v30);
          do
          {
            double v38 = *v37++;
            double v39 = v38;
            uint64_t v40 = *v36++;
            *(double *)&v35[8 * v40] = *(double *)&v35[8 * v40] + v34 * v39;
            --v33;
          }
          while (v33);
        }
      }
      if (v20) {
        goto LABEL_24;
      }
      if ((v13 >> 6) + 1 > (int)v26) {
        int v41 = (v13 >> 6) + 1;
      }
      else {
        int v41 = v26;
      }
      uint64_t v42 = ((uint64_t)v13 >> 6) + 1;
      while (v42 < v27)
      {
        if (v10[v42++])
        {
          int v41 = v42 - 1;
          break;
        }
      }
      if (v41 == v26)
      {
        unint64_t v20 = 0;
        int v21 = -1;
        if (v22 == -1) {
          break;
        }
      }
      else
      {
        unint64_t v20 = v10[v41];
        int v13 = v41 << 6;
LABEL_24:
        int v21 = (__clz(__rbit64(v20)) & 0x3F) + v13;
        v20 &= v20 - 1;
        if (v21 == v22) {
          break;
        }
      }
    }
  }
LABEL_39:
  operations_research::glop::BasisFactorization::RightSolve(*((operations_research::glop::BasisFactorization **)this + 4), v6);
  if ((int)v2 >= 1)
  {
    uint64_t v45 = (double *)*((void *)this + 28);
    uint64_t v46 = (int *)**((void **)this + 2);
    uint64_t v47 = *((void *)this + 5);
    do
    {
      double v48 = *v45++;
      double result = v48;
      uint64_t v49 = *v46++;
      *(double *)(v47 + 8 * v49) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

double operations_research::glop::VariableValues::ComputeMaximumPrimalResidual(operations_research::glop::VariableValues *this)
{
  *((void *)this + 33) = *((void *)this + 32);
  unint64_t v2 = **((int **)this + 1);
  unint64_t v4 = (char *)*((void *)this + 28);
  uint64_t v5 = *((void *)this + 29);
  unint64_t v6 = (char **)((char *)this + 224);
  uint64_t v26 = 0;
  uint64_t v7 = v2 << 32;
  unint64_t v8 = (v5 - (uint64_t)v4) >> 3;
  if (v2 <= v8)
  {
    if (v2 < v8) {
      *((void *)this + 29) = &v4[8 * v2];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)v6, v2 - v8, &v26);
    unint64_t v4 = *v6;
  }
  bzero(v4, v7 >> 29);
  uint64_t v9 = *((void *)this + 1);
  uint64_t v10 = *(unsigned int *)(v9 + 4);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *((void *)this + 5);
    do
    {
      double v13 = *(double *)(v12 + 8 * v11);
      if (v13 != 0.0)
      {
        uint64_t v14 = *(void *)(v9 + 56);
        uint64_t v15 = *(void *)(v14 + 8 * v11);
        uint64_t v16 = *(void *)(v14 + 8 * (v11 + 1));
        BOOL v17 = v16 <= v15;
        uint64_t v18 = v16 - v15;
        if (!v17)
        {
          uint64_t v19 = *v6;
          unint64_t v20 = (int *)(*(void *)(v9 + 32) + 4 * v15);
          int v21 = (double *)(*(void *)(v9 + 8) + 8 * v15);
          do
          {
            double v22 = *v21++;
            double v23 = v22;
            uint64_t v24 = *v20++;
            *(double *)&v19[8 * v24] = *(double *)&v19[8 * v24] + v13 * v23;
            --v18;
          }
          while (v18);
        }
      }
      ++v11;
    }
    while (v11 != v10);
  }
  return operations_research::glop::InfinityNorm((uint64_t)v6);
}

double operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility(operations_research::glop::VariableValues *this)
{
  uint64_t v1 = *(unsigned int *)(*((void *)this + 1) + 4);
  if ((int)v1 < 1) {
    return 0.0;
  }
  unint64_t v2 = (double *)*((void *)this + 5);
  uint64_t v3 = *((void *)this + 3);
  unint64_t v4 = *(double ***)(v3 + 8);
  uint64_t v5 = **(double ***)(v3 + 16);
  unint64_t v6 = *v4;
  double result = 0.0;
  do
  {
    double v8 = *v2++;
    double v9 = v8;
    double v10 = *v5++;
    double v11 = v9 - v10;
    double v12 = *v6++;
    double v13 = v12 - v9;
    if (v11 >= v13) {
      double v13 = v11;
    }
    if (result < v13) {
      double result = v13;
    }
    --v1;
  }
  while (v1);
  return result;
}

double operations_research::glop::VariableValues::ComputeSumOfPrimalInfeasibilities(operations_research::glop::VariableValues *this)
{
  uint64_t v1 = *(unsigned int *)(*((void *)this + 1) + 4);
  if ((int)v1 < 1) {
    return 0.0;
  }
  unint64_t v2 = (float64x2_t *)*((void *)this + 5);
  uint64_t v3 = *((void *)this + 3);
  unint64_t v4 = *(float64x2_t ***)(v3 + 8);
  uint64_t v5 = **(float64x2_t ***)(v3 + 16);
  unint64_t v6 = *v4;
  if (v1 >= 4)
  {
    uint64_t v7 = v1 & 0x7FFFFFFC;
    double v9 = v2 + 1;
    double v10 = v5 + 1;
    double v11 = v6 + 1;
    double result = 0.0;
    uint64_t v12 = v1 & 0xFFFFFFFC;
    do
    {
      float64x2_t v13 = v9[-1];
      float64x2_t v14 = vsubq_f64(v13, v10[-1]);
      float64x2_t v15 = vsubq_f64(*v9, *v10);
      float64x2_t v16 = vsubq_f64(v11[-1], v13);
      float64x2_t v17 = vsubq_f64(*v11, *v9);
      float64x2_t v18 = vmaxnmq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v14), (int8x16_t)v16, (int8x16_t)v14), (float64x2_t)0);
      float64x2_t v19 = vmaxnmq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v17, v15), (int8x16_t)v17, (int8x16_t)v15), (float64x2_t)0);
      double result = result + v18.f64[0] + v18.f64[1] + v19.f64[0] + v19.f64[1];
      v9 += 2;
      v10 += 2;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v7 == v1) {
      return result;
    }
  }
  else
  {
    uint64_t v7 = 0;
    double result = 0.0;
  }
  unint64_t v20 = &v6->f64[v7];
  int v21 = &v5->f64[v7];
  double v22 = &v2->f64[v7];
  uint64_t v23 = v1 - v7;
  do
  {
    double v24 = *v22++;
    double v25 = v24;
    double v26 = *v21++;
    double v27 = v25 - v26;
    double v28 = *v20++;
    double v29 = v28 - v25;
    if (v27 >= v29) {
      double v29 = v27;
    }
    double result = result + fmax(v29, 0.0);
    --v23;
  }
  while (v23);
  return result;
}

double operations_research::glop::VariableValues::UpdateOnPivoting(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  unint64_t v4 = (int *)a2[4];
  if (a2[5] - (uint64_t)v4 <= 0)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = 8 * a3;
    double result = *(double *)(v13 + v14) + a4;
    *(double *)(v13 + v14) = result;
  }
  else
  {
    uint64_t v5 = *a2;
    unint64_t v6 = (unint64_t)(a2[5] - (void)v4) >> 2;
    uint64_t v7 = **(void **)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 40);
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      uint64_t v9 = *v4++;
      uint64_t v10 = 8 * *(int *)(v7 + 4 * v9);
      *(double *)(v8 + v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(double *)(v8 + v10) - *(double *)(v5 + 8 * v9) * a4;
      --v6;
    }
    while (v6);
    uint64_t v11 = 8 * a3;
    double result = *(double *)(v8 + v11) + a4;
    *(double *)(v8 + v11) = result;
  }
  return result;
}

void operations_research::glop::VariableValues::UpdateGivenNonBasicVariables(uint64_t a1, int **a2, char a3)
{
  if (a3)
  {
    uint64_t v5 = (double **)(a1 + 304);
    unint64_t v55 = **(int **)(a1 + 8);
    uint64_t v56 = 0;
    uint64_t v6 = *(void *)(a1 + 304);
    unint64_t v7 = (*(void *)(a1 + 312) - v6) >> 3;
    if (v55 <= v7)
    {
      if (v55 < v7) {
        *(void *)(a1 + 312) = v6 + 8 * v55;
      }
    }
    else
    {
      std::vector<double>::__append(a1 + 304, v55 - v7, &v56);
    }
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(a1 + 304);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    if (*a2 != v12)
    {
      BOOL v13 = 0;
      while (1)
      {
        uint64_t v25 = *v11;
        uint64_t v26 = v25 << 32;
        double v27 = *(double *)(*(void *)(a1 + 40) + 8 * v25);
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((void *)a1, *v11);
        double v28 = *(void **)(a1 + 8);
        double v29 = *(double *)(*(void *)(a1 + 40) + 8 * v25) - v27;
        if (v13) {
          break;
        }
        if (v29 != 0.0)
        {
          uint64_t v30 = v28[7];
          uint64_t v31 = *(void *)(v30 + 8 * v25);
          uint64_t v32 = *(void *)(v30 + ((v26 + 0x100000000) >> 29));
          if (v31 < v32)
          {
            do
            {
              operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add(a1 + 304, *(_DWORD *)(v28[4] + 4 * v31), v29 * *(double *)(v28[1] + 8 * v31));
              ++v31;
            }
            while (v32 != v31);
          }
        }
        uint64_t v33 = *(void *)(a1 + 336);
        uint64_t v34 = *(void *)(a1 + 344);
        if (v33 == v34)
        {
LABEL_12:
          BOOL v13 = 1;
          if (++v11 == v12) {
            goto LABEL_25;
          }
        }
        else
        {
          BOOL v13 = (double)(int)((*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3) * 0.8 < (double)(unint64_t)((v34 - v33) >> 2);
          if (++v11 == v12) {
            goto LABEL_25;
          }
        }
      }
      if (v29 != 0.0)
      {
        uint64_t v14 = v28[7];
        uint64_t v15 = *(void *)(v14 + 8 * v25);
        uint64_t v16 = *(void *)(v14 + ((v26 + 0x100000000) >> 29));
        BOOL v17 = v16 <= v15;
        uint64_t v18 = v16 - v15;
        if (!v17)
        {
          float64x2_t v19 = *v5;
          unint64_t v20 = (int *)(v28[4] + 4 * v15);
          int v21 = (double *)(v28[1] + 8 * v15);
          do
          {
            double v22 = *v21++;
            double v23 = v22;
            uint64_t v24 = *v20++;
            v19[v24] = v19[v24] + v29 * v23;
            --v18;
          }
          while (v18);
        }
      }
      goto LABEL_12;
    }
LABEL_25:
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(a1 + 304);
    uint64_t v35 = *(void *)(a1 + 336);
    uint64_t v36 = *(void *)(a1 + 344);
    if (v35 == v36
      || (double)(int)((*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3) * 0.8 < (double)(unint64_t)((v36 - v35) >> 2))
    {
      operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(a1 + 304);
      *(void *)(a1 + 344) = *(void *)(a1 + 336);
    }
    operations_research::glop::BasisFactorization::RightSolve(*(operations_research::glop::BasisFactorization **)(a1 + 32), (operations_research::glop::ScatteredColumn *)(a1 + 304));
    uint64_t v37 = *(int **)(a1 + 336);
    double v38 = *(int **)(a1 + 344);
    if (v37 == v38)
    {
      uint64_t v46 = v55;
      uint64_t v47 = *v5;
      if ((int)v55 >= 1)
      {
        double v48 = **(int ***)(a1 + 16);
        uint64_t v49 = *(void *)(a1 + 40);
        uint64_t v50 = *v5;
        do
        {
          double v51 = *v50++;
          double v52 = v51;
          uint64_t v53 = *v48++;
          *(double *)(v49 + 8 * v53) = *(double *)(v49 + 8 * v53) - v52;
          --v46;
        }
        while (v46);
      }
      uint64_t v56 = 0;
      unint64_t v54 = (uint64_t)(*(void *)(a1 + 312) - (void)v47) >> 3;
      if (v55 <= v54)
      {
        if (v55 < v54) {
          *(void *)(a1 + 312) = &v47[v55];
        }
      }
      else
      {
        std::vector<double>::__append(a1 + 304, v55 - v54, &v56);
        uint64_t v47 = *v5;
      }
      bzero(v47, 8 * (int)v55);
      operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation((operations_research::glop::VariableValues *)a1);
    }
    else
    {
      unint64_t v39 = (char *)v38 - (char *)v37;
      if ((char *)v38 - (char *)v37 >= 1)
      {
        uint64_t v40 = *v5;
        uint64_t v41 = v39 >> 2;
        uint64_t v42 = **(void **)(a1 + 16);
        uint64_t v43 = *(void *)(a1 + 40);
        if (v41 <= 1) {
          uint64_t v41 = 1;
        }
        do
        {
          uint64_t v44 = *v37++;
          uint64_t v45 = 8 * *(int *)(v42 + 4 * v44);
          *(double *)(v43 + v45) = *(double *)(v43 + v45) - v40[v44];
          v40[v44] = 0.0;
          --v41;
        }
        while (v41);
      }
      operations_research::glop::VariableValues::UpdatePrimalInfeasibilityInformation((operations_research::glop::VariableValues *)a1, (int **)(a1 + 336));
      *(void *)(a1 + 344) = *(void *)(a1 + 336);
    }
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        int v10 = *v8++;
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((void *)a1, v10);
      }
      while (v8 != v9);
    }
  }
}

void operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation(operations_research::glop::VariableValues *this)
{
  unint64_t v2 = **((int **)this + 1);
  uint64_t v25 = 0;
  uint64_t v3 = *((void *)this + 8);
  unint64_t v4 = (void *)((char *)this + 64);
  unint64_t v5 = (*((void *)this + 9) - v3) >> 3;
  if (v2 <= v5)
  {
    if (v2 < v5) {
      *((void *)this + 9) = v3 + 8 * v2;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 64, v2 - v5, &v25);
  }
  int v6 = v2 & ~((int)v2 >> 31);
  uint64_t v8 = (void **)((char *)this + 96);
  unint64_t v7 = (char *)*((void *)this + 12);
  *((_DWORD *)this + 22) = v6;
  unint64_t v9 = (v6 + 63) >> 6;
  uint64_t v10 = *((void *)this + 13) - (void)v7;
  unint64_t v11 = v10 >> 3;
  uint64_t v25 = 0;
  if (v9 <= v10 >> 3)
  {
    if (v9 < v10 >> 3) {
      *((void *)this + 13) = &v7[8 * v9];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 96, v9 - (v10 >> 3), &v25);
    unint64_t v7 = (char *)*v8;
  }
  if (v9 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v9;
  }
  bzero(v7, 8 * v12);
  if ((int)v2 >= 1)
  {
    unint64_t v13 = 0;
    double v14 = *(double *)(*(void *)this + 72);
    uint64_t v15 = *((void *)this + 3);
    uint64_t v16 = **((void **)this + 2);
    uint64_t v17 = *((void *)this + 5);
    uint64_t v18 = *(uint64_t **)(v15 + 8);
    uint64_t v19 = **(void **)(v15 + 16);
    uint64_t v20 = *v18;
    do
    {
      uint64_t v21 = 8 * *(int *)(v16 + 4 * v13);
      double v22 = *(double *)(v17 + v21);
      double v23 = v22 - *(double *)(v19 + v21);
      double v24 = *(double *)(v20 + v21) - v22;
      if (v23 >= v24) {
        double v24 = v23;
      }
      if (v24 > v14)
      {
        *(double *)(*v4 + 8 * v13) = v24 * v24;
        *(void *)((char *)*v8 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      }
      ++v13;
    }
    while (v2 != v13);
  }
}

void operations_research::glop::VariableValues::UpdatePrimalInfeasibilityInformation(operations_research::glop::VariableValues *this, int **a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (**((_DWORD **)this + 1) == ((unint64_t)(*((void *)this + 9) - v2) >> 3))
  {
    uint64_t v3 = *a2;
    unint64_t v4 = a2[1];
    if (*a2 != v4)
    {
      double v5 = *(double *)(*(void *)this + 72);
      uint64_t v6 = *((void *)this + 3);
      uint64_t v7 = **((void **)this + 2);
      uint64_t v8 = *((void *)this + 5);
      unint64_t v9 = *(uint64_t **)(v6 + 8);
      uint64_t v10 = **(void **)(v6 + 16);
      uint64_t v11 = *v9;
      do
      {
        while (1)
        {
          unint64_t v12 = *v3;
          int v13 = *v3;
          uint64_t v14 = 8 * *(int *)(v7 + 4 * v12);
          double v15 = *(double *)(v8 + v14);
          double v16 = v15 - *(double *)(v10 + v14);
          double v17 = *(double *)(v11 + v14) - v15;
          if (v16 >= v17) {
            double v17 = v16;
          }
          if (v17 > v5) {
            break;
          }
          *(void *)(*((void *)this + 12) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v13);
          if (++v3 == v4) {
            return;
          }
        }
        *(double *)(v2 + 8 * v12) = v17 * v17;
        *(void *)(*((void *)this + 12) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        ++v3;
      }
      while (v3 != v4);
    }
  }
  else
  {
    operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation(this);
  }
}

uint64_t operations_research::glop::VariableValues::GetPrimalSquaredInfeasibilities(operations_research::glop::VariableValues *this)
{
  return (uint64_t)this + 64;
}

uint64_t operations_research::glop::VariableValues::GetPrimalInfeasiblePositions(operations_research::glop::VariableValues *this)
{
  return (uint64_t)this + 88;
}

double operations_research::glop::VariablesInfo::VariablesInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 72;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a1 + 128;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = a1 + 184;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(_DWORD *)(a1 + 224) = -1;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 240;
  *(void *)(a1 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = -1;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 328) = a1 + 296;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 352;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 1;
  return result;
}

void operations_research::glop::VariablesInfo::InitializeAndComputeType(operations_research::glop::VariablesInfo *this)
{
  unint64_t v2 = *(int *)(*(void *)this + 4);
  int v3 = v2 & ~((int)v2 >> 31);
  *((_DWORD *)this + 18) = v3;
  double v5 = (char **)((char *)this + 80);
  unint64_t v4 = (char *)*((void *)this + 10);
  unint64_t v6 = (v3 + 63) >> 6;
  uint64_t v7 = *((void *)this + 11) - (void)v4;
  unint64_t v8 = v7 >> 3;
  uint64_t v94 = 0;
  if (v6 <= v7 >> 3)
  {
    if (v6 < v7 >> 3) {
      *((void *)this + 11) = &v4[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v6 - (v7 >> 3), &v94);
    unint64_t v4 = *v5;
  }
  if (v6 >= v8) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = (v3 + 63) >> 6;
  }
  bzero(v4, 8 * v9);
  uint64_t v10 = (char *)*((void *)this + 17);
  *((_DWORD *)this + 32) = v3;
  uint64_t v11 = *((void *)this + 18) - (void)v10;
  unint64_t v12 = v11 >> 3;
  uint64_t v94 = 0;
  if (v6 <= v11 >> 3)
  {
    if (v6 < v11 >> 3) {
      *((void *)this + 18) = &v10[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 136, v6 - (v11 >> 3), &v94);
    uint64_t v10 = (char *)*((void *)this + 17);
  }
  if (v6 >= v12) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = (v3 + 63) >> 6;
  }
  bzero(v10, 8 * v13);
  uint64_t v14 = (char *)*((void *)this + 31);
  *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v3;
  uint64_t v15 = *((void *)this + 32) - (void)v14;
  unint64_t v16 = v15 >> 3;
  uint64_t v94 = 0;
  if (v6 <= v15 >> 3)
  {
    if (v6 < v15 >> 3) {
      *((void *)this + 32) = &v14[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 248, v6 - (v15 >> 3), &v94);
    uint64_t v14 = (char *)*((void *)this + 31);
  }
  if (v6 >= v16) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = (v3 + 63) >> 6;
  }
  bzero(v14, 8 * v17);
  *((_DWORD *)this + 74) = v3;
  uint64_t v18 = (char *)*((void *)this + 38);
  uint64_t v19 = *((void *)this + 39) - (void)v18;
  unint64_t v20 = v19 >> 3;
  uint64_t v94 = 0;
  if (v6 <= v19 >> 3)
  {
    if (v6 < v19 >> 3) {
      *((void *)this + 39) = &v18[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 304, v6 - (v19 >> 3), &v94);
    uint64_t v18 = (char *)*((void *)this + 38);
  }
  if (v6 >= v20) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = (v3 + 63) >> 6;
  }
  bzero(v18, 8 * v21);
  *((_DWORD *)this + 88) = v3;
  double v22 = (char *)*((void *)this + 45);
  uint64_t v23 = *((void *)this + 46) - (void)v22;
  unint64_t v24 = v23 >> 3;
  uint64_t v94 = 0;
  if (v6 <= v23 >> 3)
  {
    if (v6 < v23 >> 3) {
      *((void *)this + 46) = &v22[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 360, v6 - (v23 >> 3), &v94);
    double v22 = (char *)*((void *)this + 45);
  }
  if (v6 >= v24) {
    unint64_t v25 = v24;
  }
  else {
    unint64_t v25 = (v3 + 63) >> 6;
  }
  bzero(v22, 8 * v25);
  uint64_t v26 = (char *)*((void *)this + 24);
  *((void *)this + 51) = 0;
  *((unsigned char *)this + 416) = 1;
  *((_DWORD *)this + 46) = v3;
  uint64_t v27 = *((void *)this + 25) - (void)v26;
  unint64_t v28 = v27 >> 3;
  uint64_t v94 = 0;
  if (v6 <= v27 >> 3)
  {
    if (v6 < v27 >> 3) {
      *((void *)this + 25) = &v26[8 * v6];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 192, v6 - (v27 >> 3), &v94);
    uint64_t v26 = (char *)*((void *)this + 24);
  }
  if (v6 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = v6;
  }
  bzero(v26, 8 * v29);
  uint64_t v30 = (unsigned char *)*((void *)this + 3);
  uint64_t v31 = (unsigned char *)*((void *)this + 4);
  unint64_t v32 = v31 - v30;
  if (v2 > v31 - v30)
  {
    uint64_t v33 = *((void *)this + 5);
    if (v33 - (uint64_t)v31 >= v2 - (v31 - v30))
    {
      memset(*((void **)this + 4), 4, v2 - (v31 - v30));
      *((void *)this + 4) = &v30[v2];
      goto LABEL_73;
    }
    if ((v2 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v34 = v33 - (void)v30;
    uint64_t v35 = 2 * v34;
    if (2 * v34 <= v2) {
      uint64_t v35 = v2;
    }
    if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v36 = v35;
    }
    uint64_t v37 = (char *)operator new(v36);
    double v38 = &v37[v32];
    memset(&v37[v32], 4, v2 - (v31 - v30));
    if (v31 == v30) {
      goto LABEL_71;
    }
    if (v32 >= 8 && (unint64_t)(v30 - v37) >= 0x20)
    {
      if (v32 < 0x20)
      {
        unint64_t v39 = 0;
        goto LABEL_63;
      }
      unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v40 = (long long *)(v31 - 16);
      uint64_t v41 = &v37[v31 - 16 - v30];
      unint64_t v42 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v43 = *v40;
        *((_OWORD *)v41 - 1) = *(v40 - 1);
        *(_OWORD *)uint64_t v41 = v43;
        v41 -= 32;
        v40 -= 2;
        v42 -= 32;
      }
      while (v42);
      if (v32 == v39) {
        goto LABEL_70;
      }
      if ((v32 & 0x18) != 0)
      {
LABEL_63:
        v38 -= v32 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v44 = &v31[-v39 - 8];
        int64_t v45 = v44 - v30;
        unint64_t v46 = v39 - (v32 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v47 = *(void *)v44;
          v44 -= 8;
          *(void *)&v37[v45] = v47;
          v45 -= 8;
          v46 += 8;
        }
        while (v46);
        v31 -= v32 & 0xFFFFFFFFFFFFFFF8;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_70;
        }
        goto LABEL_68;
      }
      v38 -= v39;
      v31 -= v39;
    }
LABEL_68:
    double v48 = v38 - 1;
    do
    {
      char v49 = *--v31;
      *v48-- = v49;
    }
    while (v31 != v30);
LABEL_70:
    double v38 = v37;
LABEL_71:
    *((void *)this + 3) = v38;
    *((void *)this + 4) = &v37[v2];
    *((void *)this + 5) = &v37[v36];
    if (v30) {
      operator delete(v30);
    }
    goto LABEL_73;
  }
  if (v2 < v31 - v30) {
    *((void *)this + 4) = &v30[v2];
  }
LABEL_73:
  uint64_t v50 = (unsigned char *)*((void *)this + 6);
  double v51 = (unsigned char *)*((void *)this + 7);
  unint64_t v52 = v51 - v50;
  if (v2 > v51 - v50)
  {
    uint64_t v53 = *((void *)this + 8);
    if (v53 - (uint64_t)v51 >= v2 - (v51 - v50))
    {
      bzero(*((void **)this + 7), v2 - (v51 - v50));
      *((void *)this + 7) = &v50[v2];
      goto LABEL_103;
    }
    if ((v2 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = v53 - (void)v50;
    uint64_t v55 = 2 * v54;
    if (2 * v54 <= v2) {
      uint64_t v55 = v2;
    }
    if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v56 = v55;
    }
    uint64_t v57 = (char *)operator new(v56);
    unint64_t v58 = &v57[v52];
    bzero(&v57[v52], v2 - (v51 - v50));
    if (v51 == v50) {
      goto LABEL_101;
    }
    if (v52 >= 8 && (unint64_t)(v50 - v57) >= 0x20)
    {
      if (v52 < 0x20)
      {
        unint64_t v59 = 0;
        goto LABEL_93;
      }
      unint64_t v59 = v52 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v60 = (long long *)(v51 - 16);
      long long v61 = &v57[v51 - 16 - v50];
      unint64_t v62 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v63 = *v60;
        *((_OWORD *)v61 - 1) = *(v60 - 1);
        *(_OWORD *)long long v61 = v63;
        v61 -= 32;
        v60 -= 2;
        v62 -= 32;
      }
      while (v62);
      if (v52 == v59) {
        goto LABEL_100;
      }
      if ((v52 & 0x18) != 0)
      {
LABEL_93:
        v58 -= v52 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v64 = &v51[-v59 - 8];
        int64_t v65 = v64 - v50;
        unint64_t v66 = v59 - (v52 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v67 = *(void *)v64;
          v64 -= 8;
          *(void *)&v57[v65] = v67;
          v65 -= 8;
          v66 += 8;
        }
        while (v66);
        v51 -= v52 & 0xFFFFFFFFFFFFFFF8;
        if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_100;
        }
        goto LABEL_98;
      }
      v58 -= v59;
      v51 -= v59;
    }
LABEL_98:
    uint64_t v68 = v58 - 1;
    do
    {
      char v69 = *--v51;
      *v68-- = v69;
    }
    while (v51 != v50);
LABEL_100:
    unint64_t v58 = v57;
LABEL_101:
    *((void *)this + 6) = v58;
    *((void *)this + 7) = &v57[v2];
    *((void *)this + 8) = &v57[v56];
    if (v50) {
      operator delete(v50);
    }
    goto LABEL_103;
  }
  if (v2 < v51 - v50) {
    *((void *)this + 7) = &v50[v2];
  }
LABEL_103:
  if ((int)v2 < 1) {
    return;
  }
  uint64_t v70 = **((void **)this + 1);
  uint64_t v71 = **((void **)this + 2);
  uint64_t v72 = *((void *)this + 6);
  if (v2 >= 8)
  {
    float64x2_t v74 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    uint64_t v73 = v2 & 0xFFFFFFF8;
    float64x2_t v75 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    uint64_t v76 = v73;
    uint64_t v77 = (int8x8_t *)*((void *)this + 6);
    uint64_t v78 = (float64x2_t *)**((void **)this + 2);
    long long v79 = (float64x2_t *)**((void **)this + 1);
    do
    {
      float64x2_t v80 = v79[1];
      float64x2_t v81 = v79[2];
      float64x2_t v82 = v79[3];
      float64x2_t v83 = v78[1];
      float64x2_t v84 = v78[2];
      float64x2_t v85 = v78[3];
      int8x8_t v86 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v78, v75), (int32x4_t)vceqq_f64(v83, v75)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v84, v75), (int32x4_t)vceqq_f64(v85, v75)))));
      int8x8_t v87 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v79, v74), (int32x4_t)vceqq_f64(v80, v74)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v81, v74), (int32x4_t)vceqq_f64(v82, v74)))));
      *v77++ = vorr_s8(vand_s8(vbsl_s8(v87, vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v79, *v78), (int32x4_t)vceqq_f64(v80, v83)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v81, v84), (int32x4_t)vceqq_f64(v82, v85)))), (int8x8_t)0x404040404040404, (int8x8_t)0x303030303030303), (int8x8_t)0x202020202020202), v86), vand_s8(vbic_s8(v87, v86), (int8x8_t)0x101010101010101));
      v79 += 4;
      v78 += 4;
      v76 -= 8;
    }
    while (v76);
    if (v73 == v2) {
      return;
    }
  }
  else
  {
    uint64_t v73 = 0;
  }
  int v88 = (char *)(v72 + v73);
  uint64_t v89 = (double *)(v71 + 8 * v73);
  uint64_t v90 = (double *)(v70 + 8 * v73);
  uint64_t v91 = v2 - v73;
  do
  {
    double v93 = *v89;
    if (*v90 == -INFINITY)
    {
      char v92 = 2 * (v93 != INFINITY);
    }
    else if (v93 == INFINITY)
    {
      char v92 = 1;
    }
    else if (*v90 == v93)
    {
      char v92 = 4;
    }
    else
    {
      char v92 = 3;
    }
    *v88++ = v92;
    ++v89;
    ++v90;
    --v91;
  }
  while (v91);
}

uint64_t operations_research::glop::VariablesInfo::MakeBoxedVariableRelevant(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 416) == a2) {
    return this;
  }
  *(unsigned char *)(this + 416) = a2;
  unint64_t v2 = *(unint64_t **)(this + 360);
  int v3 = *(unint64_t **)(this + 368);
  if (!a2)
  {
    if (v2 != v3)
    {
      unint64_t v6 = *v2;
      if (*v2)
      {
        int v7 = 0;
        goto LABEL_55;
      }
      unint64_t v17 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
      uint64_t v18 = (int)(v3 - v2);
      if ((int)v17 <= 1) {
        int v19 = 1;
      }
      else {
        int v19 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
      }
      if (v18 <= 1) {
        uint64_t v18 = 1;
      }
      uint64_t v20 = v18 - 1;
      while (v20 != v6)
      {
        int v21 = v6 + 1;
        if (v2[++v6])
        {
          int v19 = v21;
          break;
        }
      }
      if (v19 != v17)
      {
        unint64_t v6 = v2[v19];
        int v7 = v19 << 6;
LABEL_55:
        int v24 = __clz(__rbit64(v6)) & 0x3F | v7;
        unint64_t v23 = (v6 - 1) & v6;
        int v25 = *(_DWORD *)(this + 392);
        if (v24 == v25) {
          return this;
        }
LABEL_56:
        uint64_t v44 = (char *)v3 - (char *)v2;
        uint64_t v45 = *(void *)(this + 192);
        unint64_t v46 = (unint64_t)v44 >> 3;
        uint64_t v47 = (int)(v44 >> 3);
        while (1)
        {
          unint64_t v48 = (unint64_t)v24 >> 6;
          uint64_t v49 = *(void *)(v45 + 8 * v48);
          if ((v49 & (1 << v24)) != 0)
          {
            *(void *)(v45 + 8 * v48) = v49 & ~(1 << v24);
            *(void *)(this + 408) += *(void *)(*(void *)(*(void *)this + 56) + 8 * v24)
                                     - *(void *)(*(void *)(*(void *)this + 56)
                                                 + ((uint64_t)(((unint64_t)v24 << 32) + 0x100000000) >> 29));
          }
          if (v23) {
            goto LABEL_58;
          }
          if ((v7 >> 6) + 1 > (int)v46) {
            int v50 = (v7 >> 6) + 1;
          }
          else {
            int v50 = v46;
          }
          uint64_t v51 = ((uint64_t)v7 >> 6) + 1;
          while (v51 < v47)
          {
            if (v2[v51++])
            {
              int v50 = v51 - 1;
              break;
            }
          }
          if (v50 == v46)
          {
            unint64_t v23 = 0;
            int v24 = -1;
            if (v25 == -1) {
              return this;
            }
          }
          else
          {
            unint64_t v23 = v2[v50];
            int v7 = v50 << 6;
LABEL_58:
            int v24 = (__clz(__rbit64(v23)) & 0x3F) + v7;
            v23 &= v23 - 1;
            if (v24 == v25) {
              return this;
            }
          }
        }
      }
    }
    int v7 = 0;
    unint64_t v23 = 0;
    int v24 = -1;
    int v25 = *(_DWORD *)(this + 392);
    if (v25 == -1) {
      return this;
    }
    goto LABEL_56;
  }
  if (v2 != v3)
  {
    unint64_t v4 = *v2;
    if (*v2)
    {
      int v5 = 0;
      goto LABEL_34;
    }
    unint64_t v8 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
    uint64_t v9 = (int)(v3 - v2);
    if ((int)v8 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
    }
    if (v9 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = v9 - 1;
    while (v11 != v4)
    {
      int v12 = v4 + 1;
      if (v2[++v4])
      {
        int v10 = v12;
        break;
      }
    }
    if (v10 != v8)
    {
      unint64_t v4 = v2[v10];
      int v5 = v10 << 6;
LABEL_34:
      uint64_t v15 = __clz(__rbit64(v4)) & 0x3F | v5;
      unint64_t v14 = (v4 - 1) & v4;
      int v16 = *(_DWORD *)(this + 392);
      if (v15 != v16) {
        goto LABEL_35;
      }
      return this;
    }
  }
  unint64_t v14 = 0;
  int v5 = 0;
  uint64_t v15 = 0xFFFFFFFFLL;
  int v16 = *(_DWORD *)(this + 392);
  if (v16 != -1)
  {
LABEL_35:
    uint64_t v26 = *(void *)(this + 48);
    uint64_t v27 = (char *)v3 - (char *)v2;
    uint64_t v28 = *(void *)(this + 192);
    unint64_t v29 = (unint64_t)v27 >> 3;
    uint64_t v30 = (int)(v27 >> 3);
    while (1)
    {
      unint64_t v35 = (int)v15;
      int v36 = *(unsigned __int8 *)(v26 + (int)v15);
      uint64_t v37 = *(void *)(v28 + 8 * ((unint64_t)(int)v15 >> 6));
      uint64_t v38 = 1 << v15;
      if ((v36 != 4) != ((v37 & (1 << v15)) != 0))
      {
        uint64_t v39 = v15 << 32;
        if (v36 == 4)
        {
          uint64_t v31 = v37 & ~v38;
          uint64_t v32 = *(void *)(*(void *)this + 56);
          uint64_t v33 = (void *)(v32 + ((v39 + 0x100000000) >> 29));
          unint64_t v34 = (void *)(v32 + 8 * v35);
        }
        else
        {
          uint64_t v31 = v37 | v38;
          uint64_t v40 = *(void *)(*(void *)this + 56);
          unint64_t v34 = (void *)(v40 + ((v39 + 0x100000000) >> 29));
          uint64_t v33 = (void *)(v40 + 8 * v35);
        }
        *(void *)(v28 + 8 * (v35 >> 6)) = v31;
        *(void *)(this + 408) += *v34 - *v33;
      }
      if (v14) {
        goto LABEL_39;
      }
      if ((v5 >> 6) + 1 > (int)v29) {
        int v41 = (v5 >> 6) + 1;
      }
      else {
        int v41 = v29;
      }
      uint64_t v42 = ((uint64_t)v5 >> 6) + 1;
      while (v42 < v30)
      {
        if (v2[v42++])
        {
          int v41 = v42 - 1;
          break;
        }
      }
      if (v41 == v29)
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0xFFFFFFFFLL;
        if (v16 == -1) {
          return this;
        }
      }
      else
      {
        unint64_t v14 = v2[v41];
        int v5 = v41 << 6;
LABEL_39:
        uint64_t v15 = (__clz(__rbit64(v14)) & 0x3F) + v5;
        v14 &= v14 - 1;
        if (v15 == v16) {
          return this;
        }
      }
    }
  }
  return this;
}

void *operations_research::glop::VariablesInfo::Update(void *result, uint64_t a2, int a3)
{
  if (a3) {
    return (void *)operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)result, a2, a3);
  }
  *(unsigned char *)(result[3] + (int)a2) = 0;
  unint64_t v3 = (unint64_t)(int)a2 >> 6;
  uint64_t v4 = 8 * v3;
  *(void *)(result[31] + v4) = *(void *)(result[31] + 8 * v3) | (1 << a2);
  *(void *)(result[38] + v4) = *(void *)(result[38] + 8 * v3) & ~(1 << a2);
  *(void *)(result[10] + v4) = *(void *)(result[10] + 8 * v3) & ~(1 << a2);
  *(void *)(result[17] + v4) = *(void *)(result[17] + 8 * v3) & ~(1 << a2);
  *(void *)(result[45] + v4) = *(void *)(result[45] + 8 * v3) & ~(1 << a2);
  uint64_t v5 = result[24];
  uint64_t v6 = *(void *)(v5 + 8 * v3);
  if ((v6 & (1 << a2)) != 0)
  {
    *(void *)(v5 + 8 * v3) = v6 & ~(1 << a2);
    result[51] += *(void *)(*(void *)(*result + 56) + 8 * (int)a2)
                - *(void *)(*(void *)(*result + 56) + (((a2 << 32) + 0x100000000) >> 29));
  }
  return result;
}

void *operations_research::glop::VariablesInfo::UpdateToBasicStatus(void *result, uint64_t a2)
{
  *(unsigned char *)(result[3] + (int)a2) = 0;
  unint64_t v2 = (unint64_t)(int)a2 >> 6;
  uint64_t v3 = 8 * v2;
  *(void *)(result[31] + v3) = *(void *)(result[31] + 8 * v2) | (1 << a2);
  *(void *)(result[38] + v3) = *(void *)(result[38] + 8 * v2) & ~(1 << a2);
  *(void *)(result[10] + v3) = *(void *)(result[10] + 8 * v2) & ~(1 << a2);
  *(void *)(result[17] + v3) = *(void *)(result[17] + 8 * v2) & ~(1 << a2);
  *(void *)(result[45] + v3) = *(void *)(result[45] + 8 * v2) & ~(1 << a2);
  uint64_t v4 = result[24];
  uint64_t v5 = *(void *)(v4 + 8 * v2);
  if ((v5 & (1 << a2)) != 0)
  {
    *(void *)(v4 + 8 * v2) = v5 & ~(1 << a2);
    result[51] += *(void *)(*(void *)(*result + 56) + 8 * (int)a2)
                - *(void *)(*(void *)(*result + 56) + (((a2 << 32) + 0x100000000) >> 29));
  }
  return result;
}

uint64_t operations_research::glop::VariablesInfo::UpdateToNonBasicStatus(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = (int)a2;
  *(unsigned char *)(*(void *)(result + 24) + (int)a2) = a3;
  uint64_t v4 = 1 << a2;
  uint64_t v5 = ~(1 << a2);
  unint64_t v6 = (unint64_t)(int)a2 >> 6;
  uint64_t v7 = 8 * v6;
  *(void *)(*(void *)(result + 248) + v7) = *(void *)(*(void *)(result + 248) + 8 * v6) & v5;
  *(void *)(*(void *)(result + 304) + v7) = *(void *)(*(void *)(result + 304) + 8 * v6) | (1 << a2);
  if (a3 == 4 || a3 == 2)
  {
    uint64_t v8 = *(void *)(result + 80);
    uint64_t v9 = *(void *)(v8 + 8 * v6) | v4;
  }
  else
  {
    uint64_t v8 = *(void *)(result + 80);
    uint64_t v9 = *(void *)(v8 + 8 * v6) & v5;
  }
  *(void *)(v8 + 8 * v6) = v9;
  uint64_t v10 = a2 << 32;
  uint64_t v11 = *(void *)(result + 136);
  uint64_t v12 = *(void *)(v11 + 8 * v6);
  uint64_t v13 = v12 | v4;
  uint64_t v14 = v12 & v5;
  if (a3 - 3 >= 2) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v13;
  }
  *(void *)(v11 + 8 * v6) = v15;
  int v16 = *(unsigned __int8 *)(*(void *)(result + 48) + v3);
  uint64_t v17 = *(void *)(result + 360);
  uint64_t v18 = *(void *)(v17 + 8 * v6);
  uint64_t v19 = v18 | v4;
  uint64_t v20 = v18 & v5;
  if (v16 == 3) {
    uint64_t v20 = v19;
  }
  *(void *)(v17 + 8 * v6) = v20;
  if (a3 == 1)
  {
    int v21 = (uint64_t *)(*(void *)(result + 192) + 8 * v6);
    uint64_t v22 = *v21;
    if ((*v21 & v4) == 0) {
      return result;
    }
    goto LABEL_22;
  }
  BOOL v24 = v16 != 3 || *(unsigned char *)(result + 416) != 0;
  int v21 = (uint64_t *)(*(void *)(result + 192) + 8 * v6);
  uint64_t v22 = *v21;
  if (v24 != ((*v21 & v4) != 0))
  {
    if (v24)
    {
      uint64_t *v21 = v22 | v4;
      uint64_t v25 = *(void *)(*(void *)result + 56);
      uint64_t v26 = (void *)(v25 + ((v10 + 0x100000000) >> 29));
      uint64_t v27 = (void *)(v25 + 8 * v3);
LABEL_23:
      *(void *)(result + 408) += *v26 - *v27;
      return result;
    }
LABEL_22:
    uint64_t *v21 = v22 & v5;
    uint64_t v28 = v10 + 0x100000000;
    uint64_t v29 = *(void *)(*(void *)result + 56);
    uint64_t v27 = (void *)(v29 + (v28 >> 29));
    uint64_t v26 = (void *)(v29 + 8 * v3);
    goto LABEL_23;
  }
  return result;
}

uint64_t operations_research::glop::VariablesInfo::GetTypeRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 48;
}

uint64_t operations_research::glop::VariablesInfo::GetStatusRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 24;
}

uint64_t operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 72;
}

uint64_t operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 128;
}

uint64_t operations_research::glop::VariablesInfo::GetIsRelevantBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 184;
}

uint64_t operations_research::glop::VariablesInfo::GetIsBasicBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 240;
}

uint64_t operations_research::glop::VariablesInfo::GetNotBasicBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 296;
}

uint64_t operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 352;
}

uint64_t operations_research::glop::VariablesInfo::GetNumEntriesInRelevantColumns(operations_research::glop::VariablesInfo *this)
{
  return *((void *)this + 51);
}

operations_research::glop::LinearProgram *operations_research::glop::LinearProgram::LinearProgram(operations_research::glop::LinearProgram *this)
{
  uint64_t v2 = operations_research::glop::SparseMatrix::SparseMatrix((uint64_t)this);
  operations_research::glop::SparseMatrix::SparseMatrix(v2 + 32);
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((void *)this + 41) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 54) = 0x3FF0000000000000;
  *((_DWORD *)this + 11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 16843008;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 118) = -1;
  *((unsigned char *)this + 476) = 1;
  return this;
}

void sub_23CB98D28(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operations_research::glop::LinearProgram::LinearProgram((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::LinearProgram::Clear(operations_research::glop::LinearProgram *this)
{
  operations_research::glop::SparseMatrix::Clear(this);
  operations_research::glop::SparseMatrix::Clear((void *)this + 4);
  *((void *)this + 9) = *((void *)this + 8);
  *((void *)this + 12) = *((void *)this + 11);
  uint64_t v2 = *((void *)this + 14);
  for (uint64_t i = *((void *)this + 15); i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *((void *)this + 15) = v2;
  *((void *)this + 18) = *((void *)this + 17);
  *((void *)this + 21) = *((void *)this + 20);
  *((void *)this + 24) = *((void *)this + 23);
  *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *((void *)this + 29);
  *((void *)this + 33) = *((void *)this + 32);
  uint64_t v4 = *((void *)this + 26);
  for (uint64_t j = *((void *)this + 27); j != v4; j -= 24)
  {
    if (*(char *)(j - 1) < 0) {
      operator delete(*(void **)(j - 24));
    }
  }
  *((void *)this + 27) = v4;
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>>>::clear((uint64_t)this + 376);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>>>::clear((uint64_t)this + 328);
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0x3FF0000000000000;
  *((_DWORD *)this + 11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 16843008;
  if (*((char *)this + 471) < 0)
  {
    **((unsigned char **)this + 56) = 0;
    *((void *)this + 57) = 0;
  }
  else
  {
    *((unsigned char *)this + 448) = 0;
    *((unsigned char *)this + 471) = 0;
  }
  *((_DWORD *)this + 118) = -1;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>>>::clear(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0x80)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v4) & 0x80000000) == 0)
      {
        uint64_t v6 = *v5 + v3;
        if (*(char *)(v6 + 23) < 0)
        {
          operator delete(*(void **)v6);
          unint64_t v2 = *(void *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    unint64_t v2 = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *uint64_t v5 = 0;
LABEL_14:
    uint64_t v10 = *(unint64_t **)(a1 + 32);
    if (!v10) {
      return;
    }
LABEL_19:
    v10[1] = 0;
    *uint64_t v10 = v2;
    v10[4] = 0;
    v10[2] = 0;
    return;
  }
  if (!v2) {
    goto LABEL_14;
  }
  uint64_t v7 = 0;
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((*(char *)(*(void *)a1 + i) & 0x80000000) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 8) + v7;
      if (*(char *)(v9 + 23) < 0)
      {
        operator delete(*(void **)v9);
        unint64_t v2 = *(void *)(a1 + 24);
      }
    }
    v7 += 32;
  }
  *(void *)(a1 + 16) = 0;
  memset(*(void **)a1, 128, v2 + 8);
  *(unsigned char *)(*(void *)a1 + *(void *)(a1 + 24)) = -1;
  unint64_t v2 = *(void *)(a1 + 24);
  uint64_t v11 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v11 = 6;
  }
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v11 - *(void *)(a1 + 16);
  uint64_t v10 = *(unint64_t **)(a1 + 32);
  if (v10) {
    goto LABEL_19;
  }
}

uint64_t operations_research::glop::LinearProgram::CreateNewVariable(operations_research::glop::LinearProgram *this)
{
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 136, __p);
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 160, __p);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 184, &operations_research::glop::kInfinity);
  LODWORD(__p[0]) = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)this + 232, __p);
  HIBYTE(v8) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v2 = *((void *)this + 27);
  if (v2 >= *((void *)this + 28))
  {
    uint64_t v4 = std::vector<std::string>::__push_back_slow_path<std::string>((char **)this + 26, (uint64_t)__p);
    int v5 = SHIBYTE(v8);
    *((void *)this + 27) = v4;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v3 = *(_OWORD *)__p;
    *(void *)(v2 + 16) = v8;
    *(_OWORD *)unint64_t v2 = v3;
    *((void *)this + 27) = v2 + 24;
  }
  *((unsigned char *)this + 442) = 0;
  return operations_research::glop::SparseMatrix::AppendEmptyColumn(this);
}

void sub_23CB99088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(uint64_t a1, void *a2)
{
  int v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)int v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
}

void gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(uint64_t a1, _DWORD *a2)
{
  int v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v10];
    *uint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v18];
      uint64_t v15 = (_DWORD *)((char *)v15 - v18);
      uint64_t v19 = &v14[4 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)int v5 = *a2;
    uint64_t v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t operations_research::glop::LinearProgram::CreateNewSlackVariable(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  double v14 = a5;
  double v15 = a4;
  uint64_t v13 = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 136, &v13);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 160, &v15);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 184, &v14);
  if (a2) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  LODWORD(v13) = v8;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 232, &v13);
  unint64_t v9 = *(void *)(a1 + 216);
  if (v9 >= *(void *)(a1 + 224))
  {
    unint64_t v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a1 + 208), a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 216), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)a3;
      *(void *)(v9 + 16) = *(void *)(a3 + 16);
      *(_OWORD *)unint64_t v9 = v10;
    }
    unint64_t v11 = (std::string *)(v9 + 24);
    *(void *)(a1 + 216) = v9 + 24;
  }
  *(void *)(a1 + 216) = v11;
  *(unsigned char *)(a1 + 442) = 0;
  return operations_research::glop::SparseMatrix::AppendEmptyColumn((operations_research::glop::SparseMatrix *)a1);
}

void sub_23CB99448(_Unwind_Exception *a1)
{
  *(void *)(v1 + 216) = v2;
  _Unwind_Resume(a1);
}

unint64_t operations_research::glop::LinearProgram::CreateNewConstraint(operations_research::glop::LinearProgram *this)
{
  uint64_t v2 = (char **)((char *)this + 112);
  uint64_t v3 = (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 3;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3;
  operations_research::glop::SparseMatrix::SetNumRows((uint64_t)this, -1431655765 * v3 + 1);
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 64, __p);
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 88, __p);
  HIBYTE(v11) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v5 = *((void *)this + 15);
  if (v5 >= *((void *)this + 16))
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string>(v2, (uint64_t)__p);
    int v8 = SHIBYTE(v11);
    *((void *)this + 15) = v7;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 16) = v11;
    *(_OWORD *)unint64_t v5 = v6;
    *((void *)this + 15) = v5 + 24;
  }
  *((unsigned char *)this + 442) = 0;
  return v4;
}

void sub_23CB9951C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::LinearProgram::SetVariableType(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 232);
  BOOL v4 = (*(_DWORD *)(v3 + 4 * a2) - 1) < 2;
  *(_DWORD *)(v3 + 4 * a2) = a3;
  if ((a3 - 1) < 2 != v4) {
    *(unsigned char *)(result + 443) = 0;
  }
  return result;
}

uint64_t operations_research::glop::LinearProgram::SetVariableBounds(uint64_t result, int a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(result + 160);
  if ((*(_DWORD *)(*(void *)(result + 232) + 4 * a2) - 1) > 1)
  {
    uint64_t v10 = 8 * a2;
    *(double *)(v4 + v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a3;
    *(double *)(*(void *)(result + 184) + v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a4;
    return result;
  }
  double v5 = *(double *)(v4 + 8 * a2);
  uint64_t v6 = *(void *)(result + 184);
  BOOL v7 = v5 >= 2.22044605e-16 || v5 <= -1.0;
  v9 = !v7 && (double v8 = *(double *)(v6 + 8 * a2), v8 > 1.0) && v8 < 2.0;
  uint64_t v11 = 8 * a2;
  *(double *)(v4 + v11) = a3;
  *(double *)(v6 + v11) = a4;
  if (a4 <= 1.0 || ((double v12 = *(double *)(v4 + 8 * a2), v12 < 2.22044605e-16) ? (v13 = v12 <= -1.0) : (v13 = 1), v13))
  {
    if (!v9) {
      return result;
    }
  }
  else if (a4 < 2.0 == v9)
  {
    return result;
  }
  *(unsigned char *)(result + 443) = 0;
  return result;
}

BOOL operations_research::glop::LinearProgram::IsVariableBinary(void *a1, int a2)
{
  if ((*(_DWORD *)(a1[29] + 4 * a2) - 1) > 1) {
    return 0;
  }
  double v2 = *(double *)(a1[20] + 8 * a2);
  if (v2 < 2.22044605e-16)
  {
    BOOL v3 = v2 == -1.0;
    BOOL v4 = v2 < -1.0;
  }
  else
  {
    BOOL v3 = 1;
    BOOL v4 = 0;
  }
  if (v4 || v3) {
    return 0;
  }
  double v5 = *(double *)(a1[23] + 8 * a2);
  return v5 > 1.0 && v5 < 2.0;
}

void operations_research::glop::LinearProgram::UpdateAllIntegerVariableLists(operations_research::glop::LinearProgram *this)
{
  if (!*((unsigned char *)this + 443))
  {
    *((void *)this + 33) = *((void *)this + 32);
    *((void *)this + 36) = *((void *)this + 35);
    *((void *)this + 39) = *((void *)this + 38);
    if ((int)(-1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4)) >= 1)
    {
      uint64_t v2 = 0;
      char v69 = (void **)((char *)this + 280);
      uint64_t v70 = (void **)((char *)this + 304);
      uint64_t v71 = (void **)((char *)this + 256);
      uint64_t v3 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
      while (1)
      {
        uint64_t v5 = *((void *)this + 29);
        if ((*(_DWORD *)(v5 + 4 * v2) - 1) > 1) {
          goto LABEL_6;
        }
        BOOL v7 = (char *)*((void *)this + 33);
        unint64_t v6 = *((void *)this + 34);
        if ((unint64_t)v7 < v6)
        {
          *(_DWORD *)BOOL v7 = v2;
          uint64_t v8 = (uint64_t)(v7 + 4);
          goto LABEL_29;
        }
        BOOL v9 = (char *)*v71;
        uint64_t v10 = v7 - (unsigned char *)*v71;
        uint64_t v11 = v10 >> 2;
        unint64_t v12 = (v10 >> 2) + 1;
        if (v12 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v6 - (void)v9;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        unint64_t v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v12;
        if (v14) {
          break;
        }
        double v15 = 0;
        unint64_t v16 = (_DWORD *)(4 * v11);
        *(_DWORD *)(4 * v11) = v2;
        uint64_t v8 = 4 * v11 + 4;
        if (v7 != v9) {
          goto LABEL_21;
        }
LABEL_27:
        *((void *)this + 32) = v16;
        *((void *)this + 33) = v8;
        *((void *)this + 34) = &v15[4 * v14];
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *((void *)this + 29);
        }
LABEL_29:
        *((void *)this + 33) = v8;
        if ((*(_DWORD *)(v5 + 4 * v2) - 1) > 1
          || ((double v26 = *(double *)(*((void *)this + 20) + 8 * v2), v26 < 2.22044605e-16)
            ? (BOOL v27 = v26 <= -1.0)
            : (BOOL v27 = 1),
              v27
           || ((double v28 = *(double *)(*((void *)this + 23) + 8 * v2), v28 > 1.0) ? (v29 = v28 < 2.0) : (v29 = 0), !v29)))
        {
          uint64_t v31 = (char *)*((void *)this + 39);
          unint64_t v30 = *((void *)this + 40);
          if ((unint64_t)v31 >= v30)
          {
            uint64_t v32 = (char *)*v70;
            uint64_t v33 = v31 - (unsigned char *)*v70;
            uint64_t v34 = v33 >> 2;
            unint64_t v35 = (v33 >> 2) + 1;
            if (v35 >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v30 - (void)v32;
            if (v36 >> 1 > v35) {
              unint64_t v35 = v36 >> 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              if (v37 >> 62) {
                goto LABEL_82;
              }
              uint64_t v38 = operator new(4 * v37);
              uint64_t v39 = &v38[4 * v34];
              *uint64_t v39 = v2;
              uint64_t v4 = (uint64_t)(v39 + 1);
              if (v31 == v32)
              {
LABEL_56:
                *((void *)this + 38) = v39;
                *((void *)this + 39) = v4;
                *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v38[4 * v37];
                if (v32) {
                  operator delete(v32);
                }
                goto LABEL_5;
              }
            }
            else
            {
              uint64_t v38 = 0;
              uint64_t v39 = (_DWORD *)(4 * v34);
              *(_DWORD *)(4 * v34) = v2;
              uint64_t v4 = 4 * v34 + 4;
              if (v31 == v32) {
                goto LABEL_56;
              }
            }
            unint64_t v40 = v31 - 4 - v32;
            if (v40 < 0x2C) {
              goto LABEL_88;
            }
            if ((unint64_t)(v31 - &v38[v33]) < 0x20) {
              goto LABEL_88;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            long long v43 = &v31[-v42];
            uint64_t v39 = (_DWORD *)((char *)v39 - v42);
            uint64_t v44 = &v38[4 * v34 - 16];
            uint64_t v45 = v31 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *uint64_t v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            uint64_t v31 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_88:
              do
              {
                int v48 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--uint64_t v39 = v48;
              }
              while (v31 != v32);
            }
            goto LABEL_56;
          }
          *(_DWORD *)uint64_t v31 = v2;
          uint64_t v4 = (uint64_t)(v31 + 4);
LABEL_5:
          *((void *)this + 39) = v4;
          goto LABEL_6;
        }
        int v50 = (char *)*((void *)this + 36);
        unint64_t v49 = *((void *)this + 37);
        if ((unint64_t)v50 >= v49)
        {
          uint64_t v51 = (char *)*v69;
          uint64_t v52 = v50 - (unsigned char *)*v69;
          uint64_t v53 = v52 >> 2;
          unint64_t v54 = (v52 >> 2) + 1;
          if (v54 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v55 = v49 - (void)v51;
          if (v55 >> 1 > v54) {
            unint64_t v54 = v55 >> 1;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56)
          {
            if (v56 >> 62) {
LABEL_82:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v57 = operator new(4 * v56);
            unint64_t v58 = &v57[4 * v53];
            *unint64_t v58 = v2;
            uint64_t v59 = (uint64_t)(v58 + 1);
            if (v50 == v51) {
              goto LABEL_77;
            }
LABEL_71:
            unint64_t v60 = v50 - 4 - v51;
            if (v60 < 0x2C) {
              goto LABEL_89;
            }
            if ((unint64_t)(v50 - &v57[v52]) < 0x20) {
              goto LABEL_89;
            }
            uint64_t v61 = (v60 >> 2) + 1;
            uint64_t v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
            long long v63 = &v50[-v62];
            unint64_t v58 = (_DWORD *)((char *)v58 - v62);
            unint64_t v64 = &v57[4 * v53 - 16];
            int64_t v65 = v50 - 16;
            uint64_t v66 = v61 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v67 = *(_OWORD *)v65;
              *(v64 - 1) = *((_OWORD *)v65 - 1);
              *unint64_t v64 = v67;
              v64 -= 2;
              v65 -= 32;
              v66 -= 8;
            }
            while (v66);
            int v50 = v63;
            if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_89:
              do
              {
                int v68 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *--unint64_t v58 = v68;
              }
              while (v50 != v51);
            }
          }
          else
          {
            uint64_t v57 = 0;
            unint64_t v58 = (_DWORD *)(4 * v53);
            *(_DWORD *)(4 * v53) = v2;
            uint64_t v59 = 4 * v53 + 4;
            if (v50 != v51) {
              goto LABEL_71;
            }
          }
LABEL_77:
          *((void *)this + 35) = v58;
          *((void *)this + 36) = v59;
          *((void *)this + 37) = &v57[4 * v56];
          if (v51) {
            operator delete(v51);
          }
          *((void *)this + 36) = v59;
          goto LABEL_6;
        }
        *(_DWORD *)int v50 = v2;
        *((void *)this + 36) = v50 + 4;
LABEL_6:
        if (++v2 == v3) {
          goto LABEL_80;
        }
      }
      if (v14 >> 62) {
        goto LABEL_82;
      }
      double v15 = operator new(4 * v14);
      unint64_t v16 = &v15[4 * v11];
      *unint64_t v16 = v2;
      uint64_t v8 = (uint64_t)(v16 + 1);
      if (v7 == v9) {
        goto LABEL_27;
      }
LABEL_21:
      unint64_t v17 = v7 - 4 - v9;
      if (v17 < 0x2C) {
        goto LABEL_90;
      }
      if ((unint64_t)(v7 - &v15[v10]) < 0x20) {
        goto LABEL_90;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v20 = &v7[-v19];
      unint64_t v16 = (_DWORD *)((char *)v16 - v19);
      uint64_t v21 = &v15[4 * v11 - 16];
      long long v22 = v7 - 16;
      uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      BOOL v7 = v20;
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_90:
        do
        {
          int v25 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--unint64_t v16 = v25;
        }
        while (v7 != v9);
      }
      goto LABEL_27;
    }
LABEL_80:
    *((unsigned char *)this + 443) = 1;
  }
}

uint64_t operations_research::glop::LinearProgram::IntegerVariablesList(operations_research::glop::LinearProgram *this)
{
  return (uint64_t)this + 256;
}

void operations_research::glop::LinearProgram::SetConstraintBounds(uint64_t a1, int a2, double a3, double a4)
{
  operations_research::glop::LinearProgram::ResizeRowsIfNeeded(a1, a2);
  uint64_t v8 = 8 * a2;
  *(double *)(*(void *)(a1 + 64) + v8) = a3;
  *(double *)(*(void *)(a1 + 88) + v8) = a4;
}

void operations_research::glop::LinearProgram::ResizeRowsIfNeeded(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    *(unsigned char *)(a1 + 442) = 0;
    int v3 = a2 + 1;
    operations_research::glop::SparseMatrix::SetNumRows(a1, a2 + 1);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = *(void *)(a1 + 72);
    __x.__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = (v5 - v4) >> 3;
    if (v3 <= v6)
    {
      if (v3 < v6) {
        *(void *)(a1 + 72) = v4 + 8 * v3;
      }
    }
    else
    {
      std::vector<double>::__append(a1 + 64, v3 - v6, (uint64_t *)&__x);
    }
    uint64_t v7 = *(void *)(a1 + 88);
    uint64_t v8 = *(void *)(a1 + 96);
    __x.__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = (v8 - v7) >> 3;
    if (v3 <= v9)
    {
      if (v3 < v9) {
        *(void *)(a1 + 96) = v7 + 8 * v3;
      }
    }
    else
    {
      std::vector<double>::__append(a1 + 88, v3 - v9, (uint64_t *)&__x);
    }
    uint64_t v10 = *(void *)(a1 + 112);
    uint64_t v11 = *(void *)(a1 + 120);
    *((unsigned char *)&__x.__r_.__value_.__s + 23) = 0;
    __x.__r_.__value_.__s.__data_[0] = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3);
    if (v3 <= v12)
    {
      if (v3 < v12)
      {
        uint64_t v13 = v10 + 24 * v3;
        while (v11 != v13)
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 24;
        }
        *(void *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v13;
      }
    }
    else
    {
      std::vector<std::string>::__append((std::vector<std::string> *)(a1 + 112), v3 - v12, &__x);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__x.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_23CB99D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::LinearProgram::SetCoefficient(uint64_t a1, int a2, int a3, double a4)
{
  operations_research::glop::LinearProgram::ResizeRowsIfNeeded(a1, a2);
  *(_WORD *)(a1 + 441) = 0;
  uint64_t v8 = *(void *)a1 + 48 * a3;
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9 == *(void *)(v8 + 16) && (!v9 || v9 < 2 * v9)) {
    operator new[]();
  }
  *(void *)(v8 + 8) = v9 + 1;
  uint64_t v10 = *(void *)(v8 + 32);
  *(_DWORD *)(*(void *)(v8 + 24) + 4 * v9) = a2;
  *(double *)(v10 + 8 * v9) = a4;
  *(unsigned char *)(v8 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
}

uint64_t operations_research::glop::LinearProgram::SetObjectiveCoefficient(uint64_t result, int a2, double a3)
{
  *(double *)(*(void *)(result + 136) + 8 * a2) = a3;
  return result;
}

uint64_t operations_research::glop::LinearProgram::GetSparseColumn(void *a1, int a2)
{
  return *a1 + 48 * a2;
}

double operations_research::glop::LinearProgram::GetObjectiveCoefficientForMinimizationVersion(uint64_t a1, int a2)
{
  double result = *(double *)(*(void *)(a1 + 136) + 8 * a2);
  if (*(unsigned char *)(a1 + 440)) {
    return -result;
  }
  return result;
}

unint64_t operations_research::glop::LinearProgram::GetDimensionString@<X0>(operations_research::glop::LinearProgram *this@<X0>, uint64_t a2@<X8>)
{
  v5[6] = *MEMORY[0x263EF8340];
  uint64_t v3 = -1431655765 * ((*((void *)this + 1) - *(void *)this) >> 4);
  v5[0] = *((unsigned int *)this + 6);
  v5[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v5[2] = v3;
  v5[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v5[4] = operations_research::glop::SparseMatrix::num_entries(this);
  v5[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("%d rows, %d columns, %d entries", 31, (uint64_t)v5, 3, a2);
}

uint64_t operations_research::glop::LinearProgram::GetFirstSlackVariable(operations_research::glop::LinearProgram *this)
{
  return *((unsigned int *)this + 118);
}

uint64_t operations_research::glop::LinearProgram::GetSlackVariable(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 472);
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v2 + a2);
  }
}

void operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(operations_research::glop::LinearProgram *this, int a2, char *a3, __n128 a4)
{
  v41[6] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 441))
  {
    operations_research::glop::SparseMatrix::CleanUp(this, a4);
    *(_WORD *)((char *)this + 441) = 1;
    int v6 = *((_DWORD *)this + 6);
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v36 = 0;
    if (v6) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v9 = 0;
    if ((a2 & 1) == 0)
    {
      int v25 = -1431655765 * ((*((void *)this + 1) - *(void *)this) >> 4);
      goto LABEL_47;
    }
    goto LABEL_14;
  }
  int v6 = *((_DWORD *)this + 6);
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v36 = 0;
  if (!v6) {
    goto LABEL_13;
  }
LABEL_3:
  if (v6 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = (unint64_t)(v6 - 1) >> 6;
  uint64_t v8 = operator new(8 * (v7 + 1));
  uint64_t v9 = v8;
  uint64_t v37 = v6;
  unint64_t v38 = v7 + 1;
  uint64_t v36 = v8;
  if (v6 >= 0x41) {
    unint64_t v10 = (unint64_t)(v6 - 1) >> 6;
  }
  else {
    unint64_t v10 = 0;
  }
  v8[v10] = 0;
  unint64_t v11 = (unint64_t)v6 >> 6;
  if (!a2)
  {
    if (v6 >= 0x40) {
      bzero(v8, 8 * v11);
    }
    if ((v6 & 0x3F) != 0) {
      v9[v11] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
    }
    int v25 = -1431655765 * ((*((void *)this + 1) - *(void *)this) >> 4);
LABEL_34:
    uint64_t v26 = 0;
    do
    {
      int v27 = *((_DWORD *)this + 118);
      if (v27 == -1) {
        int v28 = -1;
      }
      else {
        int v28 = v26 + v27;
      }
      if (v28 == -1 || v28 >= v25)
      {
        uint64_t v30 = *(void *)((char *)v9 + (((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8));
        double v31 = *(double *)(*((void *)this + 11) + 8 * v26);
        double v32 = *(double *)(*((void *)this + 8) + 8 * v26);
        v41[0] = "s";
        v41[1] = 1;
        uint64_t v33 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v26, v40, a3);
        v39[0] = v40;
        v39[1] = v33 - v40;
        absl::lts_2020_02_25::StrCat((uint64_t)v41, (uint64_t)v39, &__p);
        int NewSlackVariable = operations_research::glop::LinearProgram::CreateNewSlackVariable((uint64_t)this, (v30 & (1 << v26)) != 0, (uint64_t)&__p, -v31, -v32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        operations_research::glop::LinearProgram::SetCoefficient((uint64_t)this, v26, NewSlackVariable, 1.0);
        operations_research::glop::LinearProgram::ResizeRowsIfNeeded((uint64_t)this, v26);
        *(void *)(*((void *)this + 8) + 8 * v26) = 0;
        *(void *)(*((void *)this + 11) + 8 * v26) = 0;
        int v6 = *((_DWORD *)this + 6);
      }
      ++v26;
    }
    while (v26 < v6);
    goto LABEL_47;
  }
  if (v6 >= 0x40) {
    memset(v8, 255, 8 * v11);
  }
  if ((v6 & 0x3F) != 0) {
    v9[v11] |= 0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F);
  }
LABEL_14:
  uint64_t v12 = *(void *)this;
  if ((int)(-1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4)) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)this + 29);
    uint64_t v15 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
    do
    {
      unint64_t v16 = (void *)(v12 + 48 * v13);
      uint64_t v17 = v16[1];
      if (v17 >= 1)
      {
        uint64_t v18 = (int *)v16[3];
        if ((*(_DWORD *)(v14 + 4 * v13) - 3) >= 0xFFFFFFFE)
        {
          uint64_t v20 = (double *)v16[4];
          do
          {
            while (1)
            {
              int v21 = *v18++;
              unint64_t v22 = (unint64_t)v21 >> 6;
              uint64_t v23 = 1 << v21;
              uint64_t v24 = v9[v22];
              if (((1 << v21) & v24) != 0 && round(*v20) == *v20) {
                break;
              }
              v9[v22] = v24 & ~v23;
              ++v20;
              if (!--v17) {
                goto LABEL_16;
              }
            }
            v9[v22] = v23 | v24;
            ++v20;
            --v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            int v19 = *v18++;
            *(void *)((char *)v9 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
            --v17;
          }
          while (v17);
        }
      }
LABEL_16:
      ++v13;
    }
    while (v13 != v15);
  }
  int v25 = -1431655765 * ((*((void *)this + 1) - *(void *)this) >> 4);
  if (v6 >= 1) {
    goto LABEL_34;
  }
LABEL_47:
  *(_WORD *)((char *)this + 441) = 1;
  if (*((_DWORD *)this + 118) == -1) {
    *((_DWORD *)this + 118) = v25;
  }
  if (v9) {
    operator delete(v9);
  }
}

void sub_23CB9A3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    operator delete(v15);
    _Unwind_Resume(a1);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void operations_research::glop::LinearProgram::ScaleObjective(operations_research::glop::LinearProgram *this)
{
  uint64_t v1 = (float64x2_t *)*((void *)this + 17);
  int v2 = (double *)*((void *)this + 18);
  if (v1 == (float64x2_t *)v2)
  {
    double v4 = INFINITY;
    double v3 = 0.0;
  }
  else
  {
    double v3 = 0.0;
    double v4 = INFINITY;
    uint64_t v5 = (double *)*((void *)this + 17);
    do
    {
      uint64_t v6 = *(void *)v5 & 0x7FFFFFFFFFFFFFFFLL;
      if (v6 != 0x7FF0000000000000 && v6 != 0)
      {
        double v8 = fabs(*v5);
        if (v8 < v4) {
          double v4 = v8;
        }
        if (v3 < v8) {
          double v3 = v8;
        }
      }
      ++v5;
    }
    while (v5 != v2);
  }
  if (v3 >= 1.0 || v3 <= 0.0) {
    double v10 = 1.0;
  }
  else {
    double v10 = v3;
  }
  if (v4 < INFINITY && v4 > 1.0) {
    double v10 = v4;
  }
  if (v10 != 1.0)
  {
    int v12 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
    if (v12 >= 1)
    {
      unint64_t v13 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
      if (v13 >= 4)
      {
        uint64_t v15 = v12 & 3;
        uint64_t v14 = v13 - v15;
        float64x2_t v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
        uint64_t v17 = v1 + 1;
        uint64_t v18 = v13 - v15;
        do
        {
          float64x2_t v19 = vdivq_f64(*v17, v16);
          v17[-1] = vdivq_f64(v17[-1], v16);
          *uint64_t v17 = v19;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (!v15) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v20 = &v1->f64[v14];
      uint64_t v21 = v13 - v14;
      do
      {
        *uint64_t v20 = *v20 / v10;
        ++v20;
        --v21;
      }
      while (v21);
    }
LABEL_34:
    double v22 = v10 * *((double *)this + 54);
    *((double *)this + 53) = *((double *)this + 53) / v10;
    *((double *)this + 54) = v22;
  }
  if (*operations_research::glop::LinearProgram::ScaleObjective(void)::vlocal__ >= 1
    && (operations_research::glop::LinearProgram::ScaleObjective(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::LinearProgram::ScaleObjective(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/lp_data/lp_data.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_data.cc", 1150);
    uint64_t v23 = (void *)google::LogMessage::stream((google::LogMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Objective magnitude range is [", 30);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    int v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] (dividing by ", 15);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)").", 2);
    google::LogMessage::~LogMessage((google::LogMessage *)v27);
  }
}

void sub_23CB9A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

double operations_research::glop::LinearProgram::ScaleBounds(operations_research::glop::LinearProgram *this)
{
  int v2 = (double *)*((void *)this + 20);
  double v3 = (double *)*((void *)this + 21);
  double v4 = 0.0;
  if (v2 == v3)
  {
    double v5 = INFINITY;
  }
  else
  {
    double v5 = INFINITY;
    uint64_t v6 = (double *)*((void *)this + 20);
    do
    {
      uint64_t v7 = *(void *)v6 & 0x7FFFFFFFFFFFFFFFLL;
      if (v7 != 0x7FF0000000000000 && v7 != 0)
      {
        double v9 = fabs(*v6);
        if (v9 < v5) {
          double v5 = v9;
        }
        if (v4 < v9) {
          double v4 = v9;
        }
      }
      ++v6;
    }
    while (v6 != v3);
  }
  double v10 = (double *)*((void *)this + 23);
  unint64_t v11 = (double *)*((void *)this + 24);
  if (v10 != v11)
  {
    int v12 = (double *)*((void *)this + 23);
    do
    {
      uint64_t v13 = *(void *)v12 & 0x7FFFFFFFFFFFFFFFLL;
      if (v13 != 0x7FF0000000000000 && v13 != 0)
      {
        double v15 = fabs(*v12);
        if (v15 < v5) {
          double v5 = v15;
        }
        if (v4 < v15) {
          double v4 = v15;
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  float64x2_t v16 = (double *)*((void *)this + 8);
  uint64_t v17 = (double *)*((void *)this + 9);
  if (v16 != v17)
  {
    uint64_t v18 = (double *)*((void *)this + 8);
    do
    {
      uint64_t v19 = *(void *)v18 & 0x7FFFFFFFFFFFFFFFLL;
      if (v19 != 0x7FF0000000000000 && v19 != 0)
      {
        double v21 = fabs(*v18);
        if (v21 < v5) {
          double v5 = v21;
        }
        if (v4 < v21) {
          double v4 = v21;
        }
      }
      ++v18;
    }
    while (v18 != v17);
  }
  double v22 = (double *)*((void *)this + 11);
  uint64_t v23 = (double *)*((void *)this + 12);
  if (v22 != v23)
  {
    uint64_t v24 = (double *)*((void *)this + 11);
    do
    {
      uint64_t v25 = *(void *)v24 & 0x7FFFFFFFFFFFFFFFLL;
      if (v25 != 0x7FF0000000000000 && v25 != 0)
      {
        double v27 = fabs(*v24);
        if (v27 < v5) {
          double v5 = v27;
        }
        if (v4 < v27) {
          double v4 = v27;
        }
      }
      ++v24;
    }
    while (v24 != v23);
  }
  if (v4 >= 1.0 || v4 <= 0.0) {
    double v29 = 1.0;
  }
  else {
    double v29 = v4;
  }
  if (v5 >= INFINITY || v5 <= 1.0) {
    double v31 = v29;
  }
  else {
    double v31 = v5;
  }
  if (v31 != 1.0)
  {
    double v32 = v31 * *((double *)this + 54);
    *((double *)this + 53) = *((double *)this + 53) / v31;
    *((double *)this + 54) = v32;
    if ((int)(-1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4)) >= 1)
    {
      uint64_t v33 = (int *)*((void *)this + 29);
      for (uint64_t i = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4); i; --i)
      {
        double v35 = *v2;
        double v36 = *v2 / v31;
        double v37 = *v10;
        int v38 = *v33++;
        double v39 = *v10 / v31;
        if ((v38 - 1) > 1)
        {
          *int v2 = v36;
          *double v10 = v39;
        }
        else
        {
          BOOL v40 = v35 < 2.22044605e-16;
          if (v35 <= -1.0) {
            BOOL v40 = 0;
          }
          if (v37 <= 1.0) {
            BOOL v40 = 0;
          }
          if (v37 >= 2.0) {
            BOOL v40 = 0;
          }
          *int v2 = v36;
          *double v10 = v39;
          double v41 = *v2;
          if (v39 <= 1.0 || v41 >= 2.22044605e-16 || v41 <= -1.0)
          {
            if (v40) {
              goto LABEL_85;
            }
          }
          else if (v39 < 2.0 != v40)
          {
LABEL_85:
            *((unsigned char *)this + 443) = 0;
          }
        }
        ++v10;
        ++v2;
      }
    }
    if (*((int *)this + 6) >= 1)
    {
      uint64_t v44 = 0;
      do
      {
        double v45 = v16[v44] / v31;
        double v46 = v22[v44] / v31;
        operations_research::glop::LinearProgram::ResizeRowsIfNeeded((uint64_t)this, v44);
        float64x2_t v16 = (double *)*((void *)this + 8);
        v16[v44] = v45;
        double v22 = (double *)*((void *)this + 11);
        v22[v44++] = v46;
      }
      while (v44 < *((int *)this + 6));
    }
  }
  if (*operations_research::glop::LinearProgram::ScaleBounds(void)::vlocal__ >= 1
    && (operations_research::glop::LinearProgram::ScaleBounds(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::LinearProgram::ScaleBounds(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/lp_data/lp_data.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v52, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_data.cc", 1184);
    long long v47 = (void *)google::LogMessage::stream((google::LogMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Bounds magnitude range is [", 27);
    int v48 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
    unint64_t v49 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"] (dividing bounds by ", 22);
    int v50 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)").", 2);
    google::LogMessage::~LogMessage((google::LogMessage *)v52);
  }
  return v31;
}

void sub_23CB9AA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::LinearProgram::IsInEquationForm(operations_research::glop::LinearProgram *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
LABEL_6:
    if (v1 == -1431655765 * ((*((void *)this + 1) - *(void *)this) >> 4)
                     - *((_DWORD *)this + 118))
      return operations_research::glop::IsRightMostSquareMatrixIdentity((uint64_t)this);
  }
  else
  {
    uint64_t v2 = 0;
    while (*(double *)(*((void *)this + 8) + v2) == 0.0 && *(double *)(*((void *)this + 11) + v2) == 0.0)
    {
      v2 += 8;
      if (8 * v1 == v2) {
        goto LABEL_6;
      }
    }
  }
  return 0;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CB9AB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous(absl::lts_2020_02_25::hash_internal::CityHashState *a1, absl::lts_2020_02_25::hash_internal *a2, unint64_t a3)
{
  uint64_t v3 = (uint64_t)a1;
  if (a3 < 0x11)
  {
    if (a3 < 9)
    {
      if (a3 < 4)
      {
        if (!a3) {
          return (absl::lts_2020_02_25::hash_internal::CityHashState *)v3;
        }
        unint64_t v4 = (*((unsigned __int8 *)a2 + (a3 >> 1)) << ((4 * a3) & 0xF8)) | *(unsigned __int8 *)a2 | (*((unsigned __int8 *)a2 + a3 - 1) << (8 * (a3 - 1)));
      }
      else
      {
        unint64_t v4 = ((unint64_t)*(unsigned int *)((char *)a2 + a3 - 4) << (8 * a3 - 32)) | *(unsigned int *)a2;
      }
    }
    else
    {
      unint64_t v4 = *(void *)((char *)a2 + a3 - 8) >> (-8 * a3);
      uint64_t v3 = (((unint64_t)(*(void *)a2 + v3) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (*(void *)a2 + v3));
    }
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)((((v3 + v4) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v3 + v4)));
  }
  if (a3 < 0x401)
  {
    unint64_t v4 = absl::lts_2020_02_25::hash_internal::CityHash64(a2, a3);
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)((((v3 + v4) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v3 + v4)));
  }

  return absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64(a1, a2, (char *)a3);
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v12 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(this->__end_, v12);
      std::vector<std::string>::pointer end = (std::string *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::string>::pointer begin = this->__begin_;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v8 = v7 + __n;
    if (v7 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = (std::string *)&v11[24 * v7];
    uint64_t v14 = (std::string *)&v11[24 * v10];
    size_t v15 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(v13, v15);
    float64x2_t v16 = (std::string *)((char *)v13 + v15);
    if (end == begin)
    {
      this->__begin_ = v13;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v14;
      if (!end) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      long long v17 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v13[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_ = v17;
      --v13;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --end;
    }
    while (end != begin);
    std::vector<std::string>::pointer v18 = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v14;
    if (end != v18)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v18);
      std::vector<std::string>::pointer end = v18;
    }
    if (end)
    {
LABEL_24:
      operator delete(end);
    }
  }
}

double operations_research::glop::LpScalingHelper::Scale(operations_research::glop::LpScalingHelper *this, float64x2_t **a2)
{
  operations_research::glop::SparseMatrixScaler::Clear(this);
  operations_research::glop::SparseMatrixScaler::Init(this, (operations_research::glop::SparseMatrix *)a2);
  operations_research::glop::SparseMatrixScaler::Scale((operations_research::glop::SparseMatrix **)this, 0);
  operations_research::glop::SparseMatrixScaler::ScaleRowVector((uint64_t)this, 0, a2 + 17);
  operations_research::glop::SparseMatrixScaler::ScaleRowVector((uint64_t)this, 1, a2 + 23);
  operations_research::glop::SparseMatrixScaler::ScaleRowVector((uint64_t)this, 1, a2 + 20);
  operations_research::glop::SparseMatrixScaler::ScaleColumnVector((uint64_t)this, 0, a2 + 11);
  operations_research::glop::SparseMatrixScaler::ScaleColumnVector((uint64_t)this, 0, a2 + 8);
  *((unsigned char *)a2 + 442) = 0;
  *((double *)this + 8) = 1.0
                        / operations_research::glop::LinearProgram::ScaleBounds((operations_research::glop::LinearProgram *)a2);
  operations_research::glop::LinearProgram::ScaleObjective((operations_research::glop::LinearProgram *)a2);
  double result = 1.0 / v4;
  *((double *)this + 9) = result;
  return result;
}

double operations_research::glop::LpScalingHelper::VariableScalingFactor(uint64_t a1, int a2)
{
  return operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(a1, a2) * *(double *)(a1 + 64);
}

double operations_research::glop::LpScalingHelper::UnscaleVariableValue(uint64_t a1, int a2, double a3)
{
  return a3 / (operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(a1, a2) * *(double *)(a1 + 64));
}

double operations_research::glop::LpScalingHelper::UnscaleReducedCost(uint64_t a1, int a2, double a3)
{
  return operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(a1, a2) * a3 / *(double *)(a1 + 72);
}

double operations_research::glop::LpScalingHelper::UnscaleDualValue(uint64_t a1, int a2, double a3)
{
  return a3 / (operations_research::glop::SparseMatrixScaler::RowUnscalingFactor(a1, a2) * *(double *)(a1 + 72));
}

void operations_research::glop::StringifyRational(operations_research::glop *this@<X0>, double a2@<D0>, double a3@<D1>, char *a4@<X8>)
{
  double v4 = a4;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 == INFINITY)
  {
    a4[23] = 3;
    *(_DWORD *)a4 = 6712937;
    return;
  }
  if (a2 == -INFINITY)
  {
    a4[23] = 4;
    strcpy(a4, "-inf");
    return;
  }
  uint64_t v5 = operations_research::RationalApproximation(this, a2, a3);
  if (v6 != 1)
  {
    uint64_t v10 = v6;
    v18[0] = v19;
    v18[1] = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v5, v19, v7) - v19;
    v17[0] = "/";
    v17[1] = 1;
    v15[0] = v16;
    v15[1] = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v10, v16, v11) - v16;
    absl::lts_2020_02_25::StrCat((uint64_t)v18, (uint64_t)v17, (uint64_t)v15, (std::string *)v4);
    return;
  }
  unint64_t v8 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v5, v19, v7);
  size_t v9 = v8 - v19;
  if ((unint64_t)(v8 - v19) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v14 = (char *)operator new(v12 + 1);
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = v13 | 0x8000000000000000;
    *(void *)double v4 = v14;
    double v4 = v14;
  }
  else
  {
    v4[23] = v9;
    if (v8 == v19) {
      goto LABEL_15;
    }
  }
  memcpy(v4, v19, v9);
LABEL_15:
  v4[v9] = 0;
}

void operations_research::glop::Stringify(operations_research::glop *this@<X0>, double a2@<D0>, char *a3@<X8>)
{
  v3[2] = *MEMORY[0x263EF8340];
  if (this)
  {
    operations_research::glop::StringifyRational(this, a2, 2.22044605e-16, a3);
  }
  else
  {
    *(double *)uint64_t v3 = a2;
    v3[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("%.16g", 5, (uint64_t)v3, 1, (uint64_t)a3);
  }
}

void operations_research::glop::StringifyMonomial(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a4 == 0.0)
  {
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    return;
  }
  if (a4 > 0.0)
  {
    v32[0] = " + ";
    v32[1] = 3;
    if (a4 == 1.0)
    {
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string __p = *(std::string *)a1;
      }
    }
    else
    {
      if (a2)
      {
        operations_research::glop::StringifyRational((operations_research::glop *)a1, a4, 2.22044605e-16, (char *)&v19);
      }
      else
      {
        double v33 = a4;
        uint64_t v34 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("%.16g", 5, (uint64_t)&v33, 1, (uint64_t)&v19);
      }
      uint64_t v7 = v21;
      unint64_t v8 = &v19;
      if ((v21 & 0x80u) != 0)
      {
        unint64_t v8 = v19;
        uint64_t v7 = v20;
      }
      v30[0] = v8;
      v30[1] = v7;
      v29[0] = " ";
      v29[1] = 1;
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = (const std::string::value_type *)a1;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)a1;
      }
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a1 + 8);
      }
      v28[0] = v10;
      v28[1] = v9;
      absl::lts_2020_02_25::StrCat((uint64_t)v30, (uint64_t)v29, (uint64_t)v28, &__p);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v31[0] = p_p;
    v31[1] = size;
    absl::lts_2020_02_25::StrCat((uint64_t)v32, (uint64_t)v31, (std::string *)a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (a4 == 1.0) {
      return;
    }
LABEL_44:
    if ((char)v21 < 0) {
      operator delete(v19);
    }
    return;
  }
  v27[0] = " - ";
  v27[1] = 3;
  if (a4 == -1.0)
  {
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __p = *(std::string *)a1;
    }
  }
  else
  {
    if (a2)
    {
      operations_research::glop::StringifyRational((operations_research::glop *)a1, -a4, 2.22044605e-16, (char *)&v19);
    }
    else
    {
      double v33 = -a4;
      uint64_t v34 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("%.16g", 5, (uint64_t)&v33, 1, (uint64_t)&v19);
    }
    uint64_t v13 = v21;
    uint64_t v14 = &v19;
    if ((v21 & 0x80u) != 0)
    {
      uint64_t v14 = v19;
      uint64_t v13 = v20;
    }
    v25[0] = v14;
    v25[1] = v13;
    v24[0] = " ";
    v24[1] = 1;
    uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
    if ((v15 & 0x80u) == 0) {
      float64x2_t v16 = (const std::string::value_type *)a1;
    }
    else {
      float64x2_t v16 = *(const std::string::value_type **)a1;
    }
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(a1 + 8);
    }
    v23[0] = v16;
    v23[1] = v15;
    absl::lts_2020_02_25::StrCat((uint64_t)v25, (uint64_t)v24, (uint64_t)v23, &__p);
  }
  std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::vector<std::string>::pointer v18 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    std::vector<std::string>::pointer v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v26[0] = v18;
  v26[1] = v17;
  absl::lts_2020_02_25::StrCat((uint64_t)v27, (uint64_t)v26, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a4 != -1.0) {
    goto LABEL_44;
  }
}

void sub_23CB9B56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_23CB9B588(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18 != -1.0) {
    JUMPOUT(0x23CB9B5C4);
  }
  JUMPOUT(0x23CB9B5D4);
}

void operations_research::glop::GetProblemStatusString(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "OPTIMAL");
      return;
    case 1:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "PRIMAL_INFEASIBLE");
      return;
    case 2:
      double v4 = "DUAL_INFEASIBLE";
      goto LABEL_14;
    case 3:
      uint64_t v5 = (char *)operator new(0x19uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_23CE7EB30;
      strcpy(v5, "INFEASIBLE_OR_UNBOUNDED");
      return;
    case 4:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "PRIMAL_UNBOUNDED");
      return;
    case 5:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "DUAL_UNBOUNDED");
      return;
    case 6:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "INIT");
      return;
    case 7:
      double v4 = "PRIMAL_FEASIBLE";
      goto LABEL_14;
    case 8:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "DUAL_FEASIBLE");
      return;
    case 9:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "ABNORMAL");
      return;
    case 10:
      double v4 = "INVALID_PROBLEM";
LABEL_14:
      *(unsigned char *)(a2 + 23) = 15;
      *(void *)a2 = *(void *)v4;
      *(void *)(a2 + 7) = *(void *)(v4 + 7);
      *(unsigned char *)(a2 + 15) = 0;
      break;
    case 11:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "IMPRECISE");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 48, 2);
      uint64_t v3 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid ProblemStatus ", 22);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
      *(unsigned char *)(a2 + 23) = 21;
      strcpy((char *)a2, "UNKNOWN ProblemStatus");
      break;
  }
}

void sub_23CB9B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::GetVariableTypeString(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = "UNCONSTRAINED";
      goto LABEL_6;
    case 1:
      uint64_t v3 = "LOWER_BOUNDED";
      goto LABEL_6;
    case 2:
      uint64_t v3 = "UPPER_BOUNDED";
LABEL_6:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v3;
      *(void *)(a2 + 5) = *(void *)(v3 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
    case 3:
      uint64_t v5 = (char *)operator new(0x19uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_23CE7EB30;
      strcpy(v5, "UPPER_AND_LOWER_BOUNDED");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "FIXED_VARIABLE");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 67, 2);
      double v4 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid VariableType ", 21);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "UNKNOWN VariableType");
      break;
  }
}

void sub_23CB9BA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::GetVariableStatusString(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "BASIC");
      break;
    case 1:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "FIXED_VALUE");
      break;
    case 2:
      double v4 = "AT_LOWER_BOUND";
      goto LABEL_7;
    case 3:
      double v4 = "AT_UPPER_BOUND";
LABEL_7:
      *(unsigned char *)(a2 + 23) = 14;
      *(void *)a2 = *(void *)v4;
      *(void *)(a2 + 6) = *(void *)(v4 + 6);
      *(unsigned char *)(a2 + 14) = 0;
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "FREE");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v5, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 86, 2);
      uint64_t v3 = (void *)google::LogMessage::stream((google::LogMessage *)v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid VariableStatus ", 23);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v5);
      strcpy((char *)a2, "UNKNOWN VariableStatus");
      *(unsigned char *)(a2 + 23) = 22;
      break;
  }
}

void sub_23CB9BC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::VariableToConstraintStatus(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >= 5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v4, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 124, 2);
    uint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Invalid VariableStatus ", 23);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v4);
    return 4;
  }
  return v1;
}

void sub_23CB9BCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double operations_research::glop::SquaredNorm(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if ((uint64_t)*a1 < 1) {
    return 0.0;
  }
  uint64_t v2 = (float64x2_t *)a1[2];
  if (v1 < 4)
  {
    unint64_t v3 = 0;
    double result = 0.0;
LABEL_8:
    unint64_t v9 = v1 - v3;
    uint64_t v10 = &v2->f64[v3];
    do
    {
      double v11 = *v10++;
      double result = result + v11 * v11;
      --v9;
    }
    while (v9);
    return result;
  }
  unint64_t v3 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v5 = v2 + 1;
  double result = 0.0;
  unint64_t v6 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    float64x2_t v7 = vmulq_f64(v5[-1], v5[-1]);
    float64x2_t v8 = vmulq_f64(*v5, *v5);
    double result = result + v7.f64[0] + v7.f64[1] + v8.f64[0] + v8.f64[1];
    v5 += 2;
    v6 -= 4;
  }
  while (v6);
  if (v1 != v3) {
    goto LABEL_8;
  }
  return result;
}

double operations_research::glop::PreciseSquaredNorm(operations_research::glop *this, const operations_research::glop::ScatteredColumn *a2)
{
  uint64_t v2 = (int *)*((void *)this + 4);
  unint64_t v3 = (int *)*((void *)this + 5);
  if (v2 == v3)
  {
    double v4 = *(double **)this;
    uint64_t v5 = (*((void *)this + 1) - *(void *)this) >> 3;
  }
  else
  {
    double v4 = *(double **)this;
    uint64_t v5 = (*((void *)this + 1) - *(void *)this) >> 3;
    if ((double)(int)v5 * 0.8 >= (double)(unint64_t)(v3 - v2))
    {
      double v6 = 0.0;
      double v7 = 0.0;
      do
      {
        uint64_t v8 = *v2++;
        double v9 = v7 + v4[v8] * v4[v8];
        double result = v6 + v9;
        double v7 = v9 + v6 - (v6 + v9);
        double v6 = result;
      }
      while (v2 != v3);
      return result;
    }
  }
  if ((int)v5 < 1) {
    return 0.0;
  }
  uint64_t v11 = v5;
  double v12 = 0.0;
  double v13 = 0.0;
  do
  {
    double v14 = *v4++;
    double v15 = v13 + v14 * v14;
    double result = v12 + v15;
    double v13 = v15 + v12 - (v12 + v15);
    double v12 = result;
    --v11;
  }
  while (v11);
  return result;
}

double operations_research::glop::PreciseSquaredNorm(uint64_t a1)
{
  unint64_t v1 = *(double **)a1;
  unint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if ((int)(v2 >> 3) < 1) {
    return 0.0;
  }
  uint64_t v3 = (v2 >> 3);
  double v4 = 0.0;
  double v5 = 0.0;
  do
  {
    double v6 = *v1++;
    double v7 = v5 + v6 * v6;
    double result = v4 + v7;
    double v5 = v7 + v4 - (v4 + v7);
    double v4 = result;
    --v3;
  }
  while (v3);
  return result;
}

double operations_research::glop::SquaredNorm(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (unint64_t)(a1[1] - *a1) >> 3;
  int v3 = v2 + 3;
  if ((v2 + 3) >= 7)
  {
    if ((v2 & 0x80000000) == 0) {
      int v3 = (unint64_t)(a1[1] - *a1) >> 3;
    }
    unsigned int v6 = v3 >> 2;
    if (v6 <= 1) {
      signed int v7 = 1;
    }
    else {
      signed int v7 = v6;
    }
    uint64_t v8 = v7;
    if (v7 >= 4)
    {
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v9 = 4 * (v8 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v11 = (const double *)(v1 + 64);
      double result = 0.0;
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        double v13 = v11 - 8;
        float64x2x4_t v30 = vld4q_f64(v13);
        float64x2x4_t v31 = vld4q_f64(v11);
        v30.val[0] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v30.val[0], v30.val[0]), vmulq_f64(v30.val[1], v30.val[1])), vmulq_f64(v30.val[2], v30.val[2])), vmulq_f64(v30.val[3], v30.val[3]));
        v30.val[1] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v31.val[0], v31.val[0]), vmulq_f64(v31.val[1], v31.val[1])), vmulq_f64(v31.val[2], v31.val[2])), vmulq_f64(v31.val[3], v31.val[3]));
        double result = result + v30.val[0].f64[0] + v30.val[0].f64[1] + v30.val[1].f64[0] + v30.val[1].f64[1];
        v11 += 16;
        v12 -= 4;
      }
      while (v12);
      if (v10 == v8)
      {
LABEL_16:
        int v4 = 4 * v8;
        if (v4 >= (int)v2) {
          return result;
        }
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      double result = 0.0;
    }
    double v14 = (double *)(v1 + 8 * v9 + 16);
    uint64_t v15 = v8 - v10;
    do
    {
      double v16 = *(v14 - 2) * *(v14 - 2) + *(v14 - 1) * *(v14 - 1);
      double v17 = *v14;
      double v18 = v14[1];
      v14 += 4;
      double result = result + v16 + v17 * v17 + v18 * v18;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  int v4 = 0;
  double result = 0.0;
  if ((int)v2 <= 0) {
    return result;
  }
LABEL_17:
  uint64_t v19 = v4;
  uint64_t v20 = (~v4 + v2);
  if (v20 < 3)
  {
    uint64_t v21 = v19;
LABEL_22:
    int v28 = (double *)(v1 + 8 * v21);
    do
    {
      double v29 = *v28++;
      double result = result + v29 * v29;
      LODWORD(v21) = v21 + 1;
    }
    while ((int)v21 < (int)v2);
    return result;
  }
  uint64_t v22 = v20 + 1;
  uint64_t v23 = (v20 + 1) & 0x1FFFFFFFCLL;
  uint64_t v21 = v23 + v19;
  uint64_t v24 = (float64x2_t *)(v1 + 8 * v19 + 16);
  uint64_t v25 = v23;
  do
  {
    float64x2_t v26 = vmulq_f64(v24[-1], v24[-1]);
    float64x2_t v27 = vmulq_f64(*v24, *v24);
    double result = result + v26.f64[0] + v26.f64[1] + v27.f64[0] + v27.f64[1];
    v24 += 2;
    v25 -= 4;
  }
  while (v25);
  if (v22 != v23) {
    goto LABEL_22;
  }
  return result;
}

double operations_research::glop::InfinityNorm(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  unint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if ((int)(v2 >> 3) < 1) {
    return 0.0;
  }
  uint64_t v3 = (v2 >> 3);
  double result = 0.0;
  do
  {
    double v5 = *v1++;
    double v6 = fabs(v5);
    if (result < v6) {
      double result = v6;
    }
    --v3;
  }
  while (v3);
  return result;
}

{
  uint64_t v1;
  double *v2;
  double result;
  double v4;
  double v5;

  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 < 1) {
    return 0.0;
  }
  unint64_t v2 = *(double **)(a1 + 32);
  double result = 0.0;
  do
  {
    int v4 = *v2++;
    double v5 = fabs(v4);
    if (result < v5) {
      double result = v5;
    }
    --v1;
  }
  while (v1);
  return result;
}

double operations_research::glop::InfinityNorm(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 < 1) {
    return 0.0;
  }
  unint64_t v2 = (double *)a1[2];
  double result = 0.0;
  do
  {
    double v4 = *v2++;
    double v5 = fabs(v4);
    if (result < v5) {
      double result = v5;
    }
    --v1;
  }
  while (v1);
  return result;
}

double operations_research::glop::RestrictedInfinityNorm(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3 = *a1;
  if (*a1 < 1) {
    return 0.0;
  }
  double v4 = (int *)a1[1];
  double v5 = (double *)a1[2];
  double result = 0.0;
  uint64_t v7 = *a2;
  do
  {
    int v9 = *v4++;
    int v8 = v9;
    if ((*(void *)(v7 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9))
    {
      double v10 = fabs(*v5);
      if (v10 > result)
      {
        *a3 = v8;
        double result = v10;
      }
    }
    ++v5;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t *operations_research::glop::SetSupportToFalse(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  if (*result >= 1)
  {
    uint64_t v3 = (int *)result[1];
    double v4 = (double *)result[2];
    do
    {
      if (*v4 != 0.0) {
        *(void *)(*a2 + (((unint64_t)*v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << *v3);
      }
      ++v4;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

BOOL operations_research::glop::IsDominated(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1 < 1) {
    return 1;
  }
  uint64_t v3 = (int *)a1[1];
  double v4 = (double *)a1[2];
  if (fabs(*v4) > *(double *)(*a2 + 8 * *v3)) {
    return 0;
  }
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = v5;
    if (v2 == v5) {
      break;
    }
    double v7 = fabs(v4[v5]);
    double v8 = *(double *)(*a2 + 8 * v3[v5++]);
  }
  while (v7 <= v8);
  return v6 >= v2;
}

double operations_research::glop::SparseMatrixScaler::SparseMatrixScaler(operations_research::glop::SparseMatrixScaler *this)
{
  *(void *)this = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

void operations_research::glop::SparseMatrixScaler::Init(operations_research::glop::SparseMatrixScaler *this, operations_research::glop::SparseMatrix *a2)
{
  *(void *)this = a2;
  unint64_t v3 = *((int *)a2 + 6);
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v6 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  double v4 = (char *)this + 16;
  unint64_t v7 = (v5 - v6) >> 3;
  BOOL v8 = v3 >= v7;
  unint64_t v9 = v3 - v7;
  if (v9 != 0 && v8)
  {
    std::vector<double>::__append((uint64_t)v4, v9, &v13);
    a2 = *(operations_research::glop::SparseMatrix **)this;
  }
  else if (!v8)
  {
    *((void *)this + 3) = v6 + 8 * v3;
  }
  int v10 = -1431655765 * ((*((void *)a2 + 1) - *(void *)a2) >> 4);
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v11 = *((void *)this + 5);
  unint64_t v12 = (*((void *)this + 6) - v11) >> 3;
  if (v10 <= v12)
  {
    if (v10 < v12) {
      *((void *)this + 6) = v11 + 8 * v10;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 40, v10 - v12, &v13);
  }
}

void *operations_research::glop::SparseMatrixScaler::Clear(void *this)
{
  *this = 0;
  this[3] = this[2];
  this[6] = this[5];
  return this;
}

double operations_research::glop::SparseMatrixScaler::RowUnscalingFactor(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  double result = 1.0;
  if (a2 < (int)((unint64_t)(*(void *)(a1 + 24) - v2) >> 3)) {
    return *(double *)(v2 + 8 * a2);
  }
  return result;
}

double operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  double result = 1.0;
  if (a2 < (int)((unint64_t)(*(void *)(a1 + 48) - v2) >> 3)) {
    return *(double *)(v2 + 8 * a2);
  }
  return result;
}

unint64_t operations_research::glop::SparseMatrixScaler::DebugInformationString@<X0>(operations_research::glop::SparseMatrix **this@<X0>, uint64_t a2@<X8>)
{
  unsigned char v52[16] = *MEMORY[0x263EF8340];
  double v50 = 0.0;
  double v51 = 0.0;
  operations_research::glop::SparseMatrix::ComputeMinAndMaxMagnitudes(*this, &v50, &v51);
  uint64_t v4 = *(void *)*this;
  if ((int)(-1431655765 * ((*((void *)*this + 1) - v4) >> 4)) >= 1)
  {
    uint64_t v5 = 0;
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    do
    {
      uint64_t v9 = v4 + 48 * v5;
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10 >= 1)
      {
        uint64_t v11 = *(double **)(v9 + 32);
        do
        {
          double v12 = *v11++;
          double v13 = fabs(v12);
          double v14 = v6 + v12 * v12;
          BOOL v15 = v12 == 0.0;
          if (v12 != 0.0) {
            double v8 = v8 + 1.0;
          }
          double v16 = -0.0;
          if (!v15) {
            double v16 = v13;
          }
          double v7 = v7 + v16;
          if (!v15) {
            double v6 = v14;
          }
          --v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != -1431655765 * ((*((void *)*this + 1) - v4) >> 4));
    if (v8 != 0.0)
    {
      double v17 = (v6 - v7 * v7 / v8) / v8;
      double v18 = (double *)this[2];
      uint64_t v19 = (double *)this[3];
      if (v18 != v19) {
        goto LABEL_16;
      }
LABEL_38:
      uint64_t v24 = v18;
      double v32 = v50;
      double v31 = v51;
      double v33 = (double *)this[5];
      uint64_t v34 = (double *)this[6];
      uint64_t v35 = v33 + 1;
      if (v33 == v34 || v35 == v34) {
        goto LABEL_30;
      }
      goto LABEL_42;
    }
  }
  double v17 = 0.0;
  double v18 = (double *)this[2];
  uint64_t v19 = (double *)this[3];
  if (v18 == v19) {
    goto LABEL_38;
  }
LABEL_16:
  uint64_t v20 = v18 + 1;
  if (v18 + 1 != v19)
  {
    double v21 = *v18;
    double v22 = *v18;
    uint64_t v23 = v18 + 1;
    uint64_t v24 = v18;
    uint64_t v25 = v18 + 1;
    do
    {
      double v26 = *v25++;
      double v27 = v26;
      if (v26 < v22)
      {
        double v22 = v27;
        uint64_t v24 = v23;
      }
      uint64_t v23 = v25;
    }
    while (v25 != v19);
    int v28 = v18 + 1;
    do
    {
      double v29 = *v28++;
      double v30 = v29;
      if (v21 < v29)
      {
        double v21 = v30;
        double v18 = v20;
      }
      uint64_t v20 = v28;
    }
    while (v28 != v19);
    double v32 = v50;
    double v31 = v51;
    double v33 = (double *)this[5];
    uint64_t v34 = (double *)this[6];
    uint64_t v35 = v33 + 1;
    if (v33 != v34 && v35 != v34) {
      goto LABEL_42;
    }
LABEL_30:
    double v37 = v33;
    goto LABEL_50;
  }
  uint64_t v24 = v18;
  double v32 = v50;
  double v31 = v51;
  double v33 = (double *)this[5];
  uint64_t v34 = (double *)this[6];
  uint64_t v35 = v33 + 1;
  if (v33 == v34 || v35 == v34) {
    goto LABEL_30;
  }
LABEL_42:
  double v40 = *v33;
  double v41 = *v33;
  uint64_t v42 = v35;
  double v37 = v33;
  long long v43 = v35;
  do
  {
    double v44 = *v43++;
    double v45 = v44;
    if (v44 < v41)
    {
      double v41 = v45;
      double v37 = v42;
    }
    uint64_t v42 = v43;
  }
  while (v43 != v34);
  double v46 = v35;
  do
  {
    double v47 = *v46++;
    double v48 = v47;
    if (v40 < v47)
    {
      double v40 = v48;
      double v33 = v35;
    }
    uint64_t v35 = v46;
  }
  while (v46 != v34);
LABEL_50:
  *(double *)uint64_t v52 = v32;
  v52[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[2] = v31;
  v52[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[4] = v31 / v32;
  v52[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[6] = v17;
  v52[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[8] = *v24;
  v52[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[10] = *v18;
  v52[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[12] = *v37;
  v52[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[14] = *v33;
  v52[15] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("Min magnitude = %g, max magnitude = %g\nDynamic range = %g\nVariance = %g\nMinimum row scale = %g, maximum row scale = %g\nMinimum col scale = %g, maximum col scale = %g\n", 166, (uint64_t)v52, 8, a2);
}

void operations_research::glop::SparseMatrixScaler::Scale(operations_research::glop::SparseMatrix **a1, int a2)
{
  double v58 = 0.0;
  double v59 = 0.0;
  operations_research::glop::SparseMatrix::ComputeMinAndMaxMagnitudes(*a1, &v58, &v59);
  if (v58 == 0.0) {
    return;
  }
  if (*_MergedGlobals_2[0] >= 1
    && (_MergedGlobals_2[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_2, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v57, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 104);
    uint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v57);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Before scaling:\n", 16);
    operations_research::glop::SparseMatrixScaler::DebugInformationString(a1, (uint64_t)&__p);
    if ((v56 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v56 & 0x80u) == 0) {
      uint64_t v7 = v56;
    }
    else {
      uint64_t v7 = (uint64_t)v55;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, v7);
    if ((char)v56 < 0) {
      operator delete(__p);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v57);
  }
  if (a2 == 2) {
    operations_research::glop::SparseMatrixScaler::LPScale((operations_research::glop::SparseMatrixScaler *)a1);
  }
  if (v59 / v58 < 1.0e20)
  {
    int v8 = 0;
    while (1)
    {
      int v9 = operations_research::glop::SparseMatrixScaler::ScaleRowsGeometrically((operations_research::glop::SparseMatrixScaler *)a1);
      int v10 = operations_research::glop::SparseMatrixScaler::ScaleColumnsGeometrically((uint64_t **)a1);
      uint64_t v11 = *(void *)*a1;
      if ((int)(-1431655765 * ((*((void *)*a1 + 1) - v11) >> 4)) < 1)
      {
        double v24 = 0.0;
        uint64_t v25 = off_26AECFD78[0];
        if (*off_26AECFD78[0] >= 1) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v12 = 0;
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        do
        {
          uint64_t v16 = v11 + 48 * v12;
          uint64_t v17 = *(void *)(v16 + 8);
          if (v17 >= 1)
          {
            double v18 = *(double **)(v16 + 32);
            do
            {
              double v19 = *v18++;
              double v20 = fabs(v19);
              double v21 = v13 + v19 * v19;
              BOOL v22 = v19 == 0.0;
              if (v19 != 0.0) {
                double v15 = v15 + 1.0;
              }
              double v23 = -0.0;
              if (!v22) {
                double v23 = v20;
              }
              double v14 = v14 + v23;
              if (!v22) {
                double v13 = v21;
              }
              --v17;
            }
            while (v17);
          }
          ++v12;
        }
        while (v12 != -1431655765 * ((*((void *)*a1 + 1) - v11) >> 4));
        double v24 = 0.0;
        if (v15 == 0.0)
        {
          uint64_t v25 = off_26AECFD78[0];
          if (*off_26AECFD78[0] >= 1) {
            goto LABEL_38;
          }
        }
        else
        {
          double v24 = (v13 - v14 * v14 / v15) / v15;
          uint64_t v25 = off_26AECFD78[0];
          if (*off_26AECFD78[0] >= 1)
          {
LABEL_38:
            if (v25 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_26AECFD78, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 125);
              double v26 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Geometric scaling iteration ", 28);
              double v27 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)". Rows scaled = ", 16);
              int v28 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", columns scaled = ", 19);
              double v29 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\n", 1);
              google::LogMessage::~LogMessage((google::LogMessage *)&__p);
            }
          }
        }
      }
      if (*off_26AECFD80[0] >= 1
        && (off_26AECFD80[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFD80, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v57, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 128);
        double v30 = (void *)google::LogMessage::stream((google::LogMessage *)v57);
        operations_research::glop::SparseMatrixScaler::DebugInformationString(a1, (uint64_t)&__p);
        if ((v56 & 0x80u) == 0) {
          double v31 = &__p;
        }
        else {
          double v31 = __p;
        }
        if ((v56 & 0x80u) == 0) {
          uint64_t v32 = v56;
        }
        else {
          uint64_t v32 = (uint64_t)v55;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
        if ((char)v56 < 0) {
          operator delete(__p);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v57);
      }
      if (v24 >= 10.0)
      {
        if (v10 | v9)
        {
          if (++v8 != 4) {
            continue;
          }
        }
      }
      break;
    }
  }
  operations_research::glop::SparseMatrixScaler::EquilibrateRows((uint64_t **)a1);
  if ((int)(-1431655765 * ((uint64_t)(*((void *)*a1 + 1) - *(void *)*a1) >> 4)) >= 1)
  {
    uint64_t v33 = 0;
    int v34 = 0;
    uint64_t v35 = -1431655765 * ((uint64_t)(*((void *)*a1 + 1) - *(void *)*a1) >> 4);
    do
    {
      *(double *)&uint64_t v36 = operations_research::glop::InfinityNorm(*(void *)*a1 + 48 * v33);
      if (*(double *)&v36 == 0.0) {
        goto LABEL_59;
      }
      *((double *)a1[5] + v33) = *(double *)&v36 * *((double *)a1[5] + v33);
      uint64_t v37 = *(void *)*a1;
      if (v37)
      {
        uint64_t v38 = v37 + 48 * v33;
        uint64_t v39 = *(void *)(v38 + 8);
        if (v39 >= 1)
        {
          double v40 = *(float64x2_t **)(v38 + 32);
          if ((unint64_t)v39 >= 4)
          {
            uint64_t v41 = v39 & 0x7FFFFFFFFFFFFFFCLL;
            float64x2_t v42 = (float64x2_t)vdupq_lane_s64(v36, 0);
            long long v43 = v40 + 1;
            unint64_t v44 = v39 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v45 = vdivq_f64(*v43, v42);
              v43[-1] = vdivq_f64(v43[-1], v42);
              *long long v43 = v45;
              v43 += 2;
              v44 -= 4;
            }
            while (v44);
            if (v39 == v41) {
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v41 = 0;
          }
          uint64_t v46 = v39 - v41;
          double v47 = &v40->f64[v41];
          do
          {
            *double v47 = *v47 / *(double *)&v36;
            ++v47;
            --v46;
          }
          while (v46);
        }
      }
LABEL_58:
      ++v34;
LABEL_59:
      ++v33;
    }
    while (v33 != v35);
  }
  if (*off_26AECFD88[0] >= 1
    && (off_26AECFD88[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFD88, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 137);
    double v48 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Equilibration step: Rows scaled = ", 34);
    unint64_t v49 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", columns scaled = ", 19);
    double v50 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  }
  if (*off_26AECFD90[0] >= 1
    && (off_26AECFD90[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFD90, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v57, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 139);
    double v51 = (void *)google::LogMessage::stream((google::LogMessage *)v57);
    operations_research::glop::SparseMatrixScaler::DebugInformationString(a1, (uint64_t)&__p);
    if ((v56 & 0x80u) == 0) {
      uint64_t v52 = &__p;
    }
    else {
      uint64_t v52 = __p;
    }
    if ((v56 & 0x80u) == 0) {
      uint64_t v53 = v56;
    }
    else {
      uint64_t v53 = (uint64_t)v55;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
    if ((char)v56 < 0) {
      operator delete(__p);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v57);
  }
}

void sub_23CB9CD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::SparseMatrixScaler::LPScale(operations_research::glop::SparseMatrixScaler *this)
{
}

void sub_23CB9D4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,operations_research::glop::RevisedSimplex *a30,__int16 a31,char a32,char a33)
{
  if (a23 < 0)
  {
    operator delete(__p);
    int v34 = a24;
    if (a24)
    {
LABEL_7:
      operator delete(v34);
      uint64_t v35 = a27;
      if (!a27) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int v34 = a24;
    if (a24) {
      goto LABEL_7;
    }
  }
  uint64_t v35 = a27;
  if (!a27)
  {
LABEL_9:
    std::unique_ptr<operations_research::glop::RevisedSimplex>::~unique_ptr[abi:ne180100](&a30);
    operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)&a31);
    std::unique_ptr<operations_research::glop::LinearProgram>::~unique_ptr[abi:ne180100]((void ***)(v33 - 112));
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v35);
  goto LABEL_9;
}

uint64_t operations_research::glop::SparseMatrixScaler::ScaleRowsGeometrically(operations_research::glop::SparseMatrixScaler *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = *(int *)(*(void *)this + 24);
  uint64_t v4 = *(unsigned int *)(*(void *)this + 24);
  uint64_t v5 = 8 * v4;
  size_t v6 = 8 * v3;
  if (v3)
  {
    if ((v3 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(8 * v4);
    bzero(v7, v6);
    int v8 = (char *)operator new(8 * v4);
    memset_pattern16(v8, &unk_23CE7EE40, v6);
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
  }
  int v10 = v2;
  uint64_t v9 = *v2;
  int v11 = -1431655765 * ((v10[1] - v9) >> 4);
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      double v13 = (void *)(v9 + 48 * i);
      uint64_t v14 = v13[1];
      if (v14 >= 1)
      {
        double v15 = (int *)v13[3];
        uint64_t v16 = (double *)v13[4];
        do
        {
          if (*v16 != 0.0)
          {
            double v17 = fabs(*v16);
            uint64_t v18 = 8 * *v15;
            double v19 = *(double *)&v7[v18];
            if (v19 < v17) {
              double v19 = v17;
            }
            *(double *)&v7[8 * *v15] = v19;
            if (v17 >= *(double *)&v8[v18]) {
              double v17 = *(double *)&v8[v18];
            }
            *(double *)&v8[v18] = v17;
          }
          ++v16;
          ++v15;
          --v14;
        }
        while (v14);
      }
    }
  }
  if (v4)
  {
    if ((v4 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v20 = (char *)operator new(8 * v4);
    bzero(v20, v6);
    uint64_t v21 = 0;
    do
    {
      double v22 = *(double *)&v7[v21];
      double v23 = 1.0;
      if (v22 != 0.0) {
        double v23 = sqrt(v22 * *(double *)&v8[v21]);
      }
      *(double *)&v20[v21] = v23;
      v21 += 8;
    }
    while (v5 != v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      double v26 = *(double *)&v20[v24];
      if (v26 != 1.0)
      {
        uint64_t v25 = (v25 + 1);
        *(double *)(*((void *)this + 2) + v24) = v26 * *(double *)(*((void *)this + 2) + v24);
      }
      v24 += 8;
    }
    while (v5 != v24);
  }
  else
  {
    double v20 = 0;
    uint64_t v25 = 0;
  }
  if (v11 >= 1 && v9)
  {
    for (uint64_t j = 0; j != v11; ++j)
    {
      int v28 = (void *)(v9 + 48 * j);
      uint64_t v29 = v28[1];
      if (v29 >= 1)
      {
        double v30 = (int *)v28[3];
        double v31 = (double *)v28[4];
        do
        {
          uint64_t v32 = *v30++;
          *double v31 = *v31 / *(double *)&v20[8 * v32];
          ++v31;
          --v29;
        }
        while (v29);
      }
    }
  }
  if (v20) {
    operator delete(v20);
  }
  if (v8) {
    operator delete(v8);
  }
  if (v7) {
    operator delete(v7);
  }
  return v25;
}

void sub_23CB9D93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_23CB9D954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v14)
  {
    operator delete(v14);
    if (!v13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::SparseMatrixScaler::ScaleColumnsGeometrically(uint64_t **this)
{
  uint64_t v1 = **this;
  if ((int)(-1431655765 * (((*this)[1] - v1) >> 4)) < 1) {
    return 0;
  }
  uint64_t v2 = -1431655765 * (((*this)[1] - v1) >> 4);
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = v1 + 48 * v3;
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6 < 1) {
        goto LABEL_5;
      }
      uint64_t v7 = 0;
      int v8 = *(float64x2_t **)(v5 + 32);
      double v9 = 0.0;
      double v10 = INFINITY;
      do
      {
        double v11 = v8->f64[v7];
        double v12 = fabs(v11);
        if (v11 != 0.0 && v12 < v10) {
          double v10 = v12;
        }
        if (v11 != 0.0 && v9 < v12) {
          double v9 = v12;
        }
        ++v7;
      }
      while (v6 != v7);
      if (v9 == 0.0) {
        goto LABEL_5;
      }
      double v13 = sqrt(v10 * v9);
      *(double *)&this[5][v3] = v13 * *(double *)&this[5][v3];
      if ((unint64_t)v6 >= 4)
      {
        uint64_t v14 = v6 & 0x7FFFFFFFFFFFFFFCLL;
        float64x2_t v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0);
        uint64_t v16 = v8 + 1;
        unint64_t v17 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v18 = vdivq_f64(*v16, v15);
          v16[-1] = vdivq_f64(v16[-1], v15);
          *uint64_t v16 = v18;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v6 == v14) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v19 = v6 - v14;
      double v20 = &v8->f64[v14];
      do
      {
        *double v20 = *v20 / v13;
        ++v20;
        --v19;
      }
      while (v19);
LABEL_4:
      uint64_t v4 = (v4 + 1);
LABEL_5:
      if (++v3 == v2) {
        return v4;
      }
    }
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v22 = *(void *)(48 * v1 + 8);
    if (v22 >= 1)
    {
      double v23 = *(double **)(48 * v1 + 0x20);
      double v24 = 0.0;
      double v25 = INFINITY;
      do
      {
        double v26 = *v23++;
        double v27 = fabs(v26);
        BOOL v28 = v26 != 0.0;
        if (v26 != 0.0 && v27 < v25) {
          double v25 = v27;
        }
        if (v28 && v24 < v27) {
          double v24 = v27;
        }
        --v22;
      }
      while (v22);
      if (v24 != 0.0)
      {
        *(double *)&this[5][v1] = sqrt(v25 * v24) * *(double *)&this[5][v1];
        uint64_t v4 = (v4 + 1);
      }
    }
    ++v1;
  }
  while (v1 != v2);
  return v4;
}

uint64_t operations_research::glop::SparseMatrixScaler::EquilibrateRows(uint64_t **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = *((int *)*this + 6);
  uint64_t v4 = *((unsigned int *)*this + 6);
  if (v3)
  {
    if ((v4 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)operator new(8 * v4);
    bzero(v5, 8 * v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *v2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 4);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      double v9 = (void *)(v6 + 48 * v8);
      uint64_t v10 = v9[1];
      if (v10 >= 1)
      {
        double v11 = (int *)v9[3];
        double v12 = (double *)v9[4];
        do
        {
          if (*v12 != 0.0)
          {
            double v13 = fabs(*v12);
            if (*(double *)&v5[8 * *v11] >= v13) {
              double v13 = *(double *)&v5[8 * *v11];
            }
            *(double *)&v5[8 * *v11] = v13;
          }
          ++v12;
          ++v11;
          --v10;
        }
        while (v10);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  if ((int)v3 < 1)
  {
    uint64_t v15 = 0;
    goto LABEL_19;
  }
  if (v4 >= 4)
  {
    uint64_t v14 = v4 & 0xFFFFFFFC;
    double v23 = (float64x2_t *)(v5 + 16);
    uint64_t v24 = v14;
    while (1)
    {
      int32x2_t v25 = vmovn_s64(vceqzq_f64(v23[-1]));
      if (v25.i8[0])
      {
        v23[-1].f64[0] = 1.0;
        if ((v25.i8[4] & 1) == 0)
        {
LABEL_34:
          int32x2_t v26 = vmovn_s64(vceqzq_f64(*v23));
          if ((v26.i8[0] & 1) == 0) {
            goto LABEL_35;
          }
          goto LABEL_39;
        }
      }
      else if ((v25.i8[4] & 1) == 0)
      {
        goto LABEL_34;
      }
      v23[-1].f64[1] = 1.0;
      int32x2_t v26 = vmovn_s64(vceqzq_f64(*v23));
      if ((v26.i8[0] & 1) == 0)
      {
LABEL_35:
        if (v26.i8[4]) {
          goto LABEL_40;
        }
        goto LABEL_31;
      }
LABEL_39:
      v23->f64[0] = 1.0;
      if (v26.i8[4]) {
LABEL_40:
      }
        v23->f64[1] = 1.0;
LABEL_31:
      v23 += 2;
      v24 -= 4;
      if (!v24)
      {
        if (v14 == v4) {
          goto LABEL_42;
        }
        goto LABEL_46;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_46:
  uint64_t v29 = (double *)&v5[8 * v14];
  uint64_t v30 = v4 - v14;
  do
  {
    if (*v29 == 0.0) {
      *uint64_t v29 = 1.0;
    }
    ++v29;
    --v30;
  }
  while (v30);
LABEL_42:
  uint64_t v27 = 0;
  uint64_t v15 = 0;
  do
  {
    double v28 = *(double *)&v5[8 * v27];
    if (v28 != 1.0)
    {
      uint64_t v15 = (v15 + 1);
      *(double *)&this[2][v27] = v28 * *(double *)&this[2][v27];
    }
    ++v27;
  }
  while (v4 != v27);
LABEL_19:
  if ((int)v7 >= 1 && v6)
  {
    uint64_t v16 = 0;
    do
    {
      unint64_t v17 = (void *)(v6 + 48 * v16);
      uint64_t v18 = v17[1];
      if (v18 >= 1)
      {
        uint64_t v19 = (int *)v17[3];
        double v20 = (double *)v17[4];
        do
        {
          uint64_t v21 = *v19++;
          *double v20 = *v20 / *(double *)&v5[8 * v21];
          ++v20;
          --v18;
        }
        while (v18);
      }
      ++v16;
    }
    while (v16 != v7);
  }
  if (v5) {
    operator delete(v5);
  }
  return v15;
}

float64_t operations_research::glop::SparseMatrixScaler::ScaleRowVector(uint64_t a1, char a2, float64x2_t **a3)
{
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 146, 2);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v36);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"vector_to_scale", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
    return v13.f64[0];
  }
  uint64_t v3 = *(float64x2_t **)(a1 + 40);
  uint64_t v4 = *a3;
  unint64_t v5 = ((char *)a3[1] - (char *)*a3) >> 3;
  if (v5 >= (uint64_t)(*(void *)(a1 + 48) - (void)v3) >> 3) {
    unint64_t v5 = (uint64_t)(*(void *)(a1 + 48) - (void)v3) >> 3;
  }
  if ((a2 & 1) == 0)
  {
    if ((int)v5 < 1) {
      return v13.f64[0];
    }
    uint64_t v17 = v5;
    if (v5 >= 4uLL
      && (v4 < (float64x2_t *)&v3->f64[v5]
        ? (BOOL v18 = v3 >= (float64x2_t *)&v4->f64[v5])
        : (BOOL v18 = 1),
          v18))
    {
      unint64_t v19 = v5 & 3;
      uint64_t v20 = v5 - v19;
      uint64_t v21 = v3 + 1;
      uint64_t v22 = v4 + 1;
      uint64_t v23 = v20;
      do
      {
        float64x2_t v13 = vdivq_f64(v22[-1], v21[-1]);
        float64x2_t v24 = vdivq_f64(*v22, *v21);
        v22[-1] = v13;
        *uint64_t v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (!v19) {
        return v13.f64[0];
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v30 = v17 - v20;
    uint64_t v31 = v20;
    uint64_t v32 = &v4->f64[v31];
    uint64_t v33 = &v3->f64[v31];
    do
    {
      double v34 = *v33++;
      v13.f64[0] = *v32 / v34;
      *v32++ = v13.f64[0];
      --v30;
    }
    while (v30);
    return v13.f64[0];
  }
  if ((int)v5 < 1) {
    return v13.f64[0];
  }
  uint64_t v6 = v5;
  if (v5 < 4uLL
    || (v4 < (float64x2_t *)&v3->f64[v5]
      ? (BOOL v7 = v3 >= (float64x2_t *)&v4->f64[v5])
      : (BOOL v7 = 1),
        !v7))
  {
    uint64_t v9 = 0;
LABEL_29:
    uint64_t v25 = v6 - v9;
    uint64_t v26 = v9;
    uint64_t v27 = &v4->f64[v26];
    double v28 = &v3->f64[v26];
    do
    {
      double v29 = *v28++;
      v13.f64[0] = v29 * *v27;
      *v27++ = v13.f64[0];
      --v25;
    }
    while (v25);
    return v13.f64[0];
  }
  unint64_t v8 = v5 & 3;
  uint64_t v9 = v5 - v8;
  uint64_t v10 = v3 + 1;
  double v11 = v4 + 1;
  uint64_t v12 = v9;
  do
  {
    float64x2_t v13 = vmulq_f64(v10[-1], v11[-1]);
    float64x2_t v14 = vmulq_f64(*v10, *v11);
    v11[-1] = v13;
    *double v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v8) {
    goto LABEL_29;
  }
  return v13.f64[0];
}

void sub_23CB9DFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float64_t operations_research::glop::SparseMatrixScaler::ScaleColumnVector(uint64_t a1, char a2, float64x2_t **a3)
{
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 146, 2);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v36);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"vector_to_scale", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
    return v13.f64[0];
  }
  uint64_t v3 = *(float64x2_t **)(a1 + 16);
  uint64_t v4 = *a3;
  unint64_t v5 = ((char *)a3[1] - (char *)*a3) >> 3;
  if (v5 >= (uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3) {
    unint64_t v5 = (uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3;
  }
  if ((a2 & 1) == 0)
  {
    if ((int)v5 < 1) {
      return v13.f64[0];
    }
    uint64_t v17 = v5;
    if (v5 >= 4uLL
      && (v4 < (float64x2_t *)&v3->f64[v5]
        ? (BOOL v18 = v3 >= (float64x2_t *)&v4->f64[v5])
        : (BOOL v18 = 1),
          v18))
    {
      unint64_t v19 = v5 & 3;
      uint64_t v20 = v5 - v19;
      uint64_t v21 = v3 + 1;
      uint64_t v22 = v4 + 1;
      uint64_t v23 = v20;
      do
      {
        float64x2_t v13 = vdivq_f64(v22[-1], v21[-1]);
        float64x2_t v24 = vdivq_f64(*v22, *v21);
        v22[-1] = v13;
        *uint64_t v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (!v19) {
        return v13.f64[0];
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v30 = v17 - v20;
    uint64_t v31 = v20;
    uint64_t v32 = &v4->f64[v31];
    uint64_t v33 = &v3->f64[v31];
    do
    {
      double v34 = *v33++;
      v13.f64[0] = *v32 / v34;
      *v32++ = v13.f64[0];
      --v30;
    }
    while (v30);
    return v13.f64[0];
  }
  if ((int)v5 < 1) {
    return v13.f64[0];
  }
  uint64_t v6 = v5;
  if (v5 < 4uLL
    || (v4 < (float64x2_t *)&v3->f64[v5]
      ? (BOOL v7 = v3 >= (float64x2_t *)&v4->f64[v5])
      : (BOOL v7 = 1),
        !v7))
  {
    uint64_t v9 = 0;
LABEL_29:
    uint64_t v25 = v6 - v9;
    uint64_t v26 = v9;
    uint64_t v27 = &v4->f64[v26];
    double v28 = &v3->f64[v26];
    do
    {
      double v29 = *v28++;
      v13.f64[0] = v29 * *v27;
      *v27++ = v13.f64[0];
      --v25;
    }
    while (v25);
    return v13.f64[0];
  }
  unint64_t v8 = v5 & 3;
  uint64_t v9 = v5 - v8;
  uint64_t v10 = v3 + 1;
  double v11 = v4 + 1;
  uint64_t v12 = v9;
  do
  {
    float64x2_t v13 = vmulq_f64(v10[-1], v11[-1]);
    float64x2_t v14 = vmulq_f64(*v10, *v11);
    v11[-1] = v13;
    *double v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v8) {
    goto LABEL_29;
  }
  return v13.f64[0];
}

void sub_23CB9E1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

operations_research::glop::RevisedSimplex **std::unique_ptr<operations_research::glop::RevisedSimplex>::~unique_ptr[abi:ne180100](operations_research::glop::RevisedSimplex **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::glop::RevisedSimplex::~RevisedSimplex(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void ***std::unique_ptr<operations_research::glop::LinearProgram>::~unique_ptr[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::glop::LinearProgram::~LinearProgram(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::glop::LinearProgram::~LinearProgram(void **this)
{
  if (*((char *)this + 471) < 0) {
    operator delete(this[56]);
  }
  uint64_t v2 = (char *)this[50];
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = this + 48;
    do
    {
      if ((v4[(void)this[47]] & 0x80000000) == 0)
      {
        uint64_t v6 = *v5 + v3;
        if (*(char *)(v6 + 23) < 0)
        {
          operator delete(*(void **)v6);
          uint64_t v2 = (char *)this[50];
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(this[47]);
    this[47] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[52] = 0;
    this[49] = 0;
    this[50] = 0;
    *unint64_t v5 = 0;
  }
  BOOL v7 = this[51];
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  unint64_t v8 = (char *)this[44];
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    double v11 = this + 42;
    do
    {
      if ((v10[(void)this[41]] & 0x80000000) == 0)
      {
        uint64_t v12 = *v11 + v9;
        if (*(char *)(v12 + 23) < 0)
        {
          operator delete(*(void **)v12);
          unint64_t v8 = (char *)this[44];
        }
      }
      ++v10;
      v9 += 32;
    }
    while (v10 != v8);
    operator delete(this[41]);
    this[41] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[46] = 0;
    this[43] = 0;
    this[44] = 0;
    *double v11 = 0;
  }
  float64x2_t v13 = this[45];
  if (v13) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v13);
  }
  float64x2_t v14 = this[38];
  if (v14)
  {
    this[39] = v14;
    operator delete(v14);
  }
  uint64_t v15 = this[35];
  if (v15)
  {
    this[36] = v15;
    operator delete(v15);
  }
  uint64_t v16 = this[32];
  if (v16)
  {
    this[33] = v16;
    operator delete(v16);
  }
  uint64_t v17 = this[29];
  if (v17)
  {
    this[30] = v17;
    operator delete(v17);
  }
  BOOL v18 = (void **)this[26];
  if (v18)
  {
    unint64_t v19 = (void **)this[27];
    uint64_t v20 = this[26];
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = this[26];
    }
    this[27] = v18;
    operator delete(v20);
  }
  uint64_t v21 = this[23];
  if (v21)
  {
    this[24] = v21;
    operator delete(v21);
  }
  uint64_t v22 = this[20];
  if (v22)
  {
    this[21] = v22;
    operator delete(v22);
  }
  uint64_t v23 = this[17];
  if (v23)
  {
    this[18] = v23;
    operator delete(v23);
  }
  float64x2_t v24 = (void **)this[14];
  if (v24)
  {
    uint64_t v25 = (void **)this[15];
    uint64_t v26 = this[14];
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = this[14];
    }
    this[15] = v24;
    operator delete(v26);
  }
  uint64_t v27 = this[11];
  if (v27)
  {
    this[12] = v27;
    operator delete(v27);
  }
  double v28 = this[8];
  if (v28)
  {
    this[9] = v28;
    operator delete(v28);
  }
  double v29 = this[4];
  if (v29)
  {
    uint64_t v30 = this[5];
    uint64_t v31 = this[4];
    if (v30 != v29)
    {
      do
      {
        uint64_t v33 = *(v30 - 6);
        v30 -= 6;
        uint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          MEMORY[0x23ECF2BA0](v32, 0x1000C8077774924);
        }
      }
      while (v30 != v29);
      uint64_t v31 = this[4];
    }
    this[5] = v29;
    operator delete(v31);
  }
  double v34 = *this;
  if (*this)
  {
    uint64_t v35 = this[1];
    uint64_t v36 = *this;
    if (v35 != v34)
    {
      do
      {
        uint64_t v38 = *(v35 - 6);
        v35 -= 6;
        uint64_t v37 = v38;
        *uint64_t v35 = 0;
        if (v38) {
          MEMORY[0x23ECF2BA0](v37, 0x1000C8077774924);
        }
      }
      while (v35 != v34);
      uint64_t v36 = *this;
    }
    this[1] = v34;
    operator delete(v36);
  }
}

void operations_research::glop::RevisedSimplex::~RevisedSimplex(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v2 = (void *)*((void *)this + 1998);
  if (v2)
  {
    *((void *)this + 1999) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1992);
  *((void *)this + 1992) = 0;
  if (v3) {
    MEMORY[0x23ECF2BA0](v3, 0x1000C8077774924);
  }
  operations_research::glop::LuFactorization::~LuFactorization((operations_research::glop::RevisedSimplex *)((char *)this + 12208));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 11912));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::RevisedSimplex *)((char *)this + 11536));
  operations_research::glop::RevisedSimplex::RatioTestStats::~RatioTestStats((operations_research::glop::RevisedSimplex *)((char *)this + 10896));
  operations_research::glop::RevisedSimplex::IterationStats::~IterationStats((operations_research::glop::RevisedSimplex *)((char *)this + 10320));
  uint64_t v4 = (void *)*((void *)this + 1280);
  if (v4)
  {
    *((void *)this + 1281) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 1277);
  if (v5)
  {
    *((void *)this + 1278) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 1274);
  if (v6)
  {
    *((void *)this + 1275) = v6;
    operator delete(v6);
  }
  BOOL v7 = (char *)this + 6399;
  unint64_t v8 = (void *)*((void *)this + 1271);
  if (v8)
  {
    *((void *)this + 1272) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 1265);
  if (v9)
  {
    *((void *)this + 1266) = v9;
    operator delete(v9);
  }
  *((void *)this + 1254) = &unk_26F0BCDD8;
  if (*((char *)this + 10063) < 0) {
    operator delete(*((void **)this + 1255));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::RevisedSimplex *)((char *)this + 9952));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 9648));
  operations_research::glop::ReducedCosts::~ReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
  operations_research::glop::UpdateRow::~UpdateRow((operations_research::glop::RevisedSimplex *)((char *)this + 7840));
  operations_research::glop::PrimalEdgeNorms::~PrimalEdgeNorms((operations_research::glop::RevisedSimplex *)((char *)this + 6944));
  uint64_t v10 = (void *)*((void *)this + 864);
  if (v10)
  {
    *((void *)this + 865) = v10;
    operator delete(v10);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 6608));
  *((void *)this + 816) = &unk_26F0BCDD8;
  if (*((char *)this + 6559) < 0) {
    operator delete(*((void **)this + 817));
  }
  *((void *)this + 806) = &unk_26F0BCDD8;
  if (*((char *)this + 6479) < 0)
  {
    operator delete(*((void **)this + 807));
    *((void *)this + 796) = &unk_26F0BCDD8;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    *((void *)this + 796) = &unk_26F0BCDD8;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  operator delete(*((void **)this + 797));
LABEL_23:
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::RevisedSimplex *)((char *)this + 6288));
  operations_research::glop::VariableValues::~VariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
  operations_research::glop::VariablesInfo::~VariablesInfo((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  operations_research::glop::BasisFactorization::~BasisFactorization((operations_research::glop::RevisedSimplex *)((char *)this + 840));
  double v11 = (void *)*((void *)this + 102);
  if (v11)
  {
    *((void *)this + 103) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 98);
  if (v12) {
    operator delete(v12);
  }
  float64x2_t v13 = (void *)*((void *)this + 95);
  if (v13)
  {
    *((void *)this + 96) = v13;
    operator delete(v13);
  }
  float64x2_t v14 = (void *)*((void *)this + 91);
  if (v14)
  {
    *((void *)this + 92) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 87);
  if (v15)
  {
    *((void *)this + 88) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 84);
  if (v16)
  {
    *((void *)this + 85) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 81);
  if (v17)
  {
    *((void *)this + 82) = v17;
    operator delete(v17);
  }
  BOOL v18 = (void *)*((void *)this + 78);
  if (v18)
  {
    *((void *)this + 79) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 75);
  if (v19)
  {
    *((void *)this + 76) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 72);
  if (v20)
  {
    *((void *)this + 73) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *((void *)this + 68);
  if (v21)
  {
    uint64_t v22 = *((void *)this + 69);
    uint64_t v23 = (void *)*((void *)this + 68);
    if (v22 != v21)
    {
      do
      {
        if (*(char *)(v22 - 1) < 0) {
          operator delete(*(void **)(v22 - 24));
        }
        v22 -= 24;
      }
      while (v22 != v21);
      uint64_t v23 = (void *)*((void *)this + 68);
    }
    *((void *)this + 69) = v21;
    operator delete(v23);
  }
  float64x2_t v24 = (void *)*((void *)this + 65);
  if (v24)
  {
    *((void *)this + 66) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 62);
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 59);
  if (v26)
  {
    *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v26;
    operator delete(v26);
  }
  uint64_t v27 = (void *)*((void *)this + 55);
  if (v27)
  {
    *((void *)this + 56) = v27;
    operator delete(v27);
  }
  double v28 = (void *)*((void *)this + 49);
  if (v28)
  {
    *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v28;
    operator delete(v28);
  }
  double v29 = (void *)*((void *)this + 45);
  if (v29)
  {
    *((void *)this + 46) = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)*((void *)this + 41);
  if (v30)
  {
    *((void *)this + 42) = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)*((void *)this + 38);
  if (v31)
  {
    *((void *)this + 39) = v31;
    operator delete(v31);
  }
  uint64_t v32 = (void *)*((void *)this + 35);
  if (v32)
  {
    *((void *)this + 36) = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)*((void *)this + 32);
  if (v33)
  {
    *((void *)this + 33) = v33;
    operator delete(v33);
  }
  double v34 = (void *)*((void *)this + 27);
  if (v34)
  {
    *((void *)this + 28) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 24);
  if (v35)
  {
    *((void *)this + 25) = v35;
    operator delete(v35);
  }
  uint64_t v36 = (void *)*((void *)this + 19);
  if (v36)
  {
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v36;
    operator delete(v36);
  }
  uint64_t v37 = (void *)*((void *)this + 16);
  if (v37)
  {
    *((void *)this + 17) = v37;
    operator delete(v37);
  }
  uint64_t v38 = (void *)*((void *)this + 13);
  if (v38)
  {
    *((void *)this + 14) = v38;
    operator delete(v38);
  }
  uint64_t v39 = (void *)*((void *)this + 9);
  if (v39)
  {
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v39;
    operator delete(v39);
  }
  double v40 = (void *)*((void *)this + 6);
  if (v40)
  {
    *((void *)this + 7) = v40;
    operator delete(v40);
  }
  uint64_t v41 = (void *)*((void *)this + 3);
  if (v41)
  {
    *((void *)this + 4) = v41;
    operator delete(v41);
  }
}

uint64_t operations_research::glop::AreFirstColumnsAndRowsExactlyEquals(int a1, int a2, uint64_t *a3, uint64_t a4)
{
  if (*((_DWORD *)a3 + 6) < a1 || *(_DWORD *)a4 < a1) {
    return 0;
  }
  uint64_t v7 = *a3;
  if (a2 > (int)(-1431655765 * ((unint64_t)(a3[1] - *a3) >> 4)) || *(_DWORD *)(a4 + 4) < a2) {
    return 0;
  }
  if (a2 >= 1)
  {
    uint64_t v9 = 0;
    BOOL v5 = 0;
    uint64_t v10 = *(void *)(a4 + 56);
    uint64_t v11 = *(void *)(a4 + 32);
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    uint64_t v14 = *(void *)(a4 + 8);
    while (1)
    {
      uint64_t v16 = (void *)(v7 + 48 * v9);
      uint64_t v17 = *(void *)(v10 + 8 * v9++);
      uint64_t v18 = *(void *)(v10 + 8 * v9);
      uint64_t v19 = v18 - v17;
      uint64_t v20 = v16[1];
      BOOL v21 = v18 - v17 < v20;
      uint64_t v22 = v18 - v17 >= v20 ? v16[1] : v18 - v17;
      if (v21 && *(_DWORD *)(v16[3] + 4 * v19) < a1) {
        return v5;
      }
      uint64_t v23 = v11 + 4 * v17;
      if (v19 > v20 && *(_DWORD *)(v23 + 4 * v22) < a1) {
        return v5;
      }
      if (v22 >= 1)
      {
        uint64_t v24 = v14 + 8 * v17;
        uint64_t v25 = v16[3];
        BOOL v26 = v19 <= v20;
        if (v19 >= v20)
        {
          uint64_t v30 = 0;
          if (v26)
          {
            while (1)
            {
              int v28 = *(_DWORD *)(v25 + 4 * v30);
              int v29 = *(_DWORD *)(v23 + 4 * v30);
              if (v28 != v29) {
                break;
              }
              if (*(double *)(v16[4] + 8 * v30) != *(double *)(v24 + 8 * v30)) {
                return v5;
              }
              if (v22 == ++v30) {
                goto LABEL_21;
              }
            }
          }
          else
          {
            while (1)
            {
              int v28 = *(_DWORD *)(v25 + 4 * v30);
              int v29 = *(_DWORD *)(v23 + 4 * v30);
              if (v28 != v29) {
                break;
              }
              if (*(double *)(v16[4] + 8 * v30) != *(double *)(v24 + 8 * v30) || *(_DWORD *)(v23 + 4 * v22) < a1) {
                return v5;
              }
              if (v22 == ++v30) {
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          uint64_t v27 = 0;
          while (1)
          {
            int v28 = *(_DWORD *)(v25 + 4 * v27);
            int v29 = *(_DWORD *)(v23 + 4 * v27);
            if (v28 != v29) {
              break;
            }
            if (*(double *)(v16[4] + 8 * v27) != *(double *)(v24 + 8 * v27) || *(_DWORD *)(v25 + 4 * v19) < a1) {
              return v5;
            }
            if (v22 == ++v27) {
              goto LABEL_21;
            }
          }
        }
        if (v28 < a1 || v29 < a1) {
          return v5;
        }
      }
LABEL_21:
      BOOL v5 = v9 >= v12;
      if (v9 == v13) {
        return v5;
      }
    }
  }
  return 1;
}

uint64_t operations_research::glop::IsRightMostSquareMatrixIdentity(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  int v3 = v2 - v1;
  if ((int)v2 < v1) {
    return 0;
  }
  if (v1 >= 1)
  {
    uint64_t v5 = v3;
    for (uint64_t i = (double **)(*(void *)a1 + 48 * v3 + 32); *(i - 3) == (double *)1 && **i == 1.0; i += 6)
    {
      if (++v5 >= (int)v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t operations_research::glop::SparseMatrix::SparseMatrix(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

void *operations_research::glop::SparseMatrix::Clear(void *this)
{
  int v1 = this;
  unint64_t v2 = (void *)*this;
  int v3 = (void *)this[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*(v3 - 6);
    v3 -= 6;
    this = v4;
    *int v3 = 0;
    if (v4) {
      this = (void *)MEMORY[0x23ECF2BA0](this, 0x1000C8077774924);
    }
  }
  v1[1] = v2;
  *((_DWORD *)v1 + 6) = 0;
  return this;
}

void operations_research::glop::SparseMatrix::CleanUp(operations_research::glop::SparseMatrix *this, __n128 a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 48 * v2;
    do
    {
      operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(*(void *)this + v4, a2);
      v4 += 48;
    }
    while (v5 != v4);
  }
}

void operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(uint64_t a1, __n128 a2)
{
  int64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    std::string __p = 0;
    unint64_t v17 = 0;
    goto LABEL_28;
  }
  if ((unint64_t)v3 >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (__n128 *)operator new(16 * v3);
  uint64_t v5 = 0;
  uint64_t v6 = v4;
  uint64_t v7 = &v4[v3];
  do
  {
    while (1)
    {
      unsigned __int32 v8 = *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5);
      unint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v4 >= v7) {
        break;
      }
      v4->n128_u32[0] = v8;
      v4->n128_u64[1] = v9;
      ++v4;
      if (++v5 >= v3) {
        goto LABEL_22;
      }
    }
    uint64_t v10 = v4 - v6;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v7 - (char *)v6) >> 3 > v11) {
      unint64_t v11 = ((char *)v7 - (char *)v6) >> 3;
    }
    if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = (__n128 *)&v13[16 * v10];
    v14->n128_u32[0] = v8;
    v14->n128_u64[1] = v9;
    if (v4 == v6)
    {
      uint64_t v16 = (__n128 *)&v13[16 * v10];
      uint64_t v7 = (__n128 *)&v13[16 * v12];
      uint64_t v4 = v14 + 1;
      if (v6) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v15 = (__n128 *)&v13[16 * v10];
      do
      {
        uint64_t v16 = v15 - 1;
        a2 = v4[-1];
        v15[-1] = a2;
        --v4;
        --v15;
      }
      while (v4 != v6);
      uint64_t v7 = (__n128 *)&v13[16 * v12];
      uint64_t v4 = v14 + 1;
      if (v6)
      {
LABEL_17:
        operator delete(v6);
        int64_t v3 = *(void *)(a1 + 8);
      }
    }
    uint64_t v6 = v16;
    ++v5;
  }
  while (v5 < v3);
LABEL_22:
  std::string __p = v6;
  unint64_t v17 = v4 - v6;
  if ((char *)v4 - (char *)v6 >= 1)
  {
    uint64_t v18 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v19 = v4 - v6;
    while (1)
    {
      uint64_t v20 = (long long *)operator new(16 * v19, v18);
      if (v20) {
        break;
      }
      BOOL v21 = v19 > 1;
      v19 >>= 1;
      if (!v21) {
        goto LABEL_28;
      }
    }
    uint64_t v22 = v20;
  }
  else
  {
LABEL_28:
    uint64_t v22 = 0;
    unint64_t v19 = 0;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((uint64_t)v6, (long long *)v4, (uint64_t)&v29, v17, v22, v19, a2.n128_f64[0]);
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v23 < 1)
  {
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    if (__p) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v24 = 0;
    n128_f64 = __p[1].n128_f64;
    do
    {
      double v26 = *(n128_f64 - 1);
      if (v26 != 0.0)
      {
        int v27 = *((_DWORD *)n128_f64 - 4);
        if (v23 == 1 || v27 != *(_DWORD *)n128_f64)
        {
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v24) = v27;
          *(double *)(*(void *)(a1 + 32) + 8 * v24++) = v26;
        }
      }
      n128_f64 += 2;
      --v23;
    }
    while (v23);
    *(void *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
LABEL_42:
    operator delete(__p);
  }
}

void sub_23CB9F01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::SparseMatrix::SetNumRows(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t operations_research::glop::SparseMatrix::AppendEmptyColumn(operations_research::glop::SparseMatrix *this)
{
  uint64_t v3 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  memset(v9, 0, 41);
  if (v2 >= *((void *)this + 2))
  {
    uint64_t v6 = std::vector<operations_research::glop::SparseColumn>::__push_back_slow_path<operations_research::glop::SparseColumn>((void **)this, (uint64_t *)v9);
    uint64_t v7 = *(void *)&v9[0];
    *((void *)this + 1) = v6;
    *(void *)&v9[0] = 0;
    if (v7) {
      MEMORY[0x23ECF2BA0](v7, 0x1000C8077774924);
    }
  }
  else
  {
    *(void *)unint64_t v2 = 0;
    long long v4 = *(_OWORD *)((char *)v9 + 8);
    long long v5 = *(_OWORD *)((char *)&v9[1] + 8);
    *(unsigned char *)(v2 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = BYTE8(v9[2]);
    *(_OWORD *)(v2 + 24) = v5;
    *(_OWORD *)(v2 + 8) = v4;
    *((void *)this + 1) = v2 + 48;
  }
  return -1431655765 * ((v2 - v3) >> 4);
}

void sub_23CB9F128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x23ECF2BA0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::SparseMatrix::ComputeMinAndMaxMagnitudes(operations_research::glop::SparseMatrix *this, double *a2, double *a3)
{
  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 371, 2);
    unint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"min_magnitude", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" == NULL", 8);
LABEL_20:
    google::LogMessage::~LogMessage((google::LogMessage *)v15);
    return;
  }
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 372, 2);
    uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"max_magnitude", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" == NULL", 8);
    goto LABEL_20;
  }
  *a2 = INFINITY;
  *a3 = 0.0;
  uint64_t v3 = *(void *)this;
  if ((int)(-1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4)) < 1) {
    goto LABEL_17;
  }
  uint64_t v4 = 0;
  uint64_t v5 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  double v6 = 0.0;
  do
  {
    uint64_t v7 = v3 + 48 * v4;
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8 >= 1)
    {
      unint64_t v9 = *(double **)(v7 + 32);
      do
      {
        if (*v9 != 0.0)
        {
          double v6 = fabs(*v9);
          double v10 = *a2;
          if (v6 < *a2) {
            double v10 = v6;
          }
          *a2 = v10;
          if (*a3 >= v6) {
            double v6 = *a3;
          }
          *a3 = v6;
        }
        ++v9;
        --v8;
      }
      while (v8);
    }
    ++v4;
  }
  while (v4 != v5);
  if (v6 == 0.0) {
LABEL_17:
  }
    *a2 = 0.0;
}

void sub_23CB9F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB9F2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::SparseMatrix::num_entries(operations_research::glop::SparseMatrix *this)
{
  uint64_t v1 = *(void *)this;
  int v2 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  if (v2 < 1) {
    return 0;
  }
  unint64_t v3 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  if (v3 >= 5)
  {
    uint64_t v6 = v2 & 3;
    if (!v6) {
      uint64_t v6 = 4;
    }
    unint64_t v4 = v3 - v6;
    uint64_t v7 = (int64x2_t *)(v1 + 104);
    int64x2_t v8 = 0uLL;
    unint64_t v9 = v4;
    int64x2_t v10 = 0uLL;
    do
    {
      int64x2_t v11 = v7[-3];
      int64x2_t v12 = v7[-6];
      int64x2_t v13 = v7[3];
      int64x2_t v14 = *v7;
      v7 += 12;
      int64x2_t v8 = vaddq_s64(vzip1q_s64(v12, v11), v8);
      int64x2_t v10 = vaddq_s64(vzip1q_s64(v14, v13), v10);
      v9 -= 4;
    }
    while (v9);
    uint64_t result = vaddvq_s64(vaddq_s64(v10, v8));
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t result = 0;
  }
  unint64_t v15 = v3 - v4;
  uint64_t v16 = (uint64_t *)(v1 + 48 * v4 + 8);
  do
  {
    uint64_t v17 = *v16;
    v16 += 6;
    result += v17;
    --v15;
  }
  while (v15);
  return result;
}

void operations_research::glop::CompactSparseMatrix::PopulateFromMatrixView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16) - v4;
  unint64_t v6 = v5 >> 3;
  *(_DWORD *)(a1 + 4) = v5 >> 3;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if ((int)(v5 >> 3) < 1)
  {
    unint64_t v9 = 0;
    goto LABEL_11;
  }
  unint64_t v7 = (v5 >> 3);
  if (v7 < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
LABEL_8:
    unint64_t v15 = v8 - v7;
    uint64_t v16 = (uint64_t *)(v4 + 8 * v8);
    do
    {
      uint64_t v17 = *v16++;
      v9 += *(void *)(v17 + 8);
    }
    while (!__CFADD__(v15++, 1));
    goto LABEL_11;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (v5 >> 3) & 1;
  unint64_t v8 = v7 - v12;
  uint64_t v13 = v4 + 8;
  unint64_t v14 = v7 - v12;
  do
  {
    v10 += *(void *)(*(void *)(v13 - 8) + 8);
    v11 += *(void *)(*(void *)v13 + 8);
    v13 += 16;
    v14 -= 2;
  }
  while (v14);
  unint64_t v9 = v11 + v10;
  if (v12) {
    goto LABEL_8;
  }
LABEL_11:
  *(void *)__u = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(a1 + 56, (uint64_t)((v6 << 32) + 0x100000000) >> 32, (uint64_t *)__u);
  *(void *)__u = 0;
  std::vector<double>::assign(a1 + 8, v9, (uint64_t *)__u);
  __u[0] = 0;
  std::vector<int>::assign((std::vector<int> *)(a1 + 32), v9, __u);
  uint64_t v19 = *(void *)(a2 + 8);
  unint64_t v20 = *(void *)(a2 + 16) - v19;
  unint64_t v21 = v20 >> 3;
  uint64_t v22 = *(void *)(a1 + 56);
  if ((int)(v20 >> 3) >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = (v20 >> 3);
    while (1)
    {
      *(void *)(v22 + 8 * v23) = v24;
      double v26 = *(void **)(v19 + 8 * v23);
      uint64_t v27 = v26[1];
      if (v27 >= 1)
      {
        uint64_t v29 = v26[3];
        uint64_t v28 = v26[4];
        uint64_t v30 = *(void *)(a1 + 8);
        uint64_t v31 = *(void *)(a1 + 32);
        if ((unint64_t)v27 >= 0xC)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 8 * v24;
          if ((unint64_t)(8 * v24 + v30 - v28) >= 0x40)
          {
            uint64_t v34 = 4 * v24;
            if ((unint64_t)(4 * v24 + v31 - v29) >= 0x20)
            {
              uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
              v24 += v27 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v35 = (long long *)(v28 + 32);
              uint64_t v36 = (_OWORD *)(v31 + v34 + 16);
              uint64_t v37 = (long long *)(v29 + 16);
              uint64_t v38 = (_OWORD *)(v30 + v33 + 32);
              unint64_t v39 = v27 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                long long v41 = *(v35 - 2);
                long long v40 = *(v35 - 1);
                long long v43 = *v35;
                long long v42 = v35[1];
                v35 += 4;
                *(v38 - 2) = v41;
                *(v38 - 1) = v40;
                _OWORD *v38 = v43;
                v38[1] = v42;
                v38 += 4;
                long long v44 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *uint64_t v36 = v44;
                v36 += 2;
                v37 += 2;
                v39 -= 8;
              }
              while (v39);
              if (v27 == v32) {
                goto LABEL_13;
              }
            }
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        float64x2_t v45 = (uint64_t *)(v28 + 8 * v32);
        uint64_t v46 = v27 - v32;
        double v47 = (_DWORD *)(v29 + 4 * v32);
        do
        {
          uint64_t v48 = *v45++;
          *(void *)(v30 + 8 * v24) = v48;
          LODWORD(v48) = *v47++;
          *(_DWORD *)(v31 + 4 * v24++) = v48;
          --v46;
        }
        while (v46);
      }
LABEL_13:
      if (++v23 == v25) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v24 = 0;
LABEL_26:
  *(void *)(v22 + 8 * (int)v21) = v24;
}

void operations_research::glop::CompactSparseMatrix::PopulateFromTranspose(operations_research::glop::CompactSparseMatrix *this, const operations_research::glop::CompactSparseMatrix *a2)
{
  uint64_t v4 = *(int *)a2;
  *((_DWORD *)this + 1) = v4;
  *(_DWORD *)this = *((_DWORD *)a2 + 1);
  unint64_t v5 = (uint64_t *)((char *)this + 56);
  uint64_t v41 = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)this + 56, v4 + 2, &v41);
  unint64_t v6 = (int *)*((void *)a2 + 4);
  unint64_t v7 = (int *)*((void *)a2 + 5);
  for (uint64_t i = *((void *)this + 7); v6 != v7; ++*(void *)(i + 8 * v9 + 16))
    uint64_t v9 = *v6++;
  uint64_t v10 = *((void *)this + 8);
  if ((int)((unint64_t)(v10 - i) >> 3) >= 3)
  {
    uint64_t v11 = ((unint64_t)(v10 - i) >> 3);
    uint64_t v12 = *(void *)(i + 8);
    uint64_t v13 = (void *)(i + 16);
    uint64_t v14 = v11 - 2;
    do
    {
      v12 += *v13;
      *v13++ = v12;
      --v14;
    }
    while (v14);
  }
  uint64_t v15 = *((void *)this + 1);
  uint64_t v16 = *((void *)this + 2);
  unint64_t v17 = *(void *)(v10 - 8);
  uint64_t v41 = 0;
  unint64_t v18 = (v16 - v15) >> 3;
  if (v17 <= v18)
  {
    if (v17 < v18) {
      *((void *)this + 2) = v15 + 8 * v17;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 8, v17 - v18, &v41);
    uint64_t v10 = *((void *)this + 8);
  }
  uint64_t v19 = *((void *)this + 4);
  unint64_t v20 = *(void *)(v10 - 8);
  unint64_t v21 = (*((void *)this + 5) - v19) >> 2;
  if (v20 <= v21)
  {
    if (v20 < v21) {
      *((void *)this + 5) = v19 + 4 * v20;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 32), v20 - v21, operations_research::glop::kInvalidRow);
    uint64_t v10 = *((void *)this + 8);
  }
  *((void *)this + 8) = v10 - 8;
  int v22 = *((_DWORD *)a2 + 1);
  if (v22 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *((void *)a2 + 7);
    uint64_t v25 = *((void *)a2 + 4);
    uint64_t v26 = *((void *)a2 + 1);
    do
    {
      uint64_t v27 = *(void *)(v24 + 8 * v23);
      uint64_t v28 = v23 + 1;
      uint64_t v29 = *(void *)(v24 + 8 * (v23 + 1));
      BOOL v30 = v29 <= v27;
      uint64_t v31 = v29 - v27;
      if (!v30)
      {
        uint64_t v32 = *v5;
        uint64_t v33 = *((void *)this + 1);
        uint64_t v34 = (int *)(v25 + 4 * v27);
        uint64_t v35 = *((void *)this + 4);
        uint64_t v36 = (uint64_t *)(v26 + 8 * v27);
        do
        {
          uint64_t v37 = *v34++;
          uint64_t v38 = v32 + 8 * v37;
          uint64_t v39 = *(void *)(v38 + 8);
          *(void *)(v38 + 8) = v39 + 1;
          uint64_t v40 = *v36++;
          *(void *)(v33 + 8 * v39) = v40;
          *(_DWORD *)(v35 + 4 * v39) = v23;
          --v31;
        }
        while (v31);
        int v22 = *((_DWORD *)a2 + 1);
      }
      ++v23;
    }
    while (v28 < v22);
  }
}

void operations_research::glop::TriangularMatrix::PopulateFromTranspose(operations_research::glop::TriangularMatrix *this, char **a2)
{
  operations_research::glop::CompactSparseMatrix::PopulateFromTranspose(this, (const operations_research::glop::CompactSparseMatrix *)a2);
  if (this != (operations_research::glop::TriangularMatrix *)a2) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 10, a2[10], a2[11], (a2[11] - a2[10]) >> 3);
  }
  *((unsigned char *)this + 108) = *((unsigned char *)a2 + 108);
  int v4 = *((_DWORD *)this + 1);
  uint64_t v25 = 0;
  uint64_t v5 = *((void *)this + 32);
  unint64_t v6 = (*((void *)this + 33) - v5) >> 3;
  if (v4 <= v6)
  {
    if (v4 < v6) {
      *((void *)this + 33) = v5 + 8 * v4;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 256, v4 - v6, &v25);
    int v4 = *((_DWORD *)this + 1);
  }
  if (v4 >= 1)
  {
    uint64_t v7 = *((void *)this + 7);
    uint64_t v8 = *((void *)this + 32);
    uint64_t v9 = v4;
    if (v4 < 6 || (unint64_t)(v8 - v7 - 8) < 0x20)
    {
      uint64_t v10 = 0;
LABEL_11:
      uint64_t v11 = (void *)(v8 + 8 * v10);
      uint64_t v12 = v9 - v10;
      uint64_t v13 = (uint64_t *)(8 * v10 + v7 + 8);
      do
      {
        uint64_t v14 = *v13++;
        *v11++ = v14;
        --v12;
      }
      while (v12);
      goto LABEL_13;
    }
    uint64_t v10 = v4 & 0x7FFFFFFC;
    unint64_t v21 = (long long *)(v7 + 24);
    int v22 = (_OWORD *)(v8 + 16);
    uint64_t v23 = v9 & 0xFFFFFFFC;
    do
    {
      long long v24 = *v21;
      *(v22 - 1) = *(v21 - 1);
      *int v22 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 4;
    }
    while (v23);
    if (v10 != v9) {
      goto LABEL_11;
    }
  }
LABEL_13:
  *((_DWORD *)this + 26) = 0;
  uint64_t v15 = *((void *)this + 10);
  uint64_t v16 = *((void *)this + 11) - v15;
  if ((int)((unint64_t)v16 >> 3) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *((void *)this + 7);
    uint64_t v19 = (int)(v16 >> 3);
    uint64_t v20 = 0x100000000;
    do
    {
      if (*(void *)(v18 + (v20 >> 29)) != *(void *)(v18 + 8 * v17)) {
        break;
      }
      if (*(double *)(v15 + 8 * v17) != 1.0) {
        break;
      }
      *((_DWORD *)this + 26) = ++v17;
      v20 += 0x100000000;
    }
    while (v19 != v17);
  }
}

void operations_research::glop::CompactSparseMatrix::Reset(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  uint64_t v2 = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v2);
}

void gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(uint64_t a1, void *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
}

void operations_research::glop::TriangularMatrix::Reset(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 56);
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  uint64_t v15 = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v15);
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 1;
  unint64_t v6 = (int)a3;
  uint64_t v7 = *(void *)(a1 + 256);
  unint64_t v8 = (*(void *)(a1 + 264) - v7) >> 3;
  if ((int)a3 <= v8)
  {
    if ((int)a3 < v8) {
      *(void *)(a1 + 264) = v7 + 8 * (int)a3;
    }
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 256, (int)a3 - v8);
  }
  uint64_t v9 = a3 << 32;
  uint64_t v10 = *(void *)(a1 + 80);
  unint64_t v11 = (*(void *)(a1 + 88) - v10) >> 3;
  if (v6 <= v11)
  {
    if (v6 < v11) {
      *(void *)(a1 + 88) = v10 + 8 * v6;
    }
  }
  else
  {
    std::vector<double>::__append(a1 + 80, v6 - v11);
  }
  unint64_t v12 = (v9 + 0x100000000) >> 32;
  unint64_t v13 = *(void **)(a1 + 56);
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 64) - (void)v13) >> 3;
  if (v12 > v14)
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v5, v12 - v14);
    unint64_t v13 = (void *)*v5;
LABEL_11:
    *unint64_t v13 = 0;
    return;
  }
  if (v12 >= v14) {
    goto LABEL_11;
  }
  *(void *)(a1 + 64) = &v13[v12];
  *unint64_t v13 = 0;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddDenseColumn(uint64_t a1, void *a2)
{
  uint64_t v3 = (a2[1] - *a2) >> 3;
  int v8 = 0;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      if (*(double *)(*a2 + 8 * v5) != 0.0)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v8);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, (void *)(*a2 + 8 * v8));
        int v5 = v8;
      }
      int v8 = ++v5;
    }
    while (v5 < (int)v3);
  }
  uint64_t v7 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v7);
  uint64_t result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddDenseColumnPrefix(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = (a2[1] - *a2) >> 3;
  for (int i = a3; a3 < (int)v4; int i = a3)
  {
    if (*(double *)(*a2 + 8 * a3) != 0.0)
    {
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &i);
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, (void *)(*a2 + 8 * i));
      a3 = i;
    }
    ++a3;
  }
  uint64_t v7 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v7);
  uint64_t result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddDenseColumnWithNonZeros(uint64_t a1, void *a2, int **a3)
{
  int v5 = *a3;
  unint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    uint64_t v7 = (a2[1] - *a2) >> 3;
    LODWORD(v11) = 0;
    if ((int)v7 >= 1)
    {
      int v8 = 0;
      do
      {
        if (*(double *)(*a2 + 8 * v8) != 0.0)
        {
          gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v11);
          gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, (void *)(*a2 + 8 * SLODWORD(v11)));
          int v8 = LODWORD(v11);
        }
        LODWORD(v11) = ++v8;
      }
      while (v8 < (int)v7);
    }
  }
  else
  {
    do
    {
      int v10 = *v5;
      double v11 = 0.0;
      double v11 = *(double *)(*a2 + 8 * v10);
      if (v11 != 0.0)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v10);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v11);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  *(void *)&double v11 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v11);
  uint64_t result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddAndClearColumnWithNonZeros(uint64_t a1, uint64_t *a2, int **a3)
{
  int v5 = *a3;
  unint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    uint64_t v8 = *a2;
    do
    {
      int v11 = *v5;
      *(double *)&double v10 = 0.0;
      double v10 = *(uint64_t *)(v8 + 8 * v11);
      if (*(double *)&v10 != 0.0)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v11);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v10);
        uint64_t v8 = *a2;
        *(void *)(*a2 + 8 * v11) = 0;
      }
      ++v5;
    }
    while (v5 != v6);
    int v5 = *a3;
  }
  a3[1] = v5;
  double v10 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v10);
  uint64_t result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

int *operations_research::glop::TriangularMatrix::Swap(int *this, operations_research::glop::TriangularMatrix *a2)
{
  int v2 = *this;
  *this = *(_DWORD *)a2;
  *(_DWORD *)a2 = v2;
  int v3 = this[1];
  this[1] = *((_DWORD *)a2 + 1);
  *((_DWORD *)a2 + 1) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  uint64_t v13 = *((void *)this + 10);
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  LODWORD(v15) = this[26];
  this[26] = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v15;
  LOBYTE(v15) = *((unsigned char *)this + 108);
  *((unsigned char *)this + 108) = *((unsigned char *)a2 + 108);
  *((unsigned char *)a2 + 108) = v15;
  return this;
}

double operations_research::glop::CompactSparseMatrixView::ComputeInfinityNorm(operations_research::glop::CompactSparseMatrixView *this)
{
  uint64_t v1 = *(void **)this;
  int v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = **(int **)this;
  uint64_t v4 = **(unsigned int **)this;
  if (!v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *v2;
    unint64_t v7 = v2[1] - *v2;
    if ((int)(v7 >> 2) < 1) {
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  if ((v3 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = operator new(8 * v4);
  bzero(v5, 8 * v3);
  uint64_t v6 = *v2;
  unint64_t v7 = v2[1] - *v2;
  if ((int)(v7 >> 2) >= 1)
  {
LABEL_6:
    uint64_t v8 = 0;
    uint64_t v9 = v1[7];
    uint64_t v10 = v1[4];
    uint64_t v11 = (v7 >> 2);
    uint64_t v12 = v1[1];
    do
    {
      uint64_t v13 = *(int *)(v6 + 4 * v8);
      uint64_t v14 = *(void *)(v9 + 8 * v13);
      uint64_t v15 = *(void *)(v9 + (((v13 << 32) + 0x100000000) >> 29)) - v14;
      if (v15 >= 1)
      {
        unint64_t v16 = (int *)(v10 + 4 * v14);
        uint64_t v17 = (double *)(v12 + 8 * v14);
        do
        {
          double v18 = *v17++;
          double v19 = fabs(v18);
          uint64_t v20 = *v16++;
          *((double *)v5 + v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v19 + *((double *)v5 + v20);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v11);
  }
LABEL_12:
  double v21 = 0.0;
  if ((int)v4 >= 1)
  {
    long long v22 = (double *)v5;
    do
    {
      double v23 = *v22++;
      double v24 = v23;
      if (v21 < v23) {
        double v21 = v24;
      }
      --v4;
    }
    while (v4);
    goto LABEL_19;
  }
  if (v5) {
LABEL_19:
  }
    operator delete(v5);
  return v21;
}

uint64_t operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn(uint64_t this, double a2)
{
  uint64_t v2 = *(int *)(this + 4);
  uint64_t v3 = 8 * v2;
  *(double *)(*(void *)(this + 80) + v3) = a2;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(this + 16);
  uint64_t v6 = (v4 - v5) >> 3;
  *(void *)(*(void *)(this + 256) + v3) = v6;
  *(_DWORD *)(this + 4) = v2 + 1;
  *(void *)(*(void *)(this + 56) + 8 * ((int)v2 + 1)) = v6;
  if (*(_DWORD *)(this + 104) == v2 && a2 == 1.0 && v5 == v4) {
    *(_DWORD *)(this + 104) = v2 + 1;
  }
  BOOL v9 = a2 == 1.0 && *(unsigned char *)(this + 108) != 0;
  *(unsigned char *)(this + 108) = v9;
  return this;
}

void operations_research::glop::TriangularMatrix::AddTriangularColumn(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  if (*a2 < 1)
  {
    double v8 = 0.0;
  }
  else
  {
    uint64_t v6 = (int *)a2[1];
    unint64_t v7 = (double *)a2[2];
    double v8 = 0.0;
    do
    {
      while (1)
      {
        int v11 = *v6++;
        int v10 = v11;
        if (v11 == a3) {
          break;
        }
        int v21 = v10;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v21);
        uint64_t v9 = *(void *)v7++;
        uint64_t v20 = v9;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v20);
        if (!--v4) {
          goto LABEL_8;
        }
      }
      double v12 = *v7++;
      double v8 = v12;
      --v4;
    }
    while (v4);
  }
LABEL_8:
  uint64_t v13 = *(int *)(a1 + 4);
  uint64_t v14 = 8 * v13;
  *(double *)(*(void *)(a1 + 80) + v14) = v8;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v17 = (v15 - v16) >> 3;
  *(void *)(*(void *)(a1 + 256) + v14) = v17;
  *(_DWORD *)(a1 + 4) = v13 + 1;
  *(void *)(*(void *)(a1 + 56) + 8 * ((int)v13 + 1)) = v17;
  if (*(_DWORD *)(a1 + 104) == v13 && v8 == 1.0 && v16 == v15) {
    *(_DWORD *)(a1 + 104) = v13 + 1;
  }
  BOOL v19 = v8 == 1.0 && *(unsigned char *)(a1 + 108) != 0;
  *(unsigned char *)(a1 + 108) = v19;
}

void operations_research::glop::TriangularMatrix::AddAndNormalizeTriangularColumn(uint64_t a1, void *a2, int a3, double a4)
{
  uint64_t v5 = a2[1];
  if (v5 >= 1)
  {
    double v8 = (int *)a2[3];
    uint64_t v9 = (double *)a2[4];
    do
    {
      int v11 = *v8++;
      int v10 = v11;
      if (v11 != a3 && *v9 != 0.0)
      {
        int v18 = v10;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v18);
        double v17 = *v9 / a4;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v17);
      }
      ++v9;
      --v5;
    }
    while (v5);
  }
  uint64_t v12 = *(int *)(a1 + 4);
  uint64_t v13 = 8 * v12;
  *(void *)(*(void *)(a1 + 80) + v13) = 0x3FF0000000000000;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v16 = (v14 - v15) >> 3;
  *(void *)(*(void *)(a1 + 256) + v13) = v16;
  *(_DWORD *)(a1 + 4) = v12 + 1;
  *(void *)(*(void *)(a1 + 56) + 8 * ((int)v12 + 1)) = v16;
  if (*(_DWORD *)(a1 + 104) == v12 && v15 == v14) {
    *(_DWORD *)(a1 + 104) = v12 + 1;
  }
}

void operations_research::glop::TriangularMatrix::AddTriangularColumnWithGivenDiagonalEntry(uint64_t a1, void *a2, double a3)
{
  uint64_t v5 = a2[1];
  if (v5 >= 1)
  {
    uint64_t v6 = (int *)a2[3];
    unint64_t v7 = (uint64_t *)a2[4];
    do
    {
      int v8 = *v6++;
      int v18 = v8;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v18);
      uint64_t v9 = *v7++;
      uint64_t v17 = v9;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v17);
      --v5;
    }
    while (v5);
  }
  uint64_t v10 = *(int *)(a1 + 4);
  uint64_t v11 = 8 * v10;
  *(double *)(*(void *)(a1 + 80) + v11) = a3;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v14 = (v12 - v13) >> 3;
  *(void *)(*(void *)(a1 + 256) + v11) = v14;
  *(_DWORD *)(a1 + 4) = v10 + 1;
  *(void *)(*(void *)(a1 + 56) + 8 * ((int)v10 + 1)) = v14;
  if (*(_DWORD *)(a1 + 104) == v10 && a3 == 1.0 && v13 == v12) {
    *(_DWORD *)(a1 + 104) = v10 + 1;
  }
  BOOL v16 = a3 == 1.0 && *(unsigned char *)(a1 + 108) != 0;
  *(unsigned char *)(a1 + 108) = v16;
}

uint64_t operations_research::glop::TriangularMatrix::ApplyRowPermutationToNonDiagonalEntries(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(int **)(result + 32);
  uint64_t v3 = *(void *)(result + 40) - (void)v2;
  if (v3 >= 1)
  {
    uint64_t v4 = (unint64_t)v3 >> 2;
    uint64_t v5 = *a2;
    if (v4 <= 1) {
      uint64_t v4 = 1;
    }
    do
    {
      *uint64_t v2 = *(_DWORD *)(v5 + 4 * *v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void operations_research::glop::TriangularMatrix::CopyColumnToSparseColumn(void *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  int v4 = a2;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  uint64_t v5 = a1[7];
  uint64_t v6 = *(void *)(v5 + 8 * (int)a2);
  uint64_t v7 = *(void *)(v5 + (((a2 << 32) + 0x100000000) >> 29));
  if (v6 >= v7)
  {
    uint64_t v11 = *(void *)(a1[10] + 8 * (int)a2);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_13;
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v10 = *(void *)(a1[1] + 8 * v6);
      if (v8 == *(void *)(a3 + 16) && (!v8 || v8 < 2 * v8)) {
        operator new[]();
      }
      uint64_t v9 = *(void *)(a3 + 32);
      *(_DWORD *)(*(void *)(a3 + 24) + 4 * v8) = *(_DWORD *)(a1[4] + 4 * v6);
      *(void *)(v9 + 8 * v8++) = v10;
      *(void *)(a3 + 8) = v8;
      *(unsigned char *)(a3 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
      ++v6;
    }
    while (v7 != v6);
    uint64_t v11 = *(void *)(a1[10] + 8 * (int)a2);
    if (v8 == *(void *)(a3 + 16))
    {
      int v4 = a2;
      if (!v8 || v8 < 2 * v8) {
LABEL_13:
      }
        operator new[]();
    }
    else
    {
      int v4 = a2;
    }
  }
  uint64_t v12 = *(void *)(a3 + 32);
  *(_DWORD *)(*(void *)(a3 + 24) + 4 * v8) = v4;
  *(void *)(a3 + 8) = v8 + 1;
  *(void *)(v12 + 8 * v8) = v11;
  *(unsigned char *)(a3 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;

  operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(a3, a4);
}

void operations_research::glop::TriangularMatrix::LowerSolve(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<true>(a1, 0, a2);
  }
  else {
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<false>(a1, 0, a2);
  }
}

void operations_research::glop::TriangularMatrix::LowerSolveStartingAt(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 108)) {
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<true>(a1, a2, a3);
  }
  else {
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<false>(a1, a2, a3);
  }
}

void operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<true>(uint64_t a1, int a2, uint64_t *a3)
{
  if (a3)
  {
    uint64_t v3 = *(int *)(a1 + 104);
    if ((int)v3 <= a2) {
      int v4 = a2;
    }
    else {
      int v4 = *(_DWORD *)(a1 + 104);
    }
    uint64_t v5 = (*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
    if (v4 < (int)v5)
    {
      uint64_t v6 = *a3;
      if (v3 <= a2) {
        uint64_t v3 = a2;
      }
      int v7 = v3 + v5 - v4;
      do
      {
        double v8 = *(double *)(v6 + 8 * v3);
        if (v8 != 0.0)
        {
          uint64_t v9 = *(void *)(a1 + 56);
          uint64_t v10 = *(void *)(v9 + 8 * v3);
          uint64_t v11 = *(void *)(v9 + (((v3 << 32) + 0x100000000) >> 29));
          BOOL v12 = v11 <= v10;
          uint64_t v13 = v11 - v10;
          if (!v12)
          {
            double v14 = -v8;
            uint64_t v15 = (double *)(*(void *)(a1 + 8) + 8 * v10);
            BOOL v16 = (int *)(*(void *)(a1 + 32) + 4 * v10);
            do
            {
              double v17 = *v15++;
              double v18 = v17;
              uint64_t v19 = *v16++;
              *(double *)(v6 + 8 * v19) = *(double *)(v6 + 8 * v19) + v14 * v18;
              --v13;
            }
            while (v13);
          }
        }
        ++v3;
      }
      while (v7 != v3);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 753, 2);
    uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v22);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v22);
  }
}

void sub_23CBA09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<false>(uint64_t a1, int a2, uint64_t *a3)
{
  if (a3)
  {
    uint64_t v3 = *(int *)(a1 + 104);
    if ((int)v3 <= a2) {
      int v4 = a2;
    }
    else {
      int v4 = *(_DWORD *)(a1 + 104);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    unint64_t v6 = (unint64_t)(*(void *)(a1 + 88) - v5) >> 3;
    if (v4 < (int)v6)
    {
      uint64_t v7 = *a3;
      if (v3 <= a2) {
        uint64_t v3 = a2;
      }
      int v8 = v3 + v6 - v4;
      do
      {
        double v9 = *(double *)(v7 + 8 * v3);
        if (v9 != 0.0)
        {
          double v10 = v9 / *(double *)(v5 + 8 * v3);
          *(double *)(v7 + 8 * v3) = v10;
          uint64_t v11 = *(void *)(a1 + 56);
          uint64_t v12 = *(void *)(v11 + 8 * v3);
          uint64_t v13 = *(void *)(v11 + (((v3 << 32) + 0x100000000) >> 29));
          BOOL v14 = v13 <= v12;
          uint64_t v15 = v13 - v12;
          if (!v14)
          {
            double v16 = -v10;
            double v17 = (double *)(*(void *)(a1 + 8) + 8 * v12);
            double v18 = (int *)(*(void *)(a1 + 32) + 4 * v12);
            do
            {
              double v19 = *v17++;
              double v20 = v19;
              uint64_t v21 = *v18++;
              *(double *)(v7 + 8 * v21) = *(double *)(v7 + 8 * v21) + v16 * v20;
              --v15;
            }
            while (v15);
          }
        }
        ++v3;
      }
      while (v8 != v3);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 753, 2);
    long long v22 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
    double v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
}

void sub_23CBA0B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::UpperSolve(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    operations_research::glop::TriangularMatrix::UpperSolveInternal<true>(a1, a2);
  }
  else {
    operations_research::glop::TriangularMatrix::UpperSolveInternal<false>(a1, a2);
  }
}

void operations_research::glop::TriangularMatrix::UpperSolveInternal<true>(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(int *)(a1 + 104);
    uint64_t v3 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
    if ((int)v2 < (int)((unint64_t)v3 >> 3))
    {
      uint64_t v4 = *a2;
      uint64_t v5 = (int)(v3 >> 3);
      do
      {
        uint64_t v6 = v5--;
        double v7 = *(double *)(v4 + 8 * v5);
        if (v7 != 0.0)
        {
          uint64_t v8 = *(void *)(a1 + 56);
          uint64_t v9 = *(void *)(v8 + 8 * v5);
          uint64_t v10 = *(void *)(v8 + 8 * v6);
          if (v10 > v9)
          {
            double v11 = -v7;
            uint64_t v12 = *(void *)(a1 + 8) - 8;
            uint64_t v13 = *(void *)(a1 + 32) - 4;
            do
            {
              uint64_t v14 = 8 * *(int *)(v13 + 4 * v10);
              *(double *)(v4 + v14) = *(double *)(v4 + v14) + v11 * *(double *)(v12 + 8 * v10--);
            }
            while (v10 > v9);
          }
        }
      }
      while (v5 > v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 780, 2);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
    double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
}

void sub_23CBA0C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::UpperSolveInternal<false>(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(int *)(a1 + 104);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = *(void *)(a1 + 88) - v3;
    if ((int)v2 < (int)((unint64_t)v4 >> 3))
    {
      uint64_t v5 = *a2;
      uint64_t v6 = (int)(v4 >> 3);
      do
      {
        uint64_t v7 = v6 - 1;
        double v8 = *(double *)(v5 + 8 * (v6 - 1));
        if (v8 != 0.0)
        {
          double v9 = v8 / *(double *)(v3 + 8 * v7);
          *(double *)(v5 + 8 * v7) = v9;
          uint64_t v10 = *(void *)(a1 + 56);
          uint64_t v11 = *(void *)(v10 + 8 * v7);
          uint64_t v12 = *(void *)(v10 + 8 * v6);
          if (v12 > v11)
          {
            double v13 = -v9;
            uint64_t v14 = *(void *)(a1 + 8) - 8;
            uint64_t v15 = *(void *)(a1 + 32) - 4;
            do
            {
              uint64_t v16 = 8 * *(int *)(v15 + 4 * v12);
              *(double *)(v5 + v16) = *(double *)(v5 + v16) + v13 * *(double *)(v14 + 8 * v12--);
            }
            while (v12 > v11);
          }
        }
        uint64_t v6 = v7;
      }
      while (v7 > v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 780, 2);
    double v17 = (void *)google::LogMessage::stream((google::LogMessage *)v19);
    double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
}

void sub_23CBA0D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeUpperSolve(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<true>(a1, a2);
  }
  else {
    operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<false>(a1, a2);
  }
}

void operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<true>(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(int *)(a1 + 4);
    uint64_t v3 = *(int *)(a1 + 104);
    if ((int)v3 < (int)v2)
    {
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t v6 = *a2;
      do
      {
        double v7 = *(double *)(v6 + 8 * v3);
        uint64_t v8 = v3 + 1;
        uint64_t v9 = *(void *)(v4 + 8 * (v3 + 1));
        uint64_t v10 = v9 - v5;
        if (v9 > v5)
        {
          uint64_t v11 = (double *)(*(void *)(a1 + 8) + 8 * v5);
          uint64_t v12 = (int *)(*(void *)(a1 + 32) + 4 * v5);
          do
          {
            double v13 = *v11++;
            double v14 = v13;
            uint64_t v15 = *v12++;
            double v7 = v7 - v14 * *(double *)(v6 + 8 * v15);
            --v10;
          }
          while (v10);
          uint64_t v5 = *(void *)(v4 + 8 * (v3 + 1));
        }
        *(double *)(v6 + 8 * v3++) = v7;
      }
      while (v8 != v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v18, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 811, 2);
    uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v18);
    double v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v18);
  }
}

void sub_23CBA0E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<false>(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(int *)(a1 + 4);
    uint64_t v3 = *(int *)(a1 + 104);
    if ((int)v3 < (int)v2)
    {
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t v6 = *a2;
      uint64_t v7 = *(void *)(a1 + 80);
      do
      {
        double v8 = *(double *)(v6 + 8 * v3);
        uint64_t v9 = v3 + 1;
        uint64_t v10 = *(void *)(v4 + 8 * (v3 + 1));
        uint64_t v11 = v10 - v5;
        if (v10 > v5)
        {
          uint64_t v12 = (double *)(*(void *)(a1 + 8) + 8 * v5);
          double v13 = (int *)(*(void *)(a1 + 32) + 4 * v5);
          do
          {
            double v14 = *v12++;
            double v15 = v14;
            uint64_t v16 = *v13++;
            double v8 = v8 - v15 * *(double *)(v6 + 8 * v16);
            --v11;
          }
          while (v11);
          uint64_t v5 = *(void *)(v4 + 8 * (v3 + 1));
        }
        *(double *)(v6 + 8 * v3) = v8 / *(double *)(v7 + 8 * v3);
        ++v3;
      }
      while (v9 != v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 811, 2);
    double v17 = (void *)google::LogMessage::stream((google::LogMessage *)v19);
    double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
}

void sub_23CBA0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeLowerSolve(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<true>(a1, a2);
  }
  else {
    operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<false>(a1, a2);
  }
}

void operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<true>(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(int *)(a1 + 104);
    uint64_t v3 = *(int *)(a1 + 4);
    uint64_t v4 = v3 << 32;
    int v5 = v3 + 1;
    while (v3 > v2)
    {
      uint64_t v6 = *a2;
      uint64_t v7 = *a2 + 8 * v3--;
      v4 -= 0x100000000;
      --v5;
      if (*(double *)(v7 - 8) != 0.0)
      {
        if ((int)v2 < v5)
        {
          uint64_t v8 = *(void *)(a1 + 56);
          uint64_t v9 = *(void *)(v8 + ((v4 + 0x100000000) >> 29)) - 1;
          uint64_t v10 = v4 >> 32;
          do
          {
            double v14 = *(double *)(v6 + 8 * v10);
            uint64_t v15 = *(void *)(v8 + 8 * v10);
            if (v9 >= v15)
            {
              do
              {
                double v14 = v14
                    - *(double *)(*(void *)(a1 + 8) + 8 * v9)
                    * *(double *)(v6 + 8 * *(int *)(*(void *)(a1 + 32) + 4 * v9));
                BOOL v13 = __OFSUB__(v9, v15);
                BOOL v11 = v9 == v15;
                BOOL v12 = v9 - v15 < 0;
                --v9;
              }
              while (!(v12 ^ v13 | v11));
              uint64_t v9 = v15 - 1;
            }
            *(double *)(v6 + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v14;
            BOOL v13 = __OFSUB__(v10, v2);
            BOOL v11 = v10 == v2;
            BOOL v12 = v10 - v2 < 0;
            --v10;
          }
          while (!(v12 ^ v13 | v11));
        }
        return;
      }
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v18, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 841, 2);
    uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v18);
    double v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v18);
  }
}

void sub_23CBA10C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<false>(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(int *)(a1 + 104);
    uint64_t v3 = *(int *)(a1 + 4);
    uint64_t v4 = v3 << 32;
    int v5 = v3 + 1;
    while (v3 > v2)
    {
      uint64_t v6 = *a2;
      uint64_t v7 = *a2 + 8 * v3--;
      v4 -= 0x100000000;
      --v5;
      if (*(double *)(v7 - 8) != 0.0)
      {
        if ((int)v2 < v5)
        {
          uint64_t v8 = *(void *)(a1 + 56);
          uint64_t v9 = *(void *)(v8 + ((v4 + 0x100000000) >> 29)) - 1;
          uint64_t v10 = *(void *)(a1 + 80);
          uint64_t v11 = v4 >> 32;
          do
          {
            double v15 = *(double *)(v6 + 8 * v11);
            uint64_t v16 = *(void *)(v8 + 8 * v11);
            if (v9 >= v16)
            {
              do
              {
                double v15 = v15
                    - *(double *)(*(void *)(a1 + 8) + 8 * v9)
                    * *(double *)(v6 + 8 * *(int *)(*(void *)(a1 + 32) + 4 * v9));
                BOOL v14 = __OFSUB__(v9, v16);
                BOOL v12 = v9 == v16;
                BOOL v13 = v9 - v16 < 0;
                --v9;
              }
              while (!(v13 ^ v14 | v12));
              uint64_t v9 = v16 - 1;
            }
            *(double *)(v6 + 8 * v11) = v15 / *(double *)(v10 + 8 * v11);
            BOOL v14 = __OFSUB__(v11, v2);
            BOOL v12 = v11 == v2;
            BOOL v13 = v11 - v2 < 0;
            --v11;
          }
          while (!(v13 ^ v14 | v12));
        }
        return;
      }
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 841, 2);
    double v17 = (void *)google::LogMessage::stream((google::LogMessage *)v19);
    double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
}

void sub_23CBA120C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::HyperSparseSolve(void *a1, uint64_t *a2, std::vector<int> *this)
{
  if (*((unsigned char *)a1 + 108)) {
    operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<true>(a1, a2, this);
  }
  else {
    operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<false>(a1, a2, this);
  }
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<true>(void *a1, uint64_t *a2, std::vector<int> *this)
{
  if (a2)
  {
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    if (this->__begin_ == end)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = 0;
      uint64_t v6 = *a2;
      std::vector<int>::pointer v7 = this->__begin_;
      do
      {
        uint64_t v8 = *v7;
        double v9 = *(double *)(v6 + 8 * (int)v8);
        if (v9 != 0.0)
        {
          uint64_t v10 = a1[7];
          uint64_t v11 = *(void *)(v10 + 8 * (int)v8);
          uint64_t v12 = *(void *)(v10 + (((v8 << 32) + 0x100000000) >> 29));
          BOOL v13 = v12 <= v11;
          uint64_t v14 = v12 - v11;
          if (!v13)
          {
            double v15 = -v9;
            uint64_t v16 = (double *)(a1[1] + 8 * v11);
            double v17 = (int *)(a1[4] + 4 * v11);
            do
            {
              double v18 = *v16++;
              double v19 = v18;
              uint64_t v20 = *v17++;
              *(double *)(v6 + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(double *)(v6 + 8 * v20) + v15 * v19;
              --v14;
            }
            while (v14);
          }
          begin[v5++] = v8;
        }
        ++v7;
      }
      while (v7 != end);
    }
    unint64_t v23 = end - begin;
    if (v5 <= v23)
    {
      if (v5 < v23) {
        this->__end_ = &begin[v5];
      }
    }
    else
    {
      std::vector<int>::__append(this, v5 - v23);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 881, 2);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
    long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
}

void sub_23CBA1394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<false>(void *a1, uint64_t *a2, std::vector<int> *this)
{
  if (a2)
  {
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    if (this->__begin_ == end)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = 0;
      uint64_t v6 = *a2;
      std::vector<int>::pointer v7 = this->__begin_;
      do
      {
        uint64_t v8 = *v7;
        double v9 = *(double *)(v6 + 8 * (int)v8);
        if (v9 != 0.0)
        {
          uint64_t v10 = 8 * (int)v8;
          double v11 = v9 / *(double *)(a1[10] + v10);
          *(double *)(v6 + v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v11;
          uint64_t v12 = a1[7];
          uint64_t v13 = *(void *)(v12 + v10);
          uint64_t v14 = *(void *)(v12 + (((v8 << 32) + 0x100000000) >> 29));
          BOOL v15 = v14 <= v13;
          uint64_t v16 = v14 - v13;
          if (!v15)
          {
            double v17 = -v11;
            double v18 = (double *)(a1[1] + 8 * v13);
            double v19 = (int *)(a1[4] + 4 * v13);
            do
            {
              double v20 = *v18++;
              double v21 = v20;
              uint64_t v22 = *v19++;
              *(double *)(v6 + 8 * v22) = *(double *)(v6 + 8 * v22) + v17 * v21;
              --v16;
            }
            while (v16);
          }
          begin[v5++] = v8;
        }
        ++v7;
      }
      while (v7 != end);
    }
    unint64_t v25 = end - begin;
    if (v5 <= v25)
    {
      if (v5 < v25) {
        this->__end_ = &begin[v5];
      }
    }
    else
    {
      std::vector<int>::__append(this, v5 - v25);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 881, 2);
    unint64_t v23 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    double v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
}

void sub_23CBA1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZeros(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*((unsigned char *)a1 + 108)) {
    operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<true>(a1, a2, a3);
  }
  else {
    operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<false>(a1, a2, a3);
  }
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<true>(void *a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = *(_DWORD **)a3;
    uint64_t v4 = *(unsigned char **)(a3 + 8);
    unint64_t v6 = (unint64_t)&v4[-*(void *)a3] >> 2;
    if (v4 != *(unsigned char **)a3)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *(_DWORD **)(a3 + 8);
      do
      {
        unsigned int v10 = *--v8;
        uint64_t v9 = v10;
        double v11 = *(double *)(v7 + 8 * (int)v10);
        if (v11 != 0.0)
        {
          uint64_t v12 = a1[7];
          uint64_t v13 = *(void *)(v12 + 8 * (int)v9);
          uint64_t v14 = *(void *)(v12 + (((v9 << 32) + 0x100000000) >> 29));
          BOOL v15 = v14 <= v13;
          uint64_t v16 = v14 - v13;
          if (!v15)
          {
            double v17 = -v11;
            double v18 = (double *)(a1[1] + 8 * v13);
            double v19 = (int *)(a1[4] + 4 * v13);
            do
            {
              double v20 = *v18++;
              double v21 = v20;
              uint64_t v22 = *v19++;
              *(double *)(v7 + 8 * v22) = *(double *)(v7 + 8 * v22) + v17 * v21;
              --v16;
            }
            while (v16);
          }
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v9;
        }
      }
      while (v8 != v5);
    }
    if (v6)
    {
      unint64_t v23 = (char *)&v5[(int)v6];
      uint64_t v24 = v4 - v23;
      if (v4 != v23) {
        memmove(v5, v23, v4 - v23);
      }
      *(void *)(a3 + 8) = (char *)v5 + v24;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 911, 2);
    unint64_t v25 = (void *)google::LogMessage::stream((google::LogMessage *)v27);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v27);
  }
}

void sub_23CBA1690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<false>(void *a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = *(_DWORD **)a3;
    uint64_t v4 = *(unsigned char **)(a3 + 8);
    unint64_t v6 = (unint64_t)&v4[-*(void *)a3] >> 2;
    if (v4 != *(unsigned char **)a3)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *(_DWORD **)(a3 + 8);
      do
      {
        unsigned int v10 = *--v8;
        uint64_t v9 = v10;
        double v11 = *(double *)(v7 + 8 * (int)v10);
        if (v11 != 0.0)
        {
          uint64_t v12 = 8 * (int)v9;
          double v13 = v11 / *(double *)(a1[10] + v12);
          *(double *)(v7 + v12) = v13;
          uint64_t v14 = a1[7];
          uint64_t v15 = *(void *)(v14 + v12);
          uint64_t v16 = *(void *)(v14 + (((v9 << 32) + 0x100000000) >> 29));
          BOOL v17 = v16 <= v15;
          uint64_t v18 = v16 - v15;
          if (!v17)
          {
            double v19 = -v13;
            double v20 = (double *)(a1[1] + 8 * v15);
            double v21 = (int *)(a1[4] + 4 * v15);
            do
            {
              double v22 = *v20++;
              double v23 = v22;
              uint64_t v24 = *v21++;
              *(double *)(v7 + 8 * v24) = *(double *)(v7 + 8 * v24) + v19 * v23;
              --v18;
            }
            while (v18);
          }
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v9;
        }
      }
      while (v8 != v5);
    }
    if (v6)
    {
      unint64_t v25 = (char *)&v5[(int)v6];
      uint64_t v26 = v4 - v25;
      if (v4 != v25) {
        memmove(v5, v25, v4 - v25);
      }
      *(void *)(a3 + 8) = (char *)v5 + v26;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 911, 2);
    uint64_t v27 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v29);
  }
}

void sub_23CBA1804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolve(void *a1, uint64_t *a2, std::vector<int> *this)
{
  if (*((unsigned char *)a1 + 108)) {
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<true>(a1, a2, this);
  }
  else {
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<false>(a1, a2, this);
  }
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<true>(void *a1, uint64_t *a2, std::vector<int> *this)
{
  if (a2)
  {
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    if (this->__begin_ == end)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = 0;
      uint64_t v6 = *a2;
      uint64_t v7 = a1[7];
      std::vector<int>::pointer v8 = this->__begin_;
      do
      {
        uint64_t v9 = *v8;
        double v10 = *(double *)(v6 + 8 * v9);
        uint64_t v11 = *(void *)(v7 + 8 * v9);
        uint64_t v12 = *(void *)(v7 + (((v9 << 32) + 0x100000000) >> 29));
        BOOL v13 = v12 <= v11;
        uint64_t v14 = v12 - v11;
        if (!v13)
        {
          uint64_t v15 = (double *)(a1[1] + 8 * v11);
          uint64_t v16 = (int *)(a1[4] + 4 * v11);
          do
          {
            double v17 = *v15++;
            double v18 = v17;
            uint64_t v19 = *v16++;
            double v10 = v10 - v18 * *(double *)(v6 + 8 * v19);
            --v14;
          }
          while (v14);
        }
        *(double *)(v6 + 8 * v9) = v10;
        if (v10 != 0.0) {
          begin[v5++] = v9;
        }
        ++v8;
      }
      while (v8 != end);
    }
    unint64_t v22 = end - begin;
    if (v5 <= v22)
    {
      if (v5 < v22) {
        this->__end_ = &begin[v5];
      }
    }
    else
    {
      std::vector<int>::__append(this, v5 - v22);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v23, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 942, 2);
    double v20 = (void *)google::LogMessage::stream((google::LogMessage *)v23);
    double v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v23);
  }
}

void sub_23CBA1984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<false>(void *a1, uint64_t *a2, std::vector<int> *this)
{
  if (a2)
  {
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    if (this->__begin_ == end)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = 0;
      uint64_t v6 = *a2;
      uint64_t v7 = a1[7];
      std::vector<int>::pointer v8 = this->__begin_;
      uint64_t v9 = a1[10];
      do
      {
        uint64_t v10 = *v8;
        double v11 = *(double *)(v6 + 8 * v10);
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        uint64_t v13 = *(void *)(v7 + (((v10 << 32) + 0x100000000) >> 29));
        BOOL v14 = v13 <= v12;
        uint64_t v15 = v13 - v12;
        if (!v14)
        {
          uint64_t v16 = (double *)(a1[1] + 8 * v12);
          double v17 = (int *)(a1[4] + 4 * v12);
          do
          {
            double v18 = *v16++;
            double v19 = v18;
            uint64_t v20 = *v17++;
            double v11 = v11 - v19 * *(double *)(v6 + 8 * v20);
            --v15;
          }
          while (v15);
        }
        *(double *)(v6 + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v11 / *(double *)(v9 + 8 * v10);
        if (v11 != 0.0) {
          begin[v5++] = v10;
        }
        ++v8;
      }
      while (v8 != end);
    }
    unint64_t v23 = end - begin;
    if (v5 <= v23)
    {
      if (v5 < v23) {
        this->__end_ = &begin[v5];
      }
    }
    else
    {
      std::vector<int>::__append(this, v5 - v23);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 942, 2);
    double v21 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
}

void sub_23CBA1B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZeros(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*((unsigned char *)a1 + 108)) {
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<true>(a1, a2, a3);
  }
  else {
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<false>(a1, a2, a3);
  }
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<true>(void *a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = *(_DWORD **)a3;
    uint64_t v4 = *(unsigned char **)(a3 + 8);
    unint64_t v6 = (unint64_t)&v4[-*(void *)a3] >> 2;
    if (v4 != *(unsigned char **)a3)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a1[7];
      uint64_t v9 = *(_DWORD **)(a3 + 8);
      do
      {
        int v11 = *--v9;
        int v10 = v11;
        uint64_t v12 = 8 * v11;
        double v13 = *(double *)(v7 + v12);
        uint64_t v14 = *(void *)(v8 + 8 * (v11 + 1));
        for (uint64_t i = *(void *)(v8 + v12); v14 > i; --v14)
          double v13 = v13 - *(double *)(a1[1] - 8 + 8 * v14) * *(double *)(v7 + 8 * *(int *)(a1[4] - 4 + 4 * v14));
        *(double *)(v7 + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v13;
        if (v13 != 0.0)
        {
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v10;
        }
      }
      while (v9 != v5);
    }
    if (v6)
    {
      uint64_t v16 = (char *)&v5[(int)v6];
      uint64_t v17 = v4 - v16;
      if (v4 != v16) {
        memmove(v5, v16, v4 - v16);
      }
      *(void *)(a3 + 8) = (char *)v5 + v17;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v20, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 974, 2);
    double v18 = (void *)google::LogMessage::stream((google::LogMessage *)v20);
    double v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v20);
  }
}

void sub_23CBA1C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<false>(void *a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = *(_DWORD **)a3;
    uint64_t v4 = *(unsigned char **)(a3 + 8);
    unint64_t v6 = (unint64_t)&v4[-*(void *)a3] >> 2;
    if (v4 != *(unsigned char **)a3)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a1[7];
      uint64_t v9 = *(_DWORD **)(a3 + 8);
      uint64_t v10 = a1[10];
      do
      {
        int v12 = *--v9;
        int v11 = v12;
        uint64_t v13 = 8 * v12;
        double v14 = *(double *)(v7 + v13);
        uint64_t v15 = *(void *)(v8 + 8 * (v12 + 1));
        for (uint64_t i = *(void *)(v8 + v13); v15 > i; --v15)
          double v14 = v14 - *(double *)(a1[1] - 8 + 8 * v15) * *(double *)(v7 + 8 * *(int *)(a1[4] - 4 + 4 * v15));
        *(double *)(v7 + 8 * v11) = v14 / *(double *)(v10 + 8 * v11);
        if (v14 != 0.0)
        {
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v11;
        }
      }
      while (v9 != v5);
    }
    if (v6)
    {
      uint64_t v17 = (char *)&v5[(int)v6];
      uint64_t v18 = v4 - v17;
      if (v4 != v17) {
        memmove(v5, v17, v4 - v17);
      }
      *(void *)(a3 + 8) = (char *)v5 + v18;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v21, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 974, 2);
    double v19 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v21);
  }
}

void sub_23CBA1DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::TriangularMatrix::PermutedLowerSparseSolve(int *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v47, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 1043, 2);
    double v14 = (void *)google::LogMessage::stream((google::LogMessage *)v47);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"lower_column", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" == NULL", 8);
LABEL_7:
    google::LogMessage::~LogMessage((google::LogMessage *)v47);
    return;
  }
  if (!a5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v47, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 1044, 2);
    uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v47);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"upper_column", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" == NULL", 8);
    goto LABEL_7;
  }
  operations_research::glop::TriangularMatrix::PermutedComputeRowsToConsider(a1, a2, a3, (char **)a1 + 20, (void *)a1 + 23);
  uint64_t v9 = *((void *)a1 + 26);
  uint64_t v10 = *((void *)a1 + 27);
  int v11 = (uint64_t *)(a1 + 52);
  unint64_t v12 = *a1;
  v47[0] = 0;
  unint64_t v13 = (v10 - v9) >> 3;
  if (v12 <= v13)
  {
    if (v12 < v13) {
      *((void *)a1 + 27) = v9 + 8 * v12;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)(a1 + 52), v12 - v13, v47);
  }
  uint64_t v18 = *a2;
  if (*a2 >= 1)
  {
    double v19 = (int *)a2[1];
    uint64_t v20 = (uint64_t *)a2[2];
    uint64_t v21 = *v11;
    do
    {
      uint64_t v22 = *v20++;
      uint64_t v23 = v22;
      uint64_t v24 = *v19++;
      *(void *)(v21 + 8 * v24) = v23;
      --v18;
    }
    while (v18);
  }
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  if (*(void *)(a5 + 16) < *(void *)(a5 + 8) + ((uint64_t)(*((void *)a1 + 24) - *((void *)a1 + 23)) >> 2)) {
    operator new[]();
  }
  uint64_t v26 = *((void *)a1 + 23);
  uint64_t v25 = *((void *)a1 + 24);
  while (v25 != v26)
  {
    int v28 = *(_DWORD *)(v25 - 4);
    v25 -= 4;
    int v27 = v28;
    double v29 = *(double *)(*v11 + 8 * v28);
    if (v29 != 0.0)
    {
      *(void *)(*v11 + 8 * v27) = 0;
      uint64_t v30 = *(unsigned int *)(*a3 + 4 * v27);
      uint64_t v31 = *(void *)(a5 + 8);
      if (v31 == *(void *)(a5 + 16) && (!v31 || v31 < 2 * v31)) {
        operator new[]();
      }
      *(void *)(a5 + 8) = v31 + 1;
      *(_DWORD *)(*(void *)(a5 + 24) + 4 * v31) = v27;
      *(double *)(*(void *)(a5 + 32) + 8 * v31) = v29;
      *(unsigned char *)(a5 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
      uint64_t v32 = *((void *)a1 + 7);
      uint64_t v33 = *(void *)(v32 + 8 * (int)v30);
      uint64_t v34 = *(void *)(v32 + (((v30 << 32) + 0x100000000) >> 29)) - v33;
      if (v34 >= 1)
      {
        uint64_t v35 = (int *)(*((void *)a1 + 4) + 4 * v33);
        uint64_t v36 = (double *)(*((void *)a1 + 1) + 8 * v33);
        uint64_t v37 = *v11;
        do
        {
          double v38 = *v36++;
          double v39 = v38;
          uint64_t v40 = *v35++;
          *(double *)(v37 + 8 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(double *)(v37 + 8 * v40) - v39 * v29;
          --v34;
        }
        while (v34);
      }
    }
  }
  if (*(void *)(a4 + 16) < (uint64_t)(*((void *)a1 + 21) - *((void *)a1 + 20)) >> 2) {
    operator new[]();
  }
  uint64_t v41 = (int *)*((void *)a1 + 20);
  long long v42 = (int *)*((void *)a1 + 21);
  if (v41 != v42)
  {
    uint64_t v43 = *(void *)(a4 + 8);
    do
    {
      uint64_t v44 = *v41;
      uint64_t v45 = *(void *)(*v11 + 8 * v44);
      *(void *)(*v11 + 8 * v44) = 0;
      if (v43 == *(void *)(a4 + 16) && (!v43 || v43 < 2 * v43)) {
        operator new[]();
      }
      *(void *)(a4 + 8) = v43 + 1;
      *(_DWORD *)(*(void *)(a4 + 24) + 4 * v43) = v44;
      *(void *)(*(void *)(a4 + 32) + 8 * v43) = v45;
      *(unsigned char *)(a4 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 1;
      ++v41;
      ++v43;
    }
    while (v41 != v42);
  }
}

void sub_23CBA231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CBA2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::PermutedComputeRowsToConsider(void *a1, uint64_t *a2, void *a3, char **a4, void *a5)
{
  v172 = a1 + 14;
  std::vector<BOOL>::resize((uint64_t)(a1 + 14), *(int *)a1, 0);
  std::vector<BOOL>::resize((uint64_t)(a1 + 29), *(int *)a1, 0);
  v171 = a4;
  a4[1] = *a4;
  v168 = a5;
  a5[1] = *a5;
  v173 = (void **)(a1 + 17);
  a1[18] = a1[17];
  uint64_t v9 = *a2;
  if (*a2 < 1) {
    goto LABEL_163;
  }
  uint64_t v10 = 0;
  uint64_t v11 = a2[1];
  unint64_t v12 = a4;
  uint64_t v169 = v11;
  do
  {
    int v14 = *(_DWORD *)(v11 + 4 * v10);
    if ((*(_DWORD *)(*a3 + 4 * v14) & 0x80000000) == 0)
    {
      uint64_t v16 = (char *)a1[18];
      unint64_t v15 = a1[19];
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)uint64_t v16 = v14;
        uint64_t v13 = (uint64_t)(v16 + 4);
LABEL_4:
        a1[18] = v13;
        goto LABEL_5;
      }
      uint64_t v17 = (char *)*v173;
      uint64_t v18 = v16 - (unsigned char *)*v173;
      uint64_t v19 = v18 >> 2;
      unint64_t v20 = (v18 >> 2) + 1;
      if (v20 >> 62) {
LABEL_170:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v21 = v15 - (void)v17;
      if (v21 >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 >> 62) {
          goto LABEL_171;
        }
        uint64_t v23 = operator new(4 * v22);
        uint64_t v24 = &v23[4 * v19];
        _DWORD *v24 = v14;
        uint64_t v13 = (uint64_t)(v24 + 1);
        if (v16 == v17) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (_DWORD *)(4 * v19);
        *(_DWORD *)(4 * v19) = v14;
        uint64_t v13 = 4 * v19 + 4;
        if (v16 == v17)
        {
LABEL_37:
          a1[17] = v24;
          a1[18] = v13;
          a1[19] = &v23[4 * v22];
          if (v17) {
            operator delete(v17);
          }
          uint64_t v11 = v169;
          unint64_t v12 = v171;
          goto LABEL_4;
        }
      }
      unint64_t v36 = v16 - 4 - v17;
      if (v36 < 0x2C) {
        goto LABEL_176;
      }
      if ((unint64_t)(v16 - &v23[v18]) < 0x20) {
        goto LABEL_176;
      }
      uint64_t v37 = (v36 >> 2) + 1;
      uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      double v39 = &v16[-v38];
      uint64_t v24 = (_DWORD *)((char *)v24 - v38);
      uint64_t v40 = &v23[4 * v19 - 16];
      uint64_t v41 = v16 - 16;
      uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *uint64_t v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      uint64_t v16 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_176:
        do
        {
          int v44 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--uint64_t v24 = v44;
        }
        while (v16 != v17);
      }
      goto LABEL_37;
    }
    *(void *)(*v172 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v26 = v12[1];
    unint64_t v25 = (unint64_t)v12[2];
    if ((unint64_t)v26 < v25)
    {
      *(_DWORD *)uint64_t v26 = v14;
      v12[1] = v26 + 4;
      goto LABEL_5;
    }
    int v27 = *v12;
    uint64_t v28 = v26 - *v12;
    uint64_t v29 = v28 >> 2;
    unint64_t v30 = (v28 >> 2) + 1;
    if (v30 >> 62) {
LABEL_172:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v31 = v25 - (void)v27;
    if (v31 >> 1 > v30) {
      unint64_t v30 = v31 >> 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 >> 62) {
LABEL_171:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v33 = operator new(4 * v32);
      uint64_t v34 = &v33[4 * v29];
      *(_DWORD *)uint64_t v34 = v14;
      uint64_t v35 = (uint64_t)(v34 + 4);
      if (v26 == v27) {
        goto LABEL_47;
      }
LABEL_41:
      unint64_t v45 = v26 - 4 - v27;
      if (v45 < 0x2C) {
        goto LABEL_177;
      }
      if ((unint64_t)(v26 - &v33[v28]) < 0x20) {
        goto LABEL_177;
      }
      uint64_t v46 = (v45 >> 2) + 1;
      uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v48 = &v26[-v47];
      v34 -= v47;
      unint64_t v49 = &v33[4 * v29 - 16];
      double v50 = v26 - 16;
      uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v52 = *(_OWORD *)v50;
        *(v49 - 1) = *((_OWORD *)v50 - 1);
        *unint64_t v49 = v52;
        v49 -= 2;
        v50 -= 32;
        v51 -= 8;
      }
      while (v51);
      uint64_t v26 = v48;
      if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_177:
        do
        {
          int v53 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v53;
          v34 -= 4;
        }
        while (v26 != v27);
      }
      goto LABEL_47;
    }
    uint64_t v33 = 0;
    uint64_t v34 = (char *)(4 * v29);
    *(_DWORD *)(4 * v29) = v14;
    uint64_t v35 = 4 * v29 + 4;
    if (v26 != v27) {
      goto LABEL_41;
    }
LABEL_47:
    unint64_t v54 = &v33[4 * v32];
    unint64_t v12 = v171;
    *v171 = v34;
    v171[1] = (char *)v35;
    v171[2] = v54;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v11 = v169;
    v171[1] = (char *)v35;
LABEL_5:
    ++v10;
  }
  while (v10 != v9);
  unsigned __int8 v56 = (char *)a1[17];
  uint64_t v55 = (char *)a1[18];
  if (v56 != v55)
  {
    while (1)
    {
      uint64_t v57 = v55 - 4;
      unint64_t v58 = *((unsigned int *)v55 - 1);
      if ((v58 & 0x80000000) != 0) {
        break;
      }
      uint64_t v59 = *(void *)(*v172 + 8 * (v58 >> 6));
      if ((v59 & (1 << v58)) == 0)
      {
        uint64_t v67 = *(int *)(*a3 + 4 * v58);
        if ((v67 & 0x80000000) == 0)
        {
          unint64_t v68 = a1[19];
          if ((unint64_t)v55 < v68)
          {
            *(_DWORD *)uint64_t v55 = -1;
            v55 += 4;
            goto LABEL_118;
          }
          uint64_t v82 = (v55 - v56) >> 2;
          unint64_t v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62) {
            goto LABEL_170;
          }
          uint64_t v84 = v68 - (void)v56;
          if (v84 >> 1 > v83) {
            unint64_t v83 = v84 >> 1;
          }
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v85 = v83;
          }
          if (v85)
          {
            if (v85 >> 62) {
              goto LABEL_171;
            }
            int8x8_t v86 = operator new(4 * v85);
          }
          else
          {
            int8x8_t v86 = 0;
          }
          double v115 = &v86[4 * v82];
          _DWORD *v115 = -1;
          unint64_t v116 = v55 - 4 - v56;
          if (v116 < 0xBC
            || &v86[v55 - v56 - 4 - (v116 & 0xFFFFFFFFFFFFFFFCLL)] > &v86[v55 - v56 - 4]
            || &v57[-(v116 & 0xFFFFFFFFFFFFFFFCLL)] > v57
            || (unint64_t)(v56 - v86) < 0x20)
          {
            uint64_t v117 = v55;
            uint64_t v118 = &v86[4 * v82];
            goto LABEL_115;
          }
          uint64_t v153 = (v116 >> 2) + 1;
          uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v117 = &v55[-v154];
          uint64_t v118 = (char *)&v115[v154 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v155 = &v86[4 * v82 - 16];
          uint64_t v156 = v55 - 16;
          uint64_t v157 = v153 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v158 = *(_OWORD *)v156;
            *(v155 - 1) = *((_OWORD *)v156 - 1);
            *uint64_t v155 = v158;
            v155 -= 2;
            v156 -= 32;
            v157 -= 8;
          }
          while (v157);
          if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_115:
              int v119 = *((_DWORD *)v117 - 1);
              v117 -= 4;
              *((_DWORD *)v118 - 1) = v119;
              v118 -= 4;
            }
            while (v117 != v56);
          }
          uint64_t v55 = (char *)(v115 + 1);
          a1[17] = v118;
          a1[18] = v115 + 1;
          a1[19] = &v86[4 * v85];
          if (v56) {
            operator delete(v56);
          }
LABEL_118:
          a1[18] = v55;
          uint64_t v120 = *(void *)(a1[32] + 8 * v67);
          uint64_t v121 = *(void *)(a1[7] + 8 * v67);
          if (v121 >= v120) {
            goto LABEL_53;
          }
          uint64_t v167 = v120;
          while (2)
          {
            int v123 = *(_DWORD *)(a1[4] + 4 * v121);
            unint64_t v124 = (unint64_t)v123 >> 6;
            if (((1 << v123) & *(void *)(a1[14] + 8 * v124)) == 0)
            {
              unint64_t v125 = a1[19];
              if ((unint64_t)v55 < v125)
              {
                *(_DWORD *)uint64_t v55 = v123;
                uint64_t v122 = (uint64_t)(v55 + 4);
              }
              else
              {
                uint64_t v126 = (char *)*v173;
                uint64_t v127 = v55 - (unsigned char *)*v173;
                uint64_t v128 = v127 >> 2;
                unint64_t v129 = (v127 >> 2) + 1;
                if (v129 >> 62) {
                  goto LABEL_170;
                }
                uint64_t v130 = v125 - (void)v126;
                if (v130 >> 1 > v129) {
                  unint64_t v129 = v130 >> 1;
                }
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
                }
                unint64_t v170 = v129;
                if (v129)
                {
                  if (v129 >> 62) {
                    goto LABEL_171;
                  }
                  uint64_t v131 = operator new(4 * v129);
                  long long v132 = &v131[4 * v128];
                  *long long v132 = v123;
                  uint64_t v122 = (uint64_t)(v132 + 1);
                  if (v55 != v126)
                  {
LABEL_133:
                    unint64_t v133 = v55 - 4 - v126;
                    if (v133 < 0xBC
                      || &v131[v127 - 4 - (v133 & 0xFFFFFFFFFFFFFFFCLL)] > &v131[v127 - 4]
                      || &v55[-(v133 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v55 - 4
                      || (unint64_t)(v55 - &v131[v127]) < 0x20)
                    {
                      uint64_t v134 = v55;
                      unint64_t v135 = v170;
                    }
                    else
                    {
                      uint64_t v137 = (v133 >> 2) + 1;
                      uint64_t v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
                      uint64_t v134 = &v55[-v138];
                      long long v132 = (_DWORD *)((char *)v132 - v138);
                      v139 = &v131[4 * v128 - 16];
                      v140 = v55 - 16;
                      uint64_t v141 = v137 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v142 = *(_OWORD *)v140;
                        *(v139 - 1) = *((_OWORD *)v140 - 1);
                        _OWORD *v139 = v142;
                        v139 -= 2;
                        v140 -= 32;
                        v141 -= 8;
                      }
                      while (v141);
                      unint64_t v135 = v170;
                      if (v137 == (v137 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_136:
                        a1[17] = v132;
                        a1[18] = v122;
                        a1[19] = &v131[4 * v135];
                        if (v126) {
                          goto LABEL_137;
                        }
                        goto LABEL_138;
                      }
                    }
                    do
                    {
                      int v136 = *((_DWORD *)v134 - 1);
                      v134 -= 4;
                      *--long long v132 = v136;
                    }
                    while (v134 != v126);
                    goto LABEL_136;
                  }
                }
                else
                {
                  uint64_t v131 = 0;
                  long long v132 = (_DWORD *)(4 * v128);
                  *(_DWORD *)(4 * v128) = v123;
                  uint64_t v122 = 4 * v128 + 4;
                  if (v55 != v126) {
                    goto LABEL_133;
                  }
                }
                a1[17] = v132;
                a1[18] = v122;
                a1[19] = &v131[4 * v170];
                if (v126) {
LABEL_137:
                }
                  operator delete(v126);
LABEL_138:
                uint64_t v120 = v167;
              }
              a1[18] = v122;
              uint64_t v55 = (char *)v122;
            }
            *(void *)(a1[29] + 8 * v124) |= 1 << v123;
            if (++v121 == v120) {
              goto LABEL_53;
            }
            continue;
          }
        }
        *(void *)(*v172 + 8 * (v58 >> 6)) = v59 | (1 << v58);
        uint64_t v78 = v171;
        float64x2_t v80 = v171[1];
        unint64_t v79 = (unint64_t)v171[2];
        if ((unint64_t)v80 < v79)
        {
          *(_DWORD *)float64x2_t v80 = v58;
          uint64_t v81 = (uint64_t)(v80 + 4);
LABEL_158:
          v78[1] = (char *)v81;
          uint64_t v55 = (char *)(a1[18] - 4);
          a1[18] = v55;
          goto LABEL_53;
        }
        double v107 = *v171;
        uint64_t v108 = v80 - *v171;
        uint64_t v109 = v108 >> 2;
        unint64_t v110 = (v108 >> 2) + 1;
        if (v110 >> 62) {
          goto LABEL_172;
        }
        uint64_t v111 = v79 - (void)v107;
        if (v111 >> 1 > v110) {
          unint64_t v110 = v111 >> 1;
        }
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v110;
        }
        if (v112)
        {
          if (v112 >> 62) {
            goto LABEL_171;
          }
          uint64_t v113 = operator new(4 * v112);
          unint64_t v114 = &v113[4 * v109];
          *(_DWORD *)unint64_t v114 = v58;
          uint64_t v81 = (uint64_t)(v114 + 4);
          if (v80 == v107) {
            goto LABEL_156;
          }
LABEL_150:
          unint64_t v143 = v80 - 4 - v107;
          if (v143 < 0x2C) {
            goto LABEL_178;
          }
          if ((unint64_t)(v80 - &v113[v108]) < 0x20) {
            goto LABEL_178;
          }
          uint64_t v144 = (v143 >> 2) + 1;
          uint64_t v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v146 = &v80[-v145];
          v114 -= v145;
          uint64_t v147 = &v113[4 * v109 - 16];
          uint64_t v148 = v80 - 16;
          uint64_t v149 = v144 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v150 = *(_OWORD *)v148;
            *(v147 - 1) = *((_OWORD *)v148 - 1);
            *uint64_t v147 = v150;
            v147 -= 2;
            v148 -= 32;
            v149 -= 8;
          }
          while (v149);
          float64x2_t v80 = v146;
          if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_178:
            do
            {
              int v151 = *((_DWORD *)v80 - 1);
              v80 -= 4;
              *((_DWORD *)v114 - 1) = v151;
              v114 -= 4;
            }
            while (v80 != v107);
          }
        }
        else
        {
          uint64_t v113 = 0;
          unint64_t v114 = (char *)(4 * v109);
          *(_DWORD *)(4 * v109) = v58;
          uint64_t v81 = 4 * v109 + 4;
          if (v80 != v107) {
            goto LABEL_150;
          }
        }
LABEL_156:
        v152 = &v113[4 * v112];
        uint64_t v78 = v171;
        *v171 = v114;
        v171[1] = (char *)v81;
        v171[2] = v152;
        if (v107) {
          operator delete(v107);
        }
        goto LABEL_158;
      }
      a1[18] = v57;
      v55 -= 4;
LABEL_53:
      unsigned __int8 v56 = (char *)*v173;
      if (*v173 == v55) {
        goto LABEL_163;
      }
    }
    int v61 = *((_DWORD *)v55 - 2);
    int v60 = v61;
    a1[18] = v55 - 8;
    uint64_t v62 = v61;
    *(void *)(a1[14] + (((unint64_t)v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
    long long v63 = v168;
    int64_t v65 = (char *)v168[1];
    unint64_t v64 = v168[2];
    if ((unint64_t)v65 < v64)
    {
      *(_DWORD *)int64_t v65 = v60;
      uint64_t v66 = (uint64_t)(v65 + 4);
LABEL_93:
      v63[1] = v66;
      uint64_t v96 = *(int *)(*a3 + 4 * v62);
      uint64_t v97 = *(void *)(a1[7] + 8 * v96);
      uint64_t v98 = a1[32];
      uint64_t v99 = *(void *)(v98 + 8 * v96);
      if (v97 < v99)
      {
        uint64_t v100 = a1[4];
        uint64_t v101 = a1[29];
        do
        {
          while (1)
          {
            int v102 = *(_DWORD *)(v100 + 4 * v97);
            unint64_t v103 = (unint64_t)v102 >> 6;
            uint64_t v104 = *(void *)(v101 + 8 * v103);
            if (((1 << v102) & v104) == 0) {
              break;
            }
            *(void *)(v101 + 8 * v103) = v104 & ~(1 << v102);
            if (++v97 >= v99) {
              goto LABEL_52;
            }
          }
          --v99;
          *(_DWORD *)(v100 + 4 * v97) = *(_DWORD *)(v100 + 4 * v99);
          *(_DWORD *)(v100 + 4 * v99) = v102;
          uint64_t v105 = a1[1];
          uint64_t v106 = *(void *)(v105 + 8 * v97);
          *(void *)(v105 + 8 * v97) = *(void *)(v105 + 8 * v99);
          *(void *)(v105 + 8 * v99) = v106;
        }
        while (v97 < v99);
      }
LABEL_52:
      *(void *)(v98 + 8 * v96) = v99;
      uint64_t v55 = (char *)a1[18];
      goto LABEL_53;
    }
    char v69 = (char *)*v168;
    uint64_t v70 = (uint64_t)&v65[-*v168];
    uint64_t v71 = v70 >> 2;
    unint64_t v72 = (v70 >> 2) + 1;
    if (v72 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v73 = v64 - (void)v69;
    if (v73 >> 1 > v72) {
      unint64_t v72 = v73 >> 1;
    }
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v72;
    }
    if (v74)
    {
      if (v74 >> 62) {
        goto LABEL_171;
      }
      float64x2_t v75 = operator new(4 * v74);
      uint64_t v76 = &v75[4 * v71];
      *uint64_t v76 = v60;
      uint64_t v66 = (uint64_t)(v76 + 1);
      if (v65 != v69)
      {
LABEL_71:
        unint64_t v77 = v65 - 4 - v69;
        if (v77 < 0x2C) {
          goto LABEL_179;
        }
        if ((unint64_t)(v65 - &v75[v70]) < 0x20) {
          goto LABEL_179;
        }
        uint64_t v87 = (v77 >> 2) + 1;
        uint64_t v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v89 = &v65[-v88];
        uint64_t v76 = (_DWORD *)((char *)v76 - v88);
        uint64_t v90 = &v75[4 * v71 - 16];
        uint64_t v91 = v65 - 16;
        uint64_t v92 = v87 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v93 = *(_OWORD *)v91;
          *(v90 - 1) = *((_OWORD *)v91 - 1);
          *uint64_t v90 = v93;
          v90 -= 2;
          v91 -= 32;
          v92 -= 8;
        }
        while (v92);
        int64_t v65 = v89;
        if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_179:
          do
          {
            int v94 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--uint64_t v76 = v94;
          }
          while (v65 != v69);
        }
      }
    }
    else
    {
      float64x2_t v75 = 0;
      uint64_t v76 = (_DWORD *)(4 * v71);
      *(_DWORD *)(4 * v71) = v60;
      uint64_t v66 = 4 * v71 + 4;
      if (v65 != v69) {
        goto LABEL_71;
      }
    }
    int v95 = &v75[4 * v74];
    long long v63 = v168;
    void *v168 = v76;
    v168[1] = v66;
    v168[2] = v95;
    if (v69) {
      operator delete(v69);
    }
    goto LABEL_93;
  }
LABEL_163:
  uint64_t v159 = *v171;
  uint64_t v160 = v171[1];
  if (*v171 != v160)
  {
    uint64_t v161 = *v172;
    do
    {
      int v162 = *(_DWORD *)v159;
      v159 += 4;
      *(void *)(v161 + (((unint64_t)v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
    }
    while (v159 != v160);
  }
  v163 = (char *)*v168;
  v164 = (char *)v168[1];
  if ((char *)*v168 != v164)
  {
    uint64_t v165 = *v172;
    do
    {
      int v166 = *(_DWORD *)v163;
      v163 += 4;
      *(void *)(v165 + (((unint64_t)v166 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v166);
    }
    while (v163 != v164);
  }
}

int *operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(int *result, int **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = a2;
    int v5 = result;
    unint64_t v6 = *result;
    unint64_t v7 = (unint64_t)((char *)v3 - (char *)v2) >> 2;
    if ((int)v7 > (int)((double)(int)v6 * 0.025))
    {
      v4[1] = v2;
      return result;
    }
    int v8 = (int)((double)(int)v6 * 0.05);
    uint64_t v9 = (uint64_t *)(result + 28);
    std::vector<BOOL>::resize((uint64_t)(result + 28), v6, 0);
    uint64_t v10 = *v4;
    uint64_t v11 = v4[1];
    uint64_t v55 = (uint64_t *)(v5 + 28);
    if (*v4 != v11)
    {
      uint64_t v12 = *v9;
      uint64_t v13 = *v4;
      int v14 = (uint64_t *)(v5 + 28);
      do
      {
        int v15 = *v13++;
        *(void *)(v12 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      }
      while (v13 != v11);
      unint64_t v16 = 0;
      int v51 = v8;
      unint64_t v54 = v5;
      while (1)
      {
        uint64_t v17 = v10[v16];
        uint64_t v18 = *((void *)v5 + 7);
        uint64_t v19 = *(void *)(v18 + 8 * v17);
        uint64_t v20 = *(void *)(v18 + (((v17 << 32) + 0x100000000) >> 29));
        if (v19 < v20) {
          break;
        }
LABEL_36:
        if ((int)v7 <= v8)
        {
          ++v16;
          uint64_t v10 = *v4;
          if (v16 < v4[1] - *v4) {
            continue;
          }
        }
        goto LABEL_38;
      }
      unint64_t v52 = v16;
      int v53 = v7 + v20 - v19;
      uint64_t v21 = *v14;
      uint64_t v56 = v20;
      while (1)
      {
        int v23 = *(_DWORD *)(*((void *)v5 + 4) + 4 * v19);
        unint64_t v24 = (unint64_t)v23 >> 6;
        if (((1 << v23) & *(void *)(v21 + 8 * v24)) != 0) {
          goto LABEL_12;
        }
        uint64_t v26 = (char *)v4[1];
        unint64_t v25 = (unint64_t)v4[2];
        if ((unint64_t)v26 >= v25) {
          break;
        }
        *(_DWORD *)uint64_t v26 = v23;
        uint64_t v22 = (uint64_t)(v26 + 4);
LABEL_11:
        v4[1] = (int *)v22;
        uint64_t v21 = *v14;
        *(void *)(*v14 + 8 * v24) |= 1 << v23;
LABEL_12:
        if (++v19 == v20)
        {
          unint64_t v16 = v52;
          LODWORD(v7) = v53;
          int v8 = v51;
          goto LABEL_36;
        }
      }
      int v27 = v4;
      uint64_t v28 = (char *)*v4;
      uint64_t v29 = v26 - (char *)*v4;
      uint64_t v30 = v29 >> 2;
      unint64_t v31 = (v29 >> 2) + 1;
      if (v31 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = v25 - (void)v28;
      if (v32 >> 1 > v31) {
        unint64_t v31 = v32 >> 1;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v57 = v31;
      if (v31)
      {
        if (v31 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v33 = operator new(4 * v31);
        uint64_t v34 = (int *)&v33[4 * v30];
        *uint64_t v34 = v23;
        uint64_t v22 = (uint64_t)(v34 + 1);
        if (v26 != v28) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (int *)(4 * v30);
        *(_DWORD *)(4 * v3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v23;
        uint64_t v22 = 4 * v30 + 4;
        if (v26 != v28)
        {
LABEL_23:
          unint64_t v35 = v26 - 4 - v28;
          if (v35 >= 0x2C)
          {
            unint64_t v36 = v26 - &v33[v29];
            uint64_t v4 = v27;
            if (v36 >= 0x20)
            {
              uint64_t v37 = (v35 >> 2) + 1;
              uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
              double v39 = &v26[-v38];
              uint64_t v34 = (int *)((char *)v34 - v38);
              uint64_t v40 = &v33[4 * v30 - 16];
              uint64_t v41 = v26 - 16;
              uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v43 = *(_OWORD *)v41;
                *(v40 - 1) = *((_OWORD *)v41 - 1);
                *uint64_t v40 = v43;
                v40 -= 2;
                v41 -= 32;
                v42 -= 8;
              }
              while (v42);
              uint64_t v26 = v39;
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_32;
              }
            }
          }
          else
          {
            uint64_t v4 = v27;
          }
          do
          {
            int v44 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--uint64_t v34 = v44;
          }
          while (v26 != v28);
LABEL_32:
          unsigned char *v4 = v34;
          v4[1] = (int *)v22;
          long long v4[2] = (int *)&v33[4 * v57];
          if (v28) {
            operator delete(v28);
          }
          int v5 = v54;
          int v14 = v55;
          uint64_t v20 = v56;
          goto LABEL_11;
        }
      }
      uint64_t v4 = v27;
      goto LABEL_32;
    }
LABEL_38:
    uint64_t result = *v4;
    unint64_t v45 = (char *)v4[1];
    if (*v4 != (int *)v45)
    {
      uint64_t v46 = *v55;
      uint64_t v47 = *v4;
      do
      {
        int v48 = *v47++;
        *(void *)(v46 + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
      }
      while (v47 != (int *)v45);
    }
    if ((int)v7 <= v8)
    {
      unint64_t v49 = 126 - 2 * __clz((v45 - (char *)result) >> 2);
      if (v45 == (char *)result) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = v49;
      }
      return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(result, v45, (uint64_t)&v58, v50, 1);
    }
    else
    {
      v4[1] = result;
    }
  }
  return result;
}

double operations_research::glop::TriangularMatrix::ComputeInverseInfinityNormUpperBound(operations_research::glop::TriangularMatrix *this)
{
  unint64_t v1 = *((unsigned int *)this + 1);
  double v2 = 1.0;
  if (*((_DWORD *)this + 26) == v1) {
    return v2;
  }
  if ((int)v1 < 1)
  {
    BOOL v5 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
    while (*(double *)(*((void *)this + 10) + 8 * v4) != 0.0)
    {
      uint64_t v6 = *((void *)this + 7);
      uint64_t v7 = *(void *)(v6 + 8 * v4);
      unint64_t v8 = v4 + 1;
      uint64_t v9 = *(void *)(v6 + 8 * (v4 + 1));
      BOOL v10 = v9 <= v7;
      uint64_t v11 = v9 - v7;
      if (!v10)
      {
        uint64_t v12 = (int *)(*((void *)this + 4) + 4 * v7);
        do
        {
          uint64_t v13 = *v12++;
          if (v4 <= v13) {
            goto LABEL_12;
          }
        }
        while (--v11);
      }
      ++v4;
      BOOL v5 = v8 >= v1;
      if (v8 == v1) {
        break;
      }
    }
  }
LABEL_12:
  uint64_t v14 = *(int *)this;
  if (v14)
  {
    if ((v14 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v15 = (double *)operator new(8 * *(unsigned int *)this);
    size_t v16 = 8 * v14;
    uint64_t v17 = &v15[v14];
    memset_pattern16(v15, &unk_23CE7FF10, v16);
    if ((int)v1 < 1) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  uint64_t v17 = 0;
  int v15 = 0;
  if ((int)v1 >= 1)
  {
LABEL_17:
    unsigned int v18 = 0;
    uint64_t v19 = *((void *)this + 10);
    uint64_t v20 = *((void *)this + 7);
    do
    {
      LODWORD(v21) = v1 + ~v18;
      if (v5) {
        uint64_t v21 = v21;
      }
      else {
        uint64_t v21 = v18;
      }
      uint64_t v22 = (int)v21;
      double v23 = v15[v22] / fabs(*(double *)(v19 + v22 * 8));
      v15[v22] = v23;
      uint64_t v24 = *(void *)(v20 + v22 * 8);
      uint64_t v25 = *(void *)(v20 + (((v21 << 32) + 0x100000000) >> 29));
      BOOL v10 = v25 <= v24;
      uint64_t v26 = v25 - v24;
      if (!v10)
      {
        int v27 = (double *)(*((void *)this + 1) + 8 * v24);
        uint64_t v28 = (int *)(*((void *)this + 4) + 4 * v24);
        do
        {
          double v29 = *v27++;
          double v30 = fabs(v29);
          uint64_t v31 = *v28++;
          v15[v31] = v15[v31] + v23 * v30;
          --v26;
        }
        while (v26);
      }
      ++v18;
    }
    while (v18 != v1);
  }
LABEL_26:
  uint64_t v32 = v15;
  if (v15 != v17)
  {
    uint64_t v33 = v15 + 1;
    uint64_t v32 = v15;
    if (v15 + 1 != v17)
    {
      double v34 = *v15;
      uint64_t v32 = v15;
      unint64_t v35 = v15 + 1;
      do
      {
        double v36 = *v35++;
        double v37 = v36;
        if (v34 < v36)
        {
          double v34 = v37;
          uint64_t v32 = v33;
        }
        uint64_t v33 = v35;
      }
      while (v35 != v17);
    }
  }
  double v2 = *v32;
  if (v15) {
    operator delete(v15);
  }
  return v2;
}

double std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, long long *a5, uint64_t a6, double result)
{
  if (a4 >= 2)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      int v9 = *((_DWORD *)a2 - 4);
      int v10 = *(_DWORD *)a1;
      if (v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v9;
        *((_DWORD *)a2 - 4) = v10;
        uint64_t result = *(double *)(a1 + 8);
        *(void *)(a1 + 8) = *((void *)a2 - 1);
        *((double *)a2 - 1) = result;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if ((long long *)a1 != a2)
      {
        uint64_t v19 = (_DWORD *)(a1 + 16);
        if ((long long *)(a1 + 16) != a2)
        {
          uint64_t v20 = 0;
          uint64_t v21 = (double *)a1;
          do
          {
            double v23 = v19;
            int v24 = *v19;
            int v25 = *(_DWORD *)v21;
            if (v24 < *(_DWORD *)v21)
            {
              uint64_t result = v21[3];
              uint64_t v26 = v20;
              do
              {
                uint64_t v27 = a1 + v26;
                *(_DWORD *)(v27 + 16) = v25;
                *(void *)(v27 + 24) = *(void *)(a1 + v26 + 8);
                if (!v26)
                {
                  uint64_t v22 = a1;
                  goto LABEL_15;
                }
                int v25 = *(_DWORD *)(v27 - 16);
                v26 -= 16;
              }
              while (v24 < v25);
              uint64_t v22 = a1 + v26 + 16;
LABEL_15:
              *(_DWORD *)uint64_t v22 = v24;
              *(double *)(v22 + 8) = result;
            }
            uint64_t v19 = v23 + 4;
            v20 += 16;
            uint64_t v21 = (double *)v23;
          }
          while (v23 + 4 != (_DWORD *)a2);
        }
      }
    }
    else
    {
      uint64_t v13 = (char *)a5;
      unint64_t v15 = a4 >> 1;
      size_t v16 = (long long *)(a1 + 16 * (a4 >> 1));
      unint64_t v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((long long *)a1, v16, a3, v17, a5);
        uint64_t v28 = (long long *)&v13[16 * v15];
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((long long *)(v8 + 16 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v28);
        double v29 = &v13[16 * a4];
        double v30 = v28;
        while (v30 != (long long *)v29)
        {
          int v31 = *(_DWORD *)v30;
          if (*(_DWORD *)v30 < *(_DWORD *)v13)
          {
            uint64_t v32 = (char *)v30;
          }
          else
          {
            int v31 = *(_DWORD *)v13;
            uint64_t v32 = v13;
          }
          uint64_t result = *((double *)v32 + 1);
          if (*(_DWORD *)v30 < *(_DWORD *)v13) {
            ++v30;
          }
          else {
            v13 += 16;
          }
          *(_DWORD *)uint64_t v8 = v31;
          *(double *)(v8 + 8) = result;
          v8 += 16;
          if (v13 == (char *)v28)
          {
            if (v30 != (long long *)v29)
            {
              uint64_t v33 = 0;
              do
              {
                double v34 = &v30[v33];
                uint64_t v35 = v8 + v33 * 16;
                *(_DWORD *)uint64_t v35 = v30[v33];
                uint64_t result = *((double *)&v30[v33] + 1);
                *(double *)(v35 + 8) = result;
                ++v33;
              }
              while (v34 + 1 != (long long *)v29);
            }
            return result;
          }
        }
        if (v13 != (char *)v28)
        {
          uint64_t v36 = 0;
          do
          {
            double v37 = &v13[v36];
            uint64_t v38 = v8 + v36;
            *(_DWORD *)uint64_t v38 = *(_DWORD *)&v13[v36];
            uint64_t result = *(double *)&v13[v36 + 8];
            *(double *)(v38 + 8) = result;
            v36 += 16;
          }
          while (v37 + 16 != (char *)v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(a1, v16, a3, v17, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(v8 + 16 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v13, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((char *)v8, (char *)(v8 + 16 * (a4 >> 1)), (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v13, a6, v18);
      }
    }
  }
  return result;
}

long long *std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(long long *result, long long *a2, uint64_t a3, unint64_t a4, long long *a5)
{
  if (a4)
  {
    BOOL v5 = a5;
    uint64_t v8 = result;
    if (a4 == 2)
    {
      int v9 = a2 - 1;
      if (*((_DWORD *)a2 - 4) >= *(_DWORD *)result)
      {
        *a5 = *result;
        long long v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        long long v10 = *result;
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v21 = a4 >> 1;
      uint64_t v22 = a4 >> 1;
      double v23 = &result[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(result, &result[v22], a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (long long *)std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(&v8[v22], a2, a3, a4 - v21, &v5[v22], a4 - v21);
      int v24 = &v8[v22];
      while (v24 != a2)
      {
        if (*(_DWORD *)v24 >= *(_DWORD *)v8)
        {
          long long v25 = *v8++;
          *v5++ = v25;
          if (v8 == v23) {
            goto LABEL_28;
          }
        }
        else
        {
          long long v26 = *v24++;
          *v5++ = v26;
          if (v8 == v23)
          {
LABEL_28:
            if (v24 != a2)
            {
              uint64_t v27 = 0;
              do
              {
                v5[v27] = v24[v27];
                ++v27;
              }
              while (&v24[v27] != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v23)
      {
        unint64_t v28 = 0;
        do
        {
          v5[v28] = v8[v28];
          ++v28;
        }
        while (&v8[v28] != v23);
      }
    }
    else if (result != a2)
    {
      *a5 = *result;
      uint64_t v11 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        uint64_t v14 = a5;
        do
        {
          while (1)
          {
            unint64_t v15 = v11;
            int v16 = *(_DWORD *)v14++;
            if (*v11 < v16) {
              break;
            }
            *uint64_t v14 = *(_OWORD *)v11;
            v11 += 4;
            v12 += 16;
            uint64_t v13 = v14;
            uint64_t v8 = (long long *)v15;
            if (v15 + 4 == (_DWORD *)a2) {
              return result;
            }
          }
          *uint64_t v14 = *v13;
          unint64_t v17 = (char *)a5;
          if (v13 != a5)
          {
            uint64_t v18 = v12;
            while (1)
            {
              unint64_t v17 = (char *)a5 + v18;
              int v19 = *(_DWORD *)((char *)a5 + v18 - 16);
              if (*v15 >= v19) {
                break;
              }
              *(_DWORD *)unint64_t v17 = v19;
              *((void *)v17 + 1) = *((void *)v17 - 1);
              v18 -= 16;
              if (!v18)
              {
                unint64_t v17 = (char *)a5;
                break;
              }
            }
          }
          *(_DWORD *)unint64_t v17 = *v15;
          *((void *)v17 + 1) = *((void *)v8 + 3);
          uint64_t v11 = v15 + 4;
          v12 += 16;
          uint64_t v13 = v14;
          uint64_t v8 = (long long *)v15;
        }
        while (v15 + 4 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 a9)
{
  if (!a6) {
    return a9.n128_f64[0];
  }
  while (a6 > a8 && a5 > a8)
  {
    if (!a5) {
      return a9.n128_f64[0];
    }
    uint64_t v12 = 0;
    int v13 = *(_DWORD *)a2;
    uint64_t v14 = -a5;
    while (1)
    {
      int v15 = *(_DWORD *)((char *)v12 + (void)a1);
      if (v13 < v15) {
        break;
      }
      v12 += 4;
      if (__CFADD__(v14++, 1)) {
        return a9.n128_f64[0];
      }
    }
    if (-v14 >= a6)
    {
      if (v14 == -1)
      {
        uint64_t v66 = (uint64_t)v12 + (void)a1;
        *(_DWORD *)uint64_t v66 = v13;
        *(_DWORD *)a2 = v15;
        a9.n128_u64[0] = *(void *)(v66 + 8);
        *(void *)(v66 + 8) = *((void *)a2 + 1);
        *((void *)a2 + 1) = a9.n128_u64[0];
        return a9.n128_f64[0];
      }
      if (v14 <= 0) {
        uint64_t v40 = -v14;
      }
      else {
        uint64_t v40 = 1 - v14;
      }
      uint64_t v26 = v40 >> 1;
      uint64_t v20 = &a1[16 * (v40 >> 1) + (void)v12];
      int v19 = a2;
      if (a2 != a3)
      {
        unint64_t v41 = (a3 - a2) >> 4;
        int v19 = a2;
        do
        {
          unint64_t v42 = v41 >> 1;
          long long v43 = &v19[16 * (v41 >> 1)];
          int v45 = *(_DWORD *)v43;
          int v44 = v43 + 16;
          v41 += ~(v41 >> 1);
          if (v45 < *(_DWORD *)v20) {
            int v19 = v44;
          }
          else {
            unint64_t v41 = v42;
          }
        }
        while (v41);
      }
      uint64_t v18 = (v19 - a2) >> 4;
      if (v20 != a2)
      {
LABEL_21:
        if (v19 == a2)
        {
          double v29 = v20;
        }
        else
        {
          int v27 = *(_DWORD *)v20;
          *(_DWORD *)uint64_t v20 = v13;
          *(_DWORD *)a2 = v27;
          uint64_t v28 = *((void *)v20 + 1);
          *((void *)v20 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v28;
          double v29 = v20 + 16;
          for (uint64_t i = a2 + 16; i != v19; i += 16)
          {
            if (v29 == a2) {
              a2 = i;
            }
            int v31 = *(_DWORD *)v29;
            *(_DWORD *)double v29 = *(_DWORD *)i;
            *(_DWORD *)uint64_t i = v31;
            uint64_t v32 = *((void *)v29 + 1);
            *((void *)v29 + 1) = *((void *)i + 1);
            *((void *)i + 1) = v32;
            v29 += 16;
          }
          if (v29 != a2)
          {
            uint64_t v33 = v29;
            double v34 = a2;
            while (1)
            {
              int v35 = *(_DWORD *)v33;
              *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
              *(_DWORD *)double v34 = v35;
              uint64_t v36 = *((void *)v33 + 1);
              *((void *)v33 + 1) = *((void *)v34 + 1);
              *((void *)v34 + 1) = v36;
              v33 += 16;
              v34 += 16;
              BOOL v37 = v33 == a2;
              if (v34 == v19)
              {
                if (v33 == a2) {
                  goto LABEL_49;
                }
                double v34 = a2 + 16;
                while (1)
                {
                  int v38 = *(_DWORD *)v33;
                  *(_DWORD *)uint64_t v33 = *(_DWORD *)a2;
                  *(_DWORD *)a2 = v38;
                  uint64_t v39 = *((void *)v33 + 1);
                  *((void *)v33 + 1) = *((void *)a2 + 1);
                  *((void *)a2 + 1) = v39;
                  v33 += 16;
                  BOOL v37 = v33 == a2;
                  if (v34 != v19) {
                    break;
                  }
                  if (v33 == a2) {
                    goto LABEL_49;
                  }
                }
              }
              if (v37) {
                a2 = v34;
              }
            }
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (a6 >= 0) {
        uint64_t v17 = a6;
      }
      else {
        uint64_t v17 = a6 + 1;
      }
      uint64_t v18 = v17 >> 1;
      int v19 = &a2[16 * (v17 >> 1)];
      uint64_t v20 = a2;
      if ((_DWORD *)(a2 - a1) != v12)
      {
        unint64_t v21 = (a2 - a1 - (uint64_t)v12) >> 4;
        uint64_t v20 = (char *)v12 + (void)a1;
        do
        {
          unint64_t v22 = v21 >> 1;
          double v23 = &v20[16 * (v21 >> 1)];
          int v25 = *(_DWORD *)v23;
          int v24 = v23 + 16;
          v21 += ~(v21 >> 1);
          if (*(_DWORD *)v19 < v25) {
            unint64_t v21 = v22;
          }
          else {
            uint64_t v20 = v24;
          }
        }
        while (v21);
      }
      uint64_t v26 = (v20 - a1 - (uint64_t)v12) >> 4;
      if (v20 != a2) {
        goto LABEL_21;
      }
    }
    double v29 = v19;
LABEL_49:
    a5 = -(v26 + v14);
    uint64_t v46 = a6 - v18;
    if (v26 + v18 >= a6 - (v26 + v18) - v14)
    {
      uint64_t v50 = v19;
      uint64_t v51 = a4;
      unint64_t v52 = (char *)v12 + (void)a1;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(v29, v50, a3, a4, a5, a6 - v18, a7, a8);
      a1 = v52;
      a2 = v20;
      a5 = v26;
      a3 = v29;
      a6 = v18;
      a4 = v51;
      if (!v18) {
        return a9.n128_f64[0];
      }
    }
    else
    {
      uint64_t v47 = v20;
      int v48 = a3;
      uint64_t v49 = a4;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((char *)v12 + (void)a1, v47, v29, a4, v26, v18, a7, a8);
      a3 = v48;
      a1 = v29;
      a2 = v19;
      a6 = v46;
      a4 = v49;
      if (!v46) {
        return a9.n128_f64[0];
      }
    }
  }
  if (a5 <= a6)
  {
    if (a1 != a2)
    {
      uint64_t v60 = 0;
      do
      {
        a9 = *(__n128 *)&a1[v60];
        *(__n128 *)&a7[v60] = a9;
        v60 += 16;
      }
      while (&a1[v60] != a2);
      if (v60)
      {
        int v61 = &a7[v60];
        uint64_t v62 = (uint64_t)&a7[v60 - 16];
        while (a2 != a3)
        {
          int v63 = *(_DWORD *)a2;
          BOOL v64 = *(_DWORD *)a2 < *(_DWORD *)a7;
          if (*(_DWORD *)a2 < *(_DWORD *)a7)
          {
            int64_t v65 = a2;
          }
          else
          {
            int v63 = *(_DWORD *)a7;
            int64_t v65 = a7;
          }
          if (*(_DWORD *)a2 < *(_DWORD *)a7) {
            a2 += 16;
          }
          a9.n128_u64[0] = *((void *)v65 + 1);
          if (!v64) {
            a7 += 16;
          }
          *(_DWORD *)a1 = v63;
          *((void *)a1 + 1) = a9.n128_u64[0];
          a1 += 16;
          if (v61 == a7) {
            return a9.n128_f64[0];
          }
        }
        uint64_t v69 = 0;
        do
        {
          uint64_t v70 = &a1[v69];
          uint64_t v71 = &a7[v69];
          *(_DWORD *)uint64_t v70 = *(_DWORD *)&a7[v69];
          a9.n128_u64[0] = *(void *)&a7[v69 + 8];
          *((void *)v70 + 1) = a9.n128_u64[0];
          v69 += 16;
        }
        while ((char *)v62 != v71);
      }
    }
  }
  else if (a3 != a2)
  {
    uint64_t v53 = 0;
    do
    {
      a9 = *(__n128 *)&a2[v53];
      *(__n128 *)&a7[v53] = a9;
      v53 += 16;
    }
    while (&a2[v53] != a3);
    if (v53)
    {
      unint64_t v54 = &a7[v53];
      uint64_t v55 = a3 - 8;
      while (a2 != a1)
      {
        int v56 = *((_DWORD *)a2 - 4);
        int v57 = *((_DWORD *)v54 - 4);
        BOOL v58 = v57 < v56;
        if (v57 < v56)
        {
          uint64_t v59 = a2;
        }
        else
        {
          int v56 = *((_DWORD *)v54 - 4);
          uint64_t v59 = v54;
        }
        if (v58) {
          a2 -= 16;
        }
        a9.n128_u64[0] = *((void *)v59 - 1);
        if (!v58) {
          v54 -= 16;
        }
        *((_DWORD *)v55 - 2) = v56;
        *(void *)uint64_t v55 = a9.n128_u64[0];
        v55 -= 16;
        if (v54 == a7) {
          return a9.n128_f64[0];
        }
      }
      unint64_t v67 = 0;
      do
      {
        unint64_t v68 = &v55[v67];
        *((_DWORD *)v68 - 2) = *(_DWORD *)&v54[v67 - 16];
        a9.n128_u64[0] = *(void *)&v54[v67 - 8];
        *(void *)unint64_t v68 = a9.n128_u64[0];
        v67 -= 16;
      }
      while (&v54[v67] != a7);
    }
  }
  return a9.n128_f64[0];
}

uint64_t *std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(uint64_t **)a1;
  uint64_t result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(void *)(a1 + 8) = v7;
      operator delete(v7);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2 >> 61) {
      goto LABEL_38;
    }
    uint64_t v9 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v9 = a2;
    }
    BOOL v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v9;
    }
    if (v11 >> 61) {
LABEL_38:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = v11;
    uint64_t result = (uint64_t *)operator new(8 * v11);
    *(void *)a1 = result;
    *(void *)(a1 + 16) = &result[v12];
    int v13 = &result[a2];
    unint64_t v14 = *a3;
    unint64_t v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    int v16 = (unint64_t *)result;
    if (v15 < 3) {
      goto LABEL_41;
    }
    unint64_t v17 = v15 + 1;
    int v16 = (unint64_t *)&result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    int64x2_t v18 = vdupq_n_s64(v14);
    int v19 = (int64x2_t *)(result + 2);
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *int v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != (unint64_t *)v13);
    }
    goto LABEL_37;
  }
  unint64_t v21 = *(uint64_t **)(a1 + 8);
  int64_t v22 = (char *)v21 - (char *)v7;
  unint64_t v23 = v21 - v7;
  if (v23 >= a2) {
    unint64_t v24 = a2;
  }
  else {
    unint64_t v24 = v21 - v7;
  }
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3) {
      goto LABEL_42;
    }
    uint64_t result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    int64x2_t v25 = vdupq_lane_s64(*a3, 0);
    uint64_t v26 = (int64x2_t *)(v7 + 2);
    unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26[-1] = v25;
      *uint64_t v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    BOOL v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  BOOL v10 = a2 >= v23;
  unint64_t v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    int v13 = &v7[a2];
LABEL_37:
    *(void *)(a1 + 8) = v13;
    return result;
  }
  double v30 = &v21[v29];
  unint64_t v31 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v31 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)v21 + v31 + 8) > a3) {
    goto LABEL_43;
  }
  uint64_t v32 = (v31 >> 3) + 1;
  uint64_t v33 = &v21[v32 & 0x3FFFFFFFFFFFFFFCLL];
  int64x2_t v34 = vdupq_lane_s64(*a3, 0);
  int v35 = (int64x2_t *)(v21 + 2);
  uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v35[-1] = v34;
    *int v35 = v34;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  unint64_t v21 = v33;
  if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(void *)(a1 + 8) = v30;
  return result;
}

void std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(uint64_t a1, unint64_t a2)
{
  BOOL v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v13 = operator new(8 * v12);
    }
    else
    {
      int v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    int v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      int64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2)
{
  BOOL v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v13 = operator new(8 * v12);
    }
    else
    {
      int v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    int v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      int64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void operations_research::sat::AllDifferentBinary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a1);
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26F0BD238;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  int64_t v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = (char *)operator new(v9);
    v8[1] = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(void *)(a2 + 24) = v8;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CBA4458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::AllDifferentOnBounds(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a1);
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26F0BD510;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  int64_t v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = (char *)operator new(v9);
    v8[1] = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(void *)(a2 + 24) = v8;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CBA45D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::AllDifferentAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a1);
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26F0BD758;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  int64_t v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = (char *)operator new(v9);
    v8[1] = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(void *)(a2 + 24) = v8;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CBA4758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::AllDifferentConstraint::AllDifferentConstraint(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1;
  *(void *)a1 = &unk_26F0BD188;
  *(_DWORD *)(a1 + 8) = (a2[1] - *a2) >> 2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int v102 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(void *)(a1 + 32) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = a1 + 56;
  uint64_t v7 = v6 + 24;
  *(_OWORD *)(v6 + 48) = 0u;
  uint64_t v8 = (void *)(v6 + 48);
  uint64_t v9 = v6 + 72;
  unint64_t v10 = (std::vector<int> *)(v6 + 168);
  uint64_t v11 = (std::vector<int> *)(v6 + 216);
  *(_OWORD *)(v6 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  unint64_t v12 = (std::vector<int> *)(v6 + 240);
  uint64_t v96 = (std::vector<int> *)(v6 + 288);
  uint64_t v97 = v6 + 264;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(void *)(v6 + 304) = 0;
  *(void *)(v6 + 312) = a4;
  *(void *)(v6 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a5;
  unint64_t v13 = *(int *)(v5 + 8);
  uint64_t v103 = v5;
  uint64_t v99 = (void *)(v6 + 24);
  uint64_t v100 = (void *)v6;
  uint64_t v101 = (void *)(v6 + 48);
  if (v13)
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(v6, v13);
    unint64_t v14 = *(int *)(v5 + 8);
    uint64_t v15 = *(void *)(v5 + 80);
    unint64_t v16 = (*(void *)(v5 + 88) - v15) >> 3;
    BOOL v17 = v14 >= v16;
    if (v14 > v16)
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(v7, v14 - v16);
      unint64_t v14 = *(int *)(v5 + 8);
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    BOOL v17 = 1;
  }
  if (!v17) {
    *(void *)(v5 + 88) = v15 + 8 * v14;
  }
LABEL_7:
  uint64_t v19 = *(void *)(v5 + 104);
  uint64_t v18 = *(void *)(v5 + 112);
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3);
  if (v14 <= v20)
  {
    if (v14 < v20)
    {
      uint64_t v21 = v19 + 24 * (int)v14;
      if (v18 != v21)
      {
        uint64_t v22 = *(void *)(v5 + 112);
        do
        {
          long long v24 = *(void **)(v22 - 24);
          v22 -= 24;
          uint64_t v23 = v24;
          if (v24)
          {
            *(void *)(v18 - 16) = v23;
            operator delete(v23);
          }
          uint64_t v18 = v22;
        }
        while (v22 != v21);
      }
      *(void *)(v5 + 112) = v21;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v8, v14 - v20);
  }
  unint64_t v25 = *(int *)(v5 + 8);
  if ((int)v25 > 0)
  {
    uint64_t v92 = v12;
    long long v93 = v11;
    int v94 = v10;
    uint64_t v95 = v9;
    int64_t v26 = 0;
    int64_t v27 = 0x8000000000000000;
    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      signed int v29 = *(_DWORD *)(*(void *)(v5 + 16) + 4 * v26);
      uint64_t v30 = *(void *)(*(void *)(v5 + 376) + 40);
      uint64_t v31 = *(void *)(v5 + 56);
      uint64_t v32 = 8 * v26;
      *(void *)(v31 + v32) = *(void *)(v30 + 12 * v29);
      uint64_t v33 = *(void *)(v30 + 12 * (v29 ^ 1));
      *(void *)(*(void *)(v5 + 80) + v32) = -v33;
      uint64_t v34 = *(void *)(v31 + 8 * v26);
      if (v34 < v28) {
        uint64_t v28 = v34;
      }
      if (v27 <= -v33) {
        int64_t v27 = -v33;
      }
      if (v34 + v33)
      {
        int64_t v50 = v27;
        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)a3, v29)) {
          operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)a3, *(_DWORD *)(*v102 + 4 * v26));
        }
        unint64_t v51 = *(void *)(*v99 + 8 * v26) - *(void *)(*v100 + 8 * v26) + 1;
        uint64_t v8 = v101;
        unint64_t v52 = (std::vector<int> *)(*v101 + 24 * v26);
        unint64_t v53 = v52->__end_ - v52->__begin_;
        if (v51 <= v53)
        {
          if (v51 < v53) {
            v52->__end_ = &v52->__begin_[v51];
          }
        }
        else
        {
          std::vector<int>::__append(v52, v51 - v53, &operations_research::sat::kFalseLiteralIndex);
        }
        operations_research::sat::IntegerEncoder::FullDomainEncoding(a3, *(_DWORD *)(*v102 + 4 * v26), (char **)__u);
        unint64_t v54 = *(_DWORD **)__u;
        uint64_t v55 = v106;
        uint64_t v5 = v103;
        if (*(_DWORD **)__u != v106)
        {
          uint64_t v56 = *(void *)(*v100 + 8 * v26);
          int v57 = *(_DWORD **)__u;
          do
          {
            if (*(void *)v57 >= v56 && *(void *)(*v99 + 8 * v26) >= *(void *)v57) {
              *(_DWORD *)(*(void *)(*v101 + 24 * v26) + 4 * (*(void *)v57 - v56)) = v57[2];
            }
            v57 += 3;
          }
          while (v57 != v55);
        }
        if (v54)
        {
          uint64_t v106 = v54;
          operator delete(v54);
        }
        int64_t v27 = v50;
        goto LABEL_19;
      }
      uint64_t v35 = *v8 + 24 * v26;
      BOOL v37 = (uint64_t *)(v35 + 8);
      uint64_t v36 = *(char **)(v35 + 8);
      unint64_t v38 = *(void *)(v35 + 16);
      if ((unint64_t)v36 >= v38) {
        break;
      }
      *(_DWORD *)uint64_t v36 = -2;
      *BOOL v37 = (uint64_t)(v36 + 4);
LABEL_19:
      ++v26;
      unint64_t v25 = *(int *)(v5 + 8);
      if (v26 >= (uint64_t)v25)
      {
        unint64_t v10 = v94;
        uint64_t v9 = v95;
        unint64_t v12 = v92;
        uint64_t v11 = v93;
        goto LABEL_64;
      }
    }
    int64_t v98 = v27;
    uint64_t v39 = *(char **)v35;
    uint64_t v40 = (uint64_t)&v36[-*(void *)v35];
    uint64_t v41 = v40 >> 2;
    unint64_t v42 = (v40 >> 2) + 1;
    if (v42 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = v38 - (void)v39;
    if (v43 >> 1 > v42) {
      unint64_t v42 = v43 >> 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      if (v44 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v45 = v44;
      uint64_t v46 = operator new(4 * v44);
      unint64_t v44 = v45;
      uint64_t v47 = &v46[4 * v41];
      *uint64_t v47 = -2;
      uint64_t v48 = (uint64_t)(v47 + 1);
      if (v36 != v39) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = (_DWORD *)(4 * v41);
      *(_DWORD *)(4 * v41) = -2;
      uint64_t v48 = 4 * v41 + 4;
      if (v36 != v39)
      {
LABEL_35:
        unint64_t v49 = v36 - 4 - v39;
        if (v49 >= 0x2C)
        {
          unint64_t v58 = v36 - &v46[v40];
          uint64_t v5 = v103;
          if (v58 >= 0x20)
          {
            uint64_t v59 = (v49 >> 2) + 1;
            uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            int v61 = &v36[-v60];
            uint64_t v47 = (_DWORD *)((char *)v47 - v60);
            uint64_t v62 = &v46[4 * v41 - 16];
            int v63 = v36 - 16;
            uint64_t v64 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *uint64_t v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 8;
            }
            while (v64);
            uint64_t v36 = v61;
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_59;
            }
          }
        }
        else
        {
          uint64_t v5 = v103;
        }
        do
        {
          int v66 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *--uint64_t v47 = v66;
        }
        while (v36 != v39);
LABEL_59:
        *(void *)uint64_t v35 = v47;
        *BOOL v37 = v48;
        *(void *)(v35 + 16) = &v46[4 * v44];
        if (v39) {
          operator delete(v39);
        }
        uint64_t v8 = v101;
        int64_t v27 = v98;
        *BOOL v37 = v48;
        goto LABEL_19;
      }
    }
    uint64_t v5 = v103;
    goto LABEL_59;
  }
  uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v27 = 0x8000000000000000;
LABEL_64:
  *(void *)(v5 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v28;
  *(void *)(v5 + 48) = v27 - v28 + 1;
  uint64_t v68 = *(void *)(v5 + 128);
  uint64_t v67 = *(void *)(v5 + 136);
  unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((v67 - v68) >> 3);
  if (v25 <= v69)
  {
    if (v25 < v69)
    {
      uint64_t v70 = v68 + 24 * (int)v25;
      if (v67 != v70)
      {
        uint64_t v71 = *(void *)(v5 + 136);
        do
        {
          uint64_t v73 = *(void **)(v71 - 24);
          v71 -= 24;
          unint64_t v72 = v73;
          if (v73)
          {
            *(void *)(v67 - 16) = v72;
            operator delete(v72);
          }
          uint64_t v67 = v71;
        }
        while (v71 != v70);
      }
      *(void *)(v5 + 136) = v70;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v9, v25 - v69);
  }
  std::vector<int>::size_type v74 = *(int *)(v5 + 8);
  __u[0] = -1;
  std::vector<int>::assign(v10, v74, __u);
  unint64_t v75 = *(int *)(v5 + 8);
  uint64_t v76 = *(void *)(v5 + 272);
  unint64_t v77 = (*(void *)(v5 + 280) - v76) >> 2;
  if (v75 <= v77)
  {
    if (v75 < v77) {
      *(void *)(v5 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v76 + 4 * v75;
    }
  }
  else
  {
    std::vector<int>::__append(v11, v75 - v77);
    unint64_t v75 = *(int *)(v5 + 8);
  }
  uint64_t v78 = *(void *)(v5 + 296);
  unint64_t v79 = (*(void *)(v5 + 304) - v78) >> 2;
  if (v75 <= v79)
  {
    if (v75 < v79) {
      *(void *)(v5 + 304) = v78 + 4 * v75;
    }
  }
  else
  {
    std::vector<int>::__append(v12, v75 - v79);
    unint64_t v75 = *(int *)(v5 + 8);
  }
  unint64_t v80 = v75 + *(void *)(v5 + 48) + 1;
  uint64_t v82 = *(void *)(v5 + 320);
  uint64_t v81 = *(void *)(v5 + 328);
  unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v82) >> 3);
  if (v80 <= v83)
  {
    if (v80 < v83)
    {
      uint64_t v84 = v82 + 24 * v80;
      if (v81 != v84)
      {
        uint64_t v85 = *(void *)(v5 + 328);
        do
        {
          uint64_t v87 = *(void **)(v85 - 24);
          v85 -= 24;
          int8x8_t v86 = v87;
          if (v87)
          {
            *(void *)(v81 - 16) = v86;
            operator delete(v86);
          }
          uint64_t v81 = v85;
        }
        while (v85 != v84);
      }
      *(void *)(v5 + 328) = v84;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v97, v80 - v83);
  }
  unint64_t v88 = *(int *)(v5 + 8) + *(void *)(v5 + 48) + 1;
  uint64_t v89 = *(void *)(v5 + 344);
  unint64_t v90 = (*(void *)(v5 + 352) - v89) >> 2;
  if (v88 <= v90)
  {
    if (v88 < v90) {
      *(void *)(v5 + 352) = v89 + 4 * v88;
    }
  }
  else
  {
    std::vector<int>::__append(v96, v88 - v90);
  }
  return v5;
}

void sub_23CBA4E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15, void **a16, void **a17, void **a18, void **a19, void *a20)
{
  BOOL v37 = v22;
  unint64_t v25 = *a13;
  if (*a13)
  {
    a20[44] = v25;
    operator delete(v25);
    std::vector<std::vector<int>>::~vector[abi:ne180100](a14);
    int64_t v26 = *v23;
    if (!*v23)
    {
LABEL_3:
      int64_t v27 = *v37;
      if (!*v37) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::~vector[abi:ne180100](a14);
    int64_t v26 = *v23;
    if (!*v23) {
      goto LABEL_3;
    }
  }
  a20[38] = v26;
  operator delete(v26);
  int64_t v27 = *v37;
  if (!*v37)
  {
LABEL_4:
    uint64_t v28 = (void *)a20[31];
    if (!v28) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  a20[35] = v27;
  operator delete(v27);
  uint64_t v28 = (void *)a20[31];
  if (!v28)
  {
LABEL_5:
    signed int v29 = *v21;
    if (!*v21) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  a20[32] = v28;
  operator delete(v28);
  signed int v29 = *v21;
  if (!*v21)
  {
LABEL_6:
    uint64_t v30 = a20;
    uint64_t v31 = (void *)a20[25];
    if (!v31) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  a20[29] = v29;
  operator delete(v29);
  uint64_t v30 = a20;
  uint64_t v31 = (void *)a20[25];
  if (!v31)
  {
LABEL_7:
    uint64_t v32 = (void *)v30[22];
    if (!v32) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  v30[26] = v31;
  operator delete(v31);
  uint64_t v32 = (void *)v30[22];
  if (!v32)
  {
LABEL_8:
    uint64_t v33 = (void *)a20[19];
    if (!v33) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_20:
  operator delete(v32);
  uint64_t v33 = (void *)a20[19];
  if (!v33)
  {
LABEL_10:
    std::vector<std::vector<int>>::~vector[abi:ne180100](v20);
    std::vector<std::vector<int>>::~vector[abi:ne180100](a18);
    uint64_t v34 = *a16;
    if (*a16)
    {
      a20[11] = v34;
      operator delete(v34);
      uint64_t v35 = *a17;
      if (!*a17)
      {
LABEL_12:
        uint64_t v36 = *a19;
        if (!*a19) {
          goto LABEL_13;
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v35 = *a17;
      if (!*a17) {
        goto LABEL_12;
      }
    }
    a20[8] = v35;
    operator delete(v35);
    uint64_t v36 = *a19;
    if (!*a19) {
LABEL_13:
    }
      _Unwind_Resume(a1);
LABEL_24:
    a20[3] = v36;
    operator delete(v36);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v33);
  goto LABEL_10;
}

void operations_research::sat::AllDifferentConstraint::RegisterWith(operations_research::sat::AllDifferentConstraint *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  double v2 = a2;
  uint64_t v3 = this;
  int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v2, v4, 2);
  uint64_t v5 = (unsigned int **)*((void *)v3 + 13);
  uint64_t v101 = (unsigned int **)*((void *)v3 + 14);
  if (v5 != v101)
  {
    unint64_t v107 = *(void *)&v4 | 0xFFFFFFFF00000000;
    uint64_t v108 = (void *)((char *)v2 + 64);
    uint64_t v104 = v3;
    uint64_t v106 = v2;
    while (1)
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      int v102 = v5;
      uint64_t v105 = v6;
      if (*v5 != v6) {
        break;
      }
LABEL_3:
      uint64_t v5 = v102 + 3;
      if (v102 + 3 == v101) {
        return;
      }
    }
    while (1)
    {
      unint64_t v9 = *v7;
      if ((v9 & 0x80000000) != 0
        || ((*(void *)(*(void *)(*((void *)v3 + 46) + 24) + ((v9 >> 3) & 0x1FFFFFF8)) >> (v9 & 0x3E)) & 3) != 0)
      {
        goto LABEL_8;
      }
      unint64_t v10 = (void *)*((void *)v2 + 8);
      uint64_t v11 = (void *)*((void *)v2 + 9);
      uint64_t v12 = v11 - v10;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * v12;
      if ((int)v9 >= -1431655765 * (int)v12)
      {
        uint64_t v14 = (v9 << 32) + 0x100000000;
        unint64_t v15 = v14 >> 32;
        unint64_t v16 = (v14 >> 32) - v13;
        if (v14 >> 32 <= v13)
        {
          if (v14 >> 32 < v13)
          {
            signed int v29 = &v10[3 * SHIDWORD(v14)];
            if (v11 != v29)
            {
              uint64_t v30 = (void *)*((void *)v2 + 9);
              do
              {
                uint64_t v32 = (void *)*(v30 - 3);
                v30 -= 3;
                uint64_t v31 = v32;
                if (v32)
                {
                  *(v11 - 2) = v31;
                  operator delete(v31);
                }
                uint64_t v11 = v30;
              }
              while (v30 != v29);
            }
            *((void *)v2 + 9) = v29;
          }
        }
        else
        {
          uint64_t v17 = *((void *)v2 + 10);
          if (0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v11) >> 3) >= v16)
          {
            bzero(*((void **)v2 + 9), 24 * ((24 * v16 - 24) / 0x18) + 24);
            *((void *)v2 + 9) = &v11[3 * ((24 * v16 - 24) / 0x18) + 3];
          }
          else
          {
            if (v14 < 0) {
              goto LABEL_111;
            }
            if (0x5555555555555556 * ((v17 - (uint64_t)v10) >> 3) > v15) {
              unint64_t v15 = 0x5555555555555556 * ((v17 - (uint64_t)v10) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v10) >> 3) >= 0x555555555555555) {
              unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
            }
            if (v15 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_110;
            }
            uint64_t v18 = 24 * v15;
            uint64_t v19 = (char *)operator new(24 * v15);
            unint64_t v20 = &v19[24 * v13];
            uint64_t v21 = &v19[v18];
            bzero(v20, 24 * ((24 * v16 - 24) / 0x18) + 24);
            uint64_t v22 = &v20[24 * ((24 * v16 - 24) / 0x18) + 24];
            if (v11 == v10)
            {
              *((void *)v2 + 8) = v20;
              *((void *)v2 + 9) = v22;
              *((void *)v2 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v21;
            }
            else
            {
              do
              {
                uint64_t v23 = v20;
                *((void *)v20 - 2) = 0;
                *((void *)v20 - 1) = 0;
                long long v24 = *(_OWORD *)(v11 - 3);
                v11 -= 3;
                *(_OWORD *)(v20 - 24) = v24;
                v20 -= 24;
                *((void *)v23 - 1) = v11[2];
                *uint64_t v11 = 0;
                v11[1] = 0;
                v11[2] = 0;
              }
              while (v11 != v10);
              uint64_t v11 = (void *)*((void *)v2 + 8);
              unint64_t v25 = (void *)*((void *)v2 + 9);
              *((void *)v2 + 8) = v20;
              *((void *)v2 + 9) = v22;
              *((void *)v2 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v21;
              if (v25 != v11)
              {
                int64_t v26 = v25;
                do
                {
                  uint64_t v28 = (void *)*(v26 - 3);
                  v26 -= 3;
                  int64_t v27 = v28;
                  if (v28)
                  {
                    *(v25 - 2) = v27;
                    operator delete(v27);
                  }
                  unint64_t v25 = v26;
                }
                while (v26 != v11);
              }
            }
            if (v11) {
              operator delete(v11);
            }
          }
        }
      }
      uint64_t v33 = (unint64_t **)(*v108 + 24 * v9);
      uint64_t v35 = (uint64_t *)(v33 + 1);
      uint64_t v34 = v33[1];
      unint64_t v36 = (unint64_t)v33[2];
      if ((unint64_t)v34 < v36)
      {
        *uint64_t v34 = v107;
        uint64_t v37 = (uint64_t)(v34 + 1);
        goto LABEL_59;
      }
      unint64_t v38 = *v33;
      uint64_t v39 = (char *)v34 - (char *)*v33;
      uint64_t v40 = v39 >> 3;
      unint64_t v41 = (v39 >> 3) + 1;
      if (v41 >> 61) {
        goto LABEL_109;
      }
      uint64_t v42 = v36 - (void)v38;
      if (v42 >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v103 = v41;
      if (v41) {
        break;
      }
      uint64_t v43 = 0;
      unint64_t v44 = (unint64_t *)(8 * v40);
      *(void *)(8 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v107;
      uint64_t v37 = 8 * v40 + 8;
      if (v34 != v38) {
        goto LABEL_50;
      }
LABEL_57:
      void *v33 = v44;
      *uint64_t v35 = v37;
      std::string v33[2] = (unint64_t *)&v43[8 * v103];
      if (v34) {
        operator delete(v34);
      }
LABEL_59:
      double v2 = v106;
      *uint64_t v35 = v37;
      uint64_t v54 = (int)v9 ^ 1;
      uint64_t v55 = (void *)*((void *)v106 + 8);
      uint64_t v56 = (void *)*((void *)v106 + 9);
      uint64_t v57 = v56 - v55;
      unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * v57;
      if ((int)v54 >= -1431655765 * (int)v57)
      {
        uint64_t v59 = (v54 << 32) + 0x100000000;
        unint64_t v60 = v59 >> 32;
        unint64_t v61 = (v59 >> 32) - v58;
        if (v59 >> 32 <= v58)
        {
          if (v59 >> 32 < v58)
          {
            std::vector<int>::size_type v74 = &v55[3 * SHIDWORD(v59)];
            if (v56 != v74)
            {
              unint64_t v75 = (void *)*((void *)v106 + 9);
              do
              {
                unint64_t v77 = (void *)*(v75 - 3);
                v75 -= 3;
                uint64_t v76 = v77;
                if (v77)
                {
                  *(v56 - 2) = v76;
                  operator delete(v76);
                }
                uint64_t v56 = v75;
              }
              while (v75 != v74);
            }
            *((void *)v106 + 9) = v74;
          }
        }
        else
        {
          uint64_t v62 = *((void *)v106 + 10);
          if (0xAAAAAAAAAAAAAAABLL * ((v62 - (uint64_t)v56) >> 3) >= v61)
          {
            bzero(*((void **)v106 + 9), 24 * ((24 * v61 - 24) / 0x18) + 24);
            *((void *)v106 + 9) = &v56[3 * ((24 * v61 - 24) / 0x18) + 3];
          }
          else
          {
            if (v59 < 0) {
LABEL_111:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v62 - (uint64_t)v55) >> 3) > v60) {
              unint64_t v60 = 0x5555555555555556 * ((v62 - (uint64_t)v55) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v62 - (uint64_t)v55) >> 3) >= 0x555555555555555) {
              unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
            }
            if (v60 > 0xAAAAAAAAAAAAAAALL) {
LABEL_110:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v63 = 24 * v60;
            uint64_t v64 = (char *)operator new(24 * v60);
            long long v65 = &v64[24 * v58];
            int v66 = &v64[v63];
            bzero(v65, 24 * ((24 * v61 - 24) / 0x18) + 24);
            uint64_t v67 = &v65[24 * ((24 * v61 - 24) / 0x18) + 24];
            if (v56 == v55)
            {
              *((void *)v106 + 8) = v65;
              *((void *)v106 + 9) = v67;
              *((void *)v106 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v66;
            }
            else
            {
              do
              {
                uint64_t v68 = v65;
                *((void *)v65 - 2) = 0;
                *((void *)v65 - 1) = 0;
                long long v69 = *(_OWORD *)(v56 - 3);
                v56 -= 3;
                *(_OWORD *)(v65 - 24) = v69;
                v65 -= 24;
                *((void *)v68 - 1) = v56[2];
                *uint64_t v56 = 0;
                v56[1] = 0;
                v56[2] = 0;
              }
              while (v56 != v55);
              uint64_t v56 = (void *)*((void *)v106 + 8);
              uint64_t v70 = (void *)*((void *)v106 + 9);
              *((void *)v106 + 8) = v65;
              *((void *)v106 + 9) = v67;
              *((void *)v106 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v66;
              if (v70 != v56)
              {
                uint64_t v71 = v70;
                do
                {
                  uint64_t v73 = (void *)*(v71 - 3);
                  v71 -= 3;
                  unint64_t v72 = v73;
                  if (v73)
                  {
                    *(v70 - 2) = v72;
                    operator delete(v72);
                  }
                  uint64_t v70 = v71;
                }
                while (v71 != v56);
              }
            }
            if (v56) {
              operator delete(v56);
            }
          }
        }
      }
      uint64_t v78 = (unint64_t **)(*v108 + 24 * (int)v54);
      unint64_t v80 = (uint64_t *)(v78 + 1);
      unint64_t v79 = v78[1];
      uint64_t v82 = v78 + 2;
      unint64_t v81 = (unint64_t)v78[2];
      if ((unint64_t)v79 < v81)
      {
        *unint64_t v79 = v107;
        uint64_t v8 = (uint64_t)(v79 + 1);
        goto LABEL_7;
      }
      unint64_t v83 = *v78;
      uint64_t v84 = (char *)v79 - (char *)*v78;
      uint64_t v85 = v84 >> 3;
      unint64_t v86 = (v84 >> 3) + 1;
      if (v86 >> 61) {
LABEL_109:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v87 = v81 - (void)v83;
      if (v87 >> 2 > v86) {
        unint64_t v86 = v87 >> 2;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v86;
      }
      if (v88)
      {
        if (v88 >> 61) {
          goto LABEL_110;
        }
        uint64_t v89 = operator new(8 * v88);
        unint64_t v90 = (unint64_t *)&v89[8 * v85];
        *unint64_t v90 = v107;
        uint64_t v8 = (uint64_t)(v90 + 1);
        if (v79 == v83)
        {
LABEL_99:
          double v2 = v106;
          *uint64_t v78 = v90;
          *unint64_t v80 = v8;
          *uint64_t v82 = &v89[8 * v88];
          if (!v79) {
            goto LABEL_7;
          }
LABEL_107:
          operator delete(v79);
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v89 = 0;
        unint64_t v90 = (unint64_t *)(8 * v85);
        *(void *)(8 * v85) = v107;
        uint64_t v8 = 8 * v85 + 8;
        if (v79 == v83) {
          goto LABEL_99;
        }
      }
      unint64_t v91 = (char *)(v79 - 1) - (char *)v83;
      if (v91 < 0x58)
      {
        double v2 = v106;
        do
        {
LABEL_105:
          unint64_t v100 = *--v79;
          *--unint64_t v90 = v100;
        }
        while (v79 != v83);
        goto LABEL_106;
      }
      unint64_t v92 = (char *)v79 - &v89[v84];
      double v2 = v106;
      if (v92 < 0x20) {
        goto LABEL_105;
      }
      uint64_t v93 = (v91 >> 3) + 1;
      uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v95 = &v79[v94 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v90 = (unint64_t *)((char *)v90 - v94);
      uint64_t v96 = &v89[8 * v85 - 16];
      uint64_t v97 = v79 - 2;
      uint64_t v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v99 = *(_OWORD *)v97;
        *(v96 - 1) = *((_OWORD *)v97 - 1);
        *uint64_t v96 = v99;
        v96 -= 2;
        v97 -= 4;
        v98 -= 4;
      }
      while (v98);
      unint64_t v79 = v95;
      if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_105;
      }
LABEL_106:
      unint64_t v79 = *v78;
      *uint64_t v78 = v90;
      *unint64_t v80 = v8;
      *uint64_t v82 = &v89[8 * v88];
      if (v79) {
        goto LABEL_107;
      }
LABEL_7:
      uint64_t v3 = v104;
      uint64_t v6 = v105;
      *unint64_t v80 = v8;
LABEL_8:
      if (++v7 == v6) {
        goto LABEL_3;
      }
    }
    if (v41 >> 61) {
      goto LABEL_110;
    }
    uint64_t v43 = operator new(8 * v41);
    unint64_t v44 = (unint64_t *)&v43[8 * v40];
    *unint64_t v44 = v107;
    uint64_t v37 = (uint64_t)(v44 + 1);
    if (v34 == v38) {
      goto LABEL_57;
    }
LABEL_50:
    unint64_t v45 = (char *)(v34 - 1) - (char *)v38;
    if (v45 < 0x58) {
      goto LABEL_114;
    }
    if ((unint64_t)((char *)v34 - &v43[v39]) < 0x20) {
      goto LABEL_114;
    }
    uint64_t v46 = (v45 >> 3) + 1;
    uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v48 = &v34[v47 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v44 = (unint64_t *)((char *)v44 - v47);
    unint64_t v49 = &v43[8 * v40 - 16];
    int64_t v50 = v34 - 2;
    uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *unint64_t v49 = v52;
      v49 -= 2;
      v50 -= 4;
      v51 -= 4;
    }
    while (v51);
    uint64_t v34 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_114:
      do
      {
        unint64_t v53 = *--v34;
        *--unint64_t v44 = v53;
      }
      while (v34 != v38);
    }
    uint64_t v34 = *v33;
    goto LABEL_57;
  }
}

uint64_t operations_research::sat::AllDifferentConstraint::MakeAugmentingPath(operations_research::sat::AllDifferentConstraint *this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_DWORD *)*((void *)this + 34);
  *uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 22);
  *(void *)(v4 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  uint64_t v5 = *((void *)this + 37);
  *(_DWORD *)(v5 + 4 * a2) = -1;
  uint64_t v6 = *((void *)this + 16);
  int v7 = 1;
  while (1)
  {
    int v8 = v3[v2];
    unint64_t v9 = (int **)(v6 + 24 * v8);
    uint64_t v11 = *v9;
    unint64_t v10 = v9[1];
    if (v11 != v10) {
      break;
    }
LABEL_2:
    if (++v2 >= v7) {
      return 0;
    }
  }
  uint64_t v12 = *((void *)this + 19);
  while (1)
  {
    int v13 = *v11;
    unint64_t v14 = (unint64_t)*v11 >> 6;
    uint64_t v15 = *(void *)(v12 + 8 * v14);
    if (((1 << *v11) & v15) != 0) {
      goto LABEL_6;
    }
    *(void *)(v12 + 8 * v14) = (1 << v13) | v15;
    uint64_t v16 = *((void *)this + 25);
    int v17 = *(_DWORD *)(v16 + 4 * v13);
    if (v17 == -1) {
      break;
    }
    *(void *)(v4 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v3[v7++] = v17;
    *(_DWORD *)(v5 + 4 * v17) = v8;
LABEL_6:
    if (++v11 == v10) {
      goto LABEL_2;
    }
  }
  if (v8 != -1)
  {
    uint64_t v18 = *((void *)this + 28);
    do
    {
      uint64_t v19 = 4 * v8;
      int v20 = *(_DWORD *)(v18 + v19);
      *(_DWORD *)(v18 + v19) = v13;
      *(_DWORD *)(v16 + 4 * v13) = v8;
      int v8 = *(_DWORD *)(v5 + v19);
      int v13 = v20;
    }
    while (v8 != -1);
  }
  return 1;
}

uint64_t operations_research::sat::AllDifferentConstraint::Propagate(char **this)
{
  unint64_t v1 = (operations_research::sat::AllDifferentConstraint *)this;
  uint64_t v2 = (std::vector<int> *)(this + 28);
  uint64_t v3 = (uint64_t *)(this + 31);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(this + 31, this[28], this[29], (this[29] - this[28]) >> 2);
  std::vector<int>::size_type value = (std::vector<int>::size_type)v2[-8].__end_cap_.__value_;
  __u[0] = -1;
  v337 = v2 - 1;
  std::vector<int>::assign(v2 - 1, value, __u);
  std::vector<int>::size_type begin_low = SLODWORD(v2[-9].__begin_);
  __u[0] = -1;
  std::vector<int>::assign(v2, begin_low, __u);
  v339 = v2;
  LODWORD(v6) = v2[-9].__begin_;
  v355 = v1;
  if ((int)v6 < 1) {
    goto LABEL_105;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)v1 + 16);
  do
  {
    unint64_t v9 = (char **)(v8 + 24 * v7);
    unint64_t v10 = *v9;
    v9[1] = *v9;
    LODWORD(v9) = *(_DWORD *)(*((void *)v1 + 2) + 4 * v7);
    uint64_t v11 = *(void *)(*((void *)v1 + 47) + 40);
    uint64_t v12 = *(void *)(v11 + 12 * (int)v9);
    uint64_t v13 = *(void *)(v11 + 12 * (int)(v9 ^ 1));
    unint64_t v14 = v10;
    if (v12 <= -v13)
    {
      uint64_t v15 = 1 - v13;
      uint64_t v340 = v15;
      uint64_t v344 = v7;
      while (1)
      {
        uint64_t v17 = *(void *)(*((void *)v1 + 7) + 8 * v7);
        uint64_t v18 = &operations_research::sat::kFalseLiteralIndex;
        BOOL v19 = __OFSUB__(v12, v17);
        uint64_t v20 = v12 - v17;
        if (v20 < 0 == v19)
        {
          uint64_t v18 = &operations_research::sat::kFalseLiteralIndex;
          if (*(void *)(*((void *)v1 + 10) + 8 * v7) >= v12) {
            uint64_t v18 = (int *)(*(void *)(*((void *)v1 + 13) + 24 * v7) + 4 * v20);
          }
        }
        int v21 = *v18;
        if (*v18 == -3
          || v21 != -2
          && ((*(void *)(*(void *)(*((void *)v1 + 46) + 24)
                         + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v21 & 0x3F ^ 1u)) & 1) != 0)
        {
          goto LABEL_8;
        }
        int v22 = v12 - *((_DWORD *)v1 + 10);
        uint64_t v23 = *((void *)v1 + 16) + 24 * v7;
        unint64_t v25 = (uint64_t *)(v23 + 8);
        long long v24 = *(char **)(v23 + 8);
        unint64_t v26 = *(void *)(v23 + 16);
        if ((unint64_t)v24 >= v26) {
          break;
        }
        *(_DWORD *)long long v24 = v22;
        uint64_t v16 = (uint64_t)(v24 + 4);
LABEL_7:
        *unint64_t v25 = v16;
LABEL_8:
        if (++v12 == v15)
        {
          uint64_t v8 = *((void *)v1 + 16);
          unint64_t v10 = *(char **)(v8 + 24 * v7);
          unint64_t v14 = *(char **)(v8 + 24 * v7 + 8);
          goto LABEL_37;
        }
      }
      int64_t v27 = *(char **)v23;
      uint64_t v28 = (uint64_t)&v24[-*(void *)v23];
      uint64_t v29 = v28 >> 2;
      unint64_t v30 = (v28 >> 2) + 1;
      if (v30 >> 62) {
LABEL_386:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v31 = v26 - (void)v27;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v349 = v30;
      if (v30)
      {
        if (v30 >> 62) {
LABEL_387:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v32 = operator new(4 * v30);
        uint64_t v33 = &v32[4 * v29];
        _DWORD *v33 = v22;
        uint64_t v16 = (uint64_t)(v33 + 1);
        if (v24 != v27) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (_DWORD *)(4 * v29);
        *(_DWORD *)(4 * v29) = v22;
        uint64_t v16 = 4 * v29 + 4;
        if (v24 != v27)
        {
LABEL_24:
          unint64_t v34 = v24 - 4 - v27;
          if (v34 >= 0x2C)
          {
            unint64_t v35 = v24 - &v32[v28];
            unint64_t v1 = v355;
            if (v35 >= 0x20)
            {
              uint64_t v36 = (v34 >> 2) + 1;
              uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v38 = &v24[-v37];
              uint64_t v33 = (_DWORD *)((char *)v33 - v37);
              uint64_t v39 = &v32[4 * v29 - 16];
              uint64_t v40 = v24 - 16;
              uint64_t v41 = v36 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v42 = *(_OWORD *)v40;
                *(v39 - 1) = *((_OWORD *)v40 - 1);
                *uint64_t v39 = v42;
                v39 -= 2;
                v40 -= 32;
                v41 -= 8;
              }
              while (v41);
              long long v24 = v38;
              if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_33;
              }
            }
          }
          else
          {
            unint64_t v1 = v355;
          }
          do
          {
            int v43 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *--uint64_t v33 = v43;
          }
          while (v24 != v27);
LABEL_33:
          *(void *)uint64_t v23 = v33;
          *unint64_t v25 = v16;
          *(void *)(v23 + 16) = &v32[4 * v349];
          if (v27) {
            operator delete(v27);
          }
          uint64_t v15 = v340;
          uint64_t v7 = v344;
          goto LABEL_7;
        }
      }
      unint64_t v1 = v355;
      goto LABEL_33;
    }
LABEL_37:
    if (v14 - v10 == 4)
    {
      int v44 = *(_DWORD *)v10;
      if (v337->__begin_[v44] == -1)
      {
        v337->__begin_[v44] = v7;
        v339->__begin_[v7] = v44;
      }
    }
    ++v7;
    uint64_t v6 = *((int *)v1 + 2);
  }
  while (v7 < v6);
  if ((int)v6 >= 1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    std::vector<int>::pointer begin = v339->__begin_;
    do
    {
      if (begin[v46] == -1)
      {
        uint64_t v48 = *v3;
        int v49 = *(_DWORD *)(*v3 + 4 * v46);
        if (v49 != -1)
        {
          std::vector<int>::pointer v50 = v337->__begin_;
          if (v337->__begin_[v49] == -1)
          {
            uint64_t v51 = *((void *)v1 + 5) + v49;
            uint64_t v52 = *(void *)(*((void *)v1 + 7) + 8 * v46);
            unint64_t v53 = &operations_research::sat::kFalseLiteralIndex;
            BOOL v19 = __OFSUB__(v51, v52);
            uint64_t v54 = v51 - v52;
            if (v54 < 0 == v19)
            {
              unint64_t v53 = &operations_research::sat::kFalseLiteralIndex;
              if (*(void *)(*((void *)v1 + 10) + 8 * v46) >= v51) {
                unint64_t v53 = (int *)(*(void *)(*((void *)v1 + 13) + v45) + 4 * v54);
              }
            }
            int v55 = *v53;
            if (*v53 != -3
              && (v55 == -2
               || ((*(void *)(*(void *)(*((void *)v1 + 46) + 24)
                              + (((unint64_t)v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v55 & 0x3F ^ 1u)) & 1) == 0))
            {
              begin[v46] = v49;
              v50[*(int *)(v48 + 4 * v46)] = v46;
              LODWORD(v6) = *((_DWORD *)v1 + 2);
            }
          }
        }
      }
      ++v46;
      v45 += 24;
    }
    while (v46 < (int)v6);
    if ((int)v6 >= 1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = *((void *)v1 + 28);
      do
      {
        if (*(_DWORD *)(v57 + 4 * v56) == -1)
        {
          unint64_t v58 = *((void *)v1 + 6);
          LOBYTE(__u[0]) = 0;
          std::vector<BOOL>::assign((char **)v1 + 19, v58, __u);
          unint64_t v59 = *((int *)v1 + 2);
          LOBYTE(__u[0]) = 0;
          std::vector<BOOL>::assign((char **)v1 + 22, v59, __u);
          operations_research::sat::AllDifferentConstraint::MakeAugmentingPath(v1, v56);
          uint64_t v57 = *((void *)v1 + 28);
          LODWORD(v6) = *((_DWORD *)v1 + 2);
          if (*(_DWORD *)(v57 + 4 * v56) == -1) {
            break;
          }
        }
        ++v56;
      }
      while (v56 < (int)v6);
      if ((int)v56 < (int)v6)
      {
        unint64_t v60 = (void *)*((void *)v1 + 46);
        v60[18] = 0;
        unint64_t v61 = (char *)v60[12];
        v350 = (void **)(v60 + 12);
        v60[13] = v61;
        if ((int)v6 < 1) {
          return 0;
        }
        unint64_t v62 = 0;
        while (1)
        {
          if ((*(void *)(*((void *)v1 + 22) + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62))
          {
            uint64_t v63 = *(int *)(*((void *)v1 + 7) + 8 * v62);
            uint64_t v64 = *((void *)v1 + 10);
            uint64_t v65 = *(void *)(v64 + 8 * v62);
            if (v65 >= v63) {
              break;
            }
          }
LABEL_63:
          if ((uint64_t)++v62 >= (int)v6) {
            return 0;
          }
        }
        while (2)
        {
          uint64_t v67 = *(void *)(*((void *)v1 + 7) + 8 * v62);
          BOOL v19 = __OFSUB__(v63, v67);
          uint64_t v68 = v63 - v67;
          BOOL v69 = v68 < 0 != v19 || v65 < v63;
          uint64_t v70 = &operations_research::sat::kFalseLiteralIndex;
          if (!v69) {
            uint64_t v70 = (int *)(*(void *)(*((void *)v1 + 13) + 24 * v62) + 4 * v68);
          }
          int v71 = *v70;
          if ((*v70 & 0x80000000) == 0
            && ((*(void *)(*((void *)v1 + 19)
                           + (((unint64_t)(v63 - *((void *)v1 + 5)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v63 - *((unsigned char *)v1 + 40))) & 1) == 0)
          {
            unint64_t v72 = v60[14];
            if ((unint64_t)v61 < v72)
            {
              *(_DWORD *)unint64_t v61 = v71;
              uint64_t v66 = (uint64_t)(v61 + 4);
            }
            else
            {
              uint64_t v73 = (char *)*v350;
              uint64_t v74 = v61 - (unsigned char *)*v350;
              uint64_t v75 = v74 >> 2;
              unint64_t v76 = (v74 >> 2) + 1;
              if (v76 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v77 = v72 - (void)v73;
              if (v77 >> 1 > v76) {
                unint64_t v76 = v77 >> 1;
              }
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v76;
              }
              if (v78)
              {
                if (v78 >> 62) {
                  goto LABEL_387;
                }
                unint64_t v79 = operator new(4 * v78);
                unint64_t v80 = (int *)&v79[4 * v75];
                *unint64_t v80 = v71;
                uint64_t v66 = (uint64_t)(v80 + 1);
                if (v61 == v73) {
                  goto LABEL_92;
                }
              }
              else
              {
                unint64_t v79 = 0;
                unint64_t v80 = (int *)(4 * v75);
                *(_DWORD *)(4 * v75) = v71;
                uint64_t v66 = 4 * v75 + 4;
                if (v61 == v73) {
                  goto LABEL_92;
                }
              }
              unint64_t v81 = v61 - 4 - v73;
              if (v81 >= 0xBC)
              {
                if (&v79[v74 - 4 - (v81 & 0xFFFFFFFFFFFFFFFCLL)] > &v79[v74 - 4])
                {
                  uint64_t v82 = v61;
                }
                else if (&v61[-(v81 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
                {
                  uint64_t v82 = v61;
                }
                else if ((unint64_t)(v61 - v79 - v74) >= 0x20)
                {
                  uint64_t v84 = (v81 >> 2) + 1;
                  uint64_t v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v82 = &v61[-v85];
                  unint64_t v80 = (int *)((char *)v80 - v85);
                  unint64_t v86 = &v79[4 * v75 - 16];
                  uint64_t v87 = v61 - 16;
                  uint64_t v88 = v84 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v89 = *(_OWORD *)v87;
                    *(v86 - 1) = *((_OWORD *)v87 - 1);
                    *unint64_t v86 = v89;
                    v86 -= 2;
                    v87 -= 32;
                    v88 -= 8;
                  }
                  while (v88);
                  if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_92;
                  }
                }
                else
                {
                  uint64_t v82 = v61;
                }
              }
              else
              {
                uint64_t v82 = v61;
              }
              do
              {
                int v83 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *--unint64_t v80 = v83;
              }
              while (v82 != v73);
LABEL_92:
              v60[12] = v80;
              v60[13] = v66;
              v60[14] = &v79[4 * v78];
              if (v73) {
                operator delete(v73);
              }
              unint64_t v1 = v355;
            }
            v60[13] = v66;
            uint64_t v64 = *((void *)v1 + 10);
            unint64_t v61 = (char *)v66;
          }
          ++v63;
          uint64_t v65 = *(void *)(v64 + 8 * v62);
          if (v65 < v63)
          {
            LODWORD(v6) = *((_DWORD *)v1 + 2);
            goto LABEL_63;
          }
          continue;
        }
      }
    }
  }
LABEL_105:
  if ((int)v6 >= 1)
  {
    uint64_t v90 = 0;
    while (1)
    {
      *(void *)(*((void *)v1 + 40) + 24 * v90 + 8) = *(void *)(*((void *)v1 + 40) + 24 * v90);
      uint64_t v91 = *((void *)v1 + 16) + 24 * v90;
      unint64_t v92 = v339;
      uint64_t v94 = *(_DWORD **)v91;
      uint64_t v93 = *(_DWORD **)(v91 + 8);
      v341 = v93;
      uint64_t v345 = v90;
      if (*(_DWORD **)v91 != v93) {
        break;
      }
LABEL_108:
      if (++v90 >= (int)v6) {
        goto LABEL_137;
      }
    }
    while (2)
    {
      if (*v94 == v92->__begin_[v90]) {
        goto LABEL_113;
      }
      uint64_t v96 = *((void *)v1 + 40) + 24 * v90;
      int v97 = *((_DWORD *)v1 + 2) + *v94;
      long long v99 = (uint64_t *)(v96 + 8);
      uint64_t v98 = *(int **)(v96 + 8);
      uint64_t v101 = (void *)(v96 + 16);
      unint64_t v100 = *(void *)(v96 + 16);
      if ((unint64_t)v98 < v100)
      {
        *uint64_t v98 = v97;
        uint64_t v95 = (uint64_t)(v98 + 1);
        unint64_t v1 = v355;
        goto LABEL_112;
      }
      int v102 = *(int **)v96;
      uint64_t v103 = (uint64_t)v98 - *(void *)v96;
      uint64_t v104 = v103 >> 2;
      unint64_t v105 = (v103 >> 2) + 1;
      if (v105 >> 62) {
        goto LABEL_386;
      }
      uint64_t v106 = v100 - (void)v102;
      if (v106 >> 1 > v105) {
        unint64_t v105 = v106 >> 1;
      }
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v351 = v105;
      if (v105)
      {
        if (v105 >> 62) {
          goto LABEL_387;
        }
        unint64_t v107 = operator new(4 * v105);
        uint64_t v108 = (int *)&v107[4 * v104];
        int *v108 = v97;
        uint64_t v95 = (uint64_t)(v108 + 1);
        if (v98 != v102)
        {
LABEL_124:
          unint64_t v109 = (char *)(v98 - 1) - (char *)v102;
          unint64_t v1 = v355;
          if (v109 < 0x2C) {
            goto LABEL_393;
          }
          if ((unint64_t)((char *)v98 - &v107[v103]) < 0x20) {
            goto LABEL_393;
          }
          uint64_t v110 = (v109 >> 2) + 1;
          uint64_t v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v112 = &v98[v111 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v108 = (int *)((char *)v108 - v111);
          uint64_t v113 = &v107[4 * v104 - 16];
          unint64_t v114 = v98 - 4;
          uint64_t v115 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v116 = *(_OWORD *)v114;
            *(v113 - 1) = *((_OWORD *)v114 - 1);
            _OWORD *v113 = v116;
            v113 -= 2;
            v114 -= 8;
            v115 -= 8;
          }
          while (v115);
          uint64_t v98 = v112;
          if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_393:
            do
            {
              int v117 = *--v98;
              *--uint64_t v108 = v117;
            }
            while (v98 != v102);
          }
          *(void *)uint64_t v96 = v108;
          *long long v99 = v95;
          *uint64_t v101 = &v107[4 * v351];
          if (v102) {
LABEL_131:
          }
            operator delete(v102);
LABEL_132:
          unint64_t v92 = v339;
          uint64_t v93 = v341;
          uint64_t v90 = v345;
LABEL_112:
          *long long v99 = v95;
LABEL_113:
          if (++v94 == v93)
          {
            LODWORD(v6) = *((_DWORD *)v1 + 2);
            goto LABEL_108;
          }
          continue;
        }
      }
      else
      {
        unint64_t v107 = 0;
        uint64_t v108 = (int *)(4 * v104);
        *(_DWORD *)(4 * v104) = v97;
        uint64_t v95 = 4 * v104 + 4;
        if (v98 != v102) {
          goto LABEL_124;
        }
      }
      break;
    }
    *(void *)uint64_t v96 = v108;
    unint64_t v1 = v355;
    *long long v99 = v95;
    *uint64_t v101 = &v107[4 * v351];
    if (v102) {
      goto LABEL_131;
    }
    goto LABEL_132;
  }
LABEL_137:
  uint64_t v119 = *((void *)v1 + 6);
  if (v119 < 1)
  {
    uint64_t v138 = v355;
  }
  else
  {
    for (uint64_t i = 0; i < v119; ++i)
    {
      int v122 = i + *((_DWORD *)v355 + 2);
      uint64_t v123 = *((void *)v355 + 40);
      uint64_t v124 = v123 + 24 * v122;
      unint64_t v125 = *(_DWORD **)v124;
      *(void *)(v124 + 8) = *(void *)v124;
      uint64_t v126 = (void *)(v124 + 8);
      uint64_t v127 = *((void *)v355 + 25);
      int v128 = *(_DWORD *)(v127 + 4 * i);
      if (v128 != -1)
      {
        uint64_t v129 = v123 + 24 * v122;
        unint64_t v132 = *(void *)(v129 + 16);
        uint64_t v131 = (void *)(v129 + 16);
        unint64_t v130 = v132;
        if ((unint64_t)v125 < v132)
        {
          *unint64_t v125 = v128;
          uint64_t v121 = v125 + 1;
        }
        else
        {
          unint64_t v133 = v130 - (void)v125;
          unint64_t v134 = (uint64_t)(v130 - (void)v125) >> 1;
          if (v134 <= 1) {
            unint64_t v134 = 1;
          }
          if (v133 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v135 = v134;
          }
          if (v135 >> 62) {
            goto LABEL_387;
          }
          uint64_t v136 = v135;
          uint64_t v137 = operator new(4 * v135);
          *uint64_t v137 = *(_DWORD *)(v127 + 4 * i);
          uint64_t v121 = v137 + 1;
          *(void *)uint64_t v124 = v137;
          *uint64_t v126 = v137 + 1;
          *uint64_t v131 = &v137[v136];
          if (v125)
          {
            operator delete(v125);
            uint64_t v119 = *((void *)v355 + 6);
          }
        }
        *uint64_t v126 = v121;
      }
    }
    uint64_t v138 = v355;
    LODWORD(v6) = *((_DWORD *)v355 + 2);
  }
  int v346 = v6 + v119;
  v139 = (void *)(*((void *)v138 + 40) + 24 * ((int)v6 + (int)v119));
  v139[1] = *v139;
  if (v119 <= (int)v6) {
    goto LABEL_208;
  }
  if ((int)v6 < 1) {
    goto LABEL_181;
  }
  int v140 = 0;
  int v141 = v6 + v119;
  long long v142 = v355;
  while (2)
  {
    while (1)
    {
      uint64_t v143 = *((void *)v142 + 40) + 24 * v141;
      uint64_t v145 = (uint64_t *)(v143 + 8);
      uint64_t v144 = *(char **)(v143 + 8);
      unint64_t v146 = *(void *)(v143 + 16);
      if ((unint64_t)v144 >= v146) {
        break;
      }
      *(_DWORD *)uint64_t v144 = v140;
      uint64_t *v145 = (uint64_t)(v144 + 4);
      if (++v140 >= *((_DWORD *)v142 + 2)) {
        goto LABEL_180;
      }
    }
    uint64_t v147 = *(char **)v143;
    uint64_t v148 = (uint64_t)&v144[-*(void *)v143];
    uint64_t v149 = v148 >> 2;
    unint64_t v150 = (v148 >> 2) + 1;
    if (v150 >> 62) {
      goto LABEL_386;
    }
    uint64_t v151 = v146 - (void)v147;
    if (v151 >> 1 > v150) {
      unint64_t v150 = v151 >> 1;
    }
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v152 = v150;
    }
    if (!v152)
    {
      uint64_t v153 = 0;
      uint64_t v154 = (_DWORD *)(4 * v149);
      *(_DWORD *)(4 * v149) = v140;
      uint64_t v155 = 4 * v149 + 4;
      if (v144 == v147) {
        goto LABEL_177;
      }
      goto LABEL_171;
    }
    if (v152 >> 62) {
      goto LABEL_387;
    }
    uint64_t v153 = operator new(4 * v152);
    uint64_t v154 = &v153[4 * v149];
    *uint64_t v154 = v140;
    uint64_t v155 = (uint64_t)(v154 + 1);
    if (v144 != v147)
    {
LABEL_171:
      unint64_t v156 = v144 - 4 - v147;
      if (v156 < 0x2C) {
        goto LABEL_394;
      }
      if ((unint64_t)(v144 - &v153[v148]) < 0x20) {
        goto LABEL_394;
      }
      uint64_t v157 = (v156 >> 2) + 1;
      uint64_t v158 = 4 * (v157 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v159 = &v144[-v158];
      uint64_t v154 = (_DWORD *)((char *)v154 - v158);
      uint64_t v160 = &v153[4 * v149 - 16];
      uint64_t v161 = v144 - 16;
      uint64_t v162 = v157 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v163 = *(_OWORD *)v161;
        *(v160 - 1) = *((_OWORD *)v161 - 1);
        *uint64_t v160 = v163;
        v160 -= 2;
        v161 -= 32;
        v162 -= 8;
      }
      while (v162);
      uint64_t v144 = v159;
      if (v157 != (v157 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_394:
        do
        {
          int v164 = *((_DWORD *)v144 - 1);
          v144 -= 4;
          *--uint64_t v154 = v164;
        }
        while (v144 != v147);
      }
    }
LABEL_177:
    *(void *)uint64_t v143 = v154;
    uint64_t *v145 = v155;
    *(void *)(v143 + 16) = &v153[4 * v152];
    if (v147) {
      operator delete(v147);
    }
    int v141 = v346;
    long long v142 = v355;
    uint64_t *v145 = v155;
    if (++v140 < *((_DWORD *)v355 + 2)) {
      continue;
    }
    break;
  }
LABEL_180:
  uint64_t v119 = *((void *)v142 + 6);
LABEL_181:
  if (v119 >= 1)
  {
    uint64_t v165 = 0;
    while (1)
    {
      if (v337->__begin_[v165] != -1) {
        goto LABEL_185;
      }
      uint64_t v167 = *((void *)v355 + 40) + 24 * (*((_DWORD *)v355 + 2) + (int)v165);
      uint64_t v169 = (uint64_t *)(v167 + 8);
      v168 = *(char **)(v167 + 8);
      v171 = (void *)(v167 + 16);
      unint64_t v170 = *(void *)(v167 + 16);
      if ((unint64_t)v168 >= v170) {
        break;
      }
      *(_DWORD *)v168 = v346;
      uint64_t v166 = (uint64_t)(v168 + 4);
LABEL_184:
      *uint64_t v169 = v166;
LABEL_185:
      if (v119 <= ++v165) {
        goto LABEL_208;
      }
    }
    v172 = *(char **)v167;
    uint64_t v173 = (uint64_t)&v168[-*(void *)v167];
    uint64_t v174 = v173 >> 2;
    unint64_t v175 = (v173 >> 2) + 1;
    if (v175 >> 62) {
      goto LABEL_386;
    }
    uint64_t v176 = v170 - (void)v172;
    if (v176 >> 1 > v175) {
      unint64_t v175 = v176 >> 1;
    }
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v175 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v352 = v175;
    if (v175)
    {
      if (v175 >> 62) {
        goto LABEL_387;
      }
      v177 = operator new(4 * v175);
      v178 = &v177[4 * v174];
      _DWORD *v178 = v346;
      uint64_t v166 = (uint64_t)(v178 + 1);
      if (v168 != v172)
      {
LABEL_196:
        unint64_t v179 = v168 - 4 - v172;
        if (v179 < 0x2C) {
          goto LABEL_395;
        }
        if ((unint64_t)(v168 - &v177[v173]) < 0x20) {
          goto LABEL_395;
        }
        uint64_t v180 = (v179 >> 2) + 1;
        uint64_t v181 = 4 * (v180 & 0x7FFFFFFFFFFFFFF8);
        v182 = &v168[-v181];
        v178 = (_DWORD *)((char *)v178 - v181);
        v183 = &v177[4 * v174 - 16];
        v184 = v168 - 16;
        uint64_t v185 = v180 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v186 = *(_OWORD *)v184;
          *(v183 - 1) = *((_OWORD *)v184 - 1);
          _OWORD *v183 = v186;
          v183 -= 2;
          v184 -= 32;
          v185 -= 8;
        }
        while (v185);
        v168 = v182;
        if (v180 != (v180 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_395:
          do
          {
            int v187 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *--v178 = v187;
          }
          while (v168 != v172);
        }
        *(void *)uint64_t v167 = v178;
        *uint64_t v169 = v166;
        void *v171 = &v177[4 * v352];
        if (!v172) {
          goto LABEL_184;
        }
LABEL_203:
        operator delete(v172);
        uint64_t v119 = *((void *)v355 + 6);
        goto LABEL_184;
      }
    }
    else
    {
      v177 = 0;
      v178 = (_DWORD *)(4 * v174);
      *(_DWORD *)(4 * v174) = v346;
      uint64_t v166 = 4 * v174 + 4;
      if (v168 != v172) {
        goto LABEL_196;
      }
    }
    *(void *)uint64_t v167 = v178;
    *uint64_t v169 = v166;
    void *v171 = &v177[4 * v352];
    if (!v172) {
      goto LABEL_184;
    }
    goto LABEL_203;
  }
LABEL_208:
  v188 = v355;
  int v189 = -1431655765 * ((uint64_t)(*((void *)v355 + 41) - *((void *)v355 + 40)) >> 3);
  *(_OWORD *)std::string __p = 0u;
  long long v361 = 0u;
  long long v358 = 0u;
  *(_OWORD *)v359 = 0u;
  *(_OWORD *)__u = 0u;
  *(_OWORD *)v357 = 0u;
  v362[0] = 0;
  std::vector<int>::assign((std::vector<int> *)v359, v189, v362);
  v190 = __p[1];
  *(void **)&long long v361 = __p[1];
  if (v189 < 1) {
    goto LABEL_316;
  }
  int v191 = 0;
  uint64_t v192 = 0;
  unint64_t v193 = 0;
  uint64_t v194 = v189;
  uint64_t v338 = v189;
  while (2)
  {
    if (*((_DWORD *)v359[0] + v192)) {
      goto LABEL_211;
    }
    int v347 = v191;
    uint64_t v342 = v192;
    unint64_t v353 = v193;
    if ((unint64_t)v190 >= *((void *)&v361 + 1))
    {
      uint64_t v196 = 1;
      uint64_t v197 = *((void *)&v361 + 1) - (void)v190;
      if ((unint64_t)((uint64_t)(*((void *)&v361 + 1) - (void)v190) >> 1) > 1) {
        uint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        if (v198 >> 62) {
LABEL_385:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        v199 = operator new(4 * v198);
        v200 = v199;
        _DWORD *v199 = v342;
        uint64_t v195 = (uint64_t)(v199 + 1);
      }
      else
      {
        v199 = 0;
        v200 = 0;
        MEMORY[0] = v192;
        uint64_t v195 = 4;
      }
      __p[1] = v200;
      *(void *)&long long v361 = v195;
      *((void *)&v361 + 1) = &v199[v198];
      if (v190) {
        operator delete(v190);
      }
    }
    else
    {
      _DWORD *v190 = v192;
      uint64_t v195 = (uint64_t)(v190 + 1);
    }
    *(void *)&long long v361 = v195;
    while (2)
    {
      int v203 = *(_DWORD *)(v195 - 4);
      uint64_t v202 = v195 - 4;
      int v201 = v203;
      v204 = v359[0];
      int v205 = *((_DWORD *)v359[0] + v203);
      if (v205)
      {
        *(void *)&long long v361 = v202;
        if (v353 == v205)
        {
          unint64_t v206 = (int)v353 - 1;
          unint64_t v207 = *(void *)&__u[2];
          uint64_t v208 = *(void *)__u + 4 * v206;
          unint64_t v209 = (uint64_t)(*(void *)&__u[2] - *(void *)__u) >> 2;
          if ((uint64_t)v209 > (uint64_t)v206)
          {
            uint64_t v210 = *((void *)v355 + 43);
            v211 = (int *)(*(void *)__u + 4 * v206);
            do
            {
              uint64_t v212 = *v211++;
              *(_DWORD *)(v210 + 4 * v212) = v347;
            }
            while ((unint64_t)v211 < v207);
          }
          unint64_t v213 = v209 - v206;
          if (v209 <= v206)
          {
            if (v209 < v206) {
              std::vector<int>::__append((std::vector<int> *)__u, v206 - v209);
            }
          }
          else
          {
            v214 = (int *)v208;
            do
            {
              uint64_t v215 = *v214++;
              v204[v215] = 0x7FFFFFFF;
              --v213;
            }
            while (v213);
            *(void *)&std::vector<int>::value_type __u[2] = v208;
          }
          ++v347;
          uint64_t v226 = v358;
          *(void *)&long long v358 = v358 - 4;
          if (v357[1] == (void *)v358) {
            unint64_t v353 = 0;
          }
          else {
            unint64_t v353 = *(unsigned int *)(v226 - 8);
          }
        }
        goto LABEL_228;
      }
      v216 = *(unsigned char **)&__u[2];
      if ((void *)*(void *)&__u[2] < v357[0])
      {
        **(_DWORD **)&std::vector<int>::value_type __u[2] = v201;
        uint64_t v217 = (uint64_t)(v216 + 4);
        goto LABEL_263;
      }
      v218 = *(unsigned char **)__u;
      uint64_t v219 = *(void *)&__u[2] - *(void *)__u;
      uint64_t v220 = (uint64_t)(*(void *)&__u[2] - *(void *)__u) >> 2;
      unint64_t v221 = v220 + 1;
      if ((unint64_t)(v220 + 1) >> 62) {
        goto LABEL_388;
      }
      uint64_t v222 = (uint64_t)v357[0] - *(void *)__u;
      if (((uint64_t)v357[0] - *(void *)__u) >> 1 > v221) {
        unint64_t v221 = v222 >> 1;
      }
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v223 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v223 = v221;
      }
      if (v223)
      {
        if (v223 >> 62) {
          goto LABEL_385;
        }
        v224 = (char *)operator new(4 * v223);
        v225 = &v224[4 * v220];
        *(_DWORD *)v225 = v201;
        uint64_t v217 = (uint64_t)(v225 + 4);
        if (v216 == v218) {
          goto LABEL_261;
        }
        goto LABEL_255;
      }
      v224 = 0;
      v225 = (char *)(4 * v220);
      *(_DWORD *)(4 * v22google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v201;
      uint64_t v217 = 4 * v220 + 4;
      if (v216 != v218)
      {
LABEL_255:
        unint64_t v227 = v216 - 4 - v218;
        if (v227 < 0x2C) {
          goto LABEL_396;
        }
        if ((unint64_t)(v216 - &v224[v219]) < 0x20) {
          goto LABEL_396;
        }
        uint64_t v228 = (v227 >> 2) + 1;
        uint64_t v229 = 4 * (v228 & 0x7FFFFFFFFFFFFFF8);
        v230 = &v216[-v229];
        v225 -= v229;
        v231 = &v224[4 * v220 - 16];
        v232 = (long long *)(v216 - 16);
        uint64_t v233 = v228 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v234 = *v232;
          *((_OWORD *)v231 - 1) = *(v232 - 1);
          *(_OWORD *)v231 = v234;
          v231 -= 32;
          v232 -= 2;
          v233 -= 8;
        }
        while (v233);
        v216 = v230;
        if (v228 != (v228 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_396:
          do
          {
            int v235 = *((_DWORD *)v216 - 1);
            v216 -= 4;
            *((_DWORD *)v225 - 1) = v235;
            v225 -= 4;
          }
          while (v216 != v218);
        }
      }
LABEL_261:
      *(void *)__u = v225;
      *(void *)&std::vector<int>::value_type __u[2] = v217;
      v357[0] = &v224[4 * v223];
      if (v218)
      {
        operator delete(v218);
        v204 = v359[0];
      }
LABEL_263:
      *(void *)&std::vector<int>::value_type __u[2] = v217;
      unint64_t v236 = (unint64_t)(v217 - *(void *)__u) >> 2;
      v204[v201] = v236;
      v237 = (unsigned char *)v358;
      unint64_t v353 = v236;
      if ((unint64_t)v358 >= *((void *)&v358 + 1))
      {
        v239 = v357[1];
        uint64_t v240 = v358 - (unint64_t)v357[1];
        uint64_t v241 = (uint64_t)(v358 - (unint64_t)v357[1]) >> 2;
        unint64_t v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) >> 62) {
LABEL_388:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        int64_t v243 = *((void *)&v358 + 1) - (unint64_t)v357[1];
        if ((uint64_t)(*((void *)&v358 + 1) - (unint64_t)v357[1]) >> 1 > v242) {
          unint64_t v242 = v243 >> 1;
        }
        if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v244 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v244 = v242;
        }
        if (v244)
        {
          if (v244 >> 62) {
            goto LABEL_385;
          }
          v245 = (char *)operator new(4 * v244);
          v246 = &v245[4 * v241];
          *(_DWORD *)v246 = v353;
          uint64_t v238 = (uint64_t)(v246 + 4);
          if (v237 == v239) {
            goto LABEL_282;
          }
        }
        else
        {
          v245 = 0;
          v246 = (char *)(4 * v241);
          *(_DWORD *)(4 * v241) = v353;
          uint64_t v238 = 4 * v241 + 4;
          if (v237 == v239)
          {
LABEL_282:
            v357[1] = v246;
            *(void *)&long long v358 = v238;
            *((void *)&v358 + 1) = &v245[4 * v244];
            if (v239) {
              operator delete(v239);
            }
            goto LABEL_284;
          }
        }
        unint64_t v247 = v237 - 4 - v239;
        if (v247 < 0x2C) {
          goto LABEL_397;
        }
        if ((unint64_t)(v237 - &v245[v240]) < 0x20) {
          goto LABEL_397;
        }
        uint64_t v248 = (v247 >> 2) + 1;
        uint64_t v249 = 4 * (v248 & 0x7FFFFFFFFFFFFFF8);
        v250 = &v237[-v249];
        v246 -= v249;
        v251 = &v245[4 * v241 - 16];
        v252 = (long long *)(v237 - 16);
        uint64_t v253 = v248 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v254 = *v252;
          *((_OWORD *)v251 - 1) = *(v252 - 1);
          *(_OWORD *)v251 = v254;
          v251 -= 32;
          v252 -= 2;
          v253 -= 8;
        }
        while (v253);
        v237 = v250;
        if (v248 != (v248 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_397:
          do
          {
            int v255 = *((_DWORD *)v237 - 1);
            v237 -= 4;
            *((_DWORD *)v246 - 1) = v255;
            v246 -= 4;
          }
          while (v237 != v239);
        }
        goto LABEL_282;
      }
      *(_DWORD *)long long v358 = v236;
      uint64_t v238 = (uint64_t)(v237 + 4);
LABEL_284:
      *(void *)&long long v358 = v238;
      uint64_t v256 = *((void *)v355 + 40) + 24 * v201;
      v258 = *(int **)v256;
      v257 = *(int **)(v256 + 8);
      if (*(int **)v256 == v257) {
        goto LABEL_228;
      }
      int v259 = 0x7FFFFFFF;
      do
      {
        uint64_t v260 = *v258;
        int v261 = *((_DWORD *)v359[0] + v260);
        if (!v261)
        {
          v262 = (unsigned char *)v361;
          if ((unint64_t)v361 < *((void *)&v361 + 1))
          {
            *(_DWORD *)long long v361 = v260;
            *(void *)&long long v361 = v262 + 4;
            goto LABEL_288;
          }
          v263 = __p[1];
          uint64_t v264 = v361 - (unint64_t)__p[1];
          uint64_t v265 = (uint64_t)(v361 - (unint64_t)__p[1]) >> 2;
          unint64_t v266 = v265 + 1;
          if ((unint64_t)(v265 + 1) >> 62) {
            goto LABEL_388;
          }
          int64_t v267 = *((void *)&v361 + 1) - (unint64_t)__p[1];
          if ((uint64_t)(*((void *)&v361 + 1) - (unint64_t)__p[1]) >> 1 > v266) {
            unint64_t v266 = v267 >> 1;
          }
          if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v268 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v268 = v266;
          }
          if (v268)
          {
            if (v268 >> 62) {
              goto LABEL_385;
            }
            v269 = (char *)operator new(4 * v268);
            v270 = &v269[4 * v265];
            *(_DWORD *)v270 = v260;
            uint64_t v271 = (uint64_t)(v270 + 4);
            if (v262 == v263) {
              goto LABEL_309;
            }
          }
          else
          {
            v269 = 0;
            v270 = (char *)(4 * v265);
            *(_DWORD *)(4 * v265) = v260;
            uint64_t v271 = 4 * v265 + 4;
            if (v262 == v263)
            {
LABEL_309:
              __p[1] = v270;
              *(void *)&long long v361 = v271;
              *((void *)&v361 + 1) = &v269[4 * v268];
              if (v263) {
                operator delete(v263);
              }
              *(void *)&long long v361 = v271;
              goto LABEL_288;
            }
          }
          unint64_t v272 = v262 - 4 - v263;
          if (v272 < 0x2C) {
            goto LABEL_398;
          }
          if ((unint64_t)(v262 - &v269[v264]) < 0x20) {
            goto LABEL_398;
          }
          uint64_t v273 = (v272 >> 2) + 1;
          uint64_t v274 = 4 * (v273 & 0x7FFFFFFFFFFFFFF8);
          v275 = &v262[-v274];
          v270 -= v274;
          v276 = &v269[4 * v265 - 16];
          v277 = (long long *)(v262 - 16);
          uint64_t v278 = v273 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v279 = *v277;
            *((_OWORD *)v276 - 1) = *(v277 - 1);
            *(_OWORD *)v276 = v279;
            v276 -= 32;
            v277 -= 2;
            v278 -= 8;
          }
          while (v278);
          v262 = v275;
          if (v273 != (v273 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_398:
            do
            {
              int v280 = *((_DWORD *)v262 - 1);
              v262 -= 4;
              *((_DWORD *)v270 - 1) = v280;
              v270 -= 4;
            }
            while (v262 != v263);
          }
          goto LABEL_309;
        }
        if (v261 < v259) {
          int v259 = *((_DWORD *)v359[0] + v260);
        }
LABEL_288:
        ++v258;
      }
      while (v258 != v257);
      if (v259 < (int)v353)
      {
        uint64_t v281 = v358;
        do
        {
          unint64_t v282 = *(unsigned int *)(v281 - 8);
          v281 -= 4;
        }
        while ((int)v282 > v259);
        unint64_t v353 = v282;
        *(void *)&long long v358 = v281;
      }
LABEL_228:
      v190 = __p[1];
      uint64_t v195 = v361;
      if (__p[1] != (void *)v361) {
        continue;
      }
      break;
    }
    unint64_t v193 = v353;
    v188 = v355;
    int v191 = v347;
    uint64_t v192 = v342;
    uint64_t v194 = v338;
LABEL_211:
    if (++v192 != v194) {
      continue;
    }
    break;
  }
LABEL_316:
  if (v190)
  {
    *(void *)&long long v361 = v190;
    operator delete(v190);
  }
  if (v359[0])
  {
    v359[1] = v359[0];
    operator delete(v359[0]);
  }
  if (v357[1])
  {
    *(void **)&long long v358 = v357[1];
    operator delete(v357[1]);
  }
  if (*(void *)__u)
  {
    *(void *)&std::vector<int>::value_type __u[2] = *(void *)__u;
    operator delete(*(void **)__u);
  }
  unint64_t v283 = *((unsigned int *)v188 + 2);
  if ((int)v283 < 1) {
    return 1;
  }
  uint64_t v284 = 0;
  v285 = (void *)((char *)v188 + 176);
  uint64_t v286 = *((void *)v188 + 16);
  while (1)
  {
    v288 = *(char **)(v286 + 24 * v284);
    v287 = *(char **)(v286 + 24 * v284 + 8);
    if (v287 - v288 != 4 && v288 != v287) {
      break;
    }
LABEL_326:
    if (++v284 >= v283) {
      return 1;
    }
  }
  while (1)
  {
    int v290 = *(_DWORD *)v288;
    if (v339->__begin_[v284] != *(_DWORD *)v288
      && *(_DWORD *)(*((void *)v188 + 43) + 4 * v284) != *(_DWORD *)(*((void *)v188 + 43) + 4 * ((int)v283 + v290)))
    {
      uint64_t v291 = *((void *)v188 + 5) + v290;
      uint64_t v292 = *(void *)(*((void *)v188 + 7) + 8 * v284);
      v293 = &operations_research::sat::kFalseLiteralIndex;
      BOOL v19 = __OFSUB__(v291, v292);
      uint64_t v294 = v291 - v292;
      if (v294 < 0 == v19)
      {
        v293 = &operations_research::sat::kFalseLiteralIndex;
        if (*(void *)(*((void *)v188 + 10) + 8 * v284) >= v291) {
          v293 = (int *)(*(void *)(*((void *)v188 + 13) + 24 * v284) + 4 * v294);
        }
      }
      int v295 = *v293;
      if (*v293 != -3
        && (v295 == -2
         || ((*(void *)(*(void *)(*((void *)v188 + 46) + 24)
                        + (((unint64_t)v295 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v295 & 0x3F ^ 1u)) & 1) == 0))
      {
        break;
      }
    }
    v288 += 4;
    if (v288 == v287) {
      goto LABEL_326;
    }
  }
  unint64_t v296 = *((void *)v188 + 6);
  LOBYTE(__u[0]) = 0;
  std::vector<BOOL>::assign((char **)v188 + 19, v296, __u);
  unint64_t v297 = *((int *)v188 + 2);
  LOBYTE(__u[0]) = 0;
  std::vector<BOOL>::assign((char **)v188 + 22, v297, __u);
  uint64_t v298 = *((void *)v188 + 25);
  uint64_t v299 = *(int *)(v298 + 4 * v290);
  uint64_t v300 = *((void *)v188 + 28);
  *(_DWORD *)(v300 + 4 * v299) = -1;
  *(_DWORD *)(v298 + 4 * *(int *)(v300 + 4 * v284)) = -1;
  *(_DWORD *)(v300 + 4 * v284) = v290;
  uint64_t v343 = v290;
  uint64_t v348 = v284;
  *(_DWORD *)(v298 + 4 * v29google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v284;
  *(void *)(*((void *)v188 + 19) + (((unint64_t)v290 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v290;
  operations_research::sat::AllDifferentConstraint::MakeAugmentingPath(v188, v299);
  unint64_t EmptyVectorToStoreReason = operations_research::sat::Trail::GetEmptyVectorToStoreReason(*((operations_research::sat::Trail **)v188 + 46), *(_DWORD *)(*((void *)v188 + 46) + 12));
  int v302 = *((_DWORD *)v188 + 2);
  if (v302 >= 1)
  {
    unint64_t v303 = EmptyVectorToStoreReason;
    unint64_t v304 = 0;
    v354 = (void *)((char *)v188 + 176);
    while (1)
    {
      if ((*(void *)(*v285 + ((v304 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v304))
      {
        uint64_t v305 = *(int *)(*((void *)v355 + 7) + 8 * v304);
        uint64_t v306 = *((void *)v355 + 10);
        uint64_t v307 = *(void *)(v306 + 8 * v304);
        if (v307 >= v305) {
          break;
        }
      }
LABEL_344:
      if ((uint64_t)++v304 >= v302) {
        goto LABEL_380;
      }
    }
    while (2)
    {
      uint64_t v309 = *(void *)(*((void *)v355 + 7) + 8 * v304);
      BOOL v19 = __OFSUB__(v305, v309);
      uint64_t v310 = v305 - v309;
      BOOL v311 = v310 < 0 != v19 || v307 < v305;
      v312 = &operations_research::sat::kFalseLiteralIndex;
      if (!v311) {
        v312 = (int *)(*(void *)(*((void *)v355 + 13) + 24 * v304) + 4 * v310);
      }
      int v313 = *v312;
      if (*v312 < 0
        || ((*(void *)(*((void *)v355 + 19)
                       + (((unint64_t)(v305 - *((void *)v355 + 5)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v305 - *((unsigned char *)v355 + 40))) & 1) != 0)
      {
        goto LABEL_350;
      }
      v315 = *(char **)(v303 + 8);
      unint64_t v314 = *(void *)(v303 + 16);
      if ((unint64_t)v315 < v314)
      {
        *(_DWORD *)v315 = v313;
        uint64_t v308 = (uint64_t)(v315 + 4);
        goto LABEL_349;
      }
      v316 = *(char **)v303;
      uint64_t v317 = (uint64_t)&v315[-*(void *)v303];
      uint64_t v318 = v317 >> 2;
      unint64_t v319 = (v317 >> 2) + 1;
      if (v319 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v320 = v314 - (void)v316;
      if (v320 >> 1 > v319) {
        unint64_t v319 = v320 >> 1;
      }
      if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v321 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v321 = v319;
      }
      if (v321)
      {
        if (v321 >> 62) {
          goto LABEL_387;
        }
        v322 = operator new(4 * v321);
        v323 = (int *)&v322[4 * v318];
        int *v323 = v313;
        uint64_t v308 = (uint64_t)(v323 + 1);
        if (v315 == v316)
        {
LABEL_376:
          *(void *)unint64_t v303 = v323;
          *(void *)(v303 + 8) = v308;
          *(void *)(v303 + 16) = &v322[4 * v321];
          if (v316) {
            operator delete(v316);
          }
LABEL_349:
          *(void *)(v303 + 8) = v308;
          uint64_t v306 = *((void *)v355 + 10);
LABEL_350:
          ++v305;
          uint64_t v307 = *(void *)(v306 + 8 * v304);
          if (v307 < v305)
          {
            v285 = v354;
            int v302 = *((_DWORD *)v355 + 2);
            goto LABEL_344;
          }
          continue;
        }
      }
      else
      {
        v322 = 0;
        v323 = (int *)(4 * v318);
        *(_DWORD *)(4 * v318) = v313;
        uint64_t v308 = 4 * v318 + 4;
        if (v315 == v316) {
          goto LABEL_376;
        }
      }
      break;
    }
    unint64_t v324 = v315 - 4 - v316;
    if (v324 < 0x2C) {
      goto LABEL_399;
    }
    if ((unint64_t)(v315 - &v322[v317]) < 0x20) {
      goto LABEL_399;
    }
    uint64_t v325 = (v324 >> 2) + 1;
    uint64_t v326 = 4 * (v325 & 0x7FFFFFFFFFFFFFF8);
    v327 = &v315[-v326];
    v323 = (int *)((char *)v323 - v326);
    v328 = &v322[4 * v318 - 16];
    v329 = v315 - 16;
    uint64_t v330 = v325 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v331 = *(_OWORD *)v329;
      *(v328 - 1) = *((_OWORD *)v329 - 1);
      _OWORD *v328 = v331;
      v328 -= 2;
      v329 -= 32;
      v330 -= 8;
    }
    while (v330);
    v315 = v327;
    if (v325 != (v325 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_399:
      do
      {
        int v332 = *((_DWORD *)v315 - 1);
        v315 -= 4;
        *--v323 = v332;
      }
      while (v315 != v316);
    }
    goto LABEL_376;
  }
LABEL_380:
  uint64_t v333 = *((void *)v355 + 5) + v343;
  uint64_t v334 = *(void *)(*((void *)v355 + 7) + 8 * v348);
  BOOL v19 = __OFSUB__(v333, v334);
  uint64_t v335 = v333 - v334;
  if (v335 < 0 != v19 || *(void *)(*((void *)v355 + 10) + 8 * v348) < v333) {
    v336 = &operations_research::sat::kFalseLiteralIndex;
  }
  else {
    v336 = (int *)(*(void *)(*((void *)v355 + 13) + 24 * v348) + 4 * v335);
  }
  return operations_research::sat::Trail::EnqueueWithStoredReason(*((void *)v355 + 46), *v336 ^ 1u);
}

void sub_23CBA7250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = a23;
    if (!a23)
    {
LABEL_3:
      uint64_t v29 = a20;
      if (!a20) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v28 = a23;
    if (!a23) {
      goto LABEL_3;
    }
  }
  operator delete(v28);
  uint64_t v29 = a20;
  if (!a20)
  {
LABEL_4:
    unint64_t v30 = a17;
    if (!a17) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v29);
  unint64_t v30 = a17;
  if (!a17) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Trail::EnqueueWithStoredReason(uint64_t a1, int a2)
{
  unint64_t v3 = (unint64_t)a2 >> 6;
  unint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8 * v3);
  uint64_t result = 1;
  if ((v4 & (1 << a2)) == 0)
  {
    if (((v4 >> (a2 & 0x3F ^ 1u)) & 1) == 0)
    {
      *(_DWORD *)(*(void *)(a1 + 72) + 4 * *(int *)(a1 + 12)) = a2;
      *(_DWORD *)(a1 + 8) = (*(_DWORD *)(a1 + 8) & 0xFFFFFFE | a2 & 1) ^ 1;
      uint64_t v15 = 8 * (a2 >> 1);
      *(void *)(*(void *)(a1 + 120) + v15) = *(void *)(a1 + 8);
      *(void *)(*(void *)(a1 + 24) + 8 * v3) |= 1 << a2;
      ++*(_DWORD *)(a1 + 12);
      unint64_t v16 = *(void *)(a1 + 208) + *(int *)(*(void *)(a1 + 120) + v15 + 4);
      uint64_t v17 = (uint64_t *)(*(void *)(*(void *)(a1 + 184) + 8 * (v16 / 0xAA)) + 24 * (v16 % 0xAA));
      uint64_t v18 = *v17;
      uint64_t v19 = (v17[1] - *v17) >> 2;
      uint64_t v20 = (void *)(*(void *)(a1 + 224) + 16 * (a2 >> 1));
      *uint64_t v20 = v18;
      v20[1] = v19;
      uint64_t v21 = *(void *)(a1 + 120);
      *(_DWORD *)(*(void *)(a1 + 248) + 4 * (a2 >> 1)) = *(_DWORD *)(v21 + v15) >> 28;
      *(_DWORD *)(v21 + v15) &= 0xFFFFFFFu;
      return 1;
    }
    unint64_t v7 = *(void *)(a1 + 208) + *(int *)(a1 + 12);
    uint64_t v8 = *(void *)(*(void *)(a1 + 184) + 8 * (v7 / 0xAA));
    unint64_t v9 = v7 % 0xAA;
    unint64_t v10 = (char **)(v8 + 24 * v9);
    *(void *)(a1 + 144) = 0;
    uint64_t v11 = (void **)(a1 + 96);
    if ((char **)(a1 + 96) != v10) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 96), *v10, *(char **)(v8 + 24 * v9 + 8), (uint64_t)(*(void *)(v8 + 24 * v9 + 8) - (void)*v10) >> 2);
    }
    *(void *)(a1 + 144) = 0;
    uint64_t v13 = *(int **)(a1 + 104);
    unint64_t v12 = *(void *)(a1 + 112);
    if ((unint64_t)v13 < v12)
    {
      *uint64_t v13 = a2;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_27:
      uint64_t result = 0;
      *(void *)(a1 + 104) = v14;
      return result;
    }
    int v22 = (int *)*v11;
    uint64_t v23 = (char *)v13 - (unsigned char *)*v11;
    uint64_t v24 = v23 >> 2;
    unint64_t v25 = (v23 >> 2) + 1;
    if (v25 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v12 - (void)v22;
    if (v26 >> 1 > v25) {
      unint64_t v25 = v26 >> 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v28 = operator new(4 * v27);
      uint64_t v29 = (int *)&v28[4 * v24];
      unint64_t v30 = &v28[4 * v27];
      *uint64_t v29 = a2;
      uint64_t v14 = (uint64_t)(v29 + 1);
      int64_t v31 = (char *)v13 - (char *)v22;
      if (v13 == v22) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (int *)(4 * v24);
      unint64_t v30 = 0;
      *(_DWORD *)(4 * v24) = a2;
      uint64_t v14 = 4 * v24 + 4;
      int64_t v31 = (char *)v13 - (char *)v22;
      if (v13 == v22)
      {
LABEL_25:
        *(void *)(a1 + 96) = v29;
        *(void *)(a1 + 104) = v14;
        *(void *)(a1 + 112) = v30;
        if (v22) {
          operator delete(v22);
        }
        goto LABEL_27;
      }
    }
    unint64_t v32 = v31 - 4;
    if (v32 < 0x2C) {
      goto LABEL_32;
    }
    if ((unint64_t)((char *)v13 - v28 - v23) < 0x20) {
      goto LABEL_32;
    }
    uint64_t v33 = (v32 >> 2) + 1;
    uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v35 = &v13[v34 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v29 = (int *)((char *)v29 - v34);
    uint64_t v36 = &v28[4 * v24 - 16];
    uint64_t v37 = v13 - 4;
    uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *uint64_t v36 = v39;
      v36 -= 2;
      v37 -= 8;
      v38 -= 8;
    }
    while (v38);
    uint64_t v13 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        int v40 = *--v13;
        *--uint64_t v29 = v40;
      }
      while (v13 != v22);
    }
    goto LABEL_25;
  }
  return result;
}

uint64_t operations_research::sat::AllDifferentBoundsPropagator::AllDifferentBoundsPropagator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26F0BD1B8;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v48 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  unint64_t v4 = (std::vector<int> *)(a1 + 192);
  uint64_t v47 = (void **)(a1 + 40);
  uint64_t v5 = (std::vector<int> *)(a1 + 168);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v49, (google::glog_internal_namespace_ *)"./ortools/sat/all_different.cc", 421);
    uint64_t v46 = (void *)google::LogMessage::stream((google::LogMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: !vars.empty() ", 28);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v49);
  }
  uint64_t v8 = ((v6 - *a2) << 30) + 0x200000000;
  unint64_t v9 = v8 >> 32;
  if ((v6 - *a2) << 30 == 0xFFFFFFFE00000000)
  {
    BOOL v11 = 1;
    std::vector<int>::size_type v12 = v8 >> 32;
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 144), v8 >> 32);
    uint64_t v8 = *(void *)(a1 + 168);
    unint64_t v10 = (*(void *)(a1 + 176) - v8) >> 2;
    BOOL v11 = v9 >= v10;
    std::vector<int>::size_type v12 = v9 - v10;
    if (v9 > v10)
    {
LABEL_4:
      std::vector<int>::__append(v5, v12);
      goto LABEL_8;
    }
  }
  if (!v11) {
    *(void *)(a1 + 176) = v8 + 4 * v9;
  }
LABEL_8:
  uint64_t v13 = *(void *)(a1 + 192);
  unint64_t v14 = (*(void *)(a1 + 200) - v13) >> 2;
  if (v9 <= v14)
  {
    if (v9 < v14) {
      *(void *)(a1 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v13 + 4 * v9;
    }
  }
  else
  {
    std::vector<int>::__append(v4, v9 - v14, &operations_research::sat::kNoIntegerVariable);
  }
  uint64_t v15 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v16 = 0;
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v15 + 4 * v16);
        uint64_t v19 = *(_DWORD **)(a1 + 24);
        unint64_t v18 = *(void *)(a1 + 32);
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = (_DWORD *)*v48;
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v19 - *v48) >> 2);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)v21) >> 2);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          unint64_t v25 = v24 >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v23;
          if (v25)
          {
            if (v25 > 0xCCCCCCCCCCCCCCCLL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v26 = (char *)operator new(20 * v25);
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v27 = &v26[20 * v22];
          *(_DWORD *)unint64_t v27 = v17;
          *(void *)(v27 + 12) = 0;
          *(void *)(v27 + 4) = 0;
          uint64_t v28 = v27;
          if (v19 != v21)
          {
            do
            {
              long long v29 = *(_OWORD *)(v19 - 5);
              *((_DWORD *)v28 - 1) = *(v19 - 1);
              *(_OWORD *)(v28 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v29;
              v28 -= 20;
              v19 -= 5;
            }
            while (v19 != v21);
            uint64_t v19 = (_DWORD *)*v48;
          }
          unint64_t v30 = &v26[20 * v25];
          uint64_t v20 = v27 + 20;
          *(void *)(a1 + 16) = v28;
          *(void *)(a1 + 24) = v27 + 20;
          *(void *)(a1 + 32) = v30;
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *uint64_t v19 = v17;
          uint64_t v20 = v19 + 5;
          *(void *)(v19 + 3) = 0;
          *(void *)(v19 + 1) = 0;
        }
        *(void *)(a1 + 24) = v20;
        int v31 = *(_DWORD *)(*a2 + 4 * v16) ^ 1;
        uint64_t v33 = *(char **)(a1 + 48);
        unint64_t v32 = *(void *)(a1 + 56);
        if ((unint64_t)v33 >= v32) {
          break;
        }
        *(_DWORD *)uint64_t v33 = v31;
        *(void *)(v33 + 12) = 0;
        *(void *)(v33 + 4) = 0;
        *(void *)(a1 + 48) = v33 + 20;
        ++v16;
        uint64_t v15 = *a2;
        if (v16 >= (a2[1] - *a2) >> 2) {
          return a1;
        }
      }
      uint64_t v34 = (char *)*v47;
      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v33 - (unsigned char *)*v47) >> 2);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (void)v34) >> 2);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x666666666666666) {
        unint64_t v38 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v39 = (char *)operator new(20 * v38);
      }
      else
      {
        long long v39 = 0;
      }
      int v40 = &v39[20 * v35];
      *(_DWORD *)int v40 = v31;
      *(void *)(v40 + 12) = 0;
      *(void *)(v40 + 4) = 0;
      uint64_t v41 = v40;
      if (v33 != v34)
      {
        do
        {
          long long v42 = *(_OWORD *)(v33 - 20);
          *((_DWORD *)v41 - 1) = *((_DWORD *)v33 - 1);
          *(_OWORD *)(v41 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v42;
          v41 -= 20;
          v33 -= 20;
        }
        while (v33 != v34);
        uint64_t v33 = (char *)*v47;
      }
      int v43 = &v39[20 * v38];
      int v44 = v40 + 20;
      *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v41;
      *(void *)(a1 + 48) = v40 + 20;
      *(void *)(a1 + 56) = v43;
      if (v33) {
        operator delete(v33);
      }
      *(void *)(a1 + 48) = v44;
      ++v16;
      uint64_t v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 2);
  }
  return a1;
}

void sub_23CBA79D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, char a15)
{
  uint64_t v20 = (void *)v15[27];
  if (v20)
  {
    v15[28] = v20;
    operator delete(v20);
    uint64_t v21 = *v18;
    if (!*v18)
    {
LABEL_3:
      unint64_t v22 = *v17;
      if (!*v17) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v21 = *v18;
    if (!*v18) {
      goto LABEL_3;
    }
  }
  v15[25] = v21;
  operator delete(v21);
  unint64_t v22 = *v17;
  if (!*v17)
  {
LABEL_4:
    unint64_t v23 = *v16;
    if (!*v16) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  v15[22] = v22;
  operator delete(v22);
  unint64_t v23 = *v16;
  if (!*v16)
  {
LABEL_5:
    unint64_t v24 = (void *)v15[15];
    if (!v24) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  v15[19] = v23;
  operator delete(v23);
  unint64_t v24 = (void *)v15[15];
  if (!v24)
  {
LABEL_6:
    unint64_t v25 = (void *)v15[11];
    if (!v25) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  unsigned char v15[16] = v24;
  operator delete(v24);
  unint64_t v25 = (void *)v15[11];
  if (!v25)
  {
LABEL_7:
    uint64_t v26 = (void *)v15[8];
    if (!v26) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  v15[12] = v25;
  operator delete(v25);
  uint64_t v26 = (void *)v15[8];
  if (!v26)
  {
LABEL_8:
    unint64_t v27 = *a13;
    if (!*a13) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  v15[9] = v26;
  operator delete(v26);
  unint64_t v27 = *a13;
  if (!*a13)
  {
LABEL_9:
    uint64_t v28 = *a14;
    if (!*a14) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  v15[6] = v27;
  operator delete(v27);
  uint64_t v28 = *a14;
  if (!*a14) {
LABEL_10:
  }
    _Unwind_Resume(exception_object);
LABEL_19:
  v15[3] = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

__n128 operations_research::sat::AllDifferentBoundsPropagator::Propagate(operations_research::sat::AllDifferentBoundsPropagator *this, __n128 a2)
{
  if (operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(this, a2))
  {
    __n128 v4 = *((__n128 *)this + 1);
    *((_OWORD *)this + 1) = *(_OWORD *)((char *)this + 40);
    *(__n128 *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v4;
    uint64_t v5 = *((void *)this + 4);
    *((void *)this + 4) = *((void *)this + 7);
    *((void *)this + 7) = v5;
    operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(this, v4);
    __n128 result = *(__n128 *)((char *)this + 40);
    long long v6 = *((_OWORD *)this + 1);
    *((__n128 *)this + 1) = result;
    *(_OWORD *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v6;
    uint64_t v7 = *((void *)this + 4);
    *((void *)this + 4) = *((void *)this + 7);
    *((void *)this + 7) = v7;
  }
  return result;
}

uint64_t operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(operations_research::sat::AllDifferentBoundsPropagator *this, __n128 a2)
{
  __n128 v4 = (int *)*((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  unint64_t v5 = (unint64_t)v4;
  if (v4 != (int *)v3)
  {
    uint64_t v6 = *(void *)(*((void *)this + 1) + 40);
    uint64_t v7 = v4;
    do
    {
      int v8 = *v7;
      *(void *)(v7 + 1) = *(void *)(v6 + 12 * *v7);
      *(void *)(v7 + 3) = -*(void *)(v6 + 12 * (v8 ^ 1));
      v7 += 5;
    }
    while (v7 != (int *)v3);
  }
  uint64_t v9 = v3 - (void)v4;
  if ((int)(-858993459 * ((v3 - (unint64_t)v4) >> 2)) > 32)
  {
    if (v9 < 40) {
      goto LABEL_37;
    }
    unint64_t v18 = v3 - 20;
    if ((int *)(v3 - 20) != v4)
    {
      unint64_t v5 = v3 - 20;
      do
      {
        uint64_t v19 = (int *)(v18 - 20);
        if (*(void *)(v18 + 4) < *(void *)(v18 - 16))
        {
          int v20 = *(_DWORD *)(v18 + 16);
          a2 = *(__n128 *)v18;
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
          *(_DWORD *)(v18 + 16) = *(_DWORD *)(v18 - 4);
          *(__n128 *)uint64_t v19 = a2;
          *(_DWORD *)(v18 - 4) = v20;
          unint64_t v5 = v18;
        }
        v18 -= 20;
      }
      while (v19 != v4);
    }
    unint64_t v21 = v5 + 20;
    if (v5 + 20 == v3) {
      goto LABEL_37;
    }
    int v22 = 1717986920 * ((v3 - (unint64_t)v4) >> 2);
    unint64_t v23 = v5;
    while (1)
    {
      int v24 = *(_DWORD *)(v23 + 20);
      a2 = *(__n128 *)(v23 + 24);
      unint64_t v23 = v21;
      --v22;
      if (a2.n128_i64[0] >= *(void *)(v21 - 16))
      {
        *(_DWORD *)unint64_t v21 = v24;
        *(__n128 *)(v21 + 4) = a2;
        v21 += 20;
        if (v23 + 20 == v3) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v25 = v21;
        do
        {
          unint64_t v26 = v25 - 20;
          *(_OWORD *)unint64_t v25 = *(_OWORD *)(v25 - 20);
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v25 - 4);
          --v22;
          uint64_t v27 = *(void *)(v25 - 36);
          v25 -= 20;
        }
        while (a2.n128_i64[0] < v27);
        *(_DWORD *)unint64_t v26 = v24;
        *(__n128 *)(v26 + 4) = a2;
        v21 += 20;
        if (v23 + 20 == v3)
        {
LABEL_32:
          if (v21 != v3)
          {
            unint64_t v28 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - v5) >> 2));
            if (v5 == v3) {
              uint64_t v29 = 0;
            }
            else {
              uint64_t v29 = v28;
            }
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *,false>(v5, v3, v29, 1, a2);
          }
          goto LABEL_37;
        }
      }
      if (v22 <= 0) {
        goto LABEL_32;
      }
    }
  }
  if (v9 >= 40)
  {
    unint64_t v10 = v3 - 20;
    if ((int *)(v3 - 20) != v4)
    {
      unint64_t v5 = v3 - 20;
      do
      {
        BOOL v11 = (int *)(v10 - 20);
        if (*(void *)(v10 + 4) < *(void *)(v10 - 16))
        {
          int v12 = *(_DWORD *)(v10 + 16);
          a2 = *(__n128 *)v10;
          *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 - 4);
          *(__n128 *)BOOL v11 = a2;
          *(_DWORD *)(v10 - 4) = v12;
          unint64_t v5 = v10;
        }
        v10 -= 20;
      }
      while (v11 != v4);
    }
    while (1)
    {
      unint64_t v13 = v5 + 20;
      if (v5 + 20 == v3) {
        break;
      }
      int v14 = *(_DWORD *)(v5 + 20);
      a2 = *(__n128 *)(v5 + 24);
      v5 += 20;
      unint64_t v15 = v5;
      if (a2.n128_i64[0] < *(void *)(v13 - 16))
      {
        unint64_t v16 = v5;
        do
        {
          unint64_t v15 = v16 - 20;
          *(_OWORD *)unint64_t v16 = *(_OWORD *)(v16 - 20);
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v16 - 4);
          uint64_t v17 = *(void *)(v16 - 36);
          v16 -= 20;
        }
        while (a2.n128_i64[0] < v17);
      }
      *(_DWORD *)unint64_t v15 = v14;
      *(__n128 *)(v15 + 4) = a2;
    }
  }
LABEL_37:
  uint64_t v30 = *((void *)this + 2);
  if ((int)(-858993459 * ((*((void *)this + 3) - v30) >> 2)) < 2) {
    return 1;
  }
  int v31 = 0;
  uint64_t v32 = -858993459 * ((*((void *)this + 3) - v30) >> 2);
  uint64_t v33 = *(void *)(v30 + 4);
  uint64_t v34 = 1;
  uint64_t v35 = 24;
  int v36 = 1;
  do
  {
    while (1)
    {
      uint64_t v37 = *((void *)this + 2);
      uint64_t v38 = *(void *)(v37 + v35);
      if (v38 > v33 + v36 - 1) {
        break;
      }
      ++v36;
      ++v34;
      v35 += 20;
      if (v32 == v34) {
        goto LABEL_44;
      }
    }
    if (v36 > 1)
    {
      uint64_t result = operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal((uint64_t)this, v33, v37 + 20 * v31, v36, a2);
      if (!result) {
        return result;
      }
    }
    int v36 = 1;
    uint64_t v33 = v38;
    int v31 = v34++;
    v35 += 20;
  }
  while (v32 != v34);
LABEL_44:
  if (v36 < 2) {
    return 1;
  }
  unint64_t v40 = *((void *)this + 2) + 20 * v31;

  return operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal((uint64_t)this, v33, v40, v36, a2);
}

void operations_research::sat::AllDifferentBoundsPropagator::FillHallReason(void *a1, unint64_t a2, int64_t a3)
{
  unint64_t v3 = (_DWORD *)a1[27];
  a1[28] = v3;
  uint64_t v38 = a1 + 27;
  uint64_t v4 = a1[14];
  if ((int)a2 - (int)v4 <= (int)a3 - (int)v4)
  {
    unint64_t v5 = a2;
    unint64_t v37 = HIDWORD(a2);
    if (a3 >= (uint64_t)0x8000000000000002) {
      unint64_t v7 = -a3;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v8 = HIDWORD(v7);
    uint64_t v9 = (int)a2 - (int)v4;
    int v36 = a3 - v4 + 1;
    unint64_t v35 = HIDWORD(v7);
    do
    {
      while (1)
      {
        unsigned int v10 = *(_DWORD *)(a1[24] + 4 * v9);
        unint64_t v39 = __PAIR64__(v5, v10);
        unint64_t v11 = a1[29];
        if ((unint64_t)v3 >= v11)
        {
          unint64_t v13 = (_DWORD *)*v38;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *v38) >> 2);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x1555555555555555) {
            goto LABEL_44;
          }
          unint64_t v8 = v7;
          unint64_t v16 = v5;
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v13) >> 2);
          if (2 * v17 > v15) {
            unint64_t v15 = 2 * v17;
          }
          unint64_t v18 = v17 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v15;
          if (v18)
          {
            if (v18 > 0x1555555555555555) {
              goto LABEL_45;
            }
            uint64_t v19 = (char *)operator new(12 * v18);
          }
          else
          {
            uint64_t v19 = 0;
          }
          int v20 = &v19[12 * v14];
          *(void *)int v20 = v39;
          *((_DWORD *)v20 + 2) = v37;
          unint64_t v21 = v20;
          if (v3 != v13)
          {
            do
            {
              uint64_t v22 = *(void *)(v3 - 3);
              v3 -= 3;
              int v23 = v3[2];
              *(void *)(v21 - 12) = v22;
              v21 -= 12;
              *((_DWORD *)v21 + 2) = v23;
            }
            while (v3 != v13);
            unint64_t v3 = (_DWORD *)*v38;
          }
          int v12 = v20 + 12;
          a1[27] = v21;
          a1[28] = v20 + 12;
          a1[29] = &v19[12 * v18];
          if (v3) {
            operator delete(v3);
          }
          unint64_t v5 = v16;
          unint64_t v7 = v8;
          LODWORD(v8) = v35;
        }
        else
        {
          *(void *)unint64_t v3 = __PAIR64__(v5, v10);
          v3[2] = v37;
          int v12 = v3 + 3;
        }
        a1[28] = v12;
        LODWORD(v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v10 ^ 1;
        HIDWORD(v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v7;
        unint64_t v24 = a1[29];
        if ((unint64_t)v12 >= v24) {
          break;
        }
        *(void *)int v12 = v40;
        v12[2] = v8;
        unint64_t v3 = v12 + 3;
        a1[28] = v12 + 3;
        if (v36 == ++v9) {
          return;
        }
      }
      unint64_t v25 = (_DWORD *)*v38;
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v38) >> 2);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0x1555555555555555) {
LABEL_44:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)v25) >> 2);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v29 = 0x1555555555555555;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 > 0x1555555555555555) {
LABEL_45:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v30 = (char *)operator new(12 * v29);
      }
      else
      {
        uint64_t v30 = 0;
      }
      int v31 = &v30[12 * v26];
      uint64_t v32 = &v30[12 * v29];
      *(void *)int v31 = v40;
      *((_DWORD *)v31 + 2) = v8;
      unint64_t v3 = v31 + 12;
      if (v12 == v25)
      {
        a1[27] = v31;
        a1[28] = v3;
        a1[29] = v32;
      }
      else
      {
        do
        {
          uint64_t v33 = *(void *)(v12 - 3);
          v12 -= 3;
          int v34 = v12[2];
          *(void *)(v31 - 12) = v33;
          v31 -= 12;
          *((_DWORD *)v31 + 2) = v34;
        }
        while (v12 != v25);
        int v12 = (_DWORD *)a1[27];
        a1[27] = v31;
        a1[28] = v3;
        a1[29] = v32;
        if (!v12) {
          goto LABEL_42;
        }
      }
      operator delete(v12);
LABEL_42:
      a1[28] = v3;
      ++v9;
    }
    while (v36 != v9);
  }
}

uint64_t operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v6 = a3;
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  uint64_t v131 = (void **)(a1 + 88);
  *(void *)(a1 + 96) = *(void *)(a1 + 88);
  *(void *)(a1 + 112) = a2 - 1;
  unint64_t v8 = *(int **)(a1 + 120);
  unint64_t v133 = (void *)(a1 + 64);
  unint64_t v134 = (void **)(a1 + 120);
  uint64_t v9 = *(int **)(a1 + 128);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 192);
    unint64_t v11 = *(int **)(a1 + 120);
    do
    {
      uint64_t v12 = *v11++;
      *(_DWORD *)(v10 + 4 * v12) = -1;
    }
    while (v11 != v9);
  }
  *(void *)(a1 + 128) = v8;
  unint64_t v13 = a3 + 20 * a4;
  unint64_t v14 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((20 * a4) >> 2));
  if (a4) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = 1;
  unint64_t v135 = v6 + 20 * a4;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*,false>(v6, v13, v15, 1, a5);
  if (a4)
  {
    unint64_t v130 = (void *)(a1 + 216);
    while (1)
    {
      unsigned int v18 = *(_DWORD *)v6;
      int64_t v19 = *(void *)(v6 + 4);
      uint64_t v20 = *(void *)(v6 + 12);
      int64_t v21 = v19 - *(void *)(a1 + 112);
      uint64_t v22 = *(void *)(a1 + 192);
      unint64_t v138 = v6;
      if (*(_DWORD *)(v22 + 4 * (int)v21) == -1)
      {
        int v41 = v21 - 1;
        uint64_t v42 = *(void *)(a1 + 144);
        if (*(_DWORD *)(v22 + 4 * ((int)v21 - 1)) == -1)
        {
          int v44 = v21;
        }
        else
        {
          uint64_t v43 = v41;
          do
          {
            int v44 = v41;
            int v41 = *(_DWORD *)(v42 + 4 * v41);
          }
          while (v44 != v41);
          uint64_t v45 = (int *)(v42 + 4 * v43);
          for (int i = *v45; v44 != *v45; int i = *v45)
          {
            *uint64_t v45 = v44;
            uint64_t v45 = (int *)(v42 + 4 * i);
          }
        }
      }
      else
      {
        uint64_t v23 = *(void *)(a1 + 88);
        uint64_t v24 = *(void *)(a1 + 96);
        uint64_t v26 = v24 - v23;
        BOOL v25 = v24 == v23;
        unint64_t v27 = (v24 - v23) >> 3;
        if (!v25)
        {
          unint64_t v28 = *(void **)(a1 + 88);
          unint64_t v29 = v27;
          do
          {
            unint64_t v30 = v29 >> 1;
            int v31 = &v28[v29 >> 1];
            int64_t v33 = *v31;
            uint64_t v32 = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v33 < v19) {
              unint64_t v28 = v32;
            }
            else {
              unint64_t v29 = v30;
            }
          }
          while (v29);
          uint64_t v26 = (uint64_t)v28 - v23;
        }
        unint64_t v34 = (int)(v26 >> 3);
        if (v34 < v27)
        {
          unint64_t v35 = *(void *)(*v133 + 8 * v34);
          if ((uint64_t)v35 <= v19)
          {
            uint64_t v136 = *(void *)(v6 + 12);
            int64_t v36 = *(void *)(v23 + 8 * v34);
            operations_research::sat::AllDifferentBoundsPropagator::FillHallReason((void *)a1, v35, v36);
            unint64_t v139 = __PAIR64__(v35, v18);
            unint64_t v37 = HIDWORD(v35);
            unint64_t v39 = *(_DWORD **)(a1 + 224);
            unint64_t v38 = *(void *)(a1 + 232);
            if ((unint64_t)v39 >= v38)
            {
              uint64_t v47 = (_DWORD *)*v130;
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *v130) >> 2);
              unint64_t v49 = v48 + 1;
              if (v48 + 1 > 0x1555555555555555) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v47) >> 2);
              if (2 * v50 > v49) {
                unint64_t v49 = 2 * v50;
              }
              unint64_t v51 = v50 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v49;
              if (v51)
              {
                if (v51 > 0x1555555555555555) {
                  goto LABEL_129;
                }
                uint64_t v52 = (char *)operator new(12 * v51);
              }
              else
              {
                uint64_t v52 = 0;
              }
              unint64_t v53 = &v52[12 * v48];
              *(void *)unint64_t v53 = v139;
              *((_DWORD *)v53 + 2) = v37;
              uint64_t v54 = v53;
              if (v39 != v47)
              {
                do
                {
                  uint64_t v55 = *(void *)(v39 - 3);
                  v39 -= 3;
                  int v56 = v39[2];
                  *(void *)(v54 - 12) = v55;
                  v54 -= 12;
                  *((_DWORD *)v54 + 2) = v56;
                }
                while (v39 != v47);
                unint64_t v39 = (_DWORD *)*v130;
              }
              uint64_t v40 = v53 + 12;
              *(void *)(a1 + 216) = v54;
              *(void *)(a1 + 224) = v53 + 12;
              *(void *)(a1 + 232) = &v52[12 * v51];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(void *)unint64_t v39 = v139;
              void v39[2] = v37;
              uint64_t v40 = v39 + 3;
            }
            *(void *)(a1 + 224) = v40;
            LODWORD(v14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v18;
            HIDWORD(v14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v36 + 1;
            unint64_t v132 = v132 & 0xFFFFFFFF00000000 | ((unint64_t)(v36 + 1) >> 32);
            uint64_t v20 = v136;
            if (!operations_research::sat::IntegerTrail::Enqueue(*(void *)(a1 + 8), v140, v132, 0, 0, *(uint64_t **)(a1 + 216), 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)(a1 + 216)) >> 2)))return 0; {
          }
            }
        }
        uint64_t v57 = (int)v21;
        uint64_t v42 = *(void *)(a1 + 144);
        do
        {
          int v44 = v21;
          LODWORD(v21) = *(_DWORD *)(v42 + 4 * (int)v21);
        }
        while (v44 != v21);
        unint64_t v58 = (int *)(v42 + 4 * v57);
        for (int j = *v58; v44 != *v58; int j = *v58)
        {
          *unint64_t v58 = v44;
          unint64_t v58 = (int *)(v42 + 4 * j);
        }
        LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 168) + 4 * v44) + 1;
        uint64_t v22 = *(void *)(a1 + 192);
      }
      uint64_t v60 = (int)v21 + 1;
      uint64_t v61 = *(void *)(a1 + 168);
      int v62 = v21;
      if (*(_DWORD *)(v22 + 4 * v60) != -1)
      {
        uint64_t v63 = 4 * v60;
        int v62 = *(_DWORD *)(v61 + v63);
        *(_DWORD *)(v42 + v63) = v44;
      }
      *(_DWORD *)(v61 + 4 * v44) = v62;
      uint64_t v64 = 4 * (int)v21;
      *(_DWORD *)(v42 + v64) = v44;
      *(_DWORD *)(v22 + v64) = v18;
      uint64_t v66 = *(char **)(a1 + 128);
      unint64_t v65 = *(void *)(a1 + 136);
      if ((unint64_t)v66 >= v65) {
        break;
      }
      *(_DWORD *)uint64_t v66 = v21;
      *(void *)(a1 + 128) = v66 + 4;
      uint64_t v67 = *(void *)(a1 + 112);
      if (v67 + v62 != v20) {
        goto LABEL_11;
      }
LABEL_77:
      uint64_t v86 = v67 + v44;
      uint64_t v88 = *(char **)(a1 + 64);
      uint64_t v87 = *(char **)(a1 + 72);
      if (v88 == v87)
      {
LABEL_82:
        BOOL v90 = 1;
        uint64_t v91 = v88;
        unint64_t v92 = *(void *)(a1 + 80);
        if ((unint64_t)v88 < v92) {
          goto LABEL_83;
        }
      }
      else
      {
        long long v89 = v87 - 8;
        while (1)
        {
          BOOL v90 = v86 <= *(void *)v89;
          if (v86 > *(void *)v89) {
            break;
          }
          *(void *)(a1 + 72) = v89;
          *(void *)(a1 + 96) -= 8;
          BOOL v25 = v89 == v88;
          v89 -= 8;
          if (v25) {
            goto LABEL_82;
          }
        }
        uint64_t v91 = v89 + 8;
        unint64_t v92 = *(void *)(a1 + 80);
        if ((unint64_t)v91 < v92)
        {
LABEL_83:
          *(void *)uint64_t v91 = v86;
          uint64_t v93 = (uint64_t)(v91 + 8);
          goto LABEL_102;
        }
      }
      uint64_t v94 = v20;
      uint64_t v95 = (v91 - v88) >> 3;
      unint64_t v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v97 = v92 - (void)v88;
      if (v97 >> 2 > v96) {
        unint64_t v96 = v97 >> 2;
      }
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v98 = v96;
      }
      if (v98)
      {
        if (v98 >> 61) {
          goto LABEL_129;
        }
        long long v99 = operator new(8 * v98);
        unint64_t v100 = &v99[8 * v95];
        *unint64_t v100 = v86;
        uint64_t v93 = (uint64_t)(v100 + 1);
        if (v90)
        {
LABEL_94:
          uint64_t v20 = v94;
          goto LABEL_100;
        }
      }
      else
      {
        long long v99 = 0;
        unint64_t v100 = (void *)(8 * v95);
        *(void *)(8 * v95) = v86;
        uint64_t v93 = 8 * v95 + 8;
        if (v90) {
          goto LABEL_94;
        }
      }
      unint64_t v101 = v91 - 8 - v88;
      if (v101 < 0x58 || (unint64_t)(v88 - v99) < 0x20)
      {
        int v102 = v91;
        uint64_t v20 = v94;
        do
        {
LABEL_99:
          uint64_t v103 = *((void *)v102 - 1);
          v102 -= 8;
          *--unint64_t v100 = v103;
        }
        while (v102 != v88);
        goto LABEL_100;
      }
      uint64_t v123 = (v101 >> 3) + 1;
      uint64_t v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
      int v102 = &v91[-v124];
      unint64_t v100 = (void *)((char *)v100 - v124);
      unint64_t v125 = &v99[8 * v95 - 16];
      uint64_t v126 = v91 - 16;
      uint64_t v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v128 = *(_OWORD *)v126;
        *(v125 - 1) = *((_OWORD *)v126 - 1);
        *unint64_t v125 = v128;
        v125 -= 2;
        v126 -= 32;
        v127 -= 4;
      }
      while (v127);
      uint64_t v20 = v94;
      if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_99;
      }
LABEL_100:
      *(void *)(a1 + 64) = v100;
      *(void *)(a1 + 72) = v93;
      *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = &v99[8 * v98];
      if (v88) {
        operator delete(v88);
      }
LABEL_102:
      *(void *)(a1 + 72) = v93;
      unint64_t v105 = *(char **)(a1 + 96);
      unint64_t v104 = *(void *)(a1 + 104);
      if ((unint64_t)v105 >= v104)
      {
        uint64_t v106 = (char *)*v131;
        uint64_t v107 = v105 - (unsigned char *)*v131;
        uint64_t v108 = v107 >> 3;
        unint64_t v109 = (v107 >> 3) + 1;
        if (v109 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v110 = v104 - (void)v106;
        if (v110 >> 2 > v109) {
          unint64_t v109 = v110 >> 2;
        }
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v111 = v109;
        }
        if (v111)
        {
          if (v111 >> 61) {
LABEL_129:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v112 = operator new(8 * v111);
          uint64_t v113 = &v112[8 * v108];
          void *v113 = v20;
          uint64_t v17 = (uint64_t)(v113 + 1);
          if (v105 == v106) {
            goto LABEL_120;
          }
LABEL_114:
          unint64_t v114 = v105 - 8 - v106;
          if (v114 < 0x58) {
            goto LABEL_136;
          }
          if ((unint64_t)(v105 - &v112[v107]) < 0x20) {
            goto LABEL_136;
          }
          uint64_t v115 = (v114 >> 3) + 1;
          uint64_t v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
          int v117 = &v105[-v116];
          uint64_t v113 = (void *)((char *)v113 - v116);
          uint64_t v118 = &v112[8 * v108 - 16];
          uint64_t v119 = v105 - 16;
          uint64_t v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v121 = *(_OWORD *)v119;
            *(v118 - 1) = *((_OWORD *)v119 - 1);
            _OWORD *v118 = v121;
            v118 -= 2;
            v119 -= 32;
            v120 -= 4;
          }
          while (v120);
          unint64_t v105 = v117;
          if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_136:
            do
            {
              uint64_t v122 = *((void *)v105 - 1);
              v105 -= 8;
              *--uint64_t v113 = v122;
            }
            while (v105 != v106);
          }
        }
        else
        {
          unint64_t v112 = 0;
          uint64_t v113 = (void *)(8 * v108);
          *(void *)(8 * v108) = v20;
          uint64_t v17 = 8 * v108 + 8;
          if (v105 != v106) {
            goto LABEL_114;
          }
        }
LABEL_120:
        *(void *)(a1 + 88) = v113;
        *(void *)(a1 + 96) = v17;
        *(void *)(a1 + 104) = &v112[8 * v111];
        if (v106) {
          operator delete(v106);
        }
        goto LABEL_10;
      }
      *(void *)unint64_t v105 = v20;
      uint64_t v17 = (uint64_t)(v105 + 8);
LABEL_10:
      *(void *)(a1 + 96) = v17;
LABEL_11:
      unint64_t v6 = v138 + 20;
      if (v138 + 20 == v135) {
        return 1;
      }
    }
    uint64_t v137 = v20;
    uint64_t v68 = (char *)*v134;
    uint64_t v69 = v66 - (unsigned char *)*v134;
    uint64_t v70 = v69 >> 2;
    unint64_t v71 = (v69 >> 2) + 1;
    if (v71 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v72 = v65 - (void)v68;
    if (v72 >> 1 > v71) {
      unint64_t v71 = v72 >> 1;
    }
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v71;
    }
    if (v73)
    {
      if (v73 >> 62) {
        goto LABEL_129;
      }
      uint64_t v74 = operator new(4 * v73);
      uint64_t v75 = &v74[4 * v70];
      *uint64_t v75 = v21;
      uint64_t v76 = (uint64_t)(v75 + 1);
      if (v66 == v68)
      {
LABEL_74:
        *(void *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v75;
        *(void *)(a1 + 128) = v76;
        *(void *)(a1 + 136) = &v74[4 * v73];
        if (v68) {
          operator delete(v68);
        }
        uint64_t v20 = v137;
        *(void *)(a1 + 128) = v76;
        uint64_t v67 = *(void *)(a1 + 112);
        if (v67 + v62 != v137) {
          goto LABEL_11;
        }
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v74 = 0;
      uint64_t v75 = (_DWORD *)(4 * v70);
      *(_DWORD *)(4 * v7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v21;
      uint64_t v76 = 4 * v70 + 4;
      if (v66 == v68) {
        goto LABEL_74;
      }
    }
    unint64_t v77 = v66 - 4 - v68;
    if (v77 < 0x2C) {
      goto LABEL_137;
    }
    if ((unint64_t)(v66 - &v74[v69]) < 0x20) {
      goto LABEL_137;
    }
    uint64_t v78 = (v77 >> 2) + 1;
    uint64_t v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v80 = &v66[-v79];
    uint64_t v75 = (_DWORD *)((char *)v75 - v79);
    unint64_t v81 = &v74[4 * v70 - 16];
    uint64_t v82 = v66 - 16;
    uint64_t v83 = v78 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v84 = *(_OWORD *)v82;
      *(v81 - 1) = *((_OWORD *)v82 - 1);
      *unint64_t v81 = v84;
      v81 -= 2;
      v82 -= 32;
      v83 -= 8;
    }
    while (v83);
    uint64_t v66 = v80;
    if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_137:
      do
      {
        int v85 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--uint64_t v75 = v85;
      }
      while (v66 != v68);
    }
    goto LABEL_74;
  }
  return v16;
}

void operations_research::sat::AllDifferentConstraint::~AllDifferentConstraint(operations_research::sat::AllDifferentConstraint *this)
{
  operations_research::sat::AllDifferentConstraint::~AllDifferentConstraint(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  *(void *)this = &unk_26F0BD188;
  uint64_t v2 = (void *)*((void *)this + 43);
  if (v2)
  {
    *((void *)this + 44) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *((void *)this + 40);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 41);
    unint64_t v5 = (void *)*((void *)this + 40);
    if (v4 != v3)
    {
      unint64_t v6 = *((void *)this + 41);
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = (void *)*((void *)this + 40);
    }
    *((void *)this + 41) = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)*((void *)this + 37);
  if (v9)
  {
    *((void *)this + 38) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 34);
  if (v10)
  {
    *((void *)this + 35) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 31);
  if (v11)
  {
    *((void *)this + 32) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 28);
  if (v12)
  {
    *((void *)this + 29) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 25);
  if (v13)
  {
    *((void *)this + 26) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 22);
  if (v14) {
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 19);
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = *((void *)this + 16);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 17);
    unsigned int v18 = (void *)*((void *)this + 16);
    if (v17 != v16)
    {
      int64_t v19 = *((void *)this + 17);
      do
      {
        int64_t v21 = *(void **)(v19 - 24);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *(void *)(v17 - 16) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      unsigned int v18 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v16;
    operator delete(v18);
  }
  uint64_t v22 = *((void *)this + 13);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 14);
    uint64_t v24 = (void *)*((void *)this + 13);
    if (v23 != v22)
    {
      BOOL v25 = *((void *)this + 14);
      do
      {
        unint64_t v27 = *(void **)(v25 - 24);
        v25 -= 24;
        uint64_t v26 = v27;
        if (v27)
        {
          *(void *)(v23 - 16) = v26;
          operator delete(v26);
        }
        uint64_t v23 = v25;
      }
      while (v25 != v22);
      uint64_t v24 = (void *)*((void *)this + 13);
    }
    *((void *)this + 14) = v22;
    operator delete(v24);
  }
  unint64_t v28 = (void *)*((void *)this + 10);
  if (v28)
  {
    *((void *)this + 11) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)this + 7);
  if (v29)
  {
    *((void *)this + 8) = v29;
    operator delete(v29);
  }
  unint64_t v30 = (void *)*((void *)this + 2);
  if (v30)
  {
    *((void *)this + 3) = v30;
    operator delete(v30);
  }
}

void operations_research::sat::PropagatorInterface::IncrementalPropagate()
{
  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v1, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1032);
  uint64_t v0 = (void *)google::LogMessage::stream((google::LogMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v1);
}

void sub_23CBA8ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::AllDifferentBoundsPropagator::~AllDifferentBoundsPropagator(operations_research::sat::AllDifferentBoundsPropagator *this)
{
  operations_research::sat::AllDifferentBoundsPropagator::~AllDifferentBoundsPropagator(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_26F0BD1B8;
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 8);
  if (v8)
  {
    *((void *)this + 9) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 5);
  if (v9)
  {
    *((void *)this + 6) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 2);
  if (v10)
  {
    *((void *)this + 3) = v10;
    operator delete(v10);
  }
}

unint64_t operations_research::sat::Trail::GetEmptyVectorToStoreReason(operations_research::sat::Trail *this, int a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = *((void *)this + 27);
  if (v4 <= a2)
  {
    unint64_t v5 = (void *)((char *)this + 176);
    unint64_t v6 = a2 + 1;
    if (v6 > v4)
    {
      std::deque<std::vector<operations_research::sat::Literal>>::__append(v5, v6 - v4);
      goto LABEL_13;
    }
    if (v6 >= v4) {
      goto LABEL_13;
    }
    unint64_t v7 = *((void *)this + 26);
    uint64_t v8 = *((void *)this + 23);
    uint64_t v9 = (void *)(v8 + 8 * (v7 / 0xAA));
    if (*((void *)this + 24) == v8)
    {
      unint64_t v10 = 0;
      if (!v6)
      {
LABEL_12:
        std::deque<std::vector<operations_research::sat::Literal>>::__erase_to_end(v5, v9, v10);
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v10 = *v9 + 24 * (v7 % 0xAA);
      if (!v6) {
        goto LABEL_12;
      }
    }
    uint64_t v11 = v6 - 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
    if (v11 < 1)
    {
      unint64_t v12 = 169 - v11;
      v9 -= v12 / 0xAA;
      unint64_t v10 = *v9 + 24 * (170 * (v12 / 0xAA) - v12) + 4056;
    }
    else
    {
      v9 += v11 / 0xAAuLL;
      unint64_t v10 = *v9 + 24 * (v11 % 0xAAuLL);
    }
    goto LABEL_12;
  }
LABEL_13:
  unint64_t v13 = *((void *)this + 26) + v3;
  uint64_t v14 = *((void *)this + 23);
  unint64_t v15 = 8 * (v13 / 0xAA);
  unint64_t v16 = 24 * (v13 % 0xAA);
  *(void *)(*(void *)(v14 + v15) + v16 + 8) = *(void *)(*(void *)(v14 + v15) + v16);
  return *(void *)(v14 + v15) + v16;
}

void std::deque<std::vector<operations_research::sat::Literal>>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  unint64_t v9 = v6 - v8;
  BOOL v10 = a2 > v9;
  unint64_t v11 = a2 - v9;
  if (v10)
  {
    std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a1, v11);
    uint64_t v7 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v8 = a1[4] + v7;
  }
  unint64_t v12 = (void *)(v4 + 8 * (v8 / 0xAA));
  if (v5 == v4)
  {
    unint64_t v13 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    unint64_t v13 = (void *)(*v12 + 24 * (v8 % 0xAA));
    if (!a2) {
      return;
    }
  }
  uint64_t v14 = a2 - 0x5555555555555555 * (((uint64_t)v13 - *v12) >> 3);
  if (v14 < 1)
  {
    unint64_t v17 = 169 - v14;
    unint64_t v15 = &v12[-(v17 / 0xAA)];
    unint64_t v16 = *v15 + 24 * (170 * (v17 / 0xAA) - v17) + 4056;
    if (v13 != (void *)v16)
    {
      do
      {
LABEL_15:
        uint64_t v18 = v16;
        if (v12 != v15) {
          uint64_t v18 = *v12 + 4080;
        }
        if (v13 == (void *)v18)
        {
          a1[5] = v7;
          if (v12 == v15) {
            return;
          }
        }
        else
        {
          int64_t v19 = 24 * ((v18 - (uint64_t)v13 - 24) / 0x18uLL) + 24;
          bzero(v13, v19);
          uint64_t v7 = a1[5] - 0x5555555555555555 * (v19 >> 3);
          a1[5] = v7;
          if (v12 == v15) {
            return;
          }
        }
        uint64_t v20 = (void *)v12[1];
        ++v12;
        unint64_t v13 = v20;
      }
      while (v20 != (void *)v16);
    }
  }
  else
  {
    unint64_t v15 = &v12[v14 / 0xAAuLL];
    unint64_t v16 = *v15 + 24 * (v14 % 0xAAuLL);
    if (v13 != (void *)v16) {
      goto LABEL_15;
    }
  }
}

void std::deque<std::vector<operations_research::sat::Literal>>::__erase_to_end(void *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v9 = (void *)(v8 + 8 * ((v6 + v5) / 0xAA));
  if (v7 == v8)
  {
    unint64_t v10 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    unint64_t v10 = *v9 + 24 * ((v6 + v5) % 0xAA);
    if (v10 == a3) {
      return;
    }
  }
  uint64_t v11 = 170 * (v9 - a2) - 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
  uint64_t v12 = (uint64_t)(a3 - *a2) >> 3;
  uint64_t v13 = v11 + 0x5555555555555555 * v12;
  if (v13 < 1) {
    return;
  }
  uint64_t v14 = (void *)(v8 + 8 * (v6 / 0xAA));
  if (v7 == v8)
  {
    unint64_t v15 = 0;
    if (!a3) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v15 = *v14 + 24 * (v6 % 0xAA);
    if (a3 == v15)
    {
LABEL_15:
      if (v3 == v10) {
        goto LABEL_25;
      }
      do
      {
LABEL_20:
        int64_t v21 = *(void **)v3;
        if (*(void *)v3)
        {
          *(void *)(v3 + 8) = v21;
          operator delete(v21);
        }
        v3 += 24;
        if (v3 - *v14 == 4080)
        {
          unint64_t v22 = v14[1];
          ++v14;
          unint64_t v3 = v22;
        }
      }
      while (v3 != v10);
      uint64_t v8 = a1[1];
      uint64_t v7 = a1[2];
      unint64_t v6 = a1[4];
      uint64_t v5 = a1[5];
      goto LABEL_25;
    }
  }
  uint64_t v16 = 170 * (a2 - v14) - 0x5555555555555555 * v12;
  uint64_t v17 = (uint64_t)(v15 - *v14) >> 3;
  uint64_t v18 = v16 + 0x5555555555555555 * v17;
  if (!v18)
  {
    unint64_t v3 = v15;
    goto LABEL_15;
  }
  uint64_t v19 = v18 - 0x5555555555555555 * v17;
  if (v19 >= 1)
  {
    v14 += v19 / 0xAAuLL;
    unint64_t v3 = *v14 + 24 * (v19 % 0xAAuLL);
    if (v3 == v10) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  unint64_t v20 = 169 - v19;
  v14 -= v20 / 0xAA;
  unint64_t v3 = *v14 + 24 * (170 * (v20 / 0xAA) - v20) + 4056;
  if (v3 != v10) {
    goto LABEL_20;
  }
LABEL_25:
  if (v7 == v8) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = 170 * ((v7 - v8) >> 3) - 1;
  }
  uint64_t v24 = v5 - v13;
  a1[5] = v24;
  if (v23 - (v24 + v6) >= 0x154)
  {
    do
    {
      operator delete(*(void **)(v7 - 8));
      uint64_t v7 = a1[2] - 8;
      BOOL v25 = v7 == a1[1];
      uint64_t v26 = 170 * ((v7 - a1[1]) >> 3) - 1;
      a1[2] = v7;
      if (v25) {
        uint64_t v26 = 0;
      }
    }
    while ((unint64_t)(v26 - (a1[5] + a1[4])) > 0x153);
  }
}

void std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    *(void *)(a1 + 32) = v7 - 170 * v8;
    if (!v8) {
      return;
    }
    while (1)
    {
      unint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          unint64_t v27 = (char *)operator new(8 * v24);
          unint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          unint64_t v3 = v28;
          if (!v29)
          {
            unint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              uint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            uint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v28[v34];
            v16 += v34;
            unint64_t v35 = (long long *)(v15 + 3);
            int64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)int64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)uint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            unint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          unint64_t v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        unint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)unint64_t v3 = v17;
      unint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        uint64_t v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 169;
        }
        else {
          uint64_t v116 = 170;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - 170 * v6;
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= 170 * v8;
      if (!v8) {
        return;
      }
    }
    uint64_t v118 = *(char **)(a1 + 16);
    while (1)
    {
      uint64_t v120 = *(void **)(a1 + 8);
      long long v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        uint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          unint64_t v132 = (char *)operator new(8 * v129);
          unint64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          uint64_t v118 = v133;
          if (!v29)
          {
            uint64_t v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              uint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            uint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v136 = &v133[v138];
            v121 += v138;
            unint64_t v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)uint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            uint64_t v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        uint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          uint64_t v118 = *(char **)(a1 + 8);
        }
        uint64_t v119 = &v118[-8 * v126];
        uint64_t v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)uint64_t v118 = v122;
      uint64_t v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = -170 * v8;
  uint64_t v40 = &v13[8 * (v11 - v8)];
  int v41 = &v13[8 * v12];
  uint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    int v44 = operator new(0xFF0uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      unint64_t v49 = &v40[-8 * (v47 >> 1)];
      unint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        unint64_t v50 = v40;
      }
      uint64_t v42 = &v49[v41 - v40];
      uint64_t v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v52 = (char *)operator new(8 * v51);
    unint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    uint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      uint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        unint64_t v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)unint64_t v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)unint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    int v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    uint64_t v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)uint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v79 = (char *)operator new(8 * v78);
          unint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          uint64_t v69 = &v79[8 * (v78 >> 2)];
          uint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            uint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              int v85 = &v79[8 * (v78 >> 2)];
              uint64_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            int v85 = &v69[v89];
            uint64_t v86 = &v40[v89];
            BOOL v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)int v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          int v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        uint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        uint64_t v76 = &v40[-8 * (v74 >> 1)];
        unint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          unint64_t v77 = v40;
        }
        uint64_t v42 = &v76[v41 - v40];
        uint64_t v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        uint64_t v69 = v40;
      }
LABEL_81:
      *(void *)uint64_t v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      uint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  uint64_t v69 = v40;
LABEL_75:
  uint64_t v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v101 = (char *)operator new(8 * v100);
          uint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          uint64_t v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          uint64_t v42 = v69;
          if (!v29)
          {
            uint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            unint64_t v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            unint64_t v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v105 = &v69[v109];
            uint64_t v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            unint64_t v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)unint64_t v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)unint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          int v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          uint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          uint64_t v69 = &v97[8 * (v96 >> 1)];
          long long v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            long long v99 = v42;
          }
          uint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  unint64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) += v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_23CBA9A30(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CBA9A7C()
{
}

void std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back(char **a1, void *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      uint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    uint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  uint64_t v4 = v18;
  if (!v19)
  {
    uint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      unint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)unint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    int64_t v23 = &v17[8 * v15];
    unint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    unint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    uint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front(void **a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    unint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      unint64_t v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        unint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        int64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        unint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        unint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        unint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      unint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        uint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void operations_research::sat::GenericLiteralWatcher::WatchLowerBound(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a2 != -1)
  {
    int v7 = a2;
    uint64_t v9 = *(void *)(a1 + 88);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v10 = (void *)(a1 + 88);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    if (v11 <= (int)a2)
    {
      unint64_t v12 = ((a2 << 32) + 0x100000000) >> 32;
      if (v12 <= v11)
      {
        if (v12 < v11)
        {
          uint64_t v13 = v9 + 24 * (int)v12;
          if (v8 != v13)
          {
            uint64_t v14 = *(void *)(a1 + 96);
            do
            {
              uint64_t v16 = *(void **)(v14 - 24);
              v14 -= 24;
              unint64_t v15 = v16;
              if (v16)
              {
                *(void *)(v8 - 16) = v15;
                operator delete(v15);
              }
              uint64_t v8 = v14;
            }
            while (v14 != v13);
          }
          *(void *)(a1 + 96) = v13;
        }
      }
      else
      {
        std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 88, v12 - v11);
      }
    }
    uint64_t v17 = (void *)(*v10 + 24 * v7);
    uint64_t v19 = v17 + 1;
    uint64_t v18 = (char *)v17[1];
    unint64_t v20 = v17[2];
    if ((unint64_t)v18 >= v20)
    {
      unint64_t v22 = (char *)*v17;
      uint64_t v23 = (uint64_t)&v18[-*v17];
      uint64_t v24 = v23 >> 3;
      unint64_t v25 = (v23 >> 3) + 1;
      if (v25 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v20 - (void)v22;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v28 = operator new(8 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      long long v29 = (unint64_t *)&v28[8 * v24];
      *long long v29 = a3 | (unint64_t)(a4 << 32);
      unint64_t v21 = v29 + 1;
      if (v18 != v22)
      {
        unint64_t v30 = v18 - v22 - 8;
        if (v30 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v18 - v28 - v23) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v31 = (v30 >> 3) + 1;
        uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v33 = &v18[-v32];
        long long v29 = (unint64_t *)((char *)v29 - v32);
        uint64_t v34 = &v28[8 * v24 - 16];
        unint64_t v35 = v18 - 16;
        uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *(_OWORD *)v35;
          *(v34 - 1) = *((_OWORD *)v35 - 1);
          *uint64_t v34 = v37;
          v34 -= 2;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        uint64_t v18 = v33;
        if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            unint64_t v38 = *((void *)v18 - 1);
            v18 -= 8;
            *--long long v29 = v38;
          }
          while (v18 != v22);
        }
        uint64_t v18 = (char *)*v17;
      }
      *uint64_t v17 = v29;
      *uint64_t v19 = v21;
      v17[2] = &v28[8 * v27];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)uint64_t v18 = a3 | (unint64_t)(a4 << 32);
      unint64_t v21 = v18 + 8;
    }
    *uint64_t v19 = v21;
  }
}

void *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD238;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD238;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0BD238;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    int v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_23CBAA3FC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(void *result, void *a2)
{
  a2[1] = 0;
  *a2 = &unk_26F0BD238;
  a2[2] = 0;
  a2[3] = 0;
  unint64_t v3 = (unsigned char *)result[1];
  uint64_t v2 = (unsigned char *)result[2];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    int v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_23CBAA4B4(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = &v65;
  uint64_t v61 = v3;
  unint64_t v59 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v3);
  int64_t v4 = *(signed int **)(a1 + 8);
  uint64_t v57 = a1;
  uint64_t v58 = *(signed int **)(a1 + 16);
  if (v4 == v58) {
    goto LABEL_78;
  }
  while (2)
  {
    uint64_t v60 = v4;
    signed int v5 = *v4;
    uint64_t v73 = (void (**)(void **))&unk_26F0BD370;
    signed int v74 = v5;
    uint64_t v75 = (void **)&v73;
    unint64_t v6 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v61);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v6, v74)) {
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v6, v74);
    }
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v6, v74, (char **)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v75 == (void **)&v73)
    {
      v73[4]((void **)&v73);
    }
    else if (v75)
    {
      (*((void (**)(void **))*v75 + 5))(v75);
    }
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v59, v5, &v70);
    int v7 = v70;
    uint64_t v62 = v71;
    if (v70 == v71)
    {
      if (v70) {
        goto LABEL_77;
      }
      goto LABEL_3;
    }
    do
    {
      uint64_t v9 = v65;
      uint64_t v10 = *(void *)v7;
      unint64_t v11 = &v65;
      unint64_t v12 = &v65;
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v12 = (void **)v9;
            uint64_t v13 = v9[4];
            if (v10 >= v13) {
              break;
            }
            uint64_t v9 = *v12;
            unint64_t v11 = v12;
            if (!*v12) {
              goto LABEL_24;
            }
          }
          if (v13 >= v10) {
            break;
          }
          uint64_t v9 = v12[1];
          if (!v9)
          {
            unint64_t v11 = v12 + 1;
            goto LABEL_24;
          }
        }
        unint64_t v15 = v12;
        unint64_t v30 = (char *)v12[6];
        long long v29 = (char *)v12[7];
        if (v30 < v29)
        {
LABEL_15:
          *(_DWORD *)unint64_t v30 = *((_DWORD *)v7 + 2);
          uint64_t v8 = (uint64_t)(v30 + 4);
          goto LABEL_16;
        }
      }
      else
      {
LABEL_24:
        uint64_t v14 = operator new(0x40uLL);
        unint64_t v15 = v14;
        v14[4] = v10;
        v14[5] = 0;
        v14[6] = 0;
        v14[7] = 0;
        *uint64_t v14 = 0;
        v14[1] = 0;
        v14[2] = v12;
        *unint64_t v11 = v14;
        uint64_t v16 = v14;
        if (*v64)
        {
          uint64_t v64 = (void **)*v64;
          uint64_t v16 = (void *)*v11;
        }
        uint64_t v17 = v65;
        BOOL v18 = v16 == v65;
        *((unsigned char *)v16 + 24) = v16 == v65;
        if (!v18)
        {
          do
          {
            uint64_t v19 = v16[2];
            if (*(unsigned char *)(v19 + 24)) {
              break;
            }
            unint64_t v20 = *(void **)(v19 + 16);
            uint64_t v21 = *v20;
            if (*v20 == v19)
            {
              uint64_t v24 = v20[1];
              if (!v24 || (v25 = *(unsigned __int8 *)(v24 + 24), unint64_t v22 = (unsigned char *)(v24 + 24), v25))
              {
                if (*(void **)v19 == v16)
                {
                  *(unsigned char *)(v19 + 24) = 1;
                  *((unsigned char *)v20 + 24) = 0;
                  uint64_t v28 = *(void *)(v19 + 8);
                  *unint64_t v20 = v28;
                  if (v28) {
                    goto LABEL_41;
                  }
                }
                else
                {
                  uint64_t v26 = *(uint64_t **)(v19 + 8);
                  uint64_t v27 = *v26;
                  *(void *)(v19 + 8) = *v26;
                  if (v27)
                  {
                    *(void *)(v27 + 16) = v19;
                    unint64_t v20 = *(void **)(v19 + 16);
                  }
                  v26[2] = (uint64_t)v20;
                  *(void *)(*(void *)(v19 + 16) + 8 * (**(void **)(v19 + 16) != v19)) = v26;
                  *uint64_t v26 = v19;
                  *(void *)(v19 + 16) = v26;
                  unint64_t v20 = (void *)v26[2];
                  uint64_t v19 = *v20;
                  *((unsigned char *)v26 + 24) = 1;
                  *((unsigned char *)v20 + 24) = 0;
                  uint64_t v28 = *(void *)(v19 + 8);
                  *unint64_t v20 = v28;
                  if (v28) {
LABEL_41:
                  }
                    *(void *)(v28 + 16) = v20;
                }
                *(void *)(v19 + 16) = v20[2];
                *(void *)(v20[2] + 8 * (*(void *)v20[2] != (void)v20)) = v19;
                *(void *)(v19 + 8) = v20;
LABEL_49:
                v20[2] = v19;
                break;
              }
            }
            else if (!v21 || (v23 = *(unsigned __int8 *)(v21 + 24), unint64_t v22 = (unsigned char *)(v21 + 24), v23))
            {
              if (*(void **)v19 == v16)
              {
                uint64_t v48 = v16[1];
                *(void *)uint64_t v19 = v48;
                if (v48)
                {
                  *(void *)(v48 + 16) = v19;
                  unint64_t v20 = *(void **)(v19 + 16);
                }
                v16[2] = v20;
                *(void *)(*(void *)(v19 + 16) + 8 * (**(void **)(v19 + 16) != v19)) = v16;
                v16[1] = v19;
                *(void *)(v19 + 16) = v16;
                unint64_t v20 = (void *)v16[2];
                *((unsigned char *)v16 + 24) = 1;
                *((unsigned char *)v20 + 24) = 0;
                uint64_t v19 = v20[1];
                uint64_t v31 = *(void **)v19;
                v20[1] = *(void *)v19;
                if (v31) {
LABEL_47:
                }
                  void v31[2] = v20;
              }
              else
              {
                *(unsigned char *)(v19 + 24) = 1;
                *((unsigned char *)v20 + 24) = 0;
                uint64_t v19 = v20[1];
                uint64_t v31 = *(void **)v19;
                v20[1] = *(void *)v19;
                if (v31) {
                  goto LABEL_47;
                }
              }
              *(void *)(v19 + 16) = v20[2];
              *(void *)(v20[2] + 8 * (*(void *)v20[2] != (void)v20)) = v19;
              *(void *)uint64_t v19 = v20;
              goto LABEL_49;
            }
            *(unsigned char *)(v19 + 24) = 1;
            uint64_t v16 = v20;
            *((unsigned char *)v20 + 24) = v20 == v17;
            *unint64_t v22 = 1;
          }
          while (v20 != v17);
        }
        ++v66;
        unint64_t v30 = (char *)v14[6];
        long long v29 = (char *)v14[7];
        if (v30 < v29) {
          goto LABEL_15;
        }
      }
      uint64_t v32 = (char *)v15[5];
      uint64_t v33 = (v30 - v32) >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v29 - v32;
      if (v35 >> 1 > v34) {
        unint64_t v34 = v35 >> 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v37 = operator new(4 * v36);
        unint64_t v38 = &v37[4 * v33];
        _DWORD *v38 = *((_DWORD *)v7 + 2);
        uint64_t v8 = (uint64_t)(v38 + 1);
        if (v30 == v32) {
          goto LABEL_68;
        }
LABEL_62:
        unint64_t v39 = v30 - 4 - v32;
        if (v39 < 0x2C) {
          goto LABEL_114;
        }
        if ((unint64_t)(v32 - v37) < 0x20) {
          goto LABEL_114;
        }
        uint64_t v40 = (v39 >> 2) + 1;
        uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v42 = &v30[-v41];
        unint64_t v38 = (_DWORD *)((char *)v38 - v41);
        uint64_t v43 = &v37[4 * v33 - 16];
        int v44 = v30 - 16;
        uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          *uint64_t v43 = v46;
          v43 -= 2;
          v44 -= 32;
          v45 -= 8;
        }
        while (v45);
        unint64_t v30 = v42;
        if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_114:
          do
          {
            int v47 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *--unint64_t v38 = v47;
          }
          while (v30 != v32);
        }
        goto LABEL_68;
      }
      long long v37 = 0;
      unint64_t v38 = (_DWORD *)(4 * v33);
      *(_DWORD *)(4 * v33) = *((_DWORD *)v7 + 2);
      uint64_t v8 = 4 * v33 + 4;
      if (v30 != v32) {
        goto LABEL_62;
      }
LABEL_68:
      v15[5] = v38;
      v15[6] = v8;
      v15[7] = &v37[4 * v36];
      if (v32) {
        operator delete(v32);
      }
LABEL_16:
      v15[6] = v8;
      v7 += 12;
    }
    while (v7 != v62);
    int v7 = v70;
    if (v70)
    {
LABEL_77:
      unint64_t v71 = v7;
      operator delete(v7);
    }
LABEL_3:
    int64_t v4 = v60 + 1;
    if (v60 + 1 != v58) {
      continue;
    }
    break;
  }
LABEL_78:
  unint64_t v49 = v64;
  if (v64 != &v65)
  {
    while (2)
    {
      if (v49[6] - v49[5] < 5uLL) {
        goto LABEL_86;
      }
      operations_research::sat::AtMostOneConstraint((uint64_t)(v49 + 5), (uint64_t)&v70);
      long long v67 = (void (**)(void **))v61;
      if (!v72) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*((void (**)(char **, void (***)(void **)))*v72 + 6))(v72, &v67);
      if (v72 == &v70)
      {
        (*((void (**)(char **))v70 + 4))(&v70);
        unint64_t v50 = (void *)v49[1];
        if (v50) {
          goto LABEL_87;
        }
      }
      else
      {
        if (v72) {
          (*((void (**)(void))*v72 + 5))();
        }
LABEL_86:
        unint64_t v50 = (void *)v49[1];
        if (v50)
        {
          do
          {
LABEL_87:
            unint64_t v51 = (void **)v50;
            unint64_t v50 = (void *)*v50;
          }
          while (v50);
          goto LABEL_80;
        }
      }
      do
      {
        unint64_t v51 = (void **)v49[2];
        BOOL v18 = *v51 == v49;
        unint64_t v49 = v51;
      }
      while (!v18);
LABEL_80:
      unint64_t v49 = v51;
      if (v51 == &v65) {
        break;
      }
      continue;
    }
  }
  if (v66 == (uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 2)
  {
    uint64_t v52 = v64;
    if (v64 != &v65)
    {
      while (2)
      {
        unint64_t v53 = (int *)v52[5];
        uint64_t v54 = (uint64_t)(v52[6] - (void)v53) >> 2;
        long long v67 = (void (**)(void **))&unk_26F0BD480;
        v68[0] = v53;
        v68[1] = (int *)v54;
        uint64_t v69 = (void **)&v67;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v68, v61);
        if (v69 == (void **)&v67)
        {
          v67[4]((void **)&v67);
          uint64_t v55 = (void *)v52[1];
          if (!v55) {
            goto LABEL_105;
          }
        }
        else
        {
          if (v69) {
            (*((void (**)(void))*v69 + 5))();
          }
          uint64_t v55 = (void *)v52[1];
          if (!v55)
          {
            do
            {
LABEL_105:
              int64_t v56 = (void **)v52[2];
              BOOL v18 = *v56 == v52;
              uint64_t v52 = v56;
            }
            while (!v18);
            goto LABEL_96;
          }
        }
        do
        {
          int64_t v56 = (void **)v55;
          uint64_t v55 = (void *)*v55;
        }
        while (v55);
LABEL_96:
        uint64_t v52 = v56;
        if (v56 == &v65) {
          break;
        }
        continue;
      }
    }
  }
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v64, v65);
}

void sub_23CBAACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_23CBAAD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 == &a23)
  {
    (*(void (**)(uint64_t *))(a23 + 32))(&a23);
    std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a20, a21);
    _Unwind_Resume(a1);
  }
  if (a26)
  {
    (*(void (**)(void))(*a26 + 40))();
    std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a20, a21);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariabl"
                     "e_tag_EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20Int"
                                "egerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      signed int v5 = v1;
    }
    else {
      signed int v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CBAB158(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1032C409C3AF894);
  _Unwind_Resume(a1);
}

void operations_research::sat::AtMostOneConstraint(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    int v7 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - *(void *)a1);
    int v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26F0BD400;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  int64_t v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v9);
    v8[1] = v10;
    unint64_t v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(void *)(a2 + 24) = v8;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CBAB2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
      int64_t v5 = v1;
    }
    else {
      int64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CBAB498(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F2C403AE0FE62);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d) {
      int64_t v5 = v1;
    }
    else {
      int64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

char *std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(char **a1, void *a2)
{
  BOOL v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  uint64_t v6 = v5 >> 3;
  unint64_t v7 = (v5 >> 3) + 1;
  if (v7 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a1[2] - v4;
  if (v9 >> 2 > v7) {
    unint64_t v7 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v11 = (char *)operator new(8 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  unint64_t v12 = &v11[8 * v6];
  uint64_t v13 = &v11[8 * v10];
  *(void *)unint64_t v12 = *a2;
  uint64_t v14 = v12 + 8;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_26;
  }
  unint64_t v15 = v3 - v4 - 8;
  if (v15 < 0x78 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3) {
    goto LABEL_34;
  }
  uint64_t v16 = (v15 >> 3) + 1;
  uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v12 -= v17;
  BOOL v18 = &v3[-v17];
  uint64_t v19 = v3 - 16;
  unint64_t v20 = &v11[8 * v6 - 16];
  uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v23 = *((_OWORD *)v19 - 1);
    long long v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)uint64_t v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)unint64_t v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  unint64_t v3 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v24 = *((void *)v3 - 1);
      v3 -= 8;
      *(void *)unint64_t v3 = 0;
      *((void *)v12 - 1) = v24;
      v12 -= 8;
    }
    while (v3 != v4);
  }
  int v25 = *a1;
  unint64_t v3 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3 != v25)
  {
    do
    {
      uint64_t v27 = *((void *)v3 - 1);
      v3 -= 8;
      uint64_t v26 = v27;
      *(void *)unint64_t v3 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    while (v3 != v25);
    unint64_t v3 = v25;
  }
  if (v3) {
LABEL_26:
  }
    operator delete(v3);
  return v14;
}

void *operations_research::sat::Model::Delete<operations_research::sat::SatSolver>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SatSolver *)a1[1];
  *a1 = &unk_26F0BD2B8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatSolver::~SatSolver(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SatSolver>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SatSolver *)a1[1];
  *a1 = &unk_26F0BD2B8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatSolver::~SatSolver(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::IntegerDomains>::~Delete(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  *a1 = &unk_26F0BD300;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = (void **)*v2;
    if (*v2)
    {
      BOOL v4 = (void **)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        uint64_t v6 = (void **)v2[1];
        do
        {
          char v7 = *((unsigned char *)v6 - 24);
          v6 -= 3;
          if (v7) {
            operator delete(*(v4 - 2));
          }
          BOOL v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x23ECF2BC0](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerDomains>::~Delete(void *a1)
{
  uint64_t v1 = (void **)a1[1];
  *a1 = &unk_26F0BD300;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = (void **)*v1;
    if (*v1)
    {
      unint64_t v3 = (void **)v1[1];
      BOOL v4 = *v1;
      if (v3 != v2)
      {
        uint64_t v5 = (void **)v1[1];
        do
        {
          char v6 = *((unsigned char *)v5 - 24);
          v5 -= 3;
          if (v6) {
            operator delete(*(v3 - 2));
          }
          unint64_t v3 = v5;
        }
        while (v5 != v2);
        BOOL v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x23ECF2BC0](v1, 0x20C40960023A9);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::IntegerEncoder>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::IntegerEncoder *)a1[1];
  *a1 = &unk_26F0BD338;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerEncoder::~IntegerEncoder(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerEncoder>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::IntegerEncoder *)a1[1];
  *a1 = &unk_26F0BD338;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerEncoder::~IntegerEncoder(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::IntegerEncoder::~IntegerEncoder(operations_research::sat::IntegerEncoder *this)
{
  if (*operations_research::sat::IntegerEncoder::~IntegerEncoder()::vlocal__ >= 1
    && (operations_research::sat::IntegerEncoder::~IntegerEncoder()::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::IntegerEncoder::~IntegerEncoder()::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.h", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v28, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 286);
    uint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"#variables created = ", 21);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v28);
  }
  unint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 32);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 30);
    char v7 = (void *)*((void *)this + 29);
    if (v6 != v5)
    {
      uint64_t v8 = *((void *)this + 30);
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      char v7 = (void *)*((void *)this + 29);
    }
    *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v5;
    operator delete(v7);
  }
  if (*((void *)this + 26))
  {
    operator delete(*((void **)this + 23));
    *((void *)this + 28) = 0;
    *((void *)this + 23) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 24) = 0;
    *((void *)this + 25) = 0;
    *((void *)this + 26) = 0;
  }
  unint64_t v11 = (void *)*((void *)this + 27);
  if (v11) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 20);
  if (v12)
  {
    *((void *)this + 21) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 17);
  if (v13)
  {
    *((void *)this + 18) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *((void *)this + 14);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 15);
    uint64_t v16 = (void *)*((void *)this + 14);
    if (v15 != v14)
    {
      uint64_t v17 = *((void *)this + 15);
      do
      {
        char v18 = *(unsigned char *)(v17 - 32);
        v17 -= 32;
        if (v18) {
          operator delete(*(void **)(v15 - 24));
        }
        uint64_t v15 = v17;
      }
      while (v17 != v14);
      uint64_t v16 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v14;
    operator delete(v16);
  }
  uint64_t v19 = *((void *)this + 11);
  if (v19)
  {
    uint64_t v20 = *((void *)this + 12);
    uint64_t v21 = (void *)*((void *)this + 11);
    if (v20 != v19)
    {
      uint64_t v22 = *((void *)this + 12);
      do
      {
        char v23 = *(unsigned char *)(v22 - 32);
        v22 -= 32;
        if (v23) {
          operator delete(*(void **)(v20 - 24));
        }
        uint64_t v20 = v22;
      }
      while (v22 != v19);
      uint64_t v21 = (void *)*((void *)this + 11);
    }
    *((void *)this + 12) = v19;
    operator delete(v21);
  }
  if (*((unsigned char *)this + 56)) {
    operator delete(*((void **)this + 8));
  }
  uint64_t v24 = *((void *)this + 4);
  if (v24)
  {
    uint64_t v25 = *((void *)this + 5);
    uint64_t v26 = (void *)*((void *)this + 4);
    if (v25 != v24)
    {
      do
      {
        uint64_t v27 = v25 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v25 - 24, *(void **)(v25 - 16));
        uint64_t v25 = v27;
      }
      while (v27 != v24);
      uint64_t v26 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v24;
    operator delete(v26);
  }
}

void std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26F0BD370;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BD370;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void *std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(*a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v5, *(_DWORD *)(a1 + 8))) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v5, *(_DWORD *)(a1 + 8));
  }
  signed int v6 = *(_DWORD *)(a1 + 8);

  return operations_research::sat::IntegerEncoder::FullDomainEncoding(v5, v6, a3);
}

uint64_t std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag"
                                "_EiEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD400;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD400;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0BD400;
  v2[2] = 0;
  v2[3] = 0;
  BOOL v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    signed int v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    char v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_23CBAC0B4(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, void *a2)
{
  a2[1] = 0;
  *a2 = &unk_26F0BD400;
  a2[2] = 0;
  a2[3] = 0;
  unint64_t v3 = (unsigned char *)result[1];
  uint64_t v2 = (unsigned char *)result[2];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    signed int v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    char v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_23CBAC16C(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EE"
                     "EEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allo"
                                "catorIS3_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(int **a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  int64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = (char *)v3 - (char *)*a1;
  if (v3 == *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
LABEL_21:
    unint64_t v11 = v8;
    goto LABEL_22;
  }
  if ((unint64_t)v5 >= 0x5555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = v5 >> 2;
  char v7 = (char *)operator new(12 * (v5 >> 2));
  uint64_t v8 = v7;
  uint64_t v9 = &v7[12 * v6];
  uint64_t v22 = v7;
  if (v3 == v4) {
    goto LABEL_21;
  }
  unint64_t v10 = v22;
  unint64_t v11 = v7;
  do
  {
    while (1)
    {
      int v12 = *v4;
      if (v8 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 4) = 1;
      unint64_t v10 = v8 + 12;
      ++v4;
      v8 += 12;
      if (v4 == v3) {
        goto LABEL_19;
      }
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 2) + 1;
    if (v13 > 0x1555555555555555)
    {
      uint64_t v22 = v10;
      char v23 = v9;
      std::string __p = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((v9 - v11) >> 2) > v13) {
      unint64_t v13 = 0x5555555555555556 * ((v9 - v11) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x1555555555555555;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14 > 0x1555555555555555)
    {
      uint64_t v22 = v10;
      char v23 = v9;
      std::string __p = v11;
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(12 * v14);
    uint64_t v16 = &v15[4 * ((v8 - v11) >> 2)];
    *(_DWORD *)uint64_t v16 = v12;
    *(void *)(v16 + 4) = 1;
    for (uint64_t i = v16; v8 != v11; *((_DWORD *)i + 2) = v19)
    {
      uint64_t v18 = *(void *)(v8 - 12);
      v8 -= 12;
      int v19 = *((_DWORD *)v8 + 2);
      *(void *)(i - 12) = v18;
      i -= 12;
    }
    uint64_t v9 = &v15[12 * v14];
    unint64_t v10 = v16 + 12;
    if (v11) {
      operator delete(v11);
    }
    unint64_t v11 = i;
    ++v4;
    uint64_t v8 = (char *)v10;
  }
  while (v4 != v3);
LABEL_19:
  uint64_t v22 = v10;
LABEL_22:
  char v23 = v9;
  std::string __p = v11;
  uint64_t v20 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddLinearConstraint(v20, 0, 0, 1, 1, &__p);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_23CBAC490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0BD480;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BD480;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEEEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralE"
                                "EEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(int **a1, uint64_t a2)
{
  std::string __p = 0;
  int v19 = 0;
  unint64_t v20 = 0;
  unint64_t v2 = (unint64_t)a1[1];
  if (v2)
  {
    if (v2 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = a2;
    int64_t v4 = (char *)operator new(12 * v2);
    uint64_t v5 = *a1;
    uint64_t v6 = (uint64_t)&(*a1)[v2];
    unint64_t v2 = (unint64_t)&v4[12 * v2];
    int v19 = v4;
    char v7 = v4;
    do
    {
      while (1)
      {
        int v8 = *v5;
        if ((unint64_t)v4 >= v2) {
          break;
        }
        *(_DWORD *)int64_t v4 = v8;
        *(void *)(v4 + 4) = 1;
        v4 += 12;
        if (++v5 == (int *)v6) {
          goto LABEL_18;
        }
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2) + 1;
      if (v9 > 0x1555555555555555)
      {
        int v19 = v4;
        unint64_t v20 = v2;
        std::string __p = v7;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v2 - (void)v7) >> 2) > v9) {
        unint64_t v9 = 0x5555555555555556 * ((uint64_t)(v2 - (void)v7) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v7) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v10 = 0x1555555555555555;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 > 0x1555555555555555)
      {
        int v19 = v4;
        unint64_t v20 = v2;
        std::string __p = v7;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(12 * v10);
      int v12 = &v11[4 * ((v4 - v7) >> 2)];
      *(_DWORD *)int v12 = v8;
      *(void *)(v12 + 4) = 1;
      for (uint64_t i = v12; v4 != v7; *((_DWORD *)i + 2) = v15)
      {
        uint64_t v14 = *(void *)(v4 - 12);
        v4 -= 12;
        int v15 = *((_DWORD *)v4 + 2);
        *(void *)(i - 12) = v14;
        i -= 12;
      }
      unint64_t v2 = (unint64_t)&v11[12 * v10];
      int64_t v4 = v12 + 12;
      if (v7) {
        operator delete(v7);
      }
      char v7 = i;
      ++v5;
    }
    while (v5 != (int *)v6);
LABEL_18:
    int v19 = v4;
    a2 = v17;
  }
  else
  {
    char v7 = 0;
  }
  unint64_t v20 = v2;
  std::string __p = v7;
  uint64_t v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddLinearConstraint(v16, 1, 1, 0, 1, &__p);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
}

void sub_23CBAC7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy(a1, a2[1]);
    int64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD510;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD510;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  *unint64_t v2 = &unk_26F0BD510;
  v2[2] = 0;
  v2[3] = 0;
  int64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    char v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_23CBAC9D0(_Unwind_Exception *a1)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(void *result, void *a2)
{
  a2[1] = 0;
  *a2 = &unk_26F0BD510;
  a2[2] = 0;
  a2[3] = 0;
  unint64_t v3 = (unsigned char *)result[1];
  unint64_t v2 = (unsigned char *)result[2];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    char v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    __n128 result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_23CBACA88(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t result)
{
  if (*(void *)(result + 8) != *(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_23CBACC54(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C401C52D3F6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVaria"
                     "ble_tag_EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20I"
                                "ntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  unint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      int64_t v5 = v1;
    }
    else {
      int64_t v5 = v1 + 1;
    }
    if (v4) {
      unint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CBACE90(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F3C403A7A5EF4);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  unint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d) {
      int64_t v5 = v1;
    }
    else {
      int64_t v5 = v1 + 1;
    }
    if (v4) {
      unint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CBAD050(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F3C40AE219659);
  _Unwind_Resume(a1);
}

operations_research::sat::IntegerTrail *operations_research::sat::IntegerTrail::IntegerTrail(operations_research::sat::IntegerTrail *this, operations_research::sat::Model *a2)
{
  strcpy((char *)this + 8, "IntegerTrail");
  *((unsigned char *)this + 21) = 0;
  *((_WORD *)this + 11) = 0;
  *((unsigned char *)this + 31) = 12;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *(void *)this = &unk_26F0C2F28;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = &unk_26F0BD5C8;
  *((void *)this + 55) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((void *)this + 78) = 0;
  *((void *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  *((void *)this + 79) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 521) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *((void *)this + 81) = (char *)this + 616;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  *((_DWORD *)this + 164) = -1;
  *((void *)this + 96) = 0;
  *((void *)this + 94) = 0;
  *((void *)this + 95) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 732) = 0u;
  *((void *)this + 97) = (char *)this + 744;
  *((void *)this + 98) = 0;
  *((void *)this + 99) = 0;
  *((_DWORD *)this + 196) = -1;
  *((_OWORD *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((void *)this + 114) = 0;
  *((void *)this + 115) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>((uint64_t)a2);
  *((void *)this + 116) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  *((void *)this + 117) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  BOOL v4 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  operations_research::sat::SatSolver::AddPropagator(v4, this);
  return this;
}

void sub_23CBAD284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v20 = *(void **)(v10 + 896);
  if (v20)
  {
    *(void *)(v10 + 904) = v20;
    operator delete(v20);
    uint64_t v21 = *(void **)(v10 + 872);
    if (!v21)
    {
LABEL_3:
      uint64_t v22 = *(void **)(v10 + 824);
      if (!v22) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v10 + 872);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v10 + 88google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v21;
  operator delete(v21);
  uint64_t v22 = *(void **)(v10 + 824);
  if (!v22)
  {
LABEL_4:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v16);
    char v23 = *(void **)(v10 + 720);
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(void *)(v10 + 832) = v22;
  operator delete(v22);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v16);
  char v23 = *(void **)(v10 + 720);
  if (!v23)
  {
LABEL_5:
    uint64_t v24 = *(void **)(v10 + 696);
    if (!v24) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  *(void *)(v10 + 728) = v23;
  operator delete(v23);
  uint64_t v24 = *(void **)(v10 + 696);
  if (!v24)
  {
LABEL_6:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v15);
    uint64_t v25 = *(void **)(v10 + 592);
    if (!v25) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(void *)(v10 + 704) = v24;
  operator delete(v24);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v15);
  uint64_t v25 = *(void **)(v10 + 592);
  if (!v25)
  {
LABEL_7:
    uint64_t v26 = *(void **)(v10 + 568);
    if (!v26) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  *(void *)(v10 + 60google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v25;
  operator delete(v25);
  uint64_t v26 = *(void **)(v10 + 568);
  if (!v26)
  {
LABEL_8:
    uint64_t v27 = *v11;
    if (!*v11) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  *(void *)(v10 + 576) = v26;
  operator delete(v26);
  uint64_t v27 = *v11;
  if (!*v11)
  {
LABEL_9:
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(v14);
    uint64_t v28 = *(void **)(v10 + 408);
    if (!v28) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  *(void *)(v10 + 552) = v27;
  operator delete(v27);
  operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(v14);
  uint64_t v28 = *(void **)(v10 + 408);
  if (!v28)
  {
LABEL_10:
    long long v29 = *(void **)(v10 + 384);
    if (!v29) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  *(void *)(v10 + 416) = v28;
  operator delete(v28);
  long long v29 = *(void **)(v10 + 384);
  if (!v29)
  {
LABEL_11:
    unint64_t v30 = *(void **)(v10 + 360);
    if (!v30) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  *(void *)(v10 + 392) = v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v10 + 360);
  if (!v30)
  {
LABEL_12:
    uint64_t v31 = *(void **)(v10 + 336);
    if (!v31) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  *(void *)(v10 + 368) = v30;
  operator delete(v30);
  uint64_t v31 = *(void **)(v10 + 336);
  if (!v31)
  {
LABEL_13:
    uint64_t v32 = *(void **)(v10 + 312);
    if (!v32) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  *(void *)(v10 + 344) = v31;
  operator delete(v31);
  uint64_t v32 = *(void **)(v10 + 312);
  if (!v32)
  {
LABEL_14:
    uint64_t v33 = *(void **)(v10 + 288);
    if (!v33) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  *(void *)(v10 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v32;
  operator delete(v32);
  uint64_t v33 = *(void **)(v10 + 288);
  if (!v33)
  {
LABEL_15:
    unint64_t v34 = *(void **)(v10 + 264);
    if (!v34) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  *(void *)(v10 + 296) = v33;
  operator delete(v33);
  unint64_t v34 = *(void **)(v10 + 264);
  if (!v34)
  {
LABEL_16:
    uint64_t v35 = *(void **)(v10 + 240);
    if (!v35) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  *(void *)(v10 + 272) = v34;
  operator delete(v34);
  uint64_t v35 = *(void **)(v10 + 240);
  if (!v35)
  {
LABEL_17:
    unint64_t v36 = *(void **)(v10 + 216);
    if (!v36) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  *(void *)(v10 + 248) = v35;
  operator delete(v35);
  unint64_t v36 = *(void **)(v10 + 216);
  if (!v36)
  {
LABEL_18:
    long long v37 = *(void **)(v10 + 192);
    if (!v37) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  *(void *)(v10 + 224) = v36;
  operator delete(v36);
  long long v37 = *(void **)(v10 + 192);
  if (!v37)
  {
LABEL_19:
    std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](v13);
    unint64_t v38 = *(void **)(v10 + 144);
    if (!v38) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  *(void *)(v10 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v37;
  operator delete(v37);
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](v13);
  unint64_t v38 = *(void **)(v10 + 144);
  if (!v38)
  {
LABEL_20:
    absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::~flat_hash_map(v12);
    unint64_t v39 = *v18;
    if (!*v18) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  *(void *)(v10 + 152) = v38;
  operator delete(v38);
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::~flat_hash_map(v12);
  unint64_t v39 = *v18;
  if (!*v18)
  {
LABEL_21:
    uint64_t v40 = *v17;
    if (!*v17) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  *(void *)(v10 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v39;
  operator delete(v39);
  uint64_t v40 = *v17;
  if (!*v17)
  {
LABEL_22:
    *(void *)uint64_t v10 = a10;
    if ((*(char *)(v10 + 31) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  *(void *)(v10 + 48) = v40;
  operator delete(v40);
  *(void *)uint64_t v10 = a10;
  if ((*(char *)(v10 + 31) & 0x80000000) == 0) {
LABEL_23:
  }
    _Unwind_Resume(a1);
LABEL_45:
  operator delete(*(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  unint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
      int64_t v5 = v1;
    }
    else {
      int64_t v5 = v1 + 1;
    }
    if (v4) {
      unint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32) || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
LABEL_12:
  }
    operator new();
  return v2[5];
}

void *operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(uint64_t a1)
{
  *(void *)a1 = &unk_26F0BD5C8;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(void *)(a1 + 32))
  {
    operator delete(*(void **)(a1 + 8));
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  BOOL v4 = *(void **)(a1 + 40);
  if (v4) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  }
  return a1;
}

void *std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      int64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        int v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t operations_research::sat::SatPropagator::Untrail(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 36);
  if (v3 >= a3) {
    int v3 = a3;
  }
  *(_DWORD *)(result + 36) = v3;
  return result;
}

void operations_research::sat::SatPropagator::Reason(operations_research::sat::SatPropagator *this, const operations_research::sat::Trail *a2)
{
  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v3, (google::glog_internal_namespace_ *)"./ortools/sat/sat_base.h", 506);
  unint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v3);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v3);
}

void sub_23CBAD958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(uint64_t a1)
{
  *(void *)a1 = &unk_26F0BD5C8;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(void *)(a1 + 32))
  {
    operator delete(*(void **)(a1 + 8));
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  BOOL v4 = *(void **)(a1 + 40);
  if (v4) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::SetLevel(uint64_t *a1, int a2)
{
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[11];
  int v3 = (std::vector<int> *)(a1 + 10);
  uint64_t v6 = v5 - v4;
  unint64_t v7 = (unint64_t)(v5 - v4) >> 2;
  unint64_t v8 = a2;
  if ((int)v7 <= a2)
  {
    std::vector<int>::value_type __x = -1431655765 * ((unint64_t)(a1[8] - a1[7]) >> 2);
    unint64_t v13 = v6 >> 2;
    std::vector<int>::size_type v14 = a2 - v13;
    if (v8 <= v13)
    {
      if (v8 < v13) {
        a1[11] = v4 + 4 * v8;
      }
    }
    else
    {
      std::vector<int>::__append(v3, v14, &__x);
    }
  }
  else
  {
    unint64_t v9 = (int *)(v4 + 4 * a2);
    unint64_t v10 = *v9;
    unint64_t v11 = v6 >> 2;
    std::vector<int>::size_type v12 = a2 - v11;
    if (v8 <= v11)
    {
      if (v8 < v11) {
        a1[11] = (uint64_t)v9;
      }
    }
    else
    {
      std::vector<int>::__append(v3, v12);
    }
    uint64_t v15 = a1[8];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - a1[7]) >> 2) > v10)
    {
      do
      {
        if (*(unsigned char *)(v15 - 12))
        {
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::erase<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(a1 + 1, (int *)(v15 - 11));
        }
        else
        {
          uint64_t v17 = 0;
          int v18 = *(_DWORD *)(v15 - 4);
          uint64_t v19 = *(int *)(v15 - 11);
          unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v19)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v19));
          unint64_t v21 = a1[1];
          unint64_t v22 = (v20 >> 7) ^ (v21 >> 12);
          uint64_t v23 = a1[4];
          while (1)
          {
            unint64_t v24 = v22 & v23;
            uint64_t v25 = *(void *)(v21 + v24);
            unint64_t v26 = ((v25 ^ (0x101010101010101 * (v20 & 0x7F))) - 0x101010101010101) & ~(v25 ^ (0x101010101010101
                                                                                                * (v20 & 0x7F))) & 0x8080808080808080;
            if (v26) {
              break;
            }
LABEL_18:
            if ((v25 & (~v25 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v28 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::prepare_insert(a1 + 1, v20);
              uint64_t v27 = a1[2];
              long long v29 = (_DWORD *)(v27 + 8 * v28);
              *long long v29 = v19;
              v29[1] = v18;
              goto LABEL_21;
            }
            v17 += 8;
            unint64_t v22 = v17 + v24;
          }
          uint64_t v27 = a1[2];
          while (1)
          {
            unint64_t v28 = (v24 + (__clz(__rbit64(v26)) >> 3)) & v23;
            if (*(_DWORD *)(v27 + 8 * v28) == v19) {
              break;
            }
            v26 &= v26 - 1;
            if (!v26) {
              goto LABEL_18;
            }
          }
LABEL_21:
          *(_DWORD *)(v27 + 8 * v28 + 4) = v18;
        }
        uint64_t v16 = a1[7];
        uint64_t v15 = a1[8] - 12;
        a1[8] = v15;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 2) > v10);
    }
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::erase<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  unint64_t v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v5 + (v6 & v7));
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v6 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(a1[1] + 8 * v12) == v3) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  if (v12 == v7) {
    return 0;
  }
  --a1[2];
  uint64_t v14 = *(void *)(v5 + ((v12 - 8) & v7));
  unint64_t v15 = *(void *)(v5 + v12) & (~*(void *)(v5 + v12) << 6) & 0x8080808080808080;
  unint64_t v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v21 = 0;
    char v18 = -2;
  }
  else
  {
    unsigned int v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    BOOL v20 = v19 >= 8;
    uint64_t v21 = v19 < 8;
    if (v20) {
      char v18 = -2;
    }
    else {
      char v18 = 0x80;
    }
  }
  *(unsigned char *)(v5 + v12) = v18;
  *(unsigned char *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  uint64_t v22 = a1[4];
  a1[5] += v21;
  if (!v22) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = ((*a1 >> 12) ^ (a2 >> 7)) & v2;
  uint64_t v4 = 0;
  for (unint64_t i = *(void *)(*a1 + v3) & (~*(void *)(*a1 + v3) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(*a1 + v3) & (~*(void *)(*a1 + v3) << 7) & 0x8080808080808080)
  {
    v4 += 8;
    unint64_t v3 = (v4 + v3) & v2;
  }
  return (v3 + (__clz(__rbit64(i)) >> 3)) & v2;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  uint64_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    unint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      char v18 = &v5[8 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      BOOL v20 = *a1;
      uint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  unint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 8 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(void *)(v25 + 8 * v18) = *(void *)(v25 + 8 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v26 = *(void *)(v25 + 8 * v14);
          *(void *)(v25 + 8 * v14) = *(void *)(v25 + 8 * v18);
          *(void *)(*(void *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

uint64_t std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0xAA];
    unint64_t v6 = (unint64_t)*v5;
    unint64_t v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v4) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        int8x16_t v9 = *(void **)v7;
        if (*(void *)v7)
        {
          *(void *)(v7 + 8) = v9;
          operator delete(v9);
          unint64_t v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          unint64_t v10 = (unint64_t)v5[1];
          ++v5;
          unint64_t v6 = v10;
          unint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 170;
LABEL_17:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::Trail>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::Trail *)a1[1];
  *a1 = &unk_26F0BD628;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::Trail::~Trail(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::Trail>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::Trail *)a1[1];
  *a1 = &unk_26F0BD628;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::Trail::~Trail(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::Trail::~Trail(operations_research::sat::Trail *this)
{
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }
  std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100]((uint64_t)this + 176);
  uint64_t v5 = (void *)*((void *)this + 19);
  if (v5)
  {
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v8;
    operator delete(v8);
  }
  int8x16_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::IntegerTrail>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::IntegerTrail *)a1[1];
  *a1 = &unk_26F0BD660;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerTrail::~IntegerTrail(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerTrail>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::IntegerTrail *)a1[1];
  *a1 = &unk_26F0BD660;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerTrail::~IntegerTrail(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::IntegerTrail::~IntegerTrail(operations_research::sat::IntegerTrail *this)
{
  uint64_t v2 = (void *)*((void *)this + 112);
  if (v2)
  {
    *((void *)this + 113) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 109);
  if (v3)
  {
    *((void *)this + 11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 103);
  if (v4)
  {
    *((void *)this + 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 100);
  if (v5)
  {
    *((void *)this + 101) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 94);
  if (v6)
  {
    *((void *)this + 95) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 90);
  if (v7)
  {
    *((void *)this + 91) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 87);
  if (v8)
  {
    *((void *)this + 88) = v8;
    operator delete(v8);
  }
  int8x16_t v9 = (void *)*((void *)this + 84);
  if (v9)
  {
    *((void *)this + 85) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 78);
  if (v10)
  {
    *((void *)this + 79) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 74);
  if (v11)
  {
    *((void *)this + 75) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 71);
  if (v12)
  {
    *((void *)this + 72) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 68);
  if (v13)
  {
    *((void *)this + 69) = v13;
    operator delete(v13);
  }
  *((void *)this + 54) = &unk_26F0BD5C8;
  unint64_t v14 = (void *)*((void *)this + 64);
  if (v14)
  {
    *((void *)this + 65) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 61);
  if (v15)
  {
    *((void *)this + 62) = v15;
    operator delete(v15);
  }
  if (*((void *)this + 58))
  {
    operator delete(*((void **)this + 55));
    *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
    *((void *)this + 55) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 56) = 0;
    *((void *)this + 57) = 0;
    *((void *)this + 58) = 0;
  }
  uint64_t v16 = (void *)*((void *)this + 59);
  if (v16) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v16);
  }
  unint64_t v17 = (void *)*((void *)this + 51);
  if (v17)
  {
    *((void *)this + 52) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 48);
  if (v18)
  {
    *((void *)this + 49) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 45);
  if (v19)
  {
    *((void *)this + 46) = v19;
    operator delete(v19);
  }
  unint64_t v20 = (void *)*((void *)this + 42);
  if (v20)
  {
    *((void *)this + 43) = v20;
    operator delete(v20);
  }
  unint64_t v21 = (void *)*((void *)this + 39);
  if (v21)
  {
    *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)*((void *)this + 36);
  if (v22)
  {
    *((void *)this + 37) = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)*((void *)this + 33);
  if (v23)
  {
    *((void *)this + 34) = v23;
    operator delete(v23);
  }
  int v24 = (void *)*((void *)this + 30);
  if (v24)
  {
    *((void *)this + 31) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 27);
  if (v25)
  {
    *((void *)this + 28) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 24);
  if (v26)
  {
    *((void *)this + 25) = v26;
    operator delete(v26);
  }
  uint64_t v27 = (void *)*((void *)this + 21);
  if (v27)
  {
    BOOL v28 = (void *)*((void *)this + 22);
    uint64_t v29 = (void *)*((void *)this + 21);
    if (v28 != v27)
    {
      uint64_t v30 = v28 - 4;
      uint64_t v31 = v28 - 4;
      do
      {
        uint64_t v33 = (void *)v31[3];
        if (v31 == v33)
        {
          (*(void (**)(void *))(*v31 + 32))(v31);
        }
        else if (v33)
        {
          (*(void (**)(void *))(*v33 + 40))(v33);
        }
        v30 -= 4;
        BOOL v32 = v31 == v27;
        v31 -= 4;
      }
      while (!v32);
      uint64_t v29 = (void *)*((void *)this + 21);
    }
    *((void *)this + 22) = v27;
    operator delete(v29);
  }
  unint64_t v34 = (void *)*((void *)this + 18);
  if (v34)
  {
    *((void *)this + 19) = v34;
    operator delete(v34);
  }
  if (*((void *)this + 15))
  {
    operator delete(*((void **)this + 12));
    *((void *)this + 17) = 0;
    *((void *)this + 12) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 13) = 0;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = 0;
  }
  uint64_t v35 = (void *)*((void *)this + 16);
  if (v35) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v35);
  }
  unint64_t v36 = (void *)*((void *)this + 9);
  if (v36)
  {
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v36;
    operator delete(v36);
  }
  long long v37 = (void *)*((void *)this + 5);
  if (v37)
  {
    *((void *)this + 6) = v37;
    operator delete(v37);
  }
  *(void *)this = &unk_26F0BD580;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  operations_research::sat::IntegerTrail::~IntegerTrail(this);

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::GenericLiteralWatcher>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::GenericLiteralWatcher *)a1[1];
  *a1 = &unk_26F0BD698;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::GenericLiteralWatcher>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::GenericLiteralWatcher *)a1[1];
  *a1 = &unk_26F0BD698;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(operations_research::sat::GenericLiteralWatcher *this)
{
  uint64_t v2 = (void *)*((void *)this + 65);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 66);
    unint64_t v4 = (void *)*((void *)this + 65);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      unint64_t v4 = (void *)*((void *)this + 65);
    }
    *((void *)this + 66) = v2;
    operator delete(v4);
  }
  int8x16_t v9 = (void *)*((void *)this + 61);
  if (v9)
  {
    *((void *)this + 62) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 58);
  if (v10)
  {
    *((void *)this + 59) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 55);
  if (v11)
  {
    *((void *)this + 56) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *((void *)this + 52);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 53);
    unint64_t v14 = (void *)*((void *)this + 52);
    if (v13 != v12)
    {
      uint64_t v15 = *((void *)this + 53);
      do
      {
        unint64_t v17 = *(void **)(v15 - 24);
        v15 -= 24;
        uint64_t v16 = v17;
        if (v17)
        {
          *(void *)(v13 - 16) = v16;
          operator delete(v16);
        }
        uint64_t v13 = v15;
      }
      while (v15 != v12);
      unint64_t v14 = (void *)*((void *)this + 52);
    }
    *((void *)this + 53) = v12;
    operator delete(v14);
  }
  uint64_t v18 = *((void *)this + 49);
  if (v18)
  {
    uint64_t v19 = *((void *)this + 50);
    unint64_t v20 = (void *)*((void *)this + 49);
    if (v19 != v18)
    {
      uint64_t v21 = *((void *)this + 50);
      do
      {
        unint64_t v23 = *(void **)(v21 - 24);
        v21 -= 24;
        unint64_t v22 = v23;
        if (v23)
        {
          *(void *)(v19 - 16) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      unint64_t v20 = (void *)*((void *)this + 49);
    }
    *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v18;
    operator delete(v20);
  }
  uint64_t v24 = *((void *)this + 46);
  if (v24)
  {
    uint64_t v25 = *((void *)this + 47);
    uint64_t v26 = (void *)*((void *)this + 46);
    if (v25 != v24)
    {
      uint64_t v27 = *((void *)this + 47);
      do
      {
        uint64_t v29 = *(void **)(v27 - 24);
        v27 -= 24;
        BOOL v28 = v29;
        if (v29)
        {
          *(void *)(v25 - 16) = v28;
          operator delete(v28);
        }
        uint64_t v25 = v27;
      }
      while (v27 != v24);
      uint64_t v26 = (void *)*((void *)this + 46);
    }
    *((void *)this + 47) = v24;
    operator delete(v26);
  }
  *((void *)this + 36) = &unk_26F0BD6D0;
  uint64_t v30 = (void *)*((void *)this + 43);
  if (v30)
  {
    *((void *)this + 44) = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)*((void *)this + 40);
  if (v31)
  {
    *((void *)this + 41) = v31;
    operator delete(v31);
  }
  BOOL v32 = (void *)*((void *)this + 37);
  if (v32)
  {
    *((void *)this + 38) = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)*((void *)this + 33);
  if (v33)
  {
    *((void *)this + 34) = v33;
    operator delete(v33);
  }
  unint64_t v34 = (void *)*((void *)this + 30);
  if (v34) {
    operator delete(v34);
  }
  uint64_t v35 = *((void *)this + 27);
  if (v35)
  {
    uint64_t v36 = *((void *)this + 28);
    long long v37 = (void *)*((void *)this + 27);
    if (v36 != v35)
    {
      do
        uint64_t v36 = std::deque<int>::~deque[abi:ne180100](v36 - 48);
      while (v36 != v35);
      long long v37 = (void *)*((void *)this + 27);
    }
    *((void *)this + 28) = v35;
    operator delete(v37);
  }
  unint64_t v38 = (void *)*((void *)this + 24);
  if (v38)
  {
    *((void *)this + 25) = v38;
    operator delete(v38);
  }
  unint64_t v39 = (void *)*((void *)this + 18);
  if (v39)
  {
    *((void *)this + 19) = v39;
    operator delete(v39);
  }
  uint64_t v40 = (void *)*((void *)this + 14);
  if (v40)
  {
    *((void *)this + 15) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *((void *)this + 11);
  if (v41)
  {
    uint64_t v42 = *((void *)this + 12);
    uint64_t v43 = (void *)*((void *)this + 11);
    if (v42 != v41)
    {
      uint64_t v44 = *((void *)this + 12);
      do
      {
        long long v46 = *(void **)(v44 - 24);
        v44 -= 24;
        uint64_t v45 = v46;
        if (v46)
        {
          *(void *)(v42 - 16) = v45;
          operator delete(v45);
        }
        uint64_t v42 = v44;
      }
      while (v44 != v41);
      uint64_t v43 = (void *)*((void *)this + 11);
    }
    *((void *)this + 12) = v41;
    operator delete(v43);
  }
  uint64_t v47 = *((void *)this + 8);
  if (v47)
  {
    uint64_t v48 = *((void *)this + 9);
    unint64_t v49 = (void *)*((void *)this + 8);
    if (v48 != v47)
    {
      uint64_t v50 = *((void *)this + 9);
      do
      {
        uint64_t v52 = *(void **)(v50 - 24);
        v50 -= 24;
        unint64_t v51 = v52;
        if (v52)
        {
          *(void *)(v48 - 16) = v51;
          operator delete(v51);
        }
        uint64_t v48 = v50;
      }
      while (v50 != v47);
      unint64_t v49 = (void *)*((void *)this + 8);
    }
    *((void *)this + 9) = v47;
    operator delete(v49);
  }
  *(void *)this = &unk_26F0BD580;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(this);

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::RevVector<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>::~RevVector(void *a1)
{
  *a1 = &unk_26F0BD6D0;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void operations_research::RevVector<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>::~RevVector(void *a1)
{
  *a1 = &unk_26F0BD6D0;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::RevVector<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>::SetLevel(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v3 = (std::vector<int> *)(a1 + 8);
  uint64_t v6 = v5 - v4;
  if (((unint64_t)v6 >> 2) != a2)
  {
    unint64_t v7 = a2;
    if ((int)((unint64_t)v6 >> 2) <= a2)
    {
      std::vector<int>::value_type __x = (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3;
      unint64_t v12 = v6 >> 2;
      std::vector<int>::size_type v13 = a2 - v12;
      if (v7 <= v12)
      {
        if (v7 < v12) {
          *(void *)(a1 + 16) = v4 + 4 * v7;
        }
      }
      else
      {
        std::vector<int>::__append(v3, v13, &__x);
      }
    }
    else
    {
      unint64_t v8 = (int *)(v4 + 4 * a2);
      unint64_t v9 = *v8;
      unint64_t v10 = v6 >> 2;
      std::vector<int>::size_type v11 = a2 - v10;
      if (v7 <= v10)
      {
        if (v7 < v10) {
          *(void *)(a1 + 16) = v8;
        }
      }
      else
      {
        std::vector<int>::__append(v3, v11);
      }
      uint64_t v14 = *(void *)(a1 + 32);
      unint64_t v15 = (*(void *)(a1 + 40) - v14) >> 3;
      int v16 = v15 - 1;
      if ((int)v15 - 1 >= (int)v9)
      {
        uint64_t v17 = *(void *)(a1 + 56);
        do
        {
          *(_DWORD *)(v17 + 4 * *(int *)(v14 + 8 * v16)) = *(_DWORD *)(v14 + 8 * v16 + 4);
          --v16;
        }
        while (v16 >= (int)v9);
      }
      if (v9 <= v15)
      {
        if (v9 < v15) {
          *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v14 + 8 * v9;
        }
      }
      else
      {
        std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)(a1 + 32), v9 - v15);
      }
    }
  }
}

void std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::vector<int>::size_type v13 = operator new(8 * v12);
    }
    else
    {
      std::vector<int>::size_type v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    int v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      unint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::AllDifferentBoundsPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BD710;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::AllDifferentBoundsPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BD710;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD758;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BD758;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0BD758;
  v2[2] = 0;
  v2[3] = 0;
  unint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    unint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_23CBAF6F4(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(void *result, void *a2)
{
  a2[1] = 0;
  *a2 = &unk_26F0BD758;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v3 = (unsigned char *)result[1];
  uint64_t v2 = (unsigned char *)result[2];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    unint64_t v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_23CBAF7AC(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t result)
{
  if (*(void *)(result + 16) - *(void *)(result + 8) >= 0xCuLL) {
    operator new();
  }
  return result;
}

void sub_23CBAF9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x23ECF2BC0](v10, 0x10B1C409B13CDA4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_ta"
                     "g_EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20Integer"
                                "Variable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::AllDifferentConstraint>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BD7C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::AllDifferentConstraint>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BD7C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    uint64_t v11 = (__n128 *)(a2 - 20);
    unint64_t v12 = (__n128 *)(a2 - 40);
    std::vector<int>::size_type v13 = (__n128 *)(a2 - 60);
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = a2 - v14;
          uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 2);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(void *)(a2 - 16) < *(void *)(v14 + 4))
                {
                  int v210 = *(_DWORD *)(v14 + 16);
                  __n128 v185 = *(__n128 *)v14;
                  long long v96 = *(_OWORD *)(a2 - 20);
                  *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
                  *(_OWORD *)unint64_t v14 = v96;
                  *(_DWORD *)(a2 - 4) = v210;
                  *(__n128 *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v185;
                }
                return;
              case 3:
                uint64_t v97 = (__n128 *)(v14 + 20);
                uint64_t v98 = *(void *)(v14 + 24);
                uint64_t v99 = *(void *)(a2 - 16);
                if (v98 >= *(void *)(v14 + 4))
                {
                  if (v99 < v98)
                  {
                    __n128 v155 = *v97;
                    int v156 = *(_DWORD *)(v14 + 36);
                    int v157 = *(_DWORD *)(a2 - 4);
                    __n128 *v97 = *v11;
                    *(_DWORD *)(v14 + 36) = v157;
                    *(_DWORD *)(a2 - 4) = v156;
                    *uint64_t v11 = v155;
                    if (*(void *)(v14 + 24) < *(void *)(v14 + 4))
                    {
                      int v214 = *(_DWORD *)(v14 + 16);
                      __n128 v189 = *(__n128 *)v14;
                      *(__n128 *)unint64_t v14 = *v97;
                      *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 36);
                      __n128 *v97 = v189;
                      *(_DWORD *)(v14 + 36) = v214;
                    }
                  }
                }
                else
                {
                  if (v99 >= v98)
                  {
                    int v215 = *(_DWORD *)(v14 + 16);
                    __n128 v190 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v97;
                    *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 36);
                    __n128 *v97 = v190;
                    *(_DWORD *)(v14 + 36) = v215;
                    if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
                      return;
                    }
                    __n128 v101 = *v97;
                    int v164 = *(_DWORD *)(v14 + 36);
                    int v165 = *(_DWORD *)(a2 - 4);
                    __n128 *v97 = *v11;
                    *(_DWORD *)(v14 + 36) = v165;
                    *(_DWORD *)(a2 - 4) = v164;
                  }
                  else
                  {
                    int v211 = *(_DWORD *)(v14 + 16);
                    __n128 v186 = *(__n128 *)v14;
                    __n128 v100 = *v11;
                    *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
                    *(__n128 *)unint64_t v14 = v100;
                    __n128 v101 = v186;
                    *(_DWORD *)(a2 - 4) = v211;
                  }
                  *uint64_t v11 = v101;
                }
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(v14, v14 + 20, v14 + 40, a2 - 20, a5);
                return;
              case 5:
                unint64_t v102 = (__n128 *)(v14 + 20);
                int64_t v103 = (__n128 *)(v14 + 40);
                unint64_t v104 = (long long *)(v14 + 60);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(v14, v14 + 20, v14 + 40, v14 + 60, a5);
                if (*(void *)(a2 - 16) < *(void *)(v14 + 64))
                {
                  long long v105 = *v104;
                  int v106 = *(_DWORD *)(v14 + 76);
                  int v107 = *(_DWORD *)(a2 - 4);
                  long long *v104 = *(_OWORD *)(a2 - 20);
                  *(_DWORD *)(v14 + 76) = v107;
                  *(_DWORD *)(a2 - 4) = v106;
                  *(_OWORD *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v105;
                  if (*(void *)(v14 + 64) < *(void *)(v14 + 44))
                  {
                    int v108 = *(_DWORD *)(v14 + 56);
                    __n128 v109 = *v103;
                    *int64_t v103 = (__n128)*v104;
                    *(_DWORD *)(v14 + 56) = *(_DWORD *)(v14 + 76);
                    long long *v104 = (__int128)v109;
                    *(_DWORD *)(v14 + 76) = v108;
                    if (*(void *)(v14 + 44) < *(void *)(v14 + 24))
                    {
                      int v110 = *(_DWORD *)(v14 + 36);
                      __n128 v111 = *v102;
                      *unint64_t v102 = *v103;
                      *(_DWORD *)(v14 + 36) = *(_DWORD *)(v14 + 56);
                      *int64_t v103 = v111;
                      *(_DWORD *)(v14 + 56) = v110;
                      if (*(void *)(v14 + 24) < *(void *)(v14 + 4))
                      {
                        int v212 = *(_DWORD *)(v14 + 16);
                        __n128 v187 = *(__n128 *)v14;
                        *(__n128 *)unint64_t v14 = *v102;
                        *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 36);
                        *unint64_t v102 = v187;
                        *(_DWORD *)(v14 + 36) = v212;
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v15 <= 479)
          {
            uint64_t v112 = (_DWORD *)(v14 + 20);
            BOOL v114 = v14 == a2 || v112 == (_DWORD *)a2;
            if (a4)
            {
              if (!v114)
              {
                uint64_t v115 = 0;
                uint64_t v116 = (void *)v14;
                do
                {
                  uint64_t v118 = v112;
                  uint64_t v119 = v116[3];
                  if (v119 < *(void *)((char *)v116 + 4))
                  {
                    int v120 = *v118;
                    uint64_t v121 = v116[4];
                    uint64_t v122 = v115;
                    do
                    {
                      uint64_t v123 = v14 + v122;
                      *(_OWORD *)(v123 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(_OWORD *)(v14 + v122);
                      *(_DWORD *)(v123 + 36) = *(_DWORD *)(v14 + v122 + 16);
                      if (!v122)
                      {
                        uint64_t v117 = v14;
                        goto LABEL_123;
                      }
                      v122 -= 20;
                    }
                    while (v119 < *(void *)(v123 - 16));
                    uint64_t v117 = v14 + v122 + 20;
LABEL_123:
                    *(_DWORD *)uint64_t v117 = v120;
                    *(void *)(v117 + 4) = v119;
                    *(void *)(v117 + 12) = v121;
                  }
                  uint64_t v112 = v118 + 5;
                  v115 += 20;
                  uint64_t v116 = v118;
                }
                while (v118 + 5 != (_DWORD *)a2);
              }
            }
            else if (!v114)
            {
              do
              {
                uint64_t v158 = v112;
                uint64_t v159 = *(void *)(a1 + 24);
                if (v159 < *(void *)(a1 + 4))
                {
                  int v160 = *v112;
                  uint64_t v161 = *(void *)(a1 + 32);
                  uint64_t v162 = v158;
                  do
                  {
                    *(_OWORD *)uint64_t v162 = *(_OWORD *)(v162 - 5);
                    v162[4] = *(v162 - 1);
                    uint64_t v163 = *(void *)(v162 - 9);
                    v162 -= 5;
                  }
                  while (v159 < v163);
                  *uint64_t v162 = v160;
                  *(void *)(v162 + 1) = v159;
                  *(void *)(v162 + 3) = v161;
                }
                uint64_t v112 = v158 + 5;
                a1 = (unint64_t)v158;
              }
              while (v158 + 5 != (_DWORD *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v14 != a2)
            {
              int64_t v124 = (unint64_t)(v16 - 2) >> 1;
              int64_t v125 = v124;
              do
              {
                if (v124 >= v125)
                {
                  uint64_t v127 = (2 * v125) | 1;
                  unint64_t v128 = v14 + 20 * v127;
                  if (2 * v125 + 2 < v16)
                  {
                    BOOL v126 = *(void *)(v128 + 4) < *(void *)(v128 + 24);
                    v128 += 20 * v126;
                    if (v126) {
                      uint64_t v127 = 2 * v125 + 2;
                    }
                  }
                  unint64_t v129 = v14 + 20 * v125;
                  uint64_t v130 = *(void *)(v129 + 4);
                  if (*(void *)(v128 + 4) >= v130)
                  {
                    int v131 = *(_DWORD *)v129;
                    uint64_t v132 = *(void *)(v129 + 12);
                    do
                    {
                      unint64_t v133 = v129;
                      unint64_t v129 = v128;
                      long long v134 = *(_OWORD *)v128;
                      *(_DWORD *)(v133 + 16) = *(_DWORD *)(v128 + 16);
                      *(_OWORD *)unint64_t v133 = v134;
                      if (v124 < v127) {
                        break;
                      }
                      uint64_t v135 = (2 * v127) | 1;
                      unint64_t v128 = v14 + 20 * v135;
                      uint64_t v136 = 2 * v127 + 2;
                      if (v136 < v16)
                      {
                        BOOL v126 = *(void *)(v128 + 4) < *(void *)(v128 + 24);
                        v128 += 20 * v126;
                        if (v126) {
                          uint64_t v135 = v136;
                        }
                      }
                      uint64_t v127 = v135;
                    }
                    while (*(void *)(v128 + 4) >= v130);
                    *(_DWORD *)unint64_t v129 = v131;
                    *(void *)(v129 + 4) = v130;
                    *(void *)(v129 + 12) = v132;
                  }
                }
                BOOL v126 = v125-- <= 0;
              }
              while (!v126);
              int64_t v137 = v15 / 0x14uLL;
              do
              {
                uint64_t v138 = 0;
                int v213 = *(_DWORD *)(v14 + 16);
                __n128 v188 = *(__n128 *)v14;
                unint64_t v139 = v14;
                do
                {
                  uint64_t v141 = v139 + 20 * v138 + 20;
                  uint64_t v142 = (2 * v138) | 1;
                  uint64_t v143 = 2 * v138 + 2;
                  if (v143 < v137)
                  {
                    uint64_t v144 = *(void *)(v141 + 4);
                    uint64_t v145 = *(void *)(v141 + 24);
                    v141 += 20 * (v144 < v145);
                    if (v144 < v145) {
                      uint64_t v142 = v143;
                    }
                  }
                  long long v140 = *(_OWORD *)v141;
                  *(_DWORD *)(v139 + 16) = *(_DWORD *)(v141 + 16);
                  *(_OWORD *)unint64_t v139 = v140;
                  unint64_t v139 = v141;
                  uint64_t v138 = v142;
                }
                while (v142 <= (uint64_t)((unint64_t)(v137 - 2) >> 1));
                a2 -= 20;
                if (v141 == a2)
                {
                  *(_DWORD *)(v141 + 16) = v213;
                  *(__n128 *)uint64_t v141 = v188;
                }
                else
                {
                  long long v146 = *(_OWORD *)a2;
                  *(_DWORD *)(v141 + 16) = *(_DWORD *)(a2 + 16);
                  *(_OWORD *)uint64_t v141 = v146;
                  *(_DWORD *)(a2 + 16) = v213;
                  *(__n128 *)a2 = v188;
                  uint64_t v147 = v141 - v14 + 20;
                  if (v147 >= 21)
                  {
                    unint64_t v148 = (v147 / 0x14uLL - 2) >> 1;
                    uint64_t v149 = v14 + 20 * v148;
                    uint64_t v150 = *(void *)(v141 + 4);
                    if (*(void *)(v149 + 4) < v150)
                    {
                      int v151 = *(_DWORD *)v141;
                      uint64_t v152 = *(void *)(v141 + 12);
                      do
                      {
                        uint64_t v153 = v141;
                        uint64_t v141 = v149;
                        long long v154 = *(_OWORD *)v149;
                        *(_DWORD *)(v153 + 16) = *(_DWORD *)(v149 + 16);
                        *(_OWORD *)uint64_t v153 = v154;
                        if (!v148) {
                          break;
                        }
                        unint64_t v148 = (v148 - 1) >> 1;
                        uint64_t v149 = v14 + 20 * v148;
                      }
                      while (*(void *)(v149 + 4) < v150);
                      *(_DWORD *)uint64_t v141 = v151;
                      *(void *)(v141 + 4) = v150;
                      *(void *)(v141 + 12) = v152;
                    }
                  }
                }
                BOOL v126 = v137-- <= 2;
              }
              while (!v126);
            }
            return;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          unint64_t v18 = v14 + 20 * ((unint64_t)v16 >> 1);
          uint64_t v19 = *(void *)(a2 - 16);
          if ((unint64_t)v15 >= 0xA01) {
            break;
          }
          uint64_t v22 = *(void *)(v14 + 4);
          if (v22 < *(void *)(v18 + 4))
          {
            if (v19 >= v22)
            {
              int v199 = *(_DWORD *)(v18 + 16);
              __n128 v174 = *(__n128 *)v18;
              __n128 v42 = *(__n128 *)v14;
              *(_DWORD *)(v18 + 16) = *(_DWORD *)(v14 + 16);
              *(__n128 *)unint64_t v18 = v42;
              a5 = v174;
              *(_DWORD *)(v14 + 16) = v199;
              *(__n128 *)unint64_t v14 = v174;
              if (*(void *)(a2 - 16) >= *(void *)(v14 + 4)) {
                goto LABEL_32;
              }
              int v192 = *(_DWORD *)(v14 + 16);
              __n128 v167 = *(__n128 *)v14;
              __n128 v43 = *v11;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)unint64_t v14 = v43;
            }
            else
            {
              int v192 = *(_DWORD *)(v18 + 16);
              __n128 v167 = *(__n128 *)v18;
              __n128 v23 = *v11;
              *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)unint64_t v18 = v23;
            }
            a5 = v167;
            *(_DWORD *)(a2 - 4) = v192;
            *uint64_t v11 = v167;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v19 >= v22) {
            goto LABEL_32;
          }
          int v195 = *(_DWORD *)(v14 + 16);
          __n128 v170 = *(__n128 *)v14;
          __n128 v26 = *v11;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
          *(__n128 *)unint64_t v14 = v26;
          a5 = v170;
          *(_DWORD *)(a2 - 4) = v195;
          *uint64_t v11 = v170;
          if (*(void *)(v14 + 4) >= *(void *)(v18 + 4)) {
            goto LABEL_32;
          }
          int v196 = *(_DWORD *)(v18 + 16);
          __n128 v171 = *(__n128 *)v18;
          __n128 v27 = *(__n128 *)v14;
          *(_DWORD *)(v18 + 16) = *(_DWORD *)(v14 + 16);
          *(__n128 *)unint64_t v18 = v27;
          a5 = v171;
          *(_DWORD *)(v14 + 16) = v196;
          *(__n128 *)unint64_t v14 = v171;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          uint64_t v44 = *(void *)(v14 + 4);
          if (*(void *)(v14 - 16) < v44) {
            goto LABEL_57;
          }
          if (v44 < *(void *)(a2 - 16))
          {
            unint64_t v84 = v14;
            do
            {
              unint64_t v14 = v84 + 20;
              uint64_t v85 = *(void *)(v84 + 24);
              v84 += 20;
            }
            while (v44 >= v85);
          }
          else
          {
            unint64_t v86 = v14 + 20;
            do
            {
              unint64_t v14 = v86;
              if (v86 >= a2) {
                break;
              }
              uint64_t v87 = *(void *)(v86 + 4);
              v86 += 20;
            }
            while (v44 >= v87);
          }
          unint64_t v88 = a2;
          if (v14 < a2)
          {
            unint64_t v89 = a2;
            do
            {
              unint64_t v88 = v89 - 20;
              uint64_t v90 = *(void *)(v89 - 16);
              v89 -= 20;
            }
            while (v44 < v90);
          }
          int v91 = *(_DWORD *)a1;
          uint64_t v92 = *(void *)(a1 + 12);
          while (v14 < v88)
          {
            int v209 = *(_DWORD *)(v14 + 16);
            __n128 v184 = *(__n128 *)v14;
            __n128 v93 = *(__n128 *)v88;
            *(_DWORD *)(v14 + 16) = *(_DWORD *)(v88 + 16);
            *(__n128 *)unint64_t v14 = v93;
            a5 = v184;
            *(_DWORD *)(v88 + 16) = v209;
            *(__n128 *)unint64_t v88 = v184;
            do
            {
              uint64_t v94 = *(void *)(v14 + 24);
              v14 += 20;
            }
            while (v44 >= v94);
            do
            {
              uint64_t v95 = *(void *)(v88 - 16);
              v88 -= 20;
            }
            while (v44 < v95);
          }
          BOOL v5 = v14 - 20 >= a1;
          BOOL v6 = v14 - 20 == a1;
          if (v14 - 20 != a1)
          {
            a5 = *(__n128 *)(v14 - 20);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v14 - 4);
            *(__n128 *)a1 = a5;
          }
          a4 = 0;
          *(_DWORD *)(v14 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v91;
          *(void *)(v14 - 16) = v44;
          *(void *)(v14 - 8) = v92;
        }
        uint64_t v20 = *(void *)(v18 + 4);
        if (v20 >= *(void *)(v14 + 4))
        {
          if (v19 < v20)
          {
            int v193 = *(_DWORD *)(v18 + 16);
            __n128 v168 = *(__n128 *)v18;
            __n128 v24 = *v11;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)unint64_t v18 = v24;
            *(_DWORD *)(a2 - 4) = v193;
            *uint64_t v11 = v168;
            if (*(void *)(v18 + 4) < *(void *)(v14 + 4))
            {
              int v194 = *(_DWORD *)(v14 + 16);
              __n128 v169 = *(__n128 *)v14;
              __n128 v25 = *(__n128 *)v18;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(v18 + 16);
              *(__n128 *)unint64_t v14 = v25;
              *(_DWORD *)(v18 + 16) = v194;
              *(__n128 *)unint64_t v18 = v169;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            int v197 = *(_DWORD *)(v14 + 16);
            __n128 v172 = *(__n128 *)v14;
            __n128 v28 = *(__n128 *)v18;
            *(_DWORD *)(v14 + 16) = *(_DWORD *)(v18 + 16);
            *(__n128 *)unint64_t v14 = v28;
            *(_DWORD *)(v18 + 16) = v197;
            *(__n128 *)unint64_t v18 = v172;
            if (*(void *)(a2 - 16) >= *(void *)(v18 + 4)) {
              goto LABEL_23;
            }
            int v191 = *(_DWORD *)(v18 + 16);
            __n128 v166 = *(__n128 *)v18;
            __n128 v29 = *v11;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)unint64_t v18 = v29;
          }
          else
          {
            int v191 = *(_DWORD *)(v14 + 16);
            __n128 v166 = *(__n128 *)v14;
            __n128 v21 = *v11;
            *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)unint64_t v14 = v21;
          }
          *(_DWORD *)(a2 - 4) = v191;
          *uint64_t v11 = v166;
        }
LABEL_23:
        uint64_t v30 = (__n128 *)(v14 + 20);
        unint64_t v31 = v14 + 20 * v17;
        unint64_t v32 = v31 - 20;
        uint64_t v33 = *(void *)(v31 - 16);
        uint64_t v34 = *(void *)(a2 - 36);
        if (v33 >= *(void *)(v14 + 24))
        {
          if (v34 < v33)
          {
            int v198 = *(_DWORD *)(v32 + 16);
            __n128 v173 = *(__n128 *)v32;
            __n128 v38 = *v12;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(a2 - 24);
            *(__n128 *)unint64_t v32 = v38;
            *(_DWORD *)(a2 - 24) = v198;
            *unint64_t v12 = v173;
            if (*(void *)(v32 + 4) < *(void *)(v14 + 24))
            {
              __n128 v39 = *v30;
              int v40 = *(_DWORD *)(v14 + 36);
              int v41 = *(_DWORD *)(v32 + 16);
              *uint64_t v30 = *(__n128 *)v32;
              *(_DWORD *)(v14 + 36) = v41;
              *(_DWORD *)(v32 + 16) = v40;
              *(__n128 *)unint64_t v32 = v39;
            }
          }
        }
        else
        {
          if (v34 >= v33)
          {
            __n128 v45 = *v30;
            int v46 = *(_DWORD *)(v14 + 36);
            int v47 = *(_DWORD *)(v32 + 16);
            *uint64_t v30 = *(__n128 *)v32;
            *(_DWORD *)(v14 + 36) = v47;
            *(_DWORD *)(v32 + 16) = v46;
            *(__n128 *)unint64_t v32 = v45;
            if (*(void *)(a2 - 36) >= *(void *)(v32 + 4)) {
              goto LABEL_37;
            }
            int v200 = *(_DWORD *)(v32 + 16);
            __n128 v175 = *(__n128 *)v32;
            __n128 v48 = *v12;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(a2 - 24);
            *(__n128 *)unint64_t v32 = v48;
            __n128 v35 = v175;
            *(_DWORD *)(a2 - 24) = v200;
          }
          else
          {
            __n128 v35 = *v30;
            int v36 = *(_DWORD *)(v14 + 36);
            int v37 = *(_DWORD *)(a2 - 24);
            *uint64_t v30 = *v12;
            *(_DWORD *)(v14 + 36) = v37;
            *(_DWORD *)(a2 - 24) = v36;
          }
          *unint64_t v12 = v35;
        }
LABEL_37:
        unint64_t v49 = (__n128 *)(v14 + 40);
        unint64_t v50 = v14 + 20 * v17;
        unint64_t v51 = v50 + 20;
        uint64_t v52 = *(void *)(v50 + 24);
        uint64_t v53 = *(void *)(a2 - 56);
        if (v52 >= *(void *)(v14 + 44))
        {
          if (v53 < v52)
          {
            int v201 = *(_DWORD *)(v51 + 16);
            __n128 v176 = *(__n128 *)v51;
            __n128 v57 = *v13;
            *(_DWORD *)(v51 + 16) = *(_DWORD *)(a2 - 44);
            *(__n128 *)unint64_t v51 = v57;
            *(_DWORD *)(a2 - 44) = v201;
            *std::vector<int>::size_type v13 = v176;
            if (*(void *)(v51 + 4) < *(void *)(v14 + 44))
            {
              __n128 v58 = *v49;
              int v59 = *(_DWORD *)(v14 + 56);
              int v60 = *(_DWORD *)(v51 + 16);
              *unint64_t v49 = *(__n128 *)v51;
              *(_DWORD *)(v14 + 56) = v60;
              *(_DWORD *)(v51 + 16) = v59;
              *(__n128 *)unint64_t v51 = v58;
            }
          }
        }
        else
        {
          if (v53 >= v52)
          {
            __n128 v61 = *v49;
            int v62 = *(_DWORD *)(v14 + 56);
            int v63 = *(_DWORD *)(v51 + 16);
            *unint64_t v49 = *(__n128 *)v51;
            *(_DWORD *)(v14 + 56) = v63;
            *(_DWORD *)(v51 + 16) = v62;
            *(__n128 *)unint64_t v51 = v61;
            if (*(void *)(a2 - 56) >= *(void *)(v51 + 4)) {
              goto LABEL_46;
            }
            int v202 = *(_DWORD *)(v51 + 16);
            __n128 v177 = *(__n128 *)v51;
            __n128 v64 = *v13;
            *(_DWORD *)(v51 + 16) = *(_DWORD *)(a2 - 44);
            *(__n128 *)unint64_t v51 = v64;
            __n128 v54 = v177;
            *(_DWORD *)(a2 - 44) = v202;
          }
          else
          {
            __n128 v54 = *v49;
            int v55 = *(_DWORD *)(v14 + 56);
            int v56 = *(_DWORD *)(a2 - 44);
            *unint64_t v49 = *v13;
            *(_DWORD *)(v14 + 56) = v56;
            *(_DWORD *)(a2 - 44) = v55;
          }
          *std::vector<int>::size_type v13 = v54;
        }
LABEL_46:
        uint64_t v65 = *(void *)(v18 + 4);
        uint64_t v66 = *(void *)(v51 + 4);
        if (v65 >= *(void *)(v32 + 4))
        {
          if (v66 < v65)
          {
            int v204 = *(_DWORD *)(v18 + 16);
            __n128 v179 = *(__n128 *)v18;
            *(_OWORD *)unint64_t v18 = *(_OWORD *)v51;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(v51 + 16);
            *(_DWORD *)(v51 + 16) = v204;
            *(__n128 *)unint64_t v51 = v179;
            if (*(void *)(v18 + 4) < *(void *)(v32 + 4))
            {
              int v205 = *(_DWORD *)(v32 + 16);
              __n128 v180 = *(__n128 *)v32;
              *(_OWORD *)unint64_t v32 = *(_OWORD *)v18;
              *(_DWORD *)(v32 + 16) = *(_DWORD *)(v18 + 16);
              *(_DWORD *)(v18 + 16) = v205;
              *(__n128 *)unint64_t v18 = v180;
            }
          }
        }
        else
        {
          if (v66 >= v65)
          {
            int v206 = *(_DWORD *)(v32 + 16);
            __n128 v181 = *(__n128 *)v32;
            *(_OWORD *)unint64_t v32 = *(_OWORD *)v18;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(v18 + 16);
            *(_DWORD *)(v18 + 16) = v206;
            *(__n128 *)unint64_t v18 = v181;
            if (*(void *)(v51 + 4) >= *(void *)(v18 + 4)) {
              goto LABEL_55;
            }
            int v203 = *(_DWORD *)(v18 + 16);
            __n128 v178 = *(__n128 *)v18;
            *(_OWORD *)unint64_t v18 = *(_OWORD *)v51;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(v51 + 16);
          }
          else
          {
            int v203 = *(_DWORD *)(v32 + 16);
            __n128 v178 = *(__n128 *)v32;
            *(_OWORD *)unint64_t v32 = *(_OWORD *)v51;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(v51 + 16);
          }
          *(_DWORD *)(v51 + 16) = v203;
          *(__n128 *)unint64_t v51 = v178;
        }
LABEL_55:
        int v207 = *(_DWORD *)(v14 + 16);
        __n128 v182 = *(__n128 *)v14;
        __n128 v67 = *(__n128 *)v18;
        *(_DWORD *)(v14 + 16) = *(_DWORD *)(v18 + 16);
        *(__n128 *)unint64_t v14 = v67;
        a5 = v182;
        *(_DWORD *)(v18 + 16) = v207;
        *(__n128 *)unint64_t v18 = v182;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        uint64_t v44 = *(void *)(v14 + 4);
LABEL_57:
        uint64_t v68 = 0;
        int v69 = *(_DWORD *)v14;
        uint64_t v70 = *(void *)(v14 + 12);
        do
        {
          uint64_t v71 = *(void *)(v14 + v68 + 24);
          v68 += 20;
        }
        while (v71 < v44);
        unint64_t v72 = v14 + v68;
        unint64_t v73 = a2;
        if (v68 == 20)
        {
          unint64_t v76 = a2;
          while (v72 < v76)
          {
            unint64_t v74 = v76 - 20;
            uint64_t v77 = *(void *)(v76 - 16);
            v76 -= 20;
            if (v77 < v44) {
              goto LABEL_65;
            }
          }
          unint64_t v74 = v76;
          unint64_t v14 = v72;
        }
        else
        {
          do
          {
            unint64_t v74 = v73 - 20;
            uint64_t v75 = *(void *)(v73 - 16);
            v73 -= 20;
          }
          while (v75 >= v44);
LABEL_65:
          unint64_t v14 = v72;
          if (v72 < v74)
          {
            unint64_t v78 = v74;
            do
            {
              int v208 = *(_DWORD *)(v14 + 16);
              __n128 v183 = *(__n128 *)v14;
              __n128 v79 = *(__n128 *)v78;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(v78 + 16);
              *(__n128 *)unint64_t v14 = v79;
              a5 = v183;
              *(_DWORD *)(v78 + 16) = v208;
              *(__n128 *)unint64_t v78 = v183;
              do
              {
                uint64_t v80 = *(void *)(v14 + 24);
                v14 += 20;
              }
              while (v80 < v44);
              do
              {
                uint64_t v81 = *(void *)(v78 - 16);
                v78 -= 20;
              }
              while (v81 >= v44);
            }
            while (v14 < v78);
          }
        }
        if (v14 - 20 != a1)
        {
          a5 = *(__n128 *)(v14 - 20);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v14 - 4);
          *(__n128 *)a1 = a5;
        }
        *(_DWORD *)(v14 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v69;
        *(void *)(v14 - 16) = v44;
        *(void *)(v14 - 8) = v70;
        if (v72 >= v74) {
          break;
        }
LABEL_76:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *,false>(a1, v14 - 20, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v82 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(a1, v14 - 20, a5);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(v14, a2, v83))
      {
        break;
      }
      if (!v82) {
        goto LABEL_76;
      }
    }
    a2 = v14 - 20;
    if (!v82) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 4))
      {
        int v7 = *(_DWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        int v9 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      uint64_t v10 = (long long *)(a1 + 20);
      uint64_t v11 = (long long *)(a2 - 20);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(void *)(a2 - 16);
      if (v12 >= *(void *)(a1 + 4))
      {
        if (v13 < v12)
        {
          int v36 = *(_DWORD *)(a1 + 36);
          long long v37 = *v10;
          int v38 = *(_DWORD *)(a2 - 4);
          *uint64_t v10 = *v11;
          *(_DWORD *)(a1 + 36) = v38;
          *uint64_t v11 = v37;
          *(_DWORD *)(a2 - 4) = v36;
          if (*(void *)(a1 + 24) < *(void *)(a1 + 4))
          {
            int v39 = *(_DWORD *)(a1 + 16);
            long long v40 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *uint64_t v10 = v40;
            *(_DWORD *)(a1 + 36) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        int v45 = *(_DWORD *)(a1 + 16);
        long long v46 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *uint64_t v10 = v46;
        *(_DWORD *)(a1 + 36) = v45;
        if (*(void *)(a2 - 16) < *(void *)(a1 + 24))
        {
          int v47 = *(_DWORD *)(a1 + 36);
          long long v48 = *v10;
          int v49 = *(_DWORD *)(a2 - 4);
          *uint64_t v10 = *v11;
          *(_DWORD *)(a1 + 36) = v49;
          *uint64_t v11 = v48;
          *(_DWORD *)(a2 - 4) = v47;
        }
      }
      else
      {
        int v14 = *(_DWORD *)(a1 + 16);
        long long v15 = *(_OWORD *)a1;
        int v16 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *uint64_t v11 = v15;
        *(_DWORD *)(a2 - 4) = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(a1, a1 + 20, a1 + 40, a2 - 20, a3);
      return 1;
    case 5uLL:
      __n128 v24 = (long long *)(a1 + 20);
      __n128 v25 = (long long *)(a1 + 40);
      __n128 v26 = (long long *)(a1 + 60);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(a1, a1 + 20, a1 + 40, a1 + 60, a3);
      if (*(void *)(a2 - 16) < *(void *)(a1 + 64))
      {
        int v27 = *(_DWORD *)(a1 + 76);
        long long v28 = *v26;
        int v29 = *(_DWORD *)(a2 - 4);
        *__n128 v26 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 76) = v29;
        *(_OWORD *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v28;
        *(_DWORD *)(a2 - 4) = v27;
        if (*(void *)(a1 + 64) < *(void *)(a1 + 44))
        {
          int v30 = *(_DWORD *)(a1 + 56);
          long long v31 = *v25;
          *__n128 v25 = *v26;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *__n128 v26 = v31;
          *(_DWORD *)(a1 + 76) = v30;
          if (*(void *)(a1 + 44) < *(void *)(a1 + 24))
          {
            int v32 = *(_DWORD *)(a1 + 36);
            long long v33 = *v24;
            long long *v24 = *v25;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *__n128 v25 = v33;
            *(_DWORD *)(a1 + 56) = v32;
            if (*(void *)(a1 + 24) < *(void *)(a1 + 4))
            {
              int v34 = *(_DWORD *)(a1 + 16);
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              long long *v24 = v35;
              *(_DWORD *)(a1 + 36) = v34;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v17 = a1 + 40;
      unint64_t v18 = (long long *)(a1 + 20);
      uint64_t v19 = *(void *)(a1 + 24);
      uint64_t v20 = *(void *)(a1 + 4);
      uint64_t v21 = *(void *)(a1 + 44);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          int v41 = *(_DWORD *)(a1 + 36);
          long long v42 = *v18;
          *unint64_t v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)uint64_t v17 = v42;
          *(_DWORD *)(a1 + 56) = v41;
          if (*(void *)(a1 + 24) < v20)
          {
            int v43 = *(_DWORD *)(a1 + 16);
            long long v44 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *unint64_t v18 = v44;
            *(_DWORD *)(a1 + 36) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        int v50 = *(_DWORD *)(a1 + 16);
        long long v51 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *unint64_t v18 = v51;
        *(_DWORD *)(a1 + 36) = v50;
        if (v21 < *(void *)(a1 + 24))
        {
          int v52 = *(_DWORD *)(a1 + 36);
          long long v53 = *v18;
          *unint64_t v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)uint64_t v17 = v53;
          *(_DWORD *)(a1 + 56) = v52;
        }
      }
      else
      {
        int v22 = *(_DWORD *)(a1 + 16);
        long long v23 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 56);
        *(_OWORD *)uint64_t v17 = v23;
        *(_DWORD *)(a1 + 56) = v22;
      }
      uint64_t v54 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v55 = 0;
      int v56 = 0;
      break;
  }
  while (1)
  {
    uint64_t v57 = *(void *)(v54 + 4);
    if (v57 < *(void *)(v17 + 4)) {
      break;
    }
LABEL_36:
    uint64_t v17 = v54;
    v55 += 20;
    v54 += 20;
    if (v54 == a2) {
      return 1;
    }
  }
  int v58 = *(_DWORD *)v54;
  uint64_t v59 = *(void *)(v54 + 12);
  uint64_t v60 = v55;
  do
  {
    uint64_t v61 = a1 + v60;
    *(_OWORD *)(v61 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(_OWORD *)(a1 + v60 + 40);
    *(_DWORD *)(v61 + 76) = *(_DWORD *)(a1 + v60 + 56);
    if (v60 == -40)
    {
      *(_DWORD *)a1 = v58;
      *(void *)(a1 + 4) = v57;
      *(void *)(a1 + 12) = v59;
      if (++v56 != 8) {
        goto LABEL_36;
      }
      return v54 + 20 == a2;
    }
    v60 -= 20;
  }
  while (v57 < *(void *)(v61 + 24));
  uint64_t v62 = a1 + v60;
  *(_DWORD *)(v62 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v58;
  v62 += 60;
  *(void *)(v62 + 4) = v57;
  *(void *)(v62 + 12) = v59;
  if (++v56 != 8) {
    goto LABEL_36;
  }
  return v54 + 20 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5 = *(void *)(a2 + 4);
  uint64_t v6 = *(void *)(a3 + 4);
  if (v5 >= *(void *)(a1 + 4))
  {
    if (v6 < v5)
    {
      int v9 = *(_DWORD *)(a2 + 16);
      BOOL result = *(__n128 *)a2;
      int v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v10;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v9;
      if (*(void *)(a2 + 4) < *(void *)(a1 + 4))
      {
        int v11 = *(_DWORD *)(a1 + 16);
        BOOL result = *(__n128 *)a1;
        int v12 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v12;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      int v7 = *(_DWORD *)(a1 + 16);
      BOOL result = *(__n128 *)a1;
      int v8 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v7;
      goto LABEL_10;
    }
    int v13 = *(_DWORD *)(a1 + 16);
    BOOL result = *(__n128 *)a1;
    int v14 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = v14;
    *(__n128 *)a2 = result;
    *(_DWORD *)(a2 + 16) = v13;
    if (*(void *)(a3 + 4) < *(void *)(a2 + 4))
    {
      int v7 = *(_DWORD *)(a2 + 16);
      BOOL result = *(__n128 *)a2;
      int v15 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)(a4 + 4) < *(void *)(a3 + 4))
  {
    int v16 = *(_DWORD *)(a3 + 16);
    BOOL result = *(__n128 *)a3;
    int v17 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v17;
    *(__n128 *)a4 = result;
    *(_DWORD *)(a4 + 16) = v16;
    if (*(void *)(a3 + 4) < *(void *)(a2 + 4))
    {
      int v18 = *(_DWORD *)(a2 + 16);
      BOOL result = *(__n128 *)a2;
      int v19 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v19;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v18;
      if (*(void *)(a2 + 4) < *(void *)(a1 + 4))
      {
        int v20 = *(_DWORD *)(a1 + 16);
        BOOL result = *(__n128 *)a1;
        int v21 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v21;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v20;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (__n128 *)(a2 - 20);
    int v12 = (__n128 *)(a2 - 40);
    int v13 = (__n128 *)(a2 - 60);
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = a2 - v14;
          uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 2);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(void *)(a2 - 8) < *(void *)(v14 + 12))
                {
                  int v212 = *(_DWORD *)(v14 + 16);
                  __n128 v181 = *(__n128 *)v14;
                  long long v94 = *(_OWORD *)(a2 - 20);
                  *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
                  *(_OWORD *)unint64_t v14 = v94;
                  *(_DWORD *)(a2 - 4) = v212;
                  *(__n128 *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v181;
                }
                return;
              case 3:
                uint64_t v95 = (__n128 *)(v14 + 20);
                uint64_t v96 = *(void *)(v14 + 32);
                uint64_t v97 = *(void *)(a2 - 8);
                if (v96 >= *(void *)(v14 + 12))
                {
                  if (v97 < v96)
                  {
                    __n128 v147 = *v95;
                    int v148 = *(_DWORD *)(v14 + 36);
                    int v149 = *(_DWORD *)(a2 - 4);
                    *uint64_t v95 = *v11;
                    *(_DWORD *)(v14 + 36) = v149;
                    *(_DWORD *)(a2 - 4) = v148;
                    *int v11 = v147;
                    if (*(void *)(v14 + 32) < *(void *)(v14 + 12))
                    {
                      int v216 = *(_DWORD *)(v14 + 16);
                      __n128 v187 = *(__n128 *)v14;
                      *(__n128 *)unint64_t v14 = *v95;
                      *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 36);
                      *uint64_t v95 = v187;
                      *(_DWORD *)(v14 + 36) = v216;
                    }
                  }
                }
                else
                {
                  if (v97 >= v96)
                  {
                    int v217 = *(_DWORD *)(v14 + 16);
                    __n128 v189 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v95;
                    *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 36);
                    *uint64_t v95 = v189;
                    *(_DWORD *)(v14 + 36) = v217;
                    if (*(void *)(a2 - 8) >= *(void *)(v14 + 32)) {
                      return;
                    }
                    __n128 v99 = *v95;
                    int v154 = *(_DWORD *)(v14 + 36);
                    int v155 = *(_DWORD *)(a2 - 4);
                    *uint64_t v95 = *v11;
                    *(_DWORD *)(v14 + 36) = v155;
                    *(_DWORD *)(a2 - 4) = v154;
                  }
                  else
                  {
                    int v213 = *(_DWORD *)(v14 + 16);
                    __n128 v182 = *(__n128 *)v14;
                    __n128 v98 = *v11;
                    *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
                    *(__n128 *)unint64_t v14 = v98;
                    __n128 v99 = v182;
                    *(_DWORD *)(a2 - 4) = v213;
                  }
                  *int v11 = v99;
                }
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(v14, v14 + 20, v14 + 40, a2 - 20, a5);
                return;
              case 5:
                __n128 v100 = (__n128 *)(v14 + 20);
                __n128 v101 = (__n128 *)(v14 + 40);
                unint64_t v102 = (long long *)(v14 + 60);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(v14, v14 + 20, v14 + 40, v14 + 60, a5);
                if (*(void *)(a2 - 8) < *(void *)(v14 + 72))
                {
                  long long v103 = *v102;
                  int v104 = *(_DWORD *)(v14 + 76);
                  int v105 = *(_DWORD *)(a2 - 4);
                  *unint64_t v102 = *(_OWORD *)(a2 - 20);
                  *(_DWORD *)(v14 + 76) = v105;
                  *(_DWORD *)(a2 - 4) = v104;
                  *(_OWORD *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v103;
                  if (*(void *)(v14 + 72) < *(void *)(v14 + 52))
                  {
                    int v106 = *(_DWORD *)(v14 + 56);
                    __n128 v107 = *v101;
                    *__n128 v101 = (__n128)*v102;
                    *(_DWORD *)(v14 + 56) = *(_DWORD *)(v14 + 76);
                    *unint64_t v102 = (__int128)v107;
                    *(_DWORD *)(v14 + 76) = v106;
                    if (*(void *)(v14 + 52) < *(void *)(v14 + 32))
                    {
                      int v108 = *(_DWORD *)(v14 + 36);
                      __n128 v109 = *v100;
                      *__n128 v100 = *v101;
                      *(_DWORD *)(v14 + 36) = *(_DWORD *)(v14 + 56);
                      *__n128 v101 = v109;
                      *(_DWORD *)(v14 + 56) = v108;
                      if (*(void *)(v14 + 32) < *(void *)(v14 + 12))
                      {
                        int v214 = *(_DWORD *)(v14 + 16);
                        __n128 v183 = *(__n128 *)v14;
                        *(__n128 *)unint64_t v14 = *v100;
                        *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 36);
                        *__n128 v100 = v183;
                        *(_DWORD *)(v14 + 36) = v214;
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v15 <= 479)
          {
            unint64_t v110 = v14 + 20;
            BOOL v112 = v14 == a2 || v110 == a2;
            if (a4)
            {
              if (!v112)
              {
                uint64_t v113 = 0;
                unint64_t v114 = v14;
                do
                {
                  uint64_t v116 = *(void *)(v114 + 32);
                  uint64_t v117 = *(void *)(v114 + 12);
                  unint64_t v114 = v110;
                  if (v116 < v117)
                  {
                    int v190 = *(_DWORD *)(v110 + 8);
                    uint64_t v184 = *(void *)v110;
                    uint64_t v118 = v113;
                    do
                    {
                      uint64_t v119 = v14 + v118;
                      *(_OWORD *)(v119 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(_OWORD *)(v14 + v118);
                      *(_DWORD *)(v119 + 36) = *(_DWORD *)(v14 + v118 + 16);
                      if (!v118)
                      {
                        uint64_t v115 = v14;
                        goto LABEL_122;
                      }
                      v118 -= 20;
                    }
                    while (v116 < *(void *)(v119 - 8));
                    uint64_t v115 = v14 + v118 + 20;
LABEL_122:
                    *(_DWORD *)(v115 + 8) = v190;
                    *(void *)uint64_t v115 = v184;
                    *(void *)(v115 + 12) = v116;
                  }
                  unint64_t v110 = v114 + 20;
                  v113 += 20;
                }
                while (v114 + 20 != a2);
              }
            }
            else if (!v112)
            {
              do
              {
                uint64_t v150 = *(void *)(a1 + 32);
                uint64_t v151 = *(void *)(a1 + 12);
                a1 = v110;
                if (v150 < v151)
                {
                  int v192 = *(_DWORD *)(v110 + 8);
                  uint64_t v188 = *(void *)v110;
                  unint64_t v152 = v110;
                  do
                  {
                    *(_OWORD *)unint64_t v152 = *(_OWORD *)(v152 - 20);
                    *(_DWORD *)(v152 + 16) = *(_DWORD *)(v152 - 4);
                    uint64_t v153 = *(void *)(v152 - 28);
                    v152 -= 20;
                  }
                  while (v150 < v153);
                  *(_DWORD *)(v152 + 8) = v192;
                  *(void *)unint64_t v152 = v188;
                  *(void *)(v152 + 12) = v150;
                }
                unint64_t v110 = a1 + 20;
              }
              while (a1 + 20 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v14 != a2)
            {
              int64_t v120 = (unint64_t)(v16 - 2) >> 1;
              int64_t v121 = v120;
              do
              {
                if (v120 >= v121)
                {
                  uint64_t v123 = (2 * v121) | 1;
                  unint64_t v124 = v14 + 20 * v123;
                  if (2 * v121 + 2 < v16)
                  {
                    BOOL v122 = *(void *)(v124 + 12) < *(void *)(v124 + 32);
                    v124 += 20 * v122;
                    if (v122) {
                      uint64_t v123 = 2 * v121 + 2;
                    }
                  }
                  unint64_t v125 = v14 + 20 * v121;
                  uint64_t v126 = *(void *)(v125 + 12);
                  if (*(void *)(v124 + 12) >= v126)
                  {
                    int v191 = *(_DWORD *)(v125 + 8);
                    uint64_t v185 = *(void *)v125;
                    do
                    {
                      unint64_t v127 = v125;
                      unint64_t v125 = v124;
                      long long v128 = *(_OWORD *)v124;
                      *(_DWORD *)(v127 + 16) = *(_DWORD *)(v124 + 16);
                      *(_OWORD *)unint64_t v127 = v128;
                      if (v120 < v123) {
                        break;
                      }
                      uint64_t v129 = (2 * v123) | 1;
                      unint64_t v124 = v14 + 20 * v129;
                      uint64_t v130 = 2 * v123 + 2;
                      if (v130 < v16)
                      {
                        BOOL v122 = *(void *)(v124 + 12) < *(void *)(v124 + 32);
                        v124 += 20 * v122;
                        if (v122) {
                          uint64_t v129 = v130;
                        }
                      }
                      uint64_t v123 = v129;
                    }
                    while (*(void *)(v124 + 12) >= v126);
                    *(_DWORD *)(v125 + 8) = v191;
                    *(void *)unint64_t v125 = v185;
                    *(void *)(v125 + 12) = v126;
                  }
                }
                BOOL v122 = v121-- <= 0;
              }
              while (!v122);
              int64_t v131 = v15 / 0x14uLL;
              do
              {
                uint64_t v132 = 0;
                int v215 = *(_DWORD *)(v14 + 16);
                __n128 v186 = *(__n128 *)v14;
                unint64_t v133 = v14;
                do
                {
                  uint64_t v135 = v133 + 20 * v132 + 20;
                  uint64_t v136 = (2 * v132) | 1;
                  uint64_t v137 = 2 * v132 + 2;
                  if (v137 < v131)
                  {
                    uint64_t v138 = *(void *)(v135 + 12);
                    uint64_t v139 = *(void *)(v135 + 32);
                    v135 += 20 * (v138 < v139);
                    if (v138 < v139) {
                      uint64_t v136 = v137;
                    }
                  }
                  long long v134 = *(_OWORD *)v135;
                  *(_DWORD *)(v133 + 16) = *(_DWORD *)(v135 + 16);
                  *(_OWORD *)unint64_t v133 = v134;
                  unint64_t v133 = v135;
                  uint64_t v132 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
                a2 -= 20;
                if (v135 == a2)
                {
                  *(_DWORD *)(v135 + 16) = v215;
                  *(__n128 *)uint64_t v135 = v186;
                }
                else
                {
                  long long v140 = *(_OWORD *)a2;
                  *(_DWORD *)(v135 + 16) = *(_DWORD *)(a2 + 16);
                  *(_OWORD *)uint64_t v135 = v140;
                  *(_DWORD *)(a2 + 16) = v215;
                  *(__n128 *)a2 = v186;
                  uint64_t v141 = v135 - v14 + 20;
                  if (v141 >= 21)
                  {
                    unint64_t v142 = (v141 / 0x14uLL - 2) >> 1;
                    uint64_t v143 = v14 + 20 * v142;
                    uint64_t v144 = *(void *)(v135 + 12);
                    if (*(void *)(v143 + 12) < v144)
                    {
                      int v161 = *(_DWORD *)(v135 + 8);
                      uint64_t v158 = *(void *)v135;
                      do
                      {
                        uint64_t v145 = v135;
                        uint64_t v135 = v143;
                        long long v146 = *(_OWORD *)v143;
                        *(_DWORD *)(v145 + 16) = *(_DWORD *)(v143 + 16);
                        *(_OWORD *)uint64_t v145 = v146;
                        if (!v142) {
                          break;
                        }
                        unint64_t v142 = (v142 - 1) >> 1;
                        uint64_t v143 = v14 + 20 * v142;
                      }
                      while (*(void *)(v143 + 12) < v144);
                      *(_DWORD *)(v135 + 8) = v161;
                      *(void *)uint64_t v135 = v158;
                      *(void *)(v135 + 12) = v144;
                    }
                  }
                }
                BOOL v122 = v131-- <= 2;
              }
              while (!v122);
            }
            return;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          unint64_t v18 = v14 + 20 * ((unint64_t)v16 >> 1);
          uint64_t v19 = *(void *)(a2 - 8);
          if ((unint64_t)v15 >= 0xA01) {
            break;
          }
          uint64_t v22 = *(void *)(v14 + 12);
          if (v22 < *(void *)(v18 + 12))
          {
            if (v19 >= v22)
            {
              int v201 = *(_DWORD *)(v18 + 16);
              __n128 v170 = *(__n128 *)v18;
              __n128 v42 = *(__n128 *)v14;
              *(_DWORD *)(v18 + 16) = *(_DWORD *)(v14 + 16);
              *(__n128 *)unint64_t v18 = v42;
              a5 = v170;
              *(_DWORD *)(v14 + 16) = v201;
              *(__n128 *)unint64_t v14 = v170;
              if (*(void *)(a2 - 8) >= *(void *)(v14 + 12)) {
                goto LABEL_32;
              }
              int v194 = *(_DWORD *)(v14 + 16);
              __n128 v163 = *(__n128 *)v14;
              __n128 v43 = *v11;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)unint64_t v14 = v43;
            }
            else
            {
              int v194 = *(_DWORD *)(v18 + 16);
              __n128 v163 = *(__n128 *)v18;
              __n128 v23 = *v11;
              *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)unint64_t v18 = v23;
            }
            a5 = v163;
            *(_DWORD *)(a2 - 4) = v194;
            *int v11 = v163;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v19 >= v22) {
            goto LABEL_32;
          }
          int v197 = *(_DWORD *)(v14 + 16);
          __n128 v166 = *(__n128 *)v14;
          __n128 v26 = *v11;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
          *(__n128 *)unint64_t v14 = v26;
          a5 = v166;
          *(_DWORD *)(a2 - 4) = v197;
          *int v11 = v166;
          if (*(void *)(v14 + 12) >= *(void *)(v18 + 12)) {
            goto LABEL_32;
          }
          int v198 = *(_DWORD *)(v18 + 16);
          __n128 v167 = *(__n128 *)v18;
          __n128 v27 = *(__n128 *)v14;
          *(_DWORD *)(v18 + 16) = *(_DWORD *)(v14 + 16);
          *(__n128 *)unint64_t v18 = v27;
          a5 = v167;
          *(_DWORD *)(v14 + 16) = v198;
          *(__n128 *)unint64_t v14 = v167;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          uint64_t v44 = *(void *)(v14 + 12);
          if (*(void *)(v14 - 8) < v44) {
            goto LABEL_57;
          }
          int v160 = *(_DWORD *)(v14 + 8);
          unint64_t v157 = *(void *)v14;
          if (v44 < *(void *)(a2 - 8))
          {
            unint64_t v83 = v14;
            do
            {
              unint64_t v14 = v83 + 20;
              uint64_t v84 = *(void *)(v83 + 32);
              v83 += 20;
            }
            while (v44 >= v84);
          }
          else
          {
            unint64_t v85 = v14 + 20;
            do
            {
              unint64_t v14 = v85;
              if (v85 >= a2) {
                break;
              }
              uint64_t v86 = *(void *)(v85 + 12);
              v85 += 20;
            }
            while (v44 >= v86);
          }
          unint64_t v87 = a2;
          if (v14 < a2)
          {
            unint64_t v88 = a2;
            do
            {
              unint64_t v87 = v88 - 20;
              uint64_t v89 = *(void *)(v88 - 8);
              v88 -= 20;
            }
            while (v44 < v89);
          }
          while (v14 < v87)
          {
            int v211 = *(_DWORD *)(v14 + 16);
            __n128 v180 = *(__n128 *)v14;
            __n128 v90 = *(__n128 *)v87;
            *(_DWORD *)(v14 + 16) = *(_DWORD *)(v87 + 16);
            *(__n128 *)unint64_t v14 = v90;
            a5 = v180;
            *(_DWORD *)(v87 + 16) = v211;
            *(__n128 *)unint64_t v87 = v180;
            do
            {
              uint64_t v91 = *(void *)(v14 + 32);
              v14 += 20;
            }
            while (v44 >= v91);
            do
            {
              uint64_t v92 = *(void *)(v87 - 8);
              v87 -= 20;
            }
            while (v44 < v92);
          }
          __n128 v93 = (__n128 *)(v14 - 20);
          BOOL v5 = v14 - 20 >= a1;
          BOOL v6 = v14 - 20 == a1;
          if (v14 - 20 != a1)
          {
            a5 = *v93;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v14 - 4);
            *(__n128 *)a1 = a5;
          }
          a4 = 0;
          *(_DWORD *)(v14 - 12) = v160;
          v93->n128_u64[0] = v157;
          *(void *)(v14 - 8) = v44;
        }
        uint64_t v20 = *(void *)(v18 + 12);
        if (v20 >= *(void *)(v14 + 12))
        {
          if (v19 < v20)
          {
            int v195 = *(_DWORD *)(v18 + 16);
            __n128 v164 = *(__n128 *)v18;
            __n128 v24 = *v11;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)unint64_t v18 = v24;
            *(_DWORD *)(a2 - 4) = v195;
            *int v11 = v164;
            if (*(void *)(v18 + 12) < *(void *)(v14 + 12))
            {
              int v196 = *(_DWORD *)(v14 + 16);
              __n128 v165 = *(__n128 *)v14;
              __n128 v25 = *(__n128 *)v18;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(v18 + 16);
              *(__n128 *)unint64_t v14 = v25;
              *(_DWORD *)(v18 + 16) = v196;
              *(__n128 *)unint64_t v18 = v165;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            int v199 = *(_DWORD *)(v14 + 16);
            __n128 v168 = *(__n128 *)v14;
            __n128 v28 = *(__n128 *)v18;
            *(_DWORD *)(v14 + 16) = *(_DWORD *)(v18 + 16);
            *(__n128 *)unint64_t v14 = v28;
            *(_DWORD *)(v18 + 16) = v199;
            *(__n128 *)unint64_t v18 = v168;
            if (*(void *)(a2 - 8) >= *(void *)(v18 + 12)) {
              goto LABEL_23;
            }
            int v193 = *(_DWORD *)(v18 + 16);
            __n128 v162 = *(__n128 *)v18;
            __n128 v29 = *v11;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)unint64_t v18 = v29;
          }
          else
          {
            int v193 = *(_DWORD *)(v14 + 16);
            __n128 v162 = *(__n128 *)v14;
            __n128 v21 = *v11;
            *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)unint64_t v14 = v21;
          }
          *(_DWORD *)(a2 - 4) = v193;
          *int v11 = v162;
        }
LABEL_23:
        int v30 = (__n128 *)(v14 + 20);
        unint64_t v31 = v14 + 20 * v17;
        unint64_t v32 = v31 - 20;
        uint64_t v33 = *(void *)(v31 - 8);
        uint64_t v34 = *(void *)(a2 - 28);
        if (v33 >= *(void *)(v14 + 32))
        {
          if (v34 < v33)
          {
            int v200 = *(_DWORD *)(v32 + 16);
            __n128 v169 = *(__n128 *)v32;
            __n128 v38 = *v12;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(a2 - 24);
            *(__n128 *)unint64_t v32 = v38;
            *(_DWORD *)(a2 - 24) = v200;
            *int v12 = v169;
            if (*(void *)(v32 + 12) < *(void *)(v14 + 32))
            {
              __n128 v39 = *v30;
              int v40 = *(_DWORD *)(v14 + 36);
              int v41 = *(_DWORD *)(v32 + 16);
              *int v30 = *(__n128 *)v32;
              *(_DWORD *)(v14 + 36) = v41;
              *(_DWORD *)(v32 + 16) = v40;
              *(__n128 *)unint64_t v32 = v39;
            }
          }
        }
        else
        {
          if (v34 >= v33)
          {
            __n128 v45 = *v30;
            int v46 = *(_DWORD *)(v14 + 36);
            int v47 = *(_DWORD *)(v32 + 16);
            *int v30 = *(__n128 *)v32;
            *(_DWORD *)(v14 + 36) = v47;
            *(_DWORD *)(v32 + 16) = v46;
            *(__n128 *)unint64_t v32 = v45;
            if (*(void *)(a2 - 28) >= *(void *)(v32 + 12)) {
              goto LABEL_37;
            }
            int v202 = *(_DWORD *)(v32 + 16);
            __n128 v171 = *(__n128 *)v32;
            __n128 v48 = *v12;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(a2 - 24);
            *(__n128 *)unint64_t v32 = v48;
            __n128 v35 = v171;
            *(_DWORD *)(a2 - 24) = v202;
          }
          else
          {
            __n128 v35 = *v30;
            int v36 = *(_DWORD *)(v14 + 36);
            int v37 = *(_DWORD *)(a2 - 24);
            *int v30 = *v12;
            *(_DWORD *)(v14 + 36) = v37;
            *(_DWORD *)(a2 - 24) = v36;
          }
          *int v12 = v35;
        }
LABEL_37:
        int v49 = (__n128 *)(v14 + 40);
        unint64_t v50 = v14 + 20 * v17;
        unint64_t v51 = v50 + 20;
        uint64_t v52 = *(void *)(v50 + 32);
        uint64_t v53 = *(void *)(a2 - 48);
        if (v52 >= *(void *)(v14 + 52))
        {
          if (v53 < v52)
          {
            int v203 = *(_DWORD *)(v51 + 16);
            __n128 v172 = *(__n128 *)v51;
            __n128 v57 = *v13;
            *(_DWORD *)(v51 + 16) = *(_DWORD *)(a2 - 44);
            *(__n128 *)unint64_t v51 = v57;
            *(_DWORD *)(a2 - 44) = v203;
            *int v13 = v172;
            if (*(void *)(v51 + 12) < *(void *)(v14 + 52))
            {
              __n128 v58 = *v49;
              int v59 = *(_DWORD *)(v14 + 56);
              int v60 = *(_DWORD *)(v51 + 16);
              *int v49 = *(__n128 *)v51;
              *(_DWORD *)(v14 + 56) = v60;
              *(_DWORD *)(v51 + 16) = v59;
              *(__n128 *)unint64_t v51 = v58;
            }
          }
        }
        else
        {
          if (v53 >= v52)
          {
            __n128 v61 = *v49;
            int v62 = *(_DWORD *)(v14 + 56);
            int v63 = *(_DWORD *)(v51 + 16);
            *int v49 = *(__n128 *)v51;
            *(_DWORD *)(v14 + 56) = v63;
            *(_DWORD *)(v51 + 16) = v62;
            *(__n128 *)unint64_t v51 = v61;
            if (*(void *)(a2 - 48) >= *(void *)(v51 + 12)) {
              goto LABEL_46;
            }
            int v204 = *(_DWORD *)(v51 + 16);
            __n128 v173 = *(__n128 *)v51;
            __n128 v64 = *v13;
            *(_DWORD *)(v51 + 16) = *(_DWORD *)(a2 - 44);
            *(__n128 *)unint64_t v51 = v64;
            __n128 v54 = v173;
            *(_DWORD *)(a2 - 44) = v204;
          }
          else
          {
            __n128 v54 = *v49;
            int v55 = *(_DWORD *)(v14 + 56);
            int v56 = *(_DWORD *)(a2 - 44);
            *int v49 = *v13;
            *(_DWORD *)(v14 + 56) = v56;
            *(_DWORD *)(a2 - 44) = v55;
          }
          *int v13 = v54;
        }
LABEL_46:
        uint64_t v65 = *(void *)(v18 + 12);
        uint64_t v66 = *(void *)(v51 + 12);
        if (v65 >= *(void *)(v32 + 12))
        {
          if (v66 < v65)
          {
            int v206 = *(_DWORD *)(v18 + 16);
            __n128 v175 = *(__n128 *)v18;
            *(_OWORD *)unint64_t v18 = *(_OWORD *)v51;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(v51 + 16);
            *(_DWORD *)(v51 + 16) = v206;
            *(__n128 *)unint64_t v51 = v175;
            if (*(void *)(v18 + 12) < *(void *)(v32 + 12))
            {
              int v207 = *(_DWORD *)(v32 + 16);
              __n128 v176 = *(__n128 *)v32;
              *(_OWORD *)unint64_t v32 = *(_OWORD *)v18;
              *(_DWORD *)(v32 + 16) = *(_DWORD *)(v18 + 16);
              *(_DWORD *)(v18 + 16) = v207;
              *(__n128 *)unint64_t v18 = v176;
            }
          }
        }
        else
        {
          if (v66 >= v65)
          {
            int v208 = *(_DWORD *)(v32 + 16);
            __n128 v177 = *(__n128 *)v32;
            *(_OWORD *)unint64_t v32 = *(_OWORD *)v18;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(v18 + 16);
            *(_DWORD *)(v18 + 16) = v208;
            *(__n128 *)unint64_t v18 = v177;
            if (*(void *)(v51 + 12) >= *(void *)(v18 + 12)) {
              goto LABEL_55;
            }
            int v205 = *(_DWORD *)(v18 + 16);
            __n128 v174 = *(__n128 *)v18;
            *(_OWORD *)unint64_t v18 = *(_OWORD *)v51;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(v51 + 16);
          }
          else
          {
            int v205 = *(_DWORD *)(v32 + 16);
            __n128 v174 = *(__n128 *)v32;
            *(_OWORD *)unint64_t v32 = *(_OWORD *)v51;
            *(_DWORD *)(v32 + 16) = *(_DWORD *)(v51 + 16);
          }
          *(_DWORD *)(v51 + 16) = v205;
          *(__n128 *)unint64_t v51 = v174;
        }
LABEL_55:
        int v209 = *(_DWORD *)(v14 + 16);
        __n128 v178 = *(__n128 *)v14;
        __n128 v67 = *(__n128 *)v18;
        *(_DWORD *)(v14 + 16) = *(_DWORD *)(v18 + 16);
        *(__n128 *)unint64_t v14 = v67;
        a5 = v178;
        *(_DWORD *)(v18 + 16) = v209;
        *(__n128 *)unint64_t v18 = v178;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        uint64_t v44 = *(void *)(v14 + 12);
LABEL_57:
        uint64_t v68 = 0;
        int v159 = *(_DWORD *)(v14 + 8);
        unint64_t v156 = *(void *)v14;
        do
        {
          uint64_t v69 = *(void *)(v14 + v68 + 32);
          v68 += 20;
        }
        while (v69 < v44);
        unint64_t v70 = v14 + v68;
        unint64_t v71 = a2;
        if (v68 == 20)
        {
          unint64_t v74 = a2;
          while (v70 < v74)
          {
            unint64_t v72 = v74 - 20;
            uint64_t v75 = *(void *)(v74 - 8);
            v74 -= 20;
            if (v75 < v44) {
              goto LABEL_65;
            }
          }
          unint64_t v72 = v74;
          unint64_t v14 = v70;
        }
        else
        {
          do
          {
            unint64_t v72 = v71 - 20;
            uint64_t v73 = *(void *)(v71 - 8);
            v71 -= 20;
          }
          while (v73 >= v44);
LABEL_65:
          unint64_t v14 = v70;
          if (v70 < v72)
          {
            unint64_t v76 = v72;
            do
            {
              int v210 = *(_DWORD *)(v14 + 16);
              __n128 v179 = *(__n128 *)v14;
              __n128 v77 = *(__n128 *)v76;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(v76 + 16);
              *(__n128 *)unint64_t v14 = v77;
              a5 = v179;
              *(_DWORD *)(v76 + 16) = v210;
              *(__n128 *)unint64_t v76 = v179;
              do
              {
                uint64_t v78 = *(void *)(v14 + 32);
                v14 += 20;
              }
              while (v78 < v44);
              do
              {
                uint64_t v79 = *(void *)(v76 - 8);
                v76 -= 20;
              }
              while (v79 >= v44);
            }
            while (v14 < v76);
          }
        }
        uint64_t v80 = (__n128 *)(v14 - 20);
        if (v14 - 20 != a1)
        {
          a5 = *v80;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v14 - 4);
          *(__n128 *)a1 = a5;
        }
        *(_DWORD *)(v14 - 12) = v159;
        v80->n128_u64[0] = v156;
        *(void *)(v14 - 8) = v44;
        if (v70 >= v72) {
          break;
        }
LABEL_76:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*,false>(a1, v14 - 20, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v81 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(a1, v14 - 20, a5);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(v14, a2, v82))
      {
        break;
      }
      if (!v81) {
        goto LABEL_76;
      }
    }
    a2 = v14 - 20;
    if (!v81) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 8) < *(void *)(a1 + 12))
      {
        int v7 = *(_DWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        int v9 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      int v10 = (long long *)(a1 + 20);
      int v11 = (long long *)(a2 - 20);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a2 - 8);
      if (v12 >= *(void *)(a1 + 12))
      {
        if (v13 < v12)
        {
          int v36 = *(_DWORD *)(a1 + 36);
          long long v37 = *v10;
          int v38 = *(_DWORD *)(a2 - 4);
          *int v10 = *v11;
          *(_DWORD *)(a1 + 36) = v38;
          *int v11 = v37;
          *(_DWORD *)(a2 - 4) = v36;
          if (*(void *)(a1 + 32) < *(void *)(a1 + 12))
          {
            int v39 = *(_DWORD *)(a1 + 16);
            long long v40 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *int v10 = v40;
            *(_DWORD *)(a1 + 36) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        int v45 = *(_DWORD *)(a1 + 16);
        long long v46 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *int v10 = v46;
        *(_DWORD *)(a1 + 36) = v45;
        if (*(void *)(a2 - 8) < *(void *)(a1 + 32))
        {
          int v47 = *(_DWORD *)(a1 + 36);
          long long v48 = *v10;
          int v49 = *(_DWORD *)(a2 - 4);
          *int v10 = *v11;
          *(_DWORD *)(a1 + 36) = v49;
          *int v11 = v48;
          *(_DWORD *)(a2 - 4) = v47;
        }
      }
      else
      {
        int v14 = *(_DWORD *)(a1 + 16);
        long long v15 = *(_OWORD *)a1;
        int v16 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *int v11 = v15;
        *(_DWORD *)(a2 - 4) = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(a1, a1 + 20, a1 + 40, a2 - 20, a3);
      return 1;
    case 5uLL:
      __n128 v24 = (long long *)(a1 + 20);
      __n128 v25 = (long long *)(a1 + 40);
      __n128 v26 = (long long *)(a1 + 60);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(a1, a1 + 20, a1 + 40, a1 + 60, a3);
      if (*(void *)(a2 - 8) < *(void *)(a1 + 72))
      {
        int v27 = *(_DWORD *)(a1 + 76);
        long long v28 = *v26;
        int v29 = *(_DWORD *)(a2 - 4);
        *__n128 v26 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 76) = v29;
        *(_OWORD *)(a2 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v28;
        *(_DWORD *)(a2 - 4) = v27;
        if (*(void *)(a1 + 72) < *(void *)(a1 + 52))
        {
          int v30 = *(_DWORD *)(a1 + 56);
          long long v31 = *v25;
          *__n128 v25 = *v26;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *__n128 v26 = v31;
          *(_DWORD *)(a1 + 76) = v30;
          if (*(void *)(a1 + 52) < *(void *)(a1 + 32))
          {
            int v32 = *(_DWORD *)(a1 + 36);
            long long v33 = *v24;
            long long *v24 = *v25;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *__n128 v25 = v33;
            *(_DWORD *)(a1 + 56) = v32;
            if (*(void *)(a1 + 32) < *(void *)(a1 + 12))
            {
              int v34 = *(_DWORD *)(a1 + 16);
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              long long *v24 = v35;
              *(_DWORD *)(a1 + 36) = v34;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v17 = a1 + 40;
      unint64_t v18 = (long long *)(a1 + 20);
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 12);
      uint64_t v21 = *(void *)(a1 + 52);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          int v41 = *(_DWORD *)(a1 + 36);
          long long v42 = *v18;
          *unint64_t v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)uint64_t v17 = v42;
          *(_DWORD *)(a1 + 56) = v41;
          if (*(void *)(a1 + 32) < v20)
          {
            int v43 = *(_DWORD *)(a1 + 16);
            long long v44 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *unint64_t v18 = v44;
            *(_DWORD *)(a1 + 36) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        int v50 = *(_DWORD *)(a1 + 16);
        long long v51 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *unint64_t v18 = v51;
        *(_DWORD *)(a1 + 36) = v50;
        if (v21 < *(void *)(a1 + 32))
        {
          int v52 = *(_DWORD *)(a1 + 36);
          long long v53 = *v18;
          *unint64_t v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)uint64_t v17 = v53;
          *(_DWORD *)(a1 + 56) = v52;
        }
      }
      else
      {
        int v22 = *(_DWORD *)(a1 + 16);
        long long v23 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 56);
        *(_OWORD *)uint64_t v17 = v23;
        *(_DWORD *)(a1 + 56) = v22;
      }
      uint64_t v54 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v55 = 0;
      int v56 = 0;
      break;
  }
  while (1)
  {
    uint64_t v58 = *(void *)(v54 + 12);
    if (v58 < *(void *)(v17 + 12))
    {
      uint64_t v61 = *(void *)v54;
      int v62 = *(_DWORD *)(v54 + 8);
      uint64_t v59 = v55;
      do
      {
        uint64_t v60 = a1 + v59;
        *(_OWORD *)(v60 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = *(_OWORD *)(a1 + v59 + 40);
        *(_DWORD *)(v60 + 76) = *(_DWORD *)(a1 + v59 + 56);
        if (v59 == -40)
        {
          uint64_t v57 = a1;
          goto LABEL_30;
        }
        v59 -= 20;
      }
      while (v58 < *(void *)(v60 + 32));
      uint64_t v57 = a1 + v59 + 60;
LABEL_30:
      *(void *)uint64_t v57 = v61;
      *(_DWORD *)(v57 + 8) = v62;
      *(void *)(v57 + 12) = v58;
      if (++v56 == 8) {
        return v54 + 20 == a2;
      }
    }
    uint64_t v17 = v54;
    v55 += 20;
    v54 += 20;
    if (v54 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5 = *(void *)(a2 + 12);
  uint64_t v6 = *(void *)(a3 + 12);
  if (v5 >= *(void *)(a1 + 12))
  {
    if (v6 < v5)
    {
      int v9 = *(_DWORD *)(a2 + 16);
      BOOL result = *(__n128 *)a2;
      int v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v10;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v9;
      if (*(void *)(a2 + 12) < *(void *)(a1 + 12))
      {
        int v11 = *(_DWORD *)(a1 + 16);
        BOOL result = *(__n128 *)a1;
        int v12 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v12;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      int v7 = *(_DWORD *)(a1 + 16);
      BOOL result = *(__n128 *)a1;
      int v8 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v7;
      goto LABEL_10;
    }
    int v13 = *(_DWORD *)(a1 + 16);
    BOOL result = *(__n128 *)a1;
    int v14 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = v14;
    *(__n128 *)a2 = result;
    *(_DWORD *)(a2 + 16) = v13;
    if (*(void *)(a3 + 12) < *(void *)(a2 + 12))
    {
      int v7 = *(_DWORD *)(a2 + 16);
      BOOL result = *(__n128 *)a2;
      int v15 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)(a4 + 12) < *(void *)(a3 + 12))
  {
    int v16 = *(_DWORD *)(a3 + 16);
    BOOL result = *(__n128 *)a3;
    int v17 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v17;
    *(__n128 *)a4 = result;
    *(_DWORD *)(a4 + 16) = v16;
    if (*(void *)(a3 + 12) < *(void *)(a2 + 12))
    {
      int v18 = *(_DWORD *)(a2 + 16);
      BOOL result = *(__n128 *)a2;
      int v19 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v19;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v18;
      if (*(void *)(a2 + 12) < *(void *)(a1 + 12))
      {
        int v20 = *(_DWORD *)(a1 + 16);
        BOOL result = *(__n128 *)a1;
        int v21 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v21;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v20;
      }
    }
  }
  return result;
}

void absl::lts_2020_02_25::Status::~Status(absl::lts_2020_02_25::Status *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    absl::lts_2020_02_25::Status::UnrefNonInlined(v1);
  }
}

void google::MakeCheckOpString<long long,int>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CBB283C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstance(std::string **a1, google::protobuf::Arena *this, long long *a3)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  int v7 = AlignedAndAddCleanup;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v8;
  }
  *a1 = v7;
}

void sub_23CBB2958(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearBooleanConstraint>::Merge(const operations_research::sat::LinearBooleanConstraint *a1, operations_research::sat::LinearBooleanConstraint *a2)
{
}

void google::MakeCheckOpString<unsigned long,int>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CBB2A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  int v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  int v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  int v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    __n128 v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      int v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      int v20 = *a1;
      int v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  __n128 v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 16 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          long long v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(void *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CBB3104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_BooleanAssignment_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  qword_26AEE1818 = 0;
  unk_26AEE1820 = 0;
  operations_research::sat::_BooleanAssignment_default_instance_ = (uint64_t)&unk_26F0BD980;
  qword_26AEE1828 = 0;
  dword_26AEE1830 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_BooleanAssignment_default_instance_, v4);
}

void InitDefaultsscc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::_LinearBooleanConstraint_default_instance_ = (uint64_t)&unk_26F0BD820;
  unk_26AEE1BF0 = 0;
  xmmword_26AEE1BF8 = 0u;
  unk_26AEE1C08 = 0u;
  qword_26AEE1C18 = 0;
  if (atomic_load_explicit(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto, memory_order_acquire))
  {
    google::protobuf::internal::InitSCCImpl(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
  }
  qword_26AEE1C28 = 0;
  unk_26AEE1C30 = 0;
  qword_26AEE1C20 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearBooleanConstraint_default_instance_, v4);
}

void sub_23CBB325C(_Unwind_Exception *a1)
{
}

void InitDefaultsscc_info_LinearBooleanProblem_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::LinearBooleanProblem::LinearBooleanProblem((operations_research::sat::LinearBooleanProblem *)&operations_research::sat::_LinearBooleanProblem_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearBooleanProblem_default_instance_, v4);
  qword_26AEE1928 = (uint64_t)&operations_research::sat::_LinearObjective_default_instance_;
  unk_26AEE1930 = &operations_research::sat::_BooleanAssignment_default_instance_;
}

void InitDefaultsscc_info_LinearObjective_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::_LinearObjective_default_instance_ = (uint64_t)&unk_26F0BD8D0;
  unk_26AEE1640 = 0;
  xmmword_26AEE1648 = 0u;
  unk_26AEE1658 = 0u;
  xmmword_26AEE1668 = 0u;
  qword_26AEE1678 = 0x3FF0000000000000;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearObjective_default_instance_, v4);
}

void operations_research::sat::LinearBooleanConstraint::~LinearBooleanConstraint(operations_research::sat::LinearBooleanConstraint *this)
{
  uint64_t v2 = *((void *)this + 7);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      int8x16_t v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        int8x16_t v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(void *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x23ECF2BC0](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 24);
}

{
  uint64_t vars8;

  operations_research::sat::LinearBooleanConstraint::~LinearBooleanConstraint(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::LinearBooleanConstraint::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::LinearBooleanConstraint::Clear(operations_research::sat::LinearBooleanConstraint *this)
{
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 1) == 0)
  {
LABEL_4:
    if ((v1 & 6) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *((void *)this + 7);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_4;
  }
  **(unsigned char **)uint64_t v2 = 0;
  *(void *)(v2 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  if ((v1 & 6) != 0)
  {
LABEL_5:
    *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    *((void *)this + 9) = 0;
  }
LABEL_6:
  *((_DWORD *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 1) != 0 && *(void *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v3 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

unsigned __int8 *operations_research::sat::LinearBooleanConstraint::_InternalParse(operations_research::sat::LinearBooleanConstraint *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8 = 0;
  int v39 = (unint64_t *)((char *)this + 8);
  int8x16_t v9 = (std::string **)((char *)this + 56);
  uint64_t v10 = (unsigned int *)((char *)this + 40);
  int8x16_t v11 = (unsigned int *)((char *)this + 24);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)
        || (a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23)), (v37 & 1) != 0))
      {
        uint64_t TagFallback = (unsigned __int8 *)a2;
        goto LABEL_77;
      }
    }
    uint64_t TagFallback = (unsigned __int8 *)a2 + 1;
    unsigned int v16 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
    {
      unsigned int v17 = (v16 >> 3) - 1;
      goto LABEL_8;
    }
    unsigned int v23 = v16 + (*TagFallback << 7);
    unsigned int v16 = v23 - 128;
    if ((char)*TagFallback < 0) {
      break;
    }
    uint64_t TagFallback = (unsigned __int8 *)a2 + 2;
    unsigned int v17 = (v16 >> 3) - 1;
    if (v17 > 4) {
      goto LABEL_56;
    }
LABEL_8:
    switch(v17)
    {
      case 0u:
        if (v16 == 8)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback - 1);
          while (1)
          {
            int v18 = *((unsigned __int8 *)a2 + 1);
            if (*((char *)a2 + 1) < 0) {
              break;
            }
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
            uint64_t v19 = *((unsigned int *)this + 6);
            int v20 = v19 + 1;
            if (v19 == *((_DWORD *)this + 7)) {
              goto LABEL_13;
            }
LABEL_14:
            *(_DWORD *)(*((void *)this + 4) + 4 * v19) = v18;
            *((_DWORD *)this + 6) = v20;
            if (!a2) {
              goto LABEL_76;
            }
            if (*(void *)a3 <= (unint64_t)a2 || *(unsigned char *)a2 != 8) {
              goto LABEL_5;
            }
          }
          int v21 = v18 + (*((unsigned __int8 *)a2 + 2) << 7);
          int v18 = v21 - 128;
          if (*((char *)a2 + 2) < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v21 - 128));
            int v18 = v22;
            uint64_t v19 = *((unsigned int *)this + 6);
            int v20 = v19 + 1;
            if (v19 != *((_DWORD *)this + 7)) {
              goto LABEL_14;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            uint64_t v19 = *((unsigned int *)this + 6);
            int v20 = v19 + 1;
            if (v19 != *((_DWORD *)this + 7)) {
              goto LABEL_14;
            }
          }
LABEL_13:
          google::protobuf::RepeatedField<int>::Reserve(v11, v20);
          goto LABEL_14;
        }
        if (v16 != 10) {
          goto LABEL_56;
        }
        unint64_t v14 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v11, TagFallback, a3, a4);
        break;
      case 1u:
        if (v16 == 16)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback - 1);
          while (1)
          {
            uint64_t v24 = *((unsigned __int8 *)a2 + 1);
            if (*((char *)a2 + 1) < 0) {
              break;
            }
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
            uint64_t v25 = *((unsigned int *)this + 10);
            int v26 = v25 + 1;
            if (v25 == *((_DWORD *)this + 11)) {
              goto LABEL_30;
            }
LABEL_31:
            *(void *)(*((void *)this + 6) + 8 * v25) = v24;
            *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v26;
            if (!a2) {
              goto LABEL_76;
            }
            if (*(void *)a3 <= (unint64_t)a2 || *(unsigned char *)a2 != 16) {
              goto LABEL_5;
            }
          }
          int v27 = v24 + (*((unsigned __int8 *)a2 + 2) << 7);
          uint64_t v24 = (v27 - 128);
          if (*((char *)a2 + 2) < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v27 - 128));
            uint64_t v24 = v28;
            uint64_t v25 = *((unsigned int *)this + 10);
            int v26 = v25 + 1;
            if (v25 != *((_DWORD *)this + 11)) {
              goto LABEL_31;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            uint64_t v25 = *((unsigned int *)this + 10);
            int v26 = v25 + 1;
            if (v25 != *((_DWORD *)this + 11)) {
              goto LABEL_31;
            }
          }
LABEL_30:
          google::protobuf::RepeatedField<long long>::Reserve(v10, v26);
          goto LABEL_31;
        }
        if (v16 != 18) {
          goto LABEL_56;
        }
        unint64_t v14 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt64Parser((google::protobuf::internal *)v10, TagFallback, a3, a4);
        break;
      case 2u:
        if (v16 != 24) {
          goto LABEL_56;
        }
        v8 |= 2u;
        a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 1);
        uint64_t v29 = (const char *)*TagFallback;
        if (((char)*TagFallback & 0x80000000) == 0) {
          goto LABEL_44;
        }
        uint64_t v29 = (const char *)(v29 + (*(unsigned __int8 *)a2 << 7) - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v29);
          *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v35;
          if (!a2) {
            goto LABEL_76;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 2);
LABEL_44:
          *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v29;
        }
        continue;
      case 3u:
        if (v16 != 32) {
          goto LABEL_56;
        }
        v8 |= 4u;
        a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 1);
        uint64_t v30 = (const char *)*TagFallback;
        if (((char)*TagFallback & 0x80000000) == 0) {
          goto LABEL_49;
        }
        uint64_t v30 = (const char *)(v30 + (*(unsigned __int8 *)a2 << 7) - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v30);
          *((void *)this + 9) = v36;
          if (!a2)
          {
LABEL_76:
            uint64_t TagFallback = 0;
            goto LABEL_77;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 2);
LABEL_49:
          *((void *)this + 9) = v30;
        }
        continue;
      case 4u:
        if (v16 != 42) {
          goto LABEL_56;
        }
        *((_DWORD *)this + 4) |= 1u;
        uint64_t v31 = *((void *)this + 1);
        int8x16_t v12 = (google::protobuf::Arena *)(v31 & 0xFFFFFFFFFFFFFFFELL);
        if (v31)
        {
          int8x16_t v12 = *(google::protobuf::Arena **)v12;
          uint64_t v13 = *v9;
          if (*v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t v13 = *v9;
          if (*v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_3;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v9, v12, (long long *)&google::protobuf::internal::fixed_address_empty_string);
        uint64_t v13 = *v9;
LABEL_3:
        unint64_t v14 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        break;
      default:
        goto LABEL_56;
    }
LABEL_4:
    a2 = v14;
    if (!v14) {
      goto LABEL_76;
    }
  }
  uint64_t TagFallback = (unsigned __int8 *)google::protobuf::internal::ReadTagFallback(a2, (const char *)(v23 - 128));
  if (!TagFallback) {
    goto LABEL_77;
  }
  unsigned int v16 = v32;
  unsigned int v17 = (v32 >> 3) - 1;
  if (v17 <= 4) {
    goto LABEL_8;
  }
LABEL_56:
  if (v16) {
    BOOL v33 = (v16 & 7) == 4;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33)
  {
    if (*v39) {
      int v34 = (char *)((*v39 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v34 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v39);
    }
    unint64_t v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v16, (google::protobuf::UnknownFieldSet *)v34, (google::protobuf::UnknownFieldSet *)TagFallback, (const char *)a3, a5);
    goto LABEL_4;
  }
  *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = v16 - 1;
LABEL_77:
  *((_DWORD *)this + 4) |= v8;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearBooleanConstraint::_InternalSerialize(operations_research::sat::LinearBooleanConstraint *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v6 = *((unsigned int *)this + 6);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        unint64_t v8 = *(int *)(*((void *)this + 4) + 4 * i);
        *(unsigned char *)a2 = 8;
        if (v8 > 0x7F)
        {
LABEL_7:
          *((unsigned char *)a2 + 1) = v8 | 0x80;
          unint64_t v9 = v8 >> 7;
          if (v8 >> 14)
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            do
            {
              *((unsigned char *)a2 - 1) = v9 | 0x80;
              unint64_t v10 = v9 >> 7;
              a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
              unint64_t v11 = v9 >> 14;
              v9 >>= 7;
            }
            while (v11);
            *((unsigned char *)a2 - 1) = v10;
          }
          else
          {
            *((unsigned char *)a2 + 2) = v9;
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          }
          continue;
        }
      }
      else
      {
        unint64_t v8 = *(int *)(*((void *)this + 4) + 4 * i);
        *(unsigned char *)a2 = 8;
        if (v8 > 0x7F) {
          goto LABEL_7;
        }
      }
      *((unsigned char *)a2 + 1) = v8;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  uint64_t v12 = *((unsigned int *)this + 10);
  if ((int)v12 >= 1)
  {
    for (uint64_t j = 0; j != v12; ++j)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        unint64_t v14 = *(void *)(*((void *)this + 6) + 8 * j);
        *(unsigned char *)a2 = 16;
        if (v14 > 0x7F)
        {
LABEL_20:
          *((unsigned char *)a2 + 1) = v14 | 0x80;
          unint64_t v15 = v14 >> 7;
          if (v14 >> 14)
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            do
            {
              *((unsigned char *)a2 - 1) = v15 | 0x80;
              unint64_t v16 = v15 >> 7;
              a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
              unint64_t v17 = v15 >> 14;
              v15 >>= 7;
            }
            while (v17);
            *((unsigned char *)a2 - 1) = v16;
          }
          else
          {
            *((unsigned char *)a2 + 2) = v15;
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          }
          continue;
        }
      }
      else
      {
        unint64_t v14 = *(void *)(*((void *)this + 6) + 8 * j);
        *(unsigned char *)a2 = 16;
        if (v14 > 0x7F) {
          goto LABEL_20;
        }
      }
      *((unsigned char *)a2 + 1) = v14;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  int v18 = *((_DWORD *)this + 4);
  if ((v18 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unint64_t v21 = *((void *)this + 8);
      *(unsigned char *)a2 = 24;
      if (v21 <= 0x7F)
      {
LABEL_34:
        *((unsigned char *)a2 + 1) = v21;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        if ((v18 & 4) != 0) {
          goto LABEL_43;
        }
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v21 = *((void *)this + 8);
      *(unsigned char *)a2 = 24;
      if (v21 <= 0x7F) {
        goto LABEL_34;
      }
    }
    *((unsigned char *)a2 + 1) = v21 | 0x80;
    unint64_t v22 = v21 >> 7;
    if (v21 >> 14)
    {
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      do
      {
        *((unsigned char *)a2 - 1) = v22 | 0x80;
        unint64_t v23 = v22 >> 7;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
        unint64_t v24 = v22 >> 14;
        v22 >>= 7;
      }
      while (v24);
      *((unsigned char *)a2 - 1) = v23;
      if ((v18 & 4) != 0) {
        goto LABEL_43;
      }
    }
    else
    {
      *((unsigned char *)a2 + 2) = v22;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      if ((v18 & 4) != 0) {
        goto LABEL_43;
      }
    }
LABEL_29:
    if ((v18 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_54:
    uint64_t v29 = *((void *)this + 7);
    if (*(char *)(v29 + 23) < 0)
    {
      int64_t v30 = *(void *)(v29 + 8);
      if (v30 > 127)
      {
LABEL_65:
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 5, v29, (char *)a2);
        uint64_t v19 = *((void *)this + 1);
        if ((v19 & 1) == 0) {
          return a2;
        }
        goto LABEL_62;
      }
    }
    else
    {
      int64_t v30 = *(unsigned __int8 *)(v29 + 23);
    }
    if (*(void *)a3 - (void)a2 + 14 >= v30)
    {
      *(unsigned char *)a2 = 42;
      uint64_t v31 = (char *)a2 + 2;
      *((unsigned char *)a2 + 1) = v30;
      if (*(char *)(v29 + 23) >= 0) {
        unsigned int v32 = (const void *)v29;
      }
      else {
        unsigned int v32 = *(const void **)v29;
      }
      memcpy((char *)a2 + 2, v32, v30);
      a2 = (google::protobuf::UnknownFieldSet *)&v31[v30];
      uint64_t v19 = *((void *)this + 1);
      if ((v19 & 1) == 0) {
        return a2;
      }
      goto LABEL_62;
    }
    goto LABEL_65;
  }
  if ((v18 & 4) == 0) {
    goto LABEL_29;
  }
LABEL_43:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    unint64_t v25 = *((void *)this + 9);
    *(unsigned char *)a2 = 32;
    if (v25 <= 0x7F)
    {
LABEL_45:
      *((unsigned char *)a2 + 1) = v25;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      if (v18) {
        goto LABEL_54;
      }
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v25 = *((void *)this + 9);
    *(unsigned char *)a2 = 32;
    if (v25 <= 0x7F) {
      goto LABEL_45;
    }
  }
  *((unsigned char *)a2 + 1) = v25 | 0x80;
  unint64_t v26 = v25 >> 7;
  if (v25 >> 14)
  {
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
    do
    {
      *((unsigned char *)a2 - 1) = v26 | 0x80;
      unint64_t v27 = v26 >> 7;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      unint64_t v28 = v26 >> 14;
      v26 >>= 7;
    }
    while (v28);
    *((unsigned char *)a2 - 1) = v27;
    if (v18) {
      goto LABEL_54;
    }
  }
  else
  {
    *((unsigned char *)a2 + 2) = v26;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
    if (v18) {
      goto LABEL_54;
    }
  }
LABEL_30:
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 1) == 0) {
    return a2;
  }
LABEL_62:

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a2);
}

char *operations_research::sat::LinearBooleanConstraint::ByteSizeLong(operations_research::sat::LinearBooleanConstraint *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 6);
  uint64_t v3 = *((unsigned int *)this + 6);
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)(v2
                                                 + google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10)
                                                 + v3
                                                 + *((unsigned int *)this + 10));
  int v5 = *((_DWORD *)this + 4);
  if ((v5 & 7) != 0)
  {
    if (v5)
    {
      uint64_t v7 = *((void *)this + 7);
      uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v9 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = v8;
      }
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1);
      if ((v5 & 2) == 0)
      {
LABEL_4:
        if ((v5 & 4) == 0) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_4;
    }
    uint64_t v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4
                                                   + ((9 * (__clz(*((void *)this + 8) | 1) ^ 0x3F) + 73) >> 6)
                                                   + 1);
    if ((v5 & 4) != 0) {
LABEL_5:
    }
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4
                                                     + ((9 * (__clz(*((void *)this + 9) | 1) ^ 0x3F) + 73) >> 6)
                                                     + 1);
  }
LABEL_6:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearBooleanConstraint *)((char *)this + 8), v4, (_DWORD *)this + 5);
  }
  else
  {
    *((_DWORD *)this + 5) = v4;
    return (char *)v4;
  }
}

void operations_research::sat::LinearBooleanConstraint::MergeFrom(operations_research::sat::LinearBooleanConstraint *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::LinearBooleanConstraint::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::LinearBooleanConstraint::MergeFrom(operations_research::sat::LinearBooleanConstraint *this, const operations_research::sat::LinearBooleanConstraint *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)((char *)this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9)
  {
    uint64_t v10 = *((int *)this + 6);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 6, v10 + v9);
    uint64_t v11 = *((void *)this + 4);
    *((_DWORD *)this + 6) += *((_DWORD *)a2 + 6);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 4), 4 * *((int *)a2 + 6));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    uint64_t v14 = *((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 4);
  if ((v15 & 7) != 0)
  {
    if ((v15 & 1) == 0)
    {
      if ((v15 & 2) == 0) {
        goto LABEL_12;
      }
LABEL_23:
      *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *((void *)a2 + 8);
      if ((v15 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    unint64_t v16 = (std::string *)*((void *)a2 + 7);
    *((_DWORD *)this + 4) |= 1u;
    unint64_t v17 = (std::string **)((char *)this + 56);
    uint64_t v18 = *((void *)this + 1);
    uint64_t v19 = (google::protobuf::Arena *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18)
    {
      uint64_t v19 = *(google::protobuf::Arena **)v19;
      int v20 = *v17;
      if (*v17 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_18:
        std::string::operator=(v20, v16);
        if ((v15 & 2) != 0) {
          goto LABEL_23;
        }
LABEL_12:
        if ((v15 & 4) == 0)
        {
LABEL_14:
          *((_DWORD *)this + 4) |= v15;
          return;
        }
LABEL_13:
        *((void *)this + 9) = *((void *)a2 + 9);
        goto LABEL_14;
      }
    }
    else
    {
      int v20 = *v17;
      if (*v17 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_18;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, v19, (long long *)v16);
    if ((v15 & 2) != 0) {
      goto LABEL_23;
    }
    goto LABEL_12;
  }
}

void operations_research::sat::LinearBooleanConstraint::CopyFrom(operations_research::sat::LinearBooleanConstraint *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this) {
    return;
  }
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0) = 0;
  int v4 = *((_DWORD *)this + 4);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 6) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v5 = *((void *)this + 7);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)uint64_t v5 = 0;
  *(void *)(v5 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  if ((v4 & 6) != 0)
  {
LABEL_6:
    *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    *((void *)this + 9) = 0;
  }
LABEL_7:
  *((_DWORD *)this + 4) = 0;
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 1) != 0 && *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
  if (v7)
  {
    operations_research::sat::LinearBooleanConstraint::MergeFrom(this, v7);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v8);
  }
}

uint64_t operations_research::sat::LinearBooleanConstraint::IsInitialized(operations_research::sat::LinearBooleanConstraint *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearBooleanConstraint::GetMetadata(operations_research::sat::LinearBooleanConstraint *this)
{
  return *off_26AED0B08;
}

void operations_research::sat::LinearObjective::~LinearObjective(operations_research::sat::LinearObjective *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 24);
}

{
  uint64_t vars8;

  operations_research::sat::LinearObjective::~LinearObjective(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::LinearObjective::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::LinearObjective::Clear(operations_research::sat::LinearObjective *this)
{
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  if ((*((unsigned char *)this + 16) & 3) != 0) {
    *(_OWORD *)((char *)this + 56) = xmmword_23CE80760;
  }
  *((_DWORD *)this + 4) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearObjective::_InternalParse(operations_research::sat::LinearObjective *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8 = 0;
  uint64_t v35 = (unint64_t *)((char *)this + 8);
  uint64_t v36 = (char *)this + 64;
  int v9 = (char *)this + 56;
  uint64_t v10 = (unsigned int *)((char *)this + 40);
  uint64_t v11 = (unsigned int *)((char *)this + 24);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
        goto LABEL_61;
      }
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
      if (v33) {
        goto LABEL_61;
      }
    }
    uint64_t v14 = (unsigned __int8 *)a2 + 1;
    unsigned int v15 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    unsigned int v16 = v15 + (*v14 << 7);
    unsigned int v15 = v16 - 128;
    if (((char)*v14 & 0x80000000) == 0)
    {
      uint64_t v14 = (unsigned __int8 *)a2 + 2;
LABEL_9:
      unsigned int v17 = (v15 >> 3) - 1;
      goto LABEL_10;
    }
    uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v16 - 128));
    if (!TagFallback)
    {
      a2 = 0;
      goto LABEL_61;
    }
    uint64_t v14 = (unsigned __int8 *)TagFallback;
    unsigned int v15 = v29;
    unsigned int v17 = (v29 >> 3) - 1;
    if (v17 > 3) {
      break;
    }
LABEL_10:
    switch(v17)
    {
      case 0u:
        if (v15 == 8)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 - 1);
          while (1)
          {
            int v18 = *((unsigned __int8 *)a2 + 1);
            if ((*((char *)a2 + 1) & 0x80000000) == 0) {
              break;
            }
            int v21 = v18 + (*((unsigned __int8 *)a2 + 2) << 7);
            int v18 = v21 - 128;
            if (*((char *)a2 + 2) < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v21 - 128));
              int v18 = v22;
              uint64_t v19 = *((unsigned int *)this + 6);
              int v20 = v19 + 1;
              if (v19 != *((_DWORD *)this + 7)) {
                goto LABEL_19;
              }
LABEL_18:
              google::protobuf::RepeatedField<int>::Reserve(v11, v20);
              goto LABEL_19;
            }
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            uint64_t v19 = *((unsigned int *)this + 6);
            int v20 = v19 + 1;
            if (v19 == *((_DWORD *)this + 7)) {
              goto LABEL_18;
            }
LABEL_19:
            *(_DWORD *)(*((void *)this + 4) + 4 * v19) = v18;
            *((_DWORD *)this + 6) = v20;
            if (!a2) {
              goto LABEL_61;
            }
            if (*(void *)a3 <= (unint64_t)a2 || *(unsigned char *)a2 != 8) {
              goto LABEL_5;
            }
          }
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
          uint64_t v19 = *((unsigned int *)this + 6);
          int v20 = v19 + 1;
          if (v19 != *((_DWORD *)this + 7)) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        if (v15 != 10) {
          goto LABEL_43;
        }
        unsigned int v32 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v11, v14, a3, a4);
        break;
      case 1u:
        if (v15 == 16)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 - 1);
          while (1)
          {
            uint64_t v23 = *((unsigned __int8 *)a2 + 1);
            if ((*((char *)a2 + 1) & 0x80000000) == 0) {
              break;
            }
            int v26 = v23 + (*((unsigned __int8 *)a2 + 2) << 7);
            uint64_t v23 = (v26 - 128);
            if (*((char *)a2 + 2) < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v26 - 128));
              uint64_t v23 = v27;
              uint64_t v24 = *((unsigned int *)this + 10);
              int v25 = v24 + 1;
              if (v24 != *((_DWORD *)this + 11)) {
                goto LABEL_33;
              }
LABEL_32:
              google::protobuf::RepeatedField<long long>::Reserve(v10, v25);
              goto LABEL_33;
            }
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            uint64_t v24 = *((unsigned int *)this + 10);
            int v25 = v24 + 1;
            if (v24 == *((_DWORD *)this + 11)) {
              goto LABEL_32;
            }
LABEL_33:
            *(void *)(*((void *)this + 6) + 8 * v24) = v23;
            *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v25;
            if (!a2) {
              goto LABEL_61;
            }
            if (*(void *)a3 <= (unint64_t)a2 || *(unsigned char *)a2 != 16) {
              goto LABEL_5;
            }
          }
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
          uint64_t v24 = *((unsigned int *)this + 10);
          int v25 = v24 + 1;
          if (v24 != *((_DWORD *)this + 11)) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        if (v15 != 18) {
          goto LABEL_43;
        }
        unsigned int v32 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt64Parser((google::protobuf::internal *)v10, v14, a3, a4);
        break;
      case 2u:
        if (v15 != 25) {
          goto LABEL_43;
        }
        int v12 = 1;
        uint64_t v13 = v9;
        goto LABEL_4;
      case 3u:
        if (v15 != 33) {
          goto LABEL_43;
        }
        int v12 = 2;
        uint64_t v13 = v36;
LABEL_4:
        v8 |= v12;
        *uint64_t v13 = *(void *)v14;
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
        continue;
      default:
        goto LABEL_43;
    }
LABEL_50:
    a2 = v32;
    if (!v32) {
      goto LABEL_61;
    }
  }
LABEL_43:
  if (v15) {
    BOOL v30 = (v15 & 7) == 4;
  }
  else {
    BOOL v30 = 1;
  }
  if (!v30)
  {
    if (*v35) {
      uint64_t v31 = (char *)((*v35 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v31 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v35);
    }
    unsigned int v32 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v31, (google::protobuf::UnknownFieldSet *)v14, (const char *)a3, a5);
    goto LABEL_50;
  }
  *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v15 - 1;
  a2 = (google::protobuf::UnknownFieldSet *)v14;
LABEL_61:
  *((_DWORD *)this + 4) |= v8;
  return a2;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearObjective::_InternalSerialize(operations_research::sat::LinearObjective *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v6 = *((unsigned int *)this + 6);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        unint64_t v8 = *(int *)(*((void *)this + 4) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F)
        {
LABEL_7:
          a2[1] = v8 | 0x80;
          unint64_t v9 = v8 >> 7;
          if (v8 >> 14)
          {
            a2 += 3;
            do
            {
              *(a2 - 1) = v9 | 0x80;
              unint64_t v10 = v9 >> 7;
              ++a2;
              unint64_t v11 = v9 >> 14;
              v9 >>= 7;
            }
            while (v11);
            *(a2 - 1) = v10;
          }
          else
          {
            a2[2] = v9;
            a2 += 3;
          }
          continue;
        }
      }
      else
      {
        unint64_t v8 = *(int *)(*((void *)this + 4) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F) {
          goto LABEL_7;
        }
      }
      a2[1] = v8;
      a2 += 2;
    }
  }
  uint64_t v12 = *((unsigned int *)this + 10);
  if ((int)v12 >= 1)
  {
    for (uint64_t j = 0; j != v12; ++j)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        unint64_t v14 = *(void *)(*((void *)this + 6) + 8 * j);
        *a2 = 16;
        if (v14 > 0x7F)
        {
LABEL_20:
          a2[1] = v14 | 0x80;
          unint64_t v15 = v14 >> 7;
          if (v14 >> 14)
          {
            a2 += 3;
            do
            {
              *(a2 - 1) = v15 | 0x80;
              unint64_t v16 = v15 >> 7;
              ++a2;
              unint64_t v17 = v15 >> 14;
              v15 >>= 7;
            }
            while (v17);
            *(a2 - 1) = v16;
          }
          else
          {
            a2[2] = v15;
            a2 += 3;
          }
          continue;
        }
      }
      else
      {
        unint64_t v14 = *(void *)(*((void *)this + 6) + 8 * j);
        *a2 = 16;
        if (v14 > 0x7F) {
          goto LABEL_20;
        }
      }
      a2[1] = v14;
      a2 += 2;
    }
  }
  int v18 = *((_DWORD *)this + 4);
  if ((v18 & 1) == 0)
  {
    if ((v18 & 2) == 0) {
      goto LABEL_29;
    }
LABEL_34:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v22 = *((void *)this + 8);
    *a2 = 33;
    *(void *)(a2 + 1) = v22;
    a2 += 9;
    uint64_t v19 = *((void *)this + 1);
    if ((v19 & 1) == 0) {
      return (const google::protobuf::UnknownFieldSet *)a2;
    }
    goto LABEL_37;
  }
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v21 = *((void *)this + 7);
  *a2 = 25;
  *(void *)(a2 + 1) = v21;
  a2 += 9;
  if ((v18 & 2) != 0) {
    goto LABEL_34;
  }
LABEL_29:
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
LABEL_37:

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::LinearObjective::ByteSizeLong(operations_research::sat::LinearObjective *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 6);
  uint64_t v3 = *((unsigned int *)this + 6);
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  int v5 = *((_DWORD *)this + 4);
  uint64_t v6 = v2 + v4 + v3 + *((unsigned int *)this + 10) + 9;
  if ((v5 & 1) == 0) {
    uint64_t v6 = v2 + v4 + v3 + *((unsigned int *)this + 10);
  }
  if ((v5 & 2) != 0) {
    v6 += 9;
  }
  if ((v5 & 3) != 0) {
    uint64_t v7 = (const google::protobuf::UnknownFieldSet *)v6;
  }
  else {
    uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v2 + v4 + v3 + *((unsigned int *)this + 10));
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearObjective *)((char *)this + 8), v7, (_DWORD *)this + 5);
  }
  else
  {
    *((_DWORD *)this + 5) = v7;
    return (char *)v7;
  }
}

void operations_research::sat::LinearObjective::MergeFrom(operations_research::sat::LinearObjective *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::LinearObjective::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::LinearObjective::MergeFrom(uint64_t this, const operations_research::sat::LinearObjective *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      unint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 24);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 24), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 32);
    *(_DWORD *)(v3 + 24) += *((_DWORD *)a2 + 6);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 4), 4 * *((int *)a2 + 6));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 4);
  if ((v15 & 3) != 0)
  {
    if (v15) {
      *(void *)(v3 + 56) = *((void *)a2 + 7);
    }
    if ((v15 & 2) != 0) {
      *(void *)(v3 + 64) = *((void *)a2 + 8);
    }
    *(_DWORD *)(v3 + 16) |= v15;
  }
  return this;
}

void operations_research::sat::LinearObjective::CopyFrom(operations_research::sat::LinearObjective *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 6) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
    if ((*((unsigned char *)this + 16) & 3) != 0) {
      *(_OWORD *)((char *)this + 56) = xmmword_23CE80760;
    }
    *((_DWORD *)this + 4) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::LinearObjective::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::LinearObjective::IsInitialized(operations_research::sat::LinearObjective *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearObjective::GetMetadata(operations_research::sat::LinearObjective *this)
{
  return off_26AED0B08[2];
}

void operations_research::sat::BooleanAssignment::~BooleanAssignment(operations_research::sat::BooleanAssignment *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::BooleanAssignment::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void operations_research::sat::BooleanAssignment::Clear(operations_research::sat::BooleanAssignment *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::BooleanAssignment::_InternalParse(operations_research::sat::BooleanAssignment *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)a2 >= *(void *)a3)
      {
        if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
          return a2;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
        if (v22) {
          return a2;
        }
      }
      uint64_t v10 = (unsigned __int8 *)a2 + 1;
      unsigned int v11 = *(unsigned __int8 *)a2;
      if ((*(char *)a2 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v12 = v11 + (*v10 << 7);
      unsigned int v11 = v12 - 128;
      if (((char)*v10 & 0x80000000) == 0)
      {
        uint64_t v10 = (unsigned __int8 *)a2 + 2;
LABEL_6:
        if ((v11 & 0xFFFFFFF8) != 8) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v12 - 128));
      if (!TagFallback) {
        return 0;
      }
      uint64_t v10 = (unsigned __int8 *)TagFallback;
      unsigned int v11 = v19;
      if ((v19 & 0xFFFFFFF8) != 8) {
        break;
      }
LABEL_7:
      if (v11 == 8)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v10 - 1);
        while (1)
        {
          int v13 = *((unsigned __int8 *)a2 + 1);
          if ((*((char *)a2 + 1) & 0x80000000) == 0) {
            break;
          }
          int v16 = v13 + (*((unsigned __int8 *)a2 + 2) << 7);
          int v13 = v16 - 128;
          if (*((char *)a2 + 2) < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v16 - 128));
            int v13 = v17;
            uint64_t v14 = *((unsigned int *)this + 4);
            int v15 = v14 + 1;
            if (v14 != *((_DWORD *)this + 5)) {
              goto LABEL_15;
            }
LABEL_14:
            google::protobuf::RepeatedField<int>::Reserve(v9, v15);
            goto LABEL_15;
          }
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          uint64_t v14 = *((unsigned int *)this + 4);
          int v15 = v14 + 1;
          if (v14 == *((_DWORD *)this + 5)) {
            goto LABEL_14;
          }
LABEL_15:
          *(_DWORD *)(*((void *)this + 3) + 4 * v14) = v13;
          *((_DWORD *)this + 4) = v15;
          if (!a2) {
            return a2;
          }
          if (*(void *)a3 <= (unint64_t)a2 || *(unsigned char *)a2 != 8) {
            goto LABEL_2;
          }
        }
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        uint64_t v14 = *((unsigned int *)this + 4);
        int v15 = v14 + 1;
        if (v14 != *((_DWORD *)this + 5)) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      if (v11 != 10) {
        break;
      }
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v9, v10, a3, a4);
      if (!a2) {
        return a2;
      }
    }
    if (!v11 || (v11 & 7) == 4) {
      break;
    }
    if (*v8) {
      uint64_t v21 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v21 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
    }
    a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, (google::protobuf::UnknownFieldSet *)v21, (google::protobuf::UnknownFieldSet *)v10, (const char *)a3, a5);
    if (!a2) {
      return a2;
    }
  }
  *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v11 - 1;
  return (google::protobuf::UnknownFieldSet *)v10;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::BooleanAssignment::_InternalSerialize(operations_research::sat::BooleanAssignment *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v6 = *((unsigned int *)this + 4);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        unint64_t v8 = *(int *)(*((void *)this + 3) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F)
        {
LABEL_7:
          a2[1] = v8 | 0x80;
          unint64_t v9 = v8 >> 7;
          if (v8 >> 14)
          {
            a2 += 3;
            do
            {
              *(a2 - 1) = v9 | 0x80;
              unint64_t v10 = v9 >> 7;
              ++a2;
              unint64_t v11 = v9 >> 14;
              v9 >>= 7;
            }
            while (v11);
            *(a2 - 1) = v10;
          }
          else
          {
            a2[2] = v9;
            a2 += 3;
          }
          continue;
        }
      }
      else
      {
        unint64_t v8 = *(int *)(*((void *)this + 3) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F) {
          goto LABEL_7;
        }
      }
      a2[1] = v8;
      a2 += 2;
    }
  }
  uint64_t v12 = *((void *)this + 1);
  if ((v12 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::BooleanAssignment::ByteSizeLong(operations_research::sat::BooleanAssignment *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)(google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4)
                                                 + *((unsigned int *)this + 4));
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::BooleanAssignment *)((char *)this + 8), v2, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v2;
    return (char *)v2;
  }
}

void operations_research::sat::BooleanAssignment::MergeFrom(operations_research::sat::BooleanAssignment *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      unint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = *((_DWORD *)v6 + 4);
    if (v11)
    {
      uint64_t v13 = *((int *)this + 4);
      uint64_t v12 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v12, v13 + v11);
      uint64_t v14 = *((void *)v12 + 1);
      *v12 += *((_DWORD *)v6 + 4);
      int v15 = (void *)(v14 + 4 * v13);
      int v16 = (const void *)v6[3];
      size_t v17 = 4 * *((int *)v6 + 4);
      memcpy(v15, v16, v17);
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::BooleanAssignment::CopyFrom(operations_research::sat::BooleanAssignment *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::BooleanAssignment::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::BooleanAssignment::IsInitialized(operations_research::sat::BooleanAssignment *this)
{
  return 1;
}

uint64_t operations_research::sat::BooleanAssignment::GetMetadata(operations_research::sat::BooleanAssignment *this)
{
  return off_26AED0B08[4];
}

operations_research::sat::LinearBooleanProblem *operations_research::sat::LinearBooleanProblem::LinearBooleanProblem(operations_research::sat::LinearBooleanProblem *this, google::protobuf::Arena *a2)
{
  *(void *)this = &unk_26F0BDA30;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = 0;
  *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  if (atomic_load_explicit(scc_info_LinearBooleanProblem_ortools_2fsat_2fBOOLean_5fproblem_2eproto, memory_order_acquire))
  {
    google::protobuf::internal::InitSCCImpl(scc_info_LinearBooleanProblem_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  return this;
}

void sub_23CBB5484(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  uint64_t v5 = *(operations_research::sat::LinearBooleanConstraint ***)(v1 + 40);
  if (v5) {
    operations_research::sat::LinearBooleanProblem::LinearBooleanProblem((void *)(v1 + 24), v5, (operations_research::sat::LinearBooleanConstraint ***)(v1 + 40));
  }
  *(void *)(v1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearBooleanProblem::~LinearBooleanProblem(operations_research::sat::LinearBooleanConstraint ***this)
{
  operations_research::sat::LinearBooleanProblem::SharedDtor((operations_research::sat::LinearObjective *)this);
  uint64_t v2 = this[1];
  if (v2)
  {
    unint64_t v3 = (unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(this + 6);
  uint64_t v7 = this[5];
  if (v7 && !this[3])
  {
    unint64_t v8 = v7 + 1;
    uint64_t v9 = *(unsigned int *)v7;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          operations_research::sat::LinearBooleanConstraint::~LinearBooleanConstraint(*v8);
          MEMORY[0x23ECF2BC0]();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v7 = this[5];
    }
    operator delete(v7);
    this[5] = 0;
  }
  else
  {
    this[5] = 0;
  }
}

{
  uint64_t vars8;

  operations_research::sat::LinearBooleanProblem::~LinearBooleanProblem(this);

  JUMPOUT(0x23ECF2BC0);
}

operations_research::sat::LinearObjective *operations_research::sat::LinearBooleanProblem::SharedDtor(operations_research::sat::LinearObjective *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = *((void *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (operations_research::sat::LinearObjective *)MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  if ((_UNKNOWN *)v1 != &operations_research::sat::_LinearBooleanProblem_default_instance_)
  {
    this = *(operations_research::sat::LinearObjective **)(v1 + 80);
    if (this)
    {
      operations_research::sat::LinearObjective::~LinearObjective(this);
      this = (operations_research::sat::LinearObjective *)MEMORY[0x23ECF2BC0]();
    }
    uint64_t v4 = *(void *)(v1 + 88);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6 && v7 == 0)
        {
          uint64_t v9 = *(void **)(v6 + 8);
          if (v9 != *(void **)(v6 + 16))
          {
            google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v6 + 8));
            uint64_t v9 = *(void **)(v6 + 8);
          }
          if (v9)
          {
            *(void *)(v6 + 16) = v9;
            operator delete(v9);
          }
          MEMORY[0x23ECF2BC0](v6, 0x20C40DC1BFBCFLL);
        }
      }
      google::protobuf::RepeatedField<BOOL>::~RepeatedField(v4 + 16);
      JUMPOUT(0x23ECF2BC0);
    }
  }
  return this;
}

uint64_t operations_research::sat::LinearBooleanProblem::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::LinearBooleanProblem::Clear(operations_research::sat::LinearBooleanProblem *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = (uint64_t *)(*((void *)this + 5) + 8);
    while (1)
    {
      uint64_t v4 = *v3;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
      int v5 = *(_DWORD *)(v4 + 16);
      if ((v5 & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v6 = *(void *)(v4 + 56);
      if ((*(char *)(v6 + 23) & 0x80000000) == 0) {
        break;
      }
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
      if ((v5 & 6) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      *(_DWORD *)(v4 + 16) = 0;
      uint64_t v7 = *(void *)(v4 + 8);
      if ((v7 & 1) != 0
        && *(void *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v3;
      if (!--v2)
      {
        *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
        goto LABEL_15;
      }
    }
    *(unsigned char *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
LABEL_7:
    if ((v5 & 6) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 72) = 0;
    goto LABEL_9;
  }
LABEL_15:
  uint64_t v8 = *((unsigned int *)this + 14);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *((void *)this + 8) + 8;
    do
    {
      while (1)
      {
        uint64_t v10 = *(void *)v9;
        if (*(char *)(*(void *)v9 + 23) < 0) {
          break;
        }
        *(unsigned char *)uint64_t v10 = 0;
        *(unsigned char *)(v10 + 23) = 0;
        v9 += 8;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      **(unsigned char **)uint64_t v10 = 0;
      *(void *)(v10 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
      v9 += 8;
      --v8;
    }
    while (v8);
LABEL_20:
    *((_DWORD *)this + 14) = 0;
  }
  int v11 = *((_DWORD *)this + 4);
  if ((v11 & 7) != 0)
  {
    if (v11)
    {
      uint64_t v12 = *((void *)this + 9);
      if (*(char *)(v12 + 23) < 0)
      {
        **(unsigned char **)uint64_t v12 = 0;
        *(void *)(v12 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
        if ((v11 & 2) != 0) {
          goto LABEL_26;
        }
        goto LABEL_32;
      }
      *(unsigned char *)uint64_t v12 = 0;
      *(unsigned char *)(v12 + 23) = 0;
    }
    if ((v11 & 2) != 0)
    {
LABEL_26:
      uint64_t v13 = *((void *)this + 10);
      *(_DWORD *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
      if ((*(unsigned char *)(v13 + 16) & 3) != 0) {
        *(_OWORD *)(v13 + 56) = xmmword_23CE80760;
      }
      *(_DWORD *)(v13 + 16) = 0;
      uint64_t v14 = *(void *)(v13 + 8);
      if ((v14 & 1) != 0
        && *(void *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v14 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
    }
LABEL_32:
    if ((v11 & 4) != 0)
    {
      uint64_t v15 = *((void *)this + 11);
      *(_DWORD *)(v15 + 16) = 0;
      uint64_t v16 = *(void *)(v15 + 8);
      if ((v16 & 1) != 0
        && *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v16 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
    }
  }
  if ((v11 & 0x18) != 0) {
    *((void *)this + 12) = 0;
  }
  *((_DWORD *)this + 4) = 0;
  uint64_t v17 = *((void *)this + 1);
  if ((v17 & 1) != 0 && *(void *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v17 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearBooleanProblem::_InternalParse(operations_research::sat::LinearBooleanProblem *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8 = 0;
  uint64_t v69 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (unsigned int *)((char *)this + 48);
  uint64_t v10 = (unsigned int *)((char *)this + 24);
  int v11 = (std::string **)((char *)this + 72);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)
        || (a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23)), (v67 & 1) != 0))
      {
        uint64_t TagFallback = a2;
        goto LABEL_107;
      }
    }
    uint64_t TagFallback = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
    unsigned int v15 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0) {
      break;
    }
    unsigned int v18 = v15 + (*(unsigned __int8 *)TagFallback << 7);
    unsigned int v15 = v18 - 128;
    if (*(char *)TagFallback < 0)
    {
      uint64_t TagFallback = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::ReadTagFallback(a2, (const char *)(v18 - 128));
      if (!TagFallback) {
        goto LABEL_107;
      }
      unsigned int v15 = v19;
      unsigned int v16 = (v19 >> 3) - 1;
      if (v16 <= 7) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t TagFallback = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      unsigned int v16 = (v15 >> 3) - 1;
      if (v16 <= 7) {
        goto LABEL_7;
      }
    }
LABEL_18:
    if (v15) {
      BOOL v20 = (v15 & 7) == 4;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20)
    {
      *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v15 - 1;
      goto LABEL_107;
    }
    if (*v69) {
      uint64_t v21 = (char *)((*v69 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v21 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v69);
    }
    a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v21, TagFallback, (const char *)a3, a5);
    if (!a2) {
      goto LABEL_106;
    }
  }
  unsigned int v16 = (v15 >> 3) - 1;
LABEL_7:
  switch(v16)
  {
    case 0u:
      if (v15 != 10) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v17 = *((void *)this + 1);
      uint64_t v12 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
      if (v17)
      {
        uint64_t v12 = *(google::protobuf::Arena **)v12;
        uint64_t v13 = *v11;
        if (*v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v13 = *v11;
        if (*v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_3:
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
          if (!a2) {
            goto LABEL_106;
          }
          goto LABEL_4;
        }
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, v12, (long long *)&google::protobuf::internal::fixed_address_empty_string);
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(*v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
      if (!a2) {
        goto LABEL_106;
      }
      goto LABEL_4;
    case 2u:
      if (v15 != 24) {
        goto LABEL_18;
      }
      v8 |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
      LODWORD(v22) = *(unsigned __int8 *)TagFallback;
      if ((v22 & 0x80) == 0) {
        goto LABEL_30;
      }
      char v22 = (const char *)(v22 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
        *((_DWORD *)this + 24) = v65;
        if (!a2) {
          goto LABEL_106;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 2);
LABEL_30:
        *((_DWORD *)this + 24) = v22;
      }
      goto LABEL_4;
    case 3u:
      if (v15 != 34) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback - 1);
      while (2)
      {
        uint64_t v23 = (int *)*((void *)this + 5);
        if (!v23)
        {
          int v25 = *((_DWORD *)this + 9);
LABEL_40:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v25 + 1);
          uint64_t v23 = (int *)*((void *)this + 5);
          int v25 = *v23;
LABEL_41:
          *uint64_t v23 = v25 + 1;
          int v26 = (operations_research::sat::LinearBooleanConstraint *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(*((google::protobuf::Arena **)this + 3));
          uint64_t v31 = *((void *)this + 5);
          uint64_t v32 = *((int *)this + 8);
          *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v32 + 1;
          *(void *)(v31 + 8 * v32 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v26;
          uint64_t v27 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
          unint64_t v28 = (const char *)*((unsigned __int8 *)a2 + 1);
          if (*((char *)a2 + 1) < 0) {
            goto LABEL_36;
          }
LABEL_42:
          BOOL v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
          goto LABEL_43;
        }
        uint64_t v24 = *((int *)this + 8);
        int v25 = *v23;
        if ((int)v24 >= *v23)
        {
          if (v25 != *((_DWORD *)this + 9)) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v24 + 1;
        int v26 = *(operations_research::sat::LinearBooleanConstraint **)&v23[2 * v24 + 2];
        uint64_t v27 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
        unint64_t v28 = (const char *)*((unsigned __int8 *)a2 + 1);
        if ((*((char *)a2 + 1) & 0x80000000) == 0) {
          goto LABEL_42;
        }
LABEL_36:
        uint64_t SizeFallback = google::protobuf::internal::ReadSizeFallback(v27, v28);
        if (!SizeFallback) {
          break;
        }
        BOOL v30 = (google::protobuf::UnknownFieldSet *)SizeFallback;
LABEL_43:
        uint64_t v33 = *((void *)a3 + 1);
        int v34 = v28 + v30 - v33;
        *(void *)a3 = v33 + (v34 & (v34 >> 31));
        int v35 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v34;
        LODWORD(v33) = *((_DWORD *)a3 + 22);
        BOOL v36 = __OFSUB__(v33, 1);
        LODWORD(v33) = v33 - 1;
        *((_DWORD *)a3 + 22) = v33;
        if ((int)v33 < 0 == v36)
        {
          char v37 = operations_research::sat::LinearBooleanConstraint::_InternalParse(v26, v30, a3, a4, a5);
          if (v37)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              a2 = (google::protobuf::UnknownFieldSet *)v37;
              int v38 = *((_DWORD *)a3 + 7) + v35 - v34;
              *((_DWORD *)a3 + 7) = v38;
              unint64_t v39 = *((void *)a3 + 1) + (v38 & (v38 >> 31));
              *(void *)a3 = v39;
              if (v39 <= (unint64_t)v37 || *v37 != 34) {
                goto LABEL_4;
              }
              continue;
            }
          }
        }
        break;
      }
LABEL_106:
      uint64_t TagFallback = 0;
LABEL_107:
      *((_DWORD *)this + 4) |= v8;
      return TagFallback;
    case 4u:
      if (v15 != 42) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 2u;
      long long v40 = (operations_research::sat::LinearObjective *)*((void *)this + 10);
      if (v40)
      {
        int v41 = (const char *)*(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v55 = (google::protobuf::Arena **)(*v69 & 0xFFFFFFFFFFFFFFFELL);
        if (*v69)
        {
          long long v40 = (operations_research::sat::LinearObjective *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(*v55);
          *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v40;
          int v41 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
          {
LABEL_52:
            long long v42 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
            goto LABEL_83;
          }
        }
        else
        {
          long long v40 = (operations_research::sat::LinearObjective *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>((google::protobuf::Arena *)v55);
          *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v40;
          int v41 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0) {
            goto LABEL_52;
          }
        }
      }
      uint64_t v56 = google::protobuf::internal::ReadSizeFallback(TagFallback, v41);
      if (!v56) {
        goto LABEL_106;
      }
      long long v42 = (google::protobuf::UnknownFieldSet *)v56;
LABEL_83:
      uint64_t v57 = *((void *)a3 + 1);
      int v58 = v41 + v42 - v57;
      *(void *)a3 = v57 + (v58 & (v58 >> 31));
      int v59 = *((_DWORD *)a3 + 7);
      *((_DWORD *)a3 + 7) = v58;
      LODWORD(v57) = *((_DWORD *)a3 + 22);
      BOOL v36 = __OFSUB__(v57, 1);
      LODWORD(v57) = v57 - 1;
      *((_DWORD *)a3 + 22) = v57;
      if ((int)v57 < 0 != v36) {
        goto LABEL_106;
      }
      uint64_t v60 = operations_research::sat::LinearObjective::_InternalParse(v40, v42, a3, a4, a5);
      if (!v60) {
        goto LABEL_106;
      }
      goto LABEL_92;
    case 5u:
      if (v15 != 50) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback - 1);
      break;
    case 6u:
      if (v15 != 58) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 4u;
      long long v51 = (operations_research::sat::BooleanAssignment *)*((void *)this + 11);
      if (v51)
      {
        int v52 = (const char *)*(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v61 = (google::protobuf::Arena **)(*v69 & 0xFFFFFFFFFFFFFFFELL);
        if (*v69)
        {
          long long v51 = (operations_research::sat::BooleanAssignment *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(*v61);
          *((void *)this + 11) = v51;
          int v52 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
          {
LABEL_73:
            long long v53 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
            goto LABEL_90;
          }
        }
        else
        {
          long long v51 = (operations_research::sat::BooleanAssignment *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>((google::protobuf::Arena *)v61);
          *((void *)this + 11) = v51;
          int v52 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0) {
            goto LABEL_73;
          }
        }
      }
      uint64_t v62 = google::protobuf::internal::ReadSizeFallback(TagFallback, v52);
      if (!v62) {
        goto LABEL_106;
      }
      long long v53 = (google::protobuf::UnknownFieldSet *)v62;
LABEL_90:
      uint64_t v63 = *((void *)a3 + 1);
      int v58 = v52 + v53 - v63;
      *(void *)a3 = v63 + (v58 & (v58 >> 31));
      int v59 = *((_DWORD *)a3 + 7);
      *((_DWORD *)a3 + 7) = v58;
      LODWORD(v63) = *((_DWORD *)a3 + 22);
      BOOL v36 = __OFSUB__(v63, 1);
      LODWORD(v63) = v63 - 1;
      *((_DWORD *)a3 + 22) = v63;
      if ((int)v63 < 0 != v36) {
        goto LABEL_106;
      }
      uint64_t v60 = operations_research::sat::BooleanAssignment::_InternalParse(v51, v53, a3, a4, a5);
      if (!v60) {
        goto LABEL_106;
      }
LABEL_92:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        goto LABEL_106;
      }
      a2 = v60;
      int v64 = *((_DWORD *)a3 + 7) + v59 - v58;
      *((_DWORD *)a3 + 7) = v64;
      *(void *)a3 = *((void *)a3 + 1) + (v64 & (v64 >> 31));
      goto LABEL_4;
    case 7u:
      if (v15 != 64) {
        goto LABEL_18;
      }
      v8 |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
      LODWORD(v54) = *(unsigned __int8 *)TagFallback;
      if ((v54 & 0x80) == 0) {
        goto LABEL_78;
      }
      uint64_t v54 = (const char *)(v54 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64(TagFallback, v54);
        *((_DWORD *)this + 25) = v66;
        if (!a2) {
          goto LABEL_106;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 2);
LABEL_78:
        *((_DWORD *)this + 25) = v54;
      }
      goto LABEL_4;
    default:
      goto LABEL_18;
  }
  while (1)
  {
    int v43 = (int *)*((void *)this + 8);
    if (!v43) {
      break;
    }
    uint64_t v44 = *((int *)this + 14);
    int v45 = *v43;
    if ((int)v44 >= *v43)
    {
      if (v45 == *((_DWORD *)this + 15))
      {
LABEL_60:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v45 + 1);
        int v43 = (int *)*((void *)this + 8);
        int v45 = *v43;
      }
      *int v43 = v45 + 1;
      int v47 = *(atomic_ullong **)v9;
      if (!*(void *)v9) {
        operator new();
      }
      if (v47[14]) {
      unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v47, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      uint64_t v48 = *((void *)this + 8);
      uint64_t v49 = *((int *)this + 14);
      *((_DWORD *)this + 14) = v49 + 1;
      *(void *)(v48 + 8 * v49 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = AlignedAndAddCleanup;
      goto LABEL_66;
    }
    *((_DWORD *)this + 14) = v44 + 1;
    unint64_t AlignedAndAddCleanup = *(std::string **)&v43[2 * v44 + 2];
LABEL_66:
    int v50 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, (std::string::value_type *)a2 + 1, (uint64_t)a3);
    if (!v50) {
      goto LABEL_106;
    }
    a2 = v50;
    if (*(void *)a3 <= (unint64_t)v50 || *(unsigned char *)v50 != 50) {
      goto LABEL_4;
    }
  }
  int v45 = *((_DWORD *)this + 15);
  goto LABEL_60;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearBooleanProblem::_InternalSerialize(operations_research::sat::LinearBooleanProblem *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v15 = *((void *)this + 9);
    if (*(char *)(v15 + 23) < 0)
    {
      int64_t v16 = *(void *)(v15 + 8);
      if (v16 > 127) {
        goto LABEL_27;
      }
    }
    else
    {
      int64_t v16 = *(unsigned __int8 *)(v15 + 23);
    }
    if (*(void *)a3 - (void)a2 + 14 >= v16)
    {
      *a2 = 10;
      uint64_t v17 = (unsigned __int8 *)(a2 + 2);
      a2[1] = v16;
      if (*(char *)(v15 + 23) >= 0) {
        unsigned int v18 = (const void *)v15;
      }
      else {
        unsigned int v18 = *(const void **)v15;
      }
      memcpy(v4 + 2, v18, v16);
      uint64_t v4 = (char *)&v17[v16];
      if ((v6 & 8) != 0) {
        goto LABEL_23;
      }
LABEL_3:
      int v7 = *((_DWORD *)this + 8);
      if (!v7) {
        goto LABEL_36;
      }
      goto LABEL_4;
    }
LABEL_27:
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v15, a2);
    if ((v6 & 8) != 0) {
      goto LABEL_23;
    }
    goto LABEL_3;
  }
  if ((v6 & 8) == 0) {
    goto LABEL_3;
  }
LABEL_23:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v19 = *((int *)this + 24);
    char *v4 = 24;
    if (v19 <= 0x7F)
    {
LABEL_25:
      v4[1] = v19;
      v4 += 2;
      int v7 = *((_DWORD *)this + 8);
      if (!v7) {
        goto LABEL_36;
      }
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v19 = *((int *)this + 24);
    char *v4 = 24;
    if (v19 <= 0x7F) {
      goto LABEL_25;
    }
  }
  v4[1] = v19 | 0x80;
  unint64_t v20 = v19 >> 7;
  if (v19 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v20 | 0x80;
      unint64_t v21 = v20 >> 7;
      ++v4;
      unint64_t v22 = v20 >> 14;
      v20 >>= 7;
    }
    while (v22);
    *(v4 - 1) = v21;
    int v7 = *((_DWORD *)this + 8);
    if (!v7) {
      goto LABEL_36;
    }
  }
  else
  {
    long long v4[2] = v20;
    v4 += 3;
    int v7 = *((_DWORD *)this + 8);
    if (!v7) {
      goto LABEL_36;
    }
  }
LABEL_4:
  for (int i = 0; i != v7; ++i)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    uint64_t v10 = *(operations_research::sat::LinearBooleanConstraint **)(*((void *)this + 5) + 8 * i + 8);
    char *v4 = 34;
    unsigned int v11 = *((_DWORD *)v10 + 5);
    if (v11 <= 0x7F)
    {
      v4[1] = v11;
      uint64_t v9 = (google::protobuf::UnknownFieldSet *)(v4 + 2);
    }
    else
    {
      v4[1] = v11 | 0x80;
      unsigned int v12 = v11 >> 7;
      if (v11 >> 14)
      {
        uint64_t v9 = (google::protobuf::UnknownFieldSet *)(v4 + 3);
        do
        {
          *((unsigned char *)v9 - 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          uint64_t v9 = (google::protobuf::UnknownFieldSet *)((char *)v9 + 1);
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *((unsigned char *)v9 - 1) = v13;
      }
      else
      {
        long long v4[2] = v12;
        uint64_t v9 = (google::protobuf::UnknownFieldSet *)(v4 + 3);
      }
    }
    uint64_t v4 = (char *)operations_research::sat::LinearBooleanConstraint::_InternalSerialize(v10, v9, a3);
  }
LABEL_36:
  if ((v6 & 2) == 0) {
    goto LABEL_47;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    uint64_t v23 = (operations_research::sat::LinearObjective *)*((void *)this + 10);
    char *v4 = 42;
    unsigned int v24 = *((_DWORD *)v23 + 5);
    if (v24 <= 0x7F) {
      goto LABEL_39;
    }
LABEL_41:
    v4[1] = v24 | 0x80;
    unsigned int v26 = v24 >> 7;
    if (v24 >> 14)
    {
      int v25 = v4 + 3;
      do
      {
        *(v25 - 1) = v26 | 0x80;
        unsigned int v27 = v26 >> 7;
        ++v25;
        unsigned int v28 = v26 >> 14;
        v26 >>= 7;
      }
      while (v28);
      *(v25 - 1) = v27;
    }
    else
    {
      long long v4[2] = v26;
      int v25 = v4 + 3;
    }
    goto LABEL_46;
  }
  uint64_t v23 = (operations_research::sat::LinearObjective *)*((void *)this + 10);
  char *v4 = 42;
  unsigned int v24 = *((_DWORD *)v23 + 5);
  if (v24 > 0x7F) {
    goto LABEL_41;
  }
LABEL_39:
  v4[1] = v24;
  int v25 = v4 + 2;
LABEL_46:
  uint64_t v4 = (char *)operations_research::sat::LinearObjective::_InternalSerialize(v23, v25, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
LABEL_47:
  uint64_t v29 = *((unsigned int *)this + 14);
  if ((int)v29 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 8 * v29;
    while (1)
    {
      uint64_t v32 = *(unsigned __int8 **)(*((void *)this + 8) + v30 + 8);
      if (((char)v32[23] & 0x80000000) == 0) {
        break;
      }
      int64_t v33 = *((void *)v32 + 1);
      if (v33 > 127)
      {
LABEL_57:
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 6, (uint64_t)v32, v4);
        v30 += 8;
        if (v31 == v30) {
          goto LABEL_58;
        }
      }
      else
      {
LABEL_52:
        if (*(void *)a3 - (void)v4 + 14 < v33) {
          goto LABEL_57;
        }
        char *v4 = 50;
        v4[1] = v33;
        if ((char)v32[23] < 0) {
          uint64_t v32 = *(unsigned __int8 **)v32;
        }
        int v34 = v4 + 2;
        memcpy(v4 + 2, v32, v33);
        uint64_t v4 = &v34[v33];
        v30 += 8;
        if (v31 == v30) {
          goto LABEL_58;
        }
      }
    }
    int64_t v33 = v32[23];
    goto LABEL_52;
  }
LABEL_58:
  if ((v6 & 4) == 0) {
    goto LABEL_83;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    uint64_t v35 = *((void *)this + 11);
    char *v4 = 58;
    unsigned int v36 = *(_DWORD *)(v35 + 32);
    if (v36 <= 0x7F)
    {
LABEL_61:
      v4[1] = v36;
      v4 += 2;
      uint64_t v37 = *(unsigned int *)(v35 + 16);
      if ((int)v37 < 1) {
        goto LABEL_82;
      }
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v35 = *((void *)this + 11);
    char *v4 = 58;
    unsigned int v36 = *(_DWORD *)(v35 + 32);
    if (v36 <= 0x7F) {
      goto LABEL_61;
    }
  }
  v4[1] = v36 | 0x80;
  unsigned int v38 = v36 >> 7;
  if (!(v36 >> 14))
  {
    long long v4[2] = v38;
    v4 += 3;
    uint64_t v37 = *(unsigned int *)(v35 + 16);
    if ((int)v37 < 1) {
      goto LABEL_82;
    }
LABEL_70:
    uint64_t v41 = 0;
    while (1)
    {
      if (*(void *)a3 <= (unint64_t)v4)
      {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
        unint64_t v42 = *(int *)(*(void *)(v35 + 24) + 4 * v41);
        char *v4 = 8;
        if (v42 > 0x7F)
        {
LABEL_75:
          v4[1] = v42 | 0x80;
          unint64_t v43 = v42 >> 7;
          if (v42 >> 14)
          {
            v4 += 3;
            do
            {
              *(v4 - 1) = v43 | 0x80;
              unint64_t v44 = v43 >> 7;
              ++v4;
              unint64_t v45 = v43 >> 14;
              v43 >>= 7;
            }
            while (v45);
            *(v4 - 1) = v44;
          }
          else
          {
            long long v4[2] = v43;
            v4 += 3;
          }
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v42 = *(int *)(*(void *)(v35 + 24) + 4 * v41);
        char *v4 = 8;
        if (v42 > 0x7F) {
          goto LABEL_75;
        }
      }
      v4[1] = v42;
      v4 += 2;
LABEL_72:
      if (++v41 == v37) {
        goto LABEL_82;
      }
    }
  }
  v4 += 3;
  do
  {
    *(v4 - 1) = v38 | 0x80;
    unsigned int v39 = v38 >> 7;
    ++v4;
    unsigned int v40 = v38 >> 14;
    v38 >>= 7;
  }
  while (v40);
  *(v4 - 1) = v39;
  uint64_t v37 = *(unsigned int *)(v35 + 16);
  if ((int)v37 >= 1) {
    goto LABEL_70;
  }
LABEL_82:
  uint64_t v46 = *(void *)(v35 + 8);
  if (v46)
  {
    uint64_t v4 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
    if ((v6 & 0x10) == 0) {
      goto LABEL_95;
    }
    goto LABEL_84;
  }
LABEL_83:
  if ((v6 & 0x10) == 0) {
    goto LABEL_95;
  }
LABEL_84:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v47 = *((int *)this + 25);
    char *v4 = 64;
    if (v47 <= 0x7F) {
      goto LABEL_86;
    }
  }
  else
  {
    unint64_t v47 = *((int *)this + 25);
    char *v4 = 64;
    if (v47 <= 0x7F)
    {
LABEL_86:
      v4[1] = v47;
      v4 += 2;
      goto LABEL_95;
    }
  }
  v4[1] = v47 | 0x80;
  unint64_t v48 = v47 >> 7;
  if (v47 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v48 | 0x80;
      unint64_t v49 = v48 >> 7;
      ++v4;
      unint64_t v50 = v48 >> 14;
      v48 >>= 7;
    }
    while (v50);
    *(v4 - 1) = v49;
  }
  else
  {
    long long v4[2] = v48;
    v4 += 3;
  }
LABEL_95:
  uint64_t v51 = *((void *)this + 1);
  if ((v51 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v4;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v51 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
}

char *operations_research::sat::LinearBooleanProblem::ByteSizeLong(operations_research::sat::LinearBooleanProblem *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (operations_research::sat::LinearBooleanConstraint **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      int v7 = operations_research::sat::LinearBooleanConstraint::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
    int v8 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 14);
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v8 + v2);
    if ((int)v8 < 1) {
      goto LABEL_23;
    }
  }
  else
  {
    int v8 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 14);
    uint64_t v9 = v8;
    if ((int)v8 < 1) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = *((void *)this + 8);
  if (v8 == 1)
  {
    unsigned int v11 = 0;
LABEL_19:
    unint64_t v19 = (uint64_t *)(v10 + 8 * (void)v11 + 8);
    unint64_t v20 = (char *)(v8 - v11);
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      uint64_t v23 = *(void *)(v21 + 8);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = v22;
      }
      uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6));
      --v20;
    }
    while (v20);
    goto LABEL_23;
  }
  uint64_t v12 = 0;
  unsigned int v11 = (const google::protobuf::UnknownFieldSet *)(v8 & 0xFFFFFFFE);
  uint64_t v13 = v10 + 16;
  unsigned int v14 = v11;
  do
  {
    uint64_t v15 = *(void *)(v13 - 8);
    uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(*(void *)v13 + 8);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = v16;
    }
    if (*(char *)(*(void *)v13 + 23) >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(*(void *)v13 + 23);
    }
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6));
    v12 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6);
    v13 += 16;
    unsigned int v14 = (const google::protobuf::UnknownFieldSet *)((char *)v14 - 2);
  }
  while (v14);
  uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v12);
  if (v11 != v8) {
    goto LABEL_19;
  }
LABEL_23:
  int v24 = *((_DWORD *)this + 4);
  if ((v24 & 0x1F) == 0) {
    goto LABEL_33;
  }
  if (v24)
  {
    uint64_t v29 = *((void *)this + 9);
    uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
    uint64_t v31 = *(void *)(v29 + 8);
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = v30;
    }
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v24 & 2) == 0)
    {
LABEL_26:
      if ((v24 & 4) == 0) {
        goto LABEL_27;
      }
      goto LABEL_48;
    }
  }
  else if ((v24 & 2) == 0)
  {
    goto LABEL_26;
  }
  uint64_t v32 = (int *)*((void *)this + 10);
  uint64_t v33 = google::protobuf::internal::WireFormatLite::Int32Size(v32 + 6);
  uint64_t v34 = v32[6];
  uint64_t v35 = google::protobuf::internal::WireFormatLite::Int64Size(v32 + 10);
  int v36 = v32[4];
  uint64_t v37 = v33 + v35 + v34 + v32[10] + 9;
  if ((v36 & 1) == 0) {
    uint64_t v37 = v33 + v35 + v34 + v32[10];
  }
  if ((v36 & 2) != 0) {
    v37 += 9;
  }
  if ((v36 & 3) != 0) {
    unsigned int v38 = (const google::protobuf::UnknownFieldSet *)v37;
  }
  else {
    unsigned int v38 = (const google::protobuf::UnknownFieldSet *)(v33 + v35 + v34 + v32[10]);
  }
  if (v32[2]) {
    unsigned int v38 = (const google::protobuf::UnknownFieldSet *)google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v32 + 2), v38, v32 + 5);
  }
  else {
    v32[5] = (int)v38;
  }
  uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v38
                                                 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6)
                                                 + (void)v9
                                                 + 1);
  if ((v24 & 4) == 0)
  {
LABEL_27:
    if ((v24 & 8) == 0) {
      goto LABEL_28;
    }
LABEL_51:
    int v41 = *((_DWORD *)this + 24);
    uint64_t v42 = ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v41 >= 0) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 11;
    }
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v43);
    if ((v24 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
LABEL_48:
  unsigned int v39 = (int *)*((void *)this + 11);
  unsigned int v40 = (char *)(google::protobuf::internal::WireFormatLite::Int32Size(v39 + 4) + v39[4]);
  if (v39[2]) {
    unsigned int v40 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v39 + 2), (const google::protobuf::UnknownFieldSet *)v40, v39 + 8);
  }
  else {
    v39[8] = (int)v40;
  }
  uint64_t v9 = (const google::protobuf::UnknownFieldSet *)&v40[((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6)
                                                     + 1
                                                     + (void)v9];
  if ((v24 & 8) != 0) {
    goto LABEL_51;
  }
LABEL_28:
  if ((v24 & 0x10) != 0)
  {
LABEL_29:
    int v25 = *((_DWORD *)this + 25);
    uint64_t v26 = ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v25 >= 0) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 11;
    }
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v27);
  }
LABEL_33:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearBooleanProblem *)((char *)this + 8), v9, (_DWORD *)this + 5);
  }
  else
  {
    *((_DWORD *)this + 5) = v9;
    return (char *)v9;
  }
}

void operations_research::sat::LinearBooleanProblem::MergeFrom(std::string *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::LinearBooleanProblem::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, (const google::protobuf::Message *)this, v5);
  }
}

void operations_research::sat::LinearBooleanProblem::MergeFrom(std::string *this, const operations_research::sat::LinearBooleanProblem *a2)
{
  p_std::string::size_type size = &this->__r_.__value_.__l.__size_;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    int v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*p_size) {
      int v7 = (char *)((*p_size & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(&this->__r_.__value_.__l.__size_);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v7, v6);
  }
  int v8 = *((_DWORD *)a2 + 8);
  if (v8)
  {
    int v52 = p_size;
    uint64_t v54 = *((void *)a2 + 5);
    long long v53 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&this[1], v8);
    int v9 = *(_DWORD *)this[1].__r_.__value_.__r.__words[2];
    int v10 = this[1].__r_.__value_.__r.__words[1];
    int v11 = v9 - v10;
    if (v9 - v10 >= v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (operations_research::sat::LinearBooleanConstraint **)v53;
      unsigned int v14 = (const operations_research::sat::LinearBooleanConstraint **)(v54 + 8);
      do
      {
        uint64_t v16 = *v14++;
        uint64_t v15 = v16;
        uint64_t v17 = *v13++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearBooleanConstraint>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v8)
    {
      data = (google::protobuf::Arena *)this[1].__r_.__value_.__l.__data_;
      int v19 = v10 + v8 - v9;
      uint64_t v20 = 2 * v11;
      uint64_t v21 = (operations_research::sat::LinearBooleanConstraint **)&v53[v20];
      uint64_t v22 = (const operations_research::sat::LinearBooleanConstraint **)(v20 * 4 + v54 + 8);
      do
      {
        uint64_t v23 = *v22++;
        int v24 = (operations_research::sat::LinearBooleanConstraint *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(data);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearBooleanConstraint>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = LODWORD(this[1].__r_.__value_.__r.__words[1]) + v8;
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v25;
    uint64_t v26 = (int *)this[1].__r_.__value_.__r.__words[2];
    p_std::string::size_type size = v52;
    if (*v26 < v25) {
      *uint64_t v26 = v25;
    }
  }
  signed int v27 = *((_DWORD *)a2 + 14);
  if (v27)
  {
    unsigned int v28 = (const std::string **)(*((void *)a2 + 8) + 8);
    uint64_t v29 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&this[2], *((_DWORD *)a2 + 14));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 2, (std::string **)v29, v28, v27, *(_DWORD *)this[2].__r_.__value_.__r.__words[2] - LODWORD(this[2].__r_.__value_.__r.__words[1]));
    int v30 = LODWORD(this[2].__r_.__value_.__r.__words[1]) + v27;
    LODWORD(this[2].__r_.__value_.__r.__words[1]) = v30;
    uint64_t v31 = (int *)this[2].__r_.__value_.__r.__words[2];
    if (*v31 < v30) {
      *uint64_t v31 = v30;
    }
  }
  int v32 = *((_DWORD *)a2 + 4);
  if ((v32 & 0x1F) != 0)
  {
    if ((v32 & 1) == 0)
    {
      if ((v32 & 2) == 0) {
        goto LABEL_23;
      }
LABEL_32:
      LODWORD(this->__r_.__value_.__r.__words[2]) |= 2u;
      std::string::size_type size = (void *)this[3].__r_.__value_.__l.__size_;
      if (!size)
      {
        unsigned int v39 = (google::protobuf::Arena *)(*p_size & 0xFFFFFFFFFFFFFFFELL);
        if (*p_size) {
          unsigned int v39 = *(google::protobuf::Arena **)v39;
        }
        std::string::size_type size = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(v39);
        this[3].__r_.__value_.__l.__size_ = (std::string::size_type)size;
      }
      if (*((void *)a2 + 10)) {
        unsigned int v40 = (const operations_research::sat::LinearObjective *)*((void *)a2 + 10);
      }
      else {
        unsigned int v40 = (const operations_research::sat::LinearObjective *)&operations_research::sat::_LinearObjective_default_instance_;
      }
      operations_research::sat::LinearObjective::MergeFrom((uint64_t)size, v40);
      if ((v32 & 4) == 0) {
        goto LABEL_53;
      }
      goto LABEL_40;
    }
    uint64_t v33 = (std::string *)*((void *)a2 + 9);
    LODWORD(this->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t v34 = (std::string **)&this[3];
    std::string::size_type v35 = this->__r_.__value_.__l.__size_;
    int v36 = (google::protobuf::Arena *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    if (v35)
    {
      int v36 = *(google::protobuf::Arena **)v36;
      uint64_t v37 = *v34;
      if (*v34 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_27:
        std::string::operator=(v37, v33);
        if ((v32 & 2) != 0) {
          goto LABEL_32;
        }
LABEL_23:
        if ((v32 & 4) == 0)
        {
LABEL_53:
          if ((v32 & 8) != 0) {
            LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
          }
          if ((v32 & 0x10) != 0) {
            HIDWORD(this[4].__r_.__value_.__r.__words[0]) = *((_DWORD *)a2 + 25);
          }
          LODWORD(this->__r_.__value_.__r.__words[2]) |= v32;
          return;
        }
LABEL_40:
        LODWORD(this->__r_.__value_.__r.__words[2]) |= 4u;
        unint64_t v41 = this[3].__r_.__value_.__r.__words[2];
        if (!v41)
        {
          uint64_t v42 = (google::protobuf::Arena *)(*p_size & 0xFFFFFFFFFFFFFFFELL);
          if (*p_size) {
            uint64_t v42 = *(google::protobuf::Arena **)v42;
          }
          unint64_t v41 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(v42);
          this[3].__r_.__value_.__r.__words[2] = v41;
        }
        if (*((void *)a2 + 11)) {
          uint64_t v43 = (uint64_t *)*((void *)a2 + 11);
        }
        else {
          uint64_t v43 = &operations_research::sat::_BooleanAssignment_default_instance_;
        }
        uint64_t v44 = v43[1];
        if (v44)
        {
          unint64_t v45 = (const google::protobuf::UnknownFieldSet *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v46 = *(void *)(v41 + 8);
          if (v46) {
            unint64_t v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            unint64_t v47 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v41 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v47, v45);
        }
        int v48 = *((_DWORD *)v43 + 4);
        if (v48)
        {
          uint64_t v50 = *(int *)(v41 + 16);
          unint64_t v49 = v41 + 16;
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v49, v50 + v48);
          uint64_t v51 = *(void *)(v49 + 8);
          *(_DWORD *)v49 += *((_DWORD *)v43 + 4);
          memcpy((void *)(v51 + 4 * v50), (const void *)v43[3], 4 * *((int *)v43 + 4));
        }
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v37 = *v34;
      if (*v34 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_27;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v34, v36, (long long *)v33);
    if ((v32 & 2) != 0) {
      goto LABEL_32;
    }
    goto LABEL_23;
  }
}

void operations_research::sat::LinearBooleanProblem::CopyFrom(operations_research::sat::LinearBooleanProblem *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    operations_research::sat::LinearBooleanProblem::Clear(this);
    if (v4)
    {
      operations_research::sat::LinearBooleanProblem::MergeFrom((std::string *)this, v4);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
    }
  }
}

uint64_t operations_research::sat::LinearBooleanProblem::IsInitialized(operations_research::sat::LinearBooleanProblem *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearBooleanProblem::GetMetadata(operations_research::sat::LinearBooleanProblem *this)
{
  return off_26AED0B08[6];
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x50uLL);
  }
  *(void *)unint64_t AlignedNoHook = &unk_26F0BD820;
  *(void *)(AlignedNoHook + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = this;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = 0;
  *(_DWORD *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 32) = this;
  *(_DWORD *)(AlignedNoHook + 44) = 0;
  *(void *)(AlignedNoHook + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = this;
  if (atomic_load_explicit(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto, memory_order_acquire))
  {
    google::protobuf::internal::InitSCCImpl(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
  }
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = 0;
  *(void *)(AlignedNoHook + 56) = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_23CBB7080(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 24);
  MEMORY[0x23ECF2BC0](v1, 0x10A1C403C840C82);
  _Unwind_Resume(a1);
}

void sub_23CBB70B8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 24);
  _Unwind_Resume(a1);
}

void *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  BOOL result = (void *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x48uLL);
  }
  *BOOL result = &unk_26F0BD8D0;
  result[1] = this;
  result[2] = 0;
  result[3] = 0;
  result[4] = this;
  result[5] = 0;
  result[6] = this;
  result[7] = 0;
  result[8] = 0x3FF0000000000000;
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t result = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x28uLL);
  }
  *(void *)unint64_t result = &unk_26F0BD980;
  *(void *)(result + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = this;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = this;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

operations_research::sat::LinearBooleanProblem *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanProblem>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t AlignedNoHook = (operations_research::sat::LinearBooleanProblem *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x68uLL);
  }
  return operations_research::sat::LinearBooleanProblem::LinearBooleanProblem(AlignedNoHook, this);
}

void sub_23CBB72F4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40A0AE8878);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::LinearBooleanConstraint::New(operations_research::sat::LinearBooleanConstraint *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(0);
}

unint64_t operations_research::sat::LinearBooleanConstraint::New(operations_research::sat::LinearBooleanConstraint *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(a2);
}

uint64_t operations_research::sat::LinearBooleanConstraint::GetCachedSize(operations_research::sat::LinearBooleanConstraint *this)
{
  return *((unsigned int *)this + 5);
}

void *operations_research::sat::LinearObjective::New(operations_research::sat::LinearObjective *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(0);
}

void *operations_research::sat::LinearObjective::New(operations_research::sat::LinearObjective *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(a2);
}

uint64_t operations_research::sat::LinearObjective::GetCachedSize(operations_research::sat::LinearObjective *this)
{
  return *((unsigned int *)this + 5);
}

unint64_t operations_research::sat::BooleanAssignment::New(operations_research::sat::BooleanAssignment *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(0);
}

unint64_t operations_research::sat::BooleanAssignment::New(operations_research::sat::BooleanAssignment *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(a2);
}

uint64_t operations_research::sat::BooleanAssignment::GetCachedSize(operations_research::sat::BooleanAssignment *this)
{
  return *((unsigned int *)this + 8);
}

operations_research::sat::LinearBooleanProblem *operations_research::sat::LinearBooleanProblem::New(operations_research::sat::LinearBooleanProblem *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanProblem>(0);
}

operations_research::sat::LinearBooleanProblem *operations_research::sat::LinearBooleanProblem::New(operations_research::sat::LinearBooleanProblem *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanProblem>(a2);
}

uint64_t operations_research::sat::LinearBooleanProblem::GetCachedSize(operations_research::sat::LinearBooleanProblem *this)
{
  return *((unsigned int *)this + 5);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  int v9 = (atomic_ullong **)result;
  if (a5 >= a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    uint64_t v12 = a2;
    do
    {
      unsigned int v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      unint64_t result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  int v16 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v17 = *v9;
    if (!v17) {
      operator new();
    }
    uint64_t v18 = a5;
    int v19 = &a3[v18];
    uint64_t v20 = &a2[v18];
    do
    {
      uint64_t v21 = *v19;
      if (v17[14]) {
      unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      unint64_t result = std::string::operator=(AlignedAndAddCleanup, v21);
      *v20++ = AlignedAndAddCleanup;
      ++v19;
      --v16;
    }
    while (v16);
  }
  return result;
}

void _GLOBAL__sub_I_BOOLean_problem_pb_cc()
{
}

uint64_t operations_research::sat::CircuitPropagator::CircuitPropagator(uint64_t a1, int a2, void *a3, void *a4, void *a5, char a6, uint64_t a7)
{
  uint64_t v10 = a1;
  *(void *)a1 = &unk_26F0BDB40;
  *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &unk_26F0BDB78;
  *(_DWORD *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = a6;
  uint64_t v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a7);
  *(_OWORD *)(v10 + 216) = 0u;
  *(void *)(v10 + 24) = v11;
  *(void *)(v10 + 32) = v11 + 16;
  *(void *)(v10 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  long long v134 = (std::vector<int> *)(v10 + 40);
  *(void *)(v10 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v10 + 72) = 0u;
  uint64_t v129 = (void *)(v10 + 72);
  *(_OWORD *)(v10 + 136) = 0u;
  uint64_t v132 = (char **)(v10 + 136);
  unint64_t v133 = (std::vector<int> *)(v10 + 216);
  long long v128 = (void **)(v10 + 112);
  *(_OWORD *)(v10 + 16google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  uint64_t v137 = (std::vector<int> *)(v10 + 192);
  uint64_t v138 = (std::vector<int> *)(v10 + 168);
  *(_OWORD *)(v10 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)(v10 + 14google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 24google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_OWORD *)(v10 + 276) = 0u;
  *(void *)(v10 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *(_OWORD *)(v10 + 32google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  uint64_t v136 = a3;
  if (*a3 == a3[1])
  {
    unint64_t v124 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 34);
    unint64_t v125 = (void *)google::LogMessage::stream(v124);
    uint64_t v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"Check failed: !tails.empty() ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"Empty constraint, shouldn't be constructed!", 43);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
  }
  std::vector<int>::size_type v12 = *(int *)(v10 + 16);
  __x[0] = -1;
  if (v12)
  {
    std::vector<int>::__append(v138, v12, __x);
    unint64_t v13 = *(int *)(v10 + 16);
    uint64_t v14 = *(void *)(v10 + 192);
    uint64_t v15 = *(void *)(v10 + 200);
    __x[0] = -1;
    unint64_t v16 = (v15 - v14) >> 2;
    BOOL v17 = v13 >= v16;
    if (v13 > v16)
    {
      std::vector<int>::__append(v137, v13 - v16, __x);
      unint64_t v13 = *(int *)(v10 + 16);
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    __x[0] = -1;
    BOOL v17 = 1;
  }
  if (!v17) {
    *(void *)(v10 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v14 + 4 * v13;
  }
LABEL_8:
  uint64_t v18 = *(void *)(v10 + 216);
  unint64_t v19 = (*(void *)(v10 + 224) - v18) >> 2;
  if (v13 <= v19)
  {
    if (v13 < v19) {
      *(void *)(v10 + 224) = v18 + 4 * v13;
    }
  }
  else
  {
    std::vector<int>::__append(v133, v13 - v19);
    unint64_t v13 = *(int *)(v10 + 16);
  }
  uint64_t v20 = *(void *)(v10 + 296);
  unint64_t v21 = (*(void *)(v10 + 304) - v20) >> 2;
  if (v13 <= v21)
  {
    if (v13 < v21) {
      *(void *)(v10 + 304) = v20 + 4 * v13;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(v10 + 296), v13 - v21);
  }
  *(void *)std::vector<int>::value_type __x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v144 = 0u;
  long long v145 = 0u;
  uint64_t v146 = 0;
  uint64_t v22 = a3[1] - *a3;
  int64_t v131 = (uint64_t *)(v10 + 64);
  if (v22 << 30 == 0x700000000)
  {
    uint64_t v23 = 8;
    char v24 = 0;
    uint64_t v25 = *(void *)(v10 + 80);
    if (v25 != 7)
    {
LABEL_18:
      uint64_t v26 = (v25 - 1) / 7 + v25;
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v26 = 8;
LABEL_22:
    unint64_t v27 = v26 | v23;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> __clz(v27);
    if (v27) {
      unint64_t v29 = v28;
    }
    else {
      unint64_t v29 = 1;
    }
    if ((v24 & 1) != 0 || v29 > *(void *)(v10 + 88)) {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::resize((char **)(v10 + 64), (char *)v29);
    }
    goto LABEL_28;
  }
  uint64_t v23 = ((int)(v22 >> 2) - 1) / 7 + (int)(v22 >> 2);
  if (v23)
  {
    char v24 = 0;
    uint64_t v25 = *(void *)(v10 + 80);
    if (v25 != 7) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  if (!*(void *)(v10 + 88)) {
    goto LABEL_28;
  }
  uint64_t v25 = *(void *)(v10 + 80);
  if (v25)
  {
    uint64_t v23 = 0;
    char v24 = 1;
    if (v25 != 7) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(*(void **)(v10 + 64));
  *(void *)(v10 + 64) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(v10 + 104) = 0;
  *(void *)(v10 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *(void *)(v10 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  void *v129 = 0;
  uint64_t v123 = *(void **)(v10 + 96);
  if (v123)
  {
    v123[1] = 0;
    *uint64_t v123 = 0;
    v123[4] = 0;
    uint64_t v123[2] = 0;
  }
LABEL_28:
  unint64_t v30 = *(int *)(v10 + 16);
  uint64_t v31 = (operations_research::sat::SatSolver **)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a7);
  int v32 = v31;
  int v33 = *((_DWORD *)v31 + 70);
  if (v33 == -1)
  {
    int v34 = *((_DWORD *)*v31 + 4);
    operations_research::sat::SatSolver::SetNumVariables(*v31, v34 + 1);
    *((_DWORD *)v32 + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 2 * v34;
    operations_research::sat::SatSolver::AddUnitClause((uint64_t)*v32, 2 * v34);
    int v33 = *((_DWORD *)v32 + 70);
  }
  v141[0] = v33 ^ 1;
  uint64_t v35 = *(void *)(v10 + 40);
  unint64_t v36 = (*(void *)(v10 + 48) - v35) >> 2;
  if (v30 <= v36)
  {
    if (v30 < v36) {
      *(void *)(v10 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v35 + 4 * v30;
    }
  }
  else
  {
    std::vector<int>::__append(v134, v30 - v36, v141);
  }
  uint64_t v37 = (uint64_t *)(v10 + 64);
  if ((int)((unint64_t)v22 >> 2) >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v140 = ((unint64_t)v22 >> 2);
    uint64_t v130 = a5;
    uint64_t v127 = v10;
    while (1)
    {
      int v39 = *(_DWORD *)(*a5 + 4 * v38);
      uint64_t v40 = v39;
      unint64_t v41 = (unint64_t)v39 >> 6;
      unint64_t v42 = *(void *)(*(void *)(*(void *)(v10 + 32) + 8) + 8 * v41);
      char v43 = v39 & 0x3F;
      if (((v42 >> (v39 & 0x3F ^ 1u)) & 1) == 0) {
        break;
      }
LABEL_37:
      if (++v38 == v140) {
        goto LABEL_123;
      }
    }
    uint64_t v44 = *(unsigned int *)(*a4 + 4 * v38);
    uint64_t v139 = *(unsigned int *)(*v136 + 4 * v38);
    if (*(_DWORD *)(*v136 + 4 * v38) == v44)
    {
      v134->__begin_[(int)v44] = v39;
      if ((v42 >> v43)) {
        goto LABEL_45;
      }
      uint64_t v40 = v39 ^ 1;
      v39 ^= 1u;
    }
    else
    {
      v141[0] = *(_DWORD *)(*v136 + 4 * v38);
      v141[1] = v44;
      unint64_t v45 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<int,int>>(v37, (unsigned int *)v141);
      if (v46) {
        *(void *)(*v129 + 12 * v45) = *(void *)v141;
      }
      *(_DWORD *)(*(void *)(v10 + 72) + 12 * v45 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v39;
      if ((*(void *)(*(void *)(*(void *)(v10 + 32) + 8) + 8 * v41) >> v43))
      {
LABEL_45:
        v141[0] = v138->__begin_[(int)v139];
        v147[0] = -1;
        if (v141[0] != -1) {
          google::MakeCheckOpString<int,int>((int)v141, (int)v147, "next_[tail] == -1");
        }
        v141[0] = v137->__begin_[(int)v44];
        v147[0] = -1;
        if (v141[0] != -1) {
          google::MakeCheckOpString<int,int>((int)v141, (int)v147, "prev_[head] == -1");
        }
        if (v139 || !*(unsigned char *)(v10 + 20))
        {
          uint64_t v47 = (int)v139;
          v138->__begin_[v47] = v44;
          v133->__begin_[v47] = -1;
        }
        if (v44 || !*(unsigned char *)(v10 + 20)) {
          v137->__begin_[(int)v44] = v139;
        }
        goto LABEL_37;
      }
    }
    uint64_t v48 = 0;
    unint64_t v49 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v40)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v40));
    uint64_t v50 = v144;
    unint64_t v51 = (v49 >> 7) ^ (*(void *)__x >> 12);
    uint64_t v52 = 0x101010101010101 * (v49 & 0x7F);
    for (unint64_t i = v51; ; unint64_t i = v48 + v54)
    {
      uint64_t v54 = i & v145;
      uint64_t v55 = *(void *)(*(void *)__x + v54);
      unint64_t v56 = ((v55 ^ v52) - 0x101010101010101) & ~(v55 ^ v52) & 0x8080808080808080;
      if (v56) {
        break;
      }
LABEL_53:
      if ((v55 & (~v55 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_57;
      }
      v48 += 8;
    }
    while (1)
    {
      unint64_t v57 = (v54 + (__clz(__rbit64(v56)) >> 3)) & v145;
      if (*(_DWORD *)(v144 + 8 * v57) == v39) {
        break;
      }
      v56 &= v56 - 1;
      if (!v56) {
        goto LABEL_53;
      }
    }
    if (v57 == (void)v145 || (LODWORD(v5google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(_DWORD *)(v144 + 8 * v57 + 4), v58 == -1))
    {
LABEL_57:
      uint64_t v59 = 0;
      uint64_t v60 = *(char **)(v10 + 120);
      unint64_t v58 = (unint64_t)&v60[-*(void *)(v10 + 112)] >> 2;
      while (1)
      {
        unint64_t v61 = v51 & v145;
        uint64_t v62 = *(void *)(*(void *)__x + v61);
        unint64_t v63 = ((v62 ^ v52) - 0x101010101010101) & ~(v62 ^ v52) & 0x8080808080808080;
        if (v63) {
          break;
        }
LABEL_61:
        if ((v62 & (~v62 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v64 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::prepare_insert((uint64_t *)__x, v49);
          uint64_t v50 = v144;
          int v65 = (int *)(v144 + 8 * v64);
          *int v65 = v39;
          v65[1] = 0;
          uint64_t v60 = *(char **)(v10 + 120);
          goto LABEL_68;
        }
        v59 += 8;
        unint64_t v51 = v59 + v61;
      }
      while (1)
      {
        unint64_t v64 = (v61 + (__clz(__rbit64(v63)) >> 3)) & v145;
        if (*(_DWORD *)(v144 + 8 * v64) == v39) {
          break;
        }
        v63 &= v63 - 1;
        if (!v63) {
          goto LABEL_61;
        }
      }
LABEL_68:
      *(_DWORD *)(v50 + 8 * v64 + 4) = v58;
      unint64_t v66 = *(void *)(v10 + 128);
      if ((unint64_t)v60 < v66)
      {
        *(_DWORD *)uint64_t v60 = v39;
        uint64_t v67 = (uint64_t)(v60 + 4);
        goto LABEL_85;
      }
      int v68 = v58;
      uint64_t v69 = (char *)*v128;
      uint64_t v70 = v60 - (unsigned char *)*v128;
      uint64_t v71 = v70 >> 2;
      unint64_t v72 = (v70 >> 2) + 1;
      if (v72 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v73 = v66 - (void)v69;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        if (v74 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v75 = v74;
        unint64_t v76 = operator new(4 * v74);
        unint64_t v74 = v75;
        __n128 v77 = (int *)&v76[4 * v71];
        *__n128 v77 = v39;
        uint64_t v67 = (uint64_t)(v77 + 1);
        if (v60 != v69)
        {
LABEL_79:
          unint64_t v78 = v60 - 4 - v69;
          if (v78 < 0x2C || (unint64_t)(v60 - v76 - v70) < 0x20)
          {
            uint64_t v79 = v60;
            LODWORD(v5google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v68;
            uint64_t v37 = v131;
            goto LABEL_82;
          }
          uint64_t v110 = (v78 >> 2) + 1;
          uint64_t v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v79 = &v60[-v111];
          __n128 v77 = (int *)((char *)v77 - v111);
          BOOL v112 = &v76[4 * v71 - 16];
          uint64_t v113 = v60 - 16;
          uint64_t v114 = v110 & 0x7FFFFFFFFFFFFFF8;
          LODWORD(v5google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v68;
          do
          {
            long long v115 = *(_OWORD *)v113;
            *(v112 - 1) = *((_OWORD *)v113 - 1);
            _OWORD *v112 = v115;
            v112 -= 2;
            v113 -= 32;
            v114 -= 8;
          }
          while (v114);
          uint64_t v37 = v131;
          if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_82:
              int v80 = *((_DWORD *)v79 - 1);
              v79 -= 4;
              *--__n128 v77 = v80;
            }
            while (v79 != v69);
          }
          *(void *)(v10 + 112) = v77;
          *(void *)(v10 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v67;
          *(void *)(v10 + 12google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v76[4 * v74];
          if (v69) {
LABEL_84:
          }
            operator delete(v69);
LABEL_85:
          *(void *)(v10 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v67;
          memset(v141, 0, sizeof(v141));
          uint64_t v142 = 0;
          BOOL v81 = *(void **)(v10 + 144);
          if ((unint64_t)v81 >= *(void *)(v10 + 152))
          {
            __n128 v82 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>(v132, (uint64_t)v141);
            unint64_t v83 = *(void **)v141;
            *(void *)(v10 + 144) = v82;
            if (v83)
            {
              *(void *)&v141[2] = v83;
              operator delete(v83);
            }
          }
          else
          {
            *BOOL v81 = 0;
            v81[1] = 0;
            v81[2] = 0;
            *(_OWORD *)BOOL v81 = *(_OWORD *)v141;
            v81[2] = v142;
            *(void *)(v10 + 144) = v81 + 3;
          }
          goto LABEL_89;
        }
      }
      else
      {
        unint64_t v76 = 0;
        __n128 v77 = (int *)(4 * v71);
        *(_DWORD *)(4 * v71) = v39;
        uint64_t v67 = 4 * v71 + 4;
        if (v60 != v69) {
          goto LABEL_79;
        }
      }
      LODWORD(v5google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v68;
      uint64_t v37 = v131;
      *(void *)(v10 + 112) = v77;
      *(void *)(v10 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v67;
      *(void *)(v10 + 12google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v76[4 * v74];
      if (v69) {
        goto LABEL_84;
      }
      goto LABEL_85;
    }
LABEL_89:
    uint64_t v84 = &(*v132)[24 * (int)v58];
    unint64_t v85 = v84 + 8;
    uint64_t v86 = (char *)*((void *)v84 + 1);
    unint64_t v88 = v84 + 16;
    unint64_t v87 = *((void *)v84 + 2);
    if ((unint64_t)v86 < v87)
    {
      *(void *)uint64_t v86 = v139 | (v44 << 32);
      uint64_t v89 = v86 + 8;
LABEL_113:
      a5 = v130;
      *unint64_t v85 = v89;
      goto LABEL_37;
    }
    __n128 v90 = *(char **)v84;
    uint64_t v91 = (uint64_t)&v86[-*(void *)v84];
    uint64_t v92 = v91 >> 3;
    unint64_t v93 = (v91 >> 3) + 1;
    if (v93 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v94 = v87 - (void)v90;
    if (v94 >> 2 > v93) {
      unint64_t v93 = v94 >> 2;
    }
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v95 = v93;
    }
    if (v95)
    {
      if (v95 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v96 = v44;
      unint64_t v97 = v95;
      __n128 v98 = operator new(8 * v95);
      unint64_t v95 = v97;
      uint64_t v44 = v96;
      unint64_t v88 = v84 + 16;
      uint64_t v10 = v127;
    }
    else
    {
      __n128 v98 = 0;
    }
    __n128 v99 = (uint64_t *)&v98[8 * v92];
    *__n128 v99 = v139 | (v44 << 32);
    uint64_t v89 = v99 + 1;
    if (v86 == v90)
    {
      uint64_t v37 = v131;
      *(void *)uint64_t v84 = v99;
      *unint64_t v85 = v89;
      *unint64_t v88 = &v98[8 * v95];
      if (!v86) {
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    unint64_t v100 = v86 - 8 - v90;
    if (v100 >= 0x58)
    {
      unint64_t v101 = v86 - &v98[v91];
      uint64_t v37 = v131;
      if (v101 >= 0x20)
      {
        uint64_t v102 = (v100 >> 3) + 1;
        uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
        int v104 = &v86[-v103];
        __n128 v99 = (uint64_t *)((char *)v99 - v103);
        int v105 = &v98[8 * v92 - 16];
        int v106 = v86 - 16;
        uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v108 = *(_OWORD *)v106;
          *(v105 - 1) = *((_OWORD *)v106 - 1);
          *int v105 = v108;
          v105 -= 2;
          v106 -= 32;
          v107 -= 4;
        }
        while (v107);
        uint64_t v86 = v104;
        if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          uint64_t v86 = *(char **)v84;
          *(void *)uint64_t v84 = v99;
          *unint64_t v85 = v89;
          *unint64_t v88 = &v98[8 * v95];
          if (!v86) {
            goto LABEL_113;
          }
LABEL_112:
          operator delete(v86);
          goto LABEL_113;
        }
      }
    }
    else
    {
      uint64_t v37 = v131;
    }
    do
    {
      uint64_t v109 = *((void *)v86 - 1);
      v86 -= 8;
      *--__n128 v99 = v109;
    }
    while (v86 != v90);
    goto LABEL_111;
  }
LABEL_123:
  int v116 = *(_DWORD *)(v10 + 16);
  if (v116 >= 1)
  {
    uint64_t v117 = *(int **)(v10 + 40);
    uint64_t v118 = *(void *)(*(void *)(v10 + 32) + 8);
    if ((*(void *)(v118 + (((unint64_t)*v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v117 & 0x3F ^ 1u)))
    {
      uint64_t v119 = *(int *)(v10 + 288);
      *(_DWORD *)(v10 + 28google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v119 + 1;
      *(_DWORD *)(*(void *)(v10 + 296) + 4 * v119) = 0;
      int v116 = *(_DWORD *)(v10 + 16);
    }
    if (v116 >= 2)
    {
      for (uint64_t j = 1; j < v116; ++j)
      {
        if (((*(void *)(v118 + (((unint64_t)v117[j] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v117[j] & 0x3F ^ 1u)) & 1) != 0
          && !*(unsigned char *)(v10 + 20))
        {
          uint64_t v121 = *(int *)(v10 + 288);
          *(_DWORD *)(v10 + 28google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v121 + 1;
          *(_DWORD *)(*(void *)(v10 + 296) + 4 * v121) = j;
          int v116 = *(_DWORD *)(v10 + 16);
        }
      }
    }
  }
  if ((void)v145)
  {
    operator delete(*(void **)__x);
    *(void *)std::vector<int>::value_type __x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v146 = 0;
    *(void *)&long long v145 = 0;
    long long v144 = 0uLL;
  }
  if (*((void *)&v145 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v145 + 1));
  }
  return v10;
}

void sub_23CBB8158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBB8160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBB8168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,void **a21,void **a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::~flat_hash_map(v26 - 144);
  unint64_t v28 = (void *)a10[43];
  if (v28)
  {
    operator delete(v28);
    unint64_t v29 = (void *)a10[40];
    if (!v29)
    {
LABEL_3:
      unint64_t v30 = *a9;
      if (!*a9) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v29 = (void *)a10[40];
    if (!v29) {
      goto LABEL_3;
    }
  }
  operator delete(v29);
  unint64_t v30 = *a9;
  if (!*a9)
  {
LABEL_4:
    uint64_t v31 = (void *)a10[33];
    if (!v31) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  a10[38] = v30;
  operator delete(v30);
  uint64_t v31 = (void *)a10[33];
  if (!v31)
  {
LABEL_5:
    int v32 = (void *)a10[30];
    if (!v32) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  a10[34] = v31;
  operator delete(v31);
  int v32 = (void *)a10[30];
  if (!v32)
  {
LABEL_6:
    int v33 = *a17;
    if (!*a17) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  a10[31] = v32;
  operator delete(v32);
  int v33 = *a17;
  if (!*a17)
  {
LABEL_7:
    int v34 = *a21;
    if (!*a21) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  a10[28] = v33;
  operator delete(v33);
  int v34 = *a21;
  if (!*a21)
  {
LABEL_8:
    uint64_t v35 = *a22;
    if (!*a22) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  a10[25] = v34;
  operator delete(v34);
  uint64_t v35 = *a22;
  if (!*a22)
  {
LABEL_9:
    std::vector<std::vector<int>>::~vector[abi:ne180100](a16);
    unint64_t v36 = *a11;
    if (!*a11) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  a10[22] = v35;
  operator delete(v35);
  std::vector<std::vector<int>>::~vector[abi:ne180100](a16);
  unint64_t v36 = *a11;
  if (!*a11)
  {
LABEL_10:
    absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::~flat_hash_map(a15);
    uint64_t v37 = *a18;
    if (!*a18) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  a10[15] = v36;
  operator delete(v36);
  absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::~flat_hash_map(a15);
  uint64_t v37 = *a18;
  if (!*a18) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_21:
  a10[6] = v37;
  operator delete(v37);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t operations_research::sat::CircuitPropagator::RegisterWith(operations_research::sat::CircuitPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  uint64_t v5 = *((void *)this + 14);
  if (*((void *)this + 15) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, *(unsigned int *)(v5 + 4 * v6), v4, v6);
      ++v6;
      uint64_t v5 = *((void *)this + 14);
    }
    while (v6 < (*((void *)this + 15) - v5) >> 2);
  }
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleClass((uint64_t)a2, v4, (uint64_t)this + 8);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 40);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 72);

  return operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)a2, v4);
}

void operations_research::sat::GenericLiteralWatcher::WatchLiteral(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  int v8 = (void *)(a1 + 64);
  uint64_t v9 = (v6 - v7) >> 3;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * v9;
  uint64_t v11 = a2 << 32;
  if ((int)a2 >= -1431655765 * (int)v9)
  {
    unint64_t v12 = (v11 + 0x100000000) >> 32;
    if (v12 <= v10)
    {
      if (v12 < v10)
      {
        uint64_t v14 = v7 + 24 * (int)v12;
        if (v6 != v14)
        {
          uint64_t v15 = *(void *)(a1 + 72);
          do
          {
            BOOL v17 = *(void **)(v15 - 24);
            v15 -= 24;
            unint64_t v16 = v17;
            if (v17)
            {
              *(void *)(v6 - 16) = v16;
              operator delete(v16);
            }
            uint64_t v6 = v15;
          }
          while (v15 != v14);
        }
        *(void *)(a1 + 72) = v14;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 64, v12 - v10);
    }
  }
  uint64_t v18 = (void *)(*v8 + 24 * SHIDWORD(v11));
  uint64_t v20 = v18 + 1;
  unint64_t v19 = (char *)v18[1];
  unint64_t v21 = v18[2];
  if ((unint64_t)v19 >= v21)
  {
    uint64_t v23 = (char *)*v18;
    uint64_t v24 = (uint64_t)&v19[-*v18];
    uint64_t v25 = v24 >> 3;
    unint64_t v26 = (v24 >> 3) + 1;
    if (v26 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v21 - (void)v23;
    if (v27 >> 2 > v26) {
      unint64_t v26 = v27 >> 2;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v29 = operator new(8 * v28);
    }
    else
    {
      unint64_t v29 = 0;
    }
    unint64_t v30 = (unint64_t *)&v29[8 * v25];
    *unint64_t v30 = a3 | (unint64_t)(a4 << 32);
    uint64_t v22 = v30 + 1;
    if (v19 != v23)
    {
      unint64_t v31 = v19 - v23 - 8;
      if (v31 < 0x58) {
        goto LABEL_38;
      }
      if ((unint64_t)(v19 - v29 - v24) < 0x20) {
        goto LABEL_38;
      }
      uint64_t v32 = (v31 >> 3) + 1;
      uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      int v34 = &v19[-v33];
      unint64_t v30 = (unint64_t *)((char *)v30 - v33);
      uint64_t v35 = &v29[8 * v25 - 16];
      unint64_t v36 = v19 - 16;
      uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *uint64_t v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      unint64_t v19 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          unint64_t v39 = *((void *)v19 - 1);
          v19 -= 8;
          *--unint64_t v30 = v39;
        }
        while (v19 != v23);
      }
      unint64_t v19 = (char *)*v18;
    }
    *uint64_t v18 = v30;
    *uint64_t v20 = v22;
    void v18[2] = &v29[8 * v28];
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *(void *)unint64_t v19 = a3 | (unint64_t)(a4 << 32);
    uint64_t v22 = v19 + 8;
  }
  *uint64_t v20 = v22;
}

void operations_research::sat::CircuitPropagator::SetLevel(operations_research::sat::CircuitPropagator *this, int a2)
{
  unint64_t v2 = a2;
  std::vector<int>::pointer begin = (std::vector<int>::pointer)*((void *)this + 30);
  uint64_t v5 = (char *)*((void *)this + 31);
  uint64_t v3 = (std::vector<int> *)((char *)this + 240);
  unint64_t v6 = (v5 - (char *)begin) >> 2;
  if (v6 == a2) {
    return;
  }
  if (v6 < a2)
  {
    while (1)
    {
      unint64_t v9 = *((void *)this + 32);
      uint64_t v10 = (*((void *)this + 34) - *((void *)this + 33)) >> 3;
      if ((unint64_t)v5 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v5 = v10;
      uint64_t v8 = (uint64_t)(v5 + 4);
LABEL_6:
      *((void *)this + 31) = v8;
      unint64_t v6 = (v8 - (uint64_t)begin) >> 2;
      uint64_t v5 = (char *)v8;
      if (v6 >= v2) {
        return;
      }
    }
    unint64_t v11 = v6 + 1;
    if ((v6 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)begin;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
      uint64_t v15 = (int *)&v14[4 * v6];
      *uint64_t v15 = v10;
      uint64_t v8 = (uint64_t)(v15 + 1);
      if (v5 == (char *)begin) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = (int *)(4 * v6);
      *(_DWORD *)(4 * v6) = v10;
      uint64_t v8 = 4 * v6 + 4;
      if (v5 == (char *)begin) {
        goto LABEL_31;
      }
    }
    unint64_t v16 = v5 - 4 - (char *)begin;
    if (v16 >= 0xBC)
    {
      uint64_t v18 = 4 * v6;
      if (&v14[4 * v6 - 4 - (v16 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[4 * v6 - 4])
      {
        BOOL v17 = v5;
      }
      else if (&v5[-(v16 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
      {
        BOOL v17 = v5;
      }
      else if ((unint64_t)(v5 - &v14[v18]) >= 0x20)
      {
        uint64_t v19 = (v16 >> 2) + 1;
        uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        BOOL v17 = &v5[-v20];
        uint64_t v15 = (int *)((char *)v15 - v20);
        unint64_t v21 = &v14[v18 - 16];
        uint64_t v22 = v5 - 16;
        uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
      }
      else
      {
        BOOL v17 = v5;
      }
    }
    else
    {
      BOOL v17 = v5;
    }
    do
    {
      int v25 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *--uint64_t v15 = v25;
    }
    while (v17 != (char *)begin);
LABEL_31:
    *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v15;
    *((void *)this + 31) = v8;
    *((void *)this + 32) = &v14[4 * v13];
    if (begin)
    {
      operator delete(begin);
      std::vector<int>::pointer begin = v3->__begin_;
    }
    else
    {
      std::vector<int>::pointer begin = v15;
    }
    goto LABEL_6;
  }
  unint64_t v26 = begin[a2];
  uint64_t v27 = *((void *)this + 33);
  unint64_t v28 = (*((void *)this + 34) - v27) >> 3;
  if (v28 > v26)
  {
    uint64_t v29 = *((void *)this + 21);
    uint64_t v30 = *((void *)this + 24);
    unint64_t v31 = (int *)(v27 + 8 * v26 + 4);
    do
    {
      uint64_t v32 = *v31;
      *(_DWORD *)(v29 + 4 * *(v31 - 1)) = -1;
      *(_DWORD *)(v30 + 4 * v32) = -1;
      ++v26;
      v31 += 2;
    }
    while (v28 > v26);
    unint64_t v26 = begin[a2];
  }
  if (v26 <= v28)
  {
    if (v26 < v28) {
      *((void *)this + 34) = v27 + 8 * v26;
    }
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 33, v26 - v28);
    std::vector<int>::pointer begin = (std::vector<int>::pointer)*((void *)this + 30);
    unint64_t v6 = (uint64_t)(*((void *)this + 31) - (void)begin) >> 2;
  }
  if (v2 <= v6)
  {
    if (v2 < v6) {
      *((void *)this + 31) = &begin[v2];
    }
  }
  else
  {
    std::vector<int>::__append(v3, v2 - v6);
  }
}

void non-virtual thunk to'operations_research::sat::CircuitPropagator::SetLevel(operations_research::sat::CircuitPropagator *this, int a2)
{
}

void operations_research::sat::CircuitPropagator::FillReasonForPath(uint64_t a1, int a2, uint64_t a3)
{
  int v33 = a2;
  LODWORD(v34) = -1;
  if (a2 == -1) {
    google::MakeCheckOpString<int,int>((int)&v33, (int)&v34, "start_node != -1");
  }
  unint64_t v6 = *(char **)a3;
  *(void *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(void *)a3;
  uint64_t v7 = *(void *)(a1 + 168);
  int v8 = a2;
  while (1)
  {
    int v9 = *(_DWORD *)(v7 + 4 * v8);
    if (v9 == -1) {
      break;
    }
    uint64_t v10 = v8;
    int v11 = *(_DWORD *)(*(void *)(a1 + 216) + 4 * v8);
    if (v11 == -1)
    {
      int v8 = v9;
      if (v9 == a2) {
        return;
      }
    }
    else
    {
      int v12 = v11 ^ 1;
      unint64_t v13 = *(void *)(a3 + 16);
      if ((unint64_t)v6 < v13)
      {
        *(_DWORD *)unint64_t v6 = v12;
        uint64_t v14 = (uint64_t)(v6 + 4);
        goto LABEL_21;
      }
      uint64_t v15 = *(char **)a3;
      uint64_t v16 = (uint64_t)&v6[-*(void *)a3];
      uint64_t v17 = v16 >> 2;
      unint64_t v18 = (v16 >> 2) + 1;
      if (v18 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v13 - (void)v15;
      if (v19 >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v32 = v18;
      if (v18)
      {
        if (v18 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v20 = operator new(4 * v18);
        unint64_t v21 = (int *)&v20[4 * v17];
        int *v21 = v12;
        uint64_t v14 = (uint64_t)(v21 + 1);
        if (v6 == v15)
        {
LABEL_24:
          *(void *)a3 = v21;
          *(void *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
          *(void *)(a3 + 16) = &v20[4 * v32];
          if (!v15) {
            goto LABEL_21;
          }
LABEL_20:
          operator delete(v15);
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v20 = 0;
        unint64_t v21 = (int *)(4 * v17);
        *(_DWORD *)(4 * v17) = v12;
        uint64_t v14 = 4 * v17 + 4;
        if (v6 == v15) {
          goto LABEL_24;
        }
      }
      unint64_t v22 = v6 - 4 - v15;
      if (v22 < 0xBC
        || &v20[v16 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v16 - 4]
        || &v6[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4
        || (unint64_t)(v6 - v20 - v16) < 0x20)
      {
        uint64_t v23 = v6;
        unint64_t v24 = v32;
        do
        {
LABEL_18:
          int v25 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *--unint64_t v21 = v25;
        }
        while (v23 != v15);
        goto LABEL_19;
      }
      uint64_t v26 = (v22 >> 2) + 1;
      uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v23 = &v6[-v27];
      unint64_t v21 = (int *)((char *)v21 - v27);
      unint64_t v28 = &v20[4 * v17 - 16];
      uint64_t v29 = v6 - 16;
      uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *unint64_t v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 8;
      }
      while (v30);
      unint64_t v24 = v32;
      if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_18;
      }
LABEL_19:
      *(void *)a3 = v21;
      *(void *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
      *(void *)(a3 + 16) = &v20[4 * v24];
      if (v15) {
        goto LABEL_20;
      }
LABEL_21:
      *(void *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
      uint64_t v7 = *(void *)(a1 + 168);
      int v8 = *(_DWORD *)(v7 + 4 * v10);
      unint64_t v6 = (char *)v14;
      if (v8 == a2) {
        return;
      }
    }
  }
}

void sub_23CBB8C04(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CircuitPropagator::IncrementalPropagate(uint64_t a1, int **a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v40 = a2[1];
  if (*a2 == v40)
  {
LABEL_40:
    return operations_research::sat::CircuitPropagator::Propagate((operations_research::sat::CircuitPropagator *)a1);
  }
  unint64_t v42 = (uint64_t **)(a1 + 264);
  while (1)
  {
    unint64_t v41 = v3;
    uint64_t v4 = *v3;
    uint64_t v5 = *(void *)(a1 + 136) + 24 * (int)v4;
    uint64_t v7 = *(uint64_t **)v5;
    unint64_t v6 = *(uint64_t **)(v5 + 8);
    if (*(uint64_t **)v5 != v6) {
      break;
    }
LABEL_3:
    uint64_t v3 = v41 + 1;
    if (v41 + 1 == v40) {
      goto LABEL_40;
    }
  }
  int v43 = *(_DWORD *)(*(void *)(a1 + 112) + 4 * v4);
  while (1)
  {
    while (1)
    {
      uint64_t v9 = *v7;
      unint64_t v10 = HIDWORD(*v7);
      if (*v7 != v10) {
        break;
      }
      uint64_t v8 = *(int *)(a1 + 288);
      *(_DWORD *)(a1 + 28google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v8 + 1;
      *(_DWORD *)(*(void *)(a1 + 296) + 4 * vgoogle::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v9;
      if (++v7 == v6) {
        goto LABEL_3;
      }
    }
    uint64_t v11 = *(void *)(a1 + 168);
    if (*(_DWORD *)(v11 + 4 * (int)v9) != -1) {
      break;
    }
    uint64_t v12 = *(void *)(a1 + 192);
    uint64_t v13 = *(int *)(v12 + 4 * (v9 >> 32));
    if (v13 != -1)
    {
      uint64_t v39 = *(void *)(a1 + 24);
      *(void *)(v39 + 144) = 0;
      uint64_t v37 = (void *)(v39 + 96);
      int v38 = *(_DWORD *)(*(void *)(a1 + 216) + 4 * v13);
      if (v38 == -1) {
        goto LABEL_46;
      }
LABEL_44:
      int __src = v38 ^ 1;
      int v45 = v43 ^ 1;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v37, (char *)&__src, (char *)&v46, 2uLL);
      return 0;
    }
    if (v9 || !*(unsigned char *)(a1 + 20))
    {
      uint64_t v14 = 4 * (int)v9;
      *(_DWORD *)(v11 + v14) = v10;
      *(_DWORD *)(*(void *)(a1 + 216) + v14) = v43;
    }
    if (v10 || !*(unsigned char *)(a1 + 20)) {
      *(_DWORD *)(v12 + 4 * (v9 >> 32)) = v9;
    }
    uint64_t v16 = *(uint64_t **)(a1 + 272);
    unint64_t v15 = *(void *)(a1 + 280);
    if ((unint64_t)v16 >= v15)
    {
      unint64_t v18 = *v42;
      uint64_t v19 = (char *)v16 - (char *)*v42;
      uint64_t v20 = v19 >> 3;
      unint64_t v21 = (v19 >> 3) + 1;
      if (v21 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v15 - (void)v18;
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v24 = operator new(8 * v23);
        int v25 = (uint64_t *)&v24[8 * v20];
        *int v25 = v9;
        uint64_t v17 = (uint64_t)(v25 + 1);
        if (v16 == v18) {
          goto LABEL_36;
        }
LABEL_29:
        unint64_t v26 = (char *)(v16 - 1) - (char *)v18;
        if (v26 < 0x58) {
          goto LABEL_52;
        }
        if ((unint64_t)((char *)v16 - &v24[v19]) < 0x20) {
          goto LABEL_52;
        }
        uint64_t v27 = (v26 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v29 = &v16[v28 / 0xFFFFFFFFFFFFFFF8];
        int v25 = (uint64_t *)((char *)v25 - v28);
        uint64_t v30 = &v24[8 * v20 - 16];
        long long v31 = v16 - 2;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *uint64_t v30 = v33;
          v30 -= 2;
          v31 -= 4;
          v32 -= 4;
        }
        while (v32);
        uint64_t v16 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            uint64_t v34 = *--v16;
            *--int v25 = v34;
          }
          while (v16 != v18);
        }
        uint64_t v16 = *v42;
      }
      else
      {
        unint64_t v24 = 0;
        int v25 = (uint64_t *)(8 * v20);
        *(void *)(8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v9;
        uint64_t v17 = 8 * v20 + 8;
        if (v16 != v18) {
          goto LABEL_29;
        }
      }
LABEL_36:
      *(void *)(a1 + 264) = v25;
      *(void *)(a1 + 272) = v17;
      *(void *)(a1 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = &v24[8 * v23];
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_38;
    }
    *uint64_t v16 = v9;
    uint64_t v17 = (uint64_t)(v16 + 1);
LABEL_38:
    *(void *)(a1 + 272) = v17;
    if (++v7 == v6) {
      goto LABEL_3;
    }
  }
  uint64_t v36 = *(void *)(a1 + 24);
  *(void *)(v36 + 144) = 0;
  uint64_t v37 = (void *)(v36 + 96);
  int v38 = *(_DWORD *)(*(void *)(a1 + 216) + 4 * (int)v9);
  if (v38 != -1) {
    goto LABEL_44;
  }
LABEL_46:
  int __src = v43 ^ 1;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v37, (char *)&__src, (char *)&v45, 1uLL);
  return 0;
}

uint64_t operations_research::sat::CircuitPropagator::Propagate(operations_research::sat::CircuitPropagator *this)
{
  unint64_t v2 = (void *)((char *)this + 320);
  unint64_t v3 = *((int *)this + 4);
  LOBYTE(v120[0]) = 0;
  std::vector<BOOL>::assign((char **)this + 40, v3, v120);
  LODWORD(v4) = *((_DWORD *)this + 4);
  if ((int)v4 < 1) {
    return 1;
  }
  unint64_t v5 = 0;
  while (1)
  {
    unint64_t v39 = v5 >> 6;
    uint64_t v40 = 1 << v5;
    if ((*(void *)(*v2 + 8 * (v5 >> 6)) & (1 << v5)) != 0) {
      goto LABEL_56;
    }
    uint64_t v41 = *(unsigned int *)(*((void *)this + 21) + 4 * v5);
    if (v5 == v41 || v41 == -1 && *(_DWORD *)(*((void *)this + 24) + 4 * v5) == -1) {
      goto LABEL_56;
    }
    LOBYTE(v120[0]) = 0;
    std::vector<BOOL>::assign((char **)this + 43, (int)v4, v120);
    uint64_t v42 = *((void *)this + 43);
    uint64_t v43 = 8 * v39;
    *(void *)(v42 + v43) = *(void *)(v42 + 8 * v39) | v40;
    uint64_t v44 = *((void *)this + 40);
    *(void *)(v44 + v43) = *(void *)(v44 + 8 * v39) | v40;
    uint64_t v45 = *((void *)this + 21);
    unsigned int v46 = v5;
    do
    {
      uint64_t v47 = *(unsigned int *)(v45 + 4 * (int)v46);
      if (v47 == -1) {
        break;
      }
      unint64_t v48 = ((unint64_t)(int)v47 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(void *)(v42 + v48) |= 1 << v47;
      *(void *)(v44 + v48) |= 1 << v47;
      unsigned int v46 = v47;
    }
    while (v5 != v47);
    uint64_t v49 = *((void *)this + 24);
    int v50 = v5;
    do
    {
      uint64_t v51 = *(unsigned int *)(v49 + 4 * v50);
      if (v51 == -1) {
        break;
      }
      unint64_t v52 = ((unint64_t)(int)v51 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(void *)(v42 + v52) |= 1 << v51;
      *(void *)(v44 + v52) |= 1 << v51;
      int v50 = v51;
    }
    while (v5 != v51);
    uint64_t v53 = *((unsigned int *)this + 72);
    if ((int)v53 < 1) {
      break;
    }
    uint64_t v54 = (int *)*((void *)this + 37);
    while (1)
    {
      unint64_t v56 = *v54++;
      unint64_t v55 = v56;
      if (((*(void *)(v42 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v56) & 1) == 0) {
        break;
      }
      if (!--v53) {
        goto LABEL_54;
      }
    }
    int v57 = *(_DWORD *)(*((void *)this + 5) + 4 * v55);
    if (v50 == v46)
    {
      uint64_t v74 = *((void *)this + 3);
      *(void *)(v74 + 144) = 0;
      operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v46, v74 + 96);
      if (v57 == -3) {
        return 0;
      }
      BOOL v81 = (void *)*((void *)this + 3);
      v81[18] = 0;
      unint64_t v83 = (char *)v81[13];
      unint64_t v82 = v81[14];
      if ((unint64_t)v83 < v82)
      {
        *(_DWORD *)unint64_t v83 = v57;
        uint64_t v84 = v83 + 4;
LABEL_118:
        uint64_t result = 0;
        v81[13] = v84;
        return result;
      }
      uint64_t v91 = (char *)v81[12];
      uint64_t v92 = (v83 - v91) >> 2;
      unint64_t v93 = v92 + 1;
      if (!((unint64_t)(v92 + 1) >> 62))
      {
        uint64_t v94 = v82 - (void)v91;
        if (v94 >> 1 > v93) {
          unint64_t v93 = v94 >> 1;
        }
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v93;
        }
        if (v95)
        {
          if (v95 >> 62) {
            goto LABEL_119;
          }
          uint64_t v96 = operator new(4 * v95);
        }
        else
        {
          uint64_t v96 = 0;
        }
        uint64_t v107 = &v96[4 * v92];
        long long v108 = &v96[4 * v95];
        *uint64_t v107 = v57;
        uint64_t v84 = v107 + 1;
        if (v83 != v91)
        {
          unint64_t v109 = v83 - v91 - 4;
          if (v109 < 0x2C) {
            goto LABEL_123;
          }
          if ((unint64_t)(v91 - v96) < 0x20) {
            goto LABEL_123;
          }
          uint64_t v110 = (v109 >> 2) + 1;
          uint64_t v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          BOOL v112 = &v83[-v111];
          uint64_t v107 = (_DWORD *)((char *)v107 - v111);
          uint64_t v113 = &v96[4 * v92 - 16];
          uint64_t v114 = v83 - 16;
          uint64_t v115 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v116 = *(_OWORD *)v114;
            *(v113 - 1) = *((_OWORD *)v114 - 1);
            _OWORD *v113 = v116;
            v113 -= 2;
            v114 -= 32;
            v115 -= 8;
          }
          while (v115);
          unint64_t v83 = v112;
          if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_123:
            do
            {
              int v117 = *((_DWORD *)v83 - 1);
              v83 -= 4;
              *--uint64_t v107 = v117;
            }
            while (v83 != v91);
          }
        }
        v81[12] = v107;
        v81[13] = v84;
        v81[14] = v108;
        if (v91) {
          operator delete(v91);
        }
        goto LABEL_118;
      }
LABEL_120:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = 0;
    unint64_t v58 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v46)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + v46)))
        + v50;
    unint64_t v59 = ((v58 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v58);
    unint64_t v60 = *((void *)this + 8);
    unint64_t v13 = (v59 >> 7) ^ (v60 >> 12);
    uint64_t v61 = *((void *)this + 11);
    uint64_t v62 = 0x101010101010101 * (v59 & 0x7F);
    while (1)
    {
      uint64_t v6 = v13 & v61;
      uint64_t v7 = *(void *)(v60 + v6);
      unint64_t v8 = ((v7 ^ v62) - 0x101010101010101) & ~(v7 ^ v62) & 0x8080808080808080;
      if (v8) {
        break;
      }
LABEL_9:
      if ((v7 & (~v7 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_56;
      }
      v12 += 8;
      unint64_t v13 = v12 + v6;
    }
    while (1)
    {
      unint64_t v9 = (v6 + (__clz(__rbit64(v8)) >> 3)) & v61;
      unint64_t v10 = (_DWORD *)(*((void *)this + 9) + 12 * v9);
      if (*v10 == v46 && v10[1] == v50) {
        break;
      }
      v8 &= v8 - 1;
      if (!v8) {
        goto LABEL_9;
      }
    }
    if (v9 != v61)
    {
      unint64_t v14 = (int)v10[2];
      if (((*(void *)(*(void *)(*((void *)this + 4) + 8) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v14 & 0x3F ^ 1)) & 1) == 0)
      {
        unint64_t EmptyVectorToStoreReason = operations_research::sat::Trail::GetEmptyVectorToStoreReason(*((operations_research::sat::Trail **)this + 3), *(_DWORD *)(*((void *)this + 3) + 12));
        int v16 = v50;
        uint64_t v17 = (void *)EmptyVectorToStoreReason;
        operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v16, EmptyVectorToStoreReason);
        if (v57 != -3)
        {
          uint64_t v19 = (char *)v17[1];
          unint64_t v18 = v17[2];
          if ((unint64_t)v19 >= v18)
          {
            uint64_t v119 = v17;
            unint64_t v21 = (char *)*v17;
            int64_t v22 = v19 - v21;
            uint64_t v23 = (v19 - v21) >> 2;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 62) {
              goto LABEL_120;
            }
            uint64_t v25 = v18 - (void)v21;
            if (v25 >> 1 > v24) {
              unint64_t v24 = v25 >> 1;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            unint64_t v118 = v24;
            if (v24)
            {
              if (v24 >> 62) {
                goto LABEL_119;
              }
              unint64_t v26 = operator new(4 * v24);
              int64_t v22 = v19 - v21;
              uint64_t v23 = (v19 - v21) >> 2;
            }
            else
            {
              unint64_t v26 = 0;
            }
            uint64_t v27 = &v26[4 * v23];
            _DWORD *v27 = v57;
            uint64_t v20 = v27 + 1;
            if (v19 == v21)
            {
              unint64_t v29 = v118;
            }
            else
            {
              unint64_t v28 = v19 - 4 - v21;
              unint64_t v29 = v118;
              if (v28 < 0x2C) {
                goto LABEL_124;
              }
              if ((unint64_t)(v19 - &v26[v22]) < 0x20) {
                goto LABEL_124;
              }
              uint64_t v30 = (v28 >> 2) + 1;
              uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v32 = &v19[-v31];
              uint64_t v27 = (_DWORD *)((char *)v27 - v31);
              long long v33 = &v26[4 * v23 - 16];
              uint64_t v34 = v19 - 16;
              uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                _OWORD *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 8;
              }
              while (v35);
              uint64_t v19 = v32;
              if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_124:
                do
                {
                  int v37 = *((_DWORD *)v19 - 1);
                  v19 -= 4;
                  *--uint64_t v27 = v37;
                }
                while (v19 != v21);
              }
            }
            void *v119 = v27;
            v119[1] = v20;
            v119[2] = &v26[4 * v29];
            if (v21)
            {
              int v38 = v20;
              operator delete(v21);
              uint64_t v20 = v38;
            }
            uint64_t v17 = v119;
          }
          else
          {
            *(_DWORD *)uint64_t v19 = v57;
            uint64_t v20 = v19 + 4;
          }
          v17[1] = v20;
        }
        if ((operations_research::sat::Trail::EnqueueWithStoredReason(*((void *)this + 3), v14 ^ 1) & 1) == 0) {
          return 0;
        }
      }
    }
LABEL_56:
    ++v5;
    uint64_t v4 = *((int *)this + 4);
    if ((uint64_t)v5 >= v4) {
      return 1;
    }
  }
LABEL_54:
  if (v50 != v46 || *((unsigned char *)this + 20) || *((int *)this + 4) < 1) {
    goto LABEL_56;
  }
  unint64_t v63 = 0;
  int v64 = -1;
  while (1)
  {
    if ((*(void *)(*((void *)this + 43) + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v63)) {
      goto LABEL_63;
    }
    uint64_t v66 = *((void *)this + 5);
    uint64_t v67 = *(void *)(*((void *)this + 4) + 8);
    if ((*(void *)(v67 + (((unint64_t)*(int *)(v66 + 4 * v63) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v66 + 4 * v63))) {
      goto LABEL_63;
    }
    v120[0] = *(_DWORD *)(*((void *)this + 21) + 4 * v63);
    LODWORD(v121) = -1;
    if (v120[0] != -1) {
      google::MakeCheckOpString<int,int>((int)v120, (int)&v121, "next_[node] == -1");
    }
    unint64_t v68 = *(int *)(v66 + 4 * v63);
    if ((*(void *)(v67 + 8 * (v68 >> 6)) >> (v68 & 0x3F ^ 1))) {
      break;
    }
    int v69 = (int)v68 >> 1;
    if (v64 == -1)
    {
      int v70 = *(_DWORD *)(v66 + 4 * v63);
      unint64_t v71 = operations_research::sat::Trail::GetEmptyVectorToStoreReason(*((operations_research::sat::Trail **)this + 3), *(_DWORD *)(*((void *)this + 3) + 12));
      operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v46, v71);
      char v72 = operations_research::sat::Trail::EnqueueWithStoredReason(*((void *)this + 3), v70);
      int v64 = v69;
      if ((v72 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v65 = *((void *)this + 3);
      *(_DWORD *)(*(void *)(v65 + 152) + 4 * v69) = v64;
      *(_DWORD *)(*(void *)(v65 + 72) + 4 * *(int *)(v65 + 12)) = v68;
      *(_DWORD *)(v65 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(v65 + 8) & 0xFFFFFFE | v68 & 1) ^ 0x30000001;
      *(void *)(*(void *)(v65 + 120) + 8 * v69) = *(void *)(v65 + 8);
      *(void *)(*(void *)(v65 + 24) + 8 * (v68 >> 6)) |= 1 << (v68 & 0x3F);
      ++*(_DWORD *)(v65 + 12);
    }
LABEL_63:
    if ((uint64_t)++v63 >= *((int *)this + 4)) {
      goto LABEL_56;
    }
  }
  uint64_t v75 = *((void *)this + 3);
  *(void *)(v75 + 144) = 0;
  operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v46, v75 + 96);
  unint64_t v76 = (void *)*((void *)this + 3);
  v76[18] = 0;
  uint64_t v77 = *((void *)this + 5);
  uint64_t v79 = (char *)v76[13];
  unint64_t v78 = v76[14];
  if ((unint64_t)v79 < v78)
  {
    *(_DWORD *)uint64_t v79 = *(_DWORD *)(v77 + 4 * v63);
    int v80 = v79 + 4;
    goto LABEL_107;
  }
  unint64_t v85 = (char *)v76[12];
  uint64_t v86 = (v79 - v85) >> 2;
  unint64_t v87 = v86 + 1;
  if ((unint64_t)(v86 + 1) >> 62) {
    goto LABEL_120;
  }
  uint64_t v88 = v78 - (void)v85;
  if (v88 >> 1 > v87) {
    unint64_t v87 = v88 >> 1;
  }
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v89 = v87;
  }
  if (v89)
  {
    if (!(v89 >> 62))
    {
      __n128 v90 = operator new(4 * v89);
      goto LABEL_98;
    }
LABEL_119:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __n128 v90 = 0;
LABEL_98:
  unint64_t v97 = &v90[4 * v86];
  _DWORD *v97 = *(_DWORD *)(v77 + 4 * v63);
  int v80 = v97 + 1;
  if (v79 != v85)
  {
    unint64_t v98 = v79 - v85 - 4;
    if (v98 < 0x2C) {
      goto LABEL_125;
    }
    if ((unint64_t)(v85 - v90) < 0x20) {
      goto LABEL_125;
    }
    uint64_t v99 = (v98 >> 2) + 1;
    uint64_t v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v101 = &v79[-v100];
    unint64_t v97 = (_DWORD *)((char *)v97 - v100);
    uint64_t v102 = &v90[4 * v86 - 16];
    uint64_t v103 = v79 - 16;
    uint64_t v104 = v99 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v105 = *(_OWORD *)v103;
      *(v102 - 1) = *((_OWORD *)v103 - 1);
      *uint64_t v102 = v105;
      v102 -= 2;
      v103 -= 32;
      v104 -= 8;
    }
    while (v104);
    uint64_t v79 = v101;
    if (v99 != (v99 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_125:
      do
      {
        int v106 = *((_DWORD *)v79 - 1);
        v79 -= 4;
        *--unint64_t v97 = v106;
      }
      while (v79 != v85);
    }
  }
  v76[12] = v97;
  v76[13] = v80;
  v76[14] = &v90[4 * v89];
  if (v85) {
    operator delete(v85);
  }
LABEL_107:
  uint64_t result = 0;
  v76[13] = v80;
  return result;
}

void sub_23CBB98AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CircuitCoveringPropagator::CircuitCoveringPropagator(uint64_t a1, uint64_t a2, int **a3, uint64_t a4)
{
  *(void *)a1 = &unk_26F0BDBA0;
  *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &unk_26F0BDBD8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v6 = -1431655765 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
  *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  *(_DWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a4);
  *(_OWORD *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(void *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  std::vector<BOOL>::resize((uint64_t)v7, *(int *)(a1 + 40), 0);
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    uint64_t v11 = *v7;
    do
    {
      unint64_t v12 = *v9++;
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    }
    while (v9 != v10);
  }
  return a1;
}

void sub_23CBB99E8(_Unwind_Exception *a1)
{
  int v6 = (void *)v1[25];
  if (v6)
  {
    operator delete(v6);
    uint64_t v7 = (void *)v1[22];
    if (!v7)
    {
LABEL_3:
      uint64_t v8 = (void *)v1[19];
      if (!v8) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v7 = (void *)v1[22];
    if (!v7) {
      goto LABEL_3;
    }
  }
  v1[23] = v7;
  operator delete(v7);
  uint64_t v8 = (void *)v1[19];
  if (!v8)
  {
LABEL_4:
    unint64_t v9 = (void *)v1[16];
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v1[20] = v8;
  operator delete(v8);
  unint64_t v9 = (void *)v1[16];
  if (!v9)
  {
LABEL_5:
    unint64_t v10 = (void *)v1[13];
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v1[17] = v9;
  operator delete(v9);
  unint64_t v10 = (void *)v1[13];
  if (!v10)
  {
LABEL_6:
    uint64_t v11 = *v4;
    if (!*v4) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v1[14] = v10;
  operator delete(v10);
  uint64_t v11 = *v4;
  if (!*v4)
  {
LABEL_7:
    unint64_t v12 = *v3;
    if (!*v3) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v1[11] = v11;
  operator delete(v11);
  unint64_t v12 = *v3;
  if (!*v3)
  {
LABEL_8:
    std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(v12);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void operations_research::sat::CircuitCoveringPropagator::RegisterWith(operations_research::sat::CircuitCoveringPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unint64_t v2 = a2;
  unsigned int v103 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  int v4 = *((_DWORD *)this + 10);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    long long v105 = v2;
    int v106 = (void **)((char *)this + 104);
    uint64_t v104 = (void **)((char *)this + 80);
    unint64_t v109 = (void *)((char *)v2 + 64);
    do
    {
      while (v4 <= 0)
      {
        if (++v5 >= v4) {
          goto LABEL_102;
        }
      }
      uint64_t v6 = 0;
      uint64_t v110 = v5;
      do
      {
        unint64_t v8 = *(int *)(*(void *)(*((void *)this + 2) + 24 * v5) + 4 * v6);
        unint64_t v9 = *(void *)(*(void *)(*((void *)this + 9) + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if ((v9 >> (v8 & 0x3F ^ 1))) {
          goto LABEL_8;
        }
        if ((v9 >> (v8 & 0x3F)))
        {
          uint64_t v11 = (char *)*((void *)this + 14);
          unint64_t v10 = *((void *)this + 15);
          if ((unint64_t)v11 < v10)
          {
            *(_DWORD *)uint64_t v11 = v5;
            *((_DWORD *)v11 + 1) = v6;
            uint64_t v7 = v11 + 8;
          }
          else
          {
            unint64_t v12 = (char *)*v106;
            uint64_t v13 = v11 - (unsigned char *)*v106;
            uint64_t v14 = v13 >> 3;
            unint64_t v15 = (v13 >> 3) + 1;
            if (v15 >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v10 - (void)v12;
            if (v16 >> 2 > v15) {
              unint64_t v15 = v16 >> 2;
            }
            BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v17) {
              unint64_t v18 = v15;
            }
            if (v18 >> 61) {
              goto LABEL_105;
            }
            uint64_t v19 = 8 * v18;
            uint64_t v20 = operator new(8 * v18);
            unint64_t v21 = &v20[8 * v14];
            _DWORD *v21 = v5;
            v21[1] = v6;
            if (v11 == v12)
            {
              uint64_t v23 = &v20[8 * v14];
            }
            else
            {
              unint64_t v22 = v11 - 8 - v12;
              if (v22 < 0x58)
              {
                uint64_t v23 = &v20[8 * v14];
                goto LABEL_43;
              }
              uint64_t v23 = &v20[8 * v14];
              if ((unint64_t)(&v11[-v13] - v20) < 0x20) {
                goto LABEL_112;
              }
              uint64_t v46 = (v22 >> 3) + 1;
              uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v48 = &v11[-v47];
              uint64_t v23 = (char *)&v21[v47 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v49 = &v20[8 * v14 - 16];
              int v50 = v11 - 16;
              uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v52 = *(_OWORD *)v50;
                *(v49 - 1) = *((_OWORD *)v50 - 1);
                *uint64_t v49 = v52;
                v49 -= 2;
                v50 -= 32;
                v51 -= 4;
              }
              while (v51);
              uint64_t v11 = v48;
              if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_112:
                do
                {
LABEL_43:
                  uint64_t v53 = *((void *)v11 - 1);
                  v11 -= 8;
                  *((void *)v23 - 1) = v53;
                  v23 -= 8;
                }
                while (v11 != v12);
              }
            }
            uint64_t v7 = v21 + 2;
            *((void *)this + 13) = v23;
            *((void *)this + 14) = v21 + 2;
            *((void *)this + 15) = &v20[v19];
            if (v12) {
              operator delete(v12);
            }
          }
          *((void *)this + 14) = v7;
          goto LABEL_8;
        }
        uint64_t v24 = *((void *)this + 10);
        uint64_t v25 = *((void *)this + 11);
        unint64_t v26 = (void *)*((void *)v2 + 8);
        uint64_t v27 = (void *)*((void *)v2 + 9);
        uint64_t v28 = v27 - v26;
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * v28;
        if ((int)v8 >= -1431655765 * (int)v28)
        {
          uint64_t v30 = (v8 << 32) + 0x100000000;
          unint64_t v31 = v30 >> 32;
          unint64_t v32 = (v30 >> 32) - v29;
          if (v30 >> 32 <= v29)
          {
            uint64_t v5 = v110;
            if (v30 >> 32 < v29)
            {
              uint64_t v54 = &v26[3 * SHIDWORD(v30)];
              if (v27 != v54)
              {
                unint64_t v55 = (void *)*((void *)v2 + 9);
                do
                {
                  int v57 = (void *)*(v55 - 3);
                  v55 -= 3;
                  unint64_t v56 = v57;
                  if (v57)
                  {
                    *(v27 - 2) = v56;
                    operator delete(v56);
                  }
                  uint64_t v27 = v55;
                }
                while (v55 != v54);
              }
              *((void *)v2 + 9) = v54;
            }
          }
          else
          {
            uint64_t v33 = *((void *)v2 + 10);
            if (0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v27) >> 3) >= v32)
            {
              bzero(*((void **)v2 + 9), 24 * ((24 * v32 - 24) / 0x18) + 24);
              *((void *)v2 + 9) = &v27[3 * ((24 * v32 - 24) / 0x18) + 3];
              uint64_t v5 = v110;
            }
            else
            {
              if (v30 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v26) >> 3);
              unint64_t v35 = 0x5555555555555556 * ((v33 - (uint64_t)v26) >> 3);
              if (v35 > v31) {
                unint64_t v31 = v35;
              }
              if (v34 >= 0x555555555555555) {
                unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
              }
              if (v31 > 0xAAAAAAAAAAAAAAALL) {
LABEL_105:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              uint64_t v36 = 24 * v31;
              int v37 = (char *)operator new(24 * v31);
              int v38 = &v37[24 * v29];
              uint64_t v107 = &v37[v36];
              bzero(v38, 24 * ((24 * v32 - 24) / 0x18) + 24);
              unint64_t v39 = &v38[24 * ((24 * v32 - 24) / 0x18) + 24];
              if (v27 == v26)
              {
                unint64_t v2 = v105;
                *((void *)v105 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v38;
                *((void *)v105 + 9) = v39;
                *((void *)v105 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v107;
                uint64_t v5 = v110;
              }
              else
              {
                unint64_t v2 = v105;
                do
                {
                  uint64_t v40 = v38;
                  *((void *)v38 - 2) = 0;
                  *((void *)v38 - 1) = 0;
                  long long v41 = *(_OWORD *)(v27 - 3);
                  v27 -= 3;
                  *(_OWORD *)(v38 - 24) = v41;
                  v38 -= 24;
                  *((void *)v40 - 1) = v27[2];
                  void *v27 = 0;
                  v27[1] = 0;
                  v27[2] = 0;
                }
                while (v27 != v26);
                uint64_t v27 = (void *)*((void *)v105 + 8);
                uint64_t v42 = (void *)*((void *)v105 + 9);
                *((void *)v105 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v38;
                *((void *)v105 + 9) = v39;
                *((void *)v105 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v107;
                uint64_t v5 = v110;
                if (v42 != v27)
                {
                  uint64_t v43 = v42;
                  do
                  {
                    uint64_t v45 = (void *)*(v43 - 3);
                    v43 -= 3;
                    uint64_t v44 = v45;
                    if (v45)
                    {
                      *(v42 - 2) = v44;
                      operator delete(v44);
                    }
                    uint64_t v42 = v43;
                  }
                  while (v43 != v27);
                }
              }
              if (v27) {
                operator delete(v27);
              }
            }
          }
        }
        unint64_t v58 = v25 - v24;
        unint64_t v59 = (unint64_t **)(*v109 + 24 * (int)v8);
        unint64_t v60 = v59 + 1;
        uint64_t v61 = v59[1];
        unint64_t v62 = (unint64_t)v59[2];
        if ((unint64_t)v61 < v62)
        {
          *uint64_t v61 = v103 | ((unint64_t)(v58 >> 3) << 32);
          *unint64_t v60 = v61 + 1;
          int v64 = (char *)*((void *)this + 11);
          unint64_t v63 = *((void *)this + 12);
          if ((unint64_t)v64 >= v63) {
            goto LABEL_83;
          }
          goto LABEL_60;
        }
        uint64_t v66 = *v59;
        uint64_t v67 = (char *)v61 - (char *)*v59;
        uint64_t v68 = v67 >> 3;
        unint64_t v69 = (v67 >> 3) + 1;
        if (v69 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v70 = v62 - (void)v66;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v108 = v69;
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_105;
          }
          unint64_t v71 = operator new(8 * v69);
        }
        else
        {
          unint64_t v71 = 0;
        }
        char v72 = (unint64_t *)&v71[8 * v68];
        *char v72 = v103 | ((unint64_t)(v58 >> 3) << 32);
        uint64_t v73 = v72 + 1;
        if (v61 == v66)
        {
          uint64_t v5 = v110;
          goto LABEL_80;
        }
        unint64_t v74 = (char *)(v61 - 1) - (char *)v66;
        if (v74 >= 0x58)
        {
          unint64_t v75 = (char *)v61 - &v71[v67];
          uint64_t v5 = v110;
          if (v75 >= 0x20)
          {
            uint64_t v76 = (v74 >> 3) + 1;
            uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v78 = &v61[v77 / 0xFFFFFFFFFFFFFFF8];
            char v72 = (unint64_t *)((char *)v72 - v77);
            uint64_t v79 = &v71[8 * v68 - 16];
            int v80 = v61 - 2;
            uint64_t v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v82 = *(_OWORD *)v80;
              *(v79 - 1) = *((_OWORD *)v80 - 1);
              *uint64_t v79 = v82;
              v79 -= 2;
              v80 -= 4;
              v81 -= 4;
            }
            while (v81);
            uint64_t v61 = v78;
            if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_79;
            }
          }
        }
        else
        {
          uint64_t v5 = v110;
        }
        do
        {
          unint64_t v83 = *--v61;
          *--char v72 = v83;
        }
        while (v61 != v66);
LABEL_79:
        uint64_t v61 = *v59;
LABEL_80:
        *unint64_t v59 = v72;
        *unint64_t v60 = v73;
        v59[2] = (unint64_t *)&v71[8 * v108];
        unint64_t v2 = v105;
        if (v61) {
          operator delete(v61);
        }
        *unint64_t v60 = v73;
        int v64 = (char *)*((void *)this + 11);
        unint64_t v63 = *((void *)this + 12);
        if ((unint64_t)v64 >= v63)
        {
LABEL_83:
          uint64_t v84 = (char *)*v104;
          uint64_t v85 = v64 - (unsigned char *)*v104;
          uint64_t v86 = v85 >> 3;
          unint64_t v87 = (v85 >> 3) + 1;
          if (v87 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v88 = v63 - (void)v84;
          if (v88 >> 2 > v87) {
            unint64_t v87 = v88 >> 2;
          }
          BOOL v17 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v17) {
            unint64_t v89 = v87;
          }
          if (v89 >> 61) {
            goto LABEL_105;
          }
          uint64_t v90 = 8 * v89;
          uint64_t v91 = operator new(8 * v89);
          uint64_t v92 = &v91[8 * v86];
          *uint64_t v92 = v5;
          v92[1] = v6;
          if (v64 == v84)
          {
            uint64_t v94 = &v91[8 * v86];
          }
          else
          {
            unint64_t v93 = v64 - 8 - v84;
            if (v93 < 0x58)
            {
              uint64_t v94 = &v91[8 * v86];
              goto LABEL_97;
            }
            uint64_t v94 = &v91[8 * v86];
            if ((unint64_t)(v64 - &v91[v85]) < 0x20) {
              goto LABEL_113;
            }
            uint64_t v95 = (v93 >> 3) + 1;
            uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v97 = &v64[-v96];
            uint64_t v94 = (char *)&v92[v96 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v98 = &v91[8 * v86 - 16];
            uint64_t v99 = v64 - 16;
            uint64_t v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v101 = *(_OWORD *)v99;
              *(v98 - 1) = *((_OWORD *)v99 - 1);
              *unint64_t v98 = v101;
              v98 -= 2;
              v99 -= 32;
              v100 -= 4;
            }
            while (v100);
            int v64 = v97;
            if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_113:
              do
              {
LABEL_97:
                uint64_t v102 = *((void *)v64 - 1);
                v64 -= 8;
                *((void *)v94 - 1) = v102;
                v94 -= 8;
              }
              while (v64 != v84);
            }
          }
          uint64_t v65 = v92 + 2;
          *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v94;
          *((void *)this + 11) = v92 + 2;
          *((void *)this + 12) = &v91[v90];
          if (v84) {
            operator delete(v84);
          }
          goto LABEL_100;
        }
LABEL_60:
        *(_DWORD *)int v64 = v5;
        *((_DWORD *)v64 + 1) = v6;
        uint64_t v65 = v64 + 8;
LABEL_100:
        *((void *)this + 11) = v65;
LABEL_8:
        ++v6;
        int v4 = *((_DWORD *)this + 10);
      }
      while (v6 < v4);
      ++v5;
    }
    while (v5 < v4);
  }
LABEL_102:

  operations_research::sat::GenericLiteralWatcher::RegisterReversibleClass((uint64_t)v2, v103, (uint64_t)this + 8);
}

void operations_research::sat::CircuitCoveringPropagator::SetLevel(operations_research::sat::CircuitCoveringPropagator *this, int a2)
{
  unint64_t v2 = a2;
  std::vector<int>::pointer begin = (std::vector<int>::pointer)*((void *)this + 16);
  uint64_t v5 = (char *)*((void *)this + 17);
  unint64_t v3 = (std::vector<int> *)((char *)this + 128);
  unint64_t v6 = (v5 - (char *)begin) >> 2;
  if (v6 == a2) {
    return;
  }
  if (v6 < a2)
  {
    while (1)
    {
      uint64_t v9 = (*((void *)this + 14) - *((void *)this + 13)) >> 3;
      unint64_t v10 = *((void *)this + 18);
      if ((unint64_t)v5 >= v10) {
        break;
      }
      *(_DWORD *)uint64_t v5 = v9;
      uint64_t v8 = (uint64_t)(v5 + 4);
LABEL_6:
      *((void *)this + 17) = v8;
      unint64_t v6 = (v8 - (uint64_t)begin) >> 2;
      uint64_t v5 = (char *)v8;
      if (v6 >= v2) {
        return;
      }
    }
    unint64_t v11 = v6 + 1;
    if ((v6 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 - (void)begin;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
      unint64_t v15 = (int *)&v14[4 * v6];
      *unint64_t v15 = v9;
      uint64_t v8 = (uint64_t)(v15 + 1);
      if (v5 == (char *)begin) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v15 = (int *)(4 * v6);
      *(_DWORD *)(4 * v6) = v9;
      uint64_t v8 = 4 * v6 + 4;
      if (v5 == (char *)begin) {
        goto LABEL_31;
      }
    }
    unint64_t v16 = v5 - 4 - (char *)begin;
    if (v16 >= 0xBC)
    {
      uint64_t v18 = 4 * v6;
      if (&v14[4 * v6 - 4 - (v16 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[4 * v6 - 4])
      {
        BOOL v17 = v5;
      }
      else if (&v5[-(v16 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
      {
        BOOL v17 = v5;
      }
      else if ((unint64_t)(v5 - &v14[v18]) >= 0x20)
      {
        uint64_t v19 = (v16 >> 2) + 1;
        uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        BOOL v17 = &v5[-v20];
        unint64_t v15 = (int *)((char *)v15 - v20);
        unint64_t v21 = &v14[v18 - 16];
        unint64_t v22 = v5 - 16;
        uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
      }
      else
      {
        BOOL v17 = v5;
      }
    }
    else
    {
      BOOL v17 = v5;
    }
    do
    {
      int v25 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *--unint64_t v15 = v25;
    }
    while (v17 != (char *)begin);
LABEL_31:
    *((void *)this + 16) = v15;
    *((void *)this + 17) = v8;
    *((void *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v14[4 * v13];
    if (begin)
    {
      operator delete(begin);
      std::vector<int>::pointer begin = v3->__begin_;
    }
    else
    {
      std::vector<int>::pointer begin = v15;
    }
    goto LABEL_6;
  }
  unint64_t v26 = begin[a2];
  uint64_t v27 = *((void *)this + 13);
  unint64_t v28 = (*((void *)this + 14) - v27) >> 3;
  if (v26 <= v28)
  {
    if (v26 < v28) {
      *((void *)this + 14) = v27 + 8 * v26;
    }
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 13, v26 - v28);
    std::vector<int>::pointer begin = (std::vector<int>::pointer)*((void *)this + 16);
    unint64_t v6 = (uint64_t)(*((void *)this + 17) - (void)begin) >> 2;
  }
  if (v2 <= v6)
  {
    if (v2 < v6) {
      *((void *)this + 17) = &begin[v2];
    }
  }
  else
  {
    std::vector<int>::__append(v3, v2 - v6);
  }
}

void non-virtual thunk to'operations_research::sat::CircuitCoveringPropagator::SetLevel(operations_research::sat::CircuitCoveringPropagator *this, int a2)
{
}

uint64_t operations_research::sat::CircuitCoveringPropagator::IncrementalPropagate(operations_research::sat::CircuitCoveringPropagator *this, int **a2)
{
  unint64_t v3 = *a2;
  int v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v28 = (char **)((char *)this + 104);
    uint64_t v5 = (char *)*((void *)this + 14);
    while (1)
    {
      uint64_t v7 = *v3;
      uint64_t v8 = *((void *)this + 10);
      unint64_t v9 = *((void *)this + 15);
      if ((unint64_t)v5 >= v9) {
        break;
      }
      *(void *)uint64_t v5 = *(void *)(v8 + 8 * v7);
      uint64_t v6 = (uint64_t)(v5 + 8);
LABEL_4:
      *((void *)this + 14) = v6;
      ++v3;
      uint64_t v5 = (char *)v6;
      if (v3 == v4) {
        goto LABEL_32;
      }
    }
    unint64_t v10 = *v28;
    uint64_t v11 = v5 - *v28;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v16 = operator new(8 * v15);
      BOOL v17 = &v16[8 * v12];
      *BOOL v17 = *(void *)(v8 + 8 * v7);
      uint64_t v6 = (uint64_t)(v17 + 1);
      if (v5 == v10) {
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v16 = 0;
      BOOL v17 = (void *)(8 * v12);
      *(void *)(8 * v12) = *(void *)(v8 + 8 * v7);
      uint64_t v6 = 8 * v12 + 8;
      if (v5 == v10) {
        goto LABEL_30;
      }
    }
    unint64_t v18 = v5 - 8 - v10;
    if (v18 >= 0x168)
    {
      if (&v16[v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        uint64_t v19 = v5;
      }
      else if (&v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
      {
        uint64_t v19 = v5;
      }
      else if ((unint64_t)(v5 - &v16[v11]) >= 0x20)
      {
        uint64_t v20 = (v18 >> 3) + 1;
        uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v19 = &v5[-v21];
        BOOL v17 = (void *)((char *)v17 - v21);
        unint64_t v22 = &v16[8 * v12 - 16];
        uint64_t v23 = v5 - 16;
        uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *unint64_t v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 4;
        }
        while (v24);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v19 = v5;
      }
    }
    else
    {
      uint64_t v19 = v5;
    }
    do
    {
      uint64_t v26 = *((void *)v19 - 1);
      v19 -= 8;
      *--BOOL v17 = v26;
    }
    while (v19 != v10);
LABEL_29:
    uint64_t v5 = *v28;
LABEL_30:
    *((void *)this + 13) = v17;
    *((void *)this + 14) = v6;
    *((void *)this + 15) = &v16[8 * v15];
    if (v5) {
      operator delete(v5);
    }
    goto LABEL_4;
  }
LABEL_32:

  return operations_research::sat::CircuitCoveringPropagator::Propagate(this);
}

uint64_t operations_research::sat::CircuitCoveringPropagator::Propagate(operations_research::sat::CircuitCoveringPropagator *this)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unint64_t v3 = (int *)((char *)this + 40);
  std::vector<int>::size_type v2 = *((int *)this + 10);
  int v4 = (uint64_t *)((char *)this + 152);
  std::vector<int>::value_type v47 = -1;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 152), v2, &v47);
  uint64_t v5 = (void *)((char *)this + 176);
  std::vector<int>::size_type v6 = *v3;
  std::vector<int>::value_type v47 = -1;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 176), v6, &v47);
  uint64_t v7 = (int *)*((void *)this + 13);
  uint64_t v8 = (int *)*((void *)this + 14);
  if (v7 != v8)
  {
    uint64_t v9 = *v4;
    do
    {
      uint64_t v10 = *v7;
      uint64_t v11 = *(int *)(v9 + 4 * v10);
      if (v11 != -1)
      {
        uint64_t v19 = *(void *)(*((void *)this + 2) + 24 * (int)v10);
        std::vector<int>::value_type v47 = *(_DWORD *)(v19 + 4 * v11) ^ 1;
        int v48 = *(_DWORD *)(v19 + 4 * v7[1]) ^ 1;
        uint64_t v20 = *((void *)this + 9);
        *(void *)(v20 + 144) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v20 + 96), (char *)&v47, (char *)&v49, 2uLL);
        return 0;
      }
      *(_DWORD *)(v9 + 4 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v7[1];
      uint64_t v12 = v7[1];
      int v13 = *(_DWORD *)(*v5 + 4 * v12);
      if (v13 != -1)
      {
        uint64_t v21 = *((void *)this + 2);
        uint64_t v22 = 4 * v12;
        std::vector<int>::value_type v47 = *(_DWORD *)(*(void *)(v21 + 24 * v13) + v22) ^ 1;
        int v48 = *(_DWORD *)(*(void *)(v21 + 24 * *v7) + v22) ^ 1;
        uint64_t v23 = *((void *)this + 9);
        *(void *)(v23 + 144) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v23 + 96), (char *)&v47, (char *)&v49, 2uLL);
        return 0;
      }
      int v14 = *v7;
      v7 += 2;
      *(_DWORD *)(*v5 + 4 * v12) = v14;
    }
    while (v7 != v8);
  }
  unint64_t v15 = *((int *)this + 10);
  unint64_t v16 = (uint64_t *)((char *)this + 200);
  LOBYTE(v47) = 0;
  std::vector<BOOL>::assign((char **)this + 25, v15, &v47);
  int v17 = *((_DWORD *)this + 10);
  if (v17 < 1) {
    return 1;
  }
  unint64_t v18 = 0;
  while (1)
  {
    uint64_t v24 = *v16;
    if ((*(void *)(*v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18)) {
      goto LABEL_11;
    }
    uint64_t v25 = *(unsigned int *)(*v5 + 4 * v18);
    if (v25 == -1)
    {
      if (v18 == 0xFFFFFFFF || *(_DWORD *)(*v4 + 4 * v18) == -1) {
        goto LABEL_11;
      }
      unint64_t v28 = (int)v18;
      uint64_t v26 = v18;
    }
    else
    {
      if (v18 == v25) {
        goto LABEL_11;
      }
      do
      {
        uint64_t v26 = v25;
        uint64_t v25 = *(unsigned int *)(*v5 + 4 * (int)v25);
      }
      while (v25 != -1 && v18 != v25);
      unint64_t v28 = (int)v26;
    }
    uint64_t v29 = *((void *)this + 6);
    uint64_t v30 = (v28 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v31 = *((void *)this + 19);
    uint64_t v32 = *(unsigned int *)(v31 + 4 * v28);
    if ((*(void *)(v29 + v30) & (1 << v28)) != 0) {
      uint64_t v33 = v26;
    }
    else {
      uint64_t v33 = 0xFFFFFFFFLL;
    }
    *(void *)(v24 + v30) |= 1 << v28;
    if (v32 != -1 && v32 != v26)
    {
      while (1)
      {
        uint64_t v36 = v32;
        unint64_t v44 = (unint64_t)(int)v32 >> 6;
        if ((*(void *)(v29 + 8 * v44) & (1 << v32)) != 0)
        {
          uint64_t v35 = v32;
          if (v33 != -1)
          {
            uint64_t v45 = *((void *)this + 9);
            *(void *)(v45 + 144) = 0;
            operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason((uint64_t)this, v33, v32, v45 + 96);
            return 0;
          }
        }
        else
        {
          uint64_t v35 = v33;
        }
        *(void *)(v24 + 8 * v44) |= 1 << v32;
        uint64_t v32 = *(unsigned int *)(v31 + 4 * (int)v32);
        BOOL v43 = v32 == -1 || v32 == v26;
        uint64_t v33 = v35;
        if (v43) {
          goto LABEL_33;
        }
      }
    }
    LODWORD(v35) = v33;
    uint64_t v36 = v26;
LABEL_33:
    if (v26 == v32 && v35 == -1) {
      break;
    }
    if (v32 == -1 && v35 == -1)
    {
      uint64_t v39 = *((void *)this + 9);
      int v40 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 24 * (int)v36) + 4 * v28);
      if (((*(void *)(*(void *)(v39 + 24) + (((unint64_t)v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 & 0x3F ^ 1u)) & 1) == 0)
      {
        unint64_t EmptyVectorToStoreReason = operations_research::sat::Trail::GetEmptyVectorToStoreReason((operations_research::sat::Trail *)v39, *(_DWORD *)(v39 + 12));
        operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason((uint64_t)this, v26, v36, EmptyVectorToStoreReason);
        uint64_t result = operations_research::sat::Trail::EnqueueWithStoredReason(*((void *)this + 9), *(_DWORD *)(*(void *)(*((void *)this + 2) + 24 * (int)v36) + 4 * v28) ^ 1u);
        if (!result) {
          return result;
        }
        int v17 = *((_DWORD *)this + 10);
      }
    }
LABEL_11:
    if ((uint64_t)++v18 >= v17) {
      return 1;
    }
  }
  uint64_t v46 = *((void *)this + 9);
  *(void *)(v46 + 144) = 0;
  operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason((uint64_t)this, v26, v26, v46 + 96);
  return 0;
}

uint64_t operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(char **)a4;
  *(void *)(a4 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(void *)a4;
  uint64_t v8 = *(void *)(result + 152);
  uint64_t v30 = result;
  do
  {
    int v10 = *(_DWORD *)(*(void *)(*(void *)(result + 16) + 24 * a2) + 4 * *(int *)(v8 + 4 * a2)) ^ 1;
    unint64_t v11 = *(void *)(a4 + 16);
    if ((unint64_t)v7 < v11)
    {
      *(_DWORD *)uint64_t v7 = v10;
      uint64_t v9 = (uint64_t)(v7 + 4);
      goto LABEL_3;
    }
    uint64_t v12 = a3;
    int v13 = *(char **)a4;
    uint64_t v14 = (uint64_t)&v7[-*(void *)a4];
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v11 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(4 * v18);
      uint64_t v20 = (int *)&v19[4 * v15];
      *uint64_t v20 = v10;
      uint64_t v9 = (uint64_t)(v20 + 1);
      if (v7 == v13)
      {
LABEL_24:
        a3 = v12;
        *(void *)a4 = v20;
        *(void *)(a4 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v9;
        *(void *)(a4 + 16) = &v19[4 * v18];
        if (!v13) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v13);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (int *)(4 * v15);
      *(_DWORD *)(4 * v15) = v10;
      uint64_t v9 = 4 * v15 + 4;
      if (v7 == v13) {
        goto LABEL_24;
      }
    }
    unint64_t v21 = v7 - 4 - v13;
    if (v21 < 0xBC
      || &v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4]
      || &v7[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
      || (unint64_t)(v7 - v19 - v14) < 0x20)
    {
      uint64_t v22 = v7;
      a3 = v12;
      do
      {
LABEL_19:
        int v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--uint64_t v20 = v23;
      }
      while (v22 != v13);
      goto LABEL_20;
    }
    uint64_t v24 = (v21 >> 2) + 1;
    uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v22 = &v7[-v25];
    uint64_t v20 = (int *)((char *)v20 - v25);
    uint64_t v26 = &v19[4 * v15 - 16];
    uint64_t v27 = v7 - 16;
    uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
    a3 = v12;
    do
    {
      long long v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *uint64_t v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_19;
    }
LABEL_20:
    *(void *)a4 = v20;
    *(void *)(a4 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v9;
    *(void *)(a4 + 16) = &v19[4 * v18];
    if (v13) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t result = v30;
LABEL_3:
    *(void *)(a4 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v9;
    uint64_t v8 = *(void *)(result + 152);
    a2 = *(_DWORD *)(v8 + 4 * a2);
    uint64_t v7 = (char *)v9;
  }
  while (a2 != a3);
  return result;
}

void operations_research::sat::ExactlyOnePerRowAndPerColumn(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, a1);
  *(void *)(a2 + 24) = 0;
  unint64_t v3 = operator new(0x20uLL);
  *unint64_t v3 = &unk_26F0BDC70;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(v3 + 1, (uint64_t *)&__p);
  *(void *)(a2 + 24) = v3;
  int v4 = (char *)__p;
  if (__p)
  {
    uint64_t v5 = v11;
    std::vector<int>::size_type v6 = __p;
    if (v11 != __p)
    {
      uint64_t v7 = v11;
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 3);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *((void *)v5 - 2) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      std::vector<int>::size_type v6 = __p;
    }
    unint64_t v11 = v4;
    operator delete(v6);
  }
}

void sub_23CBBAD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  operator delete(v10);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_23CBBAD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ReindexArcs(int **a1, int **a2)
{
  unint64_t v2 = (char *)a1[1] - (char *)*a1;
  if ((v2 >> 2))
  {
    int v40 = 0;
    uint64_t v41 = 0;
    uint64_t v39 = &v40;
    uint64_t v5 = (v2 >> 2);
    unint64_t v38 = v2 >> 2;
    if ((int)(v2 >> 2) <= 0)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = v40;
        int v9 = (*a1)[v7];
        int v10 = &v40;
        unint64_t v11 = &v40;
        if (v40)
        {
          uint64_t v12 = v40;
          while (1)
          {
            while (1)
            {
              unint64_t v11 = (uint64_t **)v12;
              int v13 = *((_DWORD *)v12 + 7);
              if (v9 >= v13) {
                break;
              }
              uint64_t v12 = *v11;
              int v10 = v11;
              if (!*v11) {
                goto LABEL_13;
              }
            }
            if (v13 >= v9) {
              break;
            }
            uint64_t v12 = v11[1];
            if (!v12)
            {
              int v10 = v11 + 1;
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          uint64_t v14 = operator new(0x20uLL);
          v14[7] = v9;
          *(void *)uint64_t v14 = 0;
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = v11;
          *int v10 = (uint64_t *)v14;
          if (*v39)
          {
            uint64_t v39 = (uint64_t **)*v39;
            uint64_t v14 = *v10;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v40, (uint64_t *)v14);
          uint64_t v8 = v40;
          uint64_t v6 = ++v41;
        }
        int v15 = (*a2)[v7];
        unint64_t v16 = &v40;
        uint64_t v17 = &v40;
        if (v8)
        {
          unint64_t v18 = v8;
          while (1)
          {
            while (1)
            {
              uint64_t v17 = (uint64_t **)v18;
              int v19 = *((_DWORD *)v18 + 7);
              if (v15 >= v19) {
                break;
              }
              unint64_t v18 = *v17;
              unint64_t v16 = v17;
              if (!*v17) {
                goto LABEL_23;
              }
            }
            if (v19 >= v15) {
              break;
            }
            unint64_t v18 = v17[1];
            if (!v18)
            {
              unint64_t v16 = v17 + 1;
              goto LABEL_23;
            }
          }
        }
        else
        {
LABEL_23:
          uint64_t v20 = operator new(0x20uLL);
          v20[7] = v15;
          *(void *)uint64_t v20 = 0;
          *((void *)v20 + 1) = 0;
          *((void *)v20 + 2) = v17;
          *unint64_t v16 = (uint64_t *)v20;
          if (*v39)
          {
            uint64_t v39 = (uint64_t **)*v39;
            uint64_t v20 = *v16;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v40, (uint64_t *)v20);
          uint64_t v6 = ++v41;
        }
        ++v7;
      }
      while (v7 != v5);
      unint64_t v21 = v40;
      if (v40)
      {
        uint64_t v22 = v40;
        do
        {
          int v23 = v22;
          uint64_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
        uint64_t v24 = 0;
        int v25 = *((_DWORD *)v23 + 7);
        int v26 = v25 + 1;
        if (v25 == -1) {
          goto LABEL_29;
        }
        goto LABEL_36;
      }
    }
    uint64_t v28 = &v40;
    do
    {
      long long v29 = (uint64_t *)v28;
      uint64_t v28 = (uint64_t **)v28[2];
    }
    while (*v28 == v29);
    unint64_t v21 = 0;
    uint64_t v24 = 0;
    int v25 = *((_DWORD *)v28 + 7);
    int v26 = v25 + 1;
    if (v25 == -1)
    {
LABEL_29:
      uint64_t v27 = v39;
      if (v39 == &v40) {
        goto LABEL_46;
      }
      goto LABEL_38;
    }
LABEL_36:
    if (v25 <= -2) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v30 = 4 * v26;
    uint64_t v24 = operator new(v30);
    bzero(v24, v30);
    uint64_t v27 = v39;
    if (v39 == &v40)
    {
LABEL_46:
      if ((int)v38 < 1)
      {
        if (!v24)
        {
LABEL_52:
          std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v39, v21);
          return v6;
        }
      }
      else
      {
        uint64_t v35 = *a1;
        uint64_t v36 = *a2;
        do
        {
          *uint64_t v35 = *((_DWORD *)v24 + *v35);
          ++v35;
          *uint64_t v36 = *((_DWORD *)v24 + *v36);
          ++v36;
          --v5;
        }
        while (v5);
      }
      operator delete(v24);
      unint64_t v21 = v40;
      goto LABEL_52;
    }
LABEL_38:
    int v31 = 0;
    do
    {
      *((_DWORD *)v24 + *((int *)v27 + 7)) = v31;
      uint64_t v32 = v27[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = (uint64_t **)v32;
          uint64_t v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (uint64_t **)v27[2];
          BOOL v34 = *v33 == (uint64_t *)v27;
          uint64_t v27 = v33;
        }
        while (!v34);
      }
      ++v31;
      uint64_t v27 = v33;
    }
    while (v33 != &v40);
    goto LABEL_46;
  }
  return 0;
}

void sub_23CBBB0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_23CBBB100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

void operations_research::sat::SubcircuitConstraint(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v11 = *(const void **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  int64_t v12 = v10 - *(void *)a2;
  if (v10 == *(void *)a2)
  {
    uint64_t v14 = 0;
    int v13 = 0;
    unint64_t v16 = *(const void **)a3;
    uint64_t v25 = *(void *)(a3 + 8);
    int64_t v17 = v25 - *(void *)a3;
    if (v25 != *(void *)a3) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v13 = (char *)operator new(v10 - *(void *)a2);
    uint64_t v14 = &v13[4 * (v12 >> 2)];
    memcpy(v13, v11, v12);
    unint64_t v16 = *(const void **)a3;
    uint64_t v15 = *(void *)(a3 + 8);
    int64_t v17 = v15 - *(void *)a3;
    if (v15 != *(void *)a3)
    {
LABEL_4:
      if (v17 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = (char *)operator new(v17);
      int v19 = &v18[4 * (v17 >> 2)];
      memcpy(v18, v16, v17);
      unint64_t v21 = *(const void **)a4;
      uint64_t v20 = *(void *)(a4 + 8);
      int64_t v22 = v20 - *(void *)a4;
      if (v20 != *(void *)a4) {
        goto LABEL_6;
      }
LABEL_10:
      uint64_t v24 = 0;
      int v23 = 0;
      goto LABEL_11;
    }
  }
  int v19 = 0;
  unint64_t v18 = 0;
  unint64_t v21 = *(const void **)a4;
  uint64_t v26 = *(void *)(a4 + 8);
  int64_t v22 = v26 - *(void *)a4;
  if (v26 == *(void *)a4) {
    goto LABEL_10;
  }
LABEL_6:
  if (v22 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  int v23 = (char *)operator new(v22);
  uint64_t v24 = &v23[4 * (v22 >> 2)];
  memcpy(v23, v21, v22);
LABEL_11:
  char v38 = a5;
  *(void *)(a6 + 24) = 0;
  uint64_t v27 = operator new(0x58uLL);
  void *v27 = &unk_26F0BDD70;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = 0;
  uint64_t v28 = v14 - v13;
  if (v14 != v13)
  {
    if (v28 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long v29 = (char *)operator new(v14 - v13);
    v27[1] = v29;
    size_t v30 = &v29[4 * (v28 >> 2)];
    v27[3] = v30;
    memcpy(v29, v13, v14 - v13);
    v27[2] = v30;
  }
  v27[4] = 0;
  v27[5] = 0;
  void v27[6] = 0;
  uint64_t v31 = v19 - v18;
  if (v19 != v18)
  {
    if (v31 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = (char *)operator new(v19 - v18);
    v27[4] = v32;
    uint64_t v33 = &v32[4 * (v31 >> 2)];
    void v27[6] = v33;
    memcpy(v32, v18, v19 - v18);
    v27[5] = v33;
  }
  v27[7] = 0;
  v27[8] = 0;
  v27[9] = 0;
  int64_t v34 = v24 - v23;
  if (v24 != v23)
  {
    if (v34 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = (char *)operator new(v24 - v23);
    v27[7] = v35;
    uint64_t v36 = &v35[4 * (v34 >> 2)];
    v27[9] = v36;
    memcpy(v35, v23, v34);
    v27[8] = v36;
  }
  *((_DWORD *)v27 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = a1;
  *((unsigned char *)v27 + 84) = v38;
  *(void *)(a6 + 24) = v27;
  if (v23) {
    operator delete(v23);
  }
  if (v18) {
    operator delete(v18);
  }
  if (v13)
  {
    operator delete(v13);
  }
}

void sub_23CBBB430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CBBB444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unint64_t v16 = *v14;
  if (*v14)
  {
    v11[8] = v16;
    operator delete(v16);
    int64_t v17 = *v13;
    if (!*v13)
    {
LABEL_3:
      unint64_t v18 = *v12;
      if (!*v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v17 = *v13;
    if (!*v13) {
      goto LABEL_3;
    }
  }
  v11[5] = v17;
  operator delete(v17);
  unint64_t v18 = *v12;
  if (!*v12)
  {
LABEL_5:
    operator delete(v11);
    operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0::~$_0((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v11[2] = v18;
  operator delete(v18);
  goto LABEL_5;
}

void sub_23CBBB4B4()
{
  if (!*v0) {
    JUMPOUT(0x23CBBB468);
  }
  JUMPOUT(0x23CBBB460);
}

void sub_23CBBB4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a17)
  {
    operator delete(a17);
    int v19 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v20 = __p;
      if (!__p) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int v19 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  uint64_t v20 = __p;
  if (!__p) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v20);
  goto LABEL_5;
}

void sub_23CBBB524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11) {
    JUMPOUT(0x23CBBB4E8);
  }
  JUMPOUT(0x23CBBB4E0);
}

uint64_t operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0::~$_0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::CircuitCovering(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, a1);
  unint64_t v21 = 0;
  int64_t v22 = 0;
  int v23 = 0;
  uint64_t v5 = *(const void **)a2;
  int64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = (char *)operator new(v6);
    int64_t v22 = v21;
    uint64_t v7 = &v21[4 * (v6 >> 2)];
    int v23 = v7;
    memcpy(v21, v5, v6);
    int64_t v22 = v7;
  }
  *(void *)(a3 + 24) = 0;
  uint64_t v8 = operator new(0x38uLL);
  void *v8 = &unk_26F0BDE28;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(v8 + 1, (uint64_t *)&__p);
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  int v9 = v21;
  int64_t v10 = v22 - v21;
  if (v22 != v21)
  {
    if (v10 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = (char *)operator new(v22 - v21);
    v8[4] = v11;
    v8[5] = v11;
    int64_t v12 = &v11[4 * (v10 >> 2)];
    v8[6] = v12;
    memcpy(v11, v9, v10);
    v8[5] = v12;
  }
  *(void *)(a3 + 24) = v8;
  if (v9)
  {
    int64_t v22 = v9;
    operator delete(v9);
  }
  int v13 = (char *)__p;
  if (__p)
  {
    uint64_t v14 = v20;
    uint64_t v15 = __p;
    if (v20 != __p)
    {
      unint64_t v16 = v20;
      do
      {
        unint64_t v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        int64_t v17 = v18;
        if (v18)
        {
          *((void *)v14 - 2) = v17;
          operator delete(v17);
        }
        uint64_t v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = __p;
    }
    uint64_t v20 = v13;
    operator delete(v15);
  }
}

void sub_23CBBB704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  operator delete(v9);
  operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(&a9);
  _Unwind_Resume(a1);
}

void sub_23CBBB720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_23CBBB734(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  int v19 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v19;
    operator delete(v19);
  }
  operations_research::sat::CircuitCovering((void **)(v15 + 8), v15, a1, a2, (uint64_t)&a15);
  uint64_t v20 = a15;
  operator delete((void *)v15);
  operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(&a9);
  _Unwind_Resume(v20);
}

void sub_23CBBB780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)&a9);
  _Unwind_Resume(a1);
}

void **operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(void **a1)
{
  unint64_t v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (char *)*a1;
  if (*a1)
  {
    int v4 = (char *)a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      int64_t v6 = (char *)a1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        int v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void operations_research::sat::CircuitPropagator::~CircuitPropagator(operations_research::sat::CircuitPropagator *this)
{
  operations_research::sat::CircuitPropagator::~CircuitPropagator(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  *(void *)this = &unk_26F0BDB40;
  *((void *)this + 1) = &unk_26F0BDB78;
  unint64_t v2 = (void *)*((void *)this + 43);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 40);
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 3google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  int64_t v6 = (void *)*((void *)this + 30);
  if (v6)
  {
    *((void *)this + 31) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 2google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 24);
  if (v8)
  {
    *((void *)this + 25) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    *((void *)this + 22) = v9;
    operator delete(v9);
  }
  int64_t v10 = *((void *)this + 17);
  if (v10)
  {
    unint64_t v11 = *((void *)this + 18);
    int64_t v12 = (void *)*((void *)this + 17);
    if (v11 != v10)
    {
      int v13 = *((void *)this + 18);
      do
      {
        uint64_t v15 = *(void **)(v13 - 24);
        v13 -= 24;
        uint64_t v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        unint64_t v11 = v13;
      }
      while (v13 != v10);
      int64_t v12 = (void *)*((void *)this + 17);
    }
    *((void *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v10;
    operator delete(v12);
  }
  unint64_t v16 = (void *)*((void *)this + 14);
  if (v16)
  {
    *((void *)this + 15) = v16;
    operator delete(v16);
  }
  if (*((void *)this + 11))
  {
    operator delete(*((void **)this + 8));
    *((void *)this + 13) = 0;
    *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 9) = 0;
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
    *((void *)this + 11) = 0;
  }
  int64_t v17 = (void *)*((void *)this + 12);
  if (v17) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 5);
  if (v18)
  {
    *((void *)this + 6) = v18;
    operator delete(v18);
  }
}

void non-virtual thunk to'operations_research::sat::CircuitPropagator::~CircuitPropagator(operations_research::sat::CircuitPropagator *this)
{
}

{
  uint64_t vars8;

  operations_research::sat::CircuitPropagator::~CircuitPropagator((operations_research::sat::CircuitPropagator *)((char *)this - 8));

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator(operations_research::sat::CircuitCoveringPropagator *this)
{
  operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  *(void *)this = &unk_26F0BDBA0;
  *((void *)this + 1) = &unk_26F0BDBD8;
  unint64_t v2 = (void *)*((void *)this + 25);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  int64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8) {
    operator delete(v8);
  }
  int v9 = *((void *)this + 2);
  if (v9)
  {
    int64_t v10 = *((void *)this + 3);
    unint64_t v11 = (void *)*((void *)this + 2);
    if (v10 != v9)
    {
      int64_t v12 = *((void *)this + 3);
      do
      {
        uint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        int v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        int64_t v10 = v12;
      }
      while (v12 != v9);
      unint64_t v11 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v9;
    operator delete(v11);
  }
}

void non-virtual thunk to'operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator(operations_research::sat::CircuitCoveringPropagator *this)
{
}

{
  uint64_t vars8;

  operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator((operations_research::sat::CircuitCoveringPropagator *)((char *)this - 8));

  JUMPOUT(0x23ECF2BC0);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  int v4 = *a1;
  uint64_t v5 = a1[1];
  int64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    uint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  int v9 = (char *)operator new(v8 + 12 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v27 = a1[4];
    if (!v27) {
      return;
    }
LABEL_21:
    *((void *)v27 + 4) = v14 >> 3;
    *((void *)v27 + 2) = 0;
    return;
  }
  int v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v20 = &v5[12 * (void)v13];
      unint64_t v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(unsigned int *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)v20)))
          + *((unsigned int *)v20 + 1);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      int v23 = *a1;
      uint64_t v24 = a1[3];
      unint64_t v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      unint64_t v26 = *(void *)&(*a1)[v25] & (~*(void *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v25 = (v15 + v25) & (unint64_t)v24;
          unint64_t v26 = *(void *)&v23[v25] & (~*(void *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      char v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = *(void *)v20;
      uint64_t v19 = (uint64_t)&a1[1][12 * v16];
      *(_DWORD *)(v19 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *((_DWORD *)v20 + 2);
      *(void *)uint64_t v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v27 = a1[4];
  if (v27) {
    goto LABEL_21;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<int,int>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    int v13 = (int *)(a1[1] + 12 * v12);
    int v15 = *v13;
    int v14 = v13[1];
    if (v15 == v3 && v14 == v4) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v39 = *(void *)(result + 32);
    if (!v39) {
      return result;
    }
LABEL_26:
    *(void *)(v39 + 32) = v15 >> 3;
    *(void *)(v39 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(unsigned int *)(*(void *)(result + 8) + 12 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)(*(void *)(result + 8) + 12 * v14))))
          + *(unsigned int *)(*(void *)(result + 8) + 12 * v14 + 4);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          uint64_t v26 = v25 + 12 * v18;
          uint64_t v27 = (uint64_t *)(v25 + 12 * v14);
          uint64_t v28 = *v27;
          *(_DWORD *)(v26 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *((_DWORD *)v27 + 2);
          *(void *)uint64_t v26 = v28;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          long long v29 = (uint64_t *)(v25 + 12 * v14);
          uint64_t v30 = *v29;
          int v31 = *((_DWORD *)v29 + 2);
          uint64_t v32 = 12 * v18;
          uint64_t v33 = (uint64_t *)(v25 + 12 * v18);
          int v34 = *((_DWORD *)v33 + 2);
          *long long v29 = *v33;
          *((_DWORD *)v29 + 2) = v34;
          uint64_t v35 = *(void *)(result + 8) + v32;
          *(void *)uint64_t v35 = v30;
          *(_DWORD *)(v35 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v36 = v14 - (v14 >> 3);
  BOOL v37 = v14 == 7;
  uint64_t v38 = 6;
  if (!v37) {
    uint64_t v38 = v36;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v38 - *(void *)(result + 16);
  uint64_t v39 = *(void *)(result + 32);
  if (v39) {
    goto LABEL_26;
  }
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  int8x16_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  int8x16_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  int8x16_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int8x16_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int8x16_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = &v5[8 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      unint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

char *std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 24 * v5;
  unint64_t v8 = (char *)operator new(24 * v5);
  int8x16_t v9 = &v8[24 * v3];
  uint64_t v10 = &v8[v7];
  *(_OWORD *)int8x16_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int8x16_t v11 = v9 + 24;
  unint64_t v13 = *a1;
  int8x16_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    long long v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v12 + 2);
    *(void *)int8x16_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
  }
  while (v12 != v13);
  uint64_t v15 = *a1;
  int8x16_t v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    unint64_t v16 = v12;
    do
    {
      unint64_t v18 = (void *)*((void *)v16 - 3);
      v16 -= 24;
      char v17 = v18;
      if (v18)
      {
        *((void *)v12 - 2) = v17;
        operator delete(v17);
      }
      int8x16_t v12 = v16;
    }
    while (v16 != v15);
    int8x16_t v12 = v15;
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v11;
}

void *std::vector<std::vector<operations_research::sat::Literal>>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_23CBBC92C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    std::vector<std::vector<operations_research::sat::Literal>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      int8x16_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int8x16_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_23CBBCA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CBBCA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int8x16_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDC70;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = a1[2];
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDC70;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = a1[2];
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  unint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26F0BDC70;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(v2 + 1, v1);
  return v2;
}

void sub_23CBBCC68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0BDC70;
  return std::vector<std::vector<operations_research::sat::Literal>>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = __p[1];
  if (v2)
  {
    uint64_t v3 = __p[2];
    uint64_t v4 = (void *)__p[1];
    if (v3 != v2)
    {
      uint64_t v5 = __p[2];
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v64 = *a2;
  std::string __p = 0;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v66 = 0;
  if (!(0xAAAAAAAB00000000 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)))
  {
    uint64_t v4 = 0;
    if ((int)v3 < 1) {
      goto LABEL_97;
    }
    goto LABEL_6;
  }
  if (((0xAAAAAAAB00000000 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) & 0x8000000000000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (char *)operator new((0xAAAAAAAAAAAAAAACLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) & 0x3FFFFFFFFLL);
  std::string __p = v4;
  uint64_t v66 = &v4[4 * (int)v3];
  if ((int)v3 >= 1)
  {
LABEL_6:
    uint64_t v5 = 0;
    uint64_t v6 = v3;
    while (1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = __p;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 24 * v5);
        if (v8 < v66)
        {
          *(_DWORD *)uint64_t v8 = *(_DWORD *)(v9 + 4 * v7);
          v8 += 4;
          goto LABEL_11;
        }
        int64_t v10 = __p;
        uint64_t v11 = (v8 - __p) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
LABEL_100:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v13 = v66 - __p;
        if ((v66 - __p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 62) {
LABEL_101:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v15 = operator new(4 * v14);
          unint64_t v16 = &v15[4 * v11];
          *(_DWORD *)unint64_t v16 = *(_DWORD *)(v9 + 4 * v7);
          uint64_t v17 = (uint64_t)(v16 + 4);
          if (v8 != __p)
          {
LABEL_22:
            unint64_t v18 = v8 - 4 - __p;
            if (v18 < 0xBC
              || &v15[v8 - __p - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v8 - __p - 4]
              || &v8[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4
              || (unint64_t)(__p - v15) < 0x20)
            {
              unint64_t v19 = v8;
            }
            else
            {
              uint64_t v21 = (v18 >> 2) + 1;
              uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v19 = &v8[-v22];
              v16 -= v22;
              unint64_t v23 = &v15[4 * v11 - 16];
              int v24 = v8 - 16;
              uint64_t v25 = v21 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v26 = *(_OWORD *)v24;
                *(v23 - 1) = *((_OWORD *)v24 - 1);
                *unint64_t v23 = v26;
                v23 -= 2;
                v24 -= 32;
                v25 -= 8;
              }
              while (v25);
              if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_25:
                std::string __p = v16;
                uint64_t v66 = &v15[4 * v14];
                if (v10) {
                  goto LABEL_26;
                }
                goto LABEL_29;
              }
            }
            do
            {
              int v20 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v16 - 1) = v20;
              v16 -= 4;
            }
            while (v19 != __p);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v15 = 0;
          unint64_t v16 = (char *)(4 * v11);
          *(_DWORD *)(4 * v11) = *(_DWORD *)(v9 + 4 * v7);
          uint64_t v17 = 4 * v11 + 4;
          if (v8 != __p) {
            goto LABEL_22;
          }
        }
        std::string __p = v16;
        uint64_t v66 = &v15[4 * v14];
        if (v10)
        {
LABEL_26:
          operator delete(v10);
          uint64_t v8 = (char *)v17;
          goto LABEL_11;
        }
LABEL_29:
        uint64_t v8 = (char *)v17;
LABEL_11:
        ++v7;
      }
      while (v7 != v6);
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      int64_t v27 = v8 - __p;
      if (v8 == __p)
      {
        long long v29 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        if (v27 < 0) {
          goto LABEL_104;
        }
        uint64_t v28 = (char *)operator new(v8 - __p);
        long long v29 = &v28[4 * (v27 >> 2)];
        memcpy(v28, __p, v27);
      }
      unint64_t v71 = 0;
      uint64_t v30 = operator new(0x20uLL);
      int v31 = (void (**)(void *, uint64_t *))&unk_26F0BDCE0;
      *uint64_t v30 = &unk_26F0BDCE0;
      v30[1] = 0;
      v30[2] = 0;
      v30[3] = 0;
      int64_t v32 = v29 - v28;
      if (v32)
      {
        if (v32 < 0) {
          goto LABEL_103;
        }
        uint64_t v33 = (char *)operator new(v32);
        v30[1] = v33;
        int v34 = &v33[4 * (v32 >> 2)];
        v30[3] = v34;
        memcpy(v33, v28, v32);
        v30[2] = v34;
      }
      unint64_t v71 = v30;
      if (v28)
      {
        operator delete(v28);
        uint64_t v30 = v71;
        uint64_t v67 = v64;
        if (!v71) {
          goto LABEL_102;
        }
        int v31 = (void (**)(void *, uint64_t *))*v71;
      }
      else
      {
        uint64_t v67 = v64;
      }
      v31[6](v30, &v67);
      if (v71 == v70)
      {
        (*(void (**)(void *))(v70[0] + 32))(v70);
      }
      else if (v71)
      {
        (*(void (**)(void))(*v71 + 40))();
      }
      if (++v5 == v6)
      {
        uint64_t v35 = 0;
        while (1)
        {
          uint64_t v36 = 0;
          BOOL v37 = __p;
          do
          {
            uint64_t v38 = *(void *)(*(void *)(a1 + 8) + 24 * v36);
            if (v37 < v66)
            {
              *(_DWORD *)BOOL v37 = *(_DWORD *)(v38 + 4 * v35);
              v37 += 4;
              goto LABEL_56;
            }
            uint64_t v39 = __p;
            uint64_t v40 = (v37 - __p) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              goto LABEL_100;
            }
            uint64_t v42 = v66 - __p;
            if ((v66 - __p) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              if (v43 >> 62) {
                goto LABEL_101;
              }
              unint64_t v44 = operator new(4 * v43);
              uint64_t v45 = &v44[4 * v40];
              *(_DWORD *)uint64_t v45 = *(_DWORD *)(v38 + 4 * v35);
              uint64_t v46 = (uint64_t)(v45 + 4);
              if (v37 != __p)
              {
LABEL_67:
                unint64_t v47 = v37 - 4 - __p;
                if (v47 < 0xBC
                  || &v44[v37 - __p - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v44[v37 - __p - 4]
                  || &v37[-(v47 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v37 - 4
                  || (unint64_t)(__p - v44) < 0x20)
                {
                  int v48 = v37;
                }
                else
                {
                  uint64_t v50 = (v47 >> 2) + 1;
                  uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
                  int v48 = &v37[-v51];
                  v45 -= v51;
                  long long v52 = &v44[4 * v40 - 16];
                  uint64_t v53 = v37 - 16;
                  uint64_t v54 = v50 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v55 = *(_OWORD *)v53;
                    *(v52 - 1) = *((_OWORD *)v53 - 1);
                    *long long v52 = v55;
                    v52 -= 2;
                    v53 -= 32;
                    v54 -= 8;
                  }
                  while (v54);
                  if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_70:
                    std::string __p = v45;
                    uint64_t v66 = &v44[4 * v43];
                    if (v39) {
                      goto LABEL_71;
                    }
                    goto LABEL_74;
                  }
                }
                do
                {
                  int v49 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v45 - 1) = v49;
                  v45 -= 4;
                }
                while (v48 != __p);
                goto LABEL_70;
              }
            }
            else
            {
              unint64_t v44 = 0;
              uint64_t v45 = (char *)(4 * v40);
              *(_DWORD *)(4 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = *(_DWORD *)(v38 + 4 * v35);
              uint64_t v46 = 4 * v40 + 4;
              if (v37 != __p) {
                goto LABEL_67;
              }
            }
            std::string __p = v45;
            uint64_t v66 = &v44[4 * v43];
            if (v39)
            {
LABEL_71:
              operator delete(v39);
              BOOL v37 = (char *)v46;
              goto LABEL_56;
            }
LABEL_74:
            BOOL v37 = (char *)v46;
LABEL_56:
            ++v36;
          }
          while (v36 != v6);
          uint64_t v67 = 0;
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          int64_t v56 = v37 - __p;
          if (v37 != __p)
          {
            if ((v56 & 0x8000000000000000) == 0)
            {
              int v57 = (char *)operator new(v37 - __p);
              unint64_t v58 = &v57[4 * (v56 >> 2)];
              memcpy(v57, __p, v56);
              goto LABEL_86;
            }
LABEL_104:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v58 = 0;
          int v57 = 0;
LABEL_86:
          unint64_t v71 = 0;
          unint64_t v59 = operator new(0x20uLL);
          unint64_t v60 = (void (**)(void *, uint64_t *))&unk_26F0BDCE0;
          *unint64_t v59 = &unk_26F0BDCE0;
          v59[1] = 0;
          v59[2] = 0;
          v59[3] = 0;
          int64_t v61 = v58 - v57;
          if (v61)
          {
            if ((v61 & 0x8000000000000000) == 0)
            {
              unint64_t v62 = (char *)operator new(v61);
              v59[1] = v62;
              unint64_t v63 = &v62[4 * (v61 >> 2)];
              v59[3] = v63;
              memcpy(v62, v57, v61);
              v59[2] = v63;
              goto LABEL_89;
            }
LABEL_103:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
LABEL_89:
          unint64_t v71 = v59;
          if (v57)
          {
            operator delete(v57);
            unint64_t v59 = v71;
            uint64_t v67 = v64;
            if (v71)
            {
              unint64_t v60 = (void (**)(void *, uint64_t *))*v71;
              goto LABEL_93;
            }
LABEL_102:
            std::__throw_bad_function_call[abi:ne180100]();
          }
          uint64_t v67 = v64;
LABEL_93:
          v60[6](v59, &v67);
          if (v71 == v70)
          {
            (*(void (**)(void *))(v70[0] + 32))(v70);
          }
          else if (v71)
          {
            (*(void (**)(void))(*v71 + 40))();
          }
          if (++v35 == v6)
          {
            uint64_t v4 = __p;
            goto LABEL_97;
          }
        }
      }
    }
  }
LABEL_97:
  if (v4) {
    operator delete(v4);
  }
}

void sub_23CBBD56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7LiteralENS1_9a"
                     "llocatorIS3_EEEENS4_IS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7Lit"
                                "eralENS1_9allocatorIS3_EEEENS4_IS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ExactlyOneConstraint(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a1);
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26F0BDCE0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  int64_t v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v10 = (char *)operator new(v9);
    v8[1] = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(void *)(a2 + 24) = v8;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CBBD824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDCE0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDCE0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0BDCE0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_23CBBD9D4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, void *a2)
{
  a2[1] = 0;
  *a2 = &unk_26F0BDCE0;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v3 = (unsigned char *)result[1];
  uint64_t v2 = (unsigned char *)result[2];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_23CBBDA8C(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_E"
                     "EEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9all"
                                "ocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(int **a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  int64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = (char *)v3 - (char *)*a1;
  if (v3 == *a1)
  {
    uint64_t v8 = 0;
    int64_t v9 = 0;
LABEL_21:
    uint64_t v11 = v8;
    goto LABEL_22;
  }
  if ((unint64_t)v5 >= 0x5555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = v5 >> 2;
  uint64_t v7 = (char *)operator new(12 * (v5 >> 2));
  uint64_t v8 = v7;
  int64_t v9 = &v7[12 * v6];
  uint64_t v22 = v7;
  if (v3 == v4) {
    goto LABEL_21;
  }
  int64_t v10 = v22;
  uint64_t v11 = v7;
  do
  {
    while (1)
    {
      int v12 = *v4;
      if (v8 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 4) = 1;
      int64_t v10 = v8 + 12;
      ++v4;
      v8 += 12;
      if (v4 == v3) {
        goto LABEL_19;
      }
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 2) + 1;
    if (v13 > 0x1555555555555555)
    {
      uint64_t v22 = v10;
      unint64_t v23 = v9;
      std::string __p = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((v9 - v11) >> 2) > v13) {
      unint64_t v13 = 0x5555555555555556 * ((v9 - v11) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x1555555555555555;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14 > 0x1555555555555555)
    {
      uint64_t v22 = v10;
      unint64_t v23 = v9;
      std::string __p = v11;
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(12 * v14);
    unint64_t v16 = &v15[4 * ((v8 - v11) >> 2)];
    *(_DWORD *)unint64_t v16 = v12;
    *(void *)(v16 + 4) = 1;
    for (unint64_t i = v16; v8 != v11; *((_DWORD *)i + 2) = v19)
    {
      uint64_t v18 = *(void *)(v8 - 12);
      v8 -= 12;
      int v19 = *((_DWORD *)v8 + 2);
      *(void *)(i - 12) = v18;
      i -= 12;
    }
    int64_t v9 = &v15[12 * v14];
    int64_t v10 = v16 + 12;
    if (v11) {
      operator delete(v11);
    }
    uint64_t v11 = i;
    ++v4;
    uint64_t v8 = (char *)v10;
  }
  while (v4 != v3);
LABEL_19:
  uint64_t v22 = v10;
LABEL_22:
  unint64_t v23 = v9;
  std::string __p = v11;
  uint64_t v20 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddLinearConstraint(v20, 1, 1, 1, 1, &__p);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_23CBBDDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDD70;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDD70;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  *uint64_t v2 = &unk_26F0BDD70;
  std::__compressed_pair_elem<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CBBDF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0BDD70;
  return std::__compressed_pair_elem<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[7];
  if (v2)
  {
    __p[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3)
  {
    __p[5] = v3;
    operator delete(v3);
  }
  int64_t v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v84 = (void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  v92[0] = v4 >> 2;
  LODWORD(v90[0]) = 0;
  if (v92[0] < 1) {
    google::MakeCheckOpString<int,int>((int)v92, (int)v90, "num_arcs > 0");
  }
  unint64_t v83 = (void *)(a1 + 32);
  *(void *)uint64_t v92 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
  LODWORD(v87) = v4 >> 2;
  uint64_t v5 = (int)((uint64_t)v4 >> 2);
  if (*(void *)v92 != v5) {
    google::MakeCheckOpString<unsigned long,int>((int)v92, (int)&v87, "heads.size() == num_arcs");
  }
  uint64_t v6 = (uint64_t *)(a1 + 56);
  *(void *)uint64_t v92 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2;
  LODWORD(v87) = v4 >> 2;
  if (*(void *)v92 != v5) {
    google::MakeCheckOpString<unsigned long,int>((int)v92, (int)&v87, "literals.size() == num_arcs");
  }
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v3);
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&v87, *(int *)(a1 + 80));
  uint64_t v77 = v7;
  uint64_t v78 = a1;
  uint64_t v79 = v3;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, *(int *)(a1 + 80));
  if ((int)(v4 >> 2) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v81 = (uint64_t *)(a1 + 56);
    uint64_t v82 = (v4 >> 2);
    while (1)
    {
      int v9 = *(_DWORD *)(*v83 + 4 * v8);
      int64_t v10 = (char *)__p + 24 * *(int *)(*v84 + 4 * v8);
      uint64_t v11 = *v6;
      int v12 = (uint64_t *)(v10 + 8);
      unint64_t v13 = (char *)*((void *)v10 + 1);
      unint64_t v14 = *((void *)v10 + 2);
      if ((unint64_t)v13 >= v14) {
        break;
      }
      *(_DWORD *)unint64_t v13 = *(_DWORD *)(v11 + 4 * v8);
      uint64_t v15 = (uint64_t)(v13 + 4);
LABEL_29:
      *int v12 = v15;
      uint64_t v33 = (char *)v87 + 24 * v9;
      uint64_t v34 = *v6;
      uint64_t v35 = (uint64_t *)(v33 + 8);
      uint64_t v36 = (char *)*((void *)v33 + 1);
      unint64_t v37 = *((void *)v33 + 2);
      if ((unint64_t)v36 < v37)
      {
        *(_DWORD *)uint64_t v36 = *(_DWORD *)(v34 + 4 * v8);
        *uint64_t v35 = (uint64_t)(v36 + 4);
        if (++v8 == v82) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v38 = *(char **)v33;
        uint64_t v39 = (uint64_t)&v36[-*(void *)v33];
        uint64_t v40 = v39 >> 2;
        unint64_t v41 = (v39 >> 2) + 1;
        if (v41 >> 62) {
LABEL_112:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v42 = v37 - (void)v38;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          if (v43 >> 62) {
LABEL_113:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v44 = operator new(4 * v43);
          uint64_t v45 = &v44[4 * v40];
          *uint64_t v45 = *(_DWORD *)(v34 + 4 * v8);
          uint64_t v46 = (uint64_t)(v45 + 1);
          if (v36 == v38)
          {
LABEL_42:
            uint64_t v6 = v81;
            goto LABEL_48;
          }
        }
        else
        {
          unint64_t v44 = 0;
          uint64_t v45 = (_DWORD *)(4 * v40);
          *(_DWORD *)(4 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = *(_DWORD *)(v34 + 4 * v8);
          uint64_t v46 = 4 * v40 + 4;
          if (v36 == v38) {
            goto LABEL_42;
          }
        }
        unint64_t v47 = v36 - 4 - v38;
        if (v47 >= 0x2C)
        {
          unint64_t v48 = v36 - &v44[v39];
          uint64_t v6 = v81;
          if (v48 >= 0x20)
          {
            uint64_t v49 = (v47 >> 2) + 1;
            uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v51 = &v36[-v50];
            uint64_t v45 = (_DWORD *)((char *)v45 - v50);
            long long v52 = &v44[4 * v40 - 16];
            uint64_t v53 = v36 - 16;
            uint64_t v54 = v49 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v55 = *(_OWORD *)v53;
              *(v52 - 1) = *((_OWORD *)v53 - 1);
              *long long v52 = v55;
              v52 -= 2;
              v53 -= 32;
              v54 -= 8;
            }
            while (v54);
            uint64_t v36 = v51;
            if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_48;
            }
          }
        }
        else
        {
          uint64_t v6 = v81;
        }
        do
        {
          int v56 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *--uint64_t v45 = v56;
        }
        while (v36 != v38);
LABEL_48:
        *(void *)uint64_t v33 = v45;
        *uint64_t v35 = v46;
        *((void *)v33 + 2) = &v44[4 * v43];
        if (v38) {
          operator delete(v38);
        }
        *uint64_t v35 = v46;
        if (++v8 == v82) {
          goto LABEL_51;
        }
      }
    }
    unint64_t v16 = *(char **)v10;
    uint64_t v17 = (uint64_t)&v13[-*(void *)v10];
    uint64_t v18 = v17 >> 2;
    unint64_t v19 = (v17 >> 2) + 1;
    if (v19 >> 62) {
      goto LABEL_112;
    }
    uint64_t v20 = v14 - (void)v16;
    if (v20 >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    int v80 = *(_DWORD *)(*v83 + 4 * v8);
    if (v21)
    {
      if (v21 >> 62) {
        goto LABEL_113;
      }
      uint64_t v22 = operator new(4 * v21);
      unint64_t v23 = &v22[4 * v18];
      *unint64_t v23 = *(_DWORD *)(v11 + 4 * v8);
      uint64_t v15 = (uint64_t)(v23 + 1);
      if (v13 == v16) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(_DWORD *)(v11 + 4 * v8);
      uint64_t v15 = 4 * v18 + 4;
      if (v13 == v16)
      {
LABEL_26:
        *(void *)int64_t v10 = v23;
        *int v12 = v15;
        *((void *)v10 + 2) = &v22[4 * v21];
        if (v16) {
          operator delete(v16);
        }
        int v9 = v80;
        uint64_t v6 = v81;
        goto LABEL_29;
      }
    }
    unint64_t v24 = v13 - 4 - v16;
    if (v24 < 0x2C) {
      goto LABEL_118;
    }
    if ((unint64_t)(v13 - &v22[v17]) < 0x20) {
      goto LABEL_118;
    }
    uint64_t v25 = (v24 >> 2) + 1;
    uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
    int64_t v27 = &v13[-v26];
    unint64_t v23 = (_DWORD *)((char *)v23 - v26);
    uint64_t v28 = &v22[4 * v18 - 16];
    long long v29 = v13 - 16;
    uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *uint64_t v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    unint64_t v13 = v27;
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_118:
      do
      {
        int v32 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--unint64_t v23 = v32;
      }
      while (v13 != v16);
    }
    goto LABEL_26;
  }
LABEL_51:
  int v57 = v87;
  unint64_t v58 = v88;
  if (v88 != v87)
  {
    if (!*(unsigned char *)(v78 + 84))
    {
      operations_research::sat::ExactlyOneConstraint((uint64_t)v87, (uint64_t)v92);
      v90[0] = v79;
      if (!v93) {
        goto LABEL_114;
      }
      (*(void (**)(int *, void *))(*(void *)v93 + 48))(v93, v90);
      if (v93 == v92)
      {
        (*(void (**)(int *))(*(void *)v92 + 32))(v92);
        if (*(unsigned char *)(v77 + 496)) {
          goto LABEL_91;
        }
      }
      else
      {
        if (v93) {
          (*(void (**)(void))(*(void *)v93 + 40))();
        }
        if (*(unsigned char *)(v77 + 496)) {
          goto LABEL_91;
        }
      }
      int v57 = v87;
      unint64_t v58 = v88;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3) >= 2)
    {
      unint64_t v59 = 1;
      uint64_t v60 = 24;
      while (1)
      {
        operations_research::sat::ExactlyOneConstraint((uint64_t)&v57[v60], (uint64_t)v92);
        v90[0] = v79;
        if (!v93) {
          break;
        }
        (*(void (**)(int *, void *))(*(void *)v93 + 48))(v93, v90);
        if (v93 == v92)
        {
          (*(void (**)(int *))(*(void *)v92 + 32))(v92);
          if (*(unsigned char *)(v77 + 496)) {
            goto LABEL_91;
          }
        }
        else
        {
          if (v93) {
            (*(void (**)(void))(*(void *)v93 + 40))();
          }
          if (*(unsigned char *)(v77 + 496)) {
            goto LABEL_91;
          }
        }
        int v57 = v87;
        ++v59;
        v60 += 24;
        if (0xAAAAAAAAAAAAAAABLL * ((v88 - (unsigned char *)v87) >> 3) <= v59) {
          goto LABEL_63;
        }
      }
LABEL_114:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
LABEL_63:
  int64_t v61 = __p;
  unint64_t v62 = v86;
  if (v86 == __p) {
    goto LABEL_75;
  }
  if (*(unsigned char *)(v78 + 84))
  {
LABEL_65:
    if (0xAAAAAAAAAAAAAAABLL * ((v62 - v61) >> 3) >= 2)
    {
      unint64_t v63 = 1;
      uint64_t v64 = 24;
      while (1)
      {
        operations_research::sat::ExactlyOneConstraint((uint64_t)&v61[v64], (uint64_t)v90);
        uint64_t v89 = v79;
        if (!v91) {
          break;
        }
        (*(void (**)(void *, uint64_t *))(*v91 + 48))(v91, &v89);
        if (v91 == v90)
        {
          (*(void (**)(void *))(v90[0] + 32))(v90);
          if (*(unsigned char *)(v77 + 496)) {
            goto LABEL_91;
          }
        }
        else
        {
          if (v91) {
            (*(void (**)(void))(*v91 + 40))();
          }
          if (*(unsigned char *)(v77 + 496)) {
            goto LABEL_91;
          }
        }
        int64_t v61 = __p;
        ++v63;
        v64 += 24;
        if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)__p) >> 3) <= v63) {
          goto LABEL_75;
        }
      }
LABEL_115:
      std::__throw_bad_function_call[abi:ne180100]();
    }
LABEL_75:
    operator new();
  }
  operations_research::sat::ExactlyOneConstraint((uint64_t)__p, (uint64_t)v90);
  uint64_t v89 = v79;
  if (!v91) {
    goto LABEL_115;
  }
  (*(void (**)(void *, uint64_t *))(*v91 + 48))(v91, &v89);
  if (v91 == v90)
  {
    (*(void (**)(void *))(v90[0] + 32))(v90);
    if (!*(unsigned char *)(v77 + 496))
    {
LABEL_108:
      int64_t v61 = __p;
      unint64_t v62 = v86;
      goto LABEL_65;
    }
  }
  else
  {
    if (v91) {
      (*(void (**)(void))(*v91 + 40))();
    }
    if (!*(unsigned char *)(v77 + 496)) {
      goto LABEL_108;
    }
  }
LABEL_91:
  uint64_t v65 = (char *)__p;
  if (__p)
  {
    uint64_t v66 = v86;
    uint64_t v67 = __p;
    if (v86 != __p)
    {
      uint64_t v68 = v86;
      do
      {
        uint64_t v70 = (void *)*((void *)v68 - 3);
        v68 -= 24;
        uint64_t v69 = v70;
        if (v70)
        {
          *((void *)v66 - 2) = v69;
          operator delete(v69);
        }
        uint64_t v66 = v68;
      }
      while (v68 != v65);
      uint64_t v67 = __p;
    }
    uint64_t v86 = v65;
    operator delete(v67);
  }
  unint64_t v71 = (char *)v87;
  if (v87)
  {
    uint64_t v72 = v88;
    uint64_t v73 = v87;
    if (v88 != v87)
    {
      unint64_t v74 = v88;
      do
      {
        uint64_t v76 = (void *)*((void *)v74 - 3);
        v74 -= 24;
        unint64_t v75 = v76;
        if (v76)
        {
          *((void *)v72 - 2) = v75;
          operator delete(v75);
        }
        uint64_t v72 = v74;
      }
      while (v74 != v71);
      uint64_t v73 = v87;
    }
    uint64_t v88 = v71;
    operator delete(v73);
  }
}

void sub_23CBBEA38()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 128));
}

void sub_23CBBEA40()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 128));
}

void sub_23CBBEA48()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 128));
}

void sub_23CBBEA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,char *a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *a28)
{
  if (a28 == &a25)
  {
    (*(void (**)(uint64_t *))(a25 + 32))(&a25);
  }
  else if (a28)
  {
    (*(void (**)(void))(*a28 + 40))();
  }
  if (__p)
  {
    long long v29 = a19;
    uint64_t v30 = __p;
    if (a19 != __p)
    {
      long long v31 = a19;
      do
      {
        uint64_t v33 = (void *)*((void *)v31 - 3);
        v31 -= 24;
        int v32 = v33;
        if (v33)
        {
          *(v29 - 2) = v32;
          operator delete(v32);
        }
        long long v29 = v31;
      }
      while (v31 != __p);
      uint64_t v30 = __p;
    }
    operator delete(v30);
  }
  if (a21)
  {
    uint64_t v34 = a22;
    uint64_t v35 = a21;
    if (a22 != a21)
    {
      uint64_t v36 = a22;
      do
      {
        uint64_t v38 = (void *)*((void *)v36 - 3);
        v36 -= 24;
        unint64_t v37 = v38;
        if (v38)
        {
          *(v34 - 2) = v37;
          operator delete(v37);
        }
        uint64_t v34 = v36;
      }
      while (v36 != a21);
      uint64_t v35 = a21;
    }
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_I"
                     "NS0_7LiteralENS3_IS8_EEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEE"
                                "ES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  int64_t v10 = *(unsigned char **)(a2 + 24);
  int v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    unint64_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v15 = *(unsigned char **)(a2 + 48);
  unint64_t v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v17;
    *(void *)(a1 + 56) = v17;
    uint64_t v18 = &v17[4 * (v16 >> 2)];
    *(void *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 56) = v18;
  }
  int v19 = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v19;
  return a1;
}

void sub_23CBBEDA4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
    int64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      uint64_t v7 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v6;
  operator delete(v6);
  uint64_t v7 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  *(void *)(v1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_23CBBEE04()
{
  if (!*v0) {
    JUMPOUT(0x23CBBEDC8);
  }
  JUMPOUT(0x23CBBEDC0);
}

void *std::vector<std::vector<operations_research::sat::Literal>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23CBBEEC0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::vector<operations_research::sat::Literal>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::CircuitPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDDE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CircuitPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDDE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDE28;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = a1[2];
    size_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      uint64_t v6 = a1[2];
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      size_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BDE28;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = a1[2];
    size_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      uint64_t v6 = a1[2];
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      size_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26F0BDE28;
  std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_23CBBF194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0BDE28;
  return std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = a1[2];
    size_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      uint64_t v6 = a1[2];
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      size_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = __p[1];
  if (v3)
  {
    uint64_t v4 = __p[2];
    size_t v5 = (void *)__p[1];
    if (v4 != v3)
    {
      uint64_t v6 = __p[2];
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      size_t v5 = (void *)__p[1];
    }
    __p[2] = v3;
    operator delete(v5);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()()
{
}

void sub_23CBBF454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  if (a9) {
    std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(&a9, a9);
  }
  MEMORY[0x23ECF2BC0](v9, 0x10B1C4016B17919);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_E"
                     "EEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9all"
                                "ocatorIS3_EEEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>(void *a1, uint64_t *a2)
{
  uint64_t v4 = std::vector<std::vector<operations_research::sat::Literal>>::vector(a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  uint64_t v6 = (unsigned char *)a2[3];
  size_t v5 = (unsigned char *)a2[4];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[3] = v8;
    a1[4] = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    a1[5] = v9;
    memcpy(v8, v6, v7);
    a1[4] = v9;
  }
  return a1;
}

void sub_23CBBF590(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>((void **)v1);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::CircuitCoveringPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDE98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CircuitCoveringPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDE98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

operations_research::sat::LiteralWatchers *operations_research::sat::LiteralWatchers::LiteralWatchers(operations_research::sat::LiteralWatchers *this, operations_research::sat::Model *a2)
{
  strcpy((char *)this + 8, "LiteralWatchers");
  *((unsigned char *)this + 31) = 15;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *(void *)this = &unk_26F0BDEE0;
  *(_OWORD *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = (char *)this + 88;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 32) = -1;
  *((void *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *((unsigned char *)this + 16google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 1;
  *((void *)this + 22) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a2);
  uint64_t v4 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  strcpy((char *)this + 216, "LiteralWatchers");
  *((void *)this + 23) = v4;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((unsigned char *)this + 239) = 15;
  *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = (char *)this + 280;
  *((unsigned char *)this + 296) = 1;
  *((void *)this + 3google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 82) = 0;
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *((void *)this + 42) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  operations_research::sat::Trail::RegisterPropagator(v4, this);
  return this;
}

void sub_23CBBF84C(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  absl::lts_2020_02_25::flat_hash_map<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::~flat_hash_map(v8);
  int64_t v11 = *v9;
  if (*v9)
  {
    *(void *)(v1 + 312) = v11;
    operator delete(v11);
  }
  operations_research::StatsGroup::~StatsGroup(v5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v4);
  int v12 = *(void **)(v1 + 64);
  if (v12)
  {
    *(void *)(v1 + 72) = v12;
    operator delete(v12);
    std::vector<std::vector<int>>::~vector[abi:ne180100](v3);
    *(void *)uint64_t v1 = v2;
    if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::vector<int>>::~vector[abi:ne180100](v3);
    *(void *)uint64_t v1 = v2;
    if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d) {
      size_t v5 = v1;
    }
    else {
      size_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CBBFA74(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F3C40157C0B0ALL);
  _Unwind_Resume(a1);
}

void operations_research::sat::Trail::RegisterPropagator(operations_research::sat::Trail *this, operations_research::sat::SatPropagator *a2)
{
  BOOL v4 = (void **)((char *)this + 272);
  size_t v5 = (char *)*((void *)this + 34);
  uint64_t v6 = (char *)*((void *)this + 35);
  if (v5 == v6)
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 34, 4uLL);
    size_t v5 = (char *)*((void *)this + 34);
    uint64_t v6 = (char *)*((void *)this + 35);
  }
  uint64_t v7 = (v6 - v5) >> 3;
  uint64_t v27 = v7;
  int v28 = 16;
  if ((unint64_t)(v6 - v5) > 0x7F) {
    google::MakeCheckOpString<unsigned long,int>((int)&v27, (int)&v28, "propagators_.size() < 16");
  }
  *((_DWORD *)a2 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v7;
  unint64_t v8 = *((void *)this + 36);
  if ((unint64_t)v6 < v8)
  {
    *(void *)uint64_t v6 = a2;
    uint64_t v9 = (uint64_t)(v6 + 8);
    goto LABEL_29;
  }
  unint64_t v10 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v8 - (void)v5;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = (char *)operator new(8 * v12);
    unint64_t v14 = &v13[8 * v7];
    uint64_t v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = a2;
    uint64_t v9 = (uint64_t)(v14 + 8);
    int64_t v16 = v6 - v5;
    if (v6 == v5) {
      goto LABEL_27;
    }
  }
  else
  {
    unint64_t v13 = 0;
    unint64_t v14 = (char *)(8 * v7);
    uint64_t v15 = 0;
    *(void *)(8 * v7) = a2;
    uint64_t v9 = 8 * v7 + 8;
    int64_t v16 = v6 - v5;
    if (v6 == v5) {
      goto LABEL_27;
    }
  }
  unint64_t v17 = v16 - 8;
  if (v17 >= 0x58)
  {
    int v19 = &v13[8 * v7];
    if ((unint64_t)(v6 - v19) >= 0x20)
    {
      uint64_t v20 = (v17 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v18 = &v6[-v21];
      v14 -= v21;
      uint64_t v22 = v19 - 16;
      unint64_t v23 = v6 - 16;
      uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)uint64_t v22 = v25;
        v22 -= 32;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v18 = v6;
    }
  }
  else
  {
    uint64_t v18 = v6;
  }
  do
  {
    uint64_t v26 = *((void *)v18 - 1);
    v18 -= 8;
    *((void *)v14 - 1) = v26;
    v14 -= 8;
  }
  while (v18 != v5);
LABEL_26:
  size_t v5 = (char *)*v4;
LABEL_27:
  *((void *)this + 34) = v14;
  *((void *)this + 35) = v9;
  *((void *)this + 36) = v15;
  if (v5) {
    operator delete(v5);
  }
LABEL_29:
  *((void *)this + 35) = v9;
}

void sub_23CBBFCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t absl::lts_2020_02_25::flat_hash_map<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void operations_research::sat::LiteralWatchers::~LiteralWatchers(operations_research::sat::LiteralWatchers *this)
{
  *(void *)this = &unk_26F0BDEE0;
  uint64_t v2 = (void **)*((void *)this + 38);
  unint64_t v3 = (void **)*((void *)this + 39);
  if (v2 == v3)
  {
    *((void *)this + 39) = v2;
    if (!*((void *)this + 45)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  do
  {
    unint64_t v14 = *v2++;
    unint64_t v13 = v14;
    if (v14) {
      operator delete(v13);
    }
  }
  while (v2 != v3);
  *((void *)this + 39) = *((void *)this + 38);
  if (*((void *)this + 45))
  {
LABEL_3:
    operator delete(*((void **)this + 42));
    *((void *)this + 47) = 0;
    *((void *)this + 42) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 43) = 0;
    *((void *)this + 44) = 0;
    *((void *)this + 45) = 0;
  }
LABEL_4:
  BOOL v4 = (void *)*((void *)this + 46);
  if (v4) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  }
  size_t v5 = (void *)*((void *)this + 38);
  if (v5)
  {
    *((void *)this + 39) = v5;
    operator delete(v5);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::LiteralWatchers *)((char *)this + 216));
  uint64_t v6 = (void *)*((void *)this + 18);
  if (v6)
  {
    *((void *)this + 19) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 8);
  if (v8)
  {
    *((void *)this + 9) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 6);
    uint64_t v11 = (void *)*((void *)this + 5);
    if (v10 != v9)
    {
      uint64_t v12 = *((void *)this + 6);
      do
      {
        int64_t v16 = *(void **)(v12 - 24);
        v12 -= 24;
        uint64_t v15 = v16;
        if (v16)
        {
          *(void *)(v10 - 16) = v15;
          operator delete(v15);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v9;
    operator delete(v11);
  }
  *(void *)this = &unk_26F0BD580;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  operations_research::sat::LiteralWatchers::~LiteralWatchers(this);

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::LiteralWatchers::Resize(std::vector<int> *this, int a2)
{
  unint64_t v4 = 2 * a2;
  std::vector<int>::size_type value = this[1].__end_cap_.__value_;
  std::vector<int>::pointer begin = this[2].__begin_;
  p_end_cap = &this[1].__end_cap_;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)value) >> 3);
  if (v4 <= v8)
  {
    if (v4 < v8)
    {
      uint64_t v9 = &value[6 * (int)v4];
      if (begin != v9)
      {
        uint64_t v10 = begin;
        do
        {
          uint64_t v12 = (void *)*((void *)v10 - 3);
          v10 -= 6;
          uint64_t v11 = v12;
          if (v12)
          {
            *((void *)begin - 2) = v11;
            operator delete(v11);
          }
          std::vector<int>::pointer begin = v10;
        }
        while (v10 != v9);
      }
      this[2].__begin_ = v9;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)p_end_cap, v4 - v8);
  }
  unint64_t v13 = this[2].__end_cap_.__value_;
  unint64_t v14 = ((char *)this[3].__begin_ - (char *)v13) >> 3;
  if (a2 <= v14)
  {
    if (a2 < v14) {
      this[3].__begin_ = &v13[2 * a2];
    }
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)&this[2].__end_cap_.__value_, a2 - v14);
  }
  if (SLODWORD(this[3].__end_cap_.__value_) > (int)v4)
  {
    std::vector<int>::pointer v15 = this[6].__begin_;
    std::vector<int>::pointer end = this[6].__end_;
    if (v15 == end)
    {
      int v17 = 0;
    }
    else
    {
      int v17 = 0;
      std::vector<int>::pointer v18 = this[6].__begin_;
      do
      {
        if (*v18 < (int)v4) {
          v15[v17++] = *v18;
        }
        ++v18;
      }
      while (v18 != end);
    }
    unint64_t v19 = end - v15;
    if (v17 <= v19)
    {
      if (v17 < v19) {
        this[6].__end_ = &v15[v17];
      }
    }
    else
    {
      std::vector<int>::__append(this + 6, v17 - v19);
    }
  }
  int v20 = v4 & ~((int)v4 >> 31);
  LODWORD(this[3].__end_cap_.__value_) = v20;
  std::vector<int>::pointer v21 = this[4].__begin_;
  std::vector<int>::pointer v22 = this[4].__end_;
  unint64_t v23 = (v20 + 63) >> 6;
  uint64_t v25 = 0;
  unint64_t v24 = ((char *)v22 - (char *)v21) >> 3;
  if (v23 <= v24)
  {
    if (v23 < v24) {
      this[4].__end_ = &v21[2 * v23];
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)&this[4], v23 - v24, &v25);
  }
}

void operations_research::sat::LiteralWatchers::AttachOnFalse(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6 = (char **)(*(void *)(a1 + 40) + 24 * a2);
  unint64_t v8 = v6 + 1;
  uint64_t v7 = v6[1];
  unint64_t v9 = (unint64_t)v6[2];
  if ((unint64_t)v7 >= v9)
  {
    uint64_t v11 = *v6;
    uint64_t v12 = (v7 - *v6) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64_t v16 = (char *)operator new(16 * v15);
    }
    else
    {
      int64_t v16 = 0;
    }
    int v17 = &v16[16 * v12];
    *(_DWORD *)int v17 = a3;
    *((_DWORD *)v17 + 1) = 2;
    *((void *)v17 + 1) = a4;
    uint64_t v10 = v17 + 16;
    if (v7 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
        v17 -= 16;
        v7 -= 16;
      }
      while (v7 != v11);
      uint64_t v7 = *v6;
    }
    void *v6 = v17;
    void *v8 = v10;
    v6[2] = &v16[16 * v15];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = a3;
    *((_DWORD *)v7 + 1) = 2;
    *((void *)v7 + 1) = a4;
    uint64_t v10 = v7 + 16;
  }
  void *v8 = v10;
}

uint64_t operations_research::sat::LiteralWatchers::PropagateOnFalse(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v6 = *(void *)(a1 + 40) + 24 * a2;
  uint64_t v7 = *(int **)(v6 + 8);
  unint64_t v8 = *(int **)v6;
  if (*(int **)v6 != v7)
  {
    unint64_t v8 = *(int **)v6;
    while (((*(void *)(*(void *)(a3 + 24) + (((unint64_t)*v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v8) & 1) != 0)
    {
      v8 += 4;
      if (v8 == v7) {
        goto LABEL_47;
      }
    }
  }
  if (v8 == v7)
  {
LABEL_47:
    *(void *)(a1 + 200) += ((uint64_t)v7 - *(void *)v6) >> 4;
    return 1;
  }
  uint64_t v50 = (void *)(v6 + 8);
  unint64_t v9 = v8;
  uint64_t v52 = *(void *)(a1 + 40) + 24 * a2;
  while (1)
  {
    uint64_t v12 = *(void *)(a3 + 24);
    if ((*(void *)(v12 + (((unint64_t)*v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v9)) {
      goto LABEL_10;
    }
    ++*(void *)(a1 + 192);
    unint64_t v13 = (_DWORD *)*((void *)v9 + 1);
    int v15 = v13[1];
    uint64_t v14 = (char *)(v13 + 1);
    int v16 = v15 ^ v13[2] ^ v4;
    unint64_t v17 = (unint64_t)v16 >> 6;
    uint64_t v18 = 1 << ((v15 ^ *((unsigned char *)v13 + 8)) ^ v4);
    if ((v18 & *(void *)(v12 + 8 * v17)) != 0)
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      int *v8 = v16;
      v8 += 4;
      ++*(void *)(a1 + 200);
      goto LABEL_11;
    }
    uint64_t v19 = v9[1];
    int v20 = *v13;
    int v21 = v19;
    if ((int)v19 >= *v13)
    {
LABEL_20:
      uint64_t v24 = *(void *)(a1 + 200) + v21 - (int)v19 + 2;
      *(void *)(a1 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v24;
      if ((int)v19 < 3)
      {
        LODWORD(v19) = 2;
LABEL_26:
        int v26 = v20;
      }
      else
      {
        uint64_t v25 = 0;
        while (((*(void *)(v12 + (((unint64_t)(int)v13[v25 + 3] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13[v25 + 3] & 0x3F ^ 1u)) & 1) != 0)
        {
          if (v19 - 2 == ++v25) {
            goto LABEL_26;
          }
        }
        LODWORD(v19) = v25 + 2;
        int v26 = v25 + 2;
      }
      *(void *)(a1 + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v24 + (int)v19 - 2;
      if (v26 < v20) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v22 = 0;
      while (1)
      {
        int v23 = v13[(int)v19 + 1 + v22];
        if (((*(void *)(v12 + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v23 & 0x3F ^ 1u)) & 1) == 0) {
          break;
        }
        if (v20 - (uint64_t)(int)v19 == ++v22)
        {
          int v21 = *v13;
          goto LABEL_20;
        }
      }
      int v26 = v19 + v22;
      *(void *)(a1 + 200) += (int)v22 + 2;
      if ((int)v19 + (int)v22 < v20)
      {
LABEL_31:
        v13[1] = v16;
        uint64_t v27 = 4 * v26;
        v13[2] = *(_DWORD *)&v14[v27];
        *(_DWORD *)&v14[v27] = v4;
        uint64_t v28 = *(void *)(a1 + 40) + 24 * (int)v13[2];
        int v29 = v26 + 1;
        uint64_t v30 = *(int **)(v28 + 8);
        unint64_t v31 = *(void *)(v28 + 16);
        if ((unint64_t)v30 >= v31)
        {
          int v56 = (char **)(v28 + 8);
          int v32 = *(int **)v28;
          uint64_t v33 = ((uint64_t)v30 - *(void *)v28) >> 4;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v54 = (void *)(v28 + 16);
          long long v55 = (char **)v28;
          uint64_t v35 = v31 - (void)v32;
          if (v35 >> 3 > v34) {
            unint64_t v34 = v35 >> 3;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
          }
          if (v34 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v53 = 16 * v34;
          uint64_t v36 = (char *)operator new(16 * v34);
          uint64_t v37 = *((void *)v9 + 1);
          uint64_t v38 = &v36[16 * v33];
          *(_DWORD *)uint64_t v38 = v16;
          *((_DWORD *)v38 + 1) = v29;
          *((void *)v38 + 1) = v37;
          if (v30 == v32)
          {
            unint64_t v43 = &v36[16 * v33];
            unint64_t v41 = v54;
            uint64_t v40 = v55;
            uint64_t v42 = v56;
          }
          else
          {
            uint64_t v39 = &v36[16 * v33];
            unint64_t v41 = v54;
            uint64_t v40 = v55;
            uint64_t v42 = v56;
            do
            {
              unint64_t v43 = v39 - 16;
              *((_OWORD *)v39 - 1) = *((_OWORD *)v30 - 1);
              v30 -= 4;
              v39 -= 16;
            }
            while (v30 != v32);
          }
          *uint64_t v40 = v43;
          unint64_t v44 = v38 + 16;
          *uint64_t v42 = v38 + 16;
          *unint64_t v41 = &v36[v53];
          if (v32) {
            operator delete(v32);
          }
          *uint64_t v42 = v44;
          int v4 = a2;
          uint64_t v6 = v52;
        }
        else
        {
          *uint64_t v30 = v16;
          v30[1] = v29;
          *((void *)v30 + 1) = v13;
          *(void *)(v28 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v30 + 4;
        }
        goto LABEL_11;
      }
    }
    if ((*(void *)(v12 + 8 * v17) >> (v16 & 0x3F ^ 1u))) {
      break;
    }
    v13[1] = v16;
    v13[2] = v4;
    uint64_t v10 = *(int *)(a3 + 12);
    *(void *)(*(void *)(a1 + 64) + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v13;
    int v11 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(void *)(a3 + 72) + 4 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v16;
    *(_DWORD *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | v16 & 1 | (v11 << 28)) ^ 1;
    *(void *)(*(void *)(a3 + 120) + 8 * (v16 >> 1)) = *(void *)(a3 + 8);
    *(void *)(*(void *)(a3 + 24) + 8 * v17) |= v18;
    ++*(_DWORD *)(a3 + 12);
LABEL_10:
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
    v8 += 4;
LABEL_11:
    v9 += 4;
    if (v9 == v7)
    {
      unint64_t v47 = v50;
      unint64_t v48 = (int *)*v50;
      *(void *)(a1 + 200) += (uint64_t)(*v50 - *(void *)v6) >> 4;
      if (v8 == v7) {
        return 1;
      }
      int64_t v45 = (char *)v48 - (char *)v7;
      if (v48 != v7) {
        memmove(v8, v7, (char *)v48 - (char *)v7);
      }
      uint64_t result = 1;
LABEL_51:
      *unint64_t v47 = (char *)v8 + v45;
      return result;
    }
  }
  *(void *)(a3 + 144) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 96), v14, (char *)&v13[v20 + 1], v20);
  *(void *)(a3 + 144) = *((void *)v9 + 1);
  *(void *)(a1 + 200) += (((uint64_t)v9 - *(void *)v6) >> 4) + 1;
  if (v8 != v9)
  {
    uint64_t v49 = v9;
    unint64_t v47 = v50;
    int64_t v45 = *v50 - (void)v49;
    if ((const void *)*v50 != v49) {
      memmove(v8, v49, *v50 - (void)v49);
    }
    uint64_t result = 0;
    goto LABEL_51;
  }
  return 0;
}

uint64_t operations_research::sat::LiteralWatchers::Propagate(operations_research::sat::LiteralWatchers *this, operations_research::sat::Trail *a2)
{
  int v4 = *((_DWORD *)a2 + 3);
  while (*((_DWORD *)a2 + 3) == v4)
  {
    uint64_t v5 = *((int *)this + 9);
    if ((int)v5 >= v4) {
      break;
    }
    *((_DWORD *)this + 9) = v5 + 1;
    if ((operations_research::sat::LiteralWatchers::PropagateOnFalse((uint64_t)this, *(_DWORD *)(*((void *)a2 + 9) + 4 * v5) ^ 1u, (uint64_t)a2) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t operations_research::sat::LiteralWatchers::Reason(operations_research::sat::LiteralWatchers *this, const operations_research::sat::Trail *a2, int a3)
{
  return *(void *)(*((void *)this + 8) + 8 * a3) + 8;
}

uint64_t operations_research::sat::LiteralWatchers::ReasonClause(operations_research::sat::LiteralWatchers *this, int a2)
{
  return *(void *)(*((void *)this + 8) + 8 * a2);
}

uint64_t operations_research::sat::LiteralWatchers::AddClause(void *a1, const void *a2, unint64_t a3)
{
  return operations_research::sat::LiteralWatchers::AddClause(a1, a2, a3, a1[23]);
}

uint64_t operations_research::sat::LiteralWatchers::AddClause(void *a1, const void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = operations_research::sat::SatClause::Create(a2, a3);
  uint64_t v7 = v6;
  unint64_t v9 = (unsigned int **)a1[39];
  unint64_t v8 = a1[40];
  uint64_t v10 = v9;
  if ((unint64_t)v9 < v8)
  {
    int *v9 = v6;
    uint64_t v11 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  uint64_t v12 = (char *)a1[38];
  uint64_t v13 = ((char *)v9 - v12) >> 3;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v8 - (void)v12;
  if (v15 >> 2 > v14) {
    unint64_t v14 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = (char *)operator new(8 * v16);
    uint64_t v18 = (unsigned int **)&v17[8 * v13];
    uint64_t v19 = &v17[8 * v16];
    *uint64_t v18 = v7;
    uint64_t v11 = (uint64_t)(v18 + 1);
    int v20 = (char *)((char *)v9 - v12);
    if (v9 == (unsigned int **)v12) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v17 = 0;
  uint64_t v18 = (unsigned int **)(8 * v13);
  uint64_t v19 = 0;
  *(void *)(8 * v13) = v7;
  uint64_t v11 = 8 * v13 + 8;
  int v20 = (char *)((char *)v9 - v12);
  if (v9 != (unsigned int **)v12)
  {
LABEL_14:
    unint64_t v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58) {
      goto LABEL_30;
    }
    if ((unint64_t)(v12 - v17) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v10 = &v9[v23 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v18 = (unsigned int **)((char *)v18 - v23);
    uint64_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v9 - 2;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)uint64_t v24 = v27;
      v24 -= 32;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        uint64_t v28 = *--v10;
        *--uint64_t v18 = v28;
      }
      while (v10 != (unsigned int **)v12);
    }
    uint64_t v10 = (unsigned int **)a1[38];
  }
LABEL_21:
  a1[38] = v18;
  a1[39] = v11;
  a1[40] = v19;
  if (v10) {
    operator delete(v10);
  }
LABEL_23:
  a1[39] = v11;

  return operations_research::sat::LiteralWatchers::AttachAndPropagate((uint64_t)a1, v7, a4);
}

_DWORD *operations_research::sat::SatClause::Create(const void *a1, unint64_t a2)
{
  unint64_t v7 = a2;
  int v8 = 2;
  if (a2 < 2) {
    google::MakeCheckOpString<unsigned long,int>((int)&v7, (int)&v8, "literals.size() >= 2");
  }
  int v4 = operator new(4 * a2 + 4);
  uint64_t v5 = v4;
  _DWORD *v4 = a2;
  if (a2) {
    memcpy(v4 + 1, a1, 4 * a2);
  }
  return v5;
}

void sub_23CBC09DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::LiteralWatchers::AttachAndPropagate(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3 = (int *)(a2 + 1);
  uint64_t v4 = *a2;
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(a3 + 24);
  do
  {
    int v10 = a2[v7 + 1];
    if (((*(void *)(v9 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 & 0x3F ^ 1u)) & 1) == 0)
    {
      a2[v7 + 1] = v3[v8];
      v3[v8] = v10;
      if (v8 == 1) {
        goto LABEL_16;
      }
      uint64_t v8 = 1;
    }
    ++v7;
  }
  while (v4 != v7);
  if (!v8) {
    return 0;
  }
  if ((int)v4 >= 3)
  {
    uint64_t v11 = *(void *)(a3 + 120);
    unsigned int v12 = (*(_DWORD *)(v11 + 8 * ((int)a2[2] >> 1)) >> 1) & 0x7FFFFFF;
    uint64_t v13 = (int *)(a2 + 3);
    uint64_t v14 = v4 - 2;
    do
    {
      unsigned int v15 = (*(_DWORD *)(v11 + 8 * (*v13 >> 1)) >> 1) & 0x7FFFFFF;
      if (v15 > v12)
      {
        int v16 = a2[2];
        a2[2] = *v13;
        *uint64_t v13 = v16;
        unsigned int v12 = v15;
      }
      ++v13;
      --v14;
    }
    while (v14);
  }
  int v18 = *v3;
  unint64_t v19 = (unint64_t)*v3 >> 6;
  if (((1 << v18) & *(void *)(*(void *)(a3 + 24) + 8 * v19)) == 0)
  {
    uint64_t v20 = *(int *)(a3 + 12);
    *(void *)(*(void *)(a1 + 64) + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = a2;
    int v21 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(void *)(a3 + 72) + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v18;
    *(_DWORD *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | v18 & 1 | (v21 << 28)) ^ 1;
    *(void *)(*(void *)(a3 + 120) + 8 * (v18 >> 1)) = *(void *)(a3 + 8);
    *(void *)(*(void *)(a3 + 24) + 8 * v19) |= 1 << v18;
    ++*(_DWORD *)(a3 + 12);
  }
LABEL_16:
  ++*(void *)(a1 + 208);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, a2[1], a2[2], (uint64_t)a2);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, a2[2], a2[1], (uint64_t)a2);
  return 1;
}

unsigned int *operations_research::sat::LiteralWatchers::AddRemovableClause(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = operations_research::sat::SatClause::Create(*(const void **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v6 = v5;
  uint64_t v8 = (unsigned int **)a1[39];
  unint64_t v7 = a1[40];
  uint64_t v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    int *v8 = v5;
    uint64_t v10 = (uint64_t)(v8 + 1);
    goto LABEL_23;
  }
  uint64_t v11 = (char *)a1[38];
  uint64_t v12 = ((char *)v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v16 = (char *)operator new(8 * v15);
    unint64_t v17 = (unsigned int **)&v16[8 * v12];
    int v18 = &v16[8 * v15];
    *unint64_t v17 = v6;
    uint64_t v10 = (uint64_t)(v17 + 1);
    unint64_t v19 = (char *)((char *)v8 - v11);
    if (v8 == (unsigned int **)v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v16 = 0;
  unint64_t v17 = (unsigned int **)(8 * v12);
  int v18 = 0;
  *(void *)(8 * v12) = v6;
  uint64_t v10 = 8 * v12 + 8;
  unint64_t v19 = (char *)((char *)v8 - v11);
  if (v8 != (unsigned int **)v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_30;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v9 = &v8[v22 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v17 = (unsigned int **)((char *)v17 - v22);
    uint64_t v23 = &v16[8 * v12 - 16];
    uint64_t v24 = v8 - 2;
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        long long v27 = *--v9;
        *--unint64_t v17 = v27;
      }
      while (v9 != (unsigned int **)v11);
    }
    uint64_t v9 = (unsigned int **)a1[38];
  }
LABEL_21:
  a1[38] = v17;
  a1[39] = v10;
  a1[40] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[39] = v10;
  if ((operations_research::sat::LiteralWatchers::AttachAndPropagate((uint64_t)a1, v6, a3) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v30, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 215);
    int v29 = (void *)google::LogMessage::stream((google::LogMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: AttachAndPropagate(clause, trail) ", 48);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v30);
  }
  return v6;
}

void sub_23CBC0DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::LiteralWatchers::Attach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a2 + 4);
  uint64_t v4 = *(void *)(a3 + 24);
  if (((*(void *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 275);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: !trail->Assignment().LiteralIsAssigned(literals[0]) ", 66);
    goto LABEL_8;
  }
  unint64_t v6 = *(int *)(a2 + 8);
  if (((*(void *)(v4 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 276);
    uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !trail->Assignment().LiteralIsAssigned(literals[1]) ", 66);
LABEL_8:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
  }
  ++*(void *)(a1 + 208);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, v3, v6, a2);
  int v9 = *(_DWORD *)(a2 + 4);
  int v8 = *(_DWORD *)(a2 + 8);

  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, v8, v9, a2);
}

void sub_23CBC0EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CBC0EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)))
     + *a2;
  unint64_t v5 = ((v4 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v4);
  uint64_t v6 = *a1;
  unint64_t v7 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v6 + (v7 & v8));
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v7 = v2 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(void *)(a1[1] + 24 * v13) == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8) {
    return 0;
  }
  --a1[2];
  uint64_t v15 = *(void *)(v6 + ((v13 - 8) & v8));
  unint64_t v16 = *(void *)(v6 + v13) & (~*(void *)(v6 + v13) << 6) & 0x8080808080808080;
  unint64_t v17 = v15 & (~v15 << 6) & 0x8080808080808080;
  if (v17) {
    BOOL v18 = v16 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    uint64_t v22 = 0;
    char v19 = -2;
  }
  else
  {
    unsigned int v20 = (__clz(v17) >> 3) + (__clz(__rbit64(v16)) >> 3);
    BOOL v21 = v20 >= 8;
    uint64_t v22 = v20 < 8;
    if (v21) {
      char v19 = -2;
    }
    else {
      char v19 = 0x80;
    }
  }
  *(unsigned char *)(v6 + v13) = v19;
  *(unsigned char *)((a1[3] & (v13 - 8)) + (a1[3] & 7) + *a1 + 1) = v19;
  uint64_t v23 = a1[4];
  a1[5] += v22;
  if (!v23) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void operations_research::sat::LiteralWatchers::LazyDetach(uint64_t a1, _DWORD *a2)
{
  uint64_t v8 = a2;
  --*(void *)(a1 + 208);
  unsigned int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 384);
  if (v5) {
    BOOL v6 = v4 >= 3;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    operations_research::sat::DratProofHandler::DeleteClause(v5, a2 + 1, (int)v4);
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(a1 + 336), (uint64_t *)&v8);
  _DWORD *v8 = 0;
  *(unsigned char *)(a1 + 16google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  unint64_t v7 = (void *)(a1 + 88);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v7, a2[1]);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v7, a2[2]);
}

void operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(void *a1, int a2)
{
  unint64_t v2 = (unint64_t)a2 >> 6;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if ((v4 & (1 << a2)) == 0)
  {
    *(void *)(v3 + 8 * v2) = v4 | (1 << a2);
    uint64_t v8 = (char *)a1[8];
    unint64_t v7 = a1[9];
    if ((unint64_t)v8 < v7)
    {
      *(_DWORD *)uint64_t v8 = a2;
      uint64_t v9 = (uint64_t)(v8 + 4);
LABEL_23:
      a1[8] = v9;
      return;
    }
    uint64_t v10 = (char *)a1[7];
    uint64_t v11 = (v8 - v10) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = operator new(4 * v14);
      unint64_t v16 = &v15[4 * v11];
      unint64_t v17 = &v15[4 * v14];
      *unint64_t v16 = a2;
      uint64_t v9 = (uint64_t)(v16 + 1);
      int64_t v18 = v8 - v10;
      if (v8 == v10) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v16 = (_DWORD *)(4 * v11);
      unint64_t v17 = 0;
      *(_DWORD *)(4 * v11) = a2;
      uint64_t v9 = 4 * v11 + 4;
      int64_t v18 = v8 - v10;
      if (v8 == v10)
      {
LABEL_21:
        a1[7] = v16;
        a1[8] = v9;
        a1[9] = v17;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_23;
      }
    }
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_28;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v22 = &v8[-v21];
    unint64_t v16 = (_DWORD *)((char *)v16 - v21);
    uint64_t v23 = &v15[4 * v11 - 16];
    uint64_t v24 = v8 - 16;
    uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    uint64_t v8 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        int v27 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--unint64_t v16 = v27;
      }
      while (v8 != v10);
    }
    goto LABEL_21;
  }
}

uint64_t operations_research::sat::LiteralWatchers::Detach(void *a1, _DWORD *a2)
{
  uint64_t v25 = a2;
  --a1[26];
  unsigned int v4 = *a2;
  uint64_t v5 = a1[48];
  if (v5) {
    BOOL v6 = v4 >= 3;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    operations_research::sat::DratProofHandler::DeleteClause(v5, a2 + 1, (int)v4);
  }
  uint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>(a1 + 42, (uint64_t *)&v25);
  *uint64_t v25 = 0;
  int v8 = a2[1];
  unint64_t v9 = (int)a2[2];
  *(void *)(a1[12] + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v8);
  uint64_t v10 = (int ***)(a1[5] + 24 * v8);
  uint64_t v11 = *v10;
  unint64_t v14 = v10[1];
  uint64_t v13 = v10 + 1;
  unint64_t v12 = v14;
  if (v11 != v14)
  {
    uint64_t v15 = v11 + 2;
    while (**(v15 - 1) >= 1)
    {
      BOOL v16 = v15 == v12;
      v15 += 2;
      if (v16) {
        goto LABEL_22;
      }
    }
    unint64_t v17 = v15 - 2;
    if (v15 - 2 != v12 && v15 != v12)
    {
      do
      {
        if (*v15[1] >= 1)
        {
          *(_OWORD *)unint64_t v17 = *(_OWORD *)v15;
          v17 += 2;
        }
        v15 += 2;
      }
      while (v15 != v12);
      unint64_t v12 = *v13;
    }
    if (v17 != v12) {
      *uint64_t v13 = v17;
    }
  }
LABEL_22:
  *(void *)(a1[12] + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
  int64_t v18 = (int ***)(a1[5] + 24 * (int)v9);
  unint64_t v19 = *v18;
  uint64_t v22 = v18[1];
  uint64_t v21 = v18 + 1;
  uint64_t v20 = v22;
  if (v19 != v22)
  {
    for (unint64_t i = v19 + 2; **(i - 1) >= 1; i += 2)
    {
      BOOL v16 = i == v20;
      if (v16) {
        return result;
      }
    }
    uint64_t v24 = i - 2;
    if (i - 2 != v20 && i != v20)
    {
      do
      {
        if (*i[1] >= 1)
        {
          *(_OWORD *)uint64_t v24 = *(_OWORD *)i;
          v24 += 2;
        }
        i += 2;
      }
      while (i != v20);
      uint64_t v20 = *v21;
    }
    if (v24 != v20) {
      char *v21 = v24;
    }
  }
  return result;
}

void operations_research::sat::LiteralWatchers::DetachAllClauses(operations_research::sat::LiteralWatchers *this)
{
  if (*((unsigned char *)this + 296))
  {
    *((unsigned char *)this + 296) = 0;
    *((unsigned char *)this + 16google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 1;
    *((void *)this + 26) = 0;
    uint64_t v3 = *((void *)this + 5);
    uint64_t v2 = *((void *)this + 6);
    if (v2 != v3)
    {
      uint64_t v4 = *((void *)this + 6);
      do
      {
        BOOL v6 = *(void **)(v4 - 24);
        v4 -= 24;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
    *((void *)this + 6) = v3;
  }
}

void operations_research::sat::LiteralWatchers::AttachAllClauses(operations_research::sat::LiteralWatchers *this)
{
  if (!*((unsigned char *)this + 296))
  {
    *((unsigned char *)this + 296) = 1;
    bzero(*((void **)this + 12), *((void *)this + 13) - *((void *)this + 12));
    uint64_t v2 = *((void *)this + 5);
    *((void *)this + 19) = *((void *)this + 18);
    unint64_t v3 = *((int *)this + 22);
    uint64_t v4 = *((void *)this + 6);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
    if (v3 <= v5)
    {
      if (v3 < v5)
      {
        uint64_t v6 = v2 + 24 * (int)v3;
        if (v4 != v6)
        {
          uint64_t v7 = *((void *)this + 6);
          do
          {
            unint64_t v9 = *(void **)(v7 - 24);
            v7 -= 24;
            int v8 = v9;
            if (v9)
            {
              *(void *)(v4 - 16) = v8;
              operator delete(v8);
            }
            uint64_t v4 = v7;
          }
          while (v7 != v6);
        }
        *((void *)this + 6) = v6;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 40, v3 - v5);
    }
    operations_research::sat::LiteralWatchers::DeleteRemovedClauses(this);
    uint64_t v10 = (int **)*((void *)this + 38);
    for (unint64_t i = (int **)*((void *)this + 39); v10 != i; ++v10)
    {
      unint64_t v12 = *v10;
      ++*((void *)this + 26);
      int v13 = *v12;
      LODWORD(v14) = 2;
      if (v13 < 2) {
        google::MakeCheckOpString<int,int>((int)&v13, (int)&v14, "clause->size() >= 2");
      }
      operations_research::sat::LiteralWatchers::AttachOnFalse((uint64_t)this, v12[1], v12[2], (uint64_t)v12);
      operations_research::sat::LiteralWatchers::AttachOnFalse((uint64_t)this, v12[2], v12[1], (uint64_t)v12);
    }
  }
}

void sub_23CBC1704(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::LiteralWatchers::DeleteRemovedClauses(operations_research::sat::LiteralWatchers *this)
{
  LODWORD(v2) = *((_DWORD *)this + 82);
  uint64_t v3 = (int)v2;
  uint64_t v4 = (int **)*((void *)this + 38);
  uint64_t v5 = *((void *)this + 39) - (void)v4;
  if ((int)v2 >= (unint64_t)(v5 >> 3))
  {
    unint64_t v2 = (unint64_t)v5 >> 3;
    *((_DWORD *)this + 82) = (unint64_t)v5 >> 3;
    uint64_t v3 = (int)(v5 >> 3);
  }
  if (v2)
  {
    uint64_t v6 = 8 * v3;
    uint64_t v7 = (int8x16_t *)v4;
    int v8 = v4;
    while (**v8 > 0)
    {
      ++v8;
      uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
      v6 -= 8;
      if (!v6)
      {
        v4 += v3;
        goto LABEL_23;
      }
    }
    unint64_t v9 = &v4[v3];
    uint64_t v10 = v9 - 1;
    do
    {
      v6 -= 8;
      if (!v6)
      {
        uint64_t v4 = v8;
        goto LABEL_23;
      }
      uint64_t v11 = *v10--;
      --v9;
    }
    while (*v11 < 1);
    uint64_t v12 = (v6 >> 3) + 1;
    if (v6 < 17)
    {
LABEL_18:
      unint64_t v17 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      if (v12 >= 0xFFFFFFFFFFFFFFFLL) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = (v6 >> 3) + 1;
      }
      uint64_t v14 = (const std::nothrow_t *)MEMORY[0x263F8C180];
      while (1)
      {
        uint64_t v15 = operator new(8 * v13, v14);
        if (v15) {
          break;
        }
        BOOL v16 = v13 > 1;
        v13 >>= 1;
        if (!v16) {
          goto LABEL_18;
        }
      }
      unint64_t v17 = v15;
    }
    uint64_t v4 = std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(v7, v9, v12, (unint64_t)v17, v13);
    if (v17) {
      operator delete(v17);
    }
  }
LABEL_23:
  int64_t v18 = (int **)*((void *)this + 38);
  unint64_t v19 = (int **)*((void *)this + 39);
  *((_DWORD *)this + 82) = (unint64_t)((char *)v4 - (char *)v18) >> 3;
  if (v18 != v19)
  {
    uint64_t v20 = (int8x16_t *)v18;
    while (**v18 > 0)
    {
      ++v18;
      uint64_t v20 = (int8x16_t *)((char *)v20 + 8);
      if (v18 == v19)
      {
        int64_t v18 = v19;
        goto LABEL_42;
      }
    }
    uint64_t v21 = v19 - 1;
    uint64_t v22 = (char *)v19 - (char *)v20;
    while (v18 != v21)
    {
      uint64_t v23 = *v21--;
      --v19;
      v22 -= 8;
      if (*v23 >= 1)
      {
        uint64_t v24 = (v22 >> 3) + 1;
        if (v22 < 17)
        {
LABEL_38:
          uint64_t v28 = 0;
          unint64_t v25 = 0;
        }
        else
        {
          if (v24 >= 0xFFFFFFFFFFFFFFFLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = (v22 >> 3) + 1;
          }
          long long v26 = (const std::nothrow_t *)MEMORY[0x263F8C180];
          while (1)
          {
            int v27 = operator new(8 * v25, v26);
            if (v27) {
              break;
            }
            BOOL v16 = v25 > 1;
            v25 >>= 1;
            if (!v16) {
              goto LABEL_38;
            }
          }
          uint64_t v28 = v27;
        }
        int64_t v18 = std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(v20, v19, v24, (unint64_t)v28, v25);
        if (v28) {
          operator delete(v28);
        }
        break;
      }
    }
  }
LABEL_42:
  int v29 = (int **)*((void *)this + 39);
  uint64_t v30 = v18;
  if (v18 != v29)
  {
    unint64_t v31 = v18;
    do
    {
      uint64_t v33 = *v31++;
      int v32 = v33;
      if (v33) {
        operator delete(v32);
      }
    }
    while (v31 != v29);
    uint64_t v30 = (int **)*((void *)this + 39);
  }
  if (v18 != v30) {
    *((void *)this + 39) = v18;
  }
}

BOOL operations_research::sat::LiteralWatchers::InprocessingFixLiteral(void *a1, int a2)
{
  v12[0] = (*(_DWORD *)(a1[23] + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v13) = 0;
  if (v12[0]) {
    google::MakeCheckOpString<int,int>((int)v12, (int)&v13, "trail_->CurrentDecisionLevel() == 0");
  }
  uint64_t v4 = a1[48];
  if (v4)
  {
    v12[0] = a2;
    operations_research::sat::DratProofHandler::AddClause(v4, v12, 1);
  }
  uint64_t v5 = a1[23];
  unint64_t v6 = (unint64_t)a2 >> 6;
  BOOL result = 1;
  if ((*(void *)(*(void *)(v5 + 24) + 8 * v6) & (1 << a2)) == 0)
  {
    *(_DWORD *)(*(void *)(v5 + 72) + 4 * *(int *)(v5 + 12)) = a2;
    *(_DWORD *)(v5 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(v5 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
    *(void *)(*(void *)(v5 + 120) + 8 * (a2 >> 1)) = *(void *)(v5 + 8);
    *(void *)(*(void *)(v5 + 24) + 8 * v6) |= 1 << a2;
    ++*(_DWORD *)(v5 + 12);
    uint64_t v9 = a1[22];
    uint64_t v8 = a1[23];
    if (!*(void *)(v9 + 216) && *(void *)(v9 + 224) == *(void *)(v9 + 232))
    {
      *(_DWORD *)(v9 + 36) = *(_DWORD *)(v8 + 12);
      return 1;
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *(int *)(v9 + 36);
        int v11 = *(_DWORD *)(v8 + 12);
        BOOL result = (int)v10 >= v11;
        if ((int)v10 >= v11) {
          break;
        }
        *(_DWORD *)(v9 + 36) = v10 + 1;
        if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue(v9, *(_DWORD *)(*(void *)(v8 + 72) + 4 * v10), v8) & 1) == 0)return 0; {
      }
        }
    }
  }
  return result;
}

void sub_23CBC1B2C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::Propagate(operations_research::sat::BinaryImplicationGraph *this, operations_research::sat::Trail *a2)
{
  if (*(_OWORD *)((char *)this + 216) == __PAIR128__(*((void *)this + 29), 0))
  {
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 3);
    return 1;
  }
  else
  {
    while (1)
    {
      uint64_t v4 = *((int *)this + 9);
      int v5 = *((_DWORD *)a2 + 3);
      BOOL result = (int)v4 >= v5;
      if ((int)v4 >= v5) {
        break;
      }
      *((_DWORD *)this + 9) = v4 + 1;
      if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue((uint64_t)this, *(_DWORD *)(*((void *)a2 + 9) + 4 * v4), (uint64_t)a2) & 1) == 0)return 0; {
    }
      }
  }
  return result;
}

uint64_t operations_research::sat::LiteralWatchers::InprocessingRemoveClause(uint64_t a1, int *a2)
{
  uint64_t v7 = a2;
  if (*(unsigned char *)(a1 + 296))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v6, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 358);
    int v5 = (void *)google::LogMessage::stream((google::LogMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !all_clauses_are_attached_ ", 41);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v6);
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3) {
    operations_research::sat::DratProofHandler::DeleteClause(v3, a2 + 1, *a2);
  }
  uint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(a1 + 336), (uint64_t *)&v7);
  _DWORD *v7 = 0;
  return result;
}

void sub_23CBC1C48(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::LiteralWatchers::InprocessingRewriteClause(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  int v5 = a3;
  if (a4 == 2)
  {
    operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*(void *)(a1 + 176), *a3, a3[1]);
    goto LABEL_8;
  }
  if (a4 != 1)
  {
    uint64_t v9 = *(void *)(a1 + 384);
    if (v9)
    {
      operations_research::sat::DratProofHandler::AddClause(v9, a3, a4);
      operations_research::sat::DratProofHandler::DeleteClause(*(void *)(a1 + 384), a2 + 1, *a2);
    }
    if (*(unsigned char *)(a1 + 296))
    {
      --*(void *)(a1 + 208);
      *a2 = 0;
      int v10 = a2[1];
      unint64_t v11 = a2[2];
      *(void *)(*(void *)(a1 + 96) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
      uint64_t v12 = (int ***)(*(void *)(a1 + 40) + 24 * v10);
      uint64_t v13 = *v12;
      BOOL v16 = v12[1];
      uint64_t v15 = v12 + 1;
      uint64_t v14 = v16;
      if (v13 != v16)
      {
        unint64_t v17 = v13 + 2;
        while (**(v17 - 1) >= 1)
        {
          BOOL v18 = v17 == v14;
          v17 += 2;
          if (v18) {
            goto LABEL_27;
          }
        }
        unint64_t v19 = v17 - 2;
        if (v17 - 2 != v14 && v17 != v14)
        {
          do
          {
            if (*v17[1] >= 1)
            {
              *(_OWORD *)unint64_t v19 = *(_OWORD *)v17;
              v19 += 2;
            }
            v17 += 2;
          }
          while (v17 != v14);
          uint64_t v14 = *v15;
        }
        if (v19 != v14) {
          *uint64_t v15 = v19;
        }
      }
LABEL_27:
      *(void *)(*(void *)(a1 + 96) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
      uint64_t v20 = (int ***)(*(void *)(a1 + 40) + 24 * (int)v11);
      uint64_t v21 = *v20;
      uint64_t v24 = v20[1];
      uint64_t v23 = v20 + 1;
      uint64_t v22 = v24;
      if (v21 != v24)
      {
        unint64_t v25 = v21 + 2;
        while (**(v25 - 1) >= 1)
        {
          BOOL v18 = v25 == v22;
          v25 += 2;
          if (v18) {
            goto LABEL_42;
          }
        }
        long long v26 = v25 - 2;
        if (v25 - 2 != v22 && v25 != v22)
        {
          do
          {
            if (*v25[1] >= 1)
            {
              *(_OWORD *)long long v26 = *(_OWORD *)v25;
              v26 += 2;
            }
            v25 += 2;
          }
          while (v25 != v22);
          uint64_t v22 = *v23;
        }
        if (v26 != v22) {
          *uint64_t v23 = v26;
        }
      }
    }
LABEL_42:
    *a2 = 0;
    uint64_t v27 = 4 * a4;
    do
    {
      int v28 = *v5++;
      uint64_t v29 = *a2;
      *a2 = v29 + 1;
      a2[v29 + 1] = v28;
      v27 -= 4;
    }
    while (v27);
    if (*(unsigned char *)(a1 + 296)) {
      operations_research::sat::LiteralWatchers::Attach(a1, (uint64_t)a2, *(void *)(a1 + 184));
    }
    return 1;
  }
  BOOL result = operations_research::sat::LiteralWatchers::InprocessingFixLiteral((void *)a1, *a3);
  if (result)
  {
LABEL_8:
    operations_research::sat::LiteralWatchers::InprocessingRemoveClause(a1, a2);
    return 1;
  }
  return result;
}

void operations_research::sat::BinaryImplicationGraph::AddBinaryClause(uint64_t a1, int a2, int a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6)
  {
    v44[0] = a2;
    v44[1] = a3;
    operations_research::sat::DratProofHandler::AddClause(v6, v44, 2);
  }
  uint64_t v7 = a2 ^ 1;
  uint64_t v8 = *(void *)(a1 + 688);
  ++*(_DWORD *)(v8 + 4 * v7);
  uint64_t v9 = a3 ^ 1;
  ++*(_DWORD *)(v8 + 4 * v9);
  uint64_t v10 = *(void *)(a1 + 192);
  uint64_t v11 = v10 + 32 * v7;
  uint64_t v13 = v11 + 8;
  unint64_t v12 = *(void *)v11;
  if (*(void *)v11)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v15 = v12 >> 1;
    if (v12 >> 1 != v14)
    {
LABEL_5:
      *(_DWORD *)(v13 + 4 * v15) = a3;
      *(void *)uint64_t v11 = v12 + 2;
      uint64_t v16 = v10 + 32 * v9;
      uint64_t v18 = v16 + 8;
      unint64_t v17 = *(void *)v16;
      if ((*(void *)v16 & 1) == 0) {
        goto LABEL_6;
      }
LABEL_23:
      uint64_t v18 = *(void *)(v16 + 8);
      unint64_t v19 = *(void *)(v16 + 16);
      unint64_t v20 = v17 >> 1;
      if (v17 >> 1 != v19) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v14 = 6;
    unint64_t v15 = v12 >> 1;
    if (v12 >> 1 != 6) {
      goto LABEL_5;
    }
  }
  if (((v14 >> 61) & 3) != 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v21 = (char *)operator new(8 * v14);
  uint64_t v22 = v21;
  *(_DWORD *)&v21[4 * v14] = a3;
  if (v12 >= 2)
  {
    unint64_t v23 = 0;
    if (v14 < 8 || (unint64_t)&v21[-v13] < 0x20)
    {
      uint64_t v24 = (int *)v13;
    }
    else
    {
      unint64_t v23 = v14 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v24 = (int *)(v13 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v25 = v21 + 16;
      long long v26 = (long long *)(v13 + 16);
      unint64_t v27 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        *unint64_t v25 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v14 == v23) {
        goto LABEL_20;
      }
    }
    unint64_t v29 = v14 - v23;
    uint64_t v30 = &v21[4 * v23];
    do
    {
      int v31 = *v24++;
      *(_DWORD *)uint64_t v30 = v31;
      v30 += 4;
      --v29;
    }
    while (v29);
  }
LABEL_20:
  if (v12)
  {
    operator delete(*(void **)(v11 + 8));
    unint64_t v12 = *(void *)v11;
  }
  *(void *)(v11 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v22;
  *(void *)(v11 + 16) = 2 * v14;
  uint64_t v32 = *(void *)(a1 + 192);
  *(void *)uint64_t v11 = (v12 | 1) + 2;
  uint64_t v16 = v32 + 32 * v9;
  uint64_t v18 = v16 + 8;
  unint64_t v17 = *(void *)v16;
  if (*(void *)v16) {
    goto LABEL_23;
  }
LABEL_6:
  unint64_t v19 = 6;
  unint64_t v20 = v17 >> 1;
  if (v17 >> 1 != 6)
  {
LABEL_7:
    *(_DWORD *)(v18 + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = a2;
    goto LABEL_38;
  }
LABEL_24:
  if (((v19 >> 61) & 3) != 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v33 = (char *)operator new(8 * v19);
  unint64_t v34 = v33;
  *(_DWORD *)&v33[4 * v19] = a2;
  if (v17 < 2) {
    goto LABEL_35;
  }
  unint64_t v35 = 0;
  if (v19 < 8 || (unint64_t)&v33[-v18] < 0x20)
  {
    uint64_t v36 = (int *)v18;
  }
  else
  {
    unint64_t v35 = v19 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = (int *)(v18 + 4 * (v19 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v37 = v33 + 16;
    uint64_t v38 = (long long *)(v18 + 16);
    unint64_t v39 = v19 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v40 = *v38;
      *(v37 - 1) = *(v38 - 1);
      *uint64_t v37 = v40;
      v37 += 2;
      v38 += 2;
      v39 -= 8;
    }
    while (v39);
    if (v19 == v35) {
      goto LABEL_35;
    }
  }
  unint64_t v41 = v19 - v35;
  uint64_t v42 = &v33[4 * v35];
  do
  {
    int v43 = *v36++;
    *(_DWORD *)uint64_t v42 = v43;
    v42 += 4;
    --v41;
  }
  while (v41);
LABEL_35:
  if (v17)
  {
    operator delete(*(void **)(v16 + 8));
    unint64_t v17 = *(void *)v16;
  }
  *(void *)(v16 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v34;
  *(void *)(v16 + 16) = 2 * v19;
  v17 |= 1uLL;
LABEL_38:
  *(void *)uint64_t v16 = v17 + 2;
  *(unsigned char *)(a1 + 512) = 0;
  *(void *)(a1 + 216) += 2;
}

_DWORD *operations_research::sat::LiteralWatchers::InprocessingAddClause(uint64_t a1, int *a2, unint64_t a3)
{
  if (!a3)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v30, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 416);
    long long v28 = (void *)google::LogMessage::stream((google::LogMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: !new_clause.empty() ", 34);
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 296))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v30, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 417);
    unint64_t v29 = (void *)google::LogMessage::stream((google::LogMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: !all_clauses_are_attached_ ", 41);
LABEL_33:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v30);
  }
  if (a3 == 2)
  {
    operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*(void *)(a1 + 176), *a2, a2[1]);
    return 0;
  }
  if (a3 != 1)
  {
    int v5 = operations_research::sat::SatClause::Create(a2, a3);
    uint64_t v4 = v5;
    uint64_t v7 = *(char **)(a1 + 312);
    unint64_t v6 = *(void *)(a1 + 320);
    if ((unint64_t)v7 < v6)
    {
      *(void *)uint64_t v7 = v5;
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_29:
      *(void *)(a1 + 312) = v8;
      return v4;
    }
    uint64_t v9 = *(char **)(a1 + 304);
    uint64_t v10 = (v7 - v9) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v14 = (char *)operator new(8 * v13);
      unint64_t v15 = &v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *(void *)unint64_t v15 = v4;
      uint64_t v8 = (uint64_t)(v15 + 8);
      unint64_t v17 = (char *)(v7 - v9);
      if (v7 == v9) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v15 = (char *)(8 * v10);
      uint64_t v16 = 0;
      *(void *)(8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v4;
      uint64_t v8 = 8 * v10 + 8;
      unint64_t v17 = (char *)(v7 - v9);
      if (v7 == v9)
      {
LABEL_27:
        *(void *)(a1 + 304) = v15;
        *(void *)(a1 + 312) = v8;
        *(void *)(a1 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v16;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_29;
      }
    }
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_38;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_38;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v21 = &v7[-v20];
    v15 -= v20;
    uint64_t v22 = &v14[8 * v10 - 16];
    unint64_t v23 = v7 - 16;
    uint64_t v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)uint64_t v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    uint64_t v7 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_38:
      do
      {
        uint64_t v26 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v26;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    uint64_t v7 = *(char **)(a1 + 304);
    goto LABEL_27;
  }
  operations_research::sat::LiteralWatchers::InprocessingFixLiteral((void *)a1, *a2);
  return 0;
}

void sub_23CBC2434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CBC243C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::LiteralWatchers::CleanUpWatchers(uint64_t this)
{
  uint64_t v1 = *(int **)(this + 144);
  unint64_t v2 = *(int **)(this + 152);
  if (v1 != v2)
  {
    do
    {
      unint64_t v3 = *v1;
      uint64_t v4 = (int ***)(*(void *)(this + 40) + 24 * (int)v3);
      int v5 = *v4;
      uint64_t v8 = v4[1];
      uint64_t v7 = v4 + 1;
      unint64_t v6 = v8;
      if (v5 != v8)
      {
        uint64_t v9 = v5 + 2;
        while (**(v9 - 1) >= 1)
        {
          BOOL v10 = v9 == v6;
          v9 += 2;
          if (v10) {
            goto LABEL_3;
          }
        }
        unint64_t v11 = v9 - 2;
        if (v9 - 2 != v6 && v9 != v6)
        {
          do
          {
            if (*v9[1] >= 1)
            {
              *(_OWORD *)unint64_t v11 = *(_OWORD *)v9;
              v11 += 2;
            }
            v9 += 2;
          }
          while (v9 != v6);
          unint64_t v6 = *v7;
        }
        if (v11 != v6) {
          char *v7 = v11;
        }
      }
LABEL_3:
      *(void *)(*(void *)(this + 96) + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
      ++v1;
    }
    while (v1 != v2);
    uint64_t v1 = *(int **)(this + 144);
  }
  *(void *)(this + 152) = v1;
  *(unsigned char *)(this + 16google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 1;
  return this;
}

void operations_research::sat::BinaryImplicationGraph::Resize(operations_research::sat::BinaryImplicationGraph *this, int a2)
{
  unint64_t v4 = 2 * a2;
  uint64_t v7 = *((void *)this + 24);
  uint64_t v6 = *((void *)this + 25);
  int v5 = (uint64_t *)((char *)this + 192);
  unint64_t v8 = (v6 - v7) >> 5;
  if (v4 <= v8)
  {
    if (v4 >= v8)
    {
      uint64_t v9 = v6;
    }
    else
    {
      uint64_t v9 = v7 + 32 * v4;
      if (v6 != v9)
      {
        uint64_t v10 = v6;
        do
        {
          char v11 = *(unsigned char *)(v10 - 32);
          v10 -= 32;
          if (v11) {
            operator delete(*(void **)(v6 - 24));
          }
          uint64_t v6 = v10;
        }
        while (v10 != v9);
      }
      *((void *)this + 25) = v9;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v5, v4 - v8);
    uint64_t v9 = *((void *)this + 25);
  }
  std::vector<BOOL>::resize((uint64_t)this + 544, (v9 - *((void *)this + 24)) >> 5, 0);
  std::vector<BOOL>::resize((uint64_t)this + 664, (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 5, 0);
  unint64_t v12 = (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 5;
  std::vector<int>::value_type __x = 0;
  uint64_t v13 = *((void *)this + 86);
  unint64_t v14 = (*((void *)this + 87) - v13) >> 2;
  BOOL v15 = v12 >= v14;
  std::vector<int>::size_type v16 = v12 - v14;
  if (v16 != 0 && v15)
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 688), v16, &__x);
    unint64_t v12 = (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 5;
  }
  else if (!v15)
  {
    *((void *)this + 87) = v13 + 4 * v12;
  }
  std::vector<BOOL>::resize((uint64_t)this + 640, v12, 0);
  std::deque<operations_research::sat::Literal>::resize((void *)this + 18, a2);
}

void std::deque<operations_research::sat::Literal>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  if (a2 > v3)
  {
    unint64_t v4 = a2 - v3;
    std::deque<operations_research::sat::Literal>::__append(a1, v4);
    return;
  }
  if (a2 >= v3) {
    return;
  }
  unint64_t v5 = a1[4];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  unint64_t v8 = (char *)(v7 + 8 * (v5 >> 10));
  if (v6 == v7)
  {
    uint64_t v9 = 0;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = *(void *)v8 + 4 * (a1[4] & 0x3FFLL);
    if (!a2)
    {
LABEL_12:
      __int16 v11 = v5 + v3;
      unint64_t v12 = (char *)(v7 + 8 * ((v5 + v3) >> 10));
      uint64_t v13 = v6 - v7;
      if (v6 != v7) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
  }
  uint64_t v10 = a2 + ((v9 - *(void *)v8) >> 2);
  if (v10 >= 1)
  {
    v8 += 8 * ((unint64_t)v10 >> 10);
    uint64_t v9 = *(void *)v8 + 4 * (v10 & 0x3FF);
    goto LABEL_12;
  }
  unint64_t v15 = 1023 - v10;
  v8 -= 8 * (v15 >> 10);
  uint64_t v9 = *(void *)v8 + 4 * (~(_WORD)v15 & 0x3FF);
  __int16 v11 = v5 + v3;
  unint64_t v12 = (char *)(v7 + 8 * ((v5 + v3) >> 10));
  uint64_t v13 = v6 - v7;
  if (v6 != v7)
  {
LABEL_13:
    uint64_t v14 = *(void *)v12 + 4 * (v11 & 0x3FF);
    if (v9 == v14) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v14 = 0;
  if (!v9) {
    return;
  }
LABEL_17:
  uint64_t v16 = ((v14 - *(void *)v12) >> 2) + ((v12 - v8) << 7) - ((v9 - *(void *)v8) >> 2);
  if (v16 >= 1)
  {
    uint64_t v17 = v6 == v7 ? 0 : (v13 << 7) - 1;
    unint64_t v18 = v3 - v16;
    a1[5] = v18;
    if (v17 - v5 - v18 >= 0x800)
    {
      do
      {
        operator delete(*(void **)(v6 - 8));
        uint64_t v19 = a1[1];
        uint64_t v6 = a1[2] - 8;
        a1[2] = v6;
        if (v6 == v19) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = ((v6 - v19) << 7) - 1;
        }
      }
      while ((unint64_t)(v20 - (a1[5] + a1[4])) > 0x7FF);
    }
  }
}

uint64_t operations_research::sat::BinaryImplicationGraph::AddBinaryClauseDuringSearch(uint64_t a1, int a2, int a3)
{
  if (!*(void *)(a1 + 216)) {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)(a1 + 128) + 12);
  }
  operations_research::sat::BinaryImplicationGraph::AddBinaryClause(a1, a2, a3);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(v6 + 24);
  unint64_t v8 = *(void *)(v7 + 8 * ((unint64_t)a2 >> 6));
  char v9 = a2 & 0x3F;
  unint64_t v10 = (unint64_t)a3 >> 6;
  unint64_t v11 = *(void *)(v7 + 8 * v10);
  if ((v8 >> (a2 & 0x3F ^ 1u)))
  {
    if (((v11 >> (a3 & 0x3E)) & 3) != 0)
    {
      if ((v11 >> (a3 & 0x3F ^ 1u))) {
        return 0;
      }
      goto LABEL_9;
    }
    unint64_t v13 = *(void *)(a1 + 176) + *(int *)(v6 + 12);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 152) + ((v13 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v13 & 0x3FF)) = a2;
    LODWORD(v13) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(void *)(v6 + 72) + 4 * *(int *)(v6 + 12)) = a3;
    *(_DWORD *)(v6 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(v6 + 8) & 0xFFFFFFE | a3 & 1 | (v13 << 28)) ^ 1;
    *(void *)(*(void *)(v6 + 120) + 8 * (a3 >> 1)) = *(void *)(v6 + 8);
    char v9 = a3 & 0x3F;
  }
  else
  {
    if (((v11 >> (a3 & 0x3F ^ 1u)) & 1) == 0 || ((v8 >> (a2 & 0x3E)) & 3) != 0)
    {
LABEL_9:
      *(unsigned char *)(a1 + 512) = 0;
      return 1;
    }
    unint64_t v14 = *(void *)(a1 + 176) + *(int *)(v6 + 12);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 152) + ((v14 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v14 & 0x3FF)) = a3;
    LODWORD(v14) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(void *)(v6 + 72) + 4 * *(int *)(v6 + 12)) = a2;
    *(_DWORD *)(v6 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(v6 + 8) & 0xFFFFFFE | a2 & 1 | (v14 << 28)) ^ 1;
    *(void *)(*(void *)(v6 + 120) + 8 * (a2 >> 1)) = *(void *)(v6 + 8);
    unint64_t v10 = (unint64_t)a2 >> 6;
  }
  *(void *)(*(void *)(v6 + 24) + 8 * v10) |= 1 << v9;
  ++*(_DWORD *)(v6 + 12);
  *(unsigned char *)(a1 + 512) = 0;
  return 1;
}

BOOL operations_research::sat::BinaryImplicationGraph::AddAtMostOne(uint64_t a1, char *__src, unint64_t a3)
{
  int v29 = (*(_DWORD *)(*(void *)(a1 + 128) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  if (v29) {
    google::MakeCheckOpString<int,int>((int)&v29, (int)&v30, "trail_->CurrentDecisionLevel() == 0");
  }
  if (a3 < 2) {
    return 1;
  }
  uint64_t v7 = *(void *)(a1 + 248);
  unint64_t v5 = *(void **)(a1 + 256);
  uint64_t v6 = (void **)(a1 + 248);
  std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 248), v5, __src, &__src[4 * a3], (uint64_t)(4 * a3) >> 2);
  char v9 = *(char **)(a1 + 256);
  unint64_t v8 = *(void *)(a1 + 264);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = (char *)*v6;
    uint64_t v12 = v9 - (unsigned char *)*v6;
    uint64_t v13 = v12 >> 2;
    unint64_t v14 = (v12 >> 2) + 1;
    if (v14 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v8 - (void)v11;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = operator new(4 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    unint64_t v18 = &v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *unint64_t v18 = -1;
    unint64_t v10 = v18 + 1;
    if (v9 != v11)
    {
      unint64_t v20 = v9 - v11 - 4;
      if (v20 < 0x2C) {
        goto LABEL_32;
      }
      if ((unint64_t)(v9 - v17 - v12) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v21 = (v20 >> 2) + 1;
      uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v23 = &v9[-v22];
      unint64_t v18 = (_DWORD *)((char *)v18 - v22);
      uint64_t v24 = &v17[4 * v13 - 16];
      long long v25 = v9 - 16;
      uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        _OWORD *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      char v9 = v23;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_32:
        do
        {
          int v28 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *--unint64_t v18 = v28;
        }
        while (v9 != v11);
      }
    }
    *(void *)(a1 + 24google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v18;
    *(void *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v19;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_DWORD *)char v9 = -1;
    unint64_t v10 = v9 + 4;
  }
  *(void *)(a1 + 256) = v10;
  *(unsigned char *)(a1 + 512) = 0;
  return operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes((operations_research::sat::BinaryImplicationGraph *)a1, ((unint64_t)v5 - v7) >> 2);
}

void sub_23CBC2C6C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes(operations_research::sat::BinaryImplicationGraph *this, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = this;
  uint64_t v4 = *((void *)this + 31);
  unint64_t v5 = (void *)((char *)this + 248);
  uint64_t v6 = *((void *)this + 32) - v4;
  unint64_t v87 = (unint64_t)v6 >> 2;
  if ((int)((unint64_t)v6 >> 2) <= (int)a2)
  {
LABEL_101:
    unint64_t v83 = v6 >> 2;
    if ((int)v2 <= v83)
    {
      if ((int)v2 < v83) {
        *((void *)v3 + 32) = v4 + 4 * (int)v2;
      }
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append((uint64_t)v5, (int)v2 - v83);
    }
    return 1;
  }
  uint64_t v91 = *((void *)this + 16);
  uint64_t v92 = (uint64_t *)((char *)this + 224);
  LODWORD(v7) = a2;
LABEL_5:
  uint64_t v8 = *v5;
  int v9 = *(_DWORD *)(*v5 + 4 * (int)v7);
  if (v9 == -1) {
    goto LABEL_4;
  }
  char v10 = 0;
  uint64_t v7 = (int)v7;
  uint64_t v11 = *(void *)(v91 + 24);
  int v12 = v2;
  do
  {
    uint64_t v13 = v9;
    unint64_t v14 = (unint64_t)v9 >> 6;
    unint64_t v15 = *(void *)(v11 + 8 * v14);
    if (((v15 >> (v9 & 0x3F ^ 1u)) & 1) == 0)
    {
      uint64_t v16 = 1 << (v9 & 0x3F);
      if ((*(void *)(*((void *)v3 + 83) + 8 * v14) & v16) == 0)
      {
        if (v10 & 1 | ((v15 & v16) == 0))
        {
          uint64_t v17 = *((void *)v3 + 71);
          if (v9 < (int)((unint64_t)(*((void *)v3 + 72) - v17) >> 2))
          {
LABEL_13:
            int v18 = *(_DWORD *)(v17 + 4 * v13);
            if (v18 != -1) {
              int v9 = v18;
            }
          }
LABEL_7:
          *(_DWORD *)(v8 + 4 * v12++) = v9;
          goto LABEL_8;
        }
        ++v7;
        int v9 = *(_DWORD *)(v8 + 4 * v7);
        if (v9 == -1) {
          goto LABEL_21;
        }
        uint64_t v13 = v9;
        unint64_t v19 = (unint64_t)v9 >> 6;
        char v10 = 1;
        if (((*(void *)(v11 + 8 * v19) >> (v9 & 0x3F ^ 1u)) & 1) == 0)
        {
          char v10 = 1;
          if ((*(void *)(*((void *)v3 + 83) + 8 * v19) & (1 << v9)) == 0)
          {
            uint64_t v17 = *((void *)v3 + 71);
            if (v9 < (int)((unint64_t)(*((void *)v3 + 72) - v17) >> 2)) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
      }
    }
LABEL_8:
    ++v7;
    int v9 = *(_DWORD *)(v8 + 4 * v7);
  }
  while (v9 != -1);
  if ((v10 & 1) == 0)
  {
    uint64_t v24 = (int)v2;
    long long v25 = (int *)(v8 + 4 * (int)v2);
    uint64_t v26 = (char *)(v8 + 4 * v12);
    unint64_t v27 = 126 - 2 * __clz((v26 - (char *)v25) >> 2);
    if (v12 == v2) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v27;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v25, v26, (uint64_t)v94, v28, 1);
    unint64_t v3 = this;
    LODWORD(v29) = v2;
    if ((int)v2 < v12)
    {
      uint64_t v30 = 4 * (int)v2;
      int v31 = v2;
      do
      {
        uint64_t v32 = *v5;
        int v33 = *(_DWORD *)(*v5 + v30);
        if (v31 > (int)v2 && (uint64_t v29 = v31 - 1, v33 == *(_DWORD *)(v32 + 4 * v29)))
        {
          unint64_t v34 = *(void *)(*(void *)(v91 + 24) + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if ((v34 >> v33)) {
            return 0;
          }
          if (((v34 >> (v33 & 0x3F ^ 1u)) & 1) == 0)
          {
            BOOL fixed = operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)v3, v33 ^ 1);
            unint64_t v3 = this;
            if (!fixed) {
              return 0;
            }
          }
        }
        else
        {
          LODWORD(v29) = v31 + 1;
          *(_DWORD *)(v32 + 4 * v31) = v33;
        }
        --v12;
        v30 += 4;
        int v31 = v29;
      }
      while (v2 != v12);
    }
    uint64_t v90 = v2;
    uint64_t v36 = (int *)(*v5 + 4 * (int)v2);
    uint64_t v37 = (int)v29;
    uint64_t v38 = (int)v29 - (uint64_t)(int)v2;
    unint64_t v39 = &v36[v38];
    if (v38 < 0xA)
    {
      uint64_t v85 = (int)v29 - v24;
      uint64_t v86 = v5;
      uint64_t v88 = v36;
      if (v29 == v90)
      {
LABEL_3:
        unint64_t v5 = v86;
        *((void *)v3 + 27) += (v85 - 1) * v85;
        uint64_t v2 = v90;
        goto LABEL_4;
      }
      while (2)
      {
        uint64_t v89 = v36;
        uint64_t v40 = *v36;
        unint64_t v41 = v88;
LABEL_49:
        int v42 = *v41;
        if (v40 == *v41) {
          goto LABEL_48;
        }
        uint64_t v43 = *((void *)v3 + 24) + 32 * v40;
        uint64_t v44 = v43 + 8;
        unint64_t v45 = *(void *)v43;
        if (*(void *)v43)
        {
          uint64_t v44 = *(void *)(v43 + 8);
          unint64_t v46 = *(void *)(v43 + 16);
          int v47 = v42 ^ 1;
          unint64_t v48 = v45 >> 1;
          if (v45 >> 1 == v46) {
            goto LABEL_54;
          }
        }
        else
        {
          unint64_t v46 = 6;
          int v47 = v42 ^ 1;
          unint64_t v48 = v45 >> 1;
          if (v45 >> 1 == 6)
          {
LABEL_54:
            if (((v46 >> 61) & 3) != 0) {
              goto LABEL_107;
            }
            uint64_t v49 = (char *)operator new(8 * v46);
            uint64_t v50 = v49;
            *(_DWORD *)&v49[4 * v46] = v47;
            if (v45 >= 2)
            {
              unint64_t v51 = 0;
              if (v46 < 8 || (unint64_t)&v49[-v44] < 0x20)
              {
                uint64_t v52 = (int *)v44;
              }
              else
              {
                unint64_t v51 = v46 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v52 = (int *)(v44 + 4 * (v46 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v53 = v49 + 16;
                uint64_t v54 = (long long *)(v44 + 16);
                unint64_t v55 = v46 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  long long v56 = *v54;
                  *(v53 - 1) = *(v54 - 1);
                  *uint64_t v53 = v56;
                  v53 += 2;
                  v54 += 2;
                  v55 -= 8;
                }
                while (v55);
                if (v46 == v51) {
                  goto LABEL_65;
                }
              }
              unint64_t v57 = v46 - v51;
              unint64_t v58 = &v49[4 * v51];
              do
              {
                int v59 = *v52++;
                *(_DWORD *)unint64_t v58 = v59;
                v58 += 4;
                --v57;
              }
              while (v57);
            }
LABEL_65:
            if (v45)
            {
              operator delete(*(void **)(v43 + 8));
              unint64_t v45 = *(void *)v43;
            }
            *(void *)(v43 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v50;
            *(void *)(v43 + 16) = 2 * v46;
            v45 |= 1uLL;
            unint64_t v3 = this;
LABEL_47:
            *(void *)uint64_t v43 = v45 + 2;
LABEL_48:
            if (++v41 == v39)
            {
              uint64_t v36 = v89 + 1;
              if (v89 + 1 == v39) {
                goto LABEL_3;
              }
              continue;
            }
            goto LABEL_49;
          }
        }
        break;
      }
      *(_DWORD *)(v44 + 4 * v4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v47;
      goto LABEL_47;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v60 = *v36;
        uint64_t v62 = *((void *)v3 + 28);
        uint64_t v61 = *((void *)v3 + 29);
        unint64_t v63 = (v61 - v62) >> 5;
        if ((int)v60 >= (int)v63)
        {
          if (v60 + 1 <= v63)
          {
            if (v60 + 1 < v63)
            {
              uint64_t v64 = v62 + 32 * (v60 + 1);
              if (v61 != v64)
              {
                uint64_t v65 = *((void *)v3 + 29);
                do
                {
                  char v66 = *(unsigned char *)(v65 - 32);
                  v65 -= 32;
                  if (v66)
                  {
                    operator delete(*(void **)(v61 - 24));
                    unint64_t v3 = this;
                  }
                  uint64_t v61 = v65;
                }
                while (v65 != v64);
              }
              *((void *)v3 + 29) = v64;
            }
          }
          else
          {
            std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v92, v60 + 1 - v63);
            unint64_t v3 = this;
          }
        }
        if ((*(void *)(*((void *)v3 + 68) + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60))
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v94, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 647);
          uint64_t v84 = (void *)google::LogMessage::stream((google::LogMessage *)v94);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Check failed: !is_redundant_[l.Index()] ", 40);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v94);
        }
        uint64_t v67 = *v92 + 32 * v60;
        uint64_t v68 = v67 + 8;
        unint64_t v69 = *(void *)v67;
        if ((*(void *)v67 & 1) == 0) {
          break;
        }
        uint64_t v68 = *(void *)(v67 + 8);
        unint64_t v70 = *(void *)(v67 + 16);
        unint64_t v71 = v69 >> 1;
        if (v69 >> 1 == v70) {
          goto LABEL_84;
        }
LABEL_68:
        *(_DWORD *)(v68 + 4 * v71) = v90;
        *(void *)uint64_t v67 = v69 + 2;
        if (++v36 == v39) {
          goto LABEL_98;
        }
      }
      unint64_t v70 = 6;
      unint64_t v71 = v69 >> 1;
      if (v69 >> 1 != 6) {
        goto LABEL_68;
      }
LABEL_84:
      if (((v70 >> 61) & 3) != 0) {
LABEL_107:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v72 = (char *)operator new(8 * v70);
      uint64_t v73 = v72;
      *(_DWORD *)&v72[4 * v70] = v90;
      if (v69 < 2) {
        goto LABEL_95;
      }
      unint64_t v74 = 0;
      if (v70 < 8 || (unint64_t)&v72[-v68] < 0x20)
      {
        unint64_t v75 = (int *)v68;
      }
      else
      {
        unint64_t v74 = v70 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v75 = (int *)(v68 + 4 * (v70 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v76 = v72 + 16;
        uint64_t v77 = (long long *)(v68 + 16);
        unint64_t v78 = v70 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *uint64_t v76 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 8;
        }
        while (v78);
        if (v70 == v74) {
          goto LABEL_95;
        }
      }
      unint64_t v80 = v70 - v74;
      uint64_t v81 = &v72[4 * v74];
      do
      {
        int v82 = *v75++;
        *(_DWORD *)uint64_t v81 = v82;
        v81 += 4;
        --v80;
      }
      while (v80);
LABEL_95:
      if (v69)
      {
        operator delete(*(void **)(v67 + 8));
        unint64_t v69 = *(void *)v67;
      }
      *(void *)(v67 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v73;
      *(void *)(v67 + 16) = 2 * v70;
      unint64_t v3 = this;
      *(void *)uint64_t v67 = (v69 | 1) + 2;
      if (++v36 == v39)
      {
LABEL_98:
        uint64_t v2 = (v37 + 1);
        *(_DWORD *)(*v5 + 4 * v37) = -1;
LABEL_4:
        LODWORD(v7) = v7 + 1;
        if ((int)v7 >= (int)v87)
        {
          uint64_t v4 = *((void *)v3 + 31);
          uint64_t v6 = *((void *)v3 + 32) - v4;
          goto LABEL_101;
        }
        goto LABEL_5;
      }
    }
  }
LABEL_21:
  if ((int)v2 >= v12) {
    goto LABEL_4;
  }
  uint64_t v20 = 4 * (int)v2;
  while (1)
  {
    unint64_t v21 = *(int *)(*v5 + v20);
    unint64_t v22 = *(void *)(*(void *)(v91 + 24) + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v22 >> (v21 & 0x3F ^ 1)) & 1) == 0)
    {
      if ((v22 >> (v21 & 0x3F))) {
        return 0;
      }
      BOOL result = operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)v3, v21 ^ 1);
      unint64_t v3 = this;
      if (!result) {
        return result;
      }
    }
    --v12;
    v20 += 4;
    if (v2 == v12) {
      goto LABEL_4;
    }
  }
}

void sub_23CBC3320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::FixLiteral(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 128);
  unint64_t v4 = (unint64_t)a2 >> 6;
  unint64_t v5 = *(void *)(*(void *)(v3 + 24) + 8 * v4);
  BOOL result = 1;
  uint64_t v7 = 1 << a2;
  if ((v5 & (1 << a2)) == 0)
  {
    if ((v5 >> (a2 & 0x3F ^ 1u)))
    {
      return 0;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 136);
      if (v9)
      {
        int v13 = a2;
        operations_research::sat::DratProofHandler::AddClause(v9, &v13, 1);
        uint64_t v3 = *(void *)(a1 + 128);
      }
      *(_DWORD *)(*(void *)(v3 + 72) + 4 * *(int *)(v3 + 12)) = a2;
      *(_DWORD *)(v3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(v3 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
      *(void *)(*(void *)(v3 + 120) + 8 * (a2 >> 1)) = *(void *)(v3 + 8);
      *(void *)(*(void *)(v3 + 24) + 8 * v4) |= v7;
      ++*(_DWORD *)(v3 + 12);
      uint64_t v10 = *(void *)(a1 + 128);
      if (!*(void *)(a1 + 216) && *(void *)(a1 + 224) == *(void *)(a1 + 232))
      {
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(v10 + 12);
        return 1;
      }
      else
      {
        while (1)
        {
          uint64_t v11 = *(int *)(a1 + 36);
          int v12 = *(_DWORD *)(v10 + 12);
          BOOL result = (int)v11 >= v12;
          if ((int)v11 >= v12) {
            break;
          }
          *(_DWORD *)(a1 + 36) = v11 + 1;
          if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue(a1, *(_DWORD *)(*(void *)(v10 + 72) + 4 * v11), v10) & 1) == 0)return 0; {
        }
          }
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::BinaryImplicationGraph::PropagateOnTrue(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)(*(void *)(a1 + 192) + 32 * a2);
  unint64_t v6 = *v3;
  unint64_t v4 = (int *)(v3 + 1);
  unint64_t v5 = v6;
  unint64_t v7 = v6 >> 1;
  *(void *)(a1 + 280) += v6 >> 1;
  if (v6) {
    unint64_t v4 = *(int **)v4;
  }
  if (v5 >= 2)
  {
    uint64_t v14 = *(void *)(a3 + 24);
    uint64_t v15 = 4 * v7;
    do
    {
      int v17 = *v4;
      unint64_t v18 = (unint64_t)*v4 >> 6;
      uint64_t v19 = 1 << *v4;
      if ((v19 & *(void *)(v14 + 8 * v18)) == 0)
      {
        ++*(void *)(a1 + 272);
        if ((*(void *)(v14 + 8 * v18) >> (v17 & 0x3F ^ 1u)))
        {
          int v29 = a2 ^ 1;
          int v30 = v17;
          *(void *)(a3 + 144) = 0;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 96), (char *)&v29, (char *)&v31, 2uLL);
          return 0;
        }
        unint64_t v16 = *(void *)(a1 + 176) + *(int *)(a3 + 12);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 152) + ((v16 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v16 & 0x3FF)) = a2 ^ 1;
        LODWORD(v16) = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(*(void *)(a3 + 72) + 4 * *(int *)(a3 + 12)) = v17;
        *(_DWORD *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | v17 & 1 | (v16 << 28)) ^ 1;
        *(void *)(*(void *)(a3 + 120) + 8 * (v17 >> 1)) = *(void *)(a3 + 8);
        uint64_t v14 = *(void *)(a3 + 24);
        *(void *)(v14 + 8 * v18) |= v19;
        ++*(_DWORD *)(a3 + 12);
      }
      ++v4;
      v15 -= 4;
    }
    while (v15);
  }
  uint64_t v8 = *(void *)(a1 + 224);
  if (a2 >= (int)((unint64_t)(*(void *)(a1 + 232) - v8) >> 5)) {
    return 1;
  }
  uint64_t v9 = (void *)(v8 + 32 * a2);
  unint64_t v12 = *v9;
  uint64_t v10 = (int *)(v9 + 1);
  unint64_t v11 = v12;
  if (v12) {
    uint64_t v10 = *(int **)v10;
  }
  if (v11 < 2) {
    return 1;
  }
  uint64_t v20 = &v10[v11 >> 1];
  uint64_t v21 = *(void *)(a1 + 248);
  while (1)
  {
    uint64_t v22 = *v10;
    int v23 = *(_DWORD *)(v21 + 4 * v22);
    if (v23 != -1) {
      break;
    }
LABEL_17:
    if (++v10 == v20) {
      return 1;
    }
  }
  uint64_t v24 = 4 * v22 + 4;
  while (1)
  {
    ++*(void *)(a1 + 280);
    if (v23 == a2) {
      goto LABEL_20;
    }
    unint64_t v25 = (unint64_t)v23 >> 6;
    uint64_t v26 = *(void *)(a3 + 24);
    if ((*(void *)(v26 + 8 * v25) >> (v23 & 0x3F ^ 1u))) {
      goto LABEL_20;
    }
    ++*(void *)(a1 + 272);
    if ((*(void *)(v26 + 8 * v25) >> (v23 & 0x3F))) {
      break;
    }
    unint64_t v27 = *(void *)(a1 + 176) + *(int *)(a3 + 12);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 152) + ((v27 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v27 & 0x3FF)) = a2 ^ 1;
    int v28 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(void *)(a3 + 72) + 4 * *(int *)(a3 + 12)) = v23 ^ 1;
    *(_DWORD *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | (v23 ^ 1) & 1 | (v28 << 28)) ^ 1;
    *(void *)(*(void *)(a3 + 120) + 8 * (v23 >> 1)) = *(void *)(a3 + 8);
    *(void *)(*(void *)(a3 + 24) + 8 * v25) |= 1 << (v23 ^ 1u);
    ++*(_DWORD *)(a3 + 12);
    uint64_t v21 = *(void *)(a1 + 248);
LABEL_20:
    int v23 = *(_DWORD *)(v21 + v24);
    v24 += 4;
    if (v23 == -1) {
      goto LABEL_17;
    }
  }
  int v29 = a2 ^ 1;
  int v30 = v23 ^ 1;
  *(void *)(a3 + 144) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 96), (char *)&v29, (char *)&v31, 2uLL);
  return 0;
}

uint64_t operations_research::sat::BinaryImplicationGraph::Reason(operations_research::sat::BinaryImplicationGraph *this, const operations_research::sat::Trail *a2, int a3)
{
  return *(void *)(*((void *)this + 19)
                   + (((unint64_t)(*((void *)this + 22) + a3) >> 7) & 0x1FFFFFFFFFFFFF8))
       + 4 * ((*((void *)this + 22) + a3) & 0x3FFLL);
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictWithReachability(void *a1, uint64_t *a2)
{
  a1[61] = a1[60];
  int v4 = *(_DWORD *)*a2 ^ 1;
  unint64_t v5 = a1 + 40;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v5, v4);
  unint64_t v6 = (unint64_t *)(a1[24] + 32 * v4);
  unint64_t v9 = *v6;
  uint64_t v8 = v6 + 1;
  unint64_t v7 = v9;
  unint64_t v98 = a2;
  if (v9) {
    uint64_t v8 = (void *)*v8;
  }
  if (v7 >= 2)
  {
    uint64_t v102 = (void **)(a1 + 60);
    uint64_t v99 = (char *)v8 + 4 * (v7 >> 1);
    uint64_t v100 = (void **)(a1 + 47);
    while (1)
    {
      long long v101 = v8;
      int v20 = *(_DWORD *)v8;
      if (((*(void *)(a1[41] + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        break;
      }
LABEL_12:
      uint64_t v8 = (void *)((char *)v101 + 4);
      if ((char *)v101 + 4 == v99) {
        goto LABEL_4;
      }
    }
    uint64_t v22 = (char *)a1[61];
    unint64_t v21 = a1[62];
    if ((unint64_t)v22 < v21)
    {
      *(_DWORD *)uint64_t v22 = v20;
      uint64_t v23 = (uint64_t)(v22 + 4);
LABEL_35:
      a1[61] = v23;
      uint64_t v41 = a1[60];
      while (1)
      {
        if (v41 == v23) {
          goto LABEL_12;
        }
        int v43 = *(_DWORD *)(v23 - 4);
        int v42 = v43;
        a1[61] = v23 - 4;
        uint64_t v44 = v43;
        unint64_t v45 = (unint64_t)v43 >> 6;
        uint64_t v46 = a1[41];
        uint64_t v47 = *(void *)(v46 + 8 * v45);
        uint64_t v48 = 1 << v43;
        if ((v47 & (1 << v43)) != 0) {
          goto LABEL_36;
        }
        *(void *)(v46 + 8 * v45) = v47 | v48;
        uint64_t v50 = (char *)a1[48];
        unint64_t v49 = a1[49];
        if ((unint64_t)v50 < v49)
        {
          *(_DWORD *)uint64_t v50 = v42;
          uint64_t v51 = (uint64_t)(v50 + 4);
          goto LABEL_60;
        }
        uint64_t v52 = (char *)*v100;
        uint64_t v53 = v50 - (unsigned char *)*v100;
        uint64_t v54 = v53 >> 2;
        unint64_t v55 = (v53 >> 2) + 1;
        if (v55 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v49 - (void)v52;
        if (v56 >> 1 > v55) {
          unint64_t v55 = v56 >> 1;
        }
        unint64_t v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v55;
        if (v57) {
          break;
        }
        unint64_t v58 = 0;
        int v59 = (_DWORD *)(4 * v54);
        *(_DWORD *)(4 * v54) = v42;
        uint64_t v51 = 4 * v54 + 4;
        if (v50 != v52) {
          goto LABEL_52;
        }
LABEL_58:
        a1[47] = v59;
        a1[48] = v51;
        a1[49] = &v58[4 * v57];
        if (v52) {
          operator delete(v52);
        }
LABEL_60:
        a1[48] = v51;
        unint64_t v69 = (unint64_t *)(a1[24] + 32 * v44);
        unint64_t v72 = *v69;
        unint64_t v71 = v69 + 1;
        unint64_t v70 = v72;
        if (v72) {
          unint64_t v71 = (void *)*v71;
        }
        if (v70 >= 2)
        {
          uint64_t v73 = (void *)((char *)v71 + 4 * (v70 >> 1));
          while (2)
          {
            int v75 = *(_DWORD *)v71;
            if ((*(void *)(a1[41] + (((unint64_t)v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v75)) {
              goto LABEL_66;
            }
            uint64_t v77 = (char *)a1[61];
            unint64_t v76 = a1[62];
            if ((unint64_t)v77 >= v76)
            {
              unint64_t v78 = (char *)*v102;
              uint64_t v79 = v77 - (unsigned char *)*v102;
              uint64_t v80 = v79 >> 2;
              unint64_t v81 = (v79 >> 2) + 1;
              if (v81 >> 62) {
                goto LABEL_92;
              }
              uint64_t v82 = v76 - (void)v78;
              if (v82 >> 1 > v81) {
                unint64_t v81 = v82 >> 1;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                if (v83 >> 62) {
                  goto LABEL_93;
                }
                uint64_t v84 = operator new(4 * v83);
                uint64_t v85 = &v84[4 * v80];
                *uint64_t v85 = v75;
                uint64_t v74 = (uint64_t)(v85 + 1);
                if (v77 == v78)
                {
LABEL_86:
                  a1[60] = v85;
                  a1[61] = v74;
                  a1[62] = &v84[4 * v83];
                  if (v78) {
                    operator delete(v78);
                  }
LABEL_65:
                  a1[61] = v74;
LABEL_66:
                  unint64_t v71 = (void *)((char *)v71 + 4);
                  if (v71 == v73) {
                    goto LABEL_36;
                  }
                  continue;
                }
              }
              else
              {
                uint64_t v84 = 0;
                uint64_t v85 = (_DWORD *)(4 * v80);
                *(_DWORD *)(4 * v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v75;
                uint64_t v74 = 4 * v80 + 4;
                if (v77 == v78) {
                  goto LABEL_86;
                }
              }
              unint64_t v86 = v77 - 4 - v78;
              if (v86 < 0x2C) {
                goto LABEL_97;
              }
              if ((unint64_t)(v77 - &v84[v79]) < 0x20) {
                goto LABEL_97;
              }
              uint64_t v87 = (v86 >> 2) + 1;
              uint64_t v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v89 = &v77[-v88];
              uint64_t v85 = (_DWORD *)((char *)v85 - v88);
              uint64_t v90 = &v84[4 * v80 - 16];
              uint64_t v91 = v77 - 16;
              uint64_t v92 = v87 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v93 = *(_OWORD *)v91;
                *(v90 - 1) = *((_OWORD *)v91 - 1);
                *uint64_t v90 = v93;
                v90 -= 2;
                v91 -= 32;
                v92 -= 8;
              }
              while (v92);
              uint64_t v77 = v89;
              if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_97:
                do
                {
                  int v94 = *((_DWORD *)v77 - 1);
                  v77 -= 4;
                  *--uint64_t v85 = v94;
                }
                while (v77 != v78);
              }
              goto LABEL_86;
            }
            break;
          }
          *(_DWORD *)uint64_t v77 = v75;
          uint64_t v74 = (uint64_t)(v77 + 4);
          goto LABEL_65;
        }
LABEL_36:
        uint64_t v41 = a1[60];
        uint64_t v23 = a1[61];
      }
      if (v57 >> 62) {
        goto LABEL_93;
      }
      unint64_t v58 = operator new(4 * v57);
      int v59 = &v58[4 * v54];
      *int v59 = v42;
      uint64_t v51 = (uint64_t)(v59 + 1);
      if (v50 == v52) {
        goto LABEL_58;
      }
LABEL_52:
      unint64_t v60 = v50 - 4 - v52;
      if (v60 < 0x2C) {
        goto LABEL_98;
      }
      if ((unint64_t)(v50 - &v58[v53]) < 0x20) {
        goto LABEL_98;
      }
      uint64_t v61 = (v60 >> 2) + 1;
      uint64_t v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v63 = &v50[-v62];
      int v59 = (_DWORD *)((char *)v59 - v62);
      uint64_t v64 = &v58[4 * v54 - 16];
      uint64_t v65 = v50 - 16;
      uint64_t v66 = v61 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v67 = *(_OWORD *)v65;
        *(v64 - 1) = *((_OWORD *)v65 - 1);
        *uint64_t v64 = v67;
        v64 -= 2;
        v65 -= 32;
        v66 -= 8;
      }
      while (v66);
      uint64_t v50 = v63;
      if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_98:
        do
        {
          int v68 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *--int v59 = v68;
        }
        while (v50 != v52);
      }
      goto LABEL_58;
    }
    uint64_t v24 = (char *)*v102;
    uint64_t v25 = v22 - (unsigned char *)*v102;
    uint64_t v26 = v25 >> 2;
    unint64_t v27 = (v25 >> 2) + 1;
    if (v27 >> 62) {
LABEL_92:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v28 = v21 - (void)v24;
    if (v28 >> 1 > v27) {
      unint64_t v27 = v28 >> 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      if (v29 >> 62) {
LABEL_93:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v30 = operator new(4 * v29);
      uint64_t v31 = &v30[4 * v26];
      *uint64_t v31 = v20;
      uint64_t v23 = (uint64_t)(v31 + 1);
      if (v22 == v24) {
        goto LABEL_33;
      }
    }
    else
    {
      int v30 = 0;
      uint64_t v31 = (_DWORD *)(4 * v26);
      *(_DWORD *)(4 * v26) = v20;
      uint64_t v23 = 4 * v26 + 4;
      if (v22 == v24)
      {
LABEL_33:
        a1[60] = v31;
        a1[61] = v23;
        a1[62] = &v30[4 * v29];
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_35;
      }
    }
    unint64_t v32 = v22 - 4 - v24;
    if (v32 < 0x2C) {
      goto LABEL_99;
    }
    if ((unint64_t)(v22 - &v30[v25]) < 0x20) {
      goto LABEL_99;
    }
    uint64_t v33 = (v32 >> 2) + 1;
    uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v35 = &v22[-v34];
    uint64_t v31 = (_DWORD *)((char *)v31 - v34);
    uint64_t v36 = &v30[4 * v26 - 16];
    uint64_t v37 = v22 - 16;
    uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *uint64_t v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    uint64_t v22 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_99:
      do
      {
        int v40 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--uint64_t v31 = v40;
      }
      while (v22 != v24);
    }
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v10 = *v98;
  uint64_t v11 = v98[1] - *v98;
  unint64_t v12 = v11 >> 2;
  if ((unint64_t)v11 < 5)
  {
    int v17 = 1;
  }
  else
  {
    uint64_t v13 = a1[41];
    uint64_t v14 = 2;
    if (v12 > 2) {
      uint64_t v14 = v12;
    }
    uint64_t v15 = v14 - 1;
    unint64_t v16 = (int *)(v10 + 4);
    int v17 = 1;
    do
    {
      int v19 = *v16++;
      int v18 = v19;
      if (((*(void *)(v13 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v19 & 0x3F ^ 1u)) & 1) == 0) {
        *(_DWORD *)(v10 + 4 * v17++) = v18;
      }
      --v15;
    }
    while (v15);
  }
  BOOL v95 = v12 > v17;
  unint64_t v96 = v12 - v17;
  if (v95)
  {
    unint64_t v97 = v96 + a1[37];
    ++a1[36];
    a1[37] = v97;
    v98[1] = v10 + 4 * v17;
  }
}

void operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(uint64_t a1, int a2)
{
  uint64_t v3 = *(int **)(a1 + 56);
  int v4 = *(int **)(a1 + 64);
  if ((int)(300 * ((unint64_t)((char *)v4 - (char *)v3) >> 2)) >= a2)
  {
    int v17 = a2 & ~(a2 >> 31);
    *(_DWORD *)a1 = v17;
    int v19 = (void **)(a1 + 8);
    int v18 = *(char **)(a1 + 8);
    unint64_t v20 = (v17 + 63) >> 6;
    uint64_t v21 = *(void *)(a1 + 16) - (void)v18;
    unint64_t v22 = v21 >> 3;
    uint64_t v24 = 0;
    if (v20 <= v21 >> 3)
    {
      if (v20 < v21 >> 3) {
        *(void *)(a1 + 16) = &v18[8 * v20];
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 8, v20 - (v21 >> 3), &v24);
      int v18 = (char *)*v19;
    }
    if (v20 >= v22) {
      unint64_t v23 = v22;
    }
    else {
      unint64_t v23 = v20;
    }
    bzero(v18, 8 * v23);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v5 = a1 + 8;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v3 != v4)
    {
      unint64_t v7 = (char *)v4 - (char *)v3 - 4;
      uint64_t v8 = v3;
      if (v7 < 4) {
        goto LABEL_23;
      }
      uint64_t v9 = (v7 >> 2) + 1;
      uint64_t v8 = &v3[v9 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v10 = v3 + 1;
      uint64_t v11 = v9 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        unint64_t v12 = ((unint64_t)*v10 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(void *)(v6 + (((unint64_t)*(v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFFoperations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator((operations_research::sat::CircuitCoveringPropagator *)((char *)this - 8)) = 0;
        *(void *)(v6 + v12) = 0;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_23:
        do
        {
          unint64_t v13 = *v8++;
          *(void *)(v6 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFFoperations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator((operations_research::sat::CircuitCoveringPropagator *)((char *)this - 8)) = 0;
        }
        while (v8 != v4);
      }
    }
    *(void *)(a1 + 64) = v3;
    int v14 = a2 & ~(a2 >> 31);
    *(_DWORD *)a1 = v14;
    unint64_t v15 = (v14 + 63) >> 6;
    uint64_t v24 = 0;
    unint64_t v16 = (*(void *)(a1 + 16) - v6) >> 3;
    if (v15 <= v16)
    {
      if (v15 < v16) {
        *(void *)(a1 + 16) = v6 + 8 * v15;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(v5, v15 - v16, &v24);
    }
  }
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirst(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (*a3 == a3[1])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v25, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 834);
    uint64_t v24 = (void *)google::LogMessage::stream((google::LogMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: !conflict->empty() ", 33);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::sat::BinaryImplicationGraph::MarkDescendants(a1, *(_DWORD *)*a3 ^ 1);
  uint64_t v8 = (int *)a1[47];
  uint64_t v9 = (int *)a1[48];
  while (v8 != v9)
  {
    int v10 = *v8;
    if ((*(void *)(*(void *)(a2 + 24) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 & 0x3F ^ 1u))) {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a4, v10 >> 1);
    }
    ++v8;
  }
  uint64_t v11 = (_DWORD *)*a3;
  uint64_t v12 = a3[1] - *a3;
  unint64_t v13 = v12 >> 2;
  if ((unint64_t)v12 < 5)
  {
    int v18 = 1;
  }
  else
  {
    uint64_t v14 = a1[41];
    uint64_t v15 = 2;
    if (v13 > 2) {
      uint64_t v15 = v13;
    }
    uint64_t v16 = v15 - 1;
    int v17 = v11 + 1;
    int v18 = 1;
    do
    {
      int v20 = *v17++;
      int v19 = v20;
      if (((*(void *)(v14 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v20 & 0x3F ^ 1u)) & 1) == 0) {
        v11[v18++] = v19;
      }
      --v16;
    }
    while (v16);
  }
  BOOL v21 = v13 > v18;
  unint64_t v22 = v13 - v18;
  if (v21)
  {
    unint64_t v23 = v22 + a1[37];
    ++a1[36];
    a1[37] = v23;
    a3[1] = &v11[v18];
  }
}

void sub_23CBC40C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::BinaryImplicationGraph::MarkDescendants(void *a1, int a2)
{
  int __src = a2;
  int v4 = (void **)(a1 + 60);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a1 + 60, (char *)&__src, (char *)&v122, 1uLL);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 40, a2);
  if (((*(void *)(a1[68] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    uint64_t v5 = a1[60];
    if (a1[61] != v5)
    {
      uint64_t v6 = 0;
      uint64_t v113 = (void **)(a1 + 47);
      uint64_t v114 = v4;
      while (1)
      {
        uint64_t v116 = *(int *)(v5 + 4 * v6);
        uint64_t v8 = (void *)(a1[24] + 32 * v116);
        unint64_t v11 = *v8;
        int v10 = (int *)(v8 + 1);
        unint64_t v9 = v11;
        uint64_t v112 = v6;
        if (v11) {
          int v10 = *(int **)v10;
        }
        if (v9 >= 2) {
          break;
        }
LABEL_8:
        uint64_t v12 = a1[28];
        int v13 = v116;
        if ((int)v116 < (int)((unint64_t)(a1[29] - v12) >> 5))
        {
          uint64_t v14 = (void *)(v12 + 32 * v116);
          unint64_t v17 = *v14;
          uint64_t v16 = (int *)(v14 + 1);
          unint64_t v15 = v17;
          if (v17) {
            uint64_t v16 = *(int **)v16;
          }
          if (v15 >= 2)
          {
            uint64_t v115 = &v16[v15 >> 1];
            uint64_t v18 = a1[31];
            while (1)
            {
              uint64_t v19 = *v16;
              int v20 = *(_DWORD *)(v18 + 4 * v19);
              if (v20 != -1) {
                break;
              }
LABEL_14:
              if (++v16 == v115) {
                goto LABEL_4;
              }
            }
            int v117 = v16;
            while (2)
            {
              if (v20 == v13) {
                goto LABEL_19;
              }
              int v22 = v20 ^ 1;
              unint64_t v23 = (unint64_t)v20 >> 6;
              uint64_t v24 = a1[41];
              uint64_t v25 = 1 << (v20 ^ 1u);
              if ((*(void *)(v24 + 8 * v23) & v25) != 0 || (*(void *)(a1[68] + 8 * v23) & v25) != 0) {
                goto LABEL_19;
              }
              unint64_t v27 = (int *)a1[61];
              unint64_t v26 = a1[62];
              if ((unint64_t)v27 < v26)
              {
                int *v27 = v22;
                a1[61] = v27 + 1;
                uint64_t v28 = *(void *)(v24 + 8 * v23);
                if ((v28 & v25) == 0) {
                  goto LABEL_45;
                }
LABEL_19:
                ++v19;
                uint64_t v18 = a1[31];
                int v20 = *(_DWORD *)(v18 + 4 * v19);
                if (v20 == -1)
                {
                  uint64_t v16 = v117;
                  goto LABEL_14;
                }
                continue;
              }
              break;
            }
            unint64_t v29 = (int *)*v114;
            uint64_t v30 = (char *)v27 - (unsigned char *)*v114;
            uint64_t v31 = v30 >> 2;
            unint64_t v32 = (v30 >> 2) + 1;
            if (v32 >> 62) {
              goto LABEL_120;
            }
            uint64_t v33 = v26 - (void)v29;
            if (v33 >> 1 > v32) {
              unint64_t v32 = v33 >> 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            unint64_t v119 = v32;
            if (v32)
            {
              if (v32 >> 62) {
                goto LABEL_121;
              }
              uint64_t v34 = operator new(4 * v32);
              unint64_t v35 = (int *)&v34[4 * v31];
              *unint64_t v35 = v22;
              uint64_t v36 = (uint64_t)(v35 + 1);
              if (v27 == v29)
              {
LABEL_42:
                a1[60] = v35;
                a1[61] = v36;
                a1[62] = &v34[4 * v119];
                if (v29)
                {
                  uint64_t v46 = v36;
                  operator delete(v29);
                  uint64_t v36 = v46;
                  uint64_t v24 = a1[41];
                }
                int v13 = v116;
                a1[61] = v36;
                uint64_t v28 = *(void *)(v24 + 8 * v23);
                if ((v28 & v25) != 0) {
                  goto LABEL_19;
                }
LABEL_45:
                *(void *)(v24 + 8 * v23) = v28 | v25;
                uint64_t v48 = (int *)a1[48];
                unint64_t v47 = a1[49];
                if ((unint64_t)v48 < v47)
                {
                  *uint64_t v48 = v22;
                  uint64_t v21 = (uint64_t)(v48 + 1);
                }
                else
                {
                  unint64_t v49 = (int *)*v113;
                  uint64_t v50 = (char *)v48 - (unsigned char *)*v113;
                  uint64_t v51 = v50 >> 2;
                  unint64_t v52 = (v50 >> 2) + 1;
                  if (v52 >> 62) {
                    goto LABEL_122;
                  }
                  uint64_t v53 = v47 - (void)v49;
                  if (v53 >> 1 > v52) {
                    unint64_t v52 = v53 >> 1;
                  }
                  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v54 = v52;
                  }
                  if (v54)
                  {
                    if (v54 >> 62) {
                      goto LABEL_121;
                    }
                    unint64_t v55 = operator new(4 * v54);
                    uint64_t v56 = (int *)&v55[4 * v51];
                    *uint64_t v56 = v22;
                    uint64_t v21 = (uint64_t)(v56 + 1);
                    if (v48 != v49)
                    {
LABEL_55:
                      unint64_t v57 = (char *)(v48 - 1) - (char *)v49;
                      if (v57 < 0x2C) {
                        goto LABEL_125;
                      }
                      if ((unint64_t)((char *)v48 - &v55[v50]) < 0x20) {
                        goto LABEL_125;
                      }
                      uint64_t v58 = (v57 >> 2) + 1;
                      uint64_t v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
                      unint64_t v60 = &v48[v59 / 0xFFFFFFFFFFFFFFFCLL];
                      uint64_t v56 = (int *)((char *)v56 - v59);
                      uint64_t v61 = &v55[4 * v51 - 16];
                      uint64_t v62 = v48 - 4;
                      uint64_t v63 = v58 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v64 = *(_OWORD *)v62;
                        *(v61 - 1) = *((_OWORD *)v62 - 1);
                        *uint64_t v61 = v64;
                        v61 -= 2;
                        v62 -= 8;
                        v63 -= 8;
                      }
                      while (v63);
                      uint64_t v48 = v60;
                      if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_125:
                        do
                        {
                          int v65 = *--v48;
                          *--uint64_t v56 = v65;
                        }
                        while (v48 != v49);
                      }
                    }
                  }
                  else
                  {
                    unint64_t v55 = 0;
                    uint64_t v56 = (int *)(4 * v51);
                    *(_DWORD *)(4 * v51) = v22;
                    uint64_t v21 = 4 * v51 + 4;
                    if (v48 != v49) {
                      goto LABEL_55;
                    }
                  }
                  a1[47] = v56;
                  a1[48] = v21;
                  a1[49] = &v55[4 * v54];
                  if (v49) {
                    operator delete(v49);
                  }
                  int v13 = v116;
                }
                a1[48] = v21;
                goto LABEL_19;
              }
            }
            else
            {
              uint64_t v34 = 0;
              unint64_t v35 = (int *)(4 * v31);
              *(_DWORD *)(4 * v31) = v22;
              uint64_t v36 = 4 * v31 + 4;
              if (v27 == v29) {
                goto LABEL_42;
              }
            }
            unint64_t v37 = (char *)(v27 - 1) - (char *)v29;
            if (v37 < 0x2C) {
              goto LABEL_126;
            }
            if ((unint64_t)((char *)v27 - &v34[v30]) < 0x20) {
              goto LABEL_126;
            }
            uint64_t v38 = (v37 >> 2) + 1;
            uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
            int v40 = &v27[v39 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v35 = (int *)((char *)v35 - v39);
            uint64_t v41 = &v34[4 * v31 - 16];
            int v42 = v27 - 4;
            uint64_t v43 = v38 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *uint64_t v41 = v44;
              v41 -= 2;
              v42 -= 8;
              v43 -= 8;
            }
            while (v43);
            unint64_t v27 = v40;
            if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_126:
              do
              {
                int v45 = *--v27;
                *--unint64_t v35 = v45;
              }
              while (v27 != v29);
            }
            goto LABEL_42;
          }
        }
LABEL_4:
        uint64_t v6 = v112 + 1;
        uint64_t v5 = a1[60];
        unint64_t v7 = (a1[61] - v5) >> 2;
        int v4 = v114;
        if (v7 <= v112 + 1) {
          goto LABEL_118;
        }
      }
      uint64_t v66 = &v10[v9 >> 1];
      unint64_t v118 = v66;
      while (1)
      {
        int v68 = *v10;
        unint64_t v69 = (unint64_t)*v10 >> 6;
        uint64_t v70 = a1[41];
        uint64_t v71 = 1 << *v10;
        if ((v71 & *(void *)(v70 + 8 * v69)) != 0 || (*(void *)(a1[68] + 8 * v69) & v71) != 0) {
          goto LABEL_70;
        }
        uint64_t v73 = (char *)a1[61];
        unint64_t v72 = a1[62];
        if ((unint64_t)v73 >= v72) {
          break;
        }
        *(_DWORD *)uint64_t v73 = v68;
        a1[61] = v73 + 4;
        uint64_t v74 = *(void *)(v70 + 8 * v69);
        if ((v74 & v71) != 0) {
          goto LABEL_70;
        }
LABEL_96:
        *(void *)(v70 + 8 * v69) = v74 | v71;
        int v94 = (char *)a1[48];
        unint64_t v93 = a1[49];
        if ((unint64_t)v94 >= v93)
        {
          BOOL v95 = (char *)*v113;
          uint64_t v96 = v94 - (unsigned char *)*v113;
          uint64_t v97 = v96 >> 2;
          unint64_t v98 = (v96 >> 2) + 1;
          if (v98 >> 62) {
LABEL_122:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v99 = v93 - (void)v95;
          if (v99 >> 1 > v98) {
            unint64_t v98 = v99 >> 1;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            if (v100 >> 62) {
LABEL_121:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            long long v101 = operator new(4 * v100);
            uint64_t v102 = &v101[4 * v97];
            *uint64_t v102 = v68;
            uint64_t v67 = (uint64_t)(v102 + 1);
            if (v94 == v95) {
              goto LABEL_114;
            }
LABEL_108:
            unint64_t v103 = v94 - 4 - v95;
            if (v103 < 0x2C) {
              goto LABEL_127;
            }
            if ((unint64_t)(v94 - &v101[v96]) < 0x20) {
              goto LABEL_127;
            }
            uint64_t v104 = (v103 >> 2) + 1;
            uint64_t v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
            int v106 = &v94[-v105];
            uint64_t v102 = (_DWORD *)((char *)v102 - v105);
            uint64_t v107 = &v101[4 * v97 - 16];
            unint64_t v108 = v94 - 16;
            uint64_t v109 = v104 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v110 = *(_OWORD *)v108;
              *(v107 - 1) = *((_OWORD *)v108 - 1);
              *uint64_t v107 = v110;
              v107 -= 2;
              v108 -= 32;
              v109 -= 8;
            }
            while (v109);
            int v94 = v106;
            if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_127:
              do
              {
                int v111 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *--uint64_t v102 = v111;
              }
              while (v94 != v95);
            }
          }
          else
          {
            long long v101 = 0;
            uint64_t v102 = (_DWORD *)(4 * v97);
            *(_DWORD *)(4 * v97) = v68;
            uint64_t v67 = 4 * v97 + 4;
            if (v94 != v95) {
              goto LABEL_108;
            }
          }
LABEL_114:
          a1[47] = v102;
          a1[48] = v67;
          a1[49] = &v101[4 * v100];
          if (v95) {
            operator delete(v95);
          }
          int v4 = v114;
          uint64_t v66 = v118;
          goto LABEL_69;
        }
        *(_DWORD *)int v94 = v68;
        uint64_t v67 = (uint64_t)(v94 + 4);
LABEL_69:
        a1[48] = v67;
LABEL_70:
        if (++v10 == v66) {
          goto LABEL_8;
        }
      }
      int v75 = (char *)*v4;
      uint64_t v76 = (v73 - v75) >> 2;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 62) {
LABEL_120:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v78 = v72 - (void)v75;
      if (v78 >> 1 > v77) {
        unint64_t v77 = v78 >> 1;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v120 = v77;
      if (v77)
      {
        if (v77 >> 62) {
          goto LABEL_121;
        }
        uint64_t v79 = (char *)operator new(4 * v77);
        uint64_t v80 = &v79[4 * v76];
        *(_DWORD *)uint64_t v80 = v68;
        uint64_t v81 = (uint64_t)(v80 + 4);
        if (v73 == v75)
        {
LABEL_93:
          a1[60] = v80;
          a1[61] = v81;
          a1[62] = &v79[4 * v120];
          if (v75)
          {
            uint64_t v91 = v75;
            uint64_t v92 = v81;
            operator delete(v91);
            uint64_t v81 = v92;
            uint64_t v70 = a1[41];
          }
          int v4 = v114;
          uint64_t v66 = v118;
          a1[61] = v81;
          uint64_t v74 = *(void *)(v70 + 8 * v69);
          if ((v74 & v71) != 0) {
            goto LABEL_70;
          }
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v79 = 0;
        uint64_t v80 = (char *)(4 * v76);
        *(_DWORD *)(4 * v76) = v68;
        uint64_t v81 = 4 * v76 + 4;
        if (v73 == v75) {
          goto LABEL_93;
        }
      }
      unint64_t v82 = v73 - 4 - v75;
      if (v82 < 0x2C) {
        goto LABEL_128;
      }
      if ((unint64_t)(v75 - v79) < 0x20) {
        goto LABEL_128;
      }
      uint64_t v83 = (v82 >> 2) + 1;
      uint64_t v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v85 = &v73[-v84];
      v80 -= v84;
      unint64_t v86 = &v79[4 * v76 - 16];
      uint64_t v87 = v73 - 16;
      uint64_t v88 = v83 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v89 = *(_OWORD *)v87;
        *((_OWORD *)v86 - 1) = *((_OWORD *)v87 - 1);
        *(_OWORD *)unint64_t v86 = v89;
        v86 -= 32;
        v87 -= 32;
        v88 -= 8;
      }
      while (v88);
      uint64_t v73 = v85;
      if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_128:
        do
        {
          int v90 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v80 - 1) = v90;
          v80 -= 4;
        }
        while (v73 != v75);
      }
      goto LABEL_93;
    }
    unint64_t v7 = 0;
LABEL_118:
    a1[63] += v7;
  }
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirstWithTransitiveReduction(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = **(_DWORD **)a3 ^ 1;
  uint64_t v8 = a1 + 40;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v8, v7);
  unint64_t v9 = (unint64_t *)(a1[24] + 32 * v7);
  unint64_t v11 = (void **)(v9 + 1);
  unint64_t v10 = *v9;
  uint64_t v12 = *v9 & 1;
  int v13 = (int *)(v9 + 1);
  if (*v9) {
    int v13 = (int *)*v11;
  }
  if (4 * (v10 >> 1) >= 5)
  {
    long long v138 = xmmword_23CE812D0;
    unint64_t v14 = (unint64_t)&v13[(v10 >> 1) - 1];
    if (v14 > (unint64_t)v13)
    {
      unint64_t v15 = v9;
      uint64_t v16 = ((v10 >> 1) & 0x3FFFFFFFFFFFFFFFLL) - 1;
      do
      {
        v137[0] = 0;
        v137[1] = v16;
        uint64_t v17 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v138, a5, v137);
        if (v17)
        {
          int v18 = *v13;
          *int v13 = v13[v17];
          v13[v17] = v18;
        }
        ++v13;
        --v16;
      }
      while ((unint64_t)v13 < v14);
      unint64_t v9 = v15;
      unint64_t v10 = *v15;
      uint64_t v12 = *v15 & 1;
    }
  }
  uint64_t v19 = (char *)a1[60];
  a1[61] = v19;
  int v20 = v11;
  if (v12) {
    int v20 = *v11;
  }
  unint64_t v21 = v10 >> 1;
  uint64_t v130 = v11;
  int v22 = 0;
  if (v10 >= 2)
  {
    uint64_t v135 = (void **)(a1 + 47);
    uint64_t v136 = (void **)(a1 + 60);
    unint64_t v23 = &v20[v21];
    int64_t v131 = v23;
    uint64_t v132 = v9;
    while (1)
    {
      int v24 = *v20;
      if (((*(void *)(a1[41] + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        break;
      }
LABEL_15:
      if (++v20 == v23)
      {
        unint64_t v10 = *v9;
        unint64_t v21 = *v9 >> 1;
        goto LABEL_100;
      }
    }
    uint64_t v25 = v11;
    if (*(unsigned char *)v9) {
      uint64_t v25 = (void **)*v11;
    }
    *((_DWORD *)v25 + v22) = v24;
    unint64_t v26 = a1[62];
    if ((unint64_t)v19 < v26)
    {
      *(_DWORD *)uint64_t v19 = v24;
      uint64_t v27 = (uint64_t)(v19 + 4);
      ++v22;
      a1[61] = v19 + 4;
      if ((char *)a1[60] != v19 + 4) {
        goto LABEL_21;
      }
      goto LABEL_91;
    }
    int v81 = v22;
    unint64_t v82 = (char *)*v136;
    uint64_t v83 = v19 - (unsigned char *)*v136;
    uint64_t v84 = v83 >> 2;
    unint64_t v85 = (v83 >> 2) + 1;
    if (v85 >> 62) {
LABEL_134:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v86 = v26 - (void)v82;
    if (v86 >> 1 > v85) {
      unint64_t v85 = v86 >> 1;
    }
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v87 = v85;
    }
    if (v87)
    {
      if (v87 >> 62) {
        goto LABEL_135;
      }
      uint64_t v88 = operator new(4 * v87);
      long long v89 = &v88[4 * v84];
      *long long v89 = v24;
      uint64_t v27 = (uint64_t)(v89 + 1);
      if (v19 != v82)
      {
LABEL_82:
        unint64_t v90 = v19 - 4 - v82;
        if (v90 >= 0xBC
          && &v88[v83 - 4 - (v90 & 0xFFFFFFFFFFFFFFFCLL)] <= &v88[v83 - 4]
          && &v19[-(v90 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v19 - 4
          && (unint64_t)(v19 - v88 - v83) >= 0x20)
        {
          uint64_t v94 = (v90 >> 2) + 1;
          uint64_t v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v91 = &v19[-v95];
          long long v89 = (_DWORD *)((char *)v89 - v95);
          uint64_t v96 = &v88[4 * v84 - 16];
          uint64_t v97 = v19 - 16;
          uint64_t v98 = v94 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v99 = *(_OWORD *)v97;
            *(v96 - 1) = *((_OWORD *)v97 - 1);
            *uint64_t v96 = v99;
            v96 -= 2;
            v97 -= 32;
            v98 -= 8;
          }
          while (v98);
          int v92 = v81;
          if (v94 == (v94 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_88:
            a1[60] = v89;
            a1[61] = v27;
            a1[62] = &v88[4 * v87];
            if (!v82)
            {
LABEL_90:
              unint64_t v23 = v131;
              unint64_t v9 = v132;
              int v22 = v92 + 1;
              a1[61] = v27;
              if (a1[60] == v27)
              {
LABEL_91:
                uint64_t v19 = (char *)v27;
                unint64_t v11 = v130;
                goto LABEL_15;
              }
LABEL_21:
              unint64_t v133 = v20;
              int v134 = v22;
              while (1)
              {
                int v29 = *(_DWORD *)(v27 - 4);
                int v28 = v29;
                a1[61] = v27 - 4;
                uint64_t v30 = v29;
                unint64_t v31 = (unint64_t)v29 >> 6;
                uint64_t v32 = a1[41];
                uint64_t v33 = *(void *)(v32 + 8 * v31);
                uint64_t v34 = 1 << v29;
                if ((v33 & (1 << v29)) == 0) {
                  break;
                }
LABEL_22:
                uint64_t v19 = (char *)a1[60];
                uint64_t v27 = a1[61];
                if (v19 == (char *)v27)
                {
                  unint64_t v9 = v132;
                  int v20 = v133;
                  unint64_t v11 = v130;
                  unint64_t v23 = v131;
                  int v22 = v134;
                  goto LABEL_15;
                }
              }
              *(void *)(v32 + 8 * v31) = v33 | v34;
              uint64_t v36 = (char *)a1[48];
              unint64_t v35 = a1[49];
              if ((unint64_t)v36 < v35)
              {
                *(_DWORD *)uint64_t v36 = v28;
                uint64_t v37 = (uint64_t)(v36 + 4);
                goto LABEL_45;
              }
              uint64_t v38 = (char *)*v135;
              uint64_t v39 = v36 - (unsigned char *)*v135;
              uint64_t v40 = v39 >> 2;
              unint64_t v41 = (v39 >> 2) + 1;
              if (v41 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v42 = v35 - (void)v38;
              if (v42 >> 1 > v41) {
                unint64_t v41 = v42 >> 1;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                if (v43 >> 62) {
                  goto LABEL_135;
                }
                long long v44 = operator new(4 * v43);
                int v45 = &v44[4 * v40];
                *int v45 = v28;
                uint64_t v37 = (uint64_t)(v45 + 1);
                if (v36 == v38) {
                  goto LABEL_43;
                }
              }
              else
              {
                long long v44 = 0;
                int v45 = (_DWORD *)(4 * v40);
                *(_DWORD *)(4 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v28;
                uint64_t v37 = 4 * v40 + 4;
                if (v36 == v38)
                {
LABEL_43:
                  a1[47] = v45;
                  a1[48] = v37;
                  a1[49] = &v44[4 * v43];
                  if (v38) {
                    operator delete(v38);
                  }
LABEL_45:
                  a1[48] = v37;
                  unint64_t v55 = (unint64_t *)(a1[24] + 32 * v30);
                  unint64_t v58 = *v55;
                  unint64_t v57 = v55 + 1;
                  unint64_t v56 = v58;
                  if (v58) {
                    unint64_t v57 = (void *)*v57;
                  }
                  if (v56 >= 2)
                  {
                    uint64_t v59 = (void *)((char *)v57 + 4 * (v56 >> 1));
                    while (2)
                    {
                      int v61 = *(_DWORD *)v57;
                      if ((*(void *)(a1[41] + (((unint64_t)v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61)) {
                        goto LABEL_51;
                      }
                      uint64_t v63 = (char *)a1[61];
                      unint64_t v62 = a1[62];
                      if ((unint64_t)v63 >= v62)
                      {
                        long long v64 = (char *)*v136;
                        uint64_t v65 = v63 - (unsigned char *)*v136;
                        uint64_t v66 = v65 >> 2;
                        unint64_t v67 = (v65 >> 2) + 1;
                        if (v67 >> 62) {
                          goto LABEL_134;
                        }
                        uint64_t v68 = v62 - (void)v64;
                        if (v68 >> 1 > v67) {
                          unint64_t v67 = v68 >> 1;
                        }
                        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v69 = v67;
                        }
                        if (v69)
                        {
                          if (v69 >> 62) {
                            goto LABEL_135;
                          }
                          uint64_t v70 = operator new(4 * v69);
                          uint64_t v71 = &v70[4 * v66];
                          *uint64_t v71 = v61;
                          uint64_t v60 = (uint64_t)(v71 + 1);
                          if (v63 == v64)
                          {
LABEL_71:
                            a1[60] = v71;
                            a1[61] = v60;
                            a1[62] = &v70[4 * v69];
                            if (v64) {
                              operator delete(v64);
                            }
LABEL_50:
                            a1[61] = v60;
LABEL_51:
                            unint64_t v57 = (void *)((char *)v57 + 4);
                            if (v57 == v59) {
                              goto LABEL_22;
                            }
                            continue;
                          }
                        }
                        else
                        {
                          uint64_t v70 = 0;
                          uint64_t v71 = (_DWORD *)(4 * v66);
                          *(_DWORD *)(4 * v66) = v61;
                          uint64_t v60 = 4 * v66 + 4;
                          if (v63 == v64) {
                            goto LABEL_71;
                          }
                        }
                        unint64_t v72 = v63 - 4 - v64;
                        if (v72 < 0x2C) {
                          goto LABEL_139;
                        }
                        if ((unint64_t)(v63 - &v70[v65]) < 0x20) {
                          goto LABEL_139;
                        }
                        uint64_t v73 = (v72 >> 2) + 1;
                        uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                        int v75 = &v63[-v74];
                        uint64_t v71 = (_DWORD *)((char *)v71 - v74);
                        uint64_t v76 = &v70[4 * v66 - 16];
                        unint64_t v77 = v63 - 16;
                        uint64_t v78 = v73 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v79 = *(_OWORD *)v77;
                          *(v76 - 1) = *((_OWORD *)v77 - 1);
                          *uint64_t v76 = v79;
                          v76 -= 2;
                          v77 -= 32;
                          v78 -= 8;
                        }
                        while (v78);
                        uint64_t v63 = v75;
                        if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_139:
                          do
                          {
                            int v80 = *((_DWORD *)v63 - 1);
                            v63 -= 4;
                            *--uint64_t v71 = v80;
                          }
                          while (v63 != v64);
                        }
                        goto LABEL_71;
                      }
                      break;
                    }
                    *(_DWORD *)uint64_t v63 = v61;
                    uint64_t v60 = (uint64_t)(v63 + 4);
                    goto LABEL_50;
                  }
                  goto LABEL_22;
                }
              }
              unint64_t v46 = v36 - 4 - v38;
              if (v46 < 0x2C) {
                goto LABEL_140;
              }
              if ((unint64_t)(v36 - &v44[v39]) < 0x20) {
                goto LABEL_140;
              }
              uint64_t v47 = (v46 >> 2) + 1;
              uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v49 = &v36[-v48];
              int v45 = (_DWORD *)((char *)v45 - v48);
              uint64_t v50 = &v44[4 * v40 - 16];
              uint64_t v51 = v36 - 16;
              uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v53 = *(_OWORD *)v51;
                *(v50 - 1) = *((_OWORD *)v51 - 1);
                *uint64_t v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              uint64_t v36 = v49;
              if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_140:
                do
                {
                  int v54 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--int v45 = v54;
                }
                while (v36 != v38);
              }
              goto LABEL_43;
            }
LABEL_89:
            operator delete(v82);
            goto LABEL_90;
          }
        }
        else
        {
          uint64_t v91 = v19;
          int v92 = v81;
        }
        do
        {
          int v93 = *((_DWORD *)v91 - 1);
          v91 -= 4;
          *--long long v89 = v93;
        }
        while (v91 != v82);
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v88 = 0;
      long long v89 = (_DWORD *)(4 * v84);
      *(_DWORD *)(4 * v84) = v24;
      uint64_t v27 = 4 * v84 + 4;
      if (v19 != v82) {
        goto LABEL_82;
      }
    }
    int v92 = v81;
    a1[60] = v89;
    a1[61] = v27;
    a1[62] = &v88[4 * v87];
    if (!v82) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
LABEL_100:
  if (v21 <= v22) {
    goto LABEL_123;
  }
  a1[38] += v21 - v22;
  uint64_t v100 = v10 & 1;
  if ((v10 & 1) == 0)
  {
    unint64_t v101 = 6;
    if ((unint64_t)v22 <= 6) {
      goto LABEL_122;
    }
LABEL_105:
    unint64_t v102 = 2 * v101;
    if (v102 <= v22) {
      unint64_t v103 = v22;
    }
    else {
      unint64_t v103 = v102;
    }
    if (v103 >> 62) {
LABEL_135:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v104 = v9;
    uint64_t v105 = (char *)operator new(4 * v103);
    int v106 = v105;
    unint64_t v9 = v104;
    if (v10 < 2) {
      goto LABEL_119;
    }
    uint64_t v107 = 0;
    if (v21 < 8 || (unint64_t)(v105 - (char *)v11) < 0x20)
    {
      unint64_t v108 = v11;
    }
    else
    {
      uint64_t v107 = v21 & 0x7FFFFFFFFFFFFFF8;
      unint64_t v108 = (void **)((char *)v11 + 4 * (v21 & 0x7FFFFFFFFFFFFFF8));
      uint64_t v109 = v105 + 16;
      long long v110 = (long long *)(v11 + 2);
      uint64_t v111 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v112 = *v110;
        *(v109 - 1) = *(v110 - 1);
        _OWORD *v109 = v112;
        v109 += 2;
        v110 += 2;
        v111 -= 8;
      }
      while (v111);
      if (v21 == v107) {
        goto LABEL_119;
      }
    }
    unint64_t v113 = v21 - v107;
    uint64_t v114 = &v105[4 * v107];
    do
    {
      int v115 = *(_DWORD *)v108;
      unint64_t v108 = (void **)((char *)v108 + 4);
      *(_DWORD *)uint64_t v114 = v115;
      v114 += 4;
      --v113;
    }
    while (v113);
LABEL_119:
    if (v10)
    {
      operator delete(*v130);
      unint64_t v9 = v104;
    }
    v9[1] = (unint64_t)v106;
    v9[2] = v103;
    uint64_t v100 = 1;
    goto LABEL_122;
  }
  unint64_t v11 = (void **)v9[1];
  unint64_t v101 = v9[2];
  if (v101 < v22) {
    goto LABEL_105;
  }
LABEL_122:
  unint64_t *v9 = v100 | (2 * v22);
LABEL_123:
  uint64_t v116 = *(_DWORD **)a3;
  uint64_t v117 = *(void *)(a3 + 8) - *(void *)a3;
  unint64_t v118 = v117 >> 2;
  if ((unint64_t)v117 < 5)
  {
    int v123 = 1;
  }
  else
  {
    uint64_t v119 = a1[41];
    uint64_t v120 = 2;
    if (v118 > 2) {
      uint64_t v120 = v118;
    }
    uint64_t v121 = v120 - 1;
    uint64_t v122 = v116 + 1;
    int v123 = 1;
    do
    {
      int v125 = *v122++;
      int v124 = v125;
      if (((*(void *)(v119 + (((unint64_t)v125 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v125 & 0x3F ^ 1u)) & 1) == 0) {
        v116[v123++] = v124;
      }
      --v121;
    }
    while (v121);
  }
  BOOL v126 = v118 > v123;
  unint64_t v127 = v118 - v123;
  if (v126)
  {
    unint64_t v128 = v127 + a1[37];
    ++a1[36];
    a1[37] = v128;
    *(void *)(a3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v116[v123];
  }
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictExperimental(void *a1, uint64_t a2, int **a3)
{
  uint64_t v6 = a1 + 40;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 50), (a1[25] - a1[24]) >> 5);
  int v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 == v8)
  {
    unint64_t v10 = *a3;
    unint64_t v11 = 0;
LABEL_17:
    unint64_t v14 = v11 >> 2;
    int v13 = 1;
    goto LABEL_18;
  }
  do
  {
    int v9 = *v7++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v6, v9);
  }
  while (v7 != v8);
  int v7 = *a3;
  unint64_t v10 = a3[1];
  unint64_t v11 = (char *)v10 - (char *)*a3;
  if (v11 < 5) {
    goto LABEL_17;
  }
  unint64_t v12 = 1;
  int v13 = 1;
  do
  {
    while (1)
    {
      uint64_t v15 = v7[v12];
      uint64_t v16 = (void *)(a1[24] + 32 * v15);
      unint64_t v19 = *v16;
      uint64_t v17 = (int *)(v16 + 1);
      unint64_t v18 = v19;
      if (v19) {
        uint64_t v17 = *(int **)v17;
      }
      if (v18 >= 2) {
        break;
      }
LABEL_5:
      v7[v13++] = v15;
      ++v12;
      unint64_t v14 = v10 - v7;
      if (v14 <= v12) {
        goto LABEL_18;
      }
    }
    uint64_t v20 = 4 * (v18 >> 1);
    while (1)
    {
      unint64_t v21 = (unint64_t)*v17 >> 6;
      if (((1 << *v17) & *(void *)(a1[41] + 8 * v21)) != 0
        && (((*(_DWORD *)(*(void *)(a2 + 120) + 8 * (*v17 >> 1)) ^ *(_DWORD *)(*(void *)(a2 + 120)
                                                                                 + 8 * ((int)v15 >> 1))) & 0xFFFFFFE) != 0
         || (*(void *)(a1[51] + 8 * v21) & (1 << *v17)) == 0))
      {
        break;
      }
      ++v17;
      v20 -= 4;
      if (!v20) {
        goto LABEL_5;
      }
    }
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 50, v15);
    int v7 = *a3;
    unint64_t v10 = a3[1];
    ++v12;
    unint64_t v14 = v10 - *a3;
  }
  while (v14 > v12);
LABEL_18:
  BOOL v22 = v14 > v13;
  unint64_t v23 = v14 - v13;
  if (v22)
  {
    uint64_t v24 = a1[37];
    ++a1[36];
    a1[37] = v23 + v24;
    uint64_t v25 = &v7[v13];
    if (v25 != v10) {
      a3[1] = v25;
    }
  }
}

BOOL operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(BOOL this)
{
  uint64_t v1 = this;
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(this + 128);
  LODWORD(v7google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = (*(_DWORD *)(v2 + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v77) = 0;
  if (v78) {
    google::MakeCheckOpString<int,int>((int)&v78, (int)&v77, "trail_->CurrentDecisionLevel() == 0");
  }
  if (*(_DWORD *)(this + 712) != *(_DWORD *)(v2 + 12))
  {
    int v73 = *(_DWORD *)(v2 + 12);
    uint64_t v72 = v2;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(this + 320, (*(void *)(this + 200) - *(void *)(this + 192)) >> 5);
    int v3 = *(_DWORD *)(v1 + 712);
    int v4 = v73;
    if (v3 < v73)
    {
      uint64_t v76 = (void **)(v1 + 376);
      while (1)
      {
        uint64_t v5 = *(int *)(*(void *)(*(void *)(v1 + 128) + 72) + 4 * v3);
        uint64_t v6 = v5 ^ 1;
        uint64_t v7 = *(void *)(v1 + 192);
        uint64_t v8 = (void *)(v7 + 32 * (v5 ^ 1));
        unint64_t v11 = *v8;
        unint64_t v10 = (int *)(v8 + 1);
        unint64_t v9 = v11;
        if (v11) {
          unint64_t v10 = *(int **)v10;
        }
        if (v9 >= 2) {
          break;
        }
LABEL_36:
        uint64_t v78 = 0;
        absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v78, v7 + 32 * v5);
        if (v78) {
          operator delete(__p);
        }
        uint64_t v37 = *(void *)(v1 + 192) + 32 * v6;
        uint64_t v78 = 0;
        absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v78, v37);
        if (v78) {
          operator delete(__p);
        }
        uint64_t v38 = *(void *)(v1 + 224);
        unint64_t v39 = (unint64_t)(*(void *)(v1 + 232) - v38) >> 5;
        if ((int)v5 < (int)v39)
        {
          uint64_t v78 = 0;
          absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v78, v38 + 32 * v5);
          if (v78) {
            operator delete(__p);
          }
          uint64_t v38 = *(void *)(v1 + 224);
          unint64_t v39 = (unint64_t)(*(void *)(v1 + 232) - v38) >> 5;
        }
        if ((int)v6 < (int)v39)
        {
          uint64_t v78 = 0;
          absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v78, v38 + 32 * v6);
          if (v78) {
            operator delete(__p);
          }
        }
        int v3 = *(_DWORD *)(v1 + 712) + 1;
        *(_DWORD *)(v1 + 712) = v3;
        if (v3 >= v4) {
          goto LABEL_47;
        }
      }
      uint64_t v74 = v5;
      uint64_t v75 = v5 ^ 1;
      unint64_t v12 = &v10[v9 >> 1];
      while (1)
      {
        int v14 = *v10 ^ 1;
        unint64_t v15 = (unint64_t)*v10 >> 6;
        uint64_t v16 = *(void *)(v1 + 328);
        uint64_t v17 = *(void *)(v16 + 8 * v15);
        if (((1 << v14) & v17) != 0) {
          goto LABEL_12;
        }
        *(void *)(v16 + 8 * v15) = (1 << v14) | v17;
        unint64_t v19 = *(int **)(v1 + 384);
        unint64_t v18 = *(void *)(v1 + 392);
        if ((unint64_t)v19 >= v18) {
          break;
        }
        *unint64_t v19 = v14;
        uint64_t v13 = (uint64_t)(v19 + 1);
LABEL_11:
        *(void *)(v1 + 384) = v13;
LABEL_12:
        if (++v10 == v12)
        {
          uint64_t v7 = *(void *)(v1 + 192);
          int v4 = v73;
          uint64_t v5 = v74;
          uint64_t v6 = v75;
          goto LABEL_36;
        }
      }
      uint64_t v20 = (int *)*v76;
      uint64_t v21 = (char *)v19 - (unsigned char *)*v76;
      uint64_t v22 = v21 >> 2;
      unint64_t v23 = (v21 >> 2) + 1;
      if (v23 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v18 - (void)v20;
      if (v24 >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v26 = operator new(4 * v25);
        uint64_t v27 = (int *)&v26[4 * v22];
        int *v27 = v14;
        uint64_t v13 = (uint64_t)(v27 + 1);
        if (v19 == v20) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = (int *)(4 * v22);
        *(_DWORD *)(4 * v22) = v14;
        uint64_t v13 = 4 * v22 + 4;
        if (v19 == v20)
        {
LABEL_32:
          *(void *)(v1 + 376) = v27;
          *(void *)(v1 + 384) = v13;
          *(void *)(v1 + 392) = &v26[4 * v25];
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_11;
        }
      }
      unint64_t v28 = (char *)(v19 - 1) - (char *)v20;
      if (v28 < 0x2C) {
        goto LABEL_92;
      }
      if ((unint64_t)((char *)v19 - &v26[v21]) < 0x20) {
        goto LABEL_92;
      }
      uint64_t v29 = (v28 >> 2) + 1;
      uint64_t v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v31 = &v19[v30 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v27 = (int *)((char *)v27 - v30);
      uint64_t v32 = &v26[4 * v22 - 16];
      uint64_t v33 = v19 - 4;
      uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *(_OWORD *)v33;
        *(v32 - 1) = *((_OWORD *)v33 - 1);
        _OWORD *v32 = v35;
        v32 -= 2;
        v33 -= 8;
        v34 -= 8;
      }
      while (v34);
      unint64_t v19 = v31;
      if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_92:
        do
        {
          int v36 = *--v19;
          *--uint64_t v27 = v36;
        }
        while (v19 != v20);
      }
      goto LABEL_32;
    }
LABEL_47:
    uint64_t v40 = *(int **)(v1 + 376);
    unint64_t v41 = *(int **)(v1 + 384);
    if (v40 != v41)
    {
      uint64_t v42 = *(void *)(v1 + 192);
      while (1)
      {
        unint64_t v43 = (void *)(v42 + 32 * *v40);
        int v45 = (char *)(v43 + 1);
        unint64_t v44 = *v43;
        unint64_t v46 = (int *)(v43 + 1);
        if (*v43) {
          unint64_t v46 = *(int **)v45;
        }
        unint64_t v47 = v44 >> 1;
        uint64_t v48 = &v46[v44 >> 1];
        if (v44 >= 2)
        {
          uint64_t v53 = 4 * v47;
          while (((*(void *)(*(void *)(v72 + 24) + (((unint64_t)*v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v46) & 1) == 0)
          {
            ++v46;
            v53 -= 4;
            if (!v53)
            {
              unint64_t v49 = (char *)v48;
              goto LABEL_62;
            }
          }
        }
        unint64_t v49 = (char *)v48;
        if (v46 == v48) {
          goto LABEL_62;
        }
        uint64_t v50 = v46 + 1;
        if (v46 + 1 != v48) {
          break;
        }
        unint64_t v49 = (char *)v46;
        if (v44) {
          goto LABEL_63;
        }
LABEL_64:
        int v54 = &v45[4 * v47];
        if (v49 != v54)
        {
          uint64_t v55 = v54 - v49;
          uint64_t v56 = (v49 - v45) >> 2;
          uint64_t v57 = v56 + (v55 >> 2);
          unint64_t v58 = v47 - v57;
          if (v47 != v57)
          {
            uint64_t v59 = &v45[4 * v57];
            if (v58 < 0xC || (unint64_t)(v49 - v45 - 4 * v57) < 0x20)
            {
              unint64_t v60 = 0;
              goto LABEL_69;
            }
            unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFF8;
            v59 += 4 * (v58 & 0xFFFFFFFFFFFFFFF8);
            long long v64 = &v45[4 * v56 + 16];
            uint64_t v65 = &v45[4 * v57 + 16];
            unint64_t v66 = v58 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v67 = *(_OWORD *)v65;
              *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
              *(_OWORD *)long long v64 = v67;
              v64 += 32;
              v65 += 32;
              v66 -= 8;
            }
            while (v66);
            if (v58 != v60)
            {
LABEL_69:
              unint64_t v61 = v47 - v60 - v57;
              unint64_t v62 = &v45[4 * v60 + 4 * v56];
              do
              {
                int v63 = *(_DWORD *)v59;
                v59 += 4;
                *(_DWORD *)unint64_t v62 = v63;
                v62 += 4;
                --v61;
              }
              while (v61);
            }
          }
          *unint64_t v43 = v44 - (v55 >> 1);
        }
        if (++v40 == v41) {
          goto LABEL_80;
        }
      }
      uint64_t v51 = *(void *)(v72 + 24);
      unint64_t v49 = (char *)v46;
      do
      {
        int v52 = *v50;
        if (((*(void *)(v51 + (((unint64_t)v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
        {
          *(_DWORD *)unint64_t v49 = v52;
          v49 += 4;
        }
        ++v50;
      }
      while (v50 != v48);
LABEL_62:
      if ((v44 & 1) == 0) {
        goto LABEL_64;
      }
LABEL_63:
      int v45 = *(char **)v45;
      goto LABEL_64;
    }
LABEL_80:
    uint64_t v69 = *(void *)(v1 + 224);
    uint64_t v68 = *(void *)(v1 + 232);
    if (v68 != v69)
    {
      uint64_t v70 = *(void *)(v1 + 232);
      do
      {
        char v71 = *(unsigned char *)(v70 - 32);
        v70 -= 32;
        if (v71) {
          operator delete(*(void **)(v68 - 24));
        }
        uint64_t v68 = v70;
      }
      while (v70 != v69);
    }
    *(void *)(v1 + 232) = v69;
    return operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes((operations_research::sat::BinaryImplicationGraph *)v1, 0);
  }
  return this;
}

void sub_23CBC57FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBC5804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p)
{
  if (a16)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::BinaryImplicationGraph::DetectEquivalences(operations_research::sat::BinaryImplicationGraph *this, int a2)
{
  if (*((unsigned char *)this + 512)) {
    return 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  if (*operations_research::sat::BinaryImplicationGraph::DetectEquivalences(BOOL)::vlocal__ < 1)
  {
    BOOL inited = 0;
    uint64_t v6 = *((void *)this + 16);
    if (*((void *)this + 27)) {
      goto LABEL_11;
    }
  }
  else if (operations_research::sat::BinaryImplicationGraph::DetectEquivalences(BOOL)::vlocal__ == &google::kLogSiteUninitialized)
  {
    BOOL inited = google::InitVLOG3__((google *)&operations_research::sat::BinaryImplicationGraph::DetectEquivalences(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/clause.cc", (const char *)1);
    uint64_t v6 = *((void *)this + 16);
    if (*((void *)this + 27)) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL inited = 1;
    uint64_t v6 = *((void *)this + 16);
    if (*((void *)this + 27)) {
      goto LABEL_11;
    }
  }
  if (*((void *)this + 28) == *((void *)this + 29))
  {
    *((_DWORD *)this + 9) = *(_DWORD *)(v6 + 12);
LABEL_15:
    operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((BOOL)this);
    uint64_t v8 = *((void *)this + 16);
    unint64_t v9 = *((void *)this + 25) - *((void *)this + 24);
    unint64_t v10 = v9 >> 5;
    int v280 = 0;
    uint64_t v281 = 0;
    uint64_t v282 = 0;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    long long v274 = 0u;
    long long v275 = 0u;
    *(_OWORD *)v263 = 0u;
    long long v264 = 0u;
    uint64_t v265 = &v274;
    unint64_t v266 = (char *)this + 192;
    v257 = (uint64_t *)((char *)this + 192);
    int64_t v267 = (char *)this + 224;
    unint64_t v268 = (char *)this + 248;
    *(_OWORD *)v269 = 0u;
    *(_OWORD *)v270 = 0u;
    long long v271 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v273 = 0;
    StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents((std::vector<int> *)&v274, v9 >> 5, (uint64_t)v263, (uint64_t)&v280);
    unint64_t v255 = v9;
    uint64_t v11 = *((void *)&v264 + 1);
    unint64_t v12 = (int *)v263[0];
    uint64_t v13 = (int *)v263[1];
    if (v263[0] == v263[1])
    {
      uint64_t v14 = 0;
LABEL_24:
      uint64_t v2 = 1;
      uint64_t v17 = __p[0];
      if (!__p[0]) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *v12;
        unint64_t v16 = *(void *)(*(void *)(v8 + 24) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if ((v16 >> (v15 & 0x3F ^ 1))) {
          break;
        }
        if (((v16 >> (v15 & 0x3F)) & 1) == 0)
        {
          uint64_t v14 = (v14 + 1);
          if (!operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)this, *v12)) {
            break;
          }
        }
        if (++v12 == v13) {
          goto LABEL_24;
        }
      }
      uint64_t v2 = 0;
      uint64_t v17 = __p[0];
      if (!__p[0]) {
        goto LABEL_26;
      }
    }
    __p[1] = v17;
    operator delete(v17);
LABEL_26:
    if (v270[1]) {
      operator delete(v270[1]);
    }
    if (v269[0])
    {
      v269[1] = v269[0];
      operator delete(v269[0]);
    }
    if (v263[0])
    {
      v263[1] = v263[0];
      operator delete(v263[0]);
    }
    if (*((void *)&v278 + 1))
    {
      *(void *)&long long v279 = *((void *)&v278 + 1);
      operator delete(*((void **)&v278 + 1));
    }
    if ((void)v277)
    {
      *((void *)&v277 + 1) = v277;
      operator delete((void *)v277);
    }
    if (*((void *)&v275 + 1))
    {
      *(void *)&long long v276 = *((void *)&v275 + 1);
      operator delete(*((void **)&v275 + 1));
    }
    if ((void)v274)
    {
      *((void *)&v274 + 1) = v274;
      operator delete((void *)v274);
    }
    if (!v2) {
      goto LABEL_274;
    }
    uint64_t v258 = v8;
    unint64_t v18 = (int)((uint64_t)v255 >> 5);
    uint64_t v19 = *((void *)this + 71);
    unint64_t v20 = (*((void *)this + 72) - v19) >> 2;
    v252 = (uint64_t *)((char *)this + 568);
    if (v18 <= v20)
    {
      if (v18 < v20) {
        *((void *)this + 72) = v19 + 4 * v18;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 568), v18 - v20, &operations_research::sat::kNoLiteralIndex);
    }
    uint64_t v21 = (uint64_t *)((char *)this + 544);
    std::vector<BOOL>::resize((uint64_t)this + 544, v18, 0);
    int v253 = inited | a2;
    double v22 = (double)v11 * 0.00000004 + 0.0;
    *((void *)this + 66) = *((void *)this + 65);
    unint64_t v23 = v280;
    long long v254 = v281;
    if (v280 == v281)
    {
      *((unsigned char *)this + 512) = 1;
LABEL_267:
      *(double *)(*((void *)this + 15) + 112) = v22 + *(double *)(*((void *)this + 15) + 112);
      if (v253)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v263, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1292);
        int v210 = (void *)google::LogMessage::stream((google::LogMessage *)v263);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)"SCC. ", 5);
        int v211 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)" redundant equivalent literals. ", 32);
        int v212 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)" fixed. ", 8);
        int v213 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)" implications left. ", 20);
        int v214 = (void *)std::ostream::operator<<();
        int v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)" literals.", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)" size of at_most_one buffer = ", 30);
        int v216 = (void *)std::ostream::operator<<();
        int v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)".", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)" dtime: ", 8);
        v218 = (void *)std::ostream::operator<<();
        uint64_t v219 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)" wtime: ", 8);
        absl::lts_2020_02_25::GetCurrentTimeNanos(v219);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v263);
      }
      uint64_t v2 = 1;
LABEL_274:
      unint64_t v221 = v280;
      if (v280)
      {
        uint64_t v222 = v281;
        unint64_t v223 = v280;
        if (v281 != v280)
        {
          v224 = v281;
          do
          {
            uint64_t v226 = *(v224 - 3);
            v224 -= 3;
            v225 = v226;
            if (v226)
            {
              *(v222 - 2) = v225;
              operator delete(v225);
            }
            uint64_t v222 = v224;
          }
          while (v224 != v221);
          unint64_t v223 = v280;
        }
        uint64_t v281 = v221;
        operator delete(v223);
      }
      return v2;
    }
    int v248 = v10;
    int v24 = 0;
    v251 = (void **)((char *)this + 520);
    while (1)
    {
      unint64_t v25 = (char *)*v23;
      unint64_t v26 = v23[1];
      if (*v23 != v26)
      {
        uint64_t v27 = *v23;
        while (1)
        {
          unint64_t v28 = *v27;
          unint64_t v29 = *(void *)(*(void *)(*((void *)this + 16) + 24) + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v29 >> (v28 & 0x3E)) & 3) != 0) {
            break;
          }
          if (++v27 == v26) {
            goto LABEL_53;
          }
        }
        BOOL v34 = ((v29 >> v28) & 1) == 0;
        while (1)
        {
          unint64_t v35 = *(int *)v25;
          uint64_t v36 = *v21;
          unint64_t v37 = v35 >> 6;
          uint64_t v38 = *(void *)(*v21 + 8 * (v35 >> 6));
          if (((1 << v35) & v38) == 0)
          {
            ++*((void *)this + 39);
            *(void *)(v36 + 8 * v37) = (1 << v35) | v38;
          }
          int v39 = v35;
          unint64_t v40 = *(void *)(*(void *)(v258 + 24) + 8 * v37);
          char v41 = v35 & 0x3F ^ v34;
          if ((v40 >> (v41 ^ 1u))) {
            break;
          }
          if (((v40 >> v41) & 1) == 0)
          {
            if (!operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)this, v39)) {
              break;
            }
            uint64_t v14 = (v14 + 1);
          }
          v25 += 4;
          if (v25 == (char *)v26) {
            goto LABEL_48;
          }
        }
LABEL_273:
        uint64_t v2 = 0;
        goto LABEL_274;
      }
LABEL_53:
      if ((char *)v26 - v25 == 4
        && ((*(void *)(*((void *)this + 83) + (((unint64_t)*(int *)v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)v25) & 1) != 0)
      {
        goto LABEL_48;
      }
      std::__sort<std::__less<int,int> &,int *>();
      int v30 = **v23;
      unint64_t v31 = (char *)*((void *)this + 66);
      unint64_t v32 = *((void *)this + 67);
      uint64_t v256 = v23;
      if ((unint64_t)v31 < v32)
      {
        *(_DWORD *)unint64_t v31 = v30;
        uint64_t v33 = (uint64_t)(v31 + 4);
        goto LABEL_86;
      }
      uint64_t v42 = v14;
      unint64_t v43 = (char *)*v251;
      uint64_t v44 = v31 - (unsigned char *)*v251;
      uint64_t v45 = v44 >> 2;
      unint64_t v46 = (v44 >> 2) + 1;
      if (v46 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v32 - (void)v43;
      if (v47 >> 1 > v46) {
        unint64_t v46 = v47 >> 1;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        if (v48 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v49 = operator new(4 * v48);
        uint64_t v50 = (int *)&v49[4 * v45];
        *uint64_t v50 = v30;
        uint64_t v33 = (uint64_t)(v50 + 1);
        if (v31 == v43)
        {
LABEL_77:
          uint64_t v14 = v42;
          goto LABEL_83;
        }
      }
      else
      {
        unint64_t v49 = 0;
        uint64_t v50 = (int *)(4 * v45);
        *(_DWORD *)(4 * v45) = v30;
        uint64_t v33 = 4 * v45 + 4;
        if (v31 == v43) {
          goto LABEL_77;
        }
      }
      unint64_t v51 = v31 - 4 - v43;
      if (v51 >= 0x2C)
      {
        unint64_t v52 = v31 - &v49[v44];
        uint64_t v14 = v42;
        if (v52 >= 0x20)
        {
          uint64_t v53 = (v51 >> 2) + 1;
          uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v55 = &v31[-v54];
          uint64_t v50 = (int *)((char *)v50 - v54);
          uint64_t v56 = &v49[4 * v45 - 16];
          uint64_t v57 = v31 - 16;
          uint64_t v58 = v53 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v59 = *(_OWORD *)v57;
            *(v56 - 1) = *((_OWORD *)v57 - 1);
            *uint64_t v56 = v59;
            v56 -= 2;
            v57 -= 32;
            v58 -= 8;
          }
          while (v58);
          unint64_t v31 = v55;
          if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_83;
          }
        }
      }
      else
      {
        uint64_t v14 = v42;
      }
      do
      {
        int v60 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--uint64_t v50 = v60;
      }
      while (v31 != v43);
LABEL_83:
      *((void *)this + 65) = v50;
      *((void *)this + 66) = v33;
      *((void *)this + 67) = &v49[4 * v48];
      if (v43) {
        operator delete(v43);
      }
      unint64_t v23 = v256;
LABEL_86:
      *((void *)this + 66) = v33;
      unint64_t v61 = *v23;
      uint64_t v62 = (char *)v23[1] - (char *)*v23;
      if (v62 != 4)
      {
        if ((unint64_t)v62 >= 5)
        {
          uint64_t v76 = v62 >> 2;
          uint64_t v77 = *((void *)this + 68);
          uint64_t v78 = *v252;
          if ((unint64_t)(v62 >> 2) <= 2) {
            uint64_t v76 = 2;
          }
          long long v79 = v61 + 1;
          uint64_t v80 = v76 - 1;
          int v81 = v61 + 1;
          while (1)
          {
            int v82 = *v81++;
            uint64_t v83 = v82;
            unint64_t v84 = (unint64_t)v82 >> 6;
            uint64_t v85 = 1 << v82;
            uint64_t v86 = *(void *)(v77 + 8 * v84);
            if (((1 << v82) & v86) == 0)
            {
              ++*((void *)this + 39);
              *(void *)(v77 + 8 * v84) = v85 | v86;
            }
            *(_DWORD *)(v78 + 4 * v83) = v30;
            if ((*(v79 - 1) ^ 1) == v83) {
              break;
            }
            long long v79 = v81;
            if (!--v80) {
              goto LABEL_109;
            }
          }
          if (v253)
          {
            google::LogMessage::LogMessage((google::LogMessage *)v263, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1240);
            uint64_t v220 = (void *)google::LogMessage::stream((google::LogMessage *)v263);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"Trivially UNSAT in DetectEquivalences()", 39);
            google::LogMessage::~LogMessage((google::LogMessage *)v263);
          }
          goto LABEL_273;
        }
LABEL_109:
        unsigned int v250 = v14;
        uint64_t v87 = *v257 + 32 * v30;
        long long v89 = (int *)(v87 + 8);
        unint64_t v88 = *(void *)v87;
        unint64_t v90 = (int *)(v87 + 8);
        if (*(void *)v87) {
          unint64_t v90 = *(int **)v89;
        }
        uint64_t v91 = *(void *)v87 & 1;
        unint64_t v92 = v88 >> 1;
        if (v88 < 2)
        {
          int v93 = 0;
LABEL_113:
          int v249 = v24;
          if (v88)
          {
            uint64_t v94 = *(void *)(v87 + 8);
            unint64_t v95 = *(void *)(v87 + 16);
            unint64_t v96 = v93;
            v262 = (void **)(v87 + 8);
            if (v95 >= v93) {
              goto LABEL_173;
            }
          }
          else
          {
            uint64_t v94 = v87 + 8;
            unint64_t v95 = 6;
            unint64_t v96 = v93;
            v262 = (void **)(v87 + 8);
            if ((unint64_t)v93 <= 6) {
              goto LABEL_173;
            }
          }
          if (2 * v95 <= v96) {
            unint64_t v103 = v96;
          }
          else {
            unint64_t v103 = 2 * v95;
          }
          if (v103 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v104 = (char *)operator new(4 * v103);
          uint64_t v105 = v104;
          if (v88 >= 2)
          {
            uint64_t v106 = 0;
            if (v88 < 0x10 || (unint64_t)&v104[-v94] < 0x20)
            {
              uint64_t v107 = (int *)v94;
            }
            else
            {
              uint64_t v106 = v92 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v107 = (int *)(v94 + 4 * (v92 & 0x7FFFFFFFFFFFFFF8));
              unint64_t v108 = v104 + 16;
              uint64_t v109 = (long long *)(v94 + 16);
              uint64_t v110 = v92 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v111 = *v109;
                *(v108 - 1) = *(v109 - 1);
                _OWORD *v108 = v111;
                v108 += 2;
                v109 += 2;
                v110 -= 8;
              }
              while (v110);
              if (v92 == v106) {
                goto LABEL_170;
              }
            }
            unint64_t v133 = v92 - v106;
            int v134 = &v104[4 * v106];
            do
            {
              int v135 = *v107++;
              *(_DWORD *)int v134 = v135;
              v134 += 4;
              --v133;
            }
            while (v133);
          }
LABEL_170:
          if (v88) {
            operator delete(*v262);
          }
          *(void *)(v87 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v105;
          *(void *)(v87 + 16) = v103;
          unint64_t v61 = *v256;
          uint64_t v62 = (char *)v256[1] - (char *)*v256;
          uint64_t v91 = 1;
          long long v89 = (int *)v262;
LABEL_173:
          unint64_t v136 = v91 | (2 * v96);
          *(void *)uint64_t v87 = v136;
          if ((unint64_t)v62 < 5) {
            goto LABEL_227;
          }
          unint64_t v137 = 1;
          while (2)
          {
            uint64_t v259 = v61[v137];
            uint64_t v260 = *v257 + 32 * v259;
            unint64_t v261 = v137;
            unint64_t v138 = *(void *)v260;
            uint64_t v139 = (int *)(v260 + 8);
            if (*(void *)v260) {
              uint64_t v139 = *(int **)(v260 + 8);
            }
            if (v138 < 2)
            {
LABEL_180:
              unint64_t v140 = *(void *)v87;
              if (*(void *)v87)
              {
                uint64_t v141 = *(int **)(v87 + 8);
                unint64_t v142 = *(void *)(v87 + 16);
                unint64_t v143 = v140 >> 1;
                if (v140 >> 1 == v142) {
                  goto LABEL_211;
                }
LABEL_182:
                v141[v143] = v259;
                *(void *)uint64_t v87 = v140 + 2;
                uint64_t v145 = v260;
                unint64_t v144 = v261;
                uint64_t v146 = v256;
                if (*(unsigned char *)v260) {
                  goto LABEL_175;
                }
              }
              else
              {
                uint64_t v141 = v89;
                unint64_t v142 = 6;
                unint64_t v143 = v140 >> 1;
                if (v140 >> 1 != 6) {
                  goto LABEL_182;
                }
LABEL_211:
                if (((v142 >> 61) & 3) != 0) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                __n128 v166 = (char *)operator new(8 * v142);
                __n128 v167 = v166;
                *(_DWORD *)&v166[4 * v142] = v259;
                if (v140 >= 2)
                {
                  unint64_t v168 = 0;
                  if (v142 < 8 || (unint64_t)(v166 - (char *)v141) < 0x20)
                  {
                    __n128 v169 = v141;
                  }
                  else
                  {
                    unint64_t v168 = v142 & 0xFFFFFFFFFFFFFFF8;
                    __n128 v169 = &v141[v142 & 0xFFFFFFFFFFFFFFF8];
                    __n128 v170 = v166 + 16;
                    __n128 v171 = (long long *)(v141 + 4);
                    unint64_t v172 = v142 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      long long v173 = *v171;
                      *(v170 - 1) = *(v171 - 1);
                      *__n128 v170 = v173;
                      v170 += 2;
                      v171 += 2;
                      v172 -= 8;
                    }
                    while (v172);
                    if (v142 == v168) {
                      goto LABEL_222;
                    }
                  }
                  unint64_t v174 = v142 - v168;
                  __n128 v175 = &v166[4 * v168];
                  do
                  {
                    int v176 = *v169++;
                    *(_DWORD *)__n128 v175 = v176;
                    v175 += 4;
                    --v174;
                  }
                  while (v174);
                }
LABEL_222:
                if (v140)
                {
                  operator delete(*(void **)(v87 + 8));
                  unint64_t v140 = *(void *)v87;
                }
                *(void *)(v87 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v167;
                *(void *)(v87 + 16) = 2 * v142;
                long long v89 = (int *)v262;
                *(void *)uint64_t v87 = (v140 | 1) + 2;
                uint64_t v145 = v260;
                unint64_t v144 = v261;
                uint64_t v146 = v256;
                if (*(unsigned char *)v260) {
LABEL_175:
                }
                  operator delete(*(void **)(v260 + 8));
              }
              *(_DWORD *)(v145 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v30;
              *(void *)uint64_t v145 = 2;
              unint64_t v137 = v144 + 1;
              unint64_t v61 = *v146;
              if (v137 >= v146[1] - *v146)
              {
                unint64_t v136 = *(void *)v87;
LABEL_227:
                __n128 v177 = v89;
                if (v136) {
                  __n128 v177 = *(int **)v89;
                }
                unint64_t v178 = 126 - 2 * __clz(v136 >> 1);
                if (v136 >= 2) {
                  uint64_t v179 = v178;
                }
                else {
                  uint64_t v179 = 0;
                }
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v177, (char *)&v177[v136 >> 1], (uint64_t)v263, v179, 1);
                unint64_t v180 = *(void *)v87;
                __n128 v181 = v262;
                __n128 v182 = (char *)v262;
                if (*(void *)v87) {
                  __n128 v182 = (char *)*v262;
                }
                unint64_t v183 = v180 >> 1;
                uint64_t v21 = (uint64_t *)((char *)this + 544);
                unint64_t v23 = v256;
                if (v180 >= 2)
                {
                  uint64_t v185 = &v182[4 * v183];
                  __n128 v186 = (int *)(v182 + 4);
                  uint64_t v187 = 4 * v183 - 4;
                  do
                  {
                    if (!v187)
                    {
                      __n128 v182 = v185;
                      if ((v180 & 1) == 0) {
                        goto LABEL_236;
                      }
                      goto LABEL_247;
                    }
                    int v189 = *(v186 - 1);
                    int v188 = *v186++;
                    v187 -= 4;
                  }
                  while (v189 != v188);
                  int v190 = v186 - 2;
                  if (v187)
                  {
                    for (unint64_t i = 0; i != v187; i += 4)
                    {
                      int v192 = v188;
                      int v188 = v186[i / 4];
                      if (v192 != v188)
                      {
                        v190[1] = v188;
                        ++v190;
                      }
                    }
                  }
                  __n128 v182 = (char *)(v190 + 1);
                  if ((v180 & 1) == 0) {
                    goto LABEL_236;
                  }
                }
                else if ((v180 & 1) == 0)
                {
LABEL_236:
                  uint64_t v184 = (uint64_t)v262 + 4 * v183;
                  if (v182 == (char *)v184)
                  {
LABEL_255:
                    int v24 = v249 + ((unint64_t)((char *)v256[1] - (char *)*v256) >> 2) - 1;
                    uint64_t v14 = v250;
                    goto LABEL_48;
                  }
LABEL_248:
                  uint64_t v193 = v184 - (void)v182;
                  uint64_t v194 = (v182 - v181) >> 2;
                  uint64_t v195 = v194 + (v193 >> 2);
                  unint64_t v196 = v183 - v195;
                  if (v183 != v195)
                  {
                    int v197 = (int *)&v181[4 * v195];
                    if (v196 < 0xC || (unint64_t)(v182 - v181 - 4 * v195) < 0x20)
                    {
                      unint64_t v198 = 0;
                      goto LABEL_252;
                    }
                    unint64_t v198 = v196 & 0xFFFFFFFFFFFFFFF8;
                    v197 += v196 & 0xFFFFFFFFFFFFFFF8;
                    int v202 = &v181[4 * v194 + 16];
                    int v203 = (long long *)&v181[4 * v195 + 16];
                    unint64_t v204 = v196 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      long long v205 = *v203;
                      *(v202 - 1) = *(v203 - 1);
                      *int v202 = v205;
                      v202 += 2;
                      v203 += 2;
                      v204 -= 8;
                    }
                    while (v204);
                    if (v196 != v198)
                    {
LABEL_252:
                      unint64_t v199 = v183 - v198 - v195;
                      int v200 = &v181[4 * v198 + 4 * v194];
                      do
                      {
                        int v201 = *v197++;
                        *v200++ = v201;
                        --v199;
                      }
                      while (v199);
                    }
                  }
                  *(void *)uint64_t v87 = v180 - (v193 >> 1);
                  goto LABEL_255;
                }
LABEL_247:
                __n128 v181 = *v262;
                uint64_t v184 = (uint64_t)*v262 + 4 * v183;
                if (v182 == (char *)v184) {
                  goto LABEL_255;
                }
                goto LABEL_248;
              }
              continue;
            }
            break;
          }
          __n128 v147 = &v139[v138 >> 1];
          while (2)
          {
            int v148 = *v139;
            uint64_t v149 = *((void *)this + 71);
            if (*v139 < (int)((unint64_t)(*((void *)this + 72) - v149) >> 2))
            {
              int v150 = *(_DWORD *)(v149 + 4 * v148);
              if (v150 != -1) {
                int v148 = v150;
              }
            }
            if (v148 == v30) {
              goto LABEL_187;
            }
            unint64_t v151 = *(void *)v87;
            if (*(void *)v87)
            {
              unint64_t v152 = *(int **)(v87 + 8);
              unint64_t v153 = *(void *)(v87 + 16);
              unint64_t v154 = v151 >> 1;
              if (v151 >> 1 == v153) {
                goto LABEL_196;
              }
            }
            else
            {
              unint64_t v152 = v89;
              unint64_t v153 = 6;
              unint64_t v154 = v151 >> 1;
              if (v151 >> 1 == 6)
              {
LABEL_196:
                if (((v153 >> 61) & 3) != 0) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int v155 = (char *)operator new(8 * v153);
                unint64_t v156 = v155;
                *(_DWORD *)&v155[4 * v153] = v148;
                if (v151 >= 2)
                {
                  unint64_t v157 = 0;
                  if (v153 < 8 || (unint64_t)(v155 - (char *)v152) < 0x20)
                  {
                    uint64_t v158 = v152;
                  }
                  else
                  {
                    unint64_t v157 = v153 & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v158 = &v152[v153 & 0xFFFFFFFFFFFFFFF8];
                    int v159 = v155 + 16;
                    int v160 = (long long *)(v152 + 4);
                    unint64_t v161 = v153 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      long long v162 = *v160;
                      *(v159 - 1) = *(v160 - 1);
                      *int v159 = v162;
                      v159 += 2;
                      v160 += 2;
                      v161 -= 8;
                    }
                    while (v161);
                    if (v153 == v157) {
                      goto LABEL_207;
                    }
                  }
                  unint64_t v163 = v153 - v157;
                  __n128 v164 = &v155[4 * v157];
                  do
                  {
                    int v165 = *v158++;
                    *(_DWORD *)__n128 v164 = v165;
                    v164 += 4;
                    --v163;
                  }
                  while (v163);
                }
LABEL_207:
                if (v151)
                {
                  operator delete(*(void **)(v87 + 8));
                  unint64_t v151 = *(void *)v87;
                }
                *(void *)(v87 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v156;
                *(void *)(v87 + 16) = 2 * v153;
                v151 |= 1uLL;
                long long v89 = (int *)v262;
LABEL_186:
                *(void *)uint64_t v87 = v151 + 2;
LABEL_187:
                if (++v139 == v147) {
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          v152[v154] = v148;
          goto LABEL_186;
        }
        int v93 = 0;
        uint64_t v97 = *((void *)this + 71);
        unint64_t v98 = (unint64_t)(*((void *)this + 72) - v97) >> 2;
        uint64_t v99 = 4 * v92;
        while (2)
        {
          int v101 = *v90;
          if (*v90 >= (int)v98)
          {
            if (v101 != v30) {
              goto LABEL_125;
            }
          }
          else
          {
            if (*(_DWORD *)(v97 + 4 * v101) != -1) {
              int v101 = *(_DWORD *)(v97 + 4 * v101);
            }
            if (v101 != v30)
            {
LABEL_125:
              uint64_t v102 = v87 + 8;
              if (v88) {
                uint64_t v102 = *(void *)v89;
              }
              uint64_t v100 = v93++;
              *(_DWORD *)(v102 + 4 * v10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v101;
            }
          }
          ++v90;
          v99 -= 4;
          if (!v99) {
            goto LABEL_113;
          }
          continue;
        }
      }
      uint64_t v21 = (uint64_t *)((char *)this + 544);
      if (v24 < 1) {
        goto LABEL_48;
      }
      int v63 = (void *)(*v257 + 32 * v30);
      uint64_t v65 = (int **)(v63 + 1);
      unint64_t v64 = *v63;
      unint64_t v66 = (int *)(v63 + 1);
      if (*v63) {
        unint64_t v66 = *v65;
      }
      unint64_t v67 = v64 >> 1;
      if (v64 >= 2)
      {
        uint64_t v112 = *v252;
        uint64_t v113 = 4 * v67;
        do
        {
          int v114 = *(_DWORD *)(v112 + 4 * *v66);
          if (v114 != v30 && v114 != -1) {
            *unint64_t v66 = v114;
          }
          ++v66;
          v113 -= 4;
        }
        while (v113);
      }
      uint64_t v68 = (int *)(v63 + 1);
      if (v64) {
        uint64_t v68 = *v65;
      }
      uint64_t v69 = (char *)&v68[v67];
      unint64_t v70 = 126 - 2 * __clz(v67);
      if (v64 >= 2) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v68, v69, (uint64_t)v263, v71, 1);
      unint64_t v72 = *v63;
      int v73 = (int *)(v63 + 1);
      if (*v63)
      {
        int v73 = *v65;
        unint64_t v74 = v72 >> 1;
        if (v72 >= 2)
        {
LABEL_147:
          uint64_t v116 = &v73[v74];
          uint64_t v117 = v73 + 1;
          uint64_t v118 = 4 * v74 - 4;
          do
          {
            if (!v118)
            {
              int v73 = v116;
              if ((v72 & 1) == 0) {
                goto LABEL_99;
              }
              goto LABEL_156;
            }
            int v120 = *(v117 - 1);
            int v119 = *v117++;
            v118 -= 4;
          }
          while (v120 != v119);
          uint64_t v121 = v117 - 2;
          if (v118)
          {
            for (unint64_t j = 0; j != v118; j += 4)
            {
              int v123 = v119;
              int v119 = v117[j / 4];
              if (v123 != v119)
              {
                v121[1] = v119;
                ++v121;
              }
            }
          }
          int v73 = v121 + 1;
          if ((v72 & 1) == 0) {
            goto LABEL_99;
          }
          goto LABEL_156;
        }
      }
      else
      {
        unint64_t v74 = v72 >> 1;
        if (v72 >= 2) {
          goto LABEL_147;
        }
      }
      if ((v72 & 1) == 0)
      {
LABEL_99:
        uint64_t v75 = (int *)v65 + v74;
        if (v73 != v75) {
          goto LABEL_157;
        }
        goto LABEL_48;
      }
LABEL_156:
      uint64_t v65 = (int **)*v65;
      uint64_t v75 = (int *)v65 + v74;
      if (v73 != v75)
      {
LABEL_157:
        uint64_t v124 = (char *)v75 - (char *)v73;
        uint64_t v125 = ((char *)v73 - (char *)v65) >> 2;
        uint64_t v126 = v125 + (v124 >> 2);
        unint64_t v127 = v74 - v126;
        if (v74 != v126)
        {
          unint64_t v128 = (int *)v65 + v126;
          if (v127 < 0xC || (unint64_t)((char *)v73 - (char *)v65 - 4 * v126) < 0x20)
          {
            unint64_t v129 = 0;
            goto LABEL_161;
          }
          unint64_t v129 = v127 & 0xFFFFFFFFFFFFFFF8;
          v128 += v127 & 0xFFFFFFFFFFFFFFF8;
          int v206 = (_OWORD *)((char *)v65 + 4 * v125 + 16);
          int v207 = (long long *)((char *)v65 + 4 * v126 + 16);
          unint64_t v208 = v127 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v209 = *v207;
            *(v206 - 1) = *(v207 - 1);
            *int v206 = v209;
            v206 += 2;
            v207 += 2;
            v208 -= 8;
          }
          while (v208);
          if (v127 != v129)
          {
LABEL_161:
            unint64_t v130 = v74 - v129 - v126;
            int64_t v131 = (_DWORD *)v65 + v129 + v125;
            do
            {
              int v132 = *v128++;
              *v131++ = v132;
              --v130;
            }
            while (v130);
          }
        }
        *int v63 = v72 - (v124 >> 1);
      }
LABEL_48:
      v23 += 3;
      if (v23 == v254)
      {
        *((unsigned char *)this + 512) = 1;
        if (v24)
        {
          uint64_t v229 = *((void *)this + 28);
          uint64_t v228 = *((void *)this + 29);
          if (v228 != v229)
          {
            uint64_t v230 = *((void *)this + 29);
            do
            {
              char v231 = *(unsigned char *)(v230 - 32);
              v230 -= 32;
              if (v231) {
                operator delete(*(void **)(v228 - 24));
              }
              uint64_t v228 = v230;
            }
            while (v230 != v229);
          }
          *((void *)this + 29) = v229;
          operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes(this, 0);
          *((void *)this + 27) = 0;
          if (v248 < 1)
          {
            uint64_t v235 = 0;
          }
          else
          {
            uint64_t v232 = *v257;
            unint64_t v233 = (v255 >> 5);
            if (v233 >= 5)
            {
              if (((v255 >> 5) & 3) != 0) {
                uint64_t v236 = (v255 >> 5) & 3;
              }
              else {
                uint64_t v236 = 4;
              }
              unint64_t v234 = v233 - v236;
              v237 = (const double *)(v232 + 64);
              unint64_t v238 = v236 - v233;
              int64x2_t v239 = 0uLL;
              int64x2_t v240 = 0uLL;
              do
              {
                uint64_t v241 = v237 - 8;
                unsigned long long v242 = (unsigned __int128)vld4q_f64(v241);
                unsigned long long v243 = (unsigned __int128)vld4q_f64(v237);
                int64x2_t v239 = (int64x2_t)vsraq_n_u64((uint64x2_t)v239, (uint64x2_t)v242, 1uLL);
                int64x2_t v240 = (int64x2_t)vsraq_n_u64((uint64x2_t)v240, (uint64x2_t)v243, 1uLL);
                v237 += 16;
                v238 += 4;
              }
              while (v238);
              uint64_t v235 = vaddvq_s64(vaddq_s64(v240, v239));
            }
            else
            {
              unint64_t v234 = 0;
              uint64_t v235 = 0;
            }
            unint64_t v244 = (unint64_t *)(v232 + 32 * v234);
            unint64_t v245 = v234 - v233;
            do
            {
              unint64_t v246 = *v244;
              v244 += 4;
              v235 += v246 >> 1;
            }
            while (!__CFADD__(v245++, 1));
            *((void *)this + 27) = v235;
          }
          double v22 = v22 + (double)v235 * 0.00000002;
        }
        goto LABEL_267;
      }
    }
  }
  do
  {
LABEL_11:
    uint64_t v7 = *((int *)this + 9);
    if ((int)v7 >= *(_DWORD *)(v6 + 12)) {
      goto LABEL_15;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  while ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue((uint64_t)this, *(_DWORD *)(*(void *)(v6 + 72) + 4 * v7), v6) & 1) != 0);
  return 0;
}

void sub_23CBC69F8(_Unwind_Exception *a1)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_23CBC6A0C(_Unwind_Exception *a1)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_23CBC6A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a27);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v27 - 128));
  _Unwind_Resume(a1);
}

void sub_23CBC6B58(_Unwind_Exception *a1)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_23CBC6B6C(_Unwind_Exception *a1)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents(std::vector<int> *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  a1->__end_ = a1->__begin_;
  p_std::vector<int>::pointer begin = (void **)&a1[1].__begin_;
  a1[1].__end_ = a1[1].__begin_;
  uint64_t v7 = a1 + 2;
  __u[0] = 0;
  std::vector<int>::assign(a1 + 2, a2, __u);
  std::vector<int>::pointer begin = v6[3].__begin_;
  int v115 = (void **)&v6[3].__begin_;
  v6[3].__end_ = begin;
  if (a2 < 1) {
    return;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = a2;
  uint64_t v112 = a4;
  uint64_t v116 = v7;
  uint64_t v109 = a2;
  int v114 = v6;
  while (2)
  {
    if (v7->__begin_[v9]) {
      goto LABEL_4;
    }
    std::vector<int>::size_type value = v6[3].__end_cap_.__value_;
    uint64_t v110 = v9;
    unint64_t v117 = v10;
    if (begin >= value)
    {
      uint64_t v14 = 1;
      uint64_t v15 = (char *)value - (char *)begin;
      if ((unint64_t)(v15 >> 1) > 1) {
        uint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 62) {
LABEL_117:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v17 = (int *)operator new(4 * v16);
        unint64_t v18 = v17;
        *uint64_t v17 = v110;
        uint64_t v13 = (uint64_t)(v17 + 1);
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        MEMORY[0] = v9;
        uint64_t v13 = 4;
      }
      v6[3].__begin_ = v18;
      v6[3].__end_ = (std::vector<int>::pointer)v13;
      v6[3].__end_cap_.__value_ = &v17[v16];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<int>::pointer begin = v9;
      uint64_t v13 = (uint64_t)(begin + 1);
    }
    v6[3].__end_ = (std::vector<int>::pointer)v13;
    while (2)
    {
      int v21 = *(_DWORD *)(v13 - 4);
      uint64_t v19 = (int *)(v13 - 4);
      int v20 = v21;
      std::vector<int>::pointer v22 = v7->__begin_;
      int v23 = v7->__begin_[v21];
      if (v23)
      {
        v6[3].__end_ = v19;
        if (v117 != v23) {
          goto LABEL_21;
        }
        unint64_t v24 = (int)v117 - 1;
        std::vector<int>::pointer v26 = v6->__begin_;
        std::vector<int>::pointer end = v6->__end_;
        uint64_t v27 = &v6->__begin_[v24];
        std::vector<int>::pointer v118 = end;
        *(void *)__u = v27;
        unint64_t v28 = *(void **)(v112 + 8);
        if ((unint64_t)v28 >= *(void *)(v112 + 16))
        {
          unint64_t v32 = std::vector<std::vector<int>>::__emplace_back_slow_path<int *,int *>((char **)v112, (const void **)__u, (const void **)&v118);
        }
        else
        {
          *unint64_t v28 = 0;
          v28[1] = 0;
          uint64_t v28[2] = 0;
          if (end - v26 != v24)
          {
            int64_t v29 = (char *)end - (char *)v27;
            if ((char *)end - (char *)v27 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            int v30 = (char *)operator new((char *)end - (char *)v27);
            *unint64_t v28 = v30;
            v28[1] = v30;
            unint64_t v31 = &v30[4 * (v29 >> 2)];
            uint64_t v28[2] = v31;
            memcpy(v30, v27, v29);
            v28[1] = v31;
            uint64_t v7 = v116;
          }
          unint64_t v32 = (char *)(v28 + 3);
          *(void *)(v112 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v28 + 3;
        }
        *(void *)(v112 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v32;
        std::vector<int>::pointer v44 = v6->__begin_;
        unint64_t v45 = v6->__end_ - v6->__begin_;
        if (v24 >= v45)
        {
          if (v24 <= v45) {
            goto LABEL_49;
          }
        }
        else
        {
          std::vector<int>::pointer v46 = v7->__begin_;
          unint64_t v47 = (int)v117 - 1;
          do
            v46[v44[v47++]] = 0x7FFFFFFF;
          while (v45 > v47);
          if (v24 <= v45)
          {
            v6->__end_ = &v44[v24];
            goto LABEL_49;
          }
        }
        std::vector<int>::__append(v6, v24 - v45);
LABEL_49:
        std::vector<int>::pointer v49 = v6[1].__begin_;
        std::vector<int>::pointer v48 = v6[1].__end_;
        v6[1].__end_ = v48 - 1;
        if (v49 == v48 - 1) {
          unint64_t v117 = 0;
        }
        else {
          unint64_t v117 = *(v48 - 2);
        }
        goto LABEL_21;
      }
      BOOL v34 = (char *)v6->__end_;
      uint64_t v33 = v6->__end_cap_.__value_;
      if (v34 < (char *)v33)
      {
        *(_DWORD *)BOOL v34 = v20;
        uint64_t v35 = (uint64_t)(v34 + 4);
        goto LABEL_61;
      }
      std::vector<int>::pointer v36 = v6->__begin_;
      uint64_t v37 = v34 - (char *)v6->__begin_;
      uint64_t v38 = v37 >> 2;
      unint64_t v39 = (v37 >> 2) + 1;
      if (v39 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = (char *)v33 - (char *)v36;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        if (v41 >> 62) {
          goto LABEL_117;
        }
        uint64_t v42 = operator new(4 * v41);
        unint64_t v43 = (int *)&v42[4 * v38];
        *unint64_t v43 = v20;
        uint64_t v35 = (uint64_t)(v43 + 1);
        if (v34 == (char *)v36) {
          goto LABEL_58;
        }
        goto LABEL_52;
      }
      uint64_t v42 = 0;
      unint64_t v43 = (int *)(4 * v38);
      *(_DWORD *)(4 * v3google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v20;
      uint64_t v35 = 4 * v38 + 4;
      if (v34 != (char *)v36)
      {
LABEL_52:
        unint64_t v50 = v34 - 4 - (char *)v36;
        if (v50 < 0x2C) {
          goto LABEL_123;
        }
        if ((unint64_t)(v34 - &v42[v37]) < 0x20) {
          goto LABEL_123;
        }
        uint64_t v51 = (v50 >> 2) + 1;
        uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v53 = &v34[-v52];
        unint64_t v43 = (int *)((char *)v43 - v52);
        uint64_t v54 = &v42[4 * v38 - 16];
        uint64_t v55 = v34 - 16;
        uint64_t v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *uint64_t v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        BOOL v34 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_123:
          do
          {
            int v58 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--unint64_t v43 = v58;
          }
          while (v34 != (char *)v36);
        }
      }
LABEL_58:
      v6->__begin_ = v43;
      v6->__end_ = (std::vector<int>::pointer)v35;
      v6->__end_cap_.__value_ = (int *)&v42[4 * v41];
      if (v36)
      {
        operator delete(v36);
        uint64_t v7 = v116;
        std::vector<int>::pointer v22 = v116->__begin_;
      }
      else
      {
        uint64_t v7 = v116;
      }
LABEL_61:
      v6->__end_ = (std::vector<int>::pointer)v35;
      unint64_t v59 = (v35 - (unint64_t)v6->__begin_) >> 2;
      v22[v20] = v59;
      unint64_t v61 = (char *)v6[1].__end_;
      int v60 = v6[1].__end_cap_.__value_;
      unint64_t v117 = v59;
      if (v61 >= (char *)v60)
      {
        int v63 = (char *)*p_begin;
        uint64_t v64 = v61 - (unsigned char *)*p_begin;
        uint64_t v65 = v64 >> 2;
        unint64_t v66 = (v64 >> 2) + 1;
        if (v66 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = (char *)v60 - v63;
        if (v67 >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 62) {
            goto LABEL_117;
          }
          uint64_t v69 = operator new(4 * v68);
          unint64_t v70 = (int *)&v69[4 * v65];
          *unint64_t v70 = v117;
          uint64_t v62 = (uint64_t)(v70 + 1);
          if (v61 == v63) {
            goto LABEL_80;
          }
        }
        else
        {
          uint64_t v69 = 0;
          unint64_t v70 = (int *)(4 * v65);
          *(_DWORD *)(4 * v65) = v117;
          uint64_t v62 = 4 * v65 + 4;
          if (v61 == v63)
          {
LABEL_80:
            v6[1].__begin_ = v70;
            v6[1].__end_ = (std::vector<int>::pointer)v62;
            v6[1].__end_cap_.__value_ = (int *)&v69[4 * v68];
            if (v63) {
              operator delete(v63);
            }
            goto LABEL_82;
          }
        }
        unint64_t v71 = v61 - 4 - v63;
        if (v71 < 0x2C) {
          goto LABEL_124;
        }
        if ((unint64_t)(v61 - &v69[v64]) < 0x20) {
          goto LABEL_124;
        }
        uint64_t v72 = (v71 >> 2) + 1;
        uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v74 = &v61[-v73];
        unint64_t v70 = (int *)((char *)v70 - v73);
        uint64_t v75 = &v69[4 * v65 - 16];
        uint64_t v76 = v61 - 16;
        uint64_t v77 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *uint64_t v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 8;
        }
        while (v77);
        unint64_t v61 = v74;
        if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_124:
          do
          {
            int v79 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *--unint64_t v70 = v79;
          }
          while (v61 != v63);
        }
        goto LABEL_80;
      }
      *(_DWORD *)unint64_t v61 = v59;
      uint64_t v62 = (uint64_t)(v61 + 4);
LABEL_82:
      v6[1].__end_ = (std::vector<int>::pointer)v62;
      uint64_t v80 = operations_research::sat::SccGraph::operator[](a3, v20);
      int v82 = (int *)*v80;
      int v81 = v80[1];
      if (*v80 == v81) {
        goto LABEL_21;
      }
      int v83 = 0x7FFFFFFF;
      do
      {
        uint64_t v84 = *v82;
        int v85 = v7->__begin_[v84];
        if (!v85)
        {
          std::vector<int>::pointer v87 = v6[3].__end_;
          uint64_t v86 = v6[3].__end_cap_.__value_;
          if (v87 < v86)
          {
            *std::vector<int>::pointer v87 = v84;
            v6[3].__end_ = v87 + 1;
            goto LABEL_86;
          }
          std::vector<int>::pointer v88 = (std::vector<int>::pointer)*v115;
          uint64_t v89 = (char *)v87 - (unsigned char *)*v115;
          uint64_t v90 = v89 >> 2;
          unint64_t v91 = (v89 >> 2) + 1;
          if (v91 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v92 = (char *)v86 - (char *)v88;
          if (v92 >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            if (v93 >> 62) {
              goto LABEL_117;
            }
            uint64_t v94 = operator new(4 * v93);
            unint64_t v95 = (int *)&v94[4 * v90];
            *unint64_t v95 = v84;
            uint64_t v96 = (uint64_t)(v95 + 1);
            if (v87 != v88) {
              goto LABEL_99;
            }
          }
          else
          {
            uint64_t v94 = 0;
            unint64_t v95 = (int *)(4 * v90);
            *(_DWORD *)(4 * v9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v84;
            uint64_t v96 = 4 * v90 + 4;
            if (v87 != v88)
            {
LABEL_99:
              unint64_t v97 = (char *)(v87 - 1) - (char *)v88;
              if (v97 >= 0x2C)
              {
                unint64_t v98 = (char *)v87 - &v94[v89];
                uint64_t v7 = v116;
                if (v98 >= 0x20)
                {
                  uint64_t v99 = (v97 >> 2) + 1;
                  uint64_t v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                  int v101 = &v87[v100 / 0xFFFFFFFFFFFFFFFCLL];
                  unint64_t v95 = (int *)((char *)v95 - v100);
                  uint64_t v102 = &v94[4 * v90 - 16];
                  unint64_t v103 = (long long *)(v87 - 4);
                  uint64_t v104 = v99 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v105 = *v103;
                    *(v102 - 1) = *(v103 - 1);
                    *uint64_t v102 = v105;
                    v102 -= 2;
                    v103 -= 2;
                    v104 -= 8;
                  }
                  while (v104);
                  std::vector<int>::pointer v87 = v101;
                  if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_108;
                  }
                }
              }
              else
              {
                uint64_t v7 = v116;
              }
              do
              {
                int v106 = *--v87;
                *--unint64_t v95 = v106;
              }
              while (v87 != v88);
LABEL_108:
              uint64_t v6 = v114;
              v114[3].__begin_ = v95;
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              v114[3].__end_cap_.__value_ = (int *)&v94[4 * v93];
              if (v88) {
                operator delete(v88);
              }
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              goto LABEL_86;
            }
          }
          uint64_t v7 = v116;
          goto LABEL_108;
        }
        if (v85 < v83) {
          int v83 = v7->__begin_[v84];
        }
LABEL_86:
        ++v82;
      }
      while (v82 != v81);
      if (v83 < (int)v117)
      {
        uint64_t v107 = v6[1].__end_;
        do
        {
          unint64_t v108 = *(v107 - 2);
          --v107;
        }
        while ((int)v108 > v83);
        unint64_t v117 = v108;
        v6[1].__end_ = v107;
      }
LABEL_21:
      std::vector<int>::pointer begin = v6[3].__begin_;
      uint64_t v13 = (uint64_t)v6[3].__end_;
      if (begin != (int *)v13) {
        continue;
      }
      break;
    }
    uint64_t v11 = v109;
    uint64_t v9 = v110;
    unint64_t v10 = v117;
LABEL_4:
    if (++v9 != v11) {
      continue;
    }
    break;
  }
}

void sub_23CBC7358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v15;
    operator delete(v15);
  }
  *(void *)(a13 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SccGraph::~SccGraph(operations_research::sat::SccGraph *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 11);
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

uint64_t StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::~StronglyConnectedComponentsFinder(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(operations_research::sat::BinaryImplicationGraph *this, int a2)
{
  v111[0] = (*(_DWORD *)(*((void *)this + 16) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v112) = 0;
  if (v111[0]) {
    google::MakeCheckOpString<int,int>((int)v111, (int)&v112, "trail_->CurrentDecisionLevel() == 0");
  }
  char v4 = operations_research::sat::BinaryImplicationGraph::DetectEquivalences(this, 0);
  uint64_t result = 0;
  if ((v4 & 1) == 0) {
    return result;
  }
  uint64_t v6 = *((void *)this + 16);
  if (!*((void *)this + 27) && *((void *)this + 28) == *((void *)this + 29))
  {
    *((_DWORD *)this + 9) = *(_DWORD *)(v6 + 12);
  }
  else
  {
    while (1)
    {
      uint64_t v7 = *((int *)this + 9);
      if ((int)v7 >= *(_DWORD *)(v6 + 12)) {
        break;
      }
      *((_DWORD *)this + 9) = v7 + 1;
      if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue((uint64_t)this, *(_DWORD *)(*(void *)(v6 + 72) + 4 * v7), v6) & 1) == 0)return 0; {
    }
      }
  }
  BOOL inited = operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((BOOL)this);
  if (*operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(BOOL)::vlocal__ < 1)
  {
    int v9 = 0;
  }
  else if (operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(BOOL)::vlocal__ == &google::kLogSiteUninitialized)
  {
    BOOL inited = google::InitVLOG3__((google *)&operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/clause.cc", (const char *)1);
    int v9 = inited;
  }
  else
  {
    int v9 = 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
  *((void *)this + 63) = 0;
  unint64_t v10 = *((void *)this + 25) - *((void *)this + 24);
  uint64_t v11 = (int *)*((void *)this + 65);
  unint64_t v12 = (int *)*((void *)this + 66);
  int v13 = v10 >> 5;
  if (v11 == v12)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    goto LABEL_110;
  }
  uint64_t v100 = 0;
  int v101 = v10 >> 5;
  int v98 = v9;
  int v99 = a2;
  uint64_t v102 = (int *)*((void *)this + 66);
  uint64_t v103 = 0;
  unint64_t v14 = 0;
  int v106 = (void *)((char *)this + 320);
  int v15 = -1;
  while (1)
  {
    int v19 = *v11;
    unint64_t v20 = (unint64_t)*v11 >> 6;
    uint64_t v21 = 1 << *v11;
    if ((v21 & *(void *)(*((void *)this + 68) + 8 * v20)) == 0)
    {
      uint64_t v22 = 3 << (v19 & 0x3E);
      if ((*(void *)(*(void *)(*((void *)this + 16) + 24) + 8 * v20) & v22) == 0)
      {
        int v23 = (void *)(*((void *)this + 24) + 32 * v19);
        unint64_t v24 = *v23;
        if (*v23 >= 2uLL) {
          break;
        }
      }
    }
LABEL_21:
    if (++v11 == v12)
    {
      int v17 = 1;
      goto LABEL_109;
    }
  }
  unint64_t v25 = (int **)(v23 + 1);
  std::vector<int>::pointer v26 = (int *)(v23 + 1);
  if (v24) {
    std::vector<int>::pointer v26 = *v25;
  }
  unint64_t v27 = (2 * v24) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v109 = (void **)(v23 + 1);
  while (*v26 != v15)
  {
    ++v26;
    v27 -= 4;
    if (!v27)
    {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)v106, v101);
      unint64_t v25 = (int **)(v23 + 1);
      unint64_t v24 = *v23;
      uint64_t v107 = v23;
      unint64_t v104 = 0;
      unint64_t v28 = (int *)(v23 + 1);
      if ((*v23 & 1) == 0) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }
  *(void *)(*((void *)this + 41) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v15);
  uint64_t v107 = v23;
  unint64_t v104 = v14;
  unint64_t v28 = (int *)(v23 + 1);
  if ((v24 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_33:
  unint64_t v28 = *v25;
LABEL_34:
  if (v24 < 2) {
    goto LABEL_35;
  }
  uint64_t v34 = 4 * (v24 >> 1);
  while (1)
  {
    unint64_t v35 = *v28;
    unint64_t v36 = v35 >> 6;
    uint64_t v37 = 1 << v35;
    if (((1 << v35) & *(void *)(*((void *)this + 68) + 8 * (v35 >> 6))) != 0) {
      goto LABEL_44;
    }
    if (v35 == v19 || (*(void *)(*((void *)this + 41) + 8 * v36) & v37) != 0) {
      goto LABEL_44;
    }
    if ((v35 ^ 1) == v19) {
      break;
    }
    operations_research::sat::BinaryImplicationGraph::MarkDescendants(this, v35);
    *(void *)(*((void *)this + 41) + 8 * v36) &= ~v37;
LABEL_44:
    ++v28;
    v34 -= 4;
    if (!v34) {
      goto LABEL_35;
    }
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v106, v35);
LABEL_35:
  if ((*(void *)(*((void *)this + 41) + 8 * v20) & v21) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v111, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1399);
    unint64_t v93 = (void *)google::LogMessage::stream((google::LogMessage *)v111);
    uint64_t v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Check failed: !is_marked_[root] ", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"DetectEquivalences() should have removed cycles!", 48);
    goto LABEL_121;
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v106, v19);
  uint64_t v29 = *((void *)this + 47);
  unint64_t v30 = (*((void *)this + 48) - v29) >> 2;
  unint64_t v14 = v104;
  unint64_t v31 = (int)v104;
  if (v30 <= (int)v104)
  {
    unint64_t v12 = v102;
    goto LABEL_57;
  }
  unint64_t v12 = v102;
  unint64_t v32 = (int **)v109;
  do
  {
    if ((*(void *)(*((void *)this + 41) + (((unint64_t)*(int *)(v29 + 4 * v31) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_DWORD *)(v29 + 4 * v31) & 0x3F ^ 1u)))
    {
      if ((*(void *)(*(void *)(*((void *)this + 16) + 24) + 8 * v20) & v22) == 0)
      {
        if (!operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)this, v19 ^ 1)) {
          return 0;
        }
        ++v100;
        unint64_t v14 = v31;
LABEL_57:
        uint64_t v33 = v107;
        unint64_t v32 = (int **)v109;
        if ((*(void *)(*(void *)(*((void *)this + 16) + 24) + 8 * v20) & v22) == 0) {
          goto LABEL_58;
        }
        goto LABEL_20;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v111, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1411);
      unint64_t v95 = (void *)google::LogMessage::stream((google::LogMessage *)v111);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(Literal(root)) ", 69);
LABEL_121:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v111);
    }
    ++v31;
  }
  while (v30 > v31);
  unint64_t v14 = v31;
  uint64_t v33 = v107;
  if ((*(void *)(*(void *)(*((void *)this + 16) + 24) + 8 * v20) & v22) != 0) {
    goto LABEL_20;
  }
LABEL_58:
  unint64_t v39 = *v33;
  uint64_t v40 = (int *)v32;
  if (*v33) {
    uint64_t v40 = *v32;
  }
  uint64_t v41 = *v33 & 1;
  if (v39 >= 2)
  {
    int v42 = 0;
    uint64_t v48 = *((void *)this + 41);
    uint64_t v49 = 4 * (v39 >> 1);
    while (1)
    {
      unint64_t v50 = (unint64_t)*v40 >> 6;
      if (((1 << *v40) & *(void *)(v48 + 8 * v50)) != 0)
      {
        if ((*(void *)(*((void *)this + 68) + 8 * v50) & (1 << *v40)) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v111, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1435);
          uint64_t v92 = (void *)google::LogMessage::stream((google::LogMessage *)v111);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Check failed: !is_redundant_[l.Index()] ", 40);
          goto LABEL_121;
        }
      }
      else
      {
        uint64_t v51 = v32;
        if (v39) {
          uint64_t v51 = (int **)*v32;
        }
        *((_DWORD *)v51 + v42++) = *v40;
      }
      ++v40;
      v49 -= 4;
      if (!v49) {
        goto LABEL_62;
      }
    }
  }
  int v42 = 0;
LABEL_62:
  unint64_t v105 = v39 >> 1;
  if ((v39 & 1) == 0)
  {
    unint64_t v43 = v32;
    unint64_t v44 = 6;
    unint64_t v45 = v42;
    if ((unint64_t)v42 <= 6) {
      goto LABEL_64;
    }
LABEL_75:
    unint64_t v52 = 2 * v44;
    unint64_t v97 = v45;
    if (v52 <= v45) {
      unint64_t v53 = v45;
    }
    else {
      unint64_t v53 = v52;
    }
    if (!(v53 >> 62))
    {
      unint64_t v96 = v53;
      uint64_t v54 = (char *)operator new(4 * v53);
      if (v39 < 2) {
        goto LABEL_89;
      }
      uint64_t v55 = 0;
      if (v39 < 0x10 || (unint64_t)(v54 - (char *)v43) < 0x20)
      {
        uint64_t v56 = (int *)v43;
      }
      else
      {
        uint64_t v55 = v105 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v56 = (int *)v43 + (v105 & 0x7FFFFFFFFFFFFFF8);
        long long v57 = v54 + 16;
        int v58 = (long long *)(v43 + 2);
        uint64_t v59 = v105 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v60 = *v58;
          *(v57 - 1) = *(v58 - 1);
          *long long v57 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 8;
        }
        while (v59);
        if (v105 == v55)
        {
LABEL_89:
          if (v39)
          {
            uint64_t v64 = v54;
            operator delete(*v109);
            uint64_t v54 = v64;
          }
          unint64_t v47 = v107;
          unint64_t v45 = v97;
          v107[1] = (unint64_t)v54;
          v107[2] = v96;
          unint64_t v46 = (2 * v97) | 1;
          *uint64_t v107 = v46;
          unint64_t v32 = (int **)v109;
          goto LABEL_92;
        }
      }
      unint64_t v61 = v105 - v55;
      uint64_t v62 = &v54[4 * v55];
      do
      {
        int v63 = *v56++;
        *(_DWORD *)uint64_t v62 = v63;
        v62 += 4;
        --v61;
      }
      while (v61);
      goto LABEL_89;
    }
LABEL_125:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v43 = (int **)v33[1];
  unint64_t v44 = v33[2];
  unint64_t v45 = v42;
  if (v44 < v42) {
    goto LABEL_75;
  }
LABEL_64:
  unint64_t v46 = v41 | (2 * v45);
  unint64_t v47 = v107;
  *uint64_t v107 = v46;
  if (v39)
  {
LABEL_92:
    unint64_t v65 = v45 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v45 & 0x7FFFFFFFFFFFFFFFLL) == v47[2]) {
      goto LABEL_19;
    }
    unint64_t v66 = (char *)v47[1];
    if (v46 < 0xE)
    {
      if (v46 <= 1)
      {
        operator delete((void *)v47[1]);
        goto LABEL_18;
      }
      uint64_t v69 = 0;
      unint64_t v110 = 0;
      unint64_t v70 = 0;
      if (v65 >= 8) {
        goto LABEL_96;
      }
    }
    else
    {
      if ((v46 & 0x8000000000000000) != 0) {
        goto LABEL_125;
      }
      unint64_t v67 = v14;
      char v68 = v45;
      unint64_t v108 = v45 & 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v32 = (int **)operator new(4 * v45);
      unint64_t v65 = v108;
      uint64_t v69 = v32;
      unint64_t v110 = v108;
      LOBYTE(v45) = v68;
      unint64_t v14 = v67;
      unint64_t v70 = 0;
      if (v108 >= 8)
      {
LABEL_96:
        unint64_t v71 = v66;
        uint64_t v72 = v69;
        if ((unint64_t)((char *)v32 - v66) >= 0x20)
        {
          unint64_t v73 = v45 & 7;
          unint64_t v70 = v65 - v73;
          unint64_t v71 = &v66[4 * (v65 - v73)];
          unint64_t v74 = v32 + 2;
          uint64_t v75 = (long long *)(v66 + 16);
          unint64_t v76 = v65 - v73;
          do
          {
            long long v77 = *v75;
            *(v74 - 1) = *(v75 - 1);
            *unint64_t v74 = v77;
            v74 += 2;
            v75 += 2;
            v76 -= 8;
          }
          while (v76);
          if (!v73)
          {
LABEL_106:
            operator delete(v66);
            if (v72)
            {
              v47[1] = (unint64_t)v72;
              uint64_t v47[2] = v110;
              goto LABEL_19;
            }
LABEL_18:
            *v47 &= ~1uLL;
            goto LABEL_19;
          }
        }
LABEL_104:
        unint64_t v78 = v65 - v70;
        int v79 = (_DWORD *)v32 + v70;
        do
        {
          int v80 = *(_DWORD *)v71;
          v71 += 4;
          *v79++ = v80;
          --v78;
        }
        while (v78);
        goto LABEL_106;
      }
    }
    unint64_t v71 = v66;
    uint64_t v72 = v69;
    goto LABEL_104;
  }
LABEL_19:
  uint64_t v18 = (int)v105 - v42;
  v103 += v18;
  *((void *)this + 27) -= v18;
  if (*((uint64_t *)this + 63) <= 100000000)
  {
LABEL_20:
    int v15 = v19;
    goto LABEL_21;
  }
  int v17 = 0;
LABEL_109:
  int v9 = v98;
  a2 = v99;
  uint64_t v16 = v103;
  int v13 = v101;
LABEL_110:
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 320, v13);
  *(double *)(*((void *)this + 15) + 112) = *(double *)(*((void *)this + 15) + 112)
                                              + (double)*((uint64_t *)this + 63) * 0.00000001;
  *((void *)this + 38) += v16;
  if (v9 | a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v111, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1456);
    int v81 = (void *)google::LogMessage::stream((google::LogMessage *)v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Transitive reduction removed ", 29);
    int v82 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" literals. ", 11);
    int v83 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" fixed. ", 8);
    uint64_t v84 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" implications left. ", 20);
    int v85 = (void *)std::ostream::operator<<();
    uint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" literals.", 10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" dtime: ", 8);
    std::vector<int>::pointer v87 = (void *)std::ostream::operator<<();
    std::vector<int>::pointer v88 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v88);
    uint64_t v89 = (void *)std::ostream::operator<<();
    if (v17) {
      uint64_t v90 = "";
    }
    else {
      uint64_t v90 = " Aborted.";
    }
    if (v17) {
      uint64_t v91 = 0;
    }
    else {
      uint64_t v91 = 9;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
    google::LogMessage::~LogMessage((google::LogMessage *)v111);
  }
  return 1;
}

void sub_23CBC7DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBC7DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CBC7DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBC7DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBC7DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(operations_research::sat::BinaryImplicationGraph *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unsigned int v115 = operations_research::sat::BinaryImplicationGraph::DetectEquivalences(a1, 0);
  if (v115)
  {
    *((void *)v5 + 63) = 0;
    unint64_t v130 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    long long v131 = 0u;
    long long v132 = 0u;
    uint64_t v133 = 0;
    std::vector<std::vector<int>>::vector(&__p, (uint64_t)(*((void *)v5 + 25) - *((void *)v5 + 24)) >> 5);
    uint64_t v6 = a2[1];
    unint64_t v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v6 - *a2));
    if (v6 == *a2) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,false>(*a2, v6, v8, 1);
    unint64_t v10 = *a2;
    int v9 = a2[1];
    if (v10 != v9)
    {
      int v11 = 0;
      int v122 = 0;
      int v12 = 0;
      uint64_t v116 = v5;
      uint64_t v117 = a3;
      std::vector<int>::pointer v118 = v9;
      while (1)
      {
        unint64_t v14 = (char *)*v10;
        int v13 = (char *)v10[1];
        uint64_t v124 = (uint64_t)&v13[-*v10];
        if (v124)
        {
          uint64_t v15 = *((void *)v5 + 71);
          uint64_t v16 = (char *)*v10;
          do
          {
            int v17 = *(_DWORD *)(v15 + 4 * *(int *)v16);
            if (v17 != -1) {
              *(_DWORD *)uint64_t v16 = v17;
            }
            v16 += 4;
          }
          while (v16 != v13);
        }
        if ((v124 & 0x3FFFFFFFCLL) == 8)
        {
          int v18 = *((_DWORD *)v14 + 1);
          if (*(_DWORD *)v14 != v18)
          {
            int v19 = (uint64_t *)((char *)__p + 24 * *(int *)v14);
            uint64_t v20 = *v19;
            uint64_t v21 = v19[1];
            uint64_t v22 = v21 - v20;
            if (v21 != v20)
            {
              unint64_t v23 = 0;
              unsigned int v24 = 0;
              unsigned int v25 = 0;
              std::vector<int>::pointer v26 = (uint64_t *)((char *)__p + 24 * v18);
              unint64_t v27 = v22 >> 2;
              uint64_t v28 = *v26;
              unint64_t v29 = (v26[1] - *v26) >> 2;
              while (1)
              {
                if (v29 <= v24) {
                  goto LABEL_26;
                }
                int v30 = *(_DWORD *)(v20 + 4 * v23);
                int v31 = *(_DWORD *)(v28 + 4 * v24);
                BOOL v32 = v30 < v31;
                if (v30 == v31) {
                  break;
                }
                if (v30 >= v31) {
                  unint64_t v23 = v25;
                }
                else {
                  unint64_t v23 = v25 + 1;
                }
                if (!v32) {
                  ++v24;
                }
                unsigned int v25 = v23;
                if (v27 <= v23) {
                  goto LABEL_26;
                }
              }
              ++v122;
              v10[1] = (uint64_t)v14;
              goto LABEL_8;
            }
          }
        }
LABEL_26:
        if (*((void *)v5 + 63) >= a3)
        {
          uint64_t v34 = v124;
        }
        else
        {
          operations_research::sat::BinaryImplicationGraph::ExpandAtMostOne((uint64_t)v5, v14, v124 >> 2, (int **)&v126);
          uint64_t v33 = (void *)*v10;
          if (*v10)
          {
            v10[1] = (uint64_t)v33;
            operator delete(v33);
            *unint64_t v10 = 0;
            v10[1] = 0;
            v10[2] = 0;
          }
          *(_OWORD *)unint64_t v10 = v126;
          v10[2] = v127;
          unint64_t v14 = (char *)*v10;
          int v13 = (char *)v10[1];
          uint64_t v34 = (uint64_t)&v13[-*v10];
        }
        unint64_t v35 = 126 - 2 * __clz(v34 >> 2);
        if (v13 == v14) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v35;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>((int *)v14, v13, (uint64_t)&v126, v36, 1);
        uint64_t v37 = *v10;
        uint64_t v38 = (int *)v10[1];
        if ((int *)*v10 == v38)
        {
          unint64_t v40 = 0;
        }
        else
        {
          uint64_t v39 = 0;
          unint64_t v40 = 0;
          uint64_t v41 = (int *)*v10;
          do
          {
            uint64_t v42 = *v41++;
            uint64_t v43 = (v39 + 0x1F73E299748A907ELL + v42) ^ (v40 >> 43);
            unint64_t v44 = (v39 - v43 - 0x1F73E299748A907ELL) ^ (v43 << 9);
            unint64_t v45 = (v40 - v43 - v44) ^ (v44 >> 8);
            unint64_t v46 = (v43 - v44 - v45) ^ (v45 >> 38);
            unint64_t v47 = (v44 - v45 - v46) ^ (v46 << 23);
            unint64_t v48 = (v45 - v46 - v47) ^ (v47 >> 5);
            unint64_t v49 = (v46 - v47 - v48) ^ (v48 >> 35);
            unint64_t v50 = (v47 - v48 - v49) ^ (v49 << 49);
            unint64_t v51 = (v48 - v49 - v50) ^ (v50 >> 11);
            unint64_t v52 = (v49 - v50 - v51) ^ (v51 >> 12);
            unint64_t v40 = (v51 - v52 - ((v50 - v51 - v52) ^ (v52 << 18))) ^ (((v50 - v51 - v52) ^ (v52 << 18)) >> 22);
            uint64_t v39 = -(uint64_t)v40;
          }
          while (v41 != v38);
        }
        uint64_t v53 = 0;
        unint64_t v54 = ((unint64_t)v130 >> 12) ^ (v40 >> 7);
        uint64_t v55 = (char *)v38 - v37;
        while (1)
        {
          unint64_t v56 = v54 & v132;
          uint64_t v57 = *(void *)((char *)v130 + v56);
          for (unint64_t i = ((v57 ^ (0x101010101010101 * (v40 & 0x7F))) - 0x101010101010101) & ~(v57 ^ (0x101010101010101
                                                                                                  * (v40 & 0x7F))) & 0x8080808080808080;
                i;
                i &= i - 1)
          {
            uint64_t v59 = (char **)(v131 + 24 * ((v56 + (__clz(__rbit64(i)) >> 3)) & v132));
            long long v60 = *v59;
            unint64_t v61 = v59[1];
            if ((char *)(v61 - v60) == v55)
            {
              if (v60 == v61)
              {
LABEL_7:
                ++v122;
                v10[1] = v37;
                goto LABEL_8;
              }
              uint64_t v62 = (_DWORD *)*v10;
              while (*(_DWORD *)v60 == *v62)
              {
                v60 += 4;
                ++v62;
                if (v60 == v61) {
                  goto LABEL_7;
                }
              }
            }
          }
          if ((v57 & (~v57 << 6) & 0x8080808080808080) != 0) {
            break;
          }
          v53 += 8;
          unint64_t v54 = v53 + v56;
        }
        int v119 = v11;
        int v120 = v12;
        uint64_t v64 = (void *)(v131 + 24 * v63);
        v64[1] = 0;
        unint64_t v65 = (char **)(v64 + 1);
        v64[2] = 0;
        *uint64_t v64 = 0;
        unint64_t v67 = (const void *)*v10;
        uint64_t v66 = v10[1];
        uint64_t v121 = v10;
        int64_t v68 = v66 - *v10;
        if (v66 == *v10)
        {
          uint64_t v95 = *v10;
          unint64_t v71 = (int *)*v10;
        }
        else
        {
          if (v68 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v69 = (char *)operator new(v66 - (void)v67);
          *uint64_t v64 = v69;
          *unint64_t v65 = v69;
          unint64_t v70 = &v69[4 * (v68 >> 2)];
          v64[2] = v70;
          memcpy(v69, v67, v68);
          *unint64_t v65 = v70;
          uint64_t v72 = (int *)*v10;
          unint64_t v71 = (int *)v10[1];
          if ((int *)*v10 != v71)
          {
            int v125 = DWORD2(v131);
            int v123 = (int *)v10[1];
            while (1)
            {
              while (1)
              {
                unint64_t v73 = (char *)__p + 24 * *v72;
                uint64_t v75 = (uint64_t *)(v73 + 8);
                unint64_t v74 = (char *)*((void *)v73 + 1);
                unint64_t v76 = *((void *)v73 + 2);
                if ((unint64_t)v74 >= v76) {
                  break;
                }
                *(_DWORD *)unint64_t v74 = v125;
                *uint64_t v75 = (uint64_t)(v74 + 4);
                if (++v72 == v71) {
                  goto LABEL_77;
                }
              }
              long long v77 = *(char **)v73;
              uint64_t v78 = (uint64_t)&v74[-*(void *)v73];
              uint64_t v79 = v78 >> 2;
              unint64_t v80 = (v78 >> 2) + 1;
              if (v80 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v81 = v76 - (void)v77;
              if (v81 >> 1 > v80) {
                unint64_t v80 = v81 >> 1;
              }
              unint64_t v82 = (unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v80;
              if (v82) {
                break;
              }
              int v83 = 0;
              uint64_t v84 = (_DWORD *)(4 * v79);
              *(_DWORD *)(4 * v79) = v125;
              uint64_t v85 = 4 * v79 + 4;
              if (v74 != v77) {
                goto LABEL_65;
              }
LABEL_74:
              *(void *)unint64_t v73 = v84;
              *uint64_t v75 = v85;
              *((void *)v73 + 2) = &v83[4 * v82];
              if (v77) {
                operator delete(v77);
              }
              unint64_t v71 = v123;
              *uint64_t v75 = v85;
              if (++v72 == v123)
              {
LABEL_77:
                unint64_t v10 = v121;
                unint64_t v71 = (int *)*v121;
                uint64_t v95 = v121[1];
                uint64_t v5 = v116;
                a3 = v117;
                goto LABEL_80;
              }
            }
            if (v82 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v83 = operator new(4 * v82);
            uint64_t v84 = &v83[4 * v79];
            *uint64_t v84 = v125;
            uint64_t v85 = (uint64_t)(v84 + 1);
            if (v74 == v77) {
              goto LABEL_74;
            }
LABEL_65:
            unint64_t v86 = v74 - 4 - v77;
            if (v86 < 0x2C) {
              goto LABEL_121;
            }
            if ((unint64_t)(v74 - &v83[v78]) < 0x20) {
              goto LABEL_121;
            }
            uint64_t v87 = (v86 >> 2) + 1;
            uint64_t v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v89 = &v74[-v88];
            uint64_t v84 = (_DWORD *)((char *)v84 - v88);
            uint64_t v90 = &v83[4 * v79 - 16];
            uint64_t v91 = v74 - 16;
            uint64_t v92 = v87 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v93 = *(_OWORD *)v91;
              *(v90 - 1) = *((_OWORD *)v91 - 1);
              *uint64_t v90 = v93;
              v90 -= 2;
              v91 -= 32;
              v92 -= 8;
            }
            while (v92);
            unint64_t v74 = v89;
            if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_121:
              do
              {
                int v94 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *--uint64_t v84 = v94;
              }
              while (v74 != v77);
            }
            goto LABEL_74;
          }
          uint64_t v95 = v10[1];
          uint64_t v5 = v116;
          a3 = v117;
        }
LABEL_80:
        int v11 = v119;
        if ((v95 - (uint64_t)v71) >> 2 > (unint64_t)(int)((unint64_t)v124 >> 2)) {
          int v11 = v119 + 1;
        }
        int v12 = v120 + 1;
        int v9 = v118;
LABEL_8:
        v10 += 3;
        if (v10 == v9) {
          goto LABEL_85;
        }
      }
    }
    int v12 = 0;
    int v122 = 0;
    int v11 = 0;
LABEL_85:
    if ((v11 > 0 || v122 > 0 || v12 > 0)
      && *operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::vlocal__ >= 1
      && (operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/clause.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v126, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1567);
      unint64_t v96 = (void *)google::LogMessage::stream((google::LogMessage *)&v126);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Clique Extended: ", 17);
      unint64_t v97 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" Removed: ", 10);
      int v98 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" Added: ", 8);
      int v99 = (void *)std::ostream::operator<<();
      uint64_t v100 = *((void *)v5 + 63);
      if (v100 <= a3) {
        int v101 = "";
      }
      else {
        int v101 = " (Aborted)";
      }
      if (v100 <= a3) {
        uint64_t v102 = 0;
      }
      else {
        uint64_t v102 = 10;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
      google::LogMessage::~LogMessage((google::LogMessage *)&v126);
    }
    uint64_t v103 = (char *)__p;
    if (__p)
    {
      unint64_t v104 = v129;
      unint64_t v105 = __p;
      if (v129 != __p)
      {
        int v106 = v129;
        do
        {
          unint64_t v108 = (void *)*((void *)v106 - 3);
          v106 -= 24;
          uint64_t v107 = v108;
          if (v108)
          {
            *((void *)v104 - 2) = v107;
            operator delete(v107);
          }
          unint64_t v104 = v106;
        }
        while (v106 != v103);
        unint64_t v105 = __p;
      }
      unint64_t v129 = v103;
      operator delete(v105);
    }
    uint64_t v109 = v132;
    if ((void)v132)
    {
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      uint64_t v112 = (char *)v130;
      do
      {
        if ((v112[v111] & 0x80000000) == 0)
        {
          uint64_t v113 = *(void **)(v131 + v110);
          if (v113)
          {
            *(void *)(v131 + v110 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v113;
            operator delete(v113);
          }
        }
        ++v111;
        v110 += 24;
      }
      while (v109 != v111);
      operator delete(v112);
      unint64_t v130 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v133 = 0;
      *(void *)&long long v132 = 0;
      long long v131 = 0uLL;
    }
    if (*((void *)&v132 + 1)) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v132 + 1));
    }
  }
  return v115;
}

void sub_23CBC86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
}

void operations_research::sat::BinaryImplicationGraph::ExpandAtMostOne(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    size_t v6 = 4 * a3;
    if (4 * a3 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v9 = (int *)operator new(4 * a3);
    unint64_t v10 = (4 * a3) >> 2;
    *a4 = v9;
    int v11 = &v9[v10];
    a4[2] = v11;
    memcpy(v9, a2, v6);
    a4[1] = v11;
    if (a2 != &a2[v6])
    {
      if (v10 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v10;
      }
      do
      {
        unint64_t v14 = *v9++;
        unint64_t v13 = v14;
        if (*(void *)(*(void *)(a1 + 192) + 32 * v14) < 2uLL
          || ((*(void *)(*(void *)(a1 + 544) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        {
          return;
        }
        --v12;
      }
      while (v12);
      uint64_t v15 = 0;
      uint64_t v16 = a1 + 320;
      uint64_t v17 = -12;
      memset(&v52, 0, sizeof(v52));
      while (1)
      {
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(v16, (*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 5);
        operations_research::sat::BinaryImplicationGraph::MarkDescendants((void *)a1, (*a4)[v15]);
        if (v15)
        {
          uint64_t v20 = *a4;
          uint64_t v21 = *(void *)(a1 + 328);
        }
        else
        {
          if (&v52 != (std::vector<int> *)(a1 + 376)) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v52, *(char **)(a1 + 376), *(char **)(a1 + 384), (uint64_t)(*(void *)(a1 + 384) - *(void *)(a1 + 376)) >> 2);
          }
          uint64_t v20 = *a4;
          uint64_t v22 = a4[1];
          uint64_t v21 = *(void *)(a1 + 328);
          for (unint64_t i = *a4;
                i != v22;
                *(void *)(v21 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v24 & 0x3F ^ 1u)))
          {
            int v24 = *i++;
          }
        }
        *(void *)(v21 + (((unint64_t)v20[v15] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v20[v15] & 0x3F ^ 1u));
        std::vector<int>::pointer begin = v52.__begin_;
        std::vector<int>::pointer end = v52.__end_;
        if (v52.__begin_ == v52.__end_)
        {
          int v27 = 0;
        }
        else
        {
          int v27 = 0;
          std::vector<int>::pointer v28 = v52.__begin_;
          do
          {
            int v29 = *v28;
            if ((*(void *)(v21 + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29)) {
              begin[v27++] = v29;
            }
            ++v28;
          }
          while (v28 != end);
        }
        unint64_t v30 = v27;
        unint64_t v31 = end - begin;
        if (v30 <= v31)
        {
          if (v30 < v31)
          {
            std::vector<int>::pointer end = &begin[v30];
            v52.__end_ = end;
          }
        }
        else
        {
          std::vector<int>::__append(&v52, v30 - v31);
          std::vector<int>::pointer begin = v52.__begin_;
          std::vector<int>::pointer end = v52.__end_;
        }
        if (begin == end)
        {
LABEL_55:
          if (end)
          {
            v52.__end_ = end;
            operator delete(end);
          }
          return;
        }
        unint64_t v32 = v15 + 1;
        uint64_t v33 = *a4;
        uint64_t v34 = a4[1];
        unint64_t v19 = v34 - *a4;
        if (v19 == v15 + 1) {
          break;
        }
LABEL_14:
        v17 += 4;
        ++v15;
        if (v19 <= v32)
        {
          std::vector<int>::pointer end = v52.__begin_;
          goto LABEL_55;
        }
      }
      int v35 = *(end - 1) ^ 1;
      unint64_t v36 = (unint64_t)a4[2];
      if ((unint64_t)v34 < v36)
      {
        *uint64_t v34 = v35;
        uint64_t v18 = (uint64_t)(v34 + 1);
      }
      else
      {
        unint64_t v37 = v15 + 2;
        if ((unint64_t)(v15 + 2) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v36 - (void)v33;
        if (v38 >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          if (v39 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v40 = v39;
          uint64_t v41 = operator new(4 * v39);
          unint64_t v39 = v40;
          uint64_t v42 = (int *)&v41[4 * v32];
          *uint64_t v42 = v35;
          uint64_t v18 = (uint64_t)(v42 + 1);
          if (v34 != v33)
          {
LABEL_43:
            unint64_t v43 = (char *)(v34 - 1) - (char *)v33;
            if (v43 < 0x1C) {
              goto LABEL_62;
            }
            if ((unint64_t)((char *)(v34 - 1) - &v41[4 * v15]) < 0x20) {
              goto LABEL_62;
            }
            uint64_t v44 = (v43 >> 2) + 1;
            uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v46 = &v34[v45 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v42 = (int *)((char *)v42 - v45);
            unint64_t v47 = &v41[v17];
            unint64_t v48 = v34 - 4;
            uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *unint64_t v47 = v50;
              v47 -= 2;
              v48 -= 8;
              v49 -= 8;
            }
            while (v49);
            uint64_t v34 = v46;
            if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_62:
              do
              {
                int v51 = *--v34;
                *--uint64_t v42 = v51;
              }
              while (v34 != v33);
            }
            *a4 = v42;
            a4[1] = (int *)v18;
            a4[2] = (int *)&v41[4 * v39];
            if (!v33) {
              goto LABEL_13;
            }
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = (int *)(4 * v32);
          *(_DWORD *)(4 * v32) = v35;
          uint64_t v18 = 4 * v32 + 4;
          if (v34 != v33) {
            goto LABEL_43;
          }
        }
        *a4 = v42;
        a4[1] = (int *)v18;
        a4[2] = (int *)&v41[4 * v39];
        if (v33)
        {
LABEL_53:
          operator delete(v33);
          std::vector<int>::pointer end = v52.__end_;
        }
      }
LABEL_13:
      a4[1] = (int *)v18;
      v52.__end_ = end - 1;
      unint64_t v19 = (v18 - (uint64_t)*a4) >> 2;
      uint64_t v16 = a1 + 320;
      goto LABEL_14;
    }
  }
}

void sub_23CBC8B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<std::vector<operations_research::sat::Literal>,operations_research::sat::anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::~flat_hash_set(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v4) & 0x80000000) == 0)
      {
        size_t v6 = *(void **)(*v5 + v3);
        if (v6)
        {
          *(void *)(*v5 + v3 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v6;
          operator delete(v6);
          uint64_t v2 = *(void *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 24;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *uint64_t v5 = 0;
  }
  unint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  return a1;
}

void **operations_research::sat::BinaryImplicationGraph::DirectImplications(void *a1, int a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = (unint64_t)a2 >> 6;
  uint64_t v4 = 1 << a2;
  if ((*(void *)(a1[83] + 8 * v3) & (1 << a2)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v88, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1648);
    long long v77 = (void *)google::LogMessage::stream((google::LogMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: !is_removed_[literal.Index()] ", 44);
    goto LABEL_89;
  }
  size_t v6 = a1;
  unint64_t v7 = (char *)a1[74];
  uint64_t v8 = (char *)a1[75];
  if (v7 != v8)
  {
    uint64_t v9 = a1[80];
    unint64_t v10 = (char *)a1[74];
    do
    {
      int v11 = *(_DWORD *)v10;
      v10 += 4;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  a1[75] = v7;
  uint64_t v12 = a1[16];
  if (((*(void *)(*(void *)(v12 + 24) + 8 * v3) >> (a2 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v88, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1658);
    uint64_t v78 = (void *)google::LogMessage::stream((google::LogMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Check failed: !assignment.LiteralIsAssigned(literal) ", 53);
    goto LABEL_89;
  }
  uint64_t v13 = (unint64_t *)(a1[24] + 32 * a2);
  unint64_t v16 = *v13;
  uint64_t v15 = v13 + 1;
  unint64_t v14 = v16;
  if (v16) {
    uint64_t v15 = (void *)*v15;
  }
  uint64_t v87 = (void **)(a1 + 74);
  if (v14 >= 2)
  {
    uint64_t v22 = (void *)((char *)v15 + 4 * (v14 >> 1));
    while (1)
    {
      int v52 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 == a2) {
        goto LABEL_57;
      }
      unint64_t v53 = (unint64_t)v52 >> 6;
      if (((*(void *)(*(void *)(v12 + 24) + 8 * v53) >> (v52 & 0x3E)) & 3) != 0) {
        goto LABEL_57;
      }
      uint64_t v54 = 1 << v52;
      if ((*(void *)(v6[83] + 8 * v53) & (1 << v52)) != 0) {
        goto LABEL_57;
      }
      uint64_t v55 = v6[80];
      uint64_t v56 = *(void *)(v55 + 8 * v53);
      if ((v56 & v54) != 0) {
        goto LABEL_57;
      }
      *(void *)(v55 + 8 * v53) = v56 | v54;
      unint64_t v57 = v6[76];
      if ((unint64_t)v7 >= v57) {
        break;
      }
      *(_DWORD *)unint64_t v7 = v52;
      uint64_t v51 = (uint64_t)(v7 + 4);
LABEL_56:
      v6[75] = v51;
      unint64_t v7 = (char *)v51;
LABEL_57:
      uint64_t v15 = (void *)((char *)v15 + 4);
      if (v15 == v22) {
        goto LABEL_9;
      }
    }
    uint64_t v58 = v2;
    uint64_t v59 = (char *)*v87;
    uint64_t v60 = v7 - (unsigned char *)*v87;
    uint64_t v61 = v60 >> 2;
    unint64_t v62 = (v60 >> 2) + 1;
    if (v62 >> 62) {
LABEL_91:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v63 = v57 - (void)v59;
    if (v63 >> 1 > v62) {
      unint64_t v62 = v63 >> 1;
    }
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v86 = v3;
    uint64_t v83 = v4;
    unint64_t v80 = v62;
    if (v62)
    {
      if (v62 >> 62) {
LABEL_92:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v64 = v7;
      unint64_t v65 = operator new(4 * v62);
      unint64_t v7 = v64;
      uint64_t v66 = &v65[4 * v61];
      *uint64_t v66 = v52;
      uint64_t v51 = (uint64_t)(v66 + 1);
      if (v7 != v59)
      {
LABEL_71:
        unint64_t v67 = v7 - 4 - v59;
        if (v67 < 0xBC
          || &v65[v60 - 4 - (v67 & 0xFFFFFFFFFFFFFFFCLL)] > &v65[v60 - 4]
          || &v7[-(v67 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
          || (unint64_t)(v7 - &v65[v60]) < 0x20)
        {
          int64_t v68 = v7;
          uint64_t v2 = v58;
          unint64_t v69 = v80;
        }
        else
        {
          uint64_t v71 = (v67 >> 2) + 1;
          uint64_t v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
          int64_t v68 = &v7[-v72];
          uint64_t v66 = (_DWORD *)((char *)v66 - v72);
          unint64_t v73 = &v65[4 * v61 - 16];
          unint64_t v74 = v7 - 16;
          uint64_t v75 = v71 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v76 = *(_OWORD *)v74;
            *(v73 - 1) = *((_OWORD *)v74 - 1);
            *unint64_t v73 = v76;
            v73 -= 2;
            v74 -= 32;
            v75 -= 8;
          }
          while (v75);
          uint64_t v2 = v58;
          unint64_t v69 = v80;
          if (v71 == (v71 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_74:
            size_t v6 = a1;
            a1[74] = v66;
            a1[75] = v51;
            a1[76] = &v65[4 * v69];
            if (!v59)
            {
LABEL_76:
              unint64_t v3 = v86;
              uint64_t v4 = v83;
              goto LABEL_56;
            }
LABEL_75:
            operator delete(v59);
            goto LABEL_76;
          }
        }
        do
        {
          int v70 = *((_DWORD *)v68 - 1);
          v68 -= 4;
          *--uint64_t v66 = v70;
        }
        while (v68 != v59);
        goto LABEL_74;
      }
    }
    else
    {
      unint64_t v65 = 0;
      uint64_t v66 = (_DWORD *)(4 * v61);
      *(_DWORD *)(4 * v61) = v52;
      uint64_t v51 = 4 * v61 + 4;
      if (v7 != v59) {
        goto LABEL_71;
      }
    }
    uint64_t v2 = v58;
    size_t v6 = a1;
    a1[74] = v66;
    a1[75] = v51;
    a1[76] = &v65[4 * v80];
    if (!v59) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
LABEL_9:
  uint64_t v17 = v6[28];
  uint64_t v81 = v2;
  if (a2 >= (int)((unint64_t)(v6[29] - v17) >> 5)) {
    goto LABEL_17;
  }
  unint64_t v18 = *(void *)(v17 + 32 * v2);
  if ((*(void *)(v6[68] + 8 * v3) & v4) != 0 && v18 >= 2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v88, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1669);
    uint64_t v79 = (void *)google::LogMessage::stream((google::LogMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Check failed: at_most_ones_[literal.Index()].empty() ", 53);
LABEL_89:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v88);
  }
  uint64_t v20 = (int *)(v17 + 32 * v2 + 8);
  if (v18) {
    uint64_t v20 = *(int **)v20;
  }
  if (v18 >= 2)
  {
    unint64_t v23 = &v20[v18 >> 1];
    uint64_t v24 = v6[31];
    unint64_t v82 = v23;
    do
    {
      for (uint64_t i = *v20; ; ++i)
      {
        int v27 = *(_DWORD *)(v24 + 4 * i);
        if (v27 == -1) {
          break;
        }
        if (v27 != a2)
        {
          unint64_t v28 = (unint64_t)v27 >> 6;
          if (((*(void *)(*(void *)(v12 + 24) + 8 * v28) >> (v27 & 0x3E)) & 3) == 0
            && ((*(void *)(v6[83] + 8 * v28) >> v27) & 1) == 0)
          {
            int v29 = v27 ^ 1;
            uint64_t v30 = v6[80];
            uint64_t v31 = *(void *)(v30 + 8 * v28);
            if ((v31 & (1 << v29)) == 0)
            {
              *(void *)(v30 + 8 * v2google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v31 | (1 << v29);
              unint64_t v32 = v6[76];
              if ((unint64_t)v7 < v32)
              {
                *(_DWORD *)unint64_t v7 = v29;
                uint64_t v26 = (uint64_t)(v7 + 4);
              }
              else
              {
                uint64_t v33 = (char *)*v87;
                uint64_t v34 = v7 - (unsigned char *)*v87;
                uint64_t v35 = v34 >> 2;
                unint64_t v36 = (v34 >> 2) + 1;
                if (v36 >> 62) {
                  goto LABEL_91;
                }
                uint64_t v37 = v32 - (void)v33;
                if (v37 >> 1 > v36) {
                  unint64_t v36 = v37 >> 1;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                }
                unint64_t v85 = v36;
                if (v36)
                {
                  if (v36 >> 62) {
                    goto LABEL_92;
                  }
                  uint64_t v38 = v7;
                  unint64_t v39 = operator new(4 * v36);
                  unint64_t v7 = v38;
                  unint64_t v40 = (int *)&v39[4 * v35];
                  *unint64_t v40 = v29;
                  uint64_t v26 = (uint64_t)(v40 + 1);
                  if (v7 != v33)
                  {
LABEL_39:
                    unint64_t v41 = v7 - 4 - v33;
                    if (v41 < 0xBC
                      || &v39[v34 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v34 - 4]
                      || &v7[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
                      || (unint64_t)(v7 - v39 - v34) < 0x20)
                    {
                      uint64_t v42 = v7;
                      size_t v6 = a1;
                      unint64_t v43 = v85;
                    }
                    else
                    {
                      uint64_t v45 = (v41 >> 2) + 1;
                      uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
                      uint64_t v42 = &v7[-v46];
                      unint64_t v40 = (int *)((char *)v40 - v46);
                      unint64_t v47 = &v39[4 * v35 - 16];
                      unint64_t v48 = v7 - 16;
                      uint64_t v49 = v45 & 0x7FFFFFFFFFFFFFF8;
                      size_t v6 = a1;
                      do
                      {
                        long long v50 = *(_OWORD *)v48;
                        *(v47 - 1) = *((_OWORD *)v48 - 1);
                        *unint64_t v47 = v50;
                        v47 -= 2;
                        v48 -= 32;
                        v49 -= 8;
                      }
                      while (v49);
                      unint64_t v43 = v85;
                      if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_42:
                        v6[74] = v40;
                        v6[75] = v26;
                        v6[76] = &v39[4 * v43];
                        if (v33) {
                          goto LABEL_43;
                        }
                        goto LABEL_44;
                      }
                    }
                    do
                    {
                      int v44 = *((_DWORD *)v42 - 1);
                      v42 -= 4;
                      *--unint64_t v40 = v44;
                    }
                    while (v42 != v33);
                    goto LABEL_42;
                  }
                }
                else
                {
                  unint64_t v39 = 0;
                  unint64_t v40 = (int *)(4 * v35);
                  *(_DWORD *)(4 * v35) = v29;
                  uint64_t v26 = 4 * v35 + 4;
                  if (v7 != v33) {
                    goto LABEL_39;
                  }
                }
                size_t v6 = a1;
                a1[74] = v40;
                a1[75] = v26;
                a1[76] = &v39[4 * v85];
                if (v33)
                {
LABEL_43:
                  operator delete(v33);
                  uint64_t v24 = v6[31];
                }
LABEL_44:
                unint64_t v23 = v82;
              }
              v6[75] = v26;
              unint64_t v7 = (char *)v26;
              continue;
            }
          }
        }
      }
      ++v20;
    }
    while (v20 != v23);
  }
LABEL_17:
  *(_DWORD *)(v6[86] + 4 * v81) = (unint64_t)&v7[-v6[74]] >> 2;
  return v87;
}

void sub_23CBC92C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBC92C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CBC92D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::FindFailedLiteralAroundVar(uint64_t a1, int a2, unsigned char *a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 128);
  int v8 = *(_DWORD *)(v7 + 12);
  int v13 = v6;
  LODWORD(v14) = v8;
  if (v6 != v8) {
    google::MakeCheckOpString<int,int>((int)&v13, (int)&v14, "propagation_trail_index_ == trail_->Index()");
  }
  if (((*(void *)(*(void *)(v7 + 24) + (((unint64_t)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1Fu))) & 3) != 0) {
    return 0;
  }
  unint64_t v10 = (char **)operations_research::sat::BinaryImplicationGraph::DirectImplications((void *)a1, (2 * a2) | 1u);
  if ((char **)(a1 + 616) != v10) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 616), *v10, v10[1], (v10[1] - *v10) >> 2);
  }
  operations_research::sat::BinaryImplicationGraph::DirectImplications((void *)a1, 2 * a2);
  int v11 = *(int **)(a1 + 616);
  uint64_t v12 = *(int **)(a1 + 624);
  while (v11 != v12)
  {
    if (((*(void *)(*(void *)(a1 + 640) + (((unint64_t)*v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v11) & 1) != 0
      && !operations_research::sat::BinaryImplicationGraph::FixLiteral(a1, *v11))
    {
      BOOL result = 0;
      *a3 = 1;
      return result;
    }
    ++v11;
  }
  return *(_DWORD *)(a1 + 36) > v6;
}

void sub_23CBC9478(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BinaryImplicationGraph::NumImplicationOnVariableRemoval(void *a1, int a2)
{
  int v3 = 2 * a2;
  uint64_t v4 = (char **)operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, (2 * a2) | 1u);
  if (a1 + 77 != v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a1 + 77, *v4, v4[1], (v4[1] - *v4) >> 2);
  }
  uint64_t v5 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, v3);
  int v6 = (int *)a1[77];
  uint64_t v7 = (int *)a1[78];
  if (v6 == v7) {
    return 0;
  }
  int v8 = v5;
  uint64_t result = 0;
  uint64_t v10 = ((unsigned char *)v8[1] - (unsigned char *)*v8) >> 2;
  do
  {
    unint64_t v11 = *(void *)(a1[80] + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v11 >> *v6))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1725);
      uint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: !in_direct_implications_[l.Index()] ", 50);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
    }
    uint64_t result = result + v10 - ((v11 >> (*v6++ & 0x3F ^ 1u)) & 1);
  }
  while (v6 != v7);
  return result;
}

void sub_23CBC9598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::BinaryImplicationGraph::RemoveBooleanVariable(void *a1, int a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v5 = (2 * a2);
  int v6 = (char **)operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, v5 | 1);
  if (a1 + 77 != v6) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a1 + 77, *v6, v6[1], (v6[1] - *v6) >> 2);
  }
  uint64_t v7 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, v5);
  int v8 = (int *)*v7;
  uint64_t v9 = (int *)v7[1];
  uint64_t v10 = (unsigned int *)a1[77];
  if (*v7 != v9)
  {
    if (v10 == (unsigned int *)a1[78])
    {
      uint64_t v11 = a1[86];
      do
      {
        uint64_t v12 = *v8++;
        --*(_DWORD *)(v11 + 4 * (v12 ^ 1));
      }
      while (v8 != v9);
    }
    else
    {
      do
      {
        int v13 = *v8;
        --*(_DWORD *)(a1[86] + 4 * (*v8 ^ 1));
        uint64_t v14 = (int *)a1[77];
        uint64_t v15 = (int *)a1[78];
        while (v14 != v15)
        {
          if ((*v14 ^ 1) != v13) {
            operations_research::sat::BinaryImplicationGraph::AddBinaryClause((uint64_t)a1, *v14, v13);
          }
          ++v14;
        }
        ++v8;
      }
      while (v8 != v9);
      uint64_t v10 = (unsigned int *)a1[77];
    }
  }
  unint64_t v16 = (int *)a1[78];
  if (v10 != (unsigned int *)v16)
  {
    uint64_t v17 = a1[86];
    unint64_t v18 = (int *)v10;
    do
    {
      uint64_t v19 = *v18++;
      --*(_DWORD *)(v17 + 4 * (v19 ^ 1));
    }
    while (v18 != v16);
  }
  uint64_t v20 = (unsigned int *)a1[74];
  uint64_t v21 = (unsigned int *)a1[75];
  if (v20 != v21)
  {
    do
    {
      uint64_t v23 = *v20;
      uint64_t v24 = a1[17];
      if (v24)
      {
        int v51 = v5 | 1;
        int v52 = v23;
        operations_research::sat::DratProofHandler::DeleteClause(v24, &v51, 2);
      }
      unsigned int v25 = operator new(8uLL);
      uint64_t v26 = a3[1];
      uint64_t v28 = a3[2] - v26;
      BOOL v27 = a3[2] == v26;
      *unsigned int v25 = v5 | 1 | (unint64_t)(v23 << 32);
      uint64_t v29 = 170 * (v28 >> 3) - 1;
      if (v27) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29;
      }
      unint64_t v31 = a3[5] + a3[4];
      if (v30 == v31)
      {
        std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a3);
        uint64_t v26 = a3[1];
        unint64_t v31 = a3[5] + a3[4];
      }
      uint64_t v22 = (void *)(*(void *)(v26 + 8 * (v31 / 0xAA)) + 24 * (v31 % 0xAA));
      v22[1] = 0;
      v22[2] = 0;
      *uint64_t v22 = v25;
      *(int64x2_t *)(v22 + 1) = vdupq_n_s64((unint64_t)(v25 + 1));
      ++a3[5];
      ++v20;
    }
    while (v20 != v21);
    uint64_t v10 = (unsigned int *)a1[77];
    unint64_t v16 = (int *)a1[78];
  }
  for (; v10 != (unsigned int *)v16; ++v10)
  {
    uint64_t v33 = *v10;
    uint64_t v34 = a1[17];
    if (v34)
    {
      int v51 = v5;
      int v52 = v33;
      operations_research::sat::DratProofHandler::DeleteClause(v34, &v51, 2);
    }
    uint64_t v35 = operator new(8uLL);
    uint64_t v36 = a3[1];
    uint64_t v37 = a3[2] - v36;
    BOOL v27 = a3[2] == v36;
    *uint64_t v35 = v5 | (v33 << 32);
    uint64_t v38 = 170 * (v37 >> 3) - 1;
    if (v27) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = v38;
    }
    unint64_t v40 = a3[5] + a3[4];
    if (v39 == v40)
    {
      std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a3);
      uint64_t v36 = a3[1];
      unint64_t v40 = a3[5] + a3[4];
    }
    unint64_t v32 = (void *)(*(void *)(v36 + 8 * (v40 / 0xAA)) + 24 * (v40 % 0xAA));
    v32[1] = 0;
    v32[2] = 0;
    void *v32 = v35;
    *(int64x2_t *)(v32 + 1) = vdupq_n_s64((unint64_t)(v35 + 1));
    ++a3[5];
  }
  uint64_t v41 = a1[83];
  unint64_t v42 = 8 * ((unint64_t)(int)v5 >> 6);
  uint64_t v43 = 1 << (v5 & 0x3E);
  *(void *)(v41 + v42) |= v43;
  uint64_t v44 = a1[68];
  uint64_t v45 = *(void *)(v44 + v42);
  if ((v45 & v43) != 0)
  {
    uint64_t v46 = a1[24] + 32 * (int)v5;
    unint64_t v47 = (int)v5 | 1;
    if ((*(unsigned char *)v46 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  ++a1[39];
  *(void *)(v44 + 8 * ((unint64_t)(int)v5 >> 6)) = v45 | v43;
  uint64_t v46 = a1[24] + 32 * (int)v5;
  unint64_t v47 = (int)v5 | 1;
  if (*(unsigned char *)v46)
  {
LABEL_41:
    operator delete(*(void **)(v46 + 8));
    uint64_t v41 = a1[83];
    uint64_t v44 = a1[68];
  }
LABEL_42:
  *(void *)uint64_t v46 = 0;
  uint64_t v48 = 8 * (v47 >> 6);
  *(void *)(v41 + v48) |= 1 << v47;
  uint64_t v49 = *(void *)(v44 + v48);
  if ((v49 & (1 << v47)) == 0)
  {
    ++a1[39];
    *(void *)(v44 + 8 * (v47 >> 6)) = v49 | (1 << v47);
    uint64_t v50 = a1[24] + 32 * v47;
    if ((*(unsigned char *)v50 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  uint64_t v50 = a1[24] + 32 * v47;
  if (*(unsigned char *)v50) {
LABEL_44:
  }
    operator delete(*(void **)(v50 + 8));
LABEL_45:
  *(void *)uint64_t v50 = 0;
}

void sub_23CBC99F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CBC9A08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::BinaryImplicationGraph::CleanupAllRemovedVariables(operations_research::sat::BinaryImplicationGraph *this)
{
  uint64_t v1 = (unint64_t *)*((void *)this + 24);
  uint64_t v2 = (unint64_t *)*((void *)this + 25);
  while (v1 != v2)
  {
    uint64_t v4 = (void **)(v1 + 1);
    uint64_t v3 = *v1 & 1;
    unint64_t v5 = *v1 >> 1;
    if (*v1)
    {
      if (*v1 < 2)
      {
        unint64_t v7 = 0;
        char v6 = 1;
        goto LABEL_22;
      }
      int v9 = 0;
      uint64_t v12 = (int *)*v4;
      uint64_t v13 = *((void *)this + 83);
      uint64_t v14 = 4 * v5;
      do
      {
        int v15 = *v12;
        if (((*(void *)(v13 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
          *((_DWORD *)*v4 + v9++) = v15;
        }
        ++v12;
        v14 -= 4;
      }
      while (v14);
    }
    else
    {
      if (*v1 < 2)
      {
        char v6 = 1;
        unint64_t v7 = 0;
        if (!v3) {
          goto LABEL_20;
        }
        goto LABEL_22;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v10 = *((void *)this + 83);
      do
      {
        int v11 = *(_DWORD *)((char *)v1 + v8 + 8);
        if (((*(void *)(v10 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          *((_DWORD *)v4 + v9++) = v11;
        }
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
    char v6 = 0;
    unint64_t v7 = v9;
    if (!v3)
    {
LABEL_20:
      unint64_t v16 = v1 + 1;
      unint64_t v17 = 6;
      if (v7 <= 6) {
        goto LABEL_3;
      }
      goto LABEL_23;
    }
LABEL_22:
    unint64_t v16 = (void *)v1[1];
    unint64_t v17 = v1[2];
    if (v17 >= v7) {
      goto LABEL_3;
    }
LABEL_23:
    unint64_t v18 = 2 * v17;
    if (v18 <= v7) {
      unint64_t v19 = v7;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v20 = (char *)operator new(4 * v19);
    uint64_t v21 = v20;
    if (v6) {
      goto LABEL_37;
    }
    uint64_t v22 = 0;
    if (v5 < 8 || (unint64_t)(v20 - (char *)v16) < 0x20)
    {
      uint64_t v23 = (int *)v16;
LABEL_35:
      unint64_t v28 = v5 - v22;
      uint64_t v29 = &v20[4 * v22];
      do
      {
        int v30 = *v23++;
        *(_DWORD *)uint64_t v29 = v30;
        v29 += 4;
        --v28;
      }
      while (v28);
      goto LABEL_37;
    }
    uint64_t v22 = v5 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v23 = (int *)v16 + (v5 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v24 = v20 + 16;
    unsigned int v25 = (long long *)(v16 + 2);
    uint64_t v26 = v5 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      _OWORD *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 8;
    }
    while (v26);
    if (v5 != v22) {
      goto LABEL_35;
    }
LABEL_37:
    if (v3) {
      operator delete(*v4);
    }
    v1[1] = (unint64_t)v21;
    v1[2] = v19;
    uint64_t v3 = 1;
LABEL_3:
    *uint64_t v1 = v3 | (2 * v7);
    v1 += 4;
  }
  uint64_t v32 = *((void *)this + 28);
  uint64_t v31 = *((void *)this + 29);
  if (v31 != v32)
  {
    uint64_t v33 = *((void *)this + 29);
    do
    {
      char v34 = *(unsigned char *)(v33 - 32);
      v33 -= 32;
      if (v34) {
        operator delete(*(void **)(v31 - 24));
      }
      uint64_t v31 = v33;
    }
    while (v33 != v32);
  }
  *((void *)this + 29) = v32;

  return operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes(this, 0);
}

uint64_t operations_research::sat::SatClause::RemoveFixedLiteralsAndTestIfTrue(int *a1, uint64_t a2)
{
  int v2 = a1[1];
  char v3 = v2 & 0xFE;
  unint64_t v4 = 2 * (v2 >> 1);
  uint64_t v5 = *(void *)(a2 + 8);
  if (((*(void *)(v5 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 & 0x3E)) & 3) != 0) {
    return 1;
  }
  if (((*(void *)(v5 + (((unint64_t)(2 * (a1[2] >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a1[2] & 0x3E)) & 3) != 0) {
    return 1;
  }
  unint64_t v7 = *a1;
  if ((int)v7 < 3)
  {
    int v9 = 2;
LABEL_11:
    *a1 = v9;
    return 0;
  }
  uint64_t v8 = 0;
  while (((*(void *)(v5 + (((unint64_t)(2 * (a1[v8 + 3] >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a1[v8 + 3] & 0x3E)) & 3) == 0)
  {
    if (v7 - 2 == ++v8)
    {
      *a1 = v7;
      return 0;
    }
  }
  int v9 = v8 + 2;
  if (v9 >= (int)v7) {
    goto LABEL_11;
  }
  uint64_t v10 = v9;
  while (1)
  {
    uint64_t v12 = (unsigned int *)&a1[v10];
    int v13 = v12[1];
    if (((*(void *)(v5 + (((unint64_t)(2 * (v13 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 & 0x3E)) & 3) != 0) {
      break;
    }
    unint64_t v7 = (unint64_t)&a1[v9];
    unsigned int v11 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(v7 + 4) = v13;
    v12[1] = v11;
    ++v9;
    LODWORD(v7) = *a1;
LABEL_15:
    if ((int)v7 <= (int)++v10) {
      goto LABEL_11;
    }
  }
  if (((*(void *)(v5 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
    goto LABEL_15;
  }
  return 1;
}

void operations_research::sat::BinaryImplicationGraph::~BinaryImplicationGraph(operations_research::sat::BinaryImplicationGraph *this)
{
  operations_research::sat::BinaryImplicationGraph::~BinaryImplicationGraph(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;

  *(void *)this = &unk_26F0BDF18;
  int v2 = (void *)*((void *)this + 86);
  if (v2)
  {
    *((void *)this + 87) = v2;
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 83);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 80);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 77);
  if (v5)
  {
    *((void *)this + 7google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 74);
  if (v6)
  {
    *((void *)this + 75) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 71);
  if (v7)
  {
    *((void *)this + 72) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 68);
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 65);
  if (v9)
  {
    *((void *)this + 66) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 60);
  if (v10)
  {
    *((void *)this + 61) = v10;
    operator delete(v10);
  }
  unsigned int v11 = (void *)*((void *)this + 57);
  if (v11)
  {
    *((void *)this + 5google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 51);
  if (v12)
  {
    *((void *)this + 52) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)this + 47);
  if (v13)
  {
    *((void *)this + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 41);
  if (v14)
  {
    *((void *)this + 42) = v14;
    operator delete(v14);
  }
  int v15 = (void *)*((void *)this + 31);
  if (v15)
  {
    *((void *)this + 32) = v15;
    operator delete(v15);
  }
  unint64_t v16 = *((void *)this + 28);
  if (v16)
  {
    unint64_t v17 = *((void *)this + 29);
    unint64_t v18 = (void *)*((void *)this + 28);
    if (v17 != v16)
    {
      unint64_t v19 = *((void *)this + 29);
      do
      {
        uint64_t v20 = *(unsigned char *)(v19 - 32);
        v19 -= 32;
        if (v20) {
          operator delete(*(void **)(v17 - 24));
        }
        unint64_t v17 = v19;
      }
      while (v19 != v16);
      unint64_t v18 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v16;
    operator delete(v18);
  }
  uint64_t v21 = *((void *)this + 24);
  if (v21)
  {
    uint64_t v22 = *((void *)this + 25);
    uint64_t v23 = (void *)*((void *)this + 24);
    if (v22 != v21)
    {
      uint64_t v24 = *((void *)this + 25);
      do
      {
        unsigned int v25 = *(unsigned char *)(v24 - 32);
        v24 -= 32;
        if (v25) {
          operator delete(*(void **)(v22 - 24));
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      uint64_t v23 = (void *)*((void *)this + 24);
    }
    *((void *)this + 25) = v21;
    operator delete(v23);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 144);
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::BinaryImplicationGraph *)((char *)this + 40));
  *(void *)this = &unk_26F0BD580;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void **gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    char v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (void **)a1[1];
      do
      {
        char v6 = *((unsigned char *)v5 - 32);
        v5 -= 4;
        if (v6) {
          operator delete(*(v3 - 3));
        }
        char v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::vector<operations_research::sat::Literal>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v5[4 * a2];
    return;
  }
  char v6 = *(unsigned char **)a1;
  uint64_t v7 = (uint64_t)&v5[-*(void *)a1];
  uint64_t v8 = v7 >> 2;
  unint64_t v9 = (v7 >> 2) + a2;
  if (v9 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - (void)v6;
  if (v10 >> 1 > v9) {
    unint64_t v9 = v10 >> 1;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(4 * v11);
    uint64_t v13 = (uint64_t)&v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    uint64_t v15 = v13 + 4 * a2;
    int64_t v16 = v5 - v6;
    if (v5 == v6) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 4 * v8;
  uint64_t v14 = 0;
  uint64_t v15 = 4 * v8 + 4 * a2;
  int64_t v16 = v5 - v6;
  if (v5 != v6)
  {
LABEL_14:
    unint64_t v17 = v16 - 4;
    if (v17 < 0x2C) {
      goto LABEL_29;
    }
    if ((unint64_t)(v5 - &v12[v7]) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v20 = &v5[-v19];
    v13 -= v19;
    uint64_t v21 = &v12[4 * v8 - 16];
    uint64_t v22 = (long long *)(v5 - 16);
    uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)uint64_t v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    uint64_t v5 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        int v25 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *(_DWORD *)(v13 - 4) = v25;
        v13 -= 4;
      }
      while (v5 != v6);
    }
  }
LABEL_20:
  *(void *)a1 = v13;
  *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v15;
  *(void *)(a1 + 16) = v14;
  if (v6)
  {
    operator delete(v6);
  }
}

operations_research::sat::BinaryImplicationGraph *operations_research::sat::BinaryImplicationGraph::BinaryImplicationGraph(operations_research::sat::BinaryImplicationGraph *this, operations_research::sat::Model *a2)
{
  strcpy((char *)this + 8, "BinaryImplicationGraph");
  *((unsigned char *)this + 31) = 22;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  strcpy((char *)this + 40, "BinaryImplicationGraph");
  *(void *)this = &unk_26F0BDF18;
  *((unsigned char *)this + 63) = 22;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *((void *)this + 15) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  uint64_t v4 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((void *)this + 16) = v4;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 24google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 30google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = (char *)this + 320;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((_DWORD *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = -1;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *((_DWORD *)this + 10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = (char *)this + 400;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = -1;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 48google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 52google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 56google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 60google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 64google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 68google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_DWORD *)this + 17google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  operations_research::sat::Trail::RegisterPropagator(v4, this);
  return this;
}

void sub_23CBCA408(_Unwind_Exception *a1)
{
  unint64_t v11 = *(void **)(v1 + 688);
  if (v11)
  {
    *(void *)(v1 + 696) = v11;
    operator delete(v11);
    uint64_t v12 = *(void **)(v1 + 664);
    if (!v12)
    {
LABEL_3:
      uint64_t v13 = *(void **)(v1 + 640);
      if (!v13) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = *(void **)(v1 + 664);
    if (!v12) {
      goto LABEL_3;
    }
  }
  operator delete(v12);
  uint64_t v13 = *(void **)(v1 + 640);
  if (!v13)
  {
LABEL_4:
    uint64_t v14 = *(void **)(v1 + 616);
    if (!v14) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v13);
  uint64_t v14 = *(void **)(v1 + 616);
  if (!v14)
  {
LABEL_5:
    uint64_t v15 = *(void **)(v1 + 592);
    if (!v15) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v1 + 624) = v14;
  operator delete(v14);
  uint64_t v15 = *(void **)(v1 + 592);
  if (!v15)
  {
LABEL_6:
    int64_t v16 = *(void **)(v1 + 568);
    if (!v16) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(void *)(v1 + 60google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v15;
  operator delete(v15);
  int64_t v16 = *(void **)(v1 + 568);
  if (!v16)
  {
LABEL_7:
    unint64_t v17 = *(void **)(v1 + 544);
    if (!v17) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v1 + 576) = v16;
  operator delete(v16);
  unint64_t v17 = *(void **)(v1 + 544);
  if (!v17)
  {
LABEL_8:
    uint64_t v18 = *v9;
    if (!*v9) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v17);
  uint64_t v18 = *v9;
  if (!*v9)
  {
LABEL_9:
    uint64_t v19 = *(void **)(v1 + 480);
    if (!v19) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  *(void *)(v1 + 52google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v18;
  operator delete(v18);
  uint64_t v19 = *(void **)(v1 + 480);
  if (!v19)
  {
LABEL_10:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v8);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v7);
    uint64_t v20 = *(void **)(v1 + 248);
    if (!v20)
    {
LABEL_12:
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v6);
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v5);
      std::deque<int>::~deque[abi:ne180100](v4);
      operations_research::StatsGroup::~StatsGroup(v3);
      int v21 = *(char *)(v1 + 31);
      *(void *)uint64_t v1 = v2;
      if (v21 < 0) {
        operator delete(*(void **)(v1 + 8));
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    *(void *)(v1 + 256) = v20;
    operator delete(v20);
    goto LABEL_12;
  }
LABEL_21:
  *(void *)(v1 + 48google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v19;
  operator delete(v19);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v8);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v7);
  uint64_t v20 = *(void **)(v1 + 248);
  if (!v20) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32) || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d) {
LABEL_12:
  }
    operator new();
  return v2[5];
}

void sub_23CBCA770(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1030C40021678CBLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::TimeLimit>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDF80;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1030C40021678CBLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::TimeLimit>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0BDF80;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 40);
    if (v2)
    {
      *(void *)(v1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x1030C40021678CBLL);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::BinaryImplicationGraph>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDFB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BinaryImplicationGraph>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BDFB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

int **std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(int8x16_t *a1, int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  char v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    unint64_t v9 = &a1->i8[8];
    uint64_t v10 = (int *)a1->i64[1];
    if (*v10 < 1)
    {
      a1->i64[1] = (uint64_t)*a2;
      *a2 = v10;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
    }
    else
    {
      uint64_t v11 = a1->i64[0];
      a1->i64[0] = (uint64_t)v10;
      a1->i64[1] = v11;
      a1->i64[1] = (uint64_t)*a2;
      *a2 = (int *)v11;
      return a2;
    }
    return (int **)v9;
  }
  if (a3 == 2)
  {
    uint64_t v8 = a1->i64[0];
    a1->i64[0] = (uint64_t)*a2;
    *a2 = (int *)v8;
    return a2;
  }
  uint64_t v13 = (uint64_t *)a4;
  if (a5 < a3)
  {
    if (a3 >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 + 1;
    }
    uint64_t v15 = v14 >> 1;
    int64_t v16 = (int **)a1 + (v14 >> 1);
    unint64_t v17 = v16 - 1;
    if (**(v16 - 1) <= 0)
    {
      uint64_t v31 = 8 - 8 * v15;
      uint64_t v32 = v15;
      while (v31)
      {
        uint64_t v18 = v32 - 1;
        int v33 = *(_DWORD *)a1[-1].i64[v32];
        v31 += 8;
        --v32;
        if (v33 >= 1)
        {
          unint64_t v17 = (int **)((char *)a1 - v31);
          goto LABEL_31;
        }
      }
      char v34 = (uint64_t *)a1;
      uint64_t v35 = a3 - v15;
      if (**v16 >= 1) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v18 = v14 >> 1;
LABEL_31:
      char v34 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(a1, v17, v18, a4, a5);
      uint64_t v35 = a3 - v15;
      if (**v16 >= 1)
      {
LABEL_32:
        unint64_t v9 = (char *)(a2 + 1);
        uint64_t v36 = (int **)&v6[v15 + 1];
        uint64_t v37 = v16;
        while (v36 != a2)
        {
          --v35;
          uint64_t v38 = *v36++;
          ++v37;
          if (*v38 <= 0) {
            goto LABEL_38;
          }
        }
LABEL_39:
        if (v34 != (uint64_t *)v16)
        {
          if (v16 == (int **)v9)
          {
            return (int **)v34;
          }
          else if (v34 + 1 == (uint64_t *)v16)
          {
            uint64_t v46 = *v34;
            size_t v47 = v9 - (char *)v16;
            memmove(v34, v16, v47);
            unint64_t v9 = (char *)v34 + v47;
            *(void *)unint64_t v9 = v46;
          }
          else if (v16 + 1 == (int **)v9)
          {
            uint64_t v48 = v9 - 8;
            uint64_t v49 = *((void *)v9 - 1);
            unint64_t v9 = (char *)(v34 + 1);
            if (v48 != (char *)v34) {
              memmove(v34 + 1, v34, v48 - (char *)v34);
            }
            *char v34 = v49;
          }
          else
          {
            uint64_t v39 = ((char *)v16 - (char *)v34) >> 3;
            uint64_t v40 = (v9 - (char *)v16) >> 3;
            if (v39 == v40)
            {
              uint64_t v41 = (int **)(v34 + 1);
              uint64_t v42 = (uint64_t)&v6[v15 + 1];
              do
              {
                uint64_t v43 = (uint64_t)*(v41 - 1);
                *(v41 - 1) = *(int **)(v42 - 8);
                *(void *)(v42 - google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v43;
                if (v41 == v16) {
                  break;
                }
                ++v41;
                BOOL v44 = v42 == (void)v9;
                v42 += 8;
              }
              while (!v44);
              return v16;
            }
            else
            {
              uint64_t v50 = (v9 - (char *)v16) >> 3;
              uint64_t v51 = ((char *)v16 - (char *)v34) >> 3;
              do
              {
                uint64_t v52 = v51;
                uint64_t v51 = v50;
                uint64_t v50 = v52 % v50;
              }
              while (v50);
              if (v51)
              {
                uint64_t v53 = &v34[v51];
                do
                {
                  uint64_t v55 = *--v53;
                  uint64_t v54 = v55;
                  uint64_t v56 = &v53[v39];
                  unint64_t v57 = v53;
                  do
                  {
                    uint64_t v58 = v56;
                    *unint64_t v57 = *v56;
                    uint64_t v59 = (v9 - (char *)v56) >> 3;
                    BOOL v60 = __OFSUB__(v39, v59);
                    uint64_t v62 = v39 - v59;
                    char v61 = (v62 < 0) ^ v60;
                    uint64_t v56 = &v34[v62];
                    if (v61) {
                      uint64_t v56 = &v58[v39];
                    }
                    unint64_t v57 = v58;
                  }
                  while (v56 != v53);
                  *uint64_t v58 = v54;
                }
                while (v53 != v34);
              }
              return (int **)&v34[v40];
            }
          }
        }
        return (int **)v9;
      }
    }
    uint64_t v37 = v16;
LABEL_38:
    unint64_t v9 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(v37, a2, v35, v13, a5);
    goto LABEL_39;
  }
  unint64_t v9 = &a1->i8[8];
  *(void *)a4 = a1->i64[0];
  uint64_t v19 = (uint64_t *)(a4 + 8);
  if (&a1->u64[1] == (unint64_t *)a2)
  {
    a1->i64[0] = (uint64_t)*a2;
    goto LABEL_18;
  }
  do
  {
    while (1)
    {
      uint64_t v20 = *(void *)v9;
      if (**(int **)v9 >= 1) {
        break;
      }
      *v19++ = v20;
      v9 += 8;
      if (v9 == (char *)a2) {
        goto LABEL_17;
      }
    }
    *v6++ = v20;
    v9 += 8;
  }
  while (v9 != (char *)a2);
LABEL_17:
  uint64_t *v6 = (uint64_t)*a2;
  unint64_t v9 = (char *)(v6 + 1);
  if ((unint64_t)v19 > a4)
  {
LABEL_18:
    int v21 = (uint64_t *)(a4 + 8);
    if ((unint64_t)v19 > a4 + 8) {
      int v21 = v19;
    }
    unint64_t v22 = (unint64_t)v21 + ~a4;
    if (v22 < 0x18)
    {
      uint64_t v23 = v9;
    }
    else
    {
      uint64_t v23 = v9;
      if ((unint64_t)&v9[-a4] >= 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (v22 >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        long long v27 = (uint64_t *)(a4 + v26);
        uint64_t v23 = &v9[v26];
        uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v29 = &v9[v24];
          long long v30 = *(_OWORD *)(a4 + v24 + 16);
          *(_OWORD *)uint64_t v29 = *(_OWORD *)(a4 + v24);
          *((_OWORD *)v29 + 1) = v30;
          v24 += 32;
          v28 -= 4;
        }
        while (v28);
        uint64_t v13 = v27;
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
          return (int **)v9;
        }
      }
    }
    do
    {
      uint64_t v45 = *v13++;
      *(void *)uint64_t v23 = v45;
      v23 += 8;
    }
    while (v13 < v19);
  }
  return (int **)v9;
}

void std::deque<operations_research::sat::Literal>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v5 - v4) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  unint64_t v9 = v6 - v8;
  BOOL v10 = a2 > v9;
  unint64_t v11 = a2 - v9;
  if (v10)
  {
    std::deque<operations_research::sat::Literal>::__add_back_capacity((uint64_t)a1, v11);
    uint64_t v7 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v12 = (void *)(v4 + 8 * (v8 >> 10));
  if (v5 == v4)
  {
    uint64_t v13 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v13 = *v12 + 4 * (v8 & 0x3FF);
    if (!a2) {
      return;
    }
  }
  uint64_t v14 = a2 + ((v13 - *v12) >> 2);
  if (v14 < 1)
  {
    unint64_t v16 = 1023 - v14;
    LOWORD(v14) = ~(1023 - v14);
    uint64_t v15 = &v12[-(v16 >> 10)];
  }
  else
  {
    uint64_t v15 = &v12[(unint64_t)v14 >> 10];
  }
  uint64_t v17 = *v15 + 4 * (v14 & 0x3FF);
  if (v13 != v17)
  {
    while (v12 != v15)
    {
      v7 += (*v12 - v13 + 4096) >> 2;
      uint64_t v18 = v12[1];
      ++v12;
      uint64_t v13 = v18;
      if (v18 == v17)
      {
        a1[5] = v7;
        return;
      }
    }
    a1[5] = v7 + ((v17 - v13) >> 2);
  }
}

void std::deque<operations_research::sat::Literal>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 10);
    if (!v8) {
      return;
    }
    while (1)
    {
      uint64_t v15 = *(void **)(a1 + 8);
      unint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          long long v27 = (char *)operator new(8 * v24);
          uint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          unint64_t v3 = v28;
          if (!v29)
          {
            unint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              uint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            uint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v28[v34];
            v16 += v34;
            uint64_t v35 = (long long *)(v15 + 3);
            uint64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)uint64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)uint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            unint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          unint64_t v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        unint64_t v3 = &v22[v23];
        *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)unint64_t v3 = v17;
      unint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        uint64_t v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 1023;
        }
        else {
          uint64_t v116 = 1024;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - (v6 << 10);
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 10;
      if (!v8) {
        return;
      }
    }
    std::vector<int>::pointer v118 = *(char **)(a1 + 16);
    while (1)
    {
      int v120 = *(void **)(a1 + 8);
      uint64_t v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        int v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          long long v132 = (char *)operator new(8 * v129);
          uint64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          std::vector<int>::pointer v118 = v133;
          if (!v29)
          {
            std::vector<int>::pointer v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              unint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            unint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v136 = &v133[v138];
            v121 += v138;
            uint64_t v139 = (long long *)(v120 + 3);
            unint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)unint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)unint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            std::vector<int>::pointer v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        uint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          std::vector<int>::pointer v118 = *(char **)(a1 + 8);
        }
        int v119 = &v118[-8 * v126];
        std::vector<int>::pointer v118 = &v127[v128];
        *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)std::vector<int>::pointer v118 = v122;
      std::vector<int>::pointer v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 10;
  uint64_t v40 = &v13[8 * (v11 - v8)];
  uint64_t v41 = &v13[8 * v12];
  uint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    BOOL v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      uint64_t v49 = &v40[-8 * (v47 >> 1)];
      uint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        uint64_t v50 = v40;
      }
      uint64_t v42 = &v49[v41 - v40];
      uint64_t v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    uint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      uint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        BOOL v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        unint64_t v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)unint64_t v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        BOOL v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    uint64_t v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    uint64_t v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)uint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  int64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v79 = (char *)operator new(8 * v78);
          unint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          unint64_t v69 = &v79[8 * (v78 >> 2)];
          uint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            uint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              unint64_t v85 = &v79[8 * (v78 >> 2)];
              unint64_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v85 = &v69[v89];
            unint64_t v86 = &v40[v89];
            uint64_t v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)unint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          uint64_t v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        uint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        long long v76 = &v40[-8 * (v74 >> 1)];
        long long v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          long long v77 = v40;
        }
        uint64_t v42 = &v76[v41 - v40];
        unint64_t v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        unint64_t v69 = v40;
      }
LABEL_81:
      *(void *)uint64_t v42 = *v68;
      v42 += 8;
      int64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v68;
      uint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  unint64_t v69 = v40;
LABEL_75:
  int v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v101 = (char *)operator new(8 * v100);
          unint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          unint64_t v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          uint64_t v42 = v69;
          if (!v29)
          {
            uint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            unint64_t v105 = &v101[8 * v102];
            int v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            unint64_t v105 = &v101[8 * v102];
            int v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v105 = &v69[v109];
            int v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            uint64_t v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)uint64_t v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)unint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          uint64_t v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          unint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          unint64_t v69 = &v97[8 * (v96 >> 1)];
          int v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            int v99 = v42;
          }
          uint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  uint64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_23CBCB7B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CBCB7FC()
{
}

char *std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  unint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1) {
    return v8;
  }
  unint64_t v13 = a1[1];
  unint64_t v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    unint64_t v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v12 - v6;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      uint64_t v18 = (char *)operator new(4 * v16);
    }
    else
    {
      uint64_t v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      uint64_t v18 = 0;
    }
    size_t v40 = 4 * a5;
    uint64_t v59 = 4 * a5;
    uint64_t v41 = &v18[4 * (v7 >> 2)];
    uint64_t v42 = v18;
    memcpy(v41, __src, v40);
    uint64_t v43 = v41;
    if ((void *)v6 != a2)
    {
      BOOL v44 = v17;
      uint64_t v43 = v41;
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_51;
      }
      BOOL v44 = v17;
      uint64_t v43 = v41;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v42[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_51;
      }
      unint64_t v45 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      BOOL v44 = &v17[-v46];
      uint64_t v43 = &v41[-v46];
      uint64_t v47 = 4 * (v7 >> 2) - 16;
      uint64_t v48 = &v42[v47];
      uint64_t v49 = (long long *)(v6 + v47);
      uint64_t v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)uint64_t v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 8;
      }
      while (v50);
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_51:
        do
        {
          int v52 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v43 - 1) = v52;
          v43 -= 4;
        }
        while (v44 != (char *)v6);
      }
    }
    uint64_t v53 = &v42[4 * v16];
    size_t v54 = v13 - (void)v17;
    if (v54) {
      memmove(&v41[v59], v17, v54);
    }
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v41[v59 + v54];
    a1[2] = (unint64_t)v53;
    if (v6) {
      operator delete((void *)v6);
    }
    return v41;
  }
  uint64_t v19 = v13 - (void)v8;
  uint64_t v20 = (uint64_t)(v13 - (void)v8) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    unint64_t v23 = a1[1];
  }
  else
  {
    uint64_t v21 = &__src[4 * v20];
    int64_t v22 = a4 - v21;
    if (a4 != v21)
    {
      unint64_t v58 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      unint64_t v8 = (char *)v58;
    }
    unint64_t v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1) {
      return v8;
    }
  }
  unint64_t v24 = &v8[4 * a5];
  size_t v25 = v23 - (void)v24;
  uint64_t v26 = (uint64_t)(v23 - (void)v24) >> 2;
  long long v27 = (int *)(v23 - 4 * a5);
  uint64_t v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    unint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    int64_t v30 = (char *)(v29 + v6);
    unint64_t v31 = v29 + v6 + 4;
    if (v13 > v31) {
      unint64_t v31 = v13;
    }
    unint64_t v32 = v31 + ~v6 - v29;
    if (v32 < 0x2C)
    {
      uint64_t v28 = (_DWORD *)v23;
    }
    else
    {
      unint64_t v33 = v23 - (void)v30;
      uint64_t v28 = (_DWORD *)v23;
      if (v33 >= 0x20)
      {
        uint64_t v34 = (v32 >> 2) + 1;
        uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
        long long v27 = (int *)((char *)v27 + v35);
        uint64_t v28 = (_DWORD *)(v23 + v35);
        uint64_t v36 = (_OWORD *)(v23 + 16);
        uint64_t v37 = (long long *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
        uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          *uint64_t v36 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 8;
        }
        while (v38);
        if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_41;
        }
      }
    }
    do
    {
      int v55 = *v27++;
      *v28++ = v55;
    }
    while ((unint64_t)v27 < v13);
  }
LABEL_41:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    int64_t v56 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    unint64_t v8 = v56;
  }
  if (v21 != __src)
  {
    uint64_t v41 = v8;
    memmove(v8, __src, v21 - __src);
    return v41;
  }
  return v8;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  unint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            *unint64_t v12 = v71;
            *((_DWORD *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                *unint64_t v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              *unint64_t v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              *unint64_t v12 = v75;
            }
            *((_DWORD *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          long long v76 = v12 + 1;
          long long v77 = (int *)v12[1];
          unint64_t v78 = v12 + 2;
          int v79 = v12[2];
          unint64_t v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              *unint64_t v78 = v94;
              *((_DWORD *)a2 - 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  *unint64_t v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            *long long v76 = v79;
            *unint64_t v78 = (int)v77;
            unint64_t v81 = v12;
            int64_t v82 = v12 + 1;
            uint64_t result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            unint64_t v81 = v12;
            int64_t v82 = v12 + 2;
            uint64_t result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              *unint64_t v12 = (int)v77;
              v12[1] = (int)v80;
              unint64_t v81 = v12 + 1;
              int64_t v82 = v12 + 2;
              uint64_t result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          *unint64_t v81 = v79;
          *int64_t v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *unint64_t v16 = v17;
          goto LABEL_32;
        }
        *unint64_t v16 = v20;
        *unint64_t v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          *unint64_t v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      *unint64_t v12 = v17;
      *((_DWORD *)a2 - 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *unint64_t v16 = *v12;
      *unint64_t v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        uint64_t v63 = v12 + 1;
        do
        {
          unint64_t v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      uint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        uint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          *unint64_t v12 = v67;
          *uint64_t v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      int v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v70;
      }
      a5 = 0;
      *int v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *unint64_t v16 = v17;
          *((_DWORD *)a2 - 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            *unint64_t v12 = *v16;
            *unint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          *unint64_t v12 = v18;
          *unint64_t v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *unint64_t v16 = v25;
        }
        else
        {
          *unint64_t v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v19;
      }
LABEL_24:
      uint64_t v26 = &v12[v15];
      int v29 = *(v26 - 1);
      long long v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          int *v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            int *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          int *v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          int *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      uint64_t v35 = &v12[v15];
      int v38 = v35[1];
      uint64_t v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *uint64_t v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *uint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *uint64_t v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *uint64_t v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *unint64_t v16 = v45;
        *uint64_t v36 = v43;
        uint64_t v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          int *v27 = v45;
          *uint64_t v36 = v44;
LABEL_55:
          int v47 = *v12;
          *unint64_t v12 = v43;
          *unint64_t v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        *unint64_t v12 = v45;
        *unint64_t v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      int *v27 = v43;
      *unint64_t v16 = v44;
      long long v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      *unint64_t v12 = v44;
      *unint64_t v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      uint64_t v50 = &v12[v48];
      long long v51 = a2;
      if (v48 == 1)
      {
        long long v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        uint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unint64_t v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      int v55 = &v12[v48];
      int64_t v56 = (int *)v51;
      do
      {
        *int v55 = v54;
        *int64_t v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      uint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *uint64_t v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *>(v12, v59);
      unint64_t v12 = v59 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *>(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v59 + 1;
      }
    }
  }
  unint64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      uint64_t v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        uint64_t v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              uint64_t v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          uint64_t v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          *uint64_t v88 = v89;
        }
        unint64_t v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      uint64_t v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)unint64_t v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)unint64_t v83 = v95;
      }
      unint64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *>(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        *int v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *unint64_t v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *unint64_t v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        int *v4 = v5;
        uint64_t v7 = a1;
        unint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        unint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        unint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      int *v7 = v3;
      int *v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v2google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      uint64_t v18 = a2;
      long long v19 = xmmword_23CE812E0;
      int64x2_t v20 = vdupq_n_s64(2uLL);
      long long v21 = xmmword_23CE812F0;
      uint64_t v22 = -1;
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v18);
    }
    unint64_t v7 = __clz(v5);
    uint64_t v8 = 63;
    if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v8 = 64;
    }
    unint64_t v9 = v8 - v7;
    uint64_t v18 = a2;
    *(void *)&long long v19 = v9;
    unint64_t v10 = (v8 - v7) >> 5;
    if ((v9 & 0x1F) != 0) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v12 = v9 / v11;
    *((void *)&v19 + 1) = v12;
    v20.i64[0] = v11;
    unint64_t v13 = (-1 << (v9 / v11)) & 0x100000000;
    if (v12 >= 0x40) {
      unint64_t v13 = 0;
    }
    *(void *)&long long v21 = v13;
    if ((v13 ^ 0x100000000) > v13 / v11)
    {
      unint64_t v12 = v9 / ++v11;
      *((void *)&v19 + 1) = v12;
      v20.i64[0] = v11;
      if (v12 > 0x3F)
      {
        v20.i64[1] = v11 - (v9 % v11);
        *(void *)&long long v21 = 0;
        LODWORD(v12) = 64;
        goto LABEL_22;
      }
      *(void *)&long long v21 = (-1 << (v9 / v11)) & 0x100000000;
    }
    v20.i64[1] = v11 - v9 % v11;
    if (v12 < 0x3F)
    {
      *((void *)&v21 + 1) = 0x80000000uLL >> v12 << (v12 + 1);
      unsigned int v14 = 0xFFFFFFFF >> -(char)v12;
      if (!v12) {
        unsigned int v14 = 0;
      }
      LODWORD(v22) = v14;
      if (v12 >= 0x1F) {
        unsigned int v15 = -1;
      }
      else {
        unsigned int v15 = 0xFFFFFFFF >> ~(_BYTE)v12;
      }
      goto LABEL_23;
    }
LABEL_22:
    *((void *)&v21 + 1) = 0;
    int v16 = -(int)v12;
    unsigned int v15 = -1;
    LODWORD(v22) = 0xFFFFFFFF >> v16;
LABEL_23:
    HIDWORD(v22) = v15;
    do
      unint64_t v17 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v18);
    while (v17 >= v5);
    return *a3 + v17;
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t *a1)
{
  unint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = a1[5];
    unint64_t v4 = a1[2];
    unint64_t v5 = *(void *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        do
        {
          uint64_t v16 = 4 * v5;
          unint64_t v17 = v5 + 397;
          unint64_t v5 = (v5 + 1) % 0x270;
          unsigned int v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          unsigned int v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          unint64_t v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      uint64_t v6 = a1[7] & v20;
    }
    else
    {
      uint64_t v6 = 0;
      for (uint64_t j = 0; j != v1; ++j)
      {
        do
        {
          uint64_t v8 = 4 * v5;
          unint64_t v9 = v5 + 397;
          unint64_t v5 = (v5 + 1) % 0x270;
          unsigned int v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + vgoogle::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v10;
          unsigned int v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          unint64_t v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        uint64_t v6 = (v6 << v4) + (a1[7] & v12);
      }
    }
    *(void *)(v2 + 2496) = v5;
    unint64_t v13 = a1[3];
    if (v1 < v13) {
      goto LABEL_14;
    }
    return v6;
  }
  uint64_t v6 = 0;
  unint64_t v13 = a1[3];
  if (!v13) {
    return v6;
  }
LABEL_14:
  uint64_t v21 = *a1;
  unint64_t v22 = a1[6];
  unint64_t v23 = a1[2];
  unint64_t v24 = *(void *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        uint64_t v31 = 4 * v24;
        unint64_t v32 = v24 + 397;
        unint64_t v24 = (v24 + 1) % 0x270;
        unsigned int v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        unsigned int v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        unint64_t v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    uint64_t v36 = *((_DWORD *)a1 + 15) & v35;
    *(void *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    char v25 = v23 + 1;
    do
    {
      do
      {
        uint64_t v26 = 4 * v24;
        unint64_t v27 = v24 + 397;
        unint64_t v24 = (v24 + 1) % 0x270;
        unsigned int v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        unsigned int v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        unint64_t v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      uint64_t v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(void *)(v21 + 2496) = v24;
    return v6;
  }
}

uint64_t absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    unint64_t v2 = *(void *)result;
    unint64_t v3 = *(void *)a2;
    if (*(void *)result)
    {
      unint64_t v2 = *(void *)a2;
      uint64_t v4 = result;
      uint64_t v5 = a2;
      if (v3)
      {
        long long v33 = *(_OWORD *)(result + 8);
        *(_OWORD *)(result + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v33;
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v4 = a2;
      uint64_t v5 = result;
      if ((v3 & 1) == 0)
      {
        if (v2 >> 1 <= v3 >> 1) {
          unint64_t v6 = *(void *)a2;
        }
        else {
          unint64_t v6 = *(void *)result;
        }
        if (v2 >> 1 <= v3 >> 1) {
          uint64_t v7 = a2;
        }
        else {
          uint64_t v7 = result;
        }
        if (v2 >> 1 <= v3 >> 1) {
          unint64_t v8 = *(void *)result;
        }
        else {
          unint64_t v8 = *(void *)a2;
        }
        if (v2 >> 1 <= v3 >> 1) {
          uint64_t v9 = result;
        }
        else {
          uint64_t v9 = a2;
        }
        unint64_t v10 = v8 >> 1;
        if (v8 >= 2)
        {
          if (v10 <= 1) {
            unint64_t v11 = 1;
          }
          else {
            unint64_t v11 = v8 >> 1;
          }
          if (v11 < 8
            || ((uint64_t v12 = 4 * v11 + 8, v9 + 8 < (unint64_t)(v7 + v12))
              ? (BOOL v13 = v7 + 8 >= (unint64_t)(v9 + v12))
              : (BOOL v13 = 1),
                !v13))
          {
            uint64_t v14 = 0;
LABEL_42:
            unint64_t v34 = v11 - v14;
            uint64_t v35 = 4 * v14 + 8;
            uint64_t v36 = (int *)(v7 + v35);
            int v37 = (int *)(v9 + v35);
            do
            {
              int v38 = *v37;
              *v37++ = *v36;
              *v36++ = v38;
              --v34;
            }
            while (v34);
            goto LABEL_44;
          }
          uint64_t v14 = v11 & 0x7FFFFFFFFFFFFFF8;
          unsigned int v15 = (long long *)(v9 + 24);
          uint64_t v16 = (long long *)(v7 + 24);
          uint64_t v17 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v18 = *(v15 - 1);
            long long v19 = *v15;
            long long v20 = *v16;
            *(v15 - 1) = *(v16 - 1);
            *unsigned int v15 = v20;
            *(v16 - 1) = v18;
            *uint64_t v16 = v19;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v11 != v14) {
            goto LABEL_42;
          }
        }
LABEL_44:
        unint64_t v39 = v6 >> 1;
        unint64_t v40 = (v6 >> 1) - v10;
        if (v6 >> 1 != v10)
        {
          int v41 = (int *)(v7 + 4 * v10 + 8);
          if (v40 >= 0xC && (uint64_t v42 = 4 * v10, 4 * v10 + v9 - (4 * v10 + v7) >= 0x20))
          {
            unint64_t v43 = v40 & 0xFFFFFFFFFFFFFFF8;
            v41 += v40 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v48 = v42 + 24;
            int v49 = (_OWORD *)(v9 + v42 + 24);
            uint64_t v50 = (long long *)(v7 + v48);
            unint64_t v51 = v40 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v52 = *v50;
              *(v49 - 1) = *(v50 - 1);
              *int v49 = v52;
              v49 += 2;
              v50 += 2;
              v51 -= 8;
            }
            while (v51);
            if (v40 == v43) {
              goto LABEL_51;
            }
          }
          else
          {
            unint64_t v43 = 0;
          }
          unint64_t v44 = v43 + v10 - v39;
          int v45 = (_DWORD *)(4 * v43 + 4 * v10 + v9 + 8);
          do
          {
            int v46 = *v41++;
            *v45++ = v46;
            BOOL v13 = __CFADD__(v44++, 1);
          }
          while (!v13);
        }
LABEL_51:
        unint64_t v47 = *(void *)result;
        *(void *)uint64_t result = *(void *)a2;
        *(void *)a2 = v47;
        return result;
      }
    }
    uint64_t v21 = *(void *)(v4 + 8);
    uint64_t v22 = *(void *)(v4 + 16);
    if (v2 >= 2)
    {
      uint64_t v23 = 0;
      unint64_t v24 = (int *)(v5 + 8);
      unint64_t v25 = v2 >> 1;
      if (v2 < 0x10) {
        goto LABEL_37;
      }
      if ((unint64_t)(v4 - v5) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v23 = v25 & 0x7FFFFFFFFFFFFFF8;
      v24 += v25 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v26 = (_OWORD *)(v4 + 24);
      unint64_t v27 = (long long *)(v5 + 24);
      uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *uint64_t v26 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v25 != v23)
      {
LABEL_37:
        unint64_t v30 = v25 - v23;
        uint64_t v31 = (_DWORD *)(v4 + 4 * v23 + 8);
        do
        {
          int v32 = *v24++;
          *v31++ = v32;
          --v30;
        }
        while (v30);
      }
    }
    *(void *)(v5 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v21;
    *(void *)(v5 + 16) = v22;
    goto LABEL_51;
  }
  return result;
}

void **operations_research::sat::SccGraph::operator[](uint64_t a1, int a2)
{
  int v2 = a2;
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  uint64_t v131 = (void **)(a1 + 64);
  uint64_t v4 = (unint64_t *)(**(void **)(a1 + 40) + 32 * a2);
  unint64_t v7 = *v4;
  unint64_t v6 = v4 + 1;
  unint64_t v5 = v7;
  if (v7) {
    unint64_t v6 = (void *)*v6;
  }
  unint64_t v129 = a2;
  if (v5 >= 2)
  {
    long long v132 = (void *)((char *)v6 + 4 * (v5 >> 1));
    while (1)
    {
      int v15 = *(_DWORD *)v6;
      uint64_t v17 = *(char **)(a1 + 72);
      unint64_t v16 = *(void *)(a1 + 80);
      if ((unint64_t)v17 < v16)
      {
        *(_DWORD *)uint64_t v17 = v15;
        uint64_t v18 = (uint64_t)(v17 + 4);
        goto LABEL_34;
      }
      long long v19 = (char *)*v131;
      uint64_t v20 = v17 - (unsigned char *)*v131;
      uint64_t v21 = v20 >> 2;
      unint64_t v22 = (v20 >> 2) + 1;
      if (v22 >> 62) {
LABEL_139:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v23 = v16 - (void)v19;
      if (v23 >> 1 > v22) {
        unint64_t v22 = v23 >> 1;
      }
      unint64_t v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v22;
      if (v24) {
        break;
      }
      unint64_t v25 = 0;
      uint64_t v26 = (_DWORD *)(4 * v21);
      *(_DWORD *)(4 * v21) = v15;
      uint64_t v18 = 4 * v21 + 4;
      if (v17 != v19) {
        goto LABEL_26;
      }
LABEL_32:
      *(void *)(a1 + 64) = v26;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = &v25[4 * v24];
      if (v19) {
        operator delete(v19);
      }
LABEL_34:
      *(void *)(a1 + 72) = v18;
      if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 4 * (v15 ^ 1)) - 1) > 0x7FFFFFFD) {
        goto LABEL_12;
      }
      int v37 = *(char **)(a1 + 8);
      unint64_t v36 = *(void *)(a1 + 16);
      if ((unint64_t)v37 >= v36)
      {
        int v38 = *(int **)a1;
        uint64_t v39 = (uint64_t)&v37[-*(void *)a1];
        uint64_t v40 = v39 >> 2;
        unint64_t v41 = (v39 >> 2) + 1;
        if (v41 >> 62) {
LABEL_141:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v42 = v36 - (void)v38;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          if (v43 >> 62) {
LABEL_140:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v44 = operator new(4 * v43);
          int v45 = &v44[4 * v40];
          *int v45 = v15;
          uint64_t v14 = (uint64_t)(v45 + 1);
          if (v37 == (char *)v38) {
            goto LABEL_53;
          }
LABEL_47:
          unint64_t v46 = v37 - 4 - (char *)v38;
          if (v46 < 0x2C) {
            goto LABEL_144;
          }
          if ((unint64_t)(v37 - &v44[v39]) < 0x20) {
            goto LABEL_144;
          }
          uint64_t v47 = (v46 >> 2) + 1;
          uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          int v49 = &v37[-v48];
          int v45 = (_DWORD *)((char *)v45 - v48);
          uint64_t v50 = &v44[4 * v40 - 16];
          unint64_t v51 = v37 - 16;
          uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *uint64_t v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 8;
          }
          while (v52);
          int v37 = v49;
          if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_144:
            do
            {
              int v54 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *--int v45 = v54;
            }
            while (v37 != (char *)v38);
          }
        }
        else
        {
          unint64_t v44 = 0;
          int v45 = (_DWORD *)(4 * v40);
          *(_DWORD *)(4 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v15;
          uint64_t v14 = 4 * v40 + 4;
          if (v37 != (char *)v38) {
            goto LABEL_47;
          }
        }
LABEL_53:
        *(void *)a1 = v45;
        *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
        *(void *)(a1 + 16) = &v44[4 * v43];
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_11;
      }
      *(_DWORD *)int v37 = v15;
      uint64_t v14 = (uint64_t)(v37 + 4);
LABEL_11:
      *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
LABEL_12:
      unint64_t v6 = (void *)((char *)v6 + 4);
      if (v6 == v132) {
        goto LABEL_4;
      }
    }
    if (v24 >> 62) {
      goto LABEL_140;
    }
    unint64_t v25 = operator new(4 * v24);
    uint64_t v26 = &v25[4 * v21];
    *uint64_t v26 = v15;
    uint64_t v18 = (uint64_t)(v26 + 1);
    if (v17 == v19) {
      goto LABEL_32;
    }
LABEL_26:
    unint64_t v27 = v17 - 4 - v19;
    if (v27 < 0x2C) {
      goto LABEL_145;
    }
    if ((unint64_t)(v17 - &v25[v20]) < 0x20) {
      goto LABEL_145;
    }
    uint64_t v28 = (v27 >> 2) + 1;
    uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v30 = &v17[-v29];
    uint64_t v26 = (_DWORD *)((char *)v26 - v29);
    uint64_t v31 = &v25[4 * v21 - 16];
    int v32 = v17 - 16;
    uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *uint64_t v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    uint64_t v17 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_145:
      do
      {
        int v35 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *--uint64_t v26 = v35;
      }
      while (v17 != v19);
    }
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v8 = **(void **)(a1 + 48);
  if (v129 < (*(void *)(*(void *)(a1 + 48) + 8) - v8) >> 5)
  {
    uint64_t v9 = (void *)(v8 + 32 * v129);
    unint64_t v12 = *v9;
    unint64_t v11 = (int *)(v9 + 1);
    unint64_t v10 = v12;
    if (v12) {
      unint64_t v11 = *(int **)v11;
    }
    if (v10 >= 2)
    {
      uint64_t v127 = &v11[v10 >> 1];
      int64_t v128 = (void *)(a1 + 88);
      uint64_t v126 = (std::vector<int> *)(a1 + 112);
      int v133 = v2;
      while (1)
      {
        unint64_t v56 = *v11;
        if (*(void *)(a1 + 96) <= v56)
        {
          unint64_t v57 = (int)v56 + 1;
          std::vector<BOOL>::resize((uint64_t)v128, v57, 0);
          uint64_t v58 = *(void *)(a1 + 112);
          unint64_t v59 = (*(void *)(a1 + 120) - v58) >> 2;
          if (v57 <= v59)
          {
            if (v57 < v59) {
              *(void *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v58 + 4 * v57;
            }
          }
          else
          {
            std::vector<int>::__append(v126, v57 - v59);
          }
        }
        uint64_t v60 = *(void *)(*v128 + 8 * (v56 >> 6));
        unint64_t v130 = v11;
        if ((v60 & (1 << v56)) == 0)
        {
          *(void *)(*v128 + 8 * (v56 >> 6)) = v60 | (1 << v56);
LABEL_79:
          *(_DWORD *)(*(void *)(a1 + 112) + 4 * v56) = v2;
          int v73 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v56);
          while (2)
          {
            if (v73 == -1) {
              goto LABEL_58;
            }
            if (v73 == v2) {
              goto LABEL_82;
            }
            int v75 = v73 ^ 1;
            long long v77 = *(int **)(a1 + 72);
            unint64_t v76 = *(void *)(a1 + 80);
            if ((unint64_t)v77 < v76)
            {
              *long long v77 = v75;
              uint64_t v78 = (uint64_t)(v77 + 1);
              goto LABEL_107;
            }
            int v79 = (int *)*v131;
            uint64_t v80 = (char *)v77 - (unsigned char *)*v131;
            uint64_t v81 = v80 >> 2;
            unint64_t v82 = (v80 >> 2) + 1;
            if (v82 >> 62) {
              goto LABEL_139;
            }
            uint64_t v83 = v76 - (void)v79;
            if (v83 >> 1 > v82) {
              unint64_t v82 = v83 >> 1;
            }
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v84 = v82;
            }
            if (v84)
            {
              if (v84 >> 62) {
                goto LABEL_140;
              }
              BOOL v85 = operator new(4 * v84);
              uint64_t v86 = (int *)&v85[4 * v81];
              *uint64_t v86 = v75;
              uint64_t v78 = (uint64_t)(v86 + 1);
              if (v77 != v79)
              {
LABEL_96:
                unint64_t v87 = (char *)(v77 - 1) - (char *)v79;
                if (v87 < 0x2C)
                {
                  int v2 = v133;
                  goto LABEL_104;
                }
                unint64_t v88 = (char *)v77 - &v85[v80];
                int v2 = v133;
                if (v88 < 0x20) {
                  goto LABEL_146;
                }
                uint64_t v89 = (v87 >> 2) + 1;
                uint64_t v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v91 = &v77[v90 / 0xFFFFFFFFFFFFFFFCLL];
                uint64_t v86 = (int *)((char *)v86 - v90);
                int v92 = &v85[4 * v81 - 16];
                int v93 = v77 - 4;
                uint64_t v94 = v89 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v95 = *(_OWORD *)v93;
                  *(v92 - 1) = *((_OWORD *)v93 - 1);
                  *int v92 = v95;
                  v92 -= 2;
                  v93 -= 8;
                  v94 -= 8;
                }
                while (v94);
                long long v77 = v91;
                if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_146:
                  do
                  {
LABEL_104:
                    int v96 = *--v77;
                    *--uint64_t v86 = v96;
                  }
                  while (v77 != v79);
                }
LABEL_105:
                *(void *)(a1 + 64) = v86;
                *(void *)(a1 + 72) = v78;
                *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = &v85[4 * v84];
                if (v79) {
                  operator delete(v79);
                }
LABEL_107:
                *(void *)(a1 + 72) = v78;
                if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 4 * v73) - 1) > 0x7FFFFFFD) {
                  goto LABEL_82;
                }
                int v98 = *(int **)(a1 + 8);
                unint64_t v97 = *(void *)(a1 + 16);
                if ((unint64_t)v98 < v97)
                {
                  *int v98 = v75;
                  uint64_t v74 = (uint64_t)(v98 + 1);
                  goto LABEL_81;
                }
                int v99 = *(int **)a1;
                uint64_t v100 = (uint64_t)v98 - *(void *)a1;
                uint64_t v101 = v100 >> 2;
                unint64_t v102 = (v100 >> 2) + 1;
                if (v102 >> 62) {
                  goto LABEL_141;
                }
                uint64_t v103 = v97 - (void)v99;
                if (v103 >> 1 > v102) {
                  unint64_t v102 = v103 >> 1;
                }
                if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v104 = v102;
                }
                if (v104)
                {
                  if (v104 >> 62) {
                    goto LABEL_140;
                  }
                  unint64_t v105 = operator new(4 * v104);
                  int v106 = (int *)&v105[4 * v101];
                  *int v106 = v75;
                  uint64_t v74 = (uint64_t)(v106 + 1);
                  if (v98 != v99)
                  {
LABEL_118:
                    unint64_t v107 = (char *)(v98 - 1) - (char *)v99;
                    if (v107 < 0x2C)
                    {
                      int v2 = v133;
                      goto LABEL_126;
                    }
                    unint64_t v108 = (char *)v98 - &v105[v100];
                    int v2 = v133;
                    if (v108 < 0x20) {
                      goto LABEL_147;
                    }
                    uint64_t v109 = (v107 >> 2) + 1;
                    uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v111 = &v98[v110 / 0xFFFFFFFFFFFFFFFCLL];
                    int v106 = (int *)((char *)v106 - v110);
                    uint64_t v112 = &v105[4 * v101 - 16];
                    long long v113 = v98 - 4;
                    uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v115 = *(_OWORD *)v113;
                      *(v112 - 1) = *((_OWORD *)v113 - 1);
                      _OWORD *v112 = v115;
                      v112 -= 2;
                      v113 -= 8;
                      v114 -= 8;
                    }
                    while (v114);
                    int v98 = v111;
                    if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_147:
                      do
                      {
LABEL_126:
                        int v116 = *--v98;
                        *--int v106 = v116;
                      }
                      while (v98 != v99);
                    }
LABEL_127:
                    *(void *)a1 = v106;
                    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v74;
                    *(void *)(a1 + 16) = &v105[4 * v104];
                    if (v99) {
                      operator delete(v99);
                    }
LABEL_81:
                    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v74;
LABEL_82:
                    ++v56;
                    int v73 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v56);
                    continue;
                  }
                }
                else
                {
                  unint64_t v105 = 0;
                  int v106 = (int *)(4 * v101);
                  *(_DWORD *)(4 * v101) = v75;
                  uint64_t v74 = 4 * v101 + 4;
                  if (v98 != v99) {
                    goto LABEL_118;
                  }
                }
                int v2 = v133;
                goto LABEL_127;
              }
            }
            else
            {
              BOOL v85 = 0;
              uint64_t v86 = (int *)(4 * v81);
              *(_DWORD *)(4 * v81) = v75;
              uint64_t v78 = 4 * v81 + 4;
              if (v77 != v79) {
                goto LABEL_96;
              }
            }
            break;
          }
          int v2 = v133;
          goto LABEL_105;
        }
        uint64_t v61 = v126->__begin_[v56];
        int v134 = v2;
        LODWORD(v135) = v61;
        if (v61 == v2) {
          google::MakeCheckOpString<int,int>((int)&v134, (int)&v135, "node != first_node");
        }
        if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 4 * v61) - 1) < 0x7FFFFFFE) {
          goto LABEL_79;
        }
        int v62 = v61 ^ 1;
        uint64_t v64 = *(char **)(a1 + 72);
        unint64_t v63 = *(void *)(a1 + 80);
        if ((unint64_t)v64 < v63)
        {
          *(_DWORD *)uint64_t v64 = v62;
          uint64_t v55 = (uint64_t)(v64 + 4);
          goto LABEL_57;
        }
        int v65 = (char *)*v131;
        uint64_t v66 = v64 - (unsigned char *)*v131;
        uint64_t v67 = v66 >> 2;
        unint64_t v68 = (v66 >> 2) + 1;
        if (v68 >> 62) {
          goto LABEL_139;
        }
        uint64_t v69 = v63 - (void)v65;
        if (v69 >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        unint64_t v70 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v68;
        if (v70) {
          break;
        }
        int v71 = 0;
        int v72 = (_DWORD *)(4 * v67);
        *(_DWORD *)(4 * v67) = v62;
        uint64_t v55 = 4 * v67 + 4;
        if (v64 != v65) {
          goto LABEL_130;
        }
LABEL_136:
        *(void *)(a1 + 64) = v72;
        *(void *)(a1 + 72) = v55;
        *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = &v71[4 * v70];
        if (v65) {
          operator delete(v65);
        }
LABEL_57:
        *(void *)(a1 + 72) = v55;
LABEL_58:
        unint64_t v11 = v130 + 1;
        if (v130 + 1 == v127) {
          goto LABEL_8;
        }
      }
      if (v70 >> 62) {
        goto LABEL_140;
      }
      int v71 = operator new(4 * v70);
      int v72 = &v71[4 * v67];
      *int v72 = v62;
      uint64_t v55 = (uint64_t)(v72 + 1);
      if (v64 == v65) {
        goto LABEL_136;
      }
LABEL_130:
      unint64_t v117 = v64 - 4 - v65;
      if (v117 < 0x2C) {
        goto LABEL_148;
      }
      if ((unint64_t)(v64 - &v71[v66]) < 0x20) {
        goto LABEL_148;
      }
      uint64_t v118 = (v117 >> 2) + 1;
      uint64_t v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
      int v120 = &v64[-v119];
      int v72 = (_DWORD *)((char *)v72 - v119);
      uint64_t v121 = &v71[4 * v67 - 16];
      uint64_t v122 = v64 - 16;
      uint64_t v123 = v118 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        _OWORD *v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 8;
      }
      while (v123);
      uint64_t v64 = v120;
      if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_148:
        do
        {
          int v125 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *--int v72 = v125;
        }
        while (v64 != v65);
      }
      goto LABEL_136;
    }
  }
LABEL_8:
  *(void *)(a1 + 24) += (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 2;
  return v131;
}

void sub_23CBCD658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

char *std::vector<std::vector<int>>::__emplace_back_slow_path<int *,int *>(char **a1, const void **a2, const void **a3)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  unint64_t v12 = &v11[24 * v6];
  BOOL v13 = &v11[24 * v10];
  uint64_t v14 = *a2;
  *((void *)v12 + 1) = 0;
  int v15 = (char **)(v12 + 8);
  unint64_t v16 = *a3;
  *((void *)v12 + 2) = 0;
  *(void *)unint64_t v12 = 0;
  int64_t v17 = v16 - v14;
  if (v16 != v14)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = (char *)operator new(v16 - v14);
    *(void *)unint64_t v12 = v18;
    *int v15 = v18;
    long long v19 = &v18[4 * (v17 >> 2)];
    *((void *)v12 + 2) = v19;
    memcpy(v18, v14, v17);
    *int v15 = v19;
  }
  uint64_t v20 = v12 + 24;
  uint64_t v28 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v20;
    a1[2] = v13;
  }
  else
  {
    do
    {
      uint64_t v21 = v12;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      long long v22 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v22;
      v12 -= 24;
      *((void *)v21 - 1) = *((void *)v4 + 2);
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    while (v4 != v5);
    uint64_t v23 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v20 = v28;
    *a1 = v12;
    a1[1] = v28;
    a1[2] = v13;
    if (v4 != v23)
    {
      unint64_t v24 = v4;
      do
      {
        uint64_t v26 = (void *)*((void *)v24 - 3);
        v24 -= 24;
        unint64_t v25 = v26;
        if (v26)
        {
          *((void *)v4 - 2) = v25;
          operator delete(v25);
        }
        uint64_t v4 = v24;
      }
      while (v24 != v23);
      uint64_t v4 = v23;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v20;
}

void sub_23CBCD854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *unint64_t v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void sub_23CBCF814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  int v49 = *(void **)(v47 - 136);
  if (v49)
  {
    *(void *)(v47 - 12google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v49;
    operator delete(v49);
  }
  if (v46)
  {
    *(void *)(v47 - 104) = v46;
    operator delete(v46);
    if (!v45) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  operator delete(v45);
  goto LABEL_8;
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a2, a3, a4);
  unint64_t v11 = (const void *)*a5;
  uint64_t v10 = a5[1];
  int64_t v12 = v10 - *a5;
  if (v10 == *a5)
  {
    long long v14 = 0;
    uint64_t v13 = 0;
    uint64_t v54 = a4[1];
    size_t v16 = v54 - *a4;
    if (v54 != *a4) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - *a5);
    long long v14 = &v13[4 * (v12 >> 2)];
    memcpy(v13, v11, v12);
    uint64_t v15 = a4[1];
    size_t v16 = v15 - *a4;
    if (v15 != *a4)
    {
LABEL_4:
      if ((v16 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v58 = operator new(v16);
      BOOL v17 = v14 - v13 > v16;
      operator delete(v58);
      if (v13) {
        goto LABEL_6;
      }
      goto LABEL_7;
    }
  }
  BOOL v17 = v14 != v13;
  if (v13) {
LABEL_6:
  }
    operator delete(v13);
LABEL_7:
  if (!v17) {
    return;
  }
  uint64_t v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  uint64_t v19 = a4[1];
  a4[1] = a5[1];
  a5[1] = v19;
  uint64_t v20 = a4[2];
  a4[2] = a5[2];
  a5[2] = v20;
  size_t v22 = (const void *)*a4;
  uint64_t v21 = a4[1];
  int64_t v23 = v21 - *a4;
  if (v21 == *a4)
  {
    uint64_t v25 = 0;
    BOOL v24 = 0;
    uint64_t v55 = a3[1];
    unint64_t v27 = v55 - *a3;
    if (v55 != *a3) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v23 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v24 = (char *)operator new(v21 - *a4);
    uint64_t v25 = &v24[4 * (v23 >> 2)];
    memcpy(v24, v22, v23);
    uint64_t v26 = a3[1];
    unint64_t v27 = v26 - *a3;
    if (v26 != *a3)
    {
LABEL_11:
      if ((v27 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v28 = v25 - v24 > v27;
      if (v24) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  BOOL v28 = v25 != v24;
  if (v24) {
LABEL_13:
  }
    operator delete(v24);
LABEL_14:
  if (!v28) {
    return;
  }
  uint64_t v29 = *a3;
  *a3 = *a4;
  *a4 = v29;
  uint64_t v30 = a3[1];
  a3[1] = a4[1];
  a4[1] = v30;
  uint64_t v31 = a3[2];
  a3[2] = a4[2];
  a4[2] = v31;
  int64_t v33 = (const void *)*a3;
  uint64_t v32 = a3[1];
  int64_t v34 = v32 - *a3;
  if (v32 == *a3)
  {
    unint64_t v36 = 0;
    int v35 = 0;
    uint64_t v56 = a2[1];
    unint64_t v38 = v56 - *a2;
    if (v56 != *a2) {
      goto LABEL_18;
    }
  }
  else
  {
    if (v34 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v35 = (char *)operator new(v32 - *a3);
    unint64_t v36 = &v35[4 * (v34 >> 2)];
    memcpy(v35, v33, v34);
    uint64_t v37 = a2[1];
    unint64_t v38 = v37 - *a2;
    if (v37 != *a2)
    {
LABEL_18:
      if ((v38 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v39 = v36 - v35 > v38;
      if (v35) {
        goto LABEL_20;
      }
      goto LABEL_21;
    }
  }
  BOOL v39 = v36 != v35;
  if (v35) {
LABEL_20:
  }
    operator delete(v35);
LABEL_21:
  if (!v39) {
    return;
  }
  uint64_t v40 = *a2;
  *a2 = *a3;
  *a3 = v40;
  uint64_t v41 = a2[1];
  a2[1] = a3[1];
  a3[1] = v41;
  uint64_t v42 = a2[2];
  a2[2] = a3[2];
  a3[2] = v42;
  unint64_t v44 = (const void *)*a2;
  uint64_t v43 = a2[1];
  int64_t v45 = v43 - *a2;
  if (v43 == *a2)
  {
    uint64_t v47 = 0;
    BOOL v46 = 0;
    uint64_t v57 = a1[1];
    unint64_t v49 = v57 - *a1;
    if (v57 != *a1) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v45 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v46 = (char *)operator new(v43 - *a2);
    uint64_t v47 = &v46[4 * (v45 >> 2)];
    memcpy(v46, v44, v45);
    uint64_t v48 = a1[1];
    unint64_t v49 = v48 - *a1;
    if (v48 != *a1)
    {
LABEL_25:
      if ((v49 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v50 = v47 - v46 > v49;
      if (!v46) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  BOOL v50 = v47 != v46;
  if (v46) {
LABEL_27:
  }
    operator delete(v46);
LABEL_28:
  if (v50)
  {
    uint64_t v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    uint64_t v52 = a1[1];
    a1[1] = a2[1];
    a2[1] = v52;
    uint64_t v53 = a1[2];
    a1[2] = a2[2];
    a2[2] = v53;
  }
}

void sub_23CBD0218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v7 = (const void *)*a2;
  uint64_t v6 = a2[1];
  int64_t v8 = v6 - *a2;
  if (v6 == *a2)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v47 = a1[1];
    size_t v12 = v47 - *a1;
    if (v47 != *a1) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v6 - *a2);
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, v8);
    uint64_t v11 = a1[1];
    size_t v12 = v11 - *a1;
    if (v11 != *a1)
    {
LABEL_4:
      if ((v12 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v64 = operator new(v12);
      BOOL v13 = v10 - v9 > v12;
      operator delete(v64);
      if (v9) {
        goto LABEL_6;
      }
      goto LABEL_7;
    }
  }
  BOOL v13 = v10 != v9;
  if (v9) {
LABEL_6:
  }
    operator delete(v9);
LABEL_7:
  if (!v13)
  {
    uint64_t v26 = (const void *)*a3;
    uint64_t v25 = a3[1];
    int64_t v27 = v25 - *a3;
    if (v25 == *a3)
    {
      uint64_t v29 = 0;
      BOOL v28 = 0;
      uint64_t v61 = a2[1];
      unint64_t v31 = v61 - *a2;
      if (v61 != *a2) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v27 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v28 = (char *)operator new(v25 - *a3);
      uint64_t v29 = &v28[4 * (v27 >> 2)];
      memcpy(v28, v26, v27);
      uint64_t v30 = a2[1];
      unint64_t v31 = v30 - *a2;
      if (v30 != *a2)
      {
LABEL_19:
        if ((v31 & 0x8000000000000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        BOOL v32 = v29 - v28 > v31;
        if (v28) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    BOOL v32 = v29 != v28;
    if (v28) {
LABEL_21:
    }
      operator delete(v28);
LABEL_22:
    if (!v32) {
      return;
    }
    uint64_t v33 = *a2;
    *a2 = *a3;
    *a3 = v33;
    uint64_t v34 = a2[1];
    a2[1] = a3[1];
    a3[1] = v34;
    unint64_t v36 = a2 + 2;
    uint64_t v35 = a2[2];
    a2[2] = a3[2];
    a3[2] = v35;
    unint64_t v38 = (const void *)*a2;
    uint64_t v37 = a2[1];
    int64_t v39 = v37 - *a2;
    if (v37 == *a2)
    {
      uint64_t v41 = 0;
      uint64_t v40 = 0;
      uint64_t v62 = a1[1];
      unint64_t v43 = v62 - *a1;
      if (v62 != *a1) {
        goto LABEL_26;
      }
    }
    else
    {
      if (v39 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = (char *)operator new(v37 - *a2);
      uint64_t v41 = &v40[4 * (v39 >> 2)];
      memcpy(v40, v38, v39);
      uint64_t v42 = a1[1];
      unint64_t v43 = v42 - *a1;
      if (v42 != *a1)
      {
LABEL_26:
        if ((v43 & 0x8000000000000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        BOOL v44 = v41 - v40 > v43;
        if (!v40) {
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v40);
LABEL_29:
        if (!v44) {
          return;
        }
        uint64_t v45 = *a1;
        *a1 = *a2;
        *a2 = v45;
        uint64_t v46 = a1[1];
        a1[1] = a2[1];
        a2[1] = v46;
        int64_t v23 = a1 + 2;
        goto LABEL_43;
      }
    }
    BOOL v44 = v41 != v40;
    if (!v40) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v15 = (const void *)*a3;
  uint64_t v14 = a3[1];
  int64_t v16 = v14 - *a3;
  if (v14 == *a3)
  {
    uint64_t v18 = 0;
    BOOL v17 = 0;
    uint64_t v60 = a2[1];
    unint64_t v20 = v60 - *a2;
    if (v60 != *a2) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v16 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v17 = (char *)operator new(v14 - *a3);
    uint64_t v18 = &v17[4 * (v16 >> 2)];
    memcpy(v17, v15, v16);
    uint64_t v19 = a2[1];
    unint64_t v20 = v19 - *a2;
    if (v19 != *a2)
    {
LABEL_11:
      if ((v20 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v21 = v18 - v17 > v20;
      if (v17) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  BOOL v21 = v18 != v17;
  if (v17) {
LABEL_13:
  }
    operator delete(v17);
LABEL_14:
  int64_t v23 = a1 + 2;
  uint64_t v22 = *a1;
  if (!v21)
  {
    *a1 = *a2;
    *a2 = v22;
    uint64_t v48 = a1[1];
    a1[1] = a2[1];
    a2[1] = v48;
    int64_t v23 = a2 + 2;
    uint64_t v49 = a1[2];
    a1[2] = a2[2];
    a2[2] = v49;
    uint64_t v51 = (const void *)*a3;
    uint64_t v50 = a3[1];
    int64_t v52 = v50 - *a3;
    if (v50 == *a3)
    {
      uint64_t v54 = 0;
      uint64_t v53 = 0;
      uint64_t v63 = a2[1];
      unint64_t v56 = v63 - *a2;
      if (v63 != *a2) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v52 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = (char *)operator new(v50 - *a3);
      uint64_t v54 = &v53[4 * (v52 >> 2)];
      memcpy(v53, v51, v52);
      uint64_t v55 = a2[1];
      unint64_t v56 = v55 - *a2;
      if (v55 != *a2)
      {
LABEL_37:
        if ((v56 & 0x8000000000000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        BOOL v57 = v54 - v53 > v56;
        if (!v53) {
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v53);
LABEL_40:
        if (!v57) {
          return;
        }
        uint64_t v58 = *a2;
        *a2 = *a3;
        *a3 = v58;
        uint64_t v24 = a2[1];
        a2[1] = a3[1];
        goto LABEL_42;
      }
    }
    BOOL v57 = v54 != v53;
    if (!v53) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  *a1 = *a3;
  *a3 = v22;
  uint64_t v24 = a1[1];
  a1[1] = a3[1];
LABEL_42:
  a3[1] = v24;
  unint64_t v36 = a3 + 2;
LABEL_43:
  uint64_t v59 = *v23;
  *int64_t v23 = *v36;
  *unint64_t v36 = v59;
}

void sub_23CBD0794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(uint64_t *a1, uint64_t *a2)
{
  int v2 = a2;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v7 = (unsigned char *)*(a2 - 3);
      uint64_t v6 = (unsigned char *)*(a2 - 2);
      int64_t v8 = v6 - v7;
      if (v6 == v7)
      {
        uint64_t v10 = 0;
        uint64_t v9 = 0;
        uint64_t v46 = a1[1];
        unint64_t v12 = v46 - *a1;
        if (v46 != *a1) {
          goto LABEL_5;
        }
      }
      else
      {
        if (v8 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = (char *)operator new(v6 - v7);
        uint64_t v10 = &v9[4 * (v8 >> 2)];
        memcpy(v9, v7, v8);
        uint64_t v11 = a1[1];
        unint64_t v12 = v11 - *a1;
        if (v11 != *a1)
        {
LABEL_5:
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          BOOL v13 = v10 - v9 > v12;
          if (!v9) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
      BOOL v13 = v10 != v9;
      if (!v9)
      {
LABEL_8:
        if (v13)
        {
          uint64_t v14 = *a1;
          *a1 = *(v2 - 3);
          *(v2 - 3) = v14;
          uint64_t v15 = a1[1];
          a1[1] = *(v2 - 2);
          *(v2 - 2) = v15;
          uint64_t v16 = a1[2];
          a1[2] = *(v2 - 1);
          *(v2 - 1) = v16;
        }
        return 1;
      }
LABEL_7:
      operator delete(v9);
      goto LABEL_8;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      BOOL v17 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a1 + 3, a1 + 6);
      uint64_t v18 = a1 + 9;
      if (a1 + 9 == v2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      uint64_t v47 = v2;
LABEL_17:
      uint64_t v24 = (const void *)*v18;
      uint64_t v23 = v18[1];
      int64_t v25 = v23 - *v18;
      if (v23 == *v18)
      {
        int64_t v27 = 0;
        uint64_t v26 = 0;
        size_t v28 = v17[1] - *v17;
        if (v28) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v25 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - *v18);
        int64_t v27 = &v26[4 * (v25 >> 2)];
        memcpy(v26, v24, v25);
        size_t v28 = v17[1] - *v17;
        if (v28)
        {
LABEL_20:
          if ((v28 & 0x8000000000000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v53 = operator new(v28);
          BOOL v29 = v27 - v26 > v28;
          operator delete(v53);
          if (v26) {
            goto LABEL_22;
          }
          goto LABEL_23;
        }
      }
      BOOL v29 = v27 != v26;
      if (v26) {
LABEL_22:
      }
        operator delete(v26);
LABEL_23:
      if (!v29) {
        goto LABEL_16;
      }
      int v49 = v20;
      uint64_t v30 = (unsigned char *)*v18;
      unint64_t v31 = (unsigned char *)v18[1];
      uint64_t v48 = v18[2];
      v18[1] = 0;
      void v18[2] = 0;
      *uint64_t v18 = 0;
      uint64_t v50 = v19;
      uint64_t v51 = v18;
      uint64_t v32 = v19;
      uint64_t v33 = (char *)a1 + v19;
      uint64_t v34 = (_OWORD *)((char *)a1 + v19 + 72);
      break;
  }
  while (1)
  {
    uint64_t v35 = (void **)(v33 + 48);
    *uint64_t v34 = *((_OWORD *)v33 + 3);
    *((void *)v33 + 11) = *((void *)v33 + 8);
    *((void *)v33 + 6) = 0;
    *((void *)v33 + 7) = 0;
    *((void *)v33 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    if (v32 == -48)
    {
      BOOL v21 = a1 + 1;
      uint64_t v22 = (uint64_t)a1;
      goto LABEL_15;
    }
    if (v31 == v30)
    {
      uint64_t v37 = 0;
      unint64_t v36 = 0;
      uint64_t v44 = *(uint64_t *)((char *)a1 + v32 + 24);
      uint64_t v43 = *(uint64_t *)((char *)a1 + v32 + 32);
      size_t v40 = v43 - v44;
      if (v43 == v44) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v31 - v30 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v36 = (char *)operator new(v31 - v30);
      uint64_t v37 = &v36[4 * ((v31 - v30) >> 2)];
      memcpy(v36, v30, v31 - v30);
      uint64_t v39 = *(uint64_t *)((char *)a1 + v32 + 24);
      uint64_t v38 = *(uint64_t *)((char *)a1 + v32 + 32);
      size_t v40 = v38 - v39;
      if (v38 == v39)
      {
LABEL_37:
        BOOL v41 = v37 != v36;
        if (v36) {
          goto LABEL_32;
        }
        goto LABEL_33;
      }
    }
    if ((v40 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v52 = operator new(v40);
    BOOL v41 = v37 - v36 > v40;
    operator delete(v52);
    if (v36) {
LABEL_32:
    }
      operator delete(v36);
LABEL_33:
    if (!v41) {
      break;
    }
    uint64_t v42 = *v35;
    v32 -= 24;
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (_OWORD *)((char *)a1 + v32 + 72);
    if (*v35)
    {
      *((void *)v33 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v42;
      operator delete(v42);
      *(void *)uint64_t v34 = 0;
      *(uint64_t *)((char *)a1 + v32 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
      *(uint64_t *)((char *)a1 + v32 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    }
  }
  uint64_t v22 = (uint64_t)a1 + v32 + 48;
  uint64_t v45 = *(void **)v22;
  BOOL v21 = (uint64_t *)((char *)a1 + v32 + 56);
  if (*(void *)v22)
  {
    void *v21 = v45;
    operator delete(v45);
    *(void *)uint64_t v22 = 0;
    *(uint64_t *)((char *)a1 + v32 + 56) = 0;
    *(uint64_t *)((char *)a1 + v32 + 64) = 0;
  }
LABEL_15:
  int v2 = v47;
  uint64_t v19 = v50;
  uint64_t v18 = v51;
  *(void *)uint64_t v22 = v30;
  void *v21 = v31;
  *(void *)(v22 + 16) = v48;
  int v20 = v49 + 1;
  if (v49 == 7) {
    return v51 + 3 == v47;
  }
LABEL_16:
  BOOL v17 = v18;
  v19 += 24;
  v18 += 3;
  if (v18 != v2) {
    goto LABEL_17;
  }
  return 1;
}

void sub_23CBD0D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  BOOL v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(void *)(v27 - 12google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v29;
    operator delete(v29);
  }
  if (v26) {
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a2, a3);
  uint64_t v9 = (const void *)*a4;
  uint64_t v8 = a4[1];
  int64_t v10 = v8 - *a4;
  if (v8 == *a4)
  {
    unint64_t v12 = 0;
    uint64_t v11 = 0;
    uint64_t v41 = a3[1];
    unint64_t v14 = v41 - *a3;
    if (v41 != *a3) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v10 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(v8 - *a4);
    unint64_t v12 = &v11[4 * (v10 >> 2)];
    memcpy(v11, v9, v10);
    uint64_t v13 = a3[1];
    unint64_t v14 = v13 - *a3;
    if (v13 != *a3)
    {
LABEL_4:
      if ((v14 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v15 = v12 - v11 > v14;
      if (v11) {
        goto LABEL_6;
      }
      goto LABEL_7;
    }
  }
  BOOL v15 = v12 != v11;
  if (v11) {
LABEL_6:
  }
    operator delete(v11);
LABEL_7:
  if (!v15) {
    return;
  }
  uint64_t v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  uint64_t v17 = a3[1];
  a3[1] = a4[1];
  a4[1] = v17;
  uint64_t v18 = a3[2];
  a3[2] = a4[2];
  a4[2] = v18;
  int v20 = (const void *)*a3;
  uint64_t v19 = a3[1];
  int64_t v21 = v19 - *a3;
  if (v19 == *a3)
  {
    uint64_t v23 = 0;
    uint64_t v22 = 0;
    uint64_t v42 = a2[1];
    unint64_t v25 = v42 - *a2;
    if (v42 != *a2) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v21 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (char *)operator new(v19 - *a3);
    uint64_t v23 = &v22[4 * (v21 >> 2)];
    memcpy(v22, v20, v21);
    uint64_t v24 = a2[1];
    unint64_t v25 = v24 - *a2;
    if (v24 != *a2)
    {
LABEL_11:
      if ((v25 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v26 = v23 - v22 > v25;
      if (v22) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  BOOL v26 = v23 != v22;
  if (v22) {
LABEL_13:
  }
    operator delete(v22);
LABEL_14:
  if (!v26) {
    return;
  }
  uint64_t v27 = *a2;
  *a2 = *a3;
  *a3 = v27;
  uint64_t v28 = a2[1];
  a2[1] = a3[1];
  a3[1] = v28;
  uint64_t v29 = a2[2];
  a2[2] = a3[2];
  a3[2] = v29;
  unint64_t v31 = (const void *)*a2;
  uint64_t v30 = a2[1];
  int64_t v32 = v30 - *a2;
  if (v30 == *a2)
  {
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    uint64_t v43 = a1[1];
    unint64_t v36 = v43 - *a1;
    if (v43 != *a1) {
      goto LABEL_18;
    }
  }
  else
  {
    if (v32 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = (char *)operator new(v30 - *a2);
    uint64_t v34 = &v33[4 * (v32 >> 2)];
    memcpy(v33, v31, v32);
    uint64_t v35 = a1[1];
    unint64_t v36 = v35 - *a1;
    if (v35 != *a1)
    {
LABEL_18:
      if ((v36 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      BOOL v37 = v34 - v33 > v36;
      if (!v33) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  BOOL v37 = v34 != v33;
  if (v33) {
LABEL_20:
  }
    operator delete(v33);
LABEL_21:
  if (v37)
  {
    uint64_t v38 = *a1;
    *a1 = *a2;
    *a2 = v38;
    uint64_t v39 = a1[1];
    a1[1] = a2[1];
    a2[1] = v39;
    uint64_t v40 = a1[2];
    a1[2] = a2[2];
    a2[2] = v40;
  }
}

void sub_23CBD10D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (v22) {
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::prepare_insert(unint64_t *a1, unint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[3];
  unint64_t v6 = ((*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  unint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v7 = v13;
      unint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::find_first_non_full(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = ((a3 >> 7) ^ (a1 >> 12)) & a2;
  unint64_t v4 = *(void *)(a1 + v3) & (~*(void *)(a1 + v3) << 7) & 0x8080808080808080;
  if (!v4)
  {
    uint64_t v5 = 0;
    do
    {
      v5 += 8;
      unint64_t v3 = (v5 + v3) & a2;
      unint64_t v4 = *(void *)(a1 + v3) & (~*(void *)(a1 + v3) << 7) & 0x8080808080808080;
    }
    while (!v4);
  }
  return (v3 + (__clz(__rbit64(v4)) >> 3)) & a2;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    return;
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (v6)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      if ((v13[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v19 = (int **)&v5[24 * (void)v13];
        int v20 = *v19;
        int64_t v21 = v19[1];
        if (*v19 == v21)
        {
          unint64_t v23 = 0;
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v23 = 0;
          do
          {
            uint64_t v24 = *v20++;
            uint64_t v25 = (v22 + 0x1F73E299748A907ELL + v24) ^ (v23 >> 43);
            unint64_t v26 = (v22 - v25 - 0x1F73E299748A907ELL) ^ (v25 << 9);
            unint64_t v27 = (v23 - v25 - v26) ^ (v26 >> 8);
            unint64_t v28 = (v25 - v26 - v27) ^ (v27 >> 38);
            unint64_t v29 = (v26 - v27 - v28) ^ (v28 << 23);
            unint64_t v30 = (v27 - v28 - v29) ^ (v29 >> 5);
            unint64_t v31 = (v28 - v29 - v30) ^ (v30 >> 35);
            unint64_t v32 = (v29 - v30 - v31) ^ (v31 << 49);
            unint64_t v33 = (v30 - v31 - v32) ^ (v32 >> 11);
            unint64_t v34 = (v31 - v32 - v33) ^ (v33 >> 12);
            unint64_t v23 = (v33 - v34 - ((v32 - v33 - v34) ^ (v34 << 18))) ^ (((v32 - v33 - v34) ^ (v34 << 18)) >> 22);
            uint64_t v22 = -(uint64_t)v23;
          }
          while (v20 != v21);
        }
        uint64_t v35 = *a1;
        unint64_t v36 = a1[3];
        unint64_t v37 = (((unint64_t)*a1 >> 12) ^ (v23 >> 7)) & (unint64_t)v36;
        unint64_t v38 = *(void *)&(*a1)[v37] & (~*(void *)&(*a1)[v37] << 7) & 0x8080808080808080;
        if (v38)
        {
          uint64_t v15 = 0;
        }
        else
        {
          uint64_t v15 = 0;
          do
          {
            v15 += 8;
            unint64_t v37 = (v15 + v37) & (unint64_t)v36;
            unint64_t v38 = *(void *)&v35[v37] & (~*(void *)&v35[v37] << 7) & 0x8080808080808080;
          }
          while (!v38);
        }
        unint64_t v16 = (v37 + (__clz(__rbit64(v38)) >> 3)) & (unint64_t)v36;
        v14 += v15;
        char v17 = v23 & 0x7F;
        v35[v16] = v17;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
        uint64_t v18 = &a1[1][24 * v16];
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *((void *)v18 + 2) = *(void *)&v5[24 * (void)v13 + 16];
        *uint64_t v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
      }
      ++v13;
    }
    while (v13 != v6);
    operator delete(v4);
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v39 = a1[4];
  if (v39)
  {
    *((void *)v39 + 4) = v14 >> 3;
    *((void *)v39 + 2) = 0;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_34;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v52 = *(void *)(result + 32);
    if (!v52) {
      return result;
    }
LABEL_31:
    *(void *)(v52 + 32) = v15 >> 3;
    *(void *)(v52 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v18 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      uint64_t v19 = *(void *)(result + 8) + 24 * v14;
      int64_t v21 = *(int **)v19;
      int v20 = *(int **)(v19 + 8);
      if (*(int **)v19 == v20)
      {
        unint64_t v23 = 0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        do
        {
          uint64_t v24 = *v21++;
          uint64_t v25 = (v22 + 0x1F73E299748A907ELL + v24) ^ (v23 >> 43);
          unint64_t v26 = (v22 - v25 - 0x1F73E299748A907ELL) ^ (v25 << 9);
          unint64_t v27 = (v23 - v25 - v26) ^ (v26 >> 8);
          unint64_t v28 = (v25 - v26 - v27) ^ (v27 >> 38);
          unint64_t v29 = (v26 - v27 - v28) ^ (v28 << 23);
          unint64_t v30 = (v27 - v28 - v29) ^ (v29 >> 5);
          unint64_t v31 = (v28 - v29 - v30) ^ (v30 >> 35);
          unint64_t v32 = (v29 - v30 - v31) ^ (v31 << 49);
          unint64_t v33 = (v30 - v31 - v32) ^ (v32 >> 11);
          unint64_t v34 = (v31 - v32 - v33) ^ (v33 >> 12);
          unint64_t v23 = (v33 - v34 - ((v32 - v33 - v34) ^ (v34 << 18))) ^ (((v32 - v33 - v34) ^ (v34 << 18)) >> 22);
          uint64_t v22 = -(uint64_t)v23;
        }
        while (v21 != v20);
      }
      unint64_t v35 = ((v23 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      uint64_t v36 = 0;
      unint64_t v37 = *(uint64_t *)((unsigned char *)v18->i64 + v35) & (~*(uint64_t *)((char *)v18->i64 + v35) << 7) & 0x8080808080808080;
      if (v37)
      {
        unint64_t v16 = ((v23 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      }
      else
      {
        unint64_t v16 = ((v23 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
        do
        {
          v36 += 8;
          unint64_t v16 = (v36 + v16) & v13;
          unint64_t v37 = *(uint64_t *)((unsigned char *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
        }
        while (!v37);
      }
      unint64_t v17 = (v16 + (__clz(__rbit64(v37)) >> 3)) & v13;
      v15 += v36;
      if ((((v17 - v35) ^ (v14 - v35)) & v13) > 7)
      {
        int v38 = v18->u8[v17];
        v18->i8[v17] = v23 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v17 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
        uint64_t v39 = *(void *)(result + 8);
        if (v38 == 128)
        {
          uint64_t v40 = (void *)(v39 + 24 * v17);
          uint64_t v41 = v39 + 24 * v14;
          *uint64_t v40 = 0;
          v40[1] = 0;
          v40[2] = 0;
          *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
          v40[2] = *(void *)(v41 + 16);
          *(void *)uint64_t v41 = 0;
          *(void *)(v41 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
          *(void *)(v41 + 16) = 0;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v42 = (long long *)(v39 + 24 * v14);
          uint64_t v43 = *((void *)v42 + 2);
          long long v44 = *v42;
          *((void *)v42 + 1) = 0;
          *((void *)v42 + 2) = 0;
          *(void *)uint64_t v42 = 0;
          uint64_t v45 = *(void *)(result + 8);
          uint64_t v46 = (void *)(v45 + 24 * v14);
          uint64_t v47 = v45 + 24 * v17;
          *uint64_t v46 = 0;
          v46[1] = 0;
          v46[2] = 0;
          *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
          v46[2] = *(void *)(v47 + 16);
          *(void *)uint64_t v47 = 0;
          *(void *)(v47 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
          *(void *)(v47 + 16) = 0;
          uint64_t v48 = *(void *)(result + 8) + 24 * v17;
          *(_OWORD *)uint64_t v48 = v44;
          *(void *)(v48 + 16) = v43;
          --v14;
        }
      }
      else
      {
        v18->i8[v14] = v23 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v49 = v14 - (v14 >> 3);
  BOOL v50 = v14 == 7;
  uint64_t v51 = 6;
  if (!v50) {
    uint64_t v51 = v49;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v51 - *(void *)(result + 16);
  uint64_t v52 = *(void *)(result + 32);
  if (v52) {
    goto LABEL_31;
  }
  return result;
}

void std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    int8x16_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        unint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              long long v77 = (long long *)(v6 + 3);
              size_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *size_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      size_t v91 = operator new(0xFF0uLL);
      std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v91);
      return;
    }
    size_t v91 = operator new(0xFF0uLL);
    std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    int8x16_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        unint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              BOOL v85 = (long long *)(v41 + 3);
              BOOL v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *BOOL v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0xFF0uLL);
  unint64_t v27 = &v25[8 * v21];
  unint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      unint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            BOOL v64 = &v60[8 * v61];
            int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            BOOL v64 = &v60[8 * v61];
            int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v64 = &v53[v68];
            int v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)BOOL v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          BOOL v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_23CBD1F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23CBD1F70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CBD1F84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CBD1F9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BooleanXorPropagator::Propagate(operations_research::sat::BooleanXorPropagator *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    char v6 = 0;
LABEL_46:
    if (*((unsigned char *)this + 32) == (v6 & 1)) {
      return 1;
    }
    uint64_t v36 = (void *)*((void *)this + 8);
    v36[18] = 0;
    BOOL v37 = (char *)v36[12];
    BOOL v64 = (void **)(v36 + 12);
    v36[13] = v37;
    if (*((void *)this + 2) == v3) {
      return 0;
    }
    unint64_t v38 = 0;
    while (1)
    {
      int v40 = *(_DWORD *)(v3 + 4 * v38) ^ (((*(void *)(*(void *)(*((void *)this + 8) + 24)
                                                     + (((unint64_t)*(int *)(v3 + 4 * v38) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_DWORD *)(v3 + 4 * v38) & 0x3F ^ 1u)) & 1) == 0);
      unint64_t v41 = v36[14];
      if ((unint64_t)v37 >= v41) {
        break;
      }
      *(_DWORD *)BOOL v37 = v40;
      uint64_t v39 = (uint64_t)(v37 + 4);
LABEL_50:
      v36[13] = v39;
      ++v38;
      uint64_t v3 = *((void *)this + 1);
      BOOL v37 = (char *)v39;
      if (v38 >= (*((void *)this + 2) - v3) >> 2) {
        return 0;
      }
    }
    unint64_t v42 = (char *)*v64;
    uint64_t v43 = v37 - (unsigned char *)*v64;
    uint64_t v44 = v43 >> 2;
    unint64_t v45 = (v43 >> 2) + 1;
    if (v45 >> 62) {
LABEL_80:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v46 = v41 - (void)v42;
    if (v46 >> 1 > v45) {
      unint64_t v45 = v46 >> 1;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47)
    {
      if (v47 >> 62) {
LABEL_81:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      unint64_t v48 = operator new(4 * v47);
      uint64_t v49 = (int *)&v48[4 * v44];
      *uint64_t v49 = v40;
      uint64_t v39 = (uint64_t)(v49 + 1);
      if (v37 == v42) {
        goto LABEL_75;
      }
    }
    else
    {
      unint64_t v48 = 0;
      uint64_t v49 = (int *)(4 * v44);
      *(_DWORD *)(4 * v44) = v40;
      uint64_t v39 = 4 * v44 + 4;
      if (v37 == v42) {
        goto LABEL_75;
      }
    }
    unint64_t v50 = v37 - 4 - v42;
    if (v50 >= 0xBC)
    {
      if (&v48[v43 - 4 - (v50 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v43 - 4])
      {
        uint64_t v51 = v37;
      }
      else if (&v37[-(v50 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v37 - 4)
      {
        uint64_t v51 = v37;
      }
      else if ((unint64_t)(v37 - v48 - v43) >= 0x20)
      {
        uint64_t v52 = (v50 >> 2) + 1;
        uint64_t v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v51 = &v37[-v53];
        uint64_t v49 = (int *)((char *)v49 - v53);
        uint64_t v54 = &v48[4 * v44 - 16];
        uint64_t v55 = v37 - 16;
        uint64_t v56 = v52 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *uint64_t v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_75:
          v36[12] = v49;
          v36[13] = v39;
          v36[14] = &v48[4 * v47];
          if (v42) {
            operator delete(v42);
          }
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v51 = v37;
      }
    }
    else
    {
      uint64_t v51 = v37;
    }
    do
    {
      int v58 = *((_DWORD *)v51 - 1);
      v51 -= 4;
      *--uint64_t v49 = v58;
    }
    while (v51 != v42);
    goto LABEL_75;
  }
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = v4 >> 2;
  if ((unint64_t)(v4 >> 2) <= 1) {
    uint64_t v7 = 1;
  }
  unsigned int v8 = -1;
  do
  {
    int v9 = *(_DWORD *)(v3 + 4 * v5);
    unint64_t v10 = *(void *)(*(void *)(*((void *)this + 8) + 24) + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
    char v11 = v9 & 0x3F;
    if (((v10 >> (v11 ^ 1u)) & 1) == 0)
    {
      if ((v10 >> v11))
      {
        v6 ^= 1u;
      }
      else
      {
        if (v8 != -1) {
          return 1;
        }
        unsigned int v8 = v5;
      }
    }
    ++v5;
  }
  while (v7 != v5);
  if (v8 == -1) {
    goto LABEL_46;
  }
  signed int v60 = v8;
  char v61 = v6;
  unint64_t v12 = 0;
  uint64_t v13 = (char *)*((void *)this + 5);
  *((void *)this + 6) = v13;
  uint64_t v14 = v8;
  uint64_t v62 = v8;
  unint64_t v63 = (void **)((char *)this + 40);
  do
  {
    if (v12 != v14)
    {
      unint64_t v16 = *((void *)this + 7);
      int v17 = *(_DWORD *)(v3 + 4 * v12) ^ (((*(void *)(*(void *)(*((void *)this + 8) + 24)
                                                     + (((unint64_t)*(int *)(v3 + 4 * v12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_DWORD *)(v3 + 4 * v12) & 0x3F ^ 1u)) & 1) == 0);
      if ((unint64_t)v13 < v16)
      {
        *(_DWORD *)uint64_t v13 = v17;
        uint64_t v15 = (uint64_t)(v13 + 4);
LABEL_14:
        *((void *)this + 6) = v15;
        uint64_t v13 = (char *)v15;
        goto LABEL_15;
      }
      uint64_t v18 = (char *)*v63;
      uint64_t v19 = v13 - (unsigned char *)*v63;
      uint64_t v20 = v19 >> 2;
      unint64_t v21 = (v19 >> 2) + 1;
      if (v21 >> 62) {
        goto LABEL_80;
      }
      uint64_t v22 = v16 - (void)v18;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 62) {
          goto LABEL_81;
        }
        uint64_t v24 = v2;
        uint64_t v25 = operator new(4 * v23);
        uint64_t v2 = v24;
        unint64_t v26 = (int *)&v25[4 * v20];
        *unint64_t v26 = v17;
        uint64_t v15 = (uint64_t)(v26 + 1);
        if (v13 == v18) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (int *)(4 * v20);
        *(_DWORD *)(4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v17;
        uint64_t v15 = 4 * v20 + 4;
        if (v13 == v18) {
          goto LABEL_32;
        }
      }
      unint64_t v27 = v13 - 4 - v18;
      if (v27 >= 0xBC)
      {
        if (&v25[v19 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v19 - 4])
        {
          unint64_t v28 = v13;
        }
        else if (&v13[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4)
        {
          unint64_t v28 = v13;
        }
        else if ((unint64_t)(v13 - v25 - v19) >= 0x20)
        {
          uint64_t v30 = (v27 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v28 = &v13[-v31];
          unint64_t v26 = (int *)((char *)v26 - v31);
          unint64_t v32 = &v25[4 * v20 - 16];
          uint64_t v33 = v13 - 16;
          uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            _OWORD *v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 8;
          }
          while (v34);
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_32:
            *((void *)this + 5) = v26;
            *((void *)this + 6) = v15;
            *((void *)this + 7) = &v25[4 * v23];
            if (v18)
            {
              operator delete(v18);
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
            }
            uint64_t v14 = v62;
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v28 = v13;
        }
      }
      else
      {
        unint64_t v28 = v13;
      }
      do
      {
        int v29 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--unint64_t v26 = v29;
      }
      while (v28 != v18);
      goto LABEL_32;
    }
LABEL_15:
    ++v12;
  }
  while (v12 < (v2 - v3) >> 2);
  operations_research::sat::IntegerTrail::EnqueueLiteral(*((void *)this + 9), *(_DWORD *)(v3 + 4 * v60) ^ (*((unsigned char *)this + 32) == (v61 & 1)), *((char **)this + 5), (uint64_t)&v13[-*((void *)this + 5)] >> 2, 0, 0);
  return 1;
}

void operations_research::sat::BooleanXorPropagator::RegisterWith(operations_research::sat::BooleanXorPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  char v6 = (unsigned int *)*((void *)this + 1);
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  if (v6 != v5)
  {
    unsigned int v7 = v4;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, *v6, v7, 0xFFFFFFFFLL);
      unsigned int v8 = *v6++;
      operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v8 ^ 1, v7, 0xFFFFFFFFLL);
    }
    while (v6 != v5);
  }
}

uint64_t operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, size_t __sz, const void *a7, uint64_t a8, void *__src, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = &unk_26F0BDFF0;
  *(_DWORD *)(a1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a4)
  {
    size_t v17 = 4 * a4;
    if (4 * a4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = (char *)operator new(4 * a4);
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v19;
    uint64_t v20 = &v19[4 * ((4 * a4) >> 2)];
    *(void *)(a1 + 32) = v20;
    memcpy(v19, a3, v17);
    *(void *)(a1 + 24) = v20;
  }
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(a1 + 56) = 0;
  if (__sz)
  {
    size_t v21 = 8 * __sz;
    if (((8 * __sz) & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (char *)operator new(8 * __sz);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v22;
    *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v22;
    unint64_t v23 = &v22[8 * ((uint64_t)(8 * __sz) >> 3)];
    *(void *)(a1 + 56) = v23;
    memcpy(v22, a5, v21);
    *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v23;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0;
  if (a8)
  {
    size_t v24 = 4 * a8;
    if (4 * a8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (char *)operator new(4 * a8);
    *(void *)(a1 + 64) = v25;
    *(void *)(a1 + 72) = v25;
    unint64_t v26 = &v25[4 * ((4 * a8) >> 2)];
    *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v26;
    memcpy(v25, a7, v24);
    *(void *)(a1 + 72) = v26;
  }
  *(void *)(a1 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (a10)
  {
    if (4 * a10 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = (char *)operator new(4 * a10);
    *(void *)(a1 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v27;
    *(void *)(a1 + 96) = v27;
    unint64_t v28 = &v27[4 * ((4 * a10) >> 2)];
    *(void *)(a1 + 104) = v28;
    memcpy(v27, __src, 4 * a10);
    *(void *)(a1 + 96) = v28;
  }
  *(void *)(a1 + 112) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a11);
  *(void *)(a1 + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a11);
  *(_OWORD *)(a1 + 12google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 0u;
  return a1;
}

void sub_23CBD2714(_Unwind_Exception *exception_object)
{
  unsigned int v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
    unsigned int v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      int v9 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v8 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[9] = v8;
  operator delete(v8);
  int v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    unint64_t v10 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[6] = v9;
  operator delete(v9);
  unint64_t v10 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[3] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, size_t a6, const void *a7, uint64_t a8, void *__src, uint64_t a10, uint64_t a11)
{
  return operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator(a1, a2, a3, a4, a5, a6, a7, a8, __src, a10, a11);
}

uint64_t operations_research::sat::GreaterThanAtLeastOneOfPropagator::Propagate(operations_research::sat::GreaterThanAtLeastOneOfPropagator *this)
{
  uint64_t v2 = (int *)*((void *)this + 11);
  uint64_t v3 = (int *)*((void *)this + 12);
  if (v2 == v3)
  {
LABEL_5:
    uint64_t v5 = *((void *)this + 2);
    uint64_t v6 = *((void *)this + 3);
    uint64_t v7 = v6 - v5;
    if (v6 == v5) {
      goto LABEL_17;
    }
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(*((void *)this + 15) + 40);
    uint64_t v10 = *(void *)(v9 + 12 * *((int *)this + 2));
    uint64_t v11 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v12 = 0x7FFFFFFFFFFFFFFELL;
    do
    {
      int v13 = *(_DWORD *)(*((void *)this + 8) + 4 * v8);
      unint64_t v14 = *(void *)(*(void *)(*((void *)this + 14) + 24)
                      + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if ((v14 >> v13)) {
        return 1;
      }
      if (((v14 >> (v13 & 0x3F ^ 1u)) & 1) == 0)
      {
        uint64_t v15 = *(void *)(*((void *)this + 5) + 8 * v8);
        if (v15 + *(void *)(v9 + 12 * *(int *)(v5 + 4 * v8)) < v12) {
          uint64_t v12 = v15 + *(void *)(v9 + 12 * *(int *)(v5 + 4 * v8));
        }
        if (v12 <= v10) {
          return 1;
        }
      }
      ++v8;
    }
    while (v11 != v8);
    if (v12 == 0x7FFFFFFFFFFFFFFELL)
    {
LABEL_17:
      uint64_t v17 = *((void *)this + 14);
      *(void *)(v17 + 144) = 0;
      if ((operations_research::sat::GreaterThanAtLeastOneOfPropagator *)(v17 + 96) != (operations_research::sat::GreaterThanAtLeastOneOfPropagator *)((char *)this + 64)) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v17 + 96), *((char **)this + 8), *((char **)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 2);
      }
      return 0;
    }
    uint64_t v18 = (int *)*((void *)this + 16);
    *((void *)this + 17) = v18;
    uint64_t v79 = (void *)((char *)this + 152);
    long long v80 = (void **)((char *)this + 128);
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = *((void *)this + 19);
    if (v2 == v3)
    {
      if (v6 != v5) {
        goto LABEL_51;
      }
LABEL_95:
      LODWORD(v83) = *((_DWORD *)this + 2);
      HIDWORD(v83) = v12;
      uint64_t v75 = *((void *)this + 15);
      uint64_t v76 = (char *)*((void *)this + 16);
      long long v77 = (uint64_t *)*((void *)this + 19);
      uint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 20) - (void)v77) >> 2);
      return operations_research::sat::IntegerTrail::Enqueue(v75, v83, SHIDWORD(v12), v76, ((char *)v18 - v76) >> 2, v77, v78);
    }
    while (1)
    {
      while (1)
      {
        int v19 = *v2 ^ 1;
        unint64_t v20 = *((void *)this + 18);
        if ((unint64_t)v18 >= v20) {
          break;
        }
        *v18++ = v19;
        *((void *)this + 17) = v18;
        if (++v2 == v3) {
          goto LABEL_50;
        }
      }
      size_t v21 = (int *)*v80;
      uint64_t v22 = (char *)v18 - (unsigned char *)*v80;
      uint64_t v23 = v22 >> 2;
      unint64_t v24 = (v22 >> 2) + 1;
      if (v24 >> 62) {
LABEL_98:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v25 = v20 - (void)v21;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v81 = v24;
      if (v24)
      {
        if (v24 >> 62) {
LABEL_99:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        unint64_t v26 = operator new(4 * v24);
        unint64_t v27 = (int *)&v26[4 * v23];
        int *v27 = v19;
        uint64_t v28 = (uint64_t)(v27 + 1);
        if (v18 == v21)
        {
LABEL_44:
          *((void *)this + 16) = v27;
          *((void *)this + 17) = v28;
          *((void *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v26[4 * v81];
          if (!v21) {
            goto LABEL_41;
          }
LABEL_40:
          operator delete(v21);
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (int *)(4 * v23);
        *(_DWORD *)(4 * v23) = v19;
        uint64_t v28 = 4 * v23 + 4;
        if (v18 == v21) {
          goto LABEL_44;
        }
      }
      unint64_t v29 = (char *)(v18 - 1) - (char *)v21;
      if (v29 < 0xBC
        || &v26[v22 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v22 - 4]
        || (int *)((char *)v18 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v18 - 1
        || (unint64_t)((char *)v18 - &v26[v22]) < 0x20)
      {
        break;
      }
      uint64_t v33 = (v29 >> 2) + 1;
      uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v30 = &v18[v34 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v27 = (int *)((char *)v27 - v34);
      long long v35 = &v26[4 * v23 - 16];
      uint64_t v36 = v18 - 4;
      uint64_t v37 = v33 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *long long v35 = v38;
        v35 -= 2;
        v36 -= 8;
        v37 -= 8;
      }
      while (v37);
      unint64_t v31 = v81;
      if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_38;
      }
LABEL_39:
      *((void *)this + 16) = v27;
      *((void *)this + 17) = v28;
      *((void *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v26[4 * v31];
      if (v21) {
        goto LABEL_40;
      }
LABEL_41:
      uint64_t v18 = (int *)v28;
      *((void *)this + 17) = v28;
      if (++v2 == v3)
      {
LABEL_50:
        uint64_t v5 = *((void *)this + 2);
        if (*((void *)this + 3) == v5) {
          goto LABEL_95;
        }
LABEL_51:
        unint64_t v39 = 0;
        while (2)
        {
          uint64_t v40 = *((void *)this + 8);
          int v41 = *(_DWORD *)(v40 + 4 * v39);
          if (((*(void *)(*(void *)(*((void *)this + 14) + 24)
                           + (((unint64_t)v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v41 & 0x3F ^ 1u)) & 1) != 0)
          {
            uint64_t v43 = (char *)*((void *)this + 17);
            unint64_t v42 = *((void *)this + 18);
            if ((unint64_t)v43 < v42)
            {
              *(_DWORD *)uint64_t v43 = v41;
              *((void *)this + 17) = v43 + 4;
              goto LABEL_53;
            }
            uint64_t v44 = (char *)*v80;
            uint64_t v45 = v43 - (unsigned char *)*v80;
            uint64_t v46 = v45 >> 2;
            unint64_t v47 = (v45 >> 2) + 1;
            if (v47 >> 62) {
              goto LABEL_98;
            }
            uint64_t v48 = v42 - (void)v44;
            if (v48 >> 1 > v47) {
              unint64_t v47 = v48 >> 1;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49)
            {
              if (v49 >> 62) {
                goto LABEL_99;
              }
              unint64_t v50 = operator new(4 * v49);
              uint64_t v51 = &v50[4 * v46];
              *uint64_t v51 = *(_DWORD *)(v40 + 4 * v39);
              uint64_t v52 = (uint64_t)(v51 + 1);
              if (v43 == v44)
              {
LABEL_84:
                *((void *)this + 16) = v51;
                *((void *)this + 17) = v52;
                *((void *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = &v50[4 * v49];
                if (v44) {
                  operator delete(v44);
                }
                *((void *)this + 17) = v52;
                goto LABEL_53;
              }
            }
            else
            {
              unint64_t v50 = 0;
              uint64_t v51 = (_DWORD *)(4 * v46);
              *(_DWORD *)(4 * v46) = v41;
              uint64_t v52 = 4 * v46 + 4;
              if (v43 == v44) {
                goto LABEL_84;
              }
            }
            unint64_t v62 = v43 - 4 - v44;
            if (v62 < 0x2C) {
              goto LABEL_103;
            }
            if ((unint64_t)(v43 - &v50[v45]) < 0x20) {
              goto LABEL_103;
            }
            uint64_t v63 = (v62 >> 2) + 1;
            uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
            int v65 = &v43[-v64];
            uint64_t v51 = (_DWORD *)((char *)v51 - v64);
            uint64_t v66 = &v50[4 * v46 - 16];
            uint64_t v67 = v43 - 16;
            uint64_t v68 = v63 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v69 = *(_OWORD *)v67;
              *(v66 - 1) = *((_OWORD *)v67 - 1);
              *uint64_t v66 = v69;
              v66 -= 2;
              v67 -= 32;
              v68 -= 8;
            }
            while (v68);
            uint64_t v43 = v65;
            if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_103:
              do
              {
                int v70 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *--uint64_t v51 = v70;
              }
              while (v43 != v44);
            }
            goto LABEL_84;
          }
          *(_DWORD *)uint64_t v82 = *(_DWORD *)(v5 + 4 * v39);
          *(void *)&v82[4] = v12 - *(void *)(*((void *)this + 5) + 8 * v39);
          uint64_t v54 = (_DWORD *)*((void *)this + 20);
          unint64_t v53 = *((void *)this + 21);
          if ((unint64_t)v54 >= v53)
          {
            uint64_t v56 = (_DWORD *)*v79;
            unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v54 - *v79) >> 2);
            unint64_t v58 = v57 + 1;
            if (v57 + 1 > 0x1555555555555555) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (void)v56) >> 2);
            if (2 * v59 > v58) {
              unint64_t v58 = 2 * v59;
            }
            if (v59 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v60 = 0x1555555555555555;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              if (v60 > 0x1555555555555555) {
                goto LABEL_99;
              }
              char v61 = (char *)operator new(12 * v60);
            }
            else
            {
              char v61 = 0;
            }
            uint64_t v71 = &v61[12 * v57];
            *(void *)uint64_t v71 = *(void *)v82;
            *((_DWORD *)v71 + 2) = *(_DWORD *)&v82[8];
            long long v72 = v71;
            if (v54 != v56)
            {
              do
              {
                uint64_t v73 = *(void *)(v54 - 3);
                v54 -= 3;
                int v74 = v54[2];
                *(void *)(v72 - 12) = v73;
                v72 -= 12;
                *((_DWORD *)v72 + 2) = v74;
              }
              while (v54 != v56);
              uint64_t v54 = (_DWORD *)*v79;
            }
            uint64_t v55 = v71 + 12;
            *((void *)this + 19) = v72;
            *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v71 + 12;
            *((void *)this + 21) = &v61[12 * v60];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            *(void *)uint64_t v54 = *(void *)v82;
            v54[2] = *(_DWORD *)&v82[8];
            uint64_t v55 = v54 + 3;
          }
          *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v55;
LABEL_53:
          ++v39;
          uint64_t v5 = *((void *)this + 2);
          if (v39 >= (*((void *)this + 3) - v5) >> 2)
          {
            uint64_t v18 = (int *)*((void *)this + 17);
            goto LABEL_95;
          }
          continue;
        }
      }
    }
    uint64_t v30 = v18;
    unint64_t v31 = v81;
    do
    {
LABEL_38:
      int v32 = *--v30;
      *--unint64_t v27 = v32;
    }
    while (v30 != v21);
    goto LABEL_39;
  }
  unsigned int v4 = (int *)*((void *)this + 11);
  while (((*(void *)(*(void *)(*((void *)this + 14) + 24)
                      + (((unint64_t)*v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v4) & 1) != 0)
  {
    if (++v4 == v3) {
      goto LABEL_5;
    }
  }
  return 1;
}

void operations_research::sat::GreaterThanAtLeastOneOfPropagator::RegisterWith(operations_research::sat::GreaterThanAtLeastOneOfPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  uint64_t v5 = (unsigned int *)*((void *)this + 8);
  uint64_t v6 = (unsigned int *)*((void *)this + 9);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v7 ^ 1, v4, 0xFFFFFFFFLL);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 11);
  uint64_t v9 = (unsigned int *)*((void *)this + 12);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v10, v4, 0xFFFFFFFFLL);
  }
  uint64_t v12 = (unsigned int *)*((void *)this + 2);
  uint64_t v11 = (unsigned int *)*((void *)this + 3);
  while (v12 != v11)
  {
    unsigned int v13 = *v12++;
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v13, v4, 0xFFFFFFFFLL);
  }
}

void operations_research::sat::BooleanXorPropagator::~BooleanXorPropagator(operations_research::sat::BooleanXorPropagator *this)
{
  *(void *)this = &unk_26F0BE020;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F0BE020;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::GreaterThanAtLeastOneOfPropagator::~GreaterThanAtLeastOneOfPropagator(operations_research::sat::GreaterThanAtLeastOneOfPropagator *this)
{
  *(void *)this = &unk_26F0BDFF0;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26F0BDFF0;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::BoolVar::BoolVar(uint64_t this)
{
  *(void *)this = 0;
  *(_DWORD *)(this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  return this;
}

uint64_t operations_research::sat::BoolVar::BoolVar(uint64_t result, int a2, uint64_t a3)
{
  *(void *)BOOL result = a3;
  *(_DWORD *)(result + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = a2;
  return result;
}

uint64_t operations_research::sat::BoolVar::WithName(int *a1, std::string *__str)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 32) + 8 * a1[2] + 8);
  uint64_t v5 = (std::string **)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 8);
  unsigned int v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    unsigned int v7 = *(google::protobuf::Arena **)v7;
    uint64_t v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, __str);
      return *(void *)a1;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (long long *)__str);
  return *(void *)a1;
}

uint64_t operations_research::sat::IntVar::IntVar(uint64_t this, const operations_research::sat::BoolVar *a2)
{
  *(void *)this = *(void *)a2;
  *(_DWORD *)(this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *((_DWORD *)a2 + 2);
  return this;
}

uint64_t operations_research::sat::LinearExpr::LinearExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  operations_research::sat::LinearExpr::AddTerm((char **)a1, a2, a3, 1);
  return a1;
}

void sub_23CBD3248(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  operations_research::sat::LinearExpr::LinearExpr((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearExpr::LinearExpr(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  operations_research::sat::LinearExpr::AddTerm((char **)a1, a2, a3, 1);
  return a1;
}

void sub_23CBD32AC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  operations_research::sat::LinearExpr::LinearExpr((void **)v1);
  _Unwind_Resume(a1);
}

double operations_research::sat::LinearExpr::LinearExpr(operations_research::sat::LinearExpr *this, uint64_t a2)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((void *)this + 6) = a2;
  return result;
}

void operations_research::sat::LinearExpr::ScalProd(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v10 = a2;
  uint64_t v11 = a4;
  if (a2 != a4) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)&v10, (int)&v11, "vars.size() == coeffs.size()");
  }
  *(void *)(a5 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (a2)
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
    do
    {
      uint64_t v9 = *a3++;
      operations_research::sat::LinearExpr::AddTerm((char **)a5, *(v8 - 1), *v8, v9);
      v8 += 2;
      --v6;
    }
    while (v6);
  }
}

void sub_23CBD33A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CBD33B0(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpr::AddTerm(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    int v11 = ~a3;
    unsigned int v13 = a1[1];
    unint64_t v12 = (unint64_t)a1[2];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v23 = *a1;
      uint64_t v24 = (v13 - *a1) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        goto LABEL_81;
      }
      uint64_t v26 = v12 - (void)v23;
      if (v26 >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 60) {
          goto LABEL_80;
        }
        uint64_t v28 = (char *)operator new(16 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v52 = &v28[16 * v24];
      *(void *)uint64_t v52 = a2;
      *((_DWORD *)v52 + 2) = v11;
      unint64_t v14 = v52 + 16;
      if (v13 != v23)
      {
        do
        {
          uint64_t v53 = *((void *)v13 - 2);
          v13 -= 16;
          int v54 = *((_DWORD *)v13 + 2);
          *((void *)v52 - 2) = v53;
          v52 -= 16;
          *((_DWORD *)v52 + 2) = v54;
        }
        while (v13 != v23);
        unsigned int v13 = *a1;
      }
      *a1 = v52;
      a1[1] = v14;
      a1[2] = &v28[16 * v27];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(void *)unsigned int v13 = a2;
      *((_DWORD *)v13 + 2) = v11;
      unint64_t v14 = v13 + 16;
    }
    a1[1] = v14;
    uint64_t v55 = -a4;
    unint64_t v57 = a1[4];
    unint64_t v56 = (unint64_t)a1[5];
    if ((unint64_t)v57 < v56)
    {
      *(void *)unint64_t v57 = v55;
      uint64_t v58 = (uint64_t)(v57 + 8);
LABEL_79:
      a1[4] = (char *)v58;
      a1[6] += a4;
      return;
    }
    unint64_t v59 = a1[3];
    uint64_t v60 = (v57 - v59) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_82;
    }
    uint64_t v62 = v56 - (void)v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
        goto LABEL_80;
      }
      uint64_t v64 = operator new(8 * v63);
      int v65 = &v64[8 * v60];
      uint64_t v66 = &v64[8 * v63];
      *(void *)int v65 = v55;
      uint64_t v58 = (uint64_t)(v65 + 8);
      int64_t v67 = v57 - v59;
      if (v57 == v59) {
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v64 = 0;
      int v65 = (char *)(8 * v60);
      uint64_t v66 = 0;
      *(void *)(8 * v6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v55;
      uint64_t v58 = 8 * v60 + 8;
      int64_t v67 = v57 - v59;
      if (v57 == v59)
      {
LABEL_77:
        a1[3] = v65;
        a1[4] = (char *)v58;
        a1[5] = v66;
        if (v59) {
          operator delete(v59);
        }
        goto LABEL_79;
      }
    }
    unint64_t v68 = v67 - 8;
    if (v68 < 0x58) {
      goto LABEL_85;
    }
    if ((unint64_t)(v59 - v64) < 0x20) {
      goto LABEL_85;
    }
    uint64_t v69 = (v68 >> 3) + 1;
    uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v71 = &v57[-v70];
    v65 -= v70;
    long long v72 = &v64[8 * v60 - 16];
    uint64_t v73 = v57 - 16;
    uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v75 = *(_OWORD *)v73;
      *(v72 - 1) = *((_OWORD *)v73 - 1);
      *long long v72 = v75;
      v72 -= 2;
      v73 -= 32;
      v74 -= 4;
    }
    while (v74);
    unint64_t v57 = v71;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
      {
        uint64_t v76 = *((void *)v57 - 1);
        v57 -= 8;
        *((void *)v65 - 1) = v76;
        v65 -= 8;
      }
      while (v57 != v59);
    }
    goto LABEL_77;
  }
  uint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(void *)uint64_t v9 = a2;
    *((void *)v9 + 1) = a3;
    uint64_t v10 = (uint64_t)(v9 + 16);
    goto LABEL_30;
  }
  uint64_t v15 = *a1;
  uint64_t v16 = (v9 - *a1) >> 4;
  unint64_t v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 60) {
LABEL_81:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v18 = v8 - (void)v15;
  if (v18 >> 3 > v17) {
    unint64_t v17 = v18 >> 3;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 60) {
      goto LABEL_80;
    }
    unint64_t v20 = (char *)operator new(16 * v19);
    size_t v21 = &v20[16 * v16];
    uint64_t v22 = &v20[16 * v19];
    *(void *)size_t v21 = a2;
    *((void *)v21 + 1) = a3;
    uint64_t v10 = (uint64_t)(v21 + 16);
    if (v9 == v15) {
      goto LABEL_28;
    }
  }
  else
  {
    size_t v21 = (char *)(16 * v16);
    uint64_t v22 = 0;
    *(void *)size_t v21 = a2;
    *((void *)v21 + 1) = a3;
    uint64_t v10 = 16 * v16 + 16;
    if (v9 == v15) {
      goto LABEL_28;
    }
  }
  do
  {
    uint64_t v29 = *((void *)v9 - 2);
    v9 -= 16;
    int v30 = *((_DWORD *)v9 + 2);
    *((void *)v21 - 2) = v29;
    v21 -= 16;
    *((_DWORD *)v21 + 2) = v30;
  }
  while (v9 != v15);
  uint64_t v9 = *a1;
LABEL_28:
  *a1 = v21;
  a1[1] = (char *)v10;
  a1[2] = v22;
  if (v9) {
    operator delete(v9);
  }
LABEL_30:
  a1[1] = (char *)v10;
  int v32 = a1[4];
  unint64_t v31 = (unint64_t)a1[5];
  if ((unint64_t)v32 < v31)
  {
    *(void *)int v32 = a4;
    a1[4] = v32 + 8;
    return;
  }
  uint64_t v33 = a1[3];
  uint64_t v34 = (v32 - v33) >> 3;
  unint64_t v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 61) {
LABEL_82:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v36 = v31 - (void)v33;
  if (v36 >> 2 > v35) {
    unint64_t v35 = v36 >> 2;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v37)
  {
    if (!(v37 >> 61))
    {
      long long v38 = operator new(8 * v37);
      unint64_t v39 = &v38[8 * v34];
      uint64_t v40 = &v38[8 * v37];
      *(void *)unint64_t v39 = a4;
      uint64_t v41 = (uint64_t)(v39 + 8);
      int64_t v42 = v32 - v33;
      if (v32 == v33) {
        goto LABEL_49;
      }
LABEL_43:
      unint64_t v43 = v42 - 8;
      if (v43 < 0x58) {
        goto LABEL_86;
      }
      if ((unint64_t)(v33 - v38) < 0x20) {
        goto LABEL_86;
      }
      uint64_t v44 = (v43 >> 3) + 1;
      uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v46 = &v32[-v45];
      v39 -= v45;
      unint64_t v47 = &v38[8 * v34 - 16];
      uint64_t v48 = v32 - 16;
      uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        *unint64_t v47 = v50;
        v47 -= 2;
        v48 -= 32;
        v49 -= 4;
      }
      while (v49);
      int v32 = v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_86:
        do
        {
          uint64_t v51 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v39 - 1) = v51;
          v39 -= 8;
        }
        while (v32 != v33);
      }
      goto LABEL_49;
    }
LABEL_80:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v38 = 0;
  unint64_t v39 = (char *)(8 * v34);
  uint64_t v40 = 0;
  *(void *)(8 * v34) = a4;
  uint64_t v41 = 8 * v34 + 8;
  int64_t v42 = v32 - v33;
  if (v32 != v33) {
    goto LABEL_43;
  }
LABEL_49:
  a1[3] = v39;
  a1[4] = (char *)v41;
  a1[5] = v40;
  if (v33) {
    operator delete(v33);
  }
  a1[4] = (char *)v41;
}

void operations_research::sat::LinearExpr::BooleanSum(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (a2)
  {
    uint64_t v4 = a1;
    uint64_t v6 = a1 + 16 * a2;
    do
    {
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v4 + 8);
      operations_research::sat::LinearExpr::AddTerm((char **)a3, *(void *)v4, v3, 1);
      v4 += 16;
    }
    while (v4 != v6);
  }
}

void sub_23CBD38BC(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpr::BooleanScalProd(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v10 = a2;
  uint64_t v11 = a4;
  if (a2 != a4) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)&v10, (int)&v11, "vars.size() == coeffs.size()");
  }
  *(void *)(a5 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (a2)
  {
    unint64_t v8 = (unsigned int *)(a1 + 8);
    do
    {
      uint64_t v9 = *a3++;
      operations_research::sat::LinearExpr::AddTerm((char **)a5, *((void *)v8 - 1), *v8, v9);
      v8 += 4;
      --v6;
    }
    while (v6);
  }
}

void sub_23CBD3998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CBD39A0(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Constraint::WithName(uint64_t *a1, std::string *__str)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (std::string **)(*a1 + 40);
  uint64_t v6 = *(void *)(v4 + 8);
  unsigned int v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    unsigned int v7 = *(google::protobuf::Arena **)v7;
    unint64_t v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, __str);
      return *a1;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (long long *)__str);
  return *a1;
}

uint64_t operations_research::sat::Constraint::OnlyEnforceIf(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  unsigned int v8 = *(_DWORD *)(*a1 + 16);
  uint64_t v6 = (unsigned int *)(*a1 + 16);
  uint64_t v7 = v8;
  int v9 = v8 + 1;
  uint64_t v10 = v5;
  if (v8 == *(_DWORD *)(v5 + 20))
  {
    google::protobuf::RepeatedField<int>::Reserve(v6, v9);
    uint64_t v10 = *a1;
  }
  *(_DWORD *)(*(void *)(v5 + 24) + 4 * v7) = a3;
  *(_DWORD *)(v5 + 16) = v9;
  return v10;
}

uint64_t operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex(operations_research::sat::CpModelBuilder *this, uint64_t a2)
{
  int v2 = a2;
  v67[6] = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return a2;
  }
  uint64_t v5 = 0;
  uint64_t v7 = (uint64_t *)((char *)this + 192);
  unint64_t v6 = *((void *)this + 24);
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + (int)a2));
  unint64_t v9 = v8 >> 7;
  unint64_t v10 = (v8 >> 7) ^ (v6 >> 12);
  uint64_t v11 = *((void *)this + 27);
  uint64_t v12 = 0x101010101010101 * (v8 & 0x7F);
  uint64_t v13 = *((void *)this + 25);
  for (unint64_t i = v10; ; unint64_t i = v5 + v15)
  {
    unint64_t v15 = i & v11;
    uint64_t v16 = *(void *)(v6 + v15);
    unint64_t v17 = ((v16 ^ v12) - 0x101010101010101) & ~(v16 ^ v12) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_7:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_10;
    }
    v5 += 8;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v11;
    if (*(_DWORD *)(v13 + 8 * v18) == v2) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_7;
    }
  }
  if (v18 == v11)
  {
LABEL_10:
    uint64_t v57 = 0x101010101010101 * (v8 & 0x7F);
    if (~v2 <= v2) {
      int v19 = v2;
    }
    else {
      int v19 = ~v2;
    }
    unint64_t v20 = (int *)*((void *)this + 4);
    uint64_t v21 = *(void *)&v20[2 * v19 + 2];
    uint64_t v3 = *((unsigned int *)this + 6);
    int v22 = *v20;
    if ((int)v3 >= *v20)
    {
      if (v22 == *((_DWORD *)this + 7))
      {
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v22 + 1);
        unint64_t v20 = (int *)*((void *)this + 4);
        int v22 = *v20;
      }
      *unint64_t v20 = v22 + 1;
      unint64_t v23 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
      uint64_t v28 = *((void *)this + 4);
      uint64_t v29 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v29 + 1;
      *(void *)(v28 + 8 * v29 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v23;
      uint64_t v26 = *(unsigned int *)(v23 + 16);
      int v24 = *(_DWORD *)(v23 + 20);
      unint64_t v25 = (unsigned int *)(v23 + 16);
      unsigned int v27 = v26 + 1;
      if (v26 != v24)
      {
LABEL_20:
        uint64_t v30 = *(void *)(v23 + 24);
        *(void *)(v30 + 8 * v26) = 0;
        *(_DWORD *)(v23 + 16) = v27;
        int v31 = v26 + 2;
        if (v27 == v24)
        {
          google::protobuf::RepeatedField<long long>::Reserve(v25, v31);
          uint64_t v30 = *(void *)(v23 + 24);
        }
        *(void *)(v30 + 8 * v27) = 1;
        *unint64_t v25 = v31;
        int v32 = *(void **)(v21 + 40);
        uint64_t v33 = (void *)*((unsigned __int8 *)v32 + 23);
        if (*((char *)v32 + 23) < 0)
        {
          if (!v32[1]) {
            goto LABEL_43;
          }
        }
        else if (!*((unsigned char *)v32 + 23))
        {
          goto LABEL_43;
        }
        v63[0] = "Not(";
        v63[1] = (void *)4;
        unint64_t v39 = (void *)v32[1];
        if ((char)v33 < 0)
        {
          int v32 = (void *)*v32;
          uint64_t v33 = v39;
        }
        v59[0] = v32;
        v59[1] = v33;
        v67[0] = ")";
        v67[1] = 1;
        absl::lts_2020_02_25::StrCat((uint64_t)v63, (uint64_t)v59, (uint64_t)v67, &__str);
        uint64_t v40 = (std::string **)(v23 + 40);
        uint64_t v41 = *(void *)(v23 + 8);
        int64_t v42 = (google::protobuf::Arena *)(v41 & 0xFFFFFFFFFFFFFFFELL);
        if (v41)
        {
          int64_t v42 = *(google::protobuf::Arena **)v42;
          unint64_t v43 = *v40;
          if (*v40 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_36;
          }
        }
        else
        {
          unint64_t v43 = *v40;
          if (*v40 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_36:
            std::string::operator=(v43, &__str);
            goto LABEL_41;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v40, v42, (long long *)&__str);
LABEL_41:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
LABEL_43:
        if ((v3 & 0x80000000) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 74);
          unint64_t v56 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: RefIsPositive(index) ", 35);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
        }
        uint64_t v66 = 0;
        *(_OWORD *)uint64_t v64 = 0u;
        long long v65 = 0u;
        *(_OWORD *)unint64_t v63 = 0u;
        operations_research::sat::LinearExpr::AddTerm((char **)v63, (uint64_t)this, v3, 1);
        uint64_t v62 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v61 = 0u;
        *(_OWORD *)unint64_t v59 = 0u;
        operations_research::sat::LinearExpr::AddTerm((char **)v59, (uint64_t)this, v2, 1);
        operations_research::sat::CpModelBuilder::AddEquality(this, (const operations_research::sat::LinearExpr *)v63, (const operations_research::sat::LinearExpr *)v59);
        if (__p[1])
        {
          *(void **)&long long v61 = __p[1];
          operator delete(__p[1]);
        }
        if (v59[0])
        {
          v59[1] = v59[0];
          operator delete(v59[0]);
        }
        if (v64[1])
        {
          *(void **)&long long v65 = v64[1];
          operator delete(v64[1]);
        }
        if (v63[0])
        {
          v63[1] = v63[0];
          operator delete(v63[0]);
        }
        uint64_t v45 = 0;
        unint64_t v46 = *((void *)this + 24);
        unint64_t v47 = v9 ^ (v46 >> 12);
        uint64_t v48 = *((void *)this + 27);
        while (1)
        {
          unint64_t v49 = v47 & v48;
          uint64_t v50 = *(void *)(v46 + v49);
          unint64_t v51 = ((v50 ^ v57) - 0x101010101010101) & ~(v50 ^ v57) & 0x8080808080808080;
          if (v51) {
            break;
          }
LABEL_57:
          if ((v50 & (~v50 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v53 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(v7, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v2)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v2)));
            uint64_t v52 = *((void *)this + 25);
            int v54 = (int *)(v52 + 8 * v53);
            *int v54 = v2;
            v54[1] = 0;
            goto LABEL_60;
          }
          v45 += 8;
          unint64_t v47 = v45 + v49;
        }
        uint64_t v52 = *((void *)this + 25);
        while (1)
        {
          unint64_t v53 = (v49 + (__clz(__rbit64(v51)) >> 3)) & v48;
          if (*(_DWORD *)(v52 + 8 * v53) == v2) {
            break;
          }
          v51 &= v51 - 1;
          if (!v51) {
            goto LABEL_57;
          }
        }
LABEL_60:
        *(_DWORD *)(v52 + 8 * v53 + 4) = v3;
        return v3;
      }
    }
    else
    {
      *((_DWORD *)this + 6) = v3 + 1;
      unint64_t v23 = *(void *)&v20[2 * (int)v3 + 2];
      uint64_t v26 = *(unsigned int *)(v23 + 16);
      int v24 = *(_DWORD *)(v23 + 20);
      unint64_t v25 = (unsigned int *)(v23 + 16);
      unsigned int v27 = v26 + 1;
      if (v26 != v24) {
        goto LABEL_20;
      }
    }
    google::protobuf::RepeatedField<long long>::Reserve(v25, v27);
    int v24 = *(_DWORD *)(v23 + 20);
    goto LABEL_20;
  }
  for (j = 0; ; unint64_t v10 = j + v35)
  {
    unint64_t v35 = v10 & v11;
    uint64_t v36 = *(void *)(v6 + v35);
    unint64_t v37 = ((v36 ^ v12) - 0x101010101010101) & ~(v36 ^ v12) & 0x8080808080808080;
    if (v37) {
      break;
    }
LABEL_29:
    if ((v36 & (~v36 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v38 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(v7, v8);
      uint64_t v13 = *((void *)this + 25);
      uint64_t v44 = (int *)(v13 + 8 * v38);
      *uint64_t v44 = v2;
      v44[1] = 0;
      return *(unsigned int *)(v13 + 8 * v38 + 4);
    }
    j += 8;
  }
  while (1)
  {
    unint64_t v38 = (v35 + (__clz(__rbit64(v37)) >> 3)) & v11;
    if (*(_DWORD *)(v13 + 8 * v38) == v2) {
      return *(unsigned int *)(v13 + 8 * v38 + 4);
    }
    v37 &= v37 - 1;
    if (!v37) {
      goto LABEL_29;
    }
  }
}

void sub_23CBD3FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelBuilder::IndexFromConstant(operations_research::sat::CpModelBuilder *this, uint64_t a2)
{
  uint64_t v4 = 0;
  unint64_t v6 = (uint64_t *)((char *)this + 144);
  unint64_t v5 = *((void *)this + 18);
  unint64_t v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v8 = v7 >> 7;
  unint64_t v9 = (v7 >> 7) ^ (v5 >> 12);
  uint64_t v10 = *((void *)this + 21);
  uint64_t v11 = 0x101010101010101 * (v7 & 0x7F);
  for (unint64_t i = v9; ; unint64_t i = v4 + v13)
  {
    unint64_t v13 = i & v10;
    uint64_t v14 = *(void *)(v5 + v13);
    unint64_t v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_8;
    }
    v4 += 8;
  }
  while (1)
  {
    unint64_t v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    if (*(void *)(*((void *)this + 19) + 16 * v16) == a2) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  if (v16 == v10)
  {
LABEL_8:
    int v17 = *((_DWORD *)this + 6);
    unint64_t v18 = (int *)*((void *)this + 4);
    int v45 = v17;
    if (v18)
    {
      int v19 = *v18;
      if (v17 < *v18)
      {
        *((_DWORD *)this + 6) = v17 + 1;
        unint64_t v20 = *(void *)&v18[2 * v17 + 2];
        uint64_t v23 = *(unsigned int *)(v20 + 16);
        int v21 = *(_DWORD *)(v20 + 20);
        int v22 = (unsigned int *)(v20 + 16);
        unsigned int v24 = v23 + 1;
        if (v23 != v21)
        {
LABEL_17:
          uint64_t v27 = *(void *)(v20 + 24);
          *(void *)(v27 + 8 * v23) = a2;
          *(_DWORD *)(v20 + 16) = v24;
          int v28 = v23 + 2;
          if (v24 == v21)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v22, v28);
            uint64_t v27 = *(void *)(v20 + 24);
          }
          uint64_t v29 = 0;
          *(void *)(v27 + 8 * v24) = a2;
          *int v22 = v28;
          unint64_t v5 = *((void *)this + 18);
          unint64_t v9 = v8 ^ (v5 >> 12);
          uint64_t v10 = *((void *)this + 21);
          for (unint64_t j = v9; ; unint64_t j = v29 + v31)
          {
            unint64_t v31 = j & v10;
            uint64_t v32 = *(void *)(v5 + (j & v10));
            unint64_t v33 = ((v32 ^ v11) - 0x101010101010101) & ~(v32 ^ v11) & 0x8080808080808080;
            if (v33) {
              break;
            }
LABEL_24:
            if ((v32 & (~v32 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v35 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert(v6, v7);
              unint64_t v5 = *((void *)this + 18);
              uint64_t v34 = *((void *)this + 19);
              uint64_t v36 = v34 + 16 * v35;
              *(void *)uint64_t v36 = a2;
              *(_DWORD *)(v36 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
              uint64_t v10 = *((void *)this + 21);
              unint64_t v9 = v8 ^ (v5 >> 12);
              goto LABEL_27;
            }
            v29 += 8;
          }
          uint64_t v34 = *((void *)this + 19);
          while (1)
          {
            unint64_t v35 = (v31 + (__clz(__rbit64(v33)) >> 3)) & v10;
            if (*(void *)(v34 + 16 * v35) == a2) {
              break;
            }
            v33 &= v33 - 1;
            if (!v33) {
              goto LABEL_24;
            }
          }
LABEL_27:
          *(_DWORD *)(v34 + 16 * v35 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v45;
          goto LABEL_28;
        }
LABEL_16:
        google::protobuf::RepeatedField<long long>::Reserve(v22, v24);
        int v21 = *(_DWORD *)(v20 + 20);
        goto LABEL_17;
      }
      if (v19 != *((_DWORD *)this + 7))
      {
LABEL_15:
        *unint64_t v18 = v19 + 1;
        unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
        uint64_t v25 = *((void *)this + 4);
        uint64_t v26 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v26 + 1;
        *(void *)(v25 + 8 * v26 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v20;
        uint64_t v23 = *(unsigned int *)(v20 + 16);
        int v21 = *(_DWORD *)(v20 + 20);
        int v22 = (unsigned int *)(v20 + 16);
        unsigned int v24 = v23 + 1;
        if (v23 != v21) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    else
    {
      int v19 = *((_DWORD *)this + 7);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v19 + 1);
    unint64_t v18 = (int *)*((void *)this + 4);
    int v19 = *v18;
    goto LABEL_15;
  }
LABEL_28:
  for (k = 0; ; unint64_t v9 = k + v38)
  {
    unint64_t v38 = v9 & v10;
    uint64_t v39 = *(void *)(v5 + v38);
    unint64_t v40 = ((v39 ^ v11) - 0x101010101010101) & ~(v39 ^ v11) & 0x8080808080808080;
    if (v40) {
      break;
    }
LABEL_33:
    if ((v39 & (~v39 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v42 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert(v6, v7);
      uint64_t v41 = *((void *)this + 19);
      uint64_t v43 = v41 + 16 * v42;
      *(void *)uint64_t v43 = a2;
      *(_DWORD *)(v43 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
      return *(unsigned int *)(v41 + 16 * v42 + 8);
    }
    k += 8;
  }
  uint64_t v41 = *((void *)this + 19);
  while (1)
  {
    unint64_t v42 = (v38 + (__clz(__rbit64(v40)) >> 3)) & v10;
    if (*(void *)(v41 + 16 * v42) == a2) {
      return *(unsigned int *)(v41 + 16 * v42 + 8);
    }
    v40 &= v40 - 1;
    if (!v40) {
      goto LABEL_33;
    }
  }
}

void operations_research::sat::CumulativeConstraint::AddDemand(uint64_t *a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  if (*(_DWORD *)(*a1 + 60) == 22)
  {
    uint64_t v9 = *(void *)(v8 + 48);
    uint64_t v11 = *(unsigned int *)(v9 + 16);
    uint64_t v10 = (unsigned int *)(v9 + 16);
    int v12 = v11 + 1;
    if (v11 != *(_DWORD *)(v9 + 20)) {
      goto LABEL_8;
    }
LABEL_7:
    google::protobuf::RepeatedField<int>::Reserve(v10, v12);
    goto LABEL_8;
  }
  operations_research::sat::ConstraintProto::clear_constraint(*a1);
  *(_DWORD *)(v8 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 22;
  uint64_t v13 = *(void *)(v8 + 8);
  uint64_t v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  if (v13) {
    uint64_t v14 = *(google::protobuf::Arena **)v14;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v14);
  uint64_t v9 = v15;
  *(void *)(v8 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v15;
  uint64_t v11 = *(unsigned int *)(v15 + 16);
  int v16 = *(_DWORD *)(v15 + 20);
  uint64_t v10 = (unsigned int *)(v15 + 16);
  int v12 = v11 + 1;
  if (v11 == v16) {
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(*(void *)(v9 + 24) + 4 * v11) = a3;
  *(_DWORD *)(v9 + 16) = v12;
  uint64_t v17 = *a1;
  if (*(_DWORD *)(*a1 + 60) == 22)
  {
    uint64_t v18 = *(void *)(v17 + 48);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(*a1);
    *(_DWORD *)(v17 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 22;
    uint64_t v19 = *(void *)(v17 + 8);
    unint64_t v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    if (v19) {
      unint64_t v20 = *(google::protobuf::Arena **)v20;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v20);
    uint64_t v18 = v21;
    *(void *)(v17 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v21;
  }
  int IntegerIndex = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1[1], a5);
  uint64_t v23 = *(unsigned int *)(v18 + 40);
  if (v23 == *(_DWORD *)(v18 + 44)) {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v18 + 40), v23 + 1);
  }
  *(_DWORD *)(*(void *)(v18 + 48) + 4 * v23) = IntegerIndex;
  *(_DWORD *)(v18 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v23 + 1;
}

uint64_t operations_research::sat::IntervalVar::WithName(int *a1, std::string *__str)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 56) + 8 * a1[2] + 8);
  unint64_t v5 = (std::string **)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 8);
  unint64_t v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    unint64_t v7 = *(google::protobuf::Arena **)v7;
    uint64_t v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, __str);
      return *(void *)a1;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (long long *)__str);
  return *(void *)a1;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::AddEquality(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3)
{
  unint64_t v5 = this;
  uint64_t v6 = (int *)*((void *)this + 7);
  if (!v6)
  {
    int v8 = *((_DWORD *)this + 13);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v8 + 1);
    uint64_t v6 = (int *)*((void *)v5 + 7);
    int v8 = *v6;
LABEL_10:
    int *v6 = v8 + 1;
    this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)v5 + 5));
    uint64_t v9 = this;
    uint64_t v13 = *((void *)v5 + 7);
    uint64_t v14 = *((int *)v5 + 12);
    *((_DWORD *)v5 + 12) = v14 + 1;
    *(void *)(v13 + 8 * v14 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = this;
    if (*((_DWORD *)this + 15) != 12) {
      goto LABEL_4;
    }
LABEL_11:
    int v12 = (operations_research::sat::LinearConstraintProto *)*((void *)v9 + 6);
    goto LABEL_12;
  }
  uint64_t v7 = *((int *)this + 12);
  int v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *((_DWORD *)this + 13)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *((_DWORD *)this + 12) = v7 + 1;
  uint64_t v9 = *(operations_research::sat::CpModelBuilder **)&v6[2 * v7 + 2];
  if (*((_DWORD *)v9 + 15) == 12) {
    goto LABEL_11;
  }
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v10 = *((void *)v9 + 1);
  uint64_t v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if (v10) {
    uint64_t v11 = *(google::protobuf::Arena **)v11;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v11);
  int v12 = this;
  *((void *)v9 + 6) = this;
LABEL_12:
  operations_research::sat::CpModelBuilder::FillLinearTerms(this, a2, a3, v12);
  uint64_t v15 = *((void *)a3 + 6);
  uint64_t v16 = *((void *)a2 + 6);
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v17 = *((void *)v9 + 6);
    uint64_t v18 = v15 - v16;
    uint64_t v20 = *(unsigned int *)(v17 + 64);
    uint64_t v19 = (unsigned int *)(v17 + 64);
    int v21 = v20 + 1;
    if (v20 != *(_DWORD *)(v17 + 68)) {
      goto LABEL_19;
    }
LABEL_18:
    google::protobuf::RepeatedField<long long>::Reserve(v19, v21);
    goto LABEL_19;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v22 = *((void *)v9 + 1);
  uint64_t v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v22) {
    uint64_t v23 = *(google::protobuf::Arena **)v23;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v23);
  uint64_t v17 = v24;
  *((void *)v9 + 6) = v24;
  uint64_t v18 = v15 - v16;
  uint64_t v20 = *(unsigned int *)(v24 + 64);
  int v25 = *(_DWORD *)(v24 + 68);
  uint64_t v19 = (unsigned int *)(v24 + 64);
  int v21 = v20 + 1;
  if (v20 == v25) {
    goto LABEL_18;
  }
LABEL_19:
  *(void *)(*(void *)(v17 + 72) + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v18;
  *(_DWORD *)(v17 + 64) = v21;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v26 = *((void *)v9 + 6);
    uint64_t v28 = *(unsigned int *)(v26 + 64);
    uint64_t v27 = (unsigned int *)(v26 + 64);
    int v29 = v28 + 1;
    if (v28 != *(_DWORD *)(v26 + 68)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v30 = *((void *)v9 + 1);
  unint64_t v31 = (google::protobuf::Arena *)(v30 & 0xFFFFFFFFFFFFFFFELL);
  if (v30) {
    unint64_t v31 = *(google::protobuf::Arena **)v31;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v31);
  uint64_t v26 = v32;
  *((void *)v9 + 6) = v32;
  uint64_t v28 = *(unsigned int *)(v32 + 64);
  int v33 = *(_DWORD *)(v32 + 68);
  uint64_t v27 = (unsigned int *)(v32 + 64);
  int v29 = v28 + 1;
  if (v28 == v33) {
LABEL_25:
  }
    google::protobuf::RepeatedField<long long>::Reserve(v27, v29);
LABEL_26:
  *(void *)(*(void *)(v26 + 72) + 8 * v2google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v18;
  *(_DWORD *)(v26 + 64) = v29;
  return v9;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::NewIntVar(operations_research::sat::CpModelBuilder *this, const operations_research::Domain *a2)
{
  uint64_t v4 = *((int *)this + 6);
  int v5 = *((_DWORD *)this + 6);
  uint64_t v6 = (int *)*((void *)this + 4);
  if (!v6)
  {
    int v7 = *((_DWORD *)this + 7);
LABEL_10:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v7 + 1);
    uint64_t v6 = (int *)*((void *)this + 4);
    int v7 = *v6;
    goto LABEL_11;
  }
  int v7 = *v6;
  if ((int)v4 < *v6)
  {
    *((_DWORD *)this + 6) = v5 + 1;
    unint64_t v8 = *(void *)&v6[2 * v4 + 2];
    unint64_t v9 = *(void *)a2;
    if (*(void *)a2) {
      uint64_t v10 = (uint64_t *)*((void *)a2 + 1);
    }
    else {
      uint64_t v10 = (uint64_t *)((char *)a2 + 8);
    }
    if (v9 < 2) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  if (v7 == *((_DWORD *)this + 7)) {
    goto LABEL_10;
  }
LABEL_11:
  int *v6 = v7 + 1;
  unint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
  uint64_t v11 = *((void *)this + 4);
  uint64_t v12 = *((int *)this + 6);
  *((_DWORD *)this + 6) = v12 + 1;
  *(void *)(v11 + 8 * v12 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v8;
  unint64_t v9 = *(void *)a2;
  uint64_t v15 = (uint64_t *)*((void *)a2 + 1);
  uint64_t v14 = (char *)a2 + 8;
  uint64_t v13 = v15;
  if (v9) {
    uint64_t v10 = v13;
  }
  else {
    uint64_t v10 = (uint64_t *)v14;
  }
  if (v9 < 2) {
    goto LABEL_15;
  }
LABEL_17:
  uint64_t v17 = &v10[2 * (v9 >> 1)];
  unsigned int v18 = *(_DWORD *)(v8 + 16);
  do
  {
    uint64_t v19 = *v10;
    int v20 = *(_DWORD *)(v8 + 20);
    unsigned int v21 = v18 + 1;
    if (v18 == v20)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v18 + 1);
      int v20 = *(_DWORD *)(v8 + 20);
    }
    uint64_t v22 = *(void *)(v8 + 24);
    *(void *)(v22 + 8 * v1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v19;
    *(_DWORD *)(v8 + 16) = v21;
    uint64_t v23 = v10[1];
    v18 += 2;
    if (v21 == v20)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v18);
      uint64_t v22 = *(void *)(v8 + 24);
    }
    *(void *)(v22 + 8 * v21) = v23;
    *(_DWORD *)(v8 + 16) = v18;
    v10 += 2;
  }
  while (v10 != v17);
LABEL_15:
  if (v5 < 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v25, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 74);
    uint64_t v24 = (void *)google::LogMessage::stream((google::LogMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: RefIsPositive(index) ", 35);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
  }
  return this;
}

void sub_23CBD4984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::NewBoolVar(operations_research::sat::CpModelBuilder *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = (int *)*((void *)this + 4);
  if (!v3)
  {
    int v4 = *((_DWORD *)this + 7);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v4 + 1);
    uint64_t v3 = (int *)*((void *)this + 4);
    int v4 = *v3;
LABEL_8:
    *uint64_t v3 = v4 + 1;
    unint64_t v5 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = *((int *)this + 6);
    *((_DWORD *)this + 6) = v11 + 1;
    *(void *)(v10 + 8 * v11 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v5;
    uint64_t v8 = *(unsigned int *)(v5 + 16);
    int v6 = *(_DWORD *)(v5 + 20);
    int v7 = (unsigned int *)(v5 + 16);
    unsigned int v9 = v8 + 1;
    if (v8 != v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v4 = *v3;
  if ((int)v2 >= *v3)
  {
    if (v4 != *((_DWORD *)this + 7)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  ++*((_DWORD *)this + 6);
  unint64_t v5 = *(void *)&v3[2 * v2 + 2];
  uint64_t v8 = *(unsigned int *)(v5 + 16);
  int v6 = *(_DWORD *)(v5 + 20);
  int v7 = (unsigned int *)(v5 + 16);
  unsigned int v9 = v8 + 1;
  if (v8 == v6)
  {
LABEL_9:
    google::protobuf::RepeatedField<long long>::Reserve(v7, v9);
    int v6 = *(_DWORD *)(v5 + 20);
  }
LABEL_10:
  uint64_t v12 = *(void *)(v5 + 24);
  *(void *)(v12 + 8 * vgoogle::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  *(_DWORD *)(v5 + 16) = v9;
  int v13 = v8 + 2;
  if (v9 == v6)
  {
    google::protobuf::RepeatedField<long long>::Reserve(v7, v13);
    uint64_t v12 = *(void *)(v5 + 24);
  }
  *(void *)(v12 + 8 * v9) = 1;
  unsigned int *v7 = v13;
  return this;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::NewConstant(operations_research::sat::CpModelBuilder *this, uint64_t a2)
{
  if ((operations_research::sat::CpModelBuilder::IndexFromConstant(this, a2) & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v5, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 74);
    int v4 = (void *)google::LogMessage::stream((google::LogMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: RefIsPositive(index) ", 35);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  return this;
}

void sub_23CBD4B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::CpModelBuilder::NewIntervalVar(operations_research::sat::CpModelBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = operations_research::sat::CpModelBuilder::IndexFromConstant(a1, 1);
  return operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a1, a2, a3, a4, a5, a6, a7, v15, (uint64_t)a1, v14);
}

uint64_t operations_research::sat::CpModelBuilder::NewOptionalIntervalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v14 = *(int *)(a1 + 48);
  uint64_t v15 = *(int **)(a1 + 56);
  if (!v15)
  {
    int v16 = *(_DWORD *)(a1 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v16 + 1);
    uint64_t v15 = *(int **)(a1 + 56);
    int v16 = *v15;
LABEL_8:
    *uint64_t v15 = v16 + 1;
    unint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a1 + 40));
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(int *)(a1 + 48);
    *(_DWORD *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v23 + 1;
    *(void *)(v22 + 8 * v23 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v17;
    int v18 = a10;
    uint64_t v20 = *(unsigned int *)(v17 + 16);
    uint64_t v19 = (unsigned int *)(v17 + 16);
    int v21 = v20 + 1;
    if (v20 != *(_DWORD *)(v17 + 20)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v16 = *v15;
  if ((int)v14 >= *v15)
  {
    if (v16 != *(_DWORD *)(a1 + 52)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 48);
  unint64_t v17 = *(void *)&v15[2 * v14 + 2];
  int v18 = a10;
  uint64_t v20 = *(unsigned int *)(v17 + 16);
  uint64_t v19 = (unsigned int *)(v17 + 16);
  int v21 = v20 + 1;
  if (v20 == *(_DWORD *)(v17 + 20)) {
LABEL_9:
  }
    google::protobuf::RepeatedField<int>::Reserve(v19, v21);
LABEL_10:
  *(_DWORD *)(*(void *)(v17 + 24) + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v18;
  *(_DWORD *)(v17 + 16) = v21;
  if (*(_DWORD *)(v17 + 60) == 19)
  {
    uint64_t v24 = *(_DWORD **)(v17 + 48);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(v17);
    *(_DWORD *)(v17 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 19;
    uint64_t v25 = *(void *)(v17 + 8);
    uint64_t v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      uint64_t v26 = *(google::protobuf::Arena **)v26;
    }
    uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v26);
    *(void *)(v17 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v24;
  }
  v24[4] = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a3);
  void v24[6] = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a5);
  v24[5] = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a7);
  return a1;
}

unint64_t operations_research::sat::CpModelBuilder::AddBoolAnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(int **)(a1 + 56);
  if (!v6)
  {
    int v8 = *(_DWORD *)(a1 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v8 + 1);
    int v6 = *(int **)(a1 + 56);
    int v8 = *v6;
    goto LABEL_8;
  }
  uint64_t v7 = *(int *)(a1 + 48);
  int v8 = *v6;
  if ((int)v7 < *v6)
  {
    *(_DWORD *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v7 + 1;
    unint64_t v9 = *(void *)&v6[2 * v7 + 2];
    if (!a3) {
      return v9;
    }
    goto LABEL_9;
  }
  if (v8 == *(_DWORD *)(a1 + 52)) {
    goto LABEL_7;
  }
LABEL_8:
  int *v6 = v8 + 1;
  unint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(int *)(a1 + 48);
  *(_DWORD *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v11 + 1;
  *(void *)(v10 + 8 * v11 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v9;
  if (a3)
  {
LABEL_9:
    uint64_t v12 = 16 * a3;
    int v13 = (int *)(a2 + 8);
    while (*(_DWORD *)(v9 + 60) == 4)
    {
      unint64_t v14 = *(void *)(v9 + 48);
      int v15 = *v13;
      uint64_t v17 = *(unsigned int *)(v14 + 16);
      int v16 = (unsigned int *)(v14 + 16);
      int v18 = v17 + 1;
      if (v17 == *(_DWORD *)(v14 + 20)) {
        goto LABEL_17;
      }
LABEL_10:
      *(_DWORD *)(*(void *)(v14 + 24) + 4 * v17) = v15;
      *(_DWORD *)(v14 + 16) = v18;
      v13 += 4;
      v12 -= 16;
      if (!v12) {
        return v9;
      }
    }
    operations_research::sat::ConstraintProto::clear_constraint(v9);
    *(_DWORD *)(v9 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 4;
    uint64_t v19 = *(void *)(v9 + 8);
    uint64_t v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    if (v19) {
      uint64_t v20 = *(google::protobuf::Arena **)v20;
    }
    unint64_t v14 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v20);
    *(void *)(v9 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14;
    int v15 = *v13;
    uint64_t v17 = *(unsigned int *)(v14 + 16);
    int v16 = (unsigned int *)(v14 + 16);
    int v18 = v17 + 1;
    if (v17 != *(_DWORD *)(v14 + 20)) {
      goto LABEL_10;
    }
LABEL_17:
    google::protobuf::RepeatedField<int>::Reserve(v16, v18);
    goto LABEL_10;
  }
  return v9;
}

void operations_research::sat::CpModelBuilder::FillLinearTerms(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3, operations_research::sat::LinearConstraintProto *a4)
{
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  if (*(void *)a2 != v8)
  {
    unsigned int v9 = *((_DWORD *)a4 + 4);
    do
    {
      int v10 = *(_DWORD *)(v7 + 8);
      if (v9 == *((_DWORD *)a4 + 5)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a4 + 4, v9 + 1);
      }
      *(_DWORD *)(*((void *)a4 + 3) + 4 * v9) = v10;
      *((_DWORD *)a4 + 4) = v9 + 1;
      v7 += 16;
      ++v9;
    }
    while (v7 != v8);
  }
  uint64_t v11 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v12 = (uint64_t *)*((void *)a2 + 4);
  if (v11 != v12)
  {
    unsigned int v13 = *((_DWORD *)a4 + 10);
    do
    {
      uint64_t v14 = *v11;
      if (v13 == *((_DWORD *)a4 + 11)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)a4 + 10, v13 + 1);
      }
      *(void *)(*((void *)a4 + 6) + 8 * v13) = v14;
      *((_DWORD *)a4 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v13 + 1;
      ++v11;
      ++v13;
    }
    while (v11 != v12);
  }
  uint64_t v15 = *(void *)a3;
  uint64_t v16 = *((void *)a3 + 1);
  if (*(void *)a3 != v16)
  {
    unsigned int v17 = *((_DWORD *)a4 + 4);
    do
    {
      int v18 = *(_DWORD *)(v15 + 8);
      if (v17 == *((_DWORD *)a4 + 5)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a4 + 4, v17 + 1);
      }
      *(_DWORD *)(*((void *)a4 + 3) + 4 * v17) = v18;
      *((_DWORD *)a4 + 4) = v17 + 1;
      v15 += 16;
      ++v17;
    }
    while (v15 != v16);
  }
  uint64_t v19 = (uint64_t *)*((void *)a3 + 3);
  uint64_t v20 = (uint64_t *)*((void *)a3 + 4);
  if (v19 != v20)
  {
    unsigned int v21 = *((_DWORD *)a4 + 10);
    do
    {
      uint64_t v22 = *v19;
      if (v21 == *((_DWORD *)a4 + 11)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)a4 + 10, v21 + 1);
      }
      *(void *)(*((void *)a4 + 6) + 8 * v21) = -v22;
      *((_DWORD *)a4 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v21 + 1;
      ++v19;
      ++v21;
    }
    while (v19 != v20);
  }
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::AddLessOrEqual(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3)
{
  unint64_t v5 = this;
  int v6 = (int *)*((void *)this + 7);
  if (!v6)
  {
    int v8 = *((_DWORD *)this + 13);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v8 + 1);
    int v6 = (int *)*((void *)v5 + 7);
    int v8 = *v6;
LABEL_10:
    int *v6 = v8 + 1;
    this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)v5 + 5));
    unsigned int v9 = this;
    uint64_t v13 = *((void *)v5 + 7);
    uint64_t v14 = *((int *)v5 + 12);
    *((_DWORD *)v5 + 12) = v14 + 1;
    *(void *)(v13 + 8 * v14 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = this;
    if (*((_DWORD *)this + 15) != 12) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v12 = (operations_research::sat::LinearConstraintProto *)*((void *)v9 + 6);
    goto LABEL_12;
  }
  uint64_t v7 = *((int *)this + 12);
  int v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *((_DWORD *)this + 13)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *((_DWORD *)this + 12) = v7 + 1;
  unsigned int v9 = *(operations_research::sat::CpModelBuilder **)&v6[2 * v7 + 2];
  if (*((_DWORD *)v9 + 15) == 12) {
    goto LABEL_11;
  }
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v10 = *((void *)v9 + 1);
  uint64_t v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if (v10) {
    uint64_t v11 = *(google::protobuf::Arena **)v11;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v11);
  uint64_t v12 = this;
  *((void *)v9 + 6) = this;
LABEL_12:
  operations_research::sat::CpModelBuilder::FillLinearTerms(this, a2, a3, v12);
  uint64_t v15 = *((void *)a3 + 6);
  uint64_t v16 = *((void *)a2 + 6);
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v17 = *((void *)v9 + 6);
    uint64_t v19 = *(unsigned int *)(v17 + 64);
    int v18 = (unsigned int *)(v17 + 64);
    int v20 = v19 + 1;
    if (v19 != *(_DWORD *)(v17 + 68)) {
      goto LABEL_19;
    }
LABEL_18:
    google::protobuf::RepeatedField<long long>::Reserve(v18, v20);
    goto LABEL_19;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v21 = *((void *)v9 + 1);
  uint64_t v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if (v21) {
    uint64_t v22 = *(google::protobuf::Arena **)v22;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v22);
  uint64_t v17 = v23;
  *((void *)v9 + 6) = v23;
  uint64_t v19 = *(unsigned int *)(v23 + 64);
  int v24 = *(_DWORD *)(v23 + 68);
  int v18 = (unsigned int *)(v23 + 64);
  int v20 = v19 + 1;
  if (v19 == v24) {
    goto LABEL_18;
  }
LABEL_19:
  *(void *)(*(void *)(v17 + 72) + 8 * v19) = 0x8000000000000000;
  *(_DWORD *)(v17 + 64) = v20;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v25 = *((void *)v9 + 6);
    uint64_t v27 = *(unsigned int *)(v25 + 64);
    uint64_t v26 = (unsigned int *)(v25 + 64);
    int v28 = v27 + 1;
    if (v27 != *(_DWORD *)(v25 + 68)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v29 = *((void *)v9 + 1);
  uint64_t v30 = (google::protobuf::Arena *)(v29 & 0xFFFFFFFFFFFFFFFELL);
  if (v29) {
    uint64_t v30 = *(google::protobuf::Arena **)v30;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v30);
  uint64_t v25 = v31;
  *((void *)v9 + 6) = v31;
  uint64_t v27 = *(unsigned int *)(v31 + 64);
  int v32 = *(_DWORD *)(v31 + 68);
  uint64_t v26 = (unsigned int *)(v31 + 64);
  int v28 = v27 + 1;
  if (v27 == v32) {
LABEL_25:
  }
    google::protobuf::RepeatedField<long long>::Reserve(v26, v28);
LABEL_26:
  *(void *)(*(void *)(v25 + 72) + 8 * v27) = v15 - v16;
  *(_DWORD *)(v25 + 64) = v28;
  return v9;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::AddNotEqual(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3)
{
  unint64_t v5 = this;
  int v6 = (int *)*((void *)this + 7);
  if (!v6)
  {
    int v8 = *((_DWORD *)this + 13);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v8 + 1);
    int v6 = (int *)*((void *)v5 + 7);
    int v8 = *v6;
LABEL_10:
    int *v6 = v8 + 1;
    this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)v5 + 5));
    unsigned int v9 = this;
    uint64_t v13 = *((void *)v5 + 7);
    uint64_t v14 = *((int *)v5 + 12);
    *((_DWORD *)v5 + 12) = v14 + 1;
    *(void *)(v13 + 8 * v14 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = this;
    if (*((_DWORD *)this + 15) != 12) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v12 = (operations_research::sat::LinearConstraintProto *)*((void *)v9 + 6);
    goto LABEL_12;
  }
  uint64_t v7 = *((int *)this + 12);
  int v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *((_DWORD *)this + 13)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *((_DWORD *)this + 12) = v7 + 1;
  unsigned int v9 = *(operations_research::sat::CpModelBuilder **)&v6[2 * v7 + 2];
  if (*((_DWORD *)v9 + 15) == 12) {
    goto LABEL_11;
  }
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v10 = *((void *)v9 + 1);
  uint64_t v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if (v10) {
    uint64_t v11 = *(google::protobuf::Arena **)v11;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v11);
  uint64_t v12 = this;
  *((void *)v9 + 6) = this;
LABEL_12:
  operations_research::sat::CpModelBuilder::FillLinearTerms(this, a2, a3, v12);
  uint64_t v15 = *((void *)a3 + 6);
  uint64_t v16 = *((void *)a2 + 6);
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v17 = *((void *)v9 + 6);
    uint64_t v19 = *(unsigned int *)(v17 + 64);
    int v18 = (unsigned int *)(v17 + 64);
    int v20 = v19 + 1;
    if (v19 != *(_DWORD *)(v17 + 68)) {
      goto LABEL_19;
    }
LABEL_18:
    google::protobuf::RepeatedField<long long>::Reserve(v18, v20);
    goto LABEL_19;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v21 = *((void *)v9 + 1);
  uint64_t v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if (v21) {
    uint64_t v22 = *(google::protobuf::Arena **)v22;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v22);
  uint64_t v17 = v23;
  *((void *)v9 + 6) = v23;
  uint64_t v19 = *(unsigned int *)(v23 + 64);
  int v24 = *(_DWORD *)(v23 + 68);
  int v18 = (unsigned int *)(v23 + 64);
  int v20 = v19 + 1;
  if (v19 == v24) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v25 = v15 - v16;
  *(void *)(*(void *)(v17 + 72) + 8 * v19) = 0x8000000000000000;
  *(_DWORD *)(v17 + 64) = v20;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v26 = *((void *)v9 + 6);
    uint64_t v27 = v25 - 1;
    uint64_t v29 = *(unsigned int *)(v26 + 64);
    int v28 = (unsigned int *)(v26 + 64);
    int v30 = v29 + 1;
    if (v29 != *(_DWORD *)(v26 + 68)) {
      goto LABEL_26;
    }
LABEL_25:
    google::protobuf::RepeatedField<long long>::Reserve(v28, v30);
    goto LABEL_26;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v31 = *((void *)v9 + 1);
  int v32 = (google::protobuf::Arena *)(v31 & 0xFFFFFFFFFFFFFFFELL);
  if (v31) {
    int v32 = *(google::protobuf::Arena **)v32;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v32);
  uint64_t v26 = v33;
  *((void *)v9 + 6) = v33;
  uint64_t v27 = v25 - 1;
  uint64_t v29 = *(unsigned int *)(v33 + 64);
  int v34 = *(_DWORD *)(v33 + 68);
  int v28 = (unsigned int *)(v33 + 64);
  int v30 = v29 + 1;
  if (v29 == v34) {
    goto LABEL_25;
  }
LABEL_26:
  *(void *)(*(void *)(v26 + 72) + 8 * v29) = v27;
  *(_DWORD *)(v26 + 64) = v30;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v35 = *((void *)v9 + 6);
    uint64_t v36 = v25 + 1;
    uint64_t v38 = *(unsigned int *)(v35 + 64);
    unint64_t v37 = (unsigned int *)(v35 + 64);
    int v39 = v38 + 1;
    if (v38 != *(_DWORD *)(v35 + 68)) {
      goto LABEL_33;
    }
LABEL_32:
    google::protobuf::RepeatedField<long long>::Reserve(v37, v39);
    goto LABEL_33;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v40 = *((void *)v9 + 1);
  uint64_t v41 = (google::protobuf::Arena *)(v40 & 0xFFFFFFFFFFFFFFFELL);
  if (v40) {
    uint64_t v41 = *(google::protobuf::Arena **)v41;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v41);
  uint64_t v35 = v42;
  *((void *)v9 + 6) = v42;
  uint64_t v36 = v25 + 1;
  uint64_t v38 = *(unsigned int *)(v42 + 64);
  int v43 = *(_DWORD *)(v42 + 68);
  unint64_t v37 = (unsigned int *)(v42 + 64);
  int v39 = v38 + 1;
  if (v38 == v43) {
    goto LABEL_32;
  }
LABEL_33:
  *(void *)(*(void *)(v35 + 72) + 8 * v3google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v36;
  *(_DWORD *)(v35 + 64) = v39;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    uint64_t v44 = *((void *)v9 + 6);
    uint64_t v46 = *(unsigned int *)(v44 + 64);
    int v45 = (unsigned int *)(v44 + 64);
    int v47 = v46 + 1;
    if (v46 != *(_DWORD *)(v44 + 68)) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  uint64_t v48 = *((void *)v9 + 1);
  unint64_t v49 = (google::protobuf::Arena *)(v48 & 0xFFFFFFFFFFFFFFFELL);
  if (v48) {
    unint64_t v49 = *(google::protobuf::Arena **)v49;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v49);
  uint64_t v44 = v50;
  *((void *)v9 + 6) = v50;
  uint64_t v46 = *(unsigned int *)(v50 + 64);
  int v51 = *(_DWORD *)(v50 + 68);
  int v45 = (unsigned int *)(v50 + 64);
  int v47 = v46 + 1;
  if (v46 == v51) {
LABEL_39:
  }
    google::protobuf::RepeatedField<long long>::Reserve(v45, v47);
LABEL_40:
  *(void *)(*(void *)(v44 + 72) + 8 * v46) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(v44 + 64) = v47;
  return v9;
}

unint64_t operations_research::sat::CpModelBuilder::AddCumulative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(int **)(a1 + 56);
  if (!v5)
  {
    int v7 = *(_DWORD *)(a1 + 52);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v7 + 1);
    unint64_t v5 = *(int **)(a1 + 56);
    int v7 = *v5;
LABEL_10:
    *unint64_t v5 = v7 + 1;
    unint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a1 + 40));
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(int *)(a1 + 48);
    *(_DWORD *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v14 + 1;
    *(void *)(v13 + 8 * v14 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v8;
    if (*(_DWORD *)(v8 + 60) != 22) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v12 = *(void *)(v8 + 48);
    goto LABEL_12;
  }
  uint64_t v6 = *(int *)(a1 + 48);
  int v7 = *v5;
  if ((int)v6 >= *v5)
  {
    if (v7 != *(_DWORD *)(a1 + 52)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v6 + 1;
  unint64_t v8 = *(void *)&v5[2 * v6 + 2];
  if (*(_DWORD *)(v8 + 60) == 22) {
    goto LABEL_11;
  }
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint(v8);
  *(_DWORD *)(v8 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = 22;
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = (google::protobuf::Arena *)(v9 & 0xFFFFFFFFFFFFFFFELL);
  if (v9) {
    uint64_t v10 = *(google::protobuf::Arena **)v10;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v10);
  uint64_t v12 = v11;
  *(void *)(v8 + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v11;
LABEL_12:
  *(_DWORD *)(v12 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a3);
  return v8;
}

double operations_research::sat::CpModelBuilder::Minimize(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2)
{
  int v4 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
  if (!v4)
  {
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if (v5) {
      uint64_t v6 = *(google::protobuf::Arena **)v6;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v6);
    *((void *)this + 15) = v4;
  }
  operations_research::sat::CpObjectiveProto::Clear(v4);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  while (v7 != v8)
  {
    uint64_t v9 = *((void *)this + 15);
    if (v9)
    {
      int v10 = *(_DWORD *)(v7 + 8);
      uint64_t v12 = *(unsigned int *)(v9 + 16);
      uint64_t v11 = (unsigned int *)(v9 + 16);
      int v13 = v12 + 1;
      if (v12 != *(_DWORD *)(v9 + 20)) {
        goto LABEL_6;
      }
LABEL_14:
      google::protobuf::RepeatedField<int>::Reserve(v11, v13);
      goto LABEL_6;
    }
    uint64_t v14 = *((void *)this + 1);
    uint64_t v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    if (v14) {
      uint64_t v15 = *(google::protobuf::Arena **)v15;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v15);
    uint64_t v9 = v16;
    *((void *)this + 15) = v16;
    int v10 = *(_DWORD *)(v7 + 8);
    uint64_t v12 = *(unsigned int *)(v16 + 16);
    int v17 = *(_DWORD *)(v16 + 20);
    uint64_t v11 = (unsigned int *)(v16 + 16);
    int v13 = v12 + 1;
    if (v12 == v17) {
      goto LABEL_14;
    }
LABEL_6:
    *(_DWORD *)(*(void *)(v9 + 24) + 4 * v12) = v10;
    *(_DWORD *)(v9 + 16) = v13;
    v7 += 16;
  }
  int v18 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v19 = (uint64_t *)*((void *)a2 + 4);
  while (v18 != v19)
  {
    uint64_t v20 = *v18;
    uint64_t v21 = *((void *)this + 15);
    if (v21)
    {
      uint64_t v23 = *(unsigned int *)(v21 + 40);
      uint64_t v22 = (unsigned int *)(v21 + 40);
      int v24 = v23 + 1;
      if (v23 != *(_DWORD *)(v21 + 44)) {
        goto LABEL_16;
      }
LABEL_24:
      google::protobuf::RepeatedField<long long>::Reserve(v22, v24);
      goto LABEL_16;
    }
    uint64_t v25 = *((void *)this + 1);
    uint64_t v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      uint64_t v26 = *(google::protobuf::Arena **)v26;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v26);
    uint64_t v21 = v27;
    *((void *)this + 15) = v27;
    uint64_t v23 = *(unsigned int *)(v27 + 40);
    int v28 = *(_DWORD *)(v27 + 44);
    uint64_t v22 = (unsigned int *)(v27 + 40);
    int v24 = v23 + 1;
    if (v23 == v28) {
      goto LABEL_24;
    }
LABEL_16:
    *(void *)(*(void *)(v21 + 48) + 8 * v23) = v20;
    *(_DWORD *)(v21 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v24;
    ++v18;
  }
  uint64_t v29 = *((void *)this + 15);
  if (!v29)
  {
    uint64_t v30 = *((void *)this + 1);
    uint64_t v31 = (google::protobuf::Arena *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if (v30) {
      uint64_t v31 = *(google::protobuf::Arena **)v31;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v31);
    *((void *)this + 15) = v29;
  }
  double result = (double)*((uint64_t *)a2 + 6);
  *(double *)(v29 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = result;
  return result;
}

double operations_research::sat::CpModelBuilder::Maximize(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2)
{
  int v4 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
  if (!v4)
  {
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if (v5) {
      uint64_t v6 = *(google::protobuf::Arena **)v6;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v6);
    *((void *)this + 15) = v4;
  }
  operations_research::sat::CpObjectiveProto::Clear(v4);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  while (v7 != v8)
  {
    uint64_t v9 = *((void *)this + 15);
    if (v9)
    {
      int v10 = *(_DWORD *)(v7 + 8);
      uint64_t v12 = *(unsigned int *)(v9 + 16);
      uint64_t v11 = (unsigned int *)(v9 + 16);
      int v13 = v12 + 1;
      if (v12 != *(_DWORD *)(v9 + 20)) {
        goto LABEL_6;
      }
LABEL_14:
      google::protobuf::RepeatedField<int>::Reserve(v11, v13);
      goto LABEL_6;
    }
    uint64_t v14 = *((void *)this + 1);
    uint64_t v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    if (v14) {
      uint64_t v15 = *(google::protobuf::Arena **)v15;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v15);
    uint64_t v9 = v16;
    *((void *)this + 15) = v16;
    int v10 = *(_DWORD *)(v7 + 8);
    uint64_t v12 = *(unsigned int *)(v16 + 16);
    int v17 = *(_DWORD *)(v16 + 20);
    uint64_t v11 = (unsigned int *)(v16 + 16);
    int v13 = v12 + 1;
    if (v12 == v17) {
      goto LABEL_14;
    }
LABEL_6:
    *(_DWORD *)(*(void *)(v9 + 24) + 4 * v12) = v10;
    *(_DWORD *)(v9 + 16) = v13;
    v7 += 16;
  }
  int v18 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v19 = (uint64_t *)*((void *)a2 + 4);
  while (v18 != v19)
  {
    uint64_t v20 = *v18;
    uint64_t v21 = *((void *)this + 15);
    if (v21)
    {
      uint64_t v23 = *(unsigned int *)(v21 + 40);
      uint64_t v22 = (unsigned int *)(v21 + 40);
      int v24 = v23 + 1;
      if (v23 != *(_DWORD *)(v21 + 44)) {
        goto LABEL_16;
      }
LABEL_24:
      google::protobuf::RepeatedField<long long>::Reserve(v22, v24);
      goto LABEL_16;
    }
    uint64_t v25 = *((void *)this + 1);
    uint64_t v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      uint64_t v26 = *(google::protobuf::Arena **)v26;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v26);
    uint64_t v21 = v27;
    *((void *)this + 15) = v27;
    uint64_t v23 = *(unsigned int *)(v27 + 40);
    int v28 = *(_DWORD *)(v27 + 44);
    uint64_t v22 = (unsigned int *)(v27 + 40);
    int v24 = v23 + 1;
    if (v23 == v28) {
      goto LABEL_24;
    }
LABEL_16:
    *(void *)(*(void *)(v21 + 48) + 8 * v23) = -v20;
    *(_DWORD *)(v21 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v24;
    ++v18;
  }
  uint64_t v29 = *((void *)this + 15);
  if (!v29)
  {
    uint64_t v30 = *((void *)this + 1);
    uint64_t v31 = (google::protobuf::Arena *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if (v30) {
      uint64_t v31 = *(google::protobuf::Arena **)v31;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v31);
    *((void *)this + 15) = v29;
  }
  double result = (double)(uint64_t)-*((void *)a2 + 6);
  *(double *)(v29 + 8google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = result;
  *(void *)(v29 + 96) = 0xBFF0000000000000;
  return result;
}

uint64_t operations_research::sat::SolutionIntegerValue(uint64_t a1, uint64_t *a2)
{
  uint64_t result = a2[6];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = a2[3];
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    if (v6 < 2)
    {
      unint64_t v9 = 0;
LABEL_9:
      uint64_t v14 = (int *)(v4 + 16 * v9 + 8);
      uint64_t v15 = (uint64_t *)(v8 + 8 * v9);
      unint64_t v16 = v6 - v9;
      do
      {
        uint64_t v17 = *v14;
        v14 += 4;
        uint64_t v18 = *(void *)(v7 + 8 * v17);
        uint64_t v19 = *v15++;
        result += v19 * v18;
        --v16;
      }
      while (v16);
      return result;
    }
    uint64_t v10 = 0;
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v11 = (int *)(v4 + 24);
    uint64_t v12 = (void *)(v8 + 8);
    unint64_t v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      result += *(v12 - 1) * *(void *)(v7 + 8 * *(v11 - 4));
      v10 += *v12 * *(void *)(v7 + 8 * *v11);
      v11 += 8;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    result += v10;
    if (v6 != v9) {
      goto LABEL_9;
    }
  }
  return result;
}

BOOL operations_research::sat::SolutionBooleanValue(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a3;
  if ((a3 & 0x80000000) != 0) {
    uint64_t v3 = a3 ^ 0xFFFFFFFFLL;
  }
  return *(void *)(*(void *)(a1 + 24) + 8 * v3) == (((unint64_t)(a3 & 0x80000000) >> 31) ^ 1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      uint64_t v20 = *a1;
      uint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(void *)(*(void *)(result + 8) + 16 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(_OWORD *)(v25 + 16 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          long long v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(void *)(result + 8) + 16 * v1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  int8x16_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  int8x16_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  int8x16_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int8x16_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int8x16_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = &v5[8 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      unint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 8 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(void *)(v25 + 8 * v1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *(void *)(v25 + 8 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v26 = *(void *)(v25 + 8 * v14);
          *(void *)(v25 + 8 * v14) = *(void *)(v25 + 8 * v18);
          *(void *)(*(void *)(result + 8) + 8 * v1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void OUTLINED_FUNCTION_0_2(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = __p;
  operator delete(__p);
}

void InitDefaultsscc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1E40 = 0;
  *(void *)&dword_26AEE1E48 = 0;
  operations_research::sat::_AllDifferentConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE3F0;
  dword_26AEE1E5C = 0;
  qword_26AEE1E50 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_AllDifferentConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1C40 = 0;
  *(void *)&dword_26AEE1C48 = 0;
  operations_research::sat::_AutomatonConstraintProto_default_instance_ = (uint64_t)&unk_26F0BECE0;
  dword_26AEE1CC8 = 0;
  qword_26AEE1CC0 = 0;
  qword_26AEE1C50 = 0;
  qword_26AEE1C60 = 0;
  qword_26AEE1C68 = 0;
  qword_26AEE1C78 = 0;
  qword_26AEE1C80 = 0;
  qword_26AEE1C90 = 0;
  qword_26AEE1C98 = 0;
  qword_26AEE1CA8 = 0;
  qword_26AEE1CB0 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_AutomatonConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE17F0 = 0;
  *(void *)&dword_26AEE17F8 = 0;
  operations_research::sat::_BoolArgumentProto_default_instance_ = (uint64_t)&unk_26F0BE130;
  dword_26AEE180C = 0;
  qword_26AEE1800 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_BoolArgumentProto_default_instance_, v4);
}

void InitDefaultsscc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1B08 = 0;
  unk_26AEE1B10 = 0;
  operations_research::sat::_CircuitConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE970;
  dword_26AEE1B54 = 0;
  qword_26AEE1B18 = 0;
  qword_26AEE1B28 = 0;
  unk_26AEE1B30 = 0;
  qword_26AEE1B40 = 0;
  unk_26AEE1B48 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CircuitConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1E68 = 0;
  unk_26AEE1E70 = 0;
  operations_research::sat::_CircuitCoveringConstraintProto_default_instance_ = (uint64_t)&unk_26F0BEAD0;
  dword_26AEE1E9C = 0;
  qword_26AEE1E78 = 0;
  qword_26AEE1E88 = 0;
  unk_26AEE1E90 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1538 = 0;
  unk_26AEE1540 = 0;
  operations_research::sat::_ConstraintProto_default_instance_ = (uint64_t)&unk_26F0BED90;
  dword_26AEE1568 = 0;
  qword_26AEE1548 = 0;
  if (atomic_load_explicit(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  qword_26AEE1558 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_26AEE156C = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_ConstraintProto_default_instance_, v4);
  qword_26AEE1570 = (uint64_t)&operations_research::sat::_BoolArgumentProto_default_instance_;
  unk_26AEE1578 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  qword_26AEE1580 = (uint64_t)&operations_research::sat::_BoolArgumentProto_default_instance_;
  unk_26AEE1588 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  qword_26AEE1590 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_26AEE1598 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  qword_26AEE15A0 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_26AEE15A8 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  qword_26AEE15B0 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_26AEE15B8 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  qword_26AEE15C0 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_26AEE15C8 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  qword_26AEE15D0 = (uint64_t)&operations_research::sat::_AllDifferentConstraintProto_default_instance_;
  unk_26AEE15D8 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  qword_26AEE15E0 = (uint64_t)&operations_research::sat::_CircuitConstraintProto_default_instance_;
  unk_26AEE15E8 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
  qword_26AEE15F0 = (uint64_t)&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
  unk_26AEE15F8 = &operations_research::sat::_TableConstraintProto_default_instance_;
  qword_26AEE1600 = (uint64_t)&operations_research::sat::_AutomatonConstraintProto_default_instance_;
  unk_26AEE1608 = &operations_research::sat::_InverseConstraintProto_default_instance_;
  qword_26AEE1610 = (uint64_t)&operations_research::sat::_ReservoirConstraintProto_default_instance_;
  unk_26AEE1618 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  qword_26AEE1620 = (uint64_t)&operations_research::sat::_NoOverlapConstraintProto_default_instance_;
  unk_26AEE1628 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  qword_26AEE1630 = (uint64_t)&operations_research::sat::_CumulativeConstraintProto_default_instance_;
}

void sub_23CBD6B84(_Unwind_Exception *a1)
{
}

void InitDefaultsscc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CpModelProto_default_instance_, v4);
  qword_26AEE12D8 = (uint64_t)&operations_research::sat::_CpObjectiveProto_default_instance_;
  unk_26AEE12E0 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
}

void InitDefaultsscc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1688 = 0;
  unk_26AEE1690 = 0;
  operations_research::sat::_CpObjectiveProto_default_instance_ = (uint64_t)&unk_26F0BEE40;
  qword_26AEE16D8 = 0;
  unk_26AEE16E0 = 0;
  dword_26AEE16E8 = 0;
  qword_26AEE1698 = 0;
  qword_26AEE16A8 = 0;
  unk_26AEE16B0 = 0;
  qword_26AEE16C0 = 0;
  unk_26AEE16C8 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CpObjectiveProto_default_instance_, v4);
}

void InitDefaultsscc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)&operations_research::sat::_CpSolverResponse_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CpSolverResponse_default_instance_, v4);
}

void InitDefaultsscc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1D70 = 0;
  *(void *)&dword_26AEE1D78 = 0;
  operations_research::sat::_CumulativeConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE810;
  dword_26AEE1DA4 = 0;
  unk_26AEE1DA8 = 0;
  qword_26AEE1D80 = 0;
  qword_26AEE1D90 = 0;
  qword_26AEE1D98 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CumulativeConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1990 = 0;
  unk_26AEE1998 = 0;
  operations_research::sat::_DecisionStrategyProto_default_instance_ = (uint64_t)&unk_26F0BEFA0;
  dword_26AEE19D0 = 0;
  qword_26AEE19A0 = 0;
  qword_26AEE19B8 = 0;
  unk_26AEE19C0 = 0;
  qword_26AEE19B0 = 0;
  if (atomic_load_explicit(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  qword_26AEE19C8 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_DecisionStrategyProto_default_instance_, v4);
}

void sub_23CBD6E60(_Unwind_Exception *a1)
{
}

void InitDefaultsscc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1EA8 = 0;
  unk_26AEE1EB0 = 0;
  operations_research::sat::_DecisionStrategyProto_AffineTransformation_default_instance_ = (uint64_t)&unk_26F0BEEF0;
  qword_26AEE1EB8 = 0;
  unk_26AEE1EC0 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_DecisionStrategyProto_AffineTransformation_default_instance_, v4);
}

void InitDefaultsscc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1B60 = 0;
  *(void *)&dword_26AEE1B68 = 0;
  operations_research::sat::_ElementConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE550;
  dword_26AEE1B84 = 0;
  *(void *)&dword_26AEE1B7C = 0;
  qword_26AEE1B70 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_ElementConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1878 = 0;
  *(void *)&dword_26AEE1880 = 0;
  operations_research::sat::_IntegerArgumentProto_default_instance_ = (uint64_t)&unk_26F0BE1E0;
  dword_26AEE1894 = 0;
  unk_26AEE1898 = 0;
  qword_26AEE1888 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_IntegerArgumentProto_default_instance_, v4);
}

void InitDefaultsscc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE18A8 = 0;
  unk_26AEE18B0 = 0;
  operations_research::sat::_IntegerVariableProto_default_instance_ = (uint64_t)&unk_26F0BE080;
  dword_26AEE18D0 = 0;
  qword_26AEE18B8 = 0;
  if (atomic_load_explicit(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  qword_26AEE18C8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_IntegerVariableProto_default_instance_, v4);
}

void sub_23CBD70D0(_Unwind_Exception *a1)
{
}

void InitDefaultsscc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1BD0 = 0;
  *(void *)&dword_26AEE1BD8 = 0;
  operations_research::sat::_IntervalConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE600;
  qword_26AEE1BE0 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_IntervalConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1B90 = 0;
  *(void *)&dword_26AEE1B98 = 0;
  operations_research::sat::_InverseConstraintProto_default_instance_ = (uint64_t)&unk_26F0BEC30;
  dword_26AEE1BC4 = 0;
  qword_26AEE1BA0 = 0;
  qword_26AEE1BB0 = 0;
  qword_26AEE1BB8 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_InverseConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::LinearArgumentProto::LinearArgumentProto((operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearArgumentProto_default_instance_, v4);
  qword_26AEE1860 = (uint64_t)&operations_research::sat::_LinearExpressionProto_default_instance_;
}

void InitDefaultsscc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE19E0 = 0;
  *(void *)&dword_26AEE19E8 = 0;
  operations_research::sat::_LinearConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE4A0;
  dword_26AEE1A2C = 0;
  qword_26AEE19F0 = 0;
  qword_26AEE1A00 = 0;
  qword_26AEE1A08 = 0;
  qword_26AEE1A18 = 0;
  qword_26AEE1A20 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1A38 = 0;
  unk_26AEE1A40 = 0;
  operations_research::sat::_LinearExpressionProto_default_instance_ = (uint64_t)&unk_26F0BE290;
  dword_26AEE1A78 = 0;
  qword_26AEE1A70 = 0;
  qword_26AEE1A48 = 0;
  qword_26AEE1A58 = 0;
  unk_26AEE1A60 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearExpressionProto_default_instance_, v4);
}

void InitDefaultsscc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1DF8 = 0;
  unk_26AEE1E00 = 0;
  operations_research::sat::_NoOverlap2DConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE760;
  dword_26AEE1E30 = 0;
  byte_26AEE1E2C = 0;
  qword_26AEE1E08 = 0;
  qword_26AEE1E18 = 0;
  unk_26AEE1E20 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_NoOverlap2DConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1CD8 = 0;
  *(void *)&dword_26AEE1CE0 = 0;
  operations_research::sat::_NoOverlapConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE6B0;
  dword_26AEE1CF4 = 0;
  qword_26AEE1CE8 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_NoOverlapConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1DB8 = 0;
  unk_26AEE1DC0 = 0;
  operations_research::sat::_PartialVariableAssignment_default_instance_ = (uint64_t)&unk_26F0BF050;
  dword_26AEE1DEC = 0;
  qword_26AEE1DC8 = 0;
  qword_26AEE1DD8 = 0;
  unk_26AEE1DE0 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_PartialVariableAssignment_default_instance_, v4);
}

void InitDefaultsscc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1D00 = 0;
  unk_26AEE1D08 = 0;
  operations_research::sat::_ReservoirConstraintProto_default_instance_ = (uint64_t)&unk_26F0BE8C0;
  qword_26AEE1D50 = 0;
  unk_26AEE1D58 = 0;
  dword_26AEE1D60 = 0;
  qword_26AEE1D10 = 0;
  qword_26AEE1D20 = 0;
  unk_26AEE1D28 = 0;
  qword_26AEE1D38 = 0;
  unk_26AEE1D40 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_ReservoirConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1A88 = 0;
  *(void *)&dword_26AEE1A90 = 0;
  operations_research::sat::_RoutesConstraintProto_default_instance_ = (uint64_t)&unk_26F0BEA20;
  dword_26AEE1AF8 = 0;
  qword_26AEE1AF0 = 0;
  qword_26AEE1A98 = 0;
  qword_26AEE1AA8 = 0;
  qword_26AEE1AB0 = 0;
  qword_26AEE1AC0 = 0;
  unk_26AEE1AC8 = 0;
  qword_26AEE1AD8 = 0;
  qword_26AEE1AE0 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_RoutesConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  qword_26AEE1948 = 0;
  *(void *)&dword_26AEE1950 = 0;
  operations_research::sat::_TableConstraintProto_default_instance_ = (uint64_t)&unk_26F0BEB80;
  dword_26AEE1980 = 0;
  byte_26AEE197C = 0;
  qword_26AEE1958 = 0;
  qword_26AEE1968 = 0;
  qword_26AEE1970 = 0;

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_TableConstraintProto_default_instance_, v4);
}

uint64_t operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor(operations_research::sat *this)
{
  return file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto;
}

uint64_t operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor(operations_research::sat *this)
{
  return qword_268BCC850;
}

uint64_t operations_research::sat::CpSolverStatus_descriptor(operations_research::sat *this)
{
  return qword_268BCC858;
}

operations_research::sat::IntegerVariableProto *operations_research::sat::IntegerVariableProto::IntegerVariableProto(operations_research::sat::IntegerVariableProto *this, google::protobuf::Arena *a2)
{
  *(void *)this = &unk_26F0BE080;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = a2;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load_explicit(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_23CBD77C8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

operations_research::sat::IntegerVariableProto *operations_research::sat::IntegerVariableProto::IntegerVariableProto(operations_research::sat::IntegerVariableProto *this, const operations_research::sat::IntegerVariableProto *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BE080;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v5);
    uint64_t v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  *((_DWORD *)this + 12) = 0;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7)
  {
    if (*v4) {
      int8x16_t v8 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int8x16_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = *((void *)a2 + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    return this;
  }
  uint64_t v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*v4) {
    uint64_t v10 = *(google::protobuf::Arena **)v10;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, v10, (long long *)v9);
  return this;
}

void sub_23CBD78F4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerVariableProto::~IntegerVariableProto(operations_research::sat::IntegerVariableProto *this)
{
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      int8x16_t v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        int8x16_t v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(void *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x23ECF2BC0](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::IntegerVariableProto::~IntegerVariableProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::IntegerVariableProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = a2;
  return this;
}

void operations_research::sat::IntegerVariableProto::Clear(operations_research::sat::IntegerVariableProto *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v1 = *((void *)this + 5);
  if ((uint64_t *)v1 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_4:
    uint64_t v2 = *((void *)this + 1);
    if ((v2 & 1) == 0) {
      return;
    }
    goto LABEL_7;
  }
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v1 = 0;
    *(unsigned char *)(v1 + 23) = 0;
    goto LABEL_4;
  }
  **(unsigned char **)uint64_t v1 = 0;
  *(void *)(v1 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 1) == 0) {
    return;
  }
LABEL_7:
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v2 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

std::string::value_type *operations_research::sat::IntegerVariableProto::_InternalParse(operations_research::sat::IntegerVariableProto *this, std::string::value_type *__s, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = __s;
  uint64_t v30 = __s;
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  int8x16_t v8 = (operations_research::sat::IntegerVariableProto *)((char *)this + 16);
  uint64_t v9 = (std::string **)((char *)this + 40);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if (&v6[-*((void *)a3 + 1)] == (std::string::value_type *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (std::string::value_type *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, v6, *((_DWORD *)a3 + 23));
      uint64_t v30 = v6;
      if (__s) {
        return v6;
      }
    }
    uint64_t v13 = v6 + 1;
    unsigned int v14 = *v6;
    if ((*v6 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    unsigned int v15 = v14 + (*v13 << 7);
    unsigned int v14 = v15 - 128;
    if (*v13 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)v6, (const char *)(v15 - 128));
      uint64_t v30 = (const std::string::value_type *)TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v13 = (std::string::value_type *)TagFallback;
      unsigned int v14 = __s;
      unsigned int v16 = __s >> 3;
      if (__s >> 3 == 2) {
        goto LABEL_31;
      }
LABEL_13:
      if (v16 != 1 || v14 != 10) {
        goto LABEL_17;
      }
      unint64_t v20 = (google::protobuf::Arena *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
      if (*v7)
      {
        unint64_t v20 = *(google::protobuf::Arena **)v20;
        unint64_t v21 = *v9;
        if (*v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_25;
        }
LABEL_24:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v9, v20, (long long *)&google::protobuf::internal::fixed_address_empty_string);
        unint64_t v21 = *v9;
        uint64_t v13 = (std::string::value_type *)v30;
        goto LABEL_25;
      }
      unint64_t v21 = *v9;
      if (*v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_24;
      }
LABEL_25:
      uint64_t v30 = google::protobuf::internal::InlineGreedyStringParser(v21, v13, (uint64_t)a3);
      if (SHIBYTE(v21->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v23 = (std::string *)v21->__r_.__value_.__r.__words[0];
        size_t size = v21->__r_.__value_.__l.__size_;
        if ((size & 0x8000000000000000) != 0) {
          google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v21->__r_.__value_.__l.__size_, "size_t to int conversion", v22);
        }
        unint64_t v21 = v23;
      }
      else
      {
        size_t size = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      }
      BOOL v11 = google::protobuf::internal::VerifyUTF8(v21, size, (google::protobuf::internal *)"operations_research.sat.IntegerVariableProto.name");
      uint64_t v6 = (std::string::value_type *)v30;
      if (v30) {
        int v12 = 2;
      }
      else {
        int v12 = 4;
      }
      if (!v11 || v12 != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t v13 = v6 + 2;
LABEL_12:
      uint64_t v30 = v13;
      unsigned int v16 = v14 >> 3;
      if (v14 >> 3 != 2) {
        goto LABEL_13;
      }
LABEL_31:
      if (v14 == 18)
      {
        unint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v8, (unsigned __int8 *)v13, a3, a4);
        goto LABEL_33;
      }
      if (v14 == 16)
      {
        uint64_t Varint64 = google::protobuf::internal::ReadVarint64((google::protobuf::internal **)&v30, (const char **)__s);
        uint64_t v26 = *((unsigned int *)this + 4);
        if (v26 == *((_DWORD *)this + 5))
        {
          uint64_t v28 = Varint64;
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v8, v26 + 1);
          uint64_t Varint64 = v28;
        }
        *(void *)(*((void *)this + 3) + 8 * v26) = Varint64;
        *((_DWORD *)this + 4) = v26 + 1;
        uint64_t v6 = (std::string::value_type *)v30;
        if (!v30) {
          return v6;
        }
      }
      else
      {
LABEL_17:
        if (!v14 || (v14 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14 - 1;
          return v13;
        }
        if (*v7)
        {
          unint64_t v18 = (char *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          unint64_t v18 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v7);
          uint64_t v13 = (std::string::value_type *)v30;
        }
        unint64_t v19 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)v18, (google::protobuf::UnknownFieldSet *)v13, (const char *)a3, a5);
LABEL_33:
        uint64_t v6 = (std::string::value_type *)v19;
        uint64_t v30 = (const std::string::value_type *)v19;
        if (!v19) {
          return v6;
        }
      }
    }
  }
}

uint64_t google::protobuf::internal::ReadVarint64(google::protobuf::internal **this, const char **a2)
{
  uint64_t v3 = *this;
  uint64_t v4 = *this;
  int v6 = *(char *)v4;
  unint64_t v5 = (google::protobuf::internal *)((char *)v4 + 1);
  uint64_t v7 = v6;
  if (v6 < 0)
  {
    int v9 = v7 + (*(unsigned __int8 *)v5 << 7);
    if (*(char *)v5 < 0)
    {
      *this = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v3, (const char *)(v9 - 128));
      return v10;
    }
    else
    {
      *this = (google::protobuf::internal *)((char *)v3 + 2);
      return (v9 - 128);
    }
  }
  else
  {
    *this = v5;
    return v7;
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::IntegerVariableProto::_InternalSerialize(operations_research::sat::IntegerVariableProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  if (*((char *)v7 + 23) < 0)
  {
    int8x16_t v8 = (const char *)v7[1];
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v7 = (uint64_t *)*v7;
  }
  else
  {
    int8x16_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((unsigned char *)v7 + 23)) {
      goto LABEL_14;
    }
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"operations_research.sat.IntegerVariableProto.name");
  uint64_t v9 = *((void *)this + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    int64_t v10 = *(void *)(v9 + 8);
    if (v10 > 127) {
      goto LABEL_29;
    }
  }
  else
  {
    int64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if (*(void *)a3 - (void)a2 + 14 >= v10)
  {
    *(unsigned char *)a2 = 10;
    *((unsigned char *)a2 + 1) = v10;
    if (*(char *)(v9 + 23) >= 0) {
      BOOL v11 = (const void *)v9;
    }
    else {
      BOOL v11 = *(const void **)v9;
    }
    memcpy((char *)a2 + 2, v11, v10);
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v10 + 2);
LABEL_14:
    int v12 = *((_DWORD *)this + 8);
    if (v12 >= 1) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v9, (char *)a2);
  int v12 = *((_DWORD *)this + 8);
  if (v12 >= 1)
  {
LABEL_15:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      *(unsigned char *)a2 = 18;
      uint64_t v13 = (char *)a2 + 1;
      if (v12 < 0x80) {
        goto LABEL_17;
      }
    }
    else
    {
      *(unsigned char *)a2 = 18;
      uint64_t v13 = (char *)a2 + 1;
      if (v12 < 0x80)
      {
LABEL_17:
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        *uint64_t v13 = v12;
        unsigned int v14 = (unint64_t *)*((void *)this + 3);
        unsigned int v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
            unint64_t v21 = *v14++;
            unint64_t v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_22:
              *(unsigned char *)a2 = v16 | 0x80;
              unint64_t v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
                do
                {
                  *((unsigned char *)a2 - 1) = v18 | 0x80;
                  unint64_t v19 = v18 >> 7;
                  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
                  unint64_t v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *((unsigned char *)a2 - 1) = v19;
              }
              else
              {
                *((unsigned char *)a2 + 1) = v18;
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
              }
              goto LABEL_19;
            }
          }
          else
          {
            unint64_t v17 = *v14++;
            unint64_t v16 = v17;
            if (v17 > 0x7F) {
              goto LABEL_22;
            }
          }
          *(unsigned char *)a2 = v16;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
LABEL_19:
          if (v14 >= v15) {
            goto LABEL_30;
          }
        }
      }
    }
    do
    {
      *v13++ = v12 | 0x80;
      unsigned int v24 = v12 >> 14;
      int v12 = v12 >> 7;
    }
    while (v24);
    a2 = (google::protobuf::UnknownFieldSet *)(v13 - 1);
    goto LABEL_17;
  }
LABEL_30:
  uint64_t v22 = *((void *)this + 1);
  if ((v22 & 1) == 0) {
    return a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
}

char *operations_research::sat::IntegerVariableProto::ByteSizeLong(operations_research::sat::IntegerVariableProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 4);
  uint64_t v3 = 11;
  uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0) {
    uint64_t v3 = v4;
  }
  if (v2) {
    int v5 = v2;
  }
  else {
    int v5 = 0;
  }
  if (v2) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 0;
  }
  *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v5;
  uint64_t v7 = *((void *)this + 5);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
  {
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)(v6 + v2);
    if (!*(void *)(v7 + 8)) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v9 = (const google::protobuf::UnknownFieldSet *)(v6 + v2);
    if (!*(unsigned char *)(v7 + 23)) {
      goto LABEL_14;
    }
  }
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = v8;
  }
  uint64_t v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::IntegerVariableProto *)((char *)this + 8), v9, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v9;
    return (char *)v9;
  }
}

void operations_research::sat::IntegerVariableProto::MergeFrom(operations_research::sat::IntegerVariableProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::IntegerVariableProto::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::IntegerVariableProto::MergeFrom(operations_research::sat::IntegerVariableProto *this, const operations_research::sat::IntegerVariableProto *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)((char *)this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v10 + v9);
    uint64_t v11 = *((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 8 * v10), *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    return;
  }
  uint64_t v13 = (std::string **)((char *)this + 40);
  uint64_t v14 = *((void *)this + 1);
  unsigned int v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  if (v14)
  {
    unsigned int v15 = *(google::protobuf::Arena **)v15;
    unint64_t v16 = *v13;
    if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v16 = *v13;
    if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_11:
      unint64_t v17 = (const std::string *)*((void *)a2 + 5);
      std::string::operator=(v16, v17);
      return;
    }
  }

  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v15, (long long *)v12);
}

void operations_research::sat::IntegerVariableProto::CopyFrom(operations_research::sat::IntegerVariableProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this) {
    return;
  }
  *((_DWORD *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 5);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
      uint64_t v5 = *((void *)this + 1);
      if ((v5 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_9:
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
      }
                                                                                             + 8));
      goto LABEL_11;
    }
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    goto LABEL_9;
  }
LABEL_11:
  if (v6)
  {
    operations_research::sat::IntegerVariableProto::MergeFrom(this, v6);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v7);
  }
}

void operations_research::sat::IntegerVariableProto::CopyFrom(operations_research::sat::IntegerVariableProto *this, const operations_research::sat::IntegerVariableProto *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = a2;
    uint64_t v4 = this;
    *((_DWORD *)this + 4) = 0;
    uint64_t v5 = *((void *)this + 5);
    if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)uint64_t v5 = 0;
        *(void *)(v5 + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
        uint64_t v6 = *((void *)this + 1);
        if ((v6 & 1) == 0) {
          goto LABEL_6;
        }
        goto LABEL_11;
      }
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
    uint64_t v6 = *((void *)this + 1);
    if ((v6 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
    {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
      this = v4;
      a2 = v3;
      goto LABEL_8;
    }
LABEL_6:
LABEL_8:
    operations_research::sat::IntegerVariableProto::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::IntegerVariableProto::IsInitialized(operations_research::sat::IntegerVariableProto *this)
{
  return 1;
}

__n128 operations_research::sat::IntegerVariableProto::InternalSwap(__n128 *this, __n128 *a2)
{
  uint64_t v5 = &this->n128_u64[1];
  unint64_t v4 = this->n128_u64[1];
  unint64_t v6 = a2->n128_u64[1];
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(&a2->n128_u64[1]);
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  uint64_t v9 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v7;
  *(void *)uint64_t v7 = v9;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = *((void *)v7 + 1);
  *((void *)v7 + 1) = v10;
  uint64_t v11 = *((void *)v8 + 2);
  *((void *)v8 + 2) = *((void *)v7 + 2);
  *((void *)v7 + 2) = v11;
LABEL_8:
  unint64_t v12 = this[1].n128_u64[0];
  unint64_t v13 = this[1].n128_u64[1];
  __n128 result = a2[1];
  this[1] = result;
  a2[1].n128_u64[0] = v12;
  a2[1].n128_u64[1] = v13;
  unint64_t v15 = this[2].n128_u64[1];
  this[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v15;
  return result;
}

uint64_t operations_research::sat::IntegerVariableProto::GetMetadata(operations_research::sat::IntegerVariableProto *this)
{
  return *off_26AED01D8;
}

void operations_research::sat::BoolArgumentProto::~BoolArgumentProto(operations_research::sat::BoolArgumentProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::BoolArgumentProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::BoolArgumentProto::Clear(operations_research::sat::BoolArgumentProto *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::BoolArgumentProto::_InternalParse(operations_research::sat::BoolArgumentProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unint64_t v6 = a2;
  unint64_t v18 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (operations_research::sat::BoolArgumentProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      unint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      unint64_t v18 = v6;
      if (a2) {
        return v6;
      }
    }
    uint64_t v11 = (google::protobuf::internal *)((char *)v6 + 1);
    unsigned int v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    unsigned int v12 = v13 - 128;
    if (*(char *)v11 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      unint64_t v18 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v11 = TagFallback;
      unsigned int v12 = a2;
      if ((a2 & 0xFFFFFFF8) == 8) {
        goto LABEL_9;
      }
LABEL_14:
      if (!v12 || (v12 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
        return v11;
      }
      if (*v8)
      {
        uint64_t v10 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        uint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        uint64_t v11 = v18;
      }
      unint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v10, v11, (const char *)a3, a5);
      unint64_t v18 = v6;
      if (!v6) {
        return v6;
      }
    }
    else
    {
      uint64_t v11 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_8:
      unint64_t v18 = v11;
      if ((v12 & 0xFFFFFFF8) != 8) {
        goto LABEL_14;
      }
LABEL_9:
      if (v12 == 10)
      {
        unint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, a3, a4);
        unint64_t v18 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v12 != 8) {
          goto LABEL_14;
        }
        int v15 = google::protobuf::internal::ReadVarint64(&v18, (const char **)a2);
        uint64_t v16 = *((unsigned int *)this + 4);
        if (v16 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v16 + 1);
        }
        *(_DWORD *)(*((void *)this + 3) + 4 * v16) = v15;
        *((_DWORD *)this + 4) = v16 + 1;
        unint64_t v6 = v18;
        if (!v18) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::BoolArgumentProto::_InternalSerialize(operations_research::sat::BoolArgumentProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        unsigned __int8 *v7 = v6;
        uint64_t v8 = (int *)*((void *)this + 3);
        uint64_t v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::BoolArgumentProto::ByteSizeLong(operations_research::sat::BoolArgumentProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      uint64_t v4 = (operations_research::sat::BoolArgumentProto *)((char *)this + 8);
      if (*((unsigned char *)this + 8)) {
        goto LABEL_8;
      }
LABEL_6:
      *((_DWORD *)this + 9) = v3;
      return (char *)v3;
    }
    *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v2;
    unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
    uint64_t v4 = (operations_research::sat::BoolArgumentProto *)((char *)this + 8);
    if ((*((unsigned char *)this + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
    unint64_t v3 = 0;
    uint64_t v4 = (operations_research::sat::BoolArgumentProto *)((char *)this + 8);
    if ((*((unsigned char *)this + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:

  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
}

void operations_research::sat::BoolArgumentProto::MergeFrom(operations_research::sat::BoolArgumentProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    unsigned int v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      uint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = *((_DWORD *)v6 + 4);
    if (v11)
    {
      uint64_t v13 = *((int *)this + 4);
      unint64_t v12 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v12, v13 + v11);
      uint64_t v14 = *((void *)v12 + 1);
      *v12 += *((_DWORD *)v6 + 4);
      unint64_t v15 = (void *)(v14 + 4 * v13);
      uint64_t v16 = (const void *)v6[3];
      size_t v17 = 4 * *((int *)v6 + 4);
      memcpy(v15, v16, v17);
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::BoolArgumentProto::CopyFrom(operations_research::sat::BoolArgumentProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::BoolArgumentProto::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::BoolArgumentProto::IsInitialized(operations_research::sat::BoolArgumentProto *this)
{
  return 1;
}

uint64_t operations_research::sat::BoolArgumentProto::GetMetadata(operations_research::sat::BoolArgumentProto *this)
{
  return off_26AED01D8[2];
}

operations_research::sat::IntegerArgumentProto *operations_research::sat::IntegerArgumentProto::IntegerArgumentProto(operations_research::sat::IntegerArgumentProto *this, const operations_research::sat::IntegerArgumentProto *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BE1E0;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    unsigned int v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7)
  {
    if (*v4) {
      uint64_t v8 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  return this;
}

void sub_23CBD8DEC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto(operations_research::sat::IntegerArgumentProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::IntegerArgumentProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::IntegerArgumentProto::Clear(operations_research::sat::IntegerArgumentProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::IntegerArgumentProto::_InternalParse(operations_research::sat::IntegerArgumentProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unsigned int v6 = a2;
  unint64_t v21 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (operations_research::sat::IntegerArgumentProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      unint64_t v21 = v6;
      if (a2) {
        return v6;
      }
    }
    int v11 = (unsigned __int8 *)v6 + 1;
    unsigned int v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((char)*v11 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      unint64_t v21 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      int v11 = (unsigned __int8 *)TagFallback;
      unsigned int v12 = a2;
      unsigned int v14 = a2 >> 3;
      if (a2 >> 3 != 2) {
        goto LABEL_9;
      }
LABEL_23:
      if (v12 == 18)
      {
        unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, v11, a3, a4);
        unint64_t v21 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v12 != 16) {
          goto LABEL_13;
        }
        int v18 = google::protobuf::internal::ReadVarint64(&v21, (const char **)a2);
        uint64_t v19 = *((unsigned int *)this + 4);
        if (v19 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v19 + 1);
        }
        *(_DWORD *)(*((void *)this + 3) + 4 * v19) = v18;
        *((_DWORD *)this + 4) = v19 + 1;
        unsigned int v6 = v21;
        if (!v21) {
          return v6;
        }
      }
    }
    else
    {
      int v11 = (unsigned __int8 *)v6 + 2;
LABEL_8:
      unint64_t v21 = (google::protobuf::internal *)v11;
      unsigned int v14 = v12 >> 3;
      if (v12 >> 3 == 2) {
        goto LABEL_23;
      }
LABEL_9:
      if (v14 == 1 && v12 == 8)
      {
        unsigned int v6 = (google::protobuf::internal *)(v11 + 1);
        a2 = (google::protobuf::internal *)*v11;
        if ((a2 & 0x80) == 0) {
          goto LABEL_20;
        }
        int v16 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v16 << 7) - 128);
        if (v16 < 0)
        {
          unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v11, (const char *)a2);
          unint64_t v21 = v6;
          *((_DWORD *)this + 9) = a2;
          if (!v6) {
            return v6;
          }
        }
        else
        {
          unsigned int v6 = (google::protobuf::internal *)(v11 + 2);
LABEL_20:
          unint64_t v21 = v6;
          *((_DWORD *)this + 9) = a2;
        }
      }
      else
      {
LABEL_13:
        if (!v12 || (v12 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
          return (google::protobuf::internal *)v11;
        }
        if (*v8)
        {
          unint64_t v10 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          int v11 = (unsigned __int8 *)v21;
        }
        unsigned int v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v10, (google::protobuf::UnknownFieldSet *)v11, (const char *)a3, a5);
        unint64_t v21 = v6;
        if (!v6) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::IntegerArgumentProto::_InternalSerialize(operations_research::sat::IntegerArgumentProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 9);
  if (!v6)
  {
LABEL_9:
    int v7 = *((_DWORD *)this + 8);
    if (v7 < 1) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v6 = *((_DWORD *)this + 9);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      int v7 = *((_DWORD *)this + 8);
      if (v7 < 1) {
        goto LABEL_27;
      }
LABEL_10:
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        *a2 = 18;
        uint64_t v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80) {
          goto LABEL_12;
        }
      }
      else
      {
        *a2 = 18;
        uint64_t v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
        {
LABEL_12:
          a2 += 2;
          unsigned __int8 *v9 = v7;
          unint64_t v10 = (int *)*((void *)this + 3);
          int v11 = &v10[*((int *)this + 4)];
          while (1)
          {
            if (*(void *)a3 <= (unint64_t)a2)
            {
              a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
              unint64_t v17 = *v10++;
              unint64_t v12 = v17;
              if (v17 > 0x7F)
              {
LABEL_17:
                *a2 = v12 | 0x80;
                unint64_t v14 = v12 >> 7;
                if (v12 >> 14)
                {
                  a2 += 2;
                  do
                  {
                    *(a2 - 1) = v14 | 0x80;
                    unint64_t v15 = v14 >> 7;
                    ++a2;
                    unint64_t v16 = v14 >> 14;
                    v14 >>= 7;
                  }
                  while (v16);
                  *(a2 - 1) = v15;
                }
                else
                {
                  a2[1] = v14;
                  a2 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              unint64_t v13 = *v10++;
              unint64_t v12 = v13;
              if (v13 > 0x7F) {
                goto LABEL_17;
              }
            }
            *a2++ = v12;
LABEL_14:
            if (v10 >= v11) {
              goto LABEL_27;
            }
          }
        }
      }
      do
      {
        *v9++ = v7 | 0x80;
        unsigned int v22 = v7 >> 14;
        int v7 = v7 >> 7;
      }
      while (v22);
      a2 = (char *)(v9 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v18 = v8 >> 7;
    ++a2;
    unint64_t v19 = v8 >> 14;
    v8 >>= 7;
  }
  while (v19);
  *(a2 - 1) = v18;
  int v7 = *((_DWORD *)this + 8);
  if (v7 >= 1) {
    goto LABEL_10;
  }
LABEL_27:
  uint64_t v20 = *((void *)this + 1);
  if ((v20 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::IntegerArgumentProto::ByteSizeLong(operations_research::sat::IntegerArgumentProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
      int v4 = *((_DWORD *)this + 9);
      if (!v4) {
        goto LABEL_12;
      }
    }
    else
    {
      *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      int v4 = *((_DWORD *)this + 9);
      if (!v4) {
        goto LABEL_12;
      }
    }
LABEL_8:
    if (v4 < 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unint64_t v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v5);
    goto LABEL_12;
  }
  *((_DWORD *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  unint64_t v3 = 0;
  int v4 = *((_DWORD *)this + 9);
  if (v4) {
    goto LABEL_8;
  }
LABEL_12:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::IntegerArgumentProto *)((char *)this + 8), v3, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v3;
    return (char *)v3;
  }
}

void operations_research::sat::IntegerArgumentProto::MergeFrom(operations_research::sat::IntegerArgumentProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    unsigned int v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      unint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = *((_DWORD *)v6 + 4);
    if (v11)
    {
      uint64_t v12 = *((int *)this + 4);
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v12 + v11);
      uint64_t v13 = *((void *)this + 3);
      *((_DWORD *)this + 4) += *((_DWORD *)v6 + 4);
      memcpy((void *)(v13 + 4 * v12), (const void *)v6[3], 4 * *((int *)v6 + 4));
    }
    int v14 = *((_DWORD *)v6 + 9);
    if (v14) {
      *((_DWORD *)this + 9) = v14;
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::IntegerArgumentProto::CopyFrom(operations_research::sat::IntegerArgumentProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 9) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::IntegerArgumentProto::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::IntegerArgumentProto::IsInitialized(operations_research::sat::IntegerArgumentProto *this)
{
  return 1;
}

uint64_t operations_research::sat::IntegerArgumentProto::GetMetadata(operations_research::sat::IntegerArgumentProto *this)
{
  return off_26AED01D8[4];
}

operations_research::sat::LinearExpressionProto *operations_research::sat::LinearExpressionProto::LinearExpressionProto(operations_research::sat::LinearExpressionProto *this, const operations_research::sat::LinearExpressionProto *a2)
{
  *((void *)this + 1) = 0;
  int v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BE290;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    unsigned int v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    unint64_t v8 = (void *)*((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_DWORD *)this + 1google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  uint64_t v9 = *((void *)a2 + 1);
  if (v9)
  {
    if (*v4) {
      unint64_t v10 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, (const google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = *((void *)a2 + 8);
  return this;
}

void sub_23CBD9798(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_23CBD97B4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpressionProto::~LinearExpressionProto(operations_research::sat::LinearExpressionProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::LinearExpressionProto::~LinearExpressionProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::LinearExpressionProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void operations_research::sat::LinearExpressionProto::Clear(operations_research::sat::LinearExpressionProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::LinearExpressionProto::_InternalParse(operations_research::sat::LinearExpressionProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unsigned int v6 = a2;
  unsigned int v24 = a2;
  unint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (operations_research::sat::LinearExpressionProto *)((char *)this + 40);
  unint64_t v10 = (operations_research::sat::LinearExpressionProto *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_7:
      uint64_t v13 = (google::protobuf::internal *)((char *)v6 + 1);
      unsigned int v14 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      unsigned int v15 = v14 + (*(unsigned __int8 *)v13 << 7);
      unsigned int v14 = v15 - 128;
      if (*(char *)v13 < 0)
      {
        uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
        unsigned int v24 = TagFallback;
        if (!TagFallback) {
          return 0;
        }
        uint64_t v13 = TagFallback;
        unsigned int v14 = a2;
        unsigned int v16 = a2 >> 3;
        if (a2 >> 3 != 3) {
          goto LABEL_11;
        }
LABEL_19:
        if (v14 != 24) {
          goto LABEL_40;
        }
        unsigned int v6 = (google::protobuf::internal *)((char *)v13 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v13;
        if (*(char *)v13 < 0)
        {
          int v18 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
          if (v18 < 0)
          {
            unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v13, (const char *)a2);
            unsigned int v24 = v6;
            *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = a2;
            if (!v6) {
              return v6;
            }
            goto LABEL_6;
          }
          unsigned int v6 = (google::protobuf::internal *)((char *)v13 + 2);
          unsigned int v24 = (google::protobuf::internal *)((char *)v13 + 2);
          *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = a2;
          if ((unint64_t)v13 + 2 >= *(void *)a3) {
            break;
          }
        }
        else
        {
          unsigned int v24 = (google::protobuf::internal *)((char *)v13 + 1);
          *((void *)this + google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_26AEE1BF8 + 8) = a2;
          if ((unint64_t)v6 >= *(void *)a3) {
            break;
          }
        }
      }
      else
      {
        uint64_t v13 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
        unsigned int v24 = v13;
        unsigned int v16 = v14 >> 3;
        if (v14 >> 3 == 3) {
          goto LABEL_19;
        }
LABEL_11:
        if (v16 == 2)
        {
          if (v14 == 18)
          {
            uint64_t v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, (unsigned __int8 *)v13, a3, a4);
LABEL_5:
            unsigned int v6 = v12;
            unsigned int v24 = v12;
            if (!v12) {
              return v6;
            }
            goto LABEL_6;
          }
          if (v14 != 16)
          {
LABEL_40:
            if (!v14 || (v14 & 7) == 4)
            {
              *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14 - 1;
              return v13;
            }
            if (*v8)
            {
              int v11 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              int v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
              uint64_t v13 = v24;
            }
            uint64_t v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)v11, v13, (const char *)a3, a5);
            goto LABEL_5;
          }
          uint64_t v21 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          uint64_t v22 = *((unsigned int *)this + 10);
          if (v22 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v22 + 1);
          }
          *(void *)(*((void *)this + 6) + 8 * v22) = v21;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v22 + 1;
        }
        else
        {
          if (v16 != 1) {
            goto LABEL_40;
          }
          if (v14 == 10)
          {
            uint64_t v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, (unsigned __int8 *)v13, a3, a4);
            goto LABEL_5;
          }
          if (v14 != 8) {
            goto LABEL_40;
          }
          int v19 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          uint64_t v20 = *((unsigned int *)this + 4);
          if (v20 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v20 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v19;
          *((_DWORD *)this + 4) = v20 + 1;
        }
        unsigned int v6 = v24;
        if (!v24) {
          return v6;
        }
LABEL_6:
        if ((unint64_t)v6 >= *(void *)a3) {
          break;
        }
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    unsigned int v24 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearExpressionProto::_InternalSerialize(operations_research::sat::LinearExpressionProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        unsigned __int8 *v7 = v6;
        unint64_t v8 = (int *)*((void *)this + 3);
        uint64_t v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v27 = v6 >> 14;
      v6 >>= 7;
    }
    while (v27);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      unint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      unint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *unint64_t v17 = v16;
        int v18 = (unint64_t *)*((void *)this + 6);
        int v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v28 = v16 >> 14;
      v16 >>= 7;
    }
    while (v28);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  unint64_t v26 = *((void *)this + 8);
  if (v26)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v26 = *((void *)this + 8);
      *a2 = 24;
      if (v26 <= 0x7F) {
        goto LABEL_34;
      }
    }
    else
    {
      *a2 = 24;
      if (v26 <= 0x7F)
      {
LABEL_34:
        a2[1] = v26;
        a2 += 2;
        goto LABEL_47;
      }
    }
    a2[1] = v26 | 0x80;
    unint64_t v29 = v26 >> 7;
    if (v26 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v29 | 0x80;
        unint64_t v30 = v29 >> 7;
        ++a2;
        unint64_t v31 = v29 >> 14;
        v29 >>= 7;
      }
      while (v31);
      *(a2 - 1) = v30;
    }
    else
    {
      a2[2] = v29;
      a2 += 3;
    }
  }
LABEL_47:
  uint64_t v32 = *((void *)this + 1);
  if ((v32 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}