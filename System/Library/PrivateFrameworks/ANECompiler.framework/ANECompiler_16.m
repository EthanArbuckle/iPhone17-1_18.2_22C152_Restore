ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::arith::ConstantOp>(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, void *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  void v21[39];

  v21[38] = *MEMORY[0x263EF8340];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"arith.cmpi";
    v19[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::arith::CmpIOp::build(a1, (uint64_t)v21, *a3, *a4, *a5 - 16);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    v14 = v13;
  }
  else {
    v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void anonymous namespace'::RedundantSelectFalse::~RedundantSelectFalse(_anonymous_namespace_::RedundantSelectFalse *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::RedundantSelectFalse::matchAndRewrite(_anonymous_namespace_::RedundantSelectFalse *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  v20 = v22;
  v22[0] = a2;
  uint64_t v21 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    v5 = a2;
  }
  else {
    v5 = 0;
  }
  uint64_t v6 = *((void *)v5 + 9);
  v19[0] = *(void **)(v6 + 88);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v19);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      uint64_t v9 = *((void *)a3 + 2);
      if (!v9) {
        goto LABEL_22;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v10 = *(void *)(v8 + 24);
LABEL_12:
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v9 + 64))(v9, v10, v11, v19);
        goto LABEL_13;
      }
      goto LABEL_21;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v14 = *(void *)(DefiningOp + 72);
      uint64_t v15 = v21;
      if (v21 < HIDWORD(v21)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = v21;
      if (v21 < HIDWORD(v21)) {
        goto LABEL_17;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v15 + 1, 8);
    LODWORD(v15) = v21;
LABEL_17:
    v20[v15] = v8;
    LODWORD(v21) = v21 + 1;
    if (*(void *)(v6 + 24) == *(void *)(v14 + 24))
    {
      v18 = *(void **)(v20[1] + 24);
      v19[0] = *(void **)(*v20 + 24);
      v19[1] = v18;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v19, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v16 = *((void *)a3 + 2);
    if (v16 && mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_13:
      uint64_t v9 = v12;
      v13 = v20;
      if (v20 == v22) {
        return v9;
      }
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v9 = *((void *)a3 + 2);
  if (!v9) {
    goto LABEL_22;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v10 = *((void *)v5 + 3);
    goto LABEL_12;
  }
LABEL_21:
  uint64_t v9 = 0;
LABEL_22:
  v13 = v20;
  if (v20 != v22) {
LABEL_23:
  }
    free(v13);
  return v9;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::SelectOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.select", (const unsigned __int8 *)0xC, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    v20[2] = (uint64_t)"arith.select";
    v20[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::RedundantSelectFalse::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  v13 = "There's no operation that defines operand 2 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::RedundantSelectFalse::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  uint64_t v14 = 45;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::RedundantSelectFalse::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  v13 = "Operands 'pred' and 'pred0' must be equal";
  uint64_t v14 = 41;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::RedundantSelectTrue::~RedundantSelectTrue(_anonymous_namespace_::RedundantSelectTrue *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::RedundantSelectTrue::matchAndRewrite(_anonymous_namespace_::RedundantSelectTrue *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  v20 = v22;
  v22[0] = a2;
  uint64_t v21 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)v5 + 9);
  v19[0] = *(void **)(v6 + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v19);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      uint64_t v9 = *((void *)a3 + 2);
      if (!v9) {
        goto LABEL_23;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v10 = *(void *)(v8 + 24);
LABEL_12:
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v9 + 64))(v9, v10, v11, v19);
        goto LABEL_13;
      }
      goto LABEL_22;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v14 = *(void *)(DefiningOp + 72);
      uint64_t v15 = v21;
      if (v21 < HIDWORD(v21)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = v21;
      if (v21 < HIDWORD(v21)) {
        goto LABEL_17;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v15 + 1, 8);
    LODWORD(v15) = v21;
LABEL_17:
    v20[v15] = v8;
    LODWORD(v21) = v21 + 1;
    if ((*((unsigned char *)v5 + 46) & 0x80) != 0)
    {
      if (*(void *)(v6 + 24) != *(void *)(v14 + 24))
      {
LABEL_19:
        uint64_t v16 = *((void *)a3 + 2);
        if (v16 && mlir::RewriterBase::Listener::classof(v16))
        {
LABEL_13:
          uint64_t v9 = v12;
          v13 = v20;
          if (v20 == v22) {
            return v9;
          }
          goto LABEL_24;
        }
        goto LABEL_22;
      }
    }
    else if (*(void *)(v6 + 24) != *(void *)(v14 + 24))
    {
      goto LABEL_19;
    }
    v18 = *(void **)(v20[1] + 24);
    v19[0] = *(void **)(*v20 + 24);
    v19[1] = v18;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v19, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v9 = *((void *)a3 + 2);
  if (!v9) {
    goto LABEL_23;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v10 = *((void *)v5 + 3);
    goto LABEL_12;
  }
LABEL_22:
  uint64_t v9 = 0;
LABEL_23:
  v13 = v20;
  if (v20 != v22) {
LABEL_24:
  }
    free(v13);
  return v9;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::RedundantSelectTrue::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::RedundantSelectTrue::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  uint64_t v14 = 45;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::RedundantSelectTrue::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  v13 = "Operands 'pred' and 'pred0' must be equal";
  uint64_t v14 = 41;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void SelectI1Simplify::~SelectI1Simplify(SelectI1Simplify *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::SelectOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::SelectOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::SelectOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t SelectI1Simplify::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v17 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::Type::isInteger((mlir::Type *)&v17, 1)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  LOBYTE(v15) = 1;
  LODWORD(v16) = 1;
  unint64_t v17 = (unint64_t)mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>((mlir::Builder *)(a3 + 8), v5, (unsigned __int8 *)&v15, (unsigned int *)&v16)- 16;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t v16 = (uint64_t)mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::Value&>((mlir::OpBuilder *)(a3 + 8), v6, &v15, (uint64_t *)&v17)- 16;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v13 = *(void *)(v8 + 56);
  uint64_t v14 = v9;
  uint64_t v15 = (uint64_t)mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::Value,mlir::Value>((mlir::OpBuilder *)(a3 + 8), v7, &v14, &v13)- 16;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(*(void *)(a2 + 72) + 88);
  uint64_t v14 = (uint64_t)mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::Value,mlir::Value>((mlir::OpBuilder *)(a3 + 8), v10, &v16, &v13)- 16;
  uint64_t v11 = mlir::OpBuilder::create<mlir::arith::OrIOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), &v15, &v14);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v11);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::Value&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  int v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::Value,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.andi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.andi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  int v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

void anonymous namespace'::SelectAndCond::~SelectAndCond(_anonymous_namespace_::SelectAndCond *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SelectAndCond::matchAndRewrite(_anonymous_namespace_::SelectAndCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v23[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v21 = v23;
  v23[0] = a2;
  uint64_t v22 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v20[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v20);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0) {
        uint64_t v14 = *(void *)(DefiningOp + 72);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v11 = v14 + 64;
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 2);
      if (!v9) {
        goto LABEL_26;
      }
      if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
        goto LABEL_26;
      }
      uint64_t v11 = v5;
      if (!v10) {
        goto LABEL_26;
      }
    }
    int v15 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
      int v15 = v22;
    }
    v21[v15] = v8;
    LODWORD(v22) = v22 + 1;
    if (*(void *)(v11 + 24) == *(void *)(*((void *)v6 + 9) + 88))
    {
      __int16 v19 = *(void **)(v21[1] + 24);
      v20[0] = *(void **)(*v21 + 24);
      v20[1] = v19;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v20, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16 || !mlir::RewriterBase::Listener::classof(v16)) {
      goto LABEL_26;
    }
LABEL_24:
    uint64_t v12 = v13;
    __int16 v17 = v21;
    if (v21 == v23) {
      return v12;
    }
    goto LABEL_28;
  }
  uint64_t v12 = *((void *)a3 + 2);
  if (!v12) {
    goto LABEL_27;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v12 = 0;
LABEL_27:
  __int16 v17 = v21;
  if (v21 != v23) {
LABEL_28:
  }
    free(v17);
  return v12;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectAndCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_12(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  uint64_t v14 = 45;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectAndCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "Operands 'y' and 'y0' must be equal";
  uint64_t v14 = 35;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SelectAndNotCond::~SelectAndNotCond(_anonymous_namespace_::SelectAndNotCond *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SelectAndNotCond::matchAndRewrite(_anonymous_namespace_::SelectAndNotCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v20[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  v18 = v20;
  v20[0] = a2;
  uint64_t v19 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v17[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v17);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0) {
        uint64_t v5 = *(void *)(DefiningOp + 72) + 32;
      }
      else {
        uint64_t v5 = 32;
      }
    }
    else
    {
      uint64_t v9 = *((void *)a3 + 2);
      if (!v9 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_25;
      }
    }
    int v12 = v19;
    if (v19 >= HIDWORD(v19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
      int v12 = v19;
    }
    v18[v12] = v8;
    LODWORD(v19) = v19 + 1;
    if (*(void *)(v5 + 24) == *(void *)(*((void *)v6 + 9) + 88))
    {
      uint64_t v16 = *(void **)(v18[1] + 24);
      v17[0] = *(void **)(*v18 + 24);
      v17[1] = v16;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v17, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13 || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_25;
    }
LABEL_23:
    uint64_t v10 = v11;
    uint64_t v14 = v18;
    if (v18 == v20) {
      return v10;
    }
    goto LABEL_27;
  }
  uint64_t v10 = *((void *)a3 + 2);
  if (!v10) {
    goto LABEL_26;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    goto LABEL_23;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  uint64_t v14 = v18;
  if (v18 != v20) {
LABEL_27:
  }
    free(v14);
  return v10;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectAndNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_13(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SelectOp type";
  uint64_t v14 = 45;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectAndNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "Operands 'y' and 'y0' must be equal";
  uint64_t v14 = 35;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SelectOrCond::~SelectOrCond(_anonymous_namespace_::SelectOrCond *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SelectOrCond::matchAndRewrite(_anonymous_namespace_::SelectOrCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v23[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v21 = v23;
  v23[0] = a2;
  uint64_t v22 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((void *)v6 + 9);
  v20[0] = *(void **)(v7 + 88);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v20);
  if (DefiningOp)
  {
    uint64_t v9 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0) {
        uint64_t v12 = *(void *)(DefiningOp + 72) + 32;
      }
      else {
        uint64_t v12 = 32;
      }
    }
    else
    {
      uint64_t v10 = *((void *)a3 + 2);
      if (!v10) {
        goto LABEL_25;
      }
      if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
        goto LABEL_25;
      }
      uint64_t v12 = v5;
      if (!v11) {
        goto LABEL_25;
      }
    }
    int v15 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
      int v15 = v22;
    }
    v21[v15] = v9;
    LODWORD(v22) = v22 + 1;
    if (*(void *)(v7 + 56) == *(void *)(v12 + 24))
    {
      uint64_t v19 = *(void **)(v21[1] + 24);
      v20[0] = *(void **)(*v21 + 24);
      v20[1] = v19;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v20, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16 || !mlir::RewriterBase::Listener::classof(v16)) {
      goto LABEL_25;
    }
LABEL_23:
    uint64_t v13 = v14;
    __int16 v17 = v21;
    if (v21 == v23) {
      return v13;
    }
    goto LABEL_27;
  }
  uint64_t v13 = *((void *)a3 + 2);
  if (!v13) {
    goto LABEL_26;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    goto LABEL_23;
  }
LABEL_25:
  uint64_t v13 = 0;
LABEL_26:
  __int16 v17 = v21;
  if (v21 != v23) {
LABEL_27:
  }
    free(v17);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectOrCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 2 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      char v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectOrCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "Operands 'x' and 'x0' must be equal";
  uint64_t v14 = 35;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      char v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SelectOrNotCond::~SelectOrNotCond(_anonymous_namespace_::SelectOrNotCond *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SelectOrNotCond::matchAndRewrite(_anonymous_namespace_::SelectOrNotCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v24[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v22 = v24;
  v24[0] = a2;
  uint64_t v23 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((void *)v6 + 9);
  v21[0] = *(void **)(v7 + 88);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v21);
  if (DefiningOp)
  {
    uint64_t v9 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0) {
        uint64_t v15 = *(void *)(DefiningOp + 72);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v12 = v15 + 64;
    }
    else
    {
      uint64_t v10 = *((void *)a3 + 2);
      if (!v10) {
        goto LABEL_26;
      }
      if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
        goto LABEL_26;
      }
      uint64_t v12 = v5;
      if (!v11) {
        goto LABEL_26;
      }
    }
    int v16 = v23;
    if (v23 >= HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v23 + 1, 8);
      int v16 = v23;
    }
    v22[v16] = v9;
    LODWORD(v23) = v23 + 1;
    if (*(void *)(v7 + 56) == *(void *)(v12 + 24))
    {
      v20 = *(void **)(v22[1] + 24);
      v21[0] = *(void **)(*v22 + 24);
      v21[1] = v20;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v21, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v17 = *((void *)a3 + 2);
    if (!v17 || !mlir::RewriterBase::Listener::classof(v17)) {
      goto LABEL_26;
    }
LABEL_24:
    uint64_t v13 = v14;
    v18 = v22;
    if (v22 == v24) {
      return v13;
    }
    goto LABEL_28;
  }
  uint64_t v13 = *((void *)a3 + 2);
  if (!v13) {
    goto LABEL_27;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  v18 = v22;
  if (v22 != v24) {
LABEL_28:
  }
    free(v18);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectOrNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 2 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      char v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectOrNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "Operands 'x' and 'x0' must be equal";
  uint64_t v14 = 35;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      char v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SelectNotCond::~SelectNotCond(_anonymous_namespace_::SelectNotCond *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SelectNotCond::matchAndRewrite(_anonymous_namespace_::SelectNotCond *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  v35 = v37;
  v37[0] = a2;
  uint64_t v36 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v29 = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_62;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_35;
    }
    goto LABEL_61;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_62;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_35:
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, &v29);
      goto LABEL_36;
    }
    goto LABEL_61;
  }
  v29 = *(void **)(*(void *)(DefiningOp + 72) + 56);
  uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (v11)
  {
    uint64_t v12 = v11;
    v33 = (void *)(v11 - 16);
    uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v33);
    if (!v13) {
      goto LABEL_29;
    }
    uint64_t v14 = v13;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v13 + 48))) {
      goto LABEL_29;
    }
    v29 = v31;
    uint64_t v30 = 0x100000000;
    mlir::Operation::fold(v14, 0, 0, (uint64_t)&v29);
    unint64_t v15 = *(void *)v29 & 0xFFFFFFFFFFFFFFF8;
    if (v29 != v31) {
      free(v29);
    }
    if (!v15)
    {
LABEL_29:
      uint64_t v8 = *((void *)a3 + 2);
      if (!v8) {
        goto LABEL_62;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v9 = *(void *)(v12 + 24);
        goto LABEL_35;
      }
      goto LABEL_61;
    }
    uint64_t v16 = *((void *)a3 + 2);
    v29 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    uint64_t v30 = 176;
    if (*(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v33 = &v29, v16)
      && mlir::RewriterBase::Listener::classof(v16)
    {
      int v17 = v36;
      if (v36 >= HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 8);
        int v17 = v36;
      }
      v35[v17] = v12;
      uint64_t v18 = (v36 + 1);
      LODWORD(v36) = v18;
      if (v18 >= HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v18 + 1, 8);
        LODWORD(v18) = v36;
      }
      v35[v18] = v7;
      LODWORD(v36) = v36 + 1;
      LODWORD(v30) = 1;
      v29 = 0;
      v33 = &v29;
      char v19 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v33, v15);
      unsigned int v20 = v30;
      if (v19)
      {
        v28 = v29;
        LODWORD(v34) = 1;
        v33 = 0;
        v32 = &v33;
        if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v32, v15))
        {
          LODWORD(v30) = v34;
          v29 = v33;
          v31[0] = 1;
        }
        else
        {
          LOBYTE(v29) = 0;
          v31[0] = 0;
          if (v34 >= 0x41 && v33) {
            MEMORY[0x21667D390](v33, 0x1000C8000313F17);
          }
        }
        int v23 = v30;
        if (!v30)
        {
          if (v20 >= 0x41 && v28) {
            MEMORY[0x21667D390](v28, 0x1000C8000313F17);
          }
LABEL_57:
          uint64_t v25 = *(void *)(v35[1] + 24);
          v29 = *(void **)(*v35 + 24);
          uint64_t v30 = v25;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v29, (mlir::MLIRContext *)2, 0);
        }
        if (v30 > 0x40)
        {
          BOOL v24 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v29) == v23;
          if (v31[0] && v29) {
            MEMORY[0x21667D390](v29, 0x1000C8000313F17);
          }
        }
        else
        {
          BOOL v24 = v29 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v30);
        }
        if (v20 >= 0x41 && v28) {
          MEMORY[0x21667D390](v28, 0x1000C8000313F17);
        }
        if (v24) {
          goto LABEL_57;
        }
      }
      else if (v30 >= 0x41 && v29)
      {
        MEMORY[0x21667D390](v29, 0x1000C8000313F17);
      }
      uint64_t v26 = *((void *)a3 + 2);
      if (v26 && mlir::RewriterBase::Listener::classof(v26))
      {
LABEL_36:
        uint64_t v8 = v21;
        uint64_t v22 = v35;
        if (v35 == v37) {
          return v8;
        }
        goto LABEL_63;
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_62;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
      goto LABEL_35;
    }
  }
LABEL_61:
  uint64_t v8 = 0;
LABEL_62:
  uint64_t v22 = v35;
  if (v35 != v37) {
LABEL_63:
  }
    free(v22);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::XOrIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "::mlir::success(::mlir::matchPattern(op2->getResult(0), ::mlir::m_Constant(&arg2_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SelectNotCond::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'ones' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void SelectToExtUI::~SelectToExtUI(SelectToExtUI *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t SelectToExtUI::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_UNKNOWN **)(*(void *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return 0;
  }
  unint64_t v24 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isInteger((mlir::Type *)&v24, 1)) {
    return 0;
  }
  unint64_t v5 = *(void *)(*(void *)(a2 + 72) + 56);
  int v23 = (ZinIrHalH13g *)mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
  unint64_t v24 = v5;
  uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp
    || !mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v23, DefiningOp)|| (v7 = *(void *)(*(void *)(a2 + 72) + 88), v22 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke, v24 = v7, (uint64_t v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24)) == 0)|| !mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v22, v8))
  {
    unint64_t v12 = *(void *)(*(void *)(a2 + 72) + 56);
    int v23 = (ZinIrHalH13g *)mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
    unint64_t v24 = v12;
    uint64_t v13 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
    if (v13)
    {
      if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v23, v13))
      {
        unint64_t v14 = *(void *)(*(void *)(a2 + 72) + 88);
        uint64_t v22 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
        unint64_t v24 = v14;
        unint64_t v15 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
        if (v15)
        {
          if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v22, v15))
          {
            unint64_t v24 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v16 = *(void *)(a2 + 24);
            uint64_t v22 = *(BOOL (**)(llvm::APInt *))(*(void *)(a2 + 72) + 24);
            uint64_t v11 = 1;
            int v20 = 1;
            unint64_t v19 = *((void *)v22 + 1) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v21 = mlir::OpBuilder::create<mlir::arith::ConstantIntOp,int,mlir::Type>((mlir::OpBuilder *)(a3 + 8), v16, &v20, (uint64_t *)&v19);
            int v23 = mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::arith::ConstantIntOp>((mlir::OpBuilder *)(a3 + 8), v16, (uint64_t *)&v22, &v21);
            int v17 = mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::arith::XOrIOp>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v24, &v23);
            (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v17);
            return v11;
          }
        }
      }
    }
    return 0;
  }
  unint64_t v9 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  int v23 = *(ZinIrHalH13g **)(*(void *)(a2 + 72) + 24);
  unint64_t v24 = v9;
  BOOL v10 = mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v24, (uint64_t *)&v23);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v10);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::Value,mlir::arith::ConstantIntOp>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  v20[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4 - 16);
  unint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantIntOp,int,mlir::Type>(mlir::OpBuilder *a1, uint64_t a2, int *a3, uint64_t *a4)
{
  v30[28] = *MEMORY[0x263EF8340];
  uint64_t v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v25 = 1283;
    v24[2] = (uint64_t)"arith.constant";
    v24[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  uint64_t v11 = *a4;
  IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)a1, v11, *a3);
  uint64_t v13 = IntegerAttr;
  if (IntegerAttr)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IntegerAttr + 8);
    uint64_t v15 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((uint64_t)v26);
    *uint64_t v15 = v13;
    v15[1] = v14;
    uint64_t v16 = v28;
    if (v28 < v29) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  __int16 v19 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((uint64_t)v26);
  *__int16 v19 = 0;
  v19[1] = 0;
  uint64_t v16 = v28;
  if (v28 >= v29)
  {
LABEL_4:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v16 + 1, 8);
    LODWORD(v16) = v28;
  }
LABEL_5:
  *(void *)(v27 + 8 * v16) = v11;
  ++v28;
  __int16 v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v26);
  uint64_t v18 = v17;
  if (v17)
  {
    if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      v24[0] = *((void *)v17 - 1) & 0xFFFFFFFFFFFFFFF8;
      if (!mlir::Type::isSignlessInteger((mlir::Type *)v24)) {
        uint64_t v18 = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v25[28] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"arith.extui";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  unsigned int v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    unsigned int v12 = v23;
  }
  *(void *)(v22 + 8 * v12) = v11;
  ++v23;
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtUIOp,mlir::Type,mlir::arith::XOrIOp>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  v25[28] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"arith.extui";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  v19[0] = *a4 - 16;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  unsigned int v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    unsigned int v12 = v23;
  }
  *(void *)(v22 + 8 * v12) = v11;
  ++v23;
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::raw_ostream *a6, uint64_t a7)
{
  uint64_t v12 = result;
  BOOL v13 = result == a3;
  if (result != a3 || a2 != a4)
  {
    __n128 result = (*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 160))(a5, *(void *)(result + 32 * a2 + 24));
    if (!v13 || a2 + 1 != a4)
    {
      if (!v13)
      {
        for (i = (uint64_t *)(v12 + 32 * a2 + 56); ; i += 4)
        {
          uint64_t v22 = *(const char **)a7;
          unint64_t v23 = *(void *)(a7 + 8);
          unsigned int v24 = (void *)*((void *)a6 + 4);
          if (v23 > *((void *)a6 + 3) - (void)v24)
          {
            llvm::raw_ostream::write(a6, v22, *(void *)(a7 + 8));
          }
          else if (v23)
          {
            memcpy(v24, v22, *(void *)(a7 + 8));
            *((void *)a6 + 4) += v23;
          }
          uint64_t v21 = *i;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 160))(a5, v21);
        }
      }
      uint64_t v14 = ~a2 + a4;
      uint64_t v15 = (uint64_t *)(v12 + 32 * a2 + 56);
      do
      {
        __int16 v17 = *(const char **)a7;
        unint64_t v18 = *(void *)(a7 + 8);
        __int16 v19 = (void *)*((void *)a6 + 4);
        if (v18 > *((void *)a6 + 3) - (void)v19)
        {
          llvm::raw_ostream::write(a6, v17, *(void *)(a7 + 8));
        }
        else if (v18)
        {
          memcpy(v19, v17, *(void *)(a7 + 8));
          *((void *)a6 + 4) += v18;
        }
        uint64_t v16 = *v15;
        v15 += 4;
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a5 + 160))(a5, v16);
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_5arith17FastMathFlagsAttrEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSF_S5_EUlS4_S5_E_EES2_lS4_S5_(mlir::AsmParser **a1, uint64_t *a2)
{
  uint64_t v3 = mlir::arith::FastMathFlagsAttr::parse(*a1);
  *a2 = v3;
  return v3 != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::AddFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpIOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    __int16 v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      __int16 v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unsigned int v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::AsmParser::parseAttribute<mlir::TypedAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v21 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 408))(a1, &v21, a3)) {
    return 0;
  }
  long long v7 = v21;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v21 + 8))
  {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v7 + 8);
    *a2 = v7;
    a2[1] = v8;
    if (v7) {
      return 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  int v19 = "invalid kind of attribute specified";
  __int16 v20 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v22, a1, v6, &v19);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  }
  if (v29)
  {
    uint64_t v11 = __p;
    if (__p)
    {
      uint64_t v12 = v28;
      BOOL v13 = __p;
      if (v28 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        BOOL v13 = __p;
      }
      uint64_t v28 = v11;
      operator delete(v13);
    }
    long long v14 = v25;
    if (v25)
    {
      unint64_t v15 = v26;
      uint64_t v16 = v25;
      if (v26 != v25)
      {
        do
        {
          uint64_t v18 = *--v15;
          uint64_t v17 = v18;
          *unint64_t v15 = 0;
          if (v18) {
            MEMORY[0x21667D390](v17, 0x1000C8077774924);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v25;
      }
      uint64_t v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24) {
      free(v23);
    }
  }
  return v9;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::DivFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaxNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaximumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinimumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MulFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::NegFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::RemFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::SubFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    unint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        unint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      __int16 v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *__int16 v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void mlir::arith::ArithDialect::initialize(mlir::arith::ArithDialect *this)
{
}

void mlir::arith::ArithDialect::ArithDialect(mlir::arith::ArithDialect *this, mlir::MLIRContext *a2)
{
  v2 = (mlir::arith::ArithDialect *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"arith", 5, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id);
  *(void *)v2 = &unk_26C37F210;
  mlir::arith::ArithDialect::initialize(v2);
}

void mlir::arith::ArithDialect::~ArithDialect(llvm **this)
{
}

void sub_211507C5C()
{
  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::arith::FastMathFlagsAttr::get(mlir::MLIRContext *a1, unsigned int a2)
{
  unsigned int v5 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  v6[1] = a1;
  return mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, &v5);
}

uint64_t mlir::arith::FastMathFlagsAttr::parse(mlir::AsmParser *a1)
{
  uint64_t v208 = *MEMORY[0x263EF8340];
  mlir::AsmParser::getContext(a1);
  (*(void (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 152))(a1)) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
  unsigned int v3 = 0;
  v185 = 0;
  uint64_t v186 = 0;
  do
  {
    if (!mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v185)) {
      goto LABEL_67;
    }
    uint64_t v4 = mlir::arith::symbolizeFastMathFlags(v185, v186);
    if ((v4 & 0xFF00000000) == 0)
    {
      __int16 v184 = 257;
      (*(void (**)(void *__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(void *)a1 + 24))(v198, a1, v2, v183);
      if (v198[0])
      {
        int v187 = 3;
        v188 = "expected ";
        uint64_t v189 = 9;
        uint64_t v8 = &v187;
        uint64_t v9 = v199;
        if (v200 >= v201)
        {
          unint64_t v124 = v200 + 1;
          if (v199 <= &v187 && &v199[6 * v200] > &v187)
          {
            int64_t v157 = (char *)&v187 - (char *)v199;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v124, 24);
            uint64_t v9 = v199;
            uint64_t v8 = (int *)((char *)v199 + v157);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v124, 24);
            uint64_t v8 = &v187;
            uint64_t v9 = v199;
          }
        }
        uint64_t v10 = &v9[6 * v200];
        long long v11 = *(_OWORD *)v8;
        *((void *)v10 + 2) = *((void *)v8 + 2);
        *(_OWORD *)uint64_t v10 = v11;
        uint64_t v12 = ++v200;
        if (v198[0])
        {
          int v187 = 3;
          v188 = "::mlir::arith::FastMathFlags";
          uint64_t v189 = 28;
          BOOL v13 = &v187;
          long long v14 = v199;
          if (v12 >= v201)
          {
            unint64_t v125 = v12 + 1;
            BOOL v126 = &v199[6 * v12] > &v187;
            if (v199 <= &v187 && v126)
            {
              int64_t v160 = (char *)&v187 - (char *)v199;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v125, 24);
              long long v14 = v199;
              BOOL v13 = (int *)((char *)v199 + v160);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v125, 24);
              BOOL v13 = &v187;
              long long v14 = v199;
            }
          }
          unint64_t v15 = &v14[6 * v200];
          long long v16 = *(_OWORD *)v13;
          *((void *)v15 + 2) = *((void *)v13 + 2);
          *(_OWORD *)unint64_t v15 = v16;
          uint64_t v17 = ++v200;
          if (v198[0])
          {
            int v187 = 3;
            v188 = " to be one of: ";
            uint64_t v189 = 15;
            unsigned int v18 = &v187;
            int v19 = v199;
            if (v17 >= v201)
            {
              unint64_t v127 = v17 + 1;
              BOOL v128 = &v199[6 * v17] > &v187;
              if (v199 <= &v187 && v128)
              {
                int64_t v163 = (char *)&v187 - (char *)v199;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v127, 24);
                int v19 = v199;
                unsigned int v18 = (int *)((char *)v199 + v163);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v127, 24);
                unsigned int v18 = &v187;
                int v19 = v199;
              }
            }
            unint64_t v20 = &v19[6 * v200];
            long long v21 = *(_OWORD *)v18;
            *((void *)v20 + 2) = *((void *)v18 + 2);
            *(_OWORD *)unint64_t v20 = v21;
            uint64_t v22 = ++v200;
            if (v198[0])
            {
              int v187 = 3;
              v188 = "none";
              uint64_t v189 = 4;
              unint64_t v23 = &v187;
              uint64_t v24 = v199;
              if (v22 >= v201)
              {
                unint64_t v129 = v22 + 1;
                BOOL v130 = &v199[6 * v22] > &v187;
                if (v199 <= &v187 && v130)
                {
                  int64_t v166 = (char *)&v187 - (char *)v199;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v129, 24);
                  uint64_t v24 = v199;
                  unint64_t v23 = (int *)((char *)v199 + v166);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v129, 24);
                  unint64_t v23 = &v187;
                  uint64_t v24 = v199;
                }
              }
              __int16 v25 = &v24[6 * v200];
              long long v26 = *(_OWORD *)v23;
              *((void *)v25 + 2) = *((void *)v23 + 2);
              *(_OWORD *)__int16 v25 = v26;
              uint64_t v27 = ++v200;
              if (v198[0])
              {
                int v187 = 3;
                v188 = ", ";
                uint64_t v189 = 2;
                uint64_t v28 = &v187;
                unint64_t v29 = v199;
                if (v27 >= v201)
                {
                  unint64_t v131 = v27 + 1;
                  BOOL v132 = &v199[6 * v27] > &v187;
                  if (v199 <= &v187 && v132)
                  {
                    int64_t v167 = (char *)&v187 - (char *)v199;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v131, 24);
                    unint64_t v29 = v199;
                    uint64_t v28 = (int *)((char *)v199 + v167);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v131, 24);
                    uint64_t v28 = &v187;
                    unint64_t v29 = v199;
                  }
                }
                unint64_t v30 = &v29[6 * v200];
                long long v31 = *(_OWORD *)v28;
                *((void *)v30 + 2) = *((void *)v28 + 2);
                *(_OWORD *)unint64_t v30 = v31;
                uint64_t v32 = ++v200;
                if (v198[0])
                {
                  int v187 = 3;
                  v188 = "reassoc";
                  uint64_t v189 = 7;
                  v33 = &v187;
                  uint64_t v34 = v199;
                  if (v32 >= v201)
                  {
                    unint64_t v133 = v32 + 1;
                    BOOL v134 = &v199[6 * v32] > &v187;
                    if (v199 <= &v187 && v134)
                    {
                      int64_t v168 = (char *)&v187 - (char *)v199;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v133, 24);
                      uint64_t v34 = v199;
                      v33 = (int *)((char *)v199 + v168);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v133, 24);
                      v33 = &v187;
                      uint64_t v34 = v199;
                    }
                  }
                  uint64_t v35 = &v34[6 * v200];
                  long long v36 = *(_OWORD *)v33;
                  *((void *)v35 + 2) = *((void *)v33 + 2);
                  *(_OWORD *)uint64_t v35 = v36;
                  uint64_t v37 = ++v200;
                  if (v198[0])
                  {
                    int v187 = 3;
                    v188 = ", ";
                    uint64_t v189 = 2;
                    uint64_t v38 = &v187;
                    int v39 = v199;
                    if (v37 >= v201)
                    {
                      unint64_t v135 = v37 + 1;
                      BOOL v136 = &v199[6 * v37] > &v187;
                      if (v199 <= &v187 && v136)
                      {
                        int64_t v169 = (char *)&v187 - (char *)v199;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v135, 24);
                        int v39 = v199;
                        uint64_t v38 = (int *)((char *)v199 + v169);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v135, 24);
                        uint64_t v38 = &v187;
                        int v39 = v199;
                      }
                    }
                    v40 = &v39[6 * v200];
                    long long v41 = *(_OWORD *)v38;
                    *((void *)v40 + 2) = *((void *)v38 + 2);
                    *(_OWORD *)v40 = v41;
                    uint64_t v42 = ++v200;
                    if (v198[0])
                    {
                      int v187 = 3;
                      v188 = "nnan";
                      uint64_t v189 = 4;
                      v43 = &v187;
                      v44 = v199;
                      if (v42 >= v201)
                      {
                        unint64_t v137 = v42 + 1;
                        BOOL v138 = &v199[6 * v42] > &v187;
                        if (v199 <= &v187 && v138)
                        {
                          int64_t v170 = (char *)&v187 - (char *)v199;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v137, 24);
                          v44 = v199;
                          v43 = (int *)((char *)v199 + v170);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v137, 24);
                          v43 = &v187;
                          v44 = v199;
                        }
                      }
                      uint64_t v45 = &v44[6 * v200];
                      long long v46 = *(_OWORD *)v43;
                      *((void *)v45 + 2) = *((void *)v43 + 2);
                      *(_OWORD *)uint64_t v45 = v46;
                      uint64_t v47 = ++v200;
                      if (v198[0])
                      {
                        int v187 = 3;
                        v188 = ", ";
                        uint64_t v189 = 2;
                        unsigned __int8 v48 = &v187;
                        uint64_t v49 = v199;
                        if (v47 >= v201)
                        {
                          unint64_t v139 = v47 + 1;
                          BOOL v140 = &v199[6 * v47] > &v187;
                          if (v199 <= &v187 && v140)
                          {
                            int64_t v171 = (char *)&v187 - (char *)v199;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v139, 24);
                            uint64_t v49 = v199;
                            unsigned __int8 v48 = (int *)((char *)v199 + v171);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v139, 24);
                            unsigned __int8 v48 = &v187;
                            uint64_t v49 = v199;
                          }
                        }
                        v50 = &v49[6 * v200];
                        long long v51 = *(_OWORD *)v48;
                        *((void *)v50 + 2) = *((void *)v48 + 2);
                        *(_OWORD *)v50 = v51;
                        uint64_t v52 = ++v200;
                        if (v198[0])
                        {
                          int v187 = 3;
                          v188 = "ninf";
                          uint64_t v189 = 4;
                          v53 = &v187;
                          v54 = v199;
                          if (v52 >= v201)
                          {
                            unint64_t v141 = v52 + 1;
                            BOOL v142 = &v199[6 * v52] > &v187;
                            if (v199 <= &v187 && v142)
                            {
                              int64_t v172 = (char *)&v187 - (char *)v199;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v141, 24);
                              v54 = v199;
                              v53 = (int *)((char *)v199 + v172);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v141, 24);
                              v53 = &v187;
                              v54 = v199;
                            }
                          }
                          v55 = &v54[6 * v200];
                          long long v56 = *(_OWORD *)v53;
                          *((void *)v55 + 2) = *((void *)v53 + 2);
                          *(_OWORD *)v55 = v56;
                          uint64_t v57 = ++v200;
                          if (v198[0])
                          {
                            int v187 = 3;
                            v188 = ", ";
                            uint64_t v189 = 2;
                            v58 = &v187;
                            v59 = v199;
                            if (v57 >= v201)
                            {
                              unint64_t v143 = v57 + 1;
                              BOOL v144 = &v199[6 * v57] > &v187;
                              if (v199 <= &v187 && v144)
                              {
                                int64_t v173 = (char *)&v187 - (char *)v199;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v143, 24);
                                v59 = v199;
                                v58 = (int *)((char *)v199 + v173);
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v143, 24);
                                v58 = &v187;
                                v59 = v199;
                              }
                            }
                            v60 = &v59[6 * v200];
                            long long v61 = *(_OWORD *)v58;
                            *((void *)v60 + 2) = *((void *)v58 + 2);
                            *(_OWORD *)v60 = v61;
                            uint64_t v62 = ++v200;
                            if (v198[0])
                            {
                              int v187 = 3;
                              v188 = "nsz";
                              uint64_t v189 = 3;
                              v63 = &v187;
                              v64 = v199;
                              if (v62 >= v201)
                              {
                                unint64_t v145 = v62 + 1;
                                BOOL v146 = &v199[6 * v62] > &v187;
                                if (v199 <= &v187 && v146)
                                {
                                  int64_t v174 = (char *)&v187 - (char *)v199;
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v145, 24);
                                  v64 = v199;
                                  v63 = (int *)((char *)v199 + v174);
                                }
                                else
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v145, 24);
                                  v63 = &v187;
                                  v64 = v199;
                                }
                              }
                              v65 = &v64[6 * v200];
                              long long v66 = *(_OWORD *)v63;
                              *((void *)v65 + 2) = *((void *)v63 + 2);
                              *(_OWORD *)v65 = v66;
                              uint64_t v67 = ++v200;
                              if (v198[0])
                              {
                                int v187 = 3;
                                v188 = ", ";
                                uint64_t v189 = 2;
                                v68 = &v187;
                                v69 = v199;
                                if (v67 >= v201)
                                {
                                  unint64_t v147 = v67 + 1;
                                  BOOL v148 = &v199[6 * v67] > &v187;
                                  if (v199 <= &v187 && v148)
                                  {
                                    int64_t v175 = (char *)&v187 - (char *)v199;
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v147, 24);
                                    v69 = v199;
                                    v68 = (int *)((char *)v199 + v175);
                                  }
                                  else
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v147, 24);
                                    v68 = &v187;
                                    v69 = v199;
                                  }
                                }
                                v70 = &v69[6 * v200];
                                long long v71 = *(_OWORD *)v68;
                                *((void *)v70 + 2) = *((void *)v68 + 2);
                                *(_OWORD *)v70 = v71;
                                uint64_t v72 = ++v200;
                                if (v198[0])
                                {
                                  int v187 = 3;
                                  v188 = "arcp";
                                  uint64_t v189 = 4;
                                  v73 = &v187;
                                  v74 = v199;
                                  if (v72 >= v201)
                                  {
                                    unint64_t v149 = v72 + 1;
                                    BOOL v150 = &v199[6 * v72] > &v187;
                                    if (v199 <= &v187 && v150)
                                    {
                                      int64_t v176 = (char *)&v187 - (char *)v199;
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v149, 24);
                                      v74 = v199;
                                      v73 = (int *)((char *)v199 + v176);
                                    }
                                    else
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v149, 24);
                                      v73 = &v187;
                                      v74 = v199;
                                    }
                                  }
                                  v75 = &v74[6 * v200];
                                  long long v76 = *(_OWORD *)v73;
                                  *((void *)v75 + 2) = *((void *)v73 + 2);
                                  *(_OWORD *)v75 = v76;
                                  uint64_t v77 = ++v200;
                                  if (v198[0])
                                  {
                                    int v187 = 3;
                                    v188 = ", ";
                                    uint64_t v189 = 2;
                                    v78 = &v187;
                                    v79 = v199;
                                    if (v77 >= v201)
                                    {
                                      unint64_t v151 = v77 + 1;
                                      BOOL v152 = &v199[6 * v77] > &v187;
                                      if (v199 <= &v187 && v152)
                                      {
                                        int64_t v177 = (char *)&v187 - (char *)v199;
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v151, 24);
                                        v79 = v199;
                                        v78 = (int *)((char *)v199 + v177);
                                      }
                                      else
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v151, 24);
                                        v78 = &v187;
                                        v79 = v199;
                                      }
                                    }
                                    v80 = &v79[6 * v200];
                                    long long v81 = *(_OWORD *)v78;
                                    *((void *)v80 + 2) = *((void *)v78 + 2);
                                    *(_OWORD *)v80 = v81;
                                    uint64_t v82 = ++v200;
                                    if (v198[0])
                                    {
                                      int v187 = 3;
                                      v188 = "contract";
                                      uint64_t v189 = 8;
                                      v83 = &v187;
                                      v84 = v199;
                                      if (v82 >= v201)
                                      {
                                        unint64_t v153 = v82 + 1;
                                        BOOL v154 = &v199[6 * v82] > &v187;
                                        if (v199 <= &v187 && v154)
                                        {
                                          int64_t v178 = (char *)&v187 - (char *)v199;
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v153, 24);
                                          v84 = v199;
                                          v83 = (int *)((char *)v199 + v178);
                                        }
                                        else
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v153, 24);
                                          v83 = &v187;
                                          v84 = v199;
                                        }
                                      }
                                      v85 = &v84[6 * v200];
                                      long long v86 = *(_OWORD *)v83;
                                      *((void *)v85 + 2) = *((void *)v83 + 2);
                                      *(_OWORD *)v85 = v86;
                                      uint64_t v87 = ++v200;
                                      if (v198[0])
                                      {
                                        int v187 = 3;
                                        v188 = ", ";
                                        uint64_t v189 = 2;
                                        v88 = &v187;
                                        v89 = v199;
                                        if (v87 >= v201)
                                        {
                                          unint64_t v155 = v87 + 1;
                                          BOOL v156 = &v199[6 * v87] > &v187;
                                          if (v199 <= &v187 && v156)
                                          {
                                            int64_t v179 = (char *)&v187 - (char *)v199;
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v155, 24);
                                            v89 = v199;
                                            v88 = (int *)((char *)v199 + v179);
                                          }
                                          else
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v155, 24);
                                            v88 = &v187;
                                            v89 = v199;
                                          }
                                        }
                                        v90 = &v89[6 * v200];
                                        long long v91 = *(_OWORD *)v88;
                                        *((void *)v90 + 2) = *((void *)v88 + 2);
                                        *(_OWORD *)v90 = v91;
                                        uint64_t v92 = ++v200;
                                        if (v198[0])
                                        {
                                          int v187 = 3;
                                          v188 = "afn";
                                          uint64_t v189 = 3;
                                          v93 = &v187;
                                          v94 = v199;
                                          if (v92 >= v201)
                                          {
                                            unint64_t v158 = v92 + 1;
                                            BOOL v159 = &v199[6 * v92] > &v187;
                                            if (v199 <= &v187 && v159)
                                            {
                                              int64_t v180 = (char *)&v187 - (char *)v199;
                                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v158, 24);
                                              v94 = v199;
                                              v93 = (int *)((char *)v199 + v180);
                                            }
                                            else
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v158, 24);
                                              v93 = &v187;
                                              v94 = v199;
                                            }
                                          }
                                          v95 = &v94[6 * v200];
                                          long long v96 = *(_OWORD *)v93;
                                          *((void *)v95 + 2) = *((void *)v93 + 2);
                                          *(_OWORD *)v95 = v96;
                                          uint64_t v97 = ++v200;
                                          if (v198[0])
                                          {
                                            int v187 = 3;
                                            v188 = ", ";
                                            uint64_t v189 = 2;
                                            v98 = &v187;
                                            v99 = v199;
                                            if (v97 >= v201)
                                            {
                                              unint64_t v161 = v97 + 1;
                                              BOOL v162 = &v199[6 * v97] > &v187;
                                              if (v199 <= &v187 && v162)
                                              {
                                                int64_t v181 = (char *)&v187 - (char *)v199;
                                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v161, 24);
                                                v99 = v199;
                                                v98 = (int *)((char *)v199 + v181);
                                              }
                                              else
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v161, 24);
                                                v98 = &v187;
                                                v99 = v199;
                                              }
                                            }
                                            v100 = &v99[6 * v200];
                                            long long v101 = *(_OWORD *)v98;
                                            *((void *)v100 + 2) = *((void *)v98 + 2);
                                            *(_OWORD *)v100 = v101;
                                            uint64_t v102 = ++v200;
                                            if (v198[0])
                                            {
                                              int v187 = 3;
                                              v188 = "fast";
                                              uint64_t v189 = 4;
                                              v103 = &v187;
                                              v104 = v199;
                                              if (v102 >= v201)
                                              {
                                                unint64_t v164 = v102 + 1;
                                                BOOL v165 = &v199[6 * v102] > &v187;
                                                if (v199 <= &v187 && v165)
                                                {
                                                  int64_t v182 = (char *)&v187 - (char *)v199;
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v164, 24);
                                                  v104 = v199;
                                                  v103 = (int *)((char *)v199 + v182);
                                                }
                                                else
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v202, v164, 24);
                                                  v103 = &v187;
                                                  v104 = v199;
                                                }
                                              }
                                              v105 = &v104[6 * v200];
                                              long long v106 = *(_OWORD *)v103;
                                              *((void *)v105 + 2) = *((void *)v103 + 2);
                                              *(_OWORD *)v105 = v106;
                                              ++v200;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v198);
      if (v198[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v198);
      }
      if (v207)
      {
        v107 = v205;
        if (v205)
        {
          v108 = v206;
          v109 = v205;
          if (v206 != v205)
          {
            do
              v108 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v108 - 1);
            while (v108 != v107);
            v109 = v205;
          }
          v206 = v107;
          operator delete(v109);
        }
        v110 = v203;
        if (v203)
        {
          v111 = v204;
          v112 = v203;
          if (v204 != v203)
          {
            do
            {
              uint64_t v114 = *--v111;
              uint64_t v113 = v114;
              void *v111 = 0;
              if (v114) {
                MEMORY[0x21667D390](v113, 0x1000C8077774924);
              }
            }
            while (v111 != v110);
            v112 = v203;
          }
          v204 = v110;
          operator delete(v112);
        }
        if (v199 != (int *)v202) {
          free(v199);
        }
      }
LABEL_67:
      uint64_t v115 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
      LOWORD(v200) = 259;
      (*(void (**)(void *__return_ptr, mlir::AsmParser *, uint64_t, void *))(*(void *)a1 + 24))(v190, a1, v115, v198);
      if (v190[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v190);
      }
      if (v197)
      {
        v116 = __p;
        if (__p)
        {
          v117 = v196;
          v118 = __p;
          if (v196 != __p)
          {
            do
              v117 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v117 - 1);
            while (v117 != v116);
            v118 = __p;
          }
          v196 = v116;
          operator delete(v118);
        }
        v119 = v193;
        if (v193)
        {
          v120 = v194;
          v121 = v193;
          if (v194 != v193)
          {
            do
            {
              uint64_t v123 = *--v120;
              uint64_t v122 = v123;
              void *v120 = 0;
              if (v123) {
                MEMORY[0x21667D390](v122, 0x1000C8077774924);
              }
            }
            while (v120 != v119);
            v121 = v193;
          }
          v194 = v119;
          operator delete(v121);
        }
        if (v191 != &v192) {
          free(v191);
        }
      }
      return 0;
    }
    v3 |= v4;
  }
  while ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 128))(a1));
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 168))(a1)) {
    return 0;
  }
  Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  v183[0] = v3;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v198[0] = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  v198[1] = Context;
  return mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v198, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, v183);
}

llvm::raw_ostream *mlir::arith::FastMathFlagsAttr::print(mlir::arith::FastMathFlagsAttr *this, mlir::AsmPrinter *a2)
{
  mlir::Attribute::getContext(this);
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    unsigned char *v5 = 60;
    ++*((void *)v4 + 4);
  }
  mlir::arith::stringifyFastMathFlags(*(_DWORD *)(*(void *)this + 8), (uint64_t)__p);
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  if ((v12 & 0x80u) == 0) {
    long long v7 = __p;
  }
  else {
    long long v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    size_t v8 = v12;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v6, (const char *)v7, v8);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v10) {
    return llvm::raw_ostream::write(result, ">", 1uLL);
  }
  *uint64_t v10 = 62;
  ++*((void *)result + 4);
  return result;
}

uint64_t mlir::arith::ArithDialect::parseAttribute(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  v44 = a2;
  uint64_t v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  BYTE2(v48) = 0;
  long long v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = v5;
  LOBYTE(v48) = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void ***))(*(void *)a2 + 608))(a2, &v46))
  {
    LOWORD(v48) = 256;
    if (!BYTE2(v48)) {
      BYTE2(v48) = 1;
    }
    goto LABEL_11;
  }
  v40 = (void **)"fastmath";
  long long v41 = (const char *)8;
  if (BYTE2(v48)) {
    goto LABEL_11;
  }
  uint64_t v6 = (const char *)v47;
  if (!v47)
  {
    (*(void (**)(mlir::AsmParser *, void ***, uint64_t))(*(void *)v44 + 616))(v44, &v40, 1);
    if (!BYTE2(v48))
    {
      uint64_t v6 = (const char *)v47;
      goto LABEL_41;
    }
LABEL_11:
    uint64_t v6 = 0;
    size_t v8 = 0;
    uint64_t v7 = 0;
    if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v44) > 0xFFu) {
      return v7;
    }
    goto LABEL_12;
  }
  if (v47 == (void *)8 && *v46 == (void *)0x6874616D74736166)
  {
    uint64_t v7 = mlir::arith::FastMathFlagsAttr::parse(a2);
    uint64_t v6 = 0;
    size_t v8 = 0;
    LOBYTE(v48) = v7 != 0;
    *(_WORD *)((char *)&v48 + 1) = 257;
    if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v44) > 0xFFu) {
      return v7;
    }
    goto LABEL_12;
  }
LABEL_41:
  uint64_t v7 = 0;
  size_t v8 = v46;
  LOWORD(v48) = 0;
  BYTE2(v48) = 1;
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v44) > 0xFFu) {
    return v7;
  }
LABEL_12:
  __int16 v39 = 257;
  (*(void (**)(mlir::AsmParser **__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(void *)a2 + 24))(&v44, a2, v4, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    uint64_t v42 = 19;
    uint64_t v9 = &v40;
    uint64_t v10 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v32 = v48 + 1;
      if (v47 <= &v40 && (char *)v47 + 24 * v48 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v32, 24);
        uint64_t v10 = (char *)v47;
        uint64_t v9 = (void ***)((char *)v47 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v32, 24);
        uint64_t v9 = &v40;
        uint64_t v10 = (char *)v47;
      }
    }
    long long v11 = &v10[24 * v48];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)long long v11 = v12;
    ++v48;
    if (v44)
    {
      __int16 v43 = 261;
      v40 = v8;
      long long v41 = v6;
      mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
      if (v44)
      {
        LODWORD(v40) = 3;
        uint64_t v42 = 14;
        BOOL v13 = &v40;
        long long v14 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v33 = v48 + 1;
          if (v47 <= &v40 && (char *)v47 + 24 * v48 > (char *)&v40)
          {
            int64_t v36 = (char *)&v40 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
            long long v14 = (char *)v47;
            BOOL v13 = (void ***)((char *)v47 + v36);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
            BOOL v13 = &v40;
            long long v14 = (char *)v47;
          }
        }
        unint64_t v15 = &v14[24 * v48];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)unint64_t v15 = v16;
        ++v48;
        if (v44)
        {
          uint64_t v17 = *(void ***)(a1 + 8);
          unsigned int v18 = *(const char **)(a1 + 16);
          __int16 v43 = 261;
          v40 = v17;
          long long v41 = v18;
          mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
          if (v44)
          {
            LODWORD(v40) = 3;
            uint64_t v42 = 1;
            int v19 = &v40;
            unint64_t v20 = (char *)v47;
            if (v48 >= v49)
            {
              unint64_t v34 = v48 + 1;
              if (v47 <= &v40 && (char *)v47 + 24 * v48 > (char *)&v40)
              {
                int64_t v37 = (char *)&v40 - (unsigned char *)v47;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
                unint64_t v20 = (char *)v47;
                int v19 = (void ***)((char *)v47 + v37);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
                int v19 = &v40;
                unint64_t v20 = (char *)v47;
              }
            }
            long long v21 = &v20[24 * v48];
            long long v22 = *(_OWORD *)v19;
            *((void *)v21 + 2) = v19[2];
            *(_OWORD *)long long v21 = v22;
            ++v48;
            if (v44) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
            }
          }
        }
      }
    }
  }
  if (v55)
  {
    unint64_t v23 = __p;
    if (__p)
    {
      uint64_t v24 = v54;
      __int16 v25 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        __int16 v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    long long v26 = v51;
    if (v51)
    {
      uint64_t v27 = v52;
      uint64_t v28 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          *uint64_t v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        uint64_t v28 = v51;
      }
      uint64_t v52 = v26;
      operator delete(v28);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return 0;
}

void mlir::arith::ArithDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    uint64_t v6 = a2;
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a3 + 16))(a3);
    uint64_t v5 = (void *)*((void *)v4 + 4);
    if (*((void *)v4 + 3) - (void)v5 > 7uLL)
    {
      void *v5 = 0x6874616D74736166;
      *((void *)v4 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v4, "fastmath", 8uLL);
    }
    mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v6, a3);
  }
}

void mlir::Dialect::addOperations<mlir::arith::AddFOp,mlir::arith::AddIOp,mlir::arith::AddUIExtendedOp,mlir::arith::AndIOp,mlir::arith::BitcastOp,mlir::arith::CeilDivSIOp,mlir::arith::CeilDivUIOp,mlir::arith::CmpFOp,mlir::arith::CmpIOp,mlir::arith::ConstantOp,mlir::arith::DivFOp,mlir::arith::DivSIOp,mlir::arith::DivUIOp,mlir::arith::ExtFOp,mlir::arith::ExtSIOp,mlir::arith::ExtUIOp,mlir::arith::FPToSIOp,mlir::arith::FPToUIOp,mlir::arith::FloorDivSIOp,mlir::arith::IndexCastOp,mlir::arith::IndexCastUIOp,mlir::arith::MaxNumFOp,mlir::arith::MaxSIOp,mlir::arith::MaxUIOp,mlir::arith::MaximumFOp,mlir::arith::MinNumFOp,mlir::arith::MinSIOp,mlir::arith::MinUIOp,mlir::arith::MinimumFOp,mlir::arith::MulFOp,mlir::arith::MulIOp,mlir::arith::MulSIExtendedOp,mlir::arith::MulUIExtendedOp,mlir::arith::NegFOp,mlir::arith::OrIOp,mlir::arith::RemFOp,mlir::arith::RemSIOp,mlir::arith::RemUIOp,mlir::arith::SIToFPOp,mlir::arith::ShLIOp,mlir::arith::ShRSIOp,mlir::arith::ShRUIOp,mlir::arith::SubFOp,mlir::arith::SubIOp,mlir::arith::TruncFOp,mlir::arith::TruncIOp,mlir::arith::UIToFPOp,mlir::arith::XOrIOp,mlir::arith::SelectOp>()
{
}

ZinIrHalH13g *mlir::arith::ArithDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a4;
  if (*(_UNKNOWN **)(*a3 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = v5;
  if (v5) {
    return mlir::OpBuilder::create<mlir::ub::PoisonOp,mlir::Type &,mlir::ub::PoisonAttr &>(a2, a5, &v8, &v7);
  }
  else {
    return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::ub::PoisonOp,mlir::Type &,mlir::ub::PoisonAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void **a4)
{
  v22[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"ub.poison", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v21 = 1283;
    v20[2] = (uint64_t)"ub.poison";
    v20[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  uint64_t v11 = *a3;
  long long v12 = *a4;
  if (v12) {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ub::PoisonAttrInterface>(*v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::ub::PoisonOp::build((uint64_t)a1, (uint64_t)v22, v11, (uint64_t)v12, v13);
  long long v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonOp,void>::id) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

uint64_t mlir::AsmParser::parseKeyword(mlir::AsmParser *this, llvm::StringRef *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)this + 40))(this);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, llvm::StringRef *))(*(void *)this + 384))(this, a2)) {
    return 1;
  }
  unint64_t v15 = "expected valid keyword";
  __int16 v16 = 259;
  (*(void (**)(void *__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)this + 24))(v17, this, v4, &v15);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  }
  if (v24)
  {
    uint64_t v7 = __p;
    if (__p)
    {
      uint64_t v8 = v23;
      uint64_t v9 = __p;
      if (v23 != __p)
      {
        do
          uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      unint64_t v23 = v7;
      operator delete(v9);
    }
    char v10 = v20;
    if (v20)
    {
      uint64_t v11 = v21;
      long long v12 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v14 = *--v11;
          uint64_t v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            MEMORY[0x21667D390](v13, 0x1000C8077774924);
          }
        }
        while (v11 != v10);
        long long v12 = v20;
      }
      __int16 v21 = v10;
      operator delete(v12);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v5;
}

uint64_t mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 34))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 32);
    int v3 = v2 >> 8;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 24))(&v16);
    if (v16)
    {
      __int16 v15 = 261;
      uint64_t v5 = *(void ***)(a1 + 24);
      v14[0] = *(void ***)(a1 + 16);
      v14[1] = v5;
      mlir::Diagnostic::operator<<((uint64_t)&v17, v14);
      if (v16) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
      }
    }
    if (v24)
    {
      uint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = v23;
        uint64_t v8 = __p;
        if (v23 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        unint64_t v23 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v20;
      if (v20)
      {
        char v10 = v21;
        uint64_t v11 = v20;
        if (v21 != v20)
        {
          do
          {
            uint64_t v13 = *--v10;
            uint64_t v12 = v13;
            *char v10 = 0;
            if (v13) {
              MEMORY[0x21667D390](v12, 0x1000C8077774924);
            }
          }
          while (v10 != v9);
          uint64_t v11 = v20;
        }
        __int16 v21 = v9;
        operator delete(v11);
      }
      if (v18 != &v19) {
        free(v18);
      }
    }
    LOBYTE(v2) = 0;
    int v3 = 1;
  }
  return v2 | (v3 << 8);
}

uint64_t mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = a4;
  v17[0] = a2;
  v17[1] = a3;
  unsigned int v16 = *a5;
  uint64_t v6 = &unk_267770000;
  {
    uint64_t v13 = a1;
    uint64_t v6 = &unk_267770000;
    int v10 = v9;
    uint64_t v5 = a4;
    a1 = v13;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      uint64_t v6 = (void *)&unk_267770000;
      uint64_t v5 = a4;
      a1 = v13;
    }
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * (v6[385] ^ v16 ^ ((0x9DDFEA08EB382D69 * (((8 * v16) | 4) ^ v6[385] ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                              * (((8 * v16) | 4) ^ v6[385] ^ v16)));
  v14[0] = &v16;
  v14[1] = v17;
  __int16 v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895 * ((v7 >> 47) ^ v7), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::arith::detail::FastMathFlagsAttrStorage * mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(llvm::function_ref<void ()(mlir::arith::detail::FastMathFlagsAttrStorage *)>,mlir::TypeID,mlir::arith::FastMathFlags &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(int **a1, uint64_t a2)
{
  int v4 = **a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(void *)unint64_t v10 = 0;
  *(_DWORD *)(v10 + 8) = v4;
  unint64_t v11 = a1[1];
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*((void *)v11 + 1), v10);
  }
  return v10;
}

void *_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.addf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AddFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unsigned int v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376640;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unsigned int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unsigned int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AddFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll(mlir::anec::Convolution *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(mlir::anec::Convolution::getResult(a1) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
    unint64_t v3 = 0;
  }
  unint64_t v15 = v3;
  if (!v3)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  Value = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  uint64_t v5 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  uint64_t v7 = (unsigned char *)(v5 + 8 * v6);
  unsigned int v16 = v18;
  uint64_t v17 = 0x400000000;
  uint64_t v8 = v7 - Value;
  if ((unint64_t)(v7 - Value) < 0x21)
  {
    int v9 = 0;
    unint64_t v10 = v18;
    if (v7 == Value) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v8 >> 3, 8);
  int v9 = v17;
  unint64_t v10 = v16;
  if (v7 != Value)
  {
LABEL_9:
    memcpy(&v10[v9], Value, v7 - Value);
    int v9 = v17;
    unint64_t v10 = v16;
  }
LABEL_10:
  unint64_t v11 = (unint64_t)v8 >> 3;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unint64_t v12 = v9 + ((unint64_t)v8 >> 3);
  LODWORD(v17) = v12;
  if (v12 && &v16 != (void **)a2)
  {
    if (v10 == v18)
    {
      unsigned int v14 = v9 + v11;
      unint64_t v10 = v18;
      if (v12 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v12, 8),
            unsigned int v14 = v17,
            unint64_t v10 = v16,
            v17))
      {
        memcpy(*(void **)a2, v10, 8 * v14);
        unint64_t v10 = v16;
      }
      *(_DWORD *)(a2 + 8) = v12;
    }
    else
    {
      *(void *)a2 = v10;
      int v13 = HIDWORD(v17);
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a2 + 12) = v13;
      unsigned int v16 = v18;
      HIDWORD(v17) = 0;
      unint64_t v10 = v18;
    }
    LODWORD(v17) = 0;
  }
  *(unsigned char *)(a2 + 48) = 1;
  if (v10 != v18) {
    free(v10);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::isCompatibleReturnTypes;
  unint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    unint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  unint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.addf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v24);
  if (v24) {
    mlir::Diagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)&v25, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if (v24) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  }
  if (v32)
  {
    unint64_t v15 = __p;
    if (__p)
    {
      unsigned int v16 = v31;
      uint64_t v17 = __p;
      if (v31 != __p)
      {
        do
          unsigned int v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      long long v31 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v28;
    if (v28)
    {
      uint64_t v19 = v29;
      unint64_t v20 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          *uint64_t v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        unint64_t v20 = v28;
      }
      uint64_t v29 = v18;
      operator delete(v20);
    }
    if (v26 != &v27) {
      free(v26);
    }
  }
  return v14;
}

BOOL std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a6;
  uint64_t v13 = a2;
  BOOL v15 = a1 == a3;
  if (a1 == a3 && a2 == a4)
  {
LABEL_3:
    if (a5 != a7) {
      return 0;
    }
  }
  else
  {
    if (a5 != a7)
    {
      if (a1 == a3)
      {
        while (1)
        {
          unint64_t v17 = mlir::TypeRange::dereference_iterator(a1, v13);
          if (v17 != mlir::TypeRange::dereference_iterator(a5, v10)) {
            break;
          }
          ++v13;
          ++v10;
          if (a4 == v13) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        unint64_t v19 = mlir::TypeRange::dereference_iterator(a1, a2);
        if (v19 == mlir::TypeRange::dereference_iterator(a5, v10))
        {
          uint64_t v20 = v10 + 1;
          uint64_t v21 = v13 + 1;
          do
          {
            unint64_t v22 = mlir::TypeRange::dereference_iterator(a1, v21);
            unint64_t v23 = mlir::TypeRange::dereference_iterator(a5, v20++);
            ++v21;
          }
          while (v22 == v23);
        }
      }
      return 0;
    }
    if (a1 != a3)
    {
      if (a6 != a8)
      {
        while (1)
        {
          unint64_t v24 = mlir::TypeRange::dereference_iterator(a1, v13);
          if (v24 != mlir::TypeRange::dereference_iterator(a5, v10)) {
            break;
          }
          ++v13;
          if (a8 == ++v10) {
            goto LABEL_22;
          }
        }
      }
      return 0;
    }
    while (a8 != v10)
    {
      unint64_t v18 = mlir::TypeRange::dereference_iterator(a1, v13);
      if (v18 != mlir::TypeRange::dereference_iterator(a5, v10)) {
        return 0;
      }
      ++v13;
      ++v10;
      if (a4 == v13) {
        goto LABEL_3;
      }
    }
LABEL_22:
    BOOL v25 = v15 && v13 == a4 && a5 == a7;
    uint64_t v10 = a8;
    if (!v25) {
      return 0;
    }
  }
  return v10 == a8;
}

uint64_t mlir::Diagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5, char *a6, uint64_t a7)
{
  size_t v14 = strlen(__s);
  uint64_t v15 = a1 + 16;
  unint64_t v16 = *(void *)(a1 + 16);
  LODWORD(v26) = 3;
  uint64_t v27 = __s;
  size_t v28 = v14;
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  unint64_t v18 = &v26;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v23 = v17 + 1;
    BOOL v24 = v16 + 24 * v17 > (unint64_t)&v26;
    if (v16 <= (unint64_t)&v26 && v24)
    {
      BOOL v25 = (char *)&v26 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      unint64_t v18 = (void ***)&v25[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      unint64_t v18 = &v26;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = v18[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  __int16 v29 = 262;
  uint64_t v21 = *(char **)(a3 + 8);
  long long v26 = *(void ***)a3;
  uint64_t v27 = v21;
  mlir::Diagnostic::operator<<(a1, &v26);
  return mlir::Diagnostic::append<char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10 = (char *)strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v21[0]) = 3;
  v21[1] = __s;
  v21[2] = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  size_t v14 = v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v12 + 24 * v13 > (unint64_t)v21;
    if (v12 <= (unint64_t)v21 && v19)
    {
      long long v20 = (char *)v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      size_t v14 = (char **)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      size_t v14 = v21;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  v21[0] = ", ";
  llvm::interleave<mlir::Type const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(llvm::SmallVector<mlir::Type,4u> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(void)#1},void>(*(uint64_t **)a3, (uint64_t *)(*(void *)a3 + 8 * *(unsigned int *)(a3 + 8)), a1, a1, v21);
  return mlir::Diagnostic::append<char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(uint64_t a1, char *__s, uint64_t a3)
{
  unint64_t v6 = (char *)strlen(__s);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v17[0]) = 3;
  v17[1] = __s;
  unint64_t v17[2] = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v8 + 24 * v9 > (unint64_t)v17;
    if (v8 <= (unint64_t)v17 && v15)
    {
      long long v16 = (char *)v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      uint64_t v10 = (char **)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      uint64_t v10 = v17;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  v17[0] = ", ";
  llvm::interleave<mlir::Type const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(llvm::SmallVector<mlir::Type,4u> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::SmallVector<mlir::Type,4u>>(llvm::SmallVector<mlir::Type,4u> const&,char const*)::{lambda(void)#1},void>(*(uint64_t **)a3, (uint64_t *)(*(void *)a3 + 8 * *(unsigned int *)(a3 + 8)), a1, a1, v17);
  return a1;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  mlir::arith::detail::AddFOpGenericAdaptorBase::AddFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::AddFOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  {
    uint64_t v38 = a1;
    a1 = v38;
    if (v39)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v396 = 83;
      unint64_t v40 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v40) {
        unint64_t v41 = v40;
      }
      else {
        unint64_t v41 = v396;
      }
      uint64_t v42 = &v395[v41];
      unint64_t v43 = v396 - v41;
      if (v396 - v41 >= 0x12) {
        uint64_t v44 = 18;
      }
      else {
        uint64_t v44 = v396 - v41;
      }
      unint64_t v45 = v43 - v44;
      if (v45 >= v45 - 1) {
        uint64_t v46 = v45 - 1;
      }
      else {
        uint64_t v46 = v45;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      a1 = v38;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v47 = a1;
    uint64_t v48 = v1;
    uint64_t v1 = v48;
    int v50 = v49;
    a1 = v47;
    if (v50)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v396 = 81;
      unint64_t v51 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v51) {
        unint64_t v52 = v51;
      }
      else {
        unint64_t v52 = v396;
      }
      v53 = &v395[v52];
      unint64_t v54 = v396 - v52;
      if (v396 - v52 >= 0x12) {
        uint64_t v55 = 18;
      }
      else {
        uint64_t v55 = v396 - v52;
      }
      unint64_t v56 = v54 - v55;
      if (v56 >= v56 - 1) {
        uint64_t v57 = v56 - 1;
      }
      else {
        uint64_t v57 = v56;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      uint64_t v1 = v48;
      a1 = v47;
    }
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v378 = a1;
    uint64_t v58 = v1;
    uint64_t v59 = v2;
    uint64_t v2 = v59;
    uint64_t v1 = v58;
    int v61 = v60;
    a1 = v378;
    if (v61)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v396 = 104;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v396;
      }
      v64 = &v395[v63];
      unint64_t v65 = v396 - v63;
      if (v396 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v396 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v2 = v59;
      uint64_t v1 = v58;
      a1 = v378;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v362 = v2;
    uint64_t v379 = a1;
    uint64_t v69 = v1;
    uint64_t v70 = v3;
    uint64_t v3 = v70;
    uint64_t v1 = v69;
    int v72 = v71;
    uint64_t v2 = v362;
    a1 = v379;
    if (v72)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v396 = 86;
      unint64_t v73 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v73) {
        unint64_t v74 = v73;
      }
      else {
        unint64_t v74 = v396;
      }
      v75 = &v395[v74];
      unint64_t v76 = v396 - v74;
      if (v396 - v74 >= 0x12) {
        uint64_t v77 = 18;
      }
      else {
        uint64_t v77 = v396 - v74;
      }
      unint64_t v78 = v76 - v77;
      if (v78 >= v78 - 1) {
        uint64_t v79 = v78 - 1;
      }
      else {
        uint64_t v79 = v78;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      uint64_t v3 = v70;
      uint64_t v2 = v362;
      a1 = v379;
      uint64_t v1 = v69;
    }
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v363 = v2;
    uint64_t v380 = a1;
    uint64_t v347 = v1;
    uint64_t v80 = v3;
    uint64_t v81 = v4;
    uint64_t v4 = v81;
    uint64_t v3 = v80;
    uint64_t v1 = v347;
    uint64_t v2 = v363;
    int v83 = v82;
    a1 = v380;
    if (v83)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v396 = 90;
      unint64_t v84 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v84) {
        unint64_t v85 = v84;
      }
      else {
        unint64_t v85 = v396;
      }
      long long v86 = &v395[v85];
      unint64_t v87 = v396 - v85;
      if (v396 - v85 >= 0x12) {
        uint64_t v88 = 18;
      }
      else {
        uint64_t v88 = v396 - v85;
      }
      unint64_t v89 = v87 - v88;
      if (v89 >= v89 - 1) {
        uint64_t v90 = v89 - 1;
      }
      else {
        uint64_t v90 = v89;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      uint64_t v4 = v81;
      uint64_t v3 = v80;
      uint64_t v1 = v347;
      uint64_t v2 = v363;
      a1 = v380;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v364 = v2;
    uint64_t v381 = a1;
    uint64_t v333 = v3;
    uint64_t v348 = v1;
    uint64_t v91 = v4;
    uint64_t v92 = v5;
    uint64_t v5 = v92;
    uint64_t v4 = v91;
    uint64_t v3 = v333;
    uint64_t v1 = v348;
    int v94 = v93;
    uint64_t v2 = v364;
    a1 = v381;
    if (v94)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v396 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v396;
      }
      uint64_t v97 = &v395[v96];
      unint64_t v98 = v396 - v96;
      if (v396 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v396 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v5 = v92;
      uint64_t v4 = v91;
      uint64_t v3 = v333;
      uint64_t v1 = v348;
      uint64_t v2 = v364;
      a1 = v381;
    }
  }
  uint64_t v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v365 = v2;
    uint64_t v382 = a1;
    uint64_t v334 = v3;
    uint64_t v349 = v1;
    uint64_t v320 = v4;
    uint64_t v102 = v5;
    uint64_t v103 = v6;
    uint64_t v6 = v103;
    uint64_t v5 = v102;
    uint64_t v4 = v320;
    uint64_t v3 = v334;
    uint64_t v1 = v349;
    uint64_t v2 = v365;
    int v105 = v104;
    a1 = v382;
    if (v105)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v396 = 89;
      unint64_t v106 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v106) {
        unint64_t v107 = v106;
      }
      else {
        unint64_t v107 = v396;
      }
      v108 = &v395[v107];
      unint64_t v109 = v396 - v107;
      if (v396 - v107 >= 0x12) {
        uint64_t v110 = 18;
      }
      else {
        uint64_t v110 = v396 - v107;
      }
      unint64_t v111 = v109 - v110;
      if (v111 >= v111 - 1) {
        uint64_t v112 = v111 - 1;
      }
      else {
        uint64_t v112 = v111;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v108[v110], v112);
      uint64_t v6 = v103;
      uint64_t v5 = v102;
      uint64_t v4 = v320;
      uint64_t v3 = v334;
      uint64_t v1 = v349;
      uint64_t v2 = v365;
      a1 = v382;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v366 = v2;
    uint64_t v383 = a1;
    uint64_t v335 = v3;
    uint64_t v350 = v1;
    uint64_t v321 = v4;
    uint64_t v308 = v5;
    uint64_t v113 = v6;
    uint64_t v114 = v7;
    uint64_t v7 = v114;
    uint64_t v6 = v113;
    uint64_t v5 = v308;
    uint64_t v4 = v321;
    uint64_t v3 = v335;
    uint64_t v1 = v350;
    uint64_t v2 = v366;
    int v116 = v115;
    a1 = v383;
    if (v116)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v396 = 95;
      unint64_t v117 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v117) {
        unint64_t v118 = v117;
      }
      else {
        unint64_t v118 = v396;
      }
      v119 = &v395[v118];
      unint64_t v120 = v396 - v118;
      if (v396 - v118 >= 0x12) {
        uint64_t v121 = 18;
      }
      else {
        uint64_t v121 = v396 - v118;
      }
      unint64_t v122 = v120 - v121;
      if (v122 >= v122 - 1) {
        uint64_t v123 = v122 - 1;
      }
      else {
        uint64_t v123 = v122;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      uint64_t v7 = v114;
      uint64_t v6 = v113;
      uint64_t v5 = v308;
      uint64_t v4 = v321;
      uint64_t v3 = v335;
      uint64_t v1 = v350;
      uint64_t v2 = v366;
      a1 = v383;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v367 = v2;
    uint64_t v384 = a1;
    uint64_t v336 = v3;
    uint64_t v351 = v1;
    uint64_t v322 = v4;
    uint64_t v297 = v6;
    uint64_t v309 = v5;
    uint64_t v124 = v7;
    uint64_t v125 = v8;
    uint64_t v8 = v125;
    uint64_t v7 = v124;
    uint64_t v6 = v297;
    uint64_t v5 = v309;
    uint64_t v4 = v322;
    uint64_t v3 = v336;
    uint64_t v1 = v351;
    uint64_t v2 = v367;
    int v127 = v126;
    a1 = v384;
    if (v127)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v396 = 99;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v396;
      }
      BOOL v130 = &v395[v129];
      unint64_t v131 = v396 - v129;
      if (v396 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v396 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v8 = v125;
      uint64_t v7 = v124;
      uint64_t v6 = v297;
      uint64_t v5 = v309;
      uint64_t v4 = v322;
      uint64_t v3 = v336;
      uint64_t v1 = v351;
      uint64_t v2 = v367;
      a1 = v384;
    }
  }
  uint64_t v9 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v368 = v2;
    uint64_t v385 = a1;
    uint64_t v337 = v3;
    uint64_t v352 = v1;
    uint64_t v323 = v4;
    uint64_t v298 = v6;
    uint64_t v310 = v5;
    uint64_t v287 = v7;
    uint64_t v135 = v8;
    uint64_t v136 = v9;
    uint64_t v9 = v136;
    uint64_t v8 = v135;
    uint64_t v7 = v287;
    uint64_t v6 = v298;
    uint64_t v5 = v310;
    uint64_t v4 = v323;
    uint64_t v3 = v337;
    uint64_t v1 = v352;
    uint64_t v2 = v368;
    int v138 = v137;
    a1 = v385;
    if (v138)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v396 = 93;
      unint64_t v139 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v139) {
        unint64_t v140 = v139;
      }
      else {
        unint64_t v140 = v396;
      }
      unint64_t v141 = &v395[v140];
      unint64_t v142 = v396 - v140;
      if (v396 - v140 >= 0x12) {
        uint64_t v143 = 18;
      }
      else {
        uint64_t v143 = v396 - v140;
      }
      unint64_t v144 = v142 - v143;
      if (v144 >= v144 - 1) {
        uint64_t v145 = v144 - 1;
      }
      else {
        uint64_t v145 = v144;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      uint64_t v9 = v136;
      uint64_t v8 = v135;
      uint64_t v7 = v287;
      uint64_t v6 = v298;
      uint64_t v5 = v310;
      uint64_t v4 = v323;
      uint64_t v3 = v337;
      uint64_t v1 = v352;
      uint64_t v2 = v368;
      a1 = v385;
    }
  }
  uint64_t v10 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v369 = v2;
    uint64_t v386 = a1;
    uint64_t v338 = v3;
    uint64_t v353 = v1;
    uint64_t v324 = v4;
    uint64_t v299 = v6;
    uint64_t v311 = v5;
    uint64_t v278 = v8;
    uint64_t v288 = v7;
    uint64_t v146 = v9;
    uint64_t v147 = v10;
    uint64_t v10 = v147;
    uint64_t v9 = v146;
    uint64_t v8 = v278;
    uint64_t v7 = v288;
    uint64_t v6 = v299;
    uint64_t v5 = v311;
    uint64_t v4 = v324;
    uint64_t v3 = v338;
    uint64_t v1 = v353;
    uint64_t v2 = v369;
    int v149 = v148;
    a1 = v386;
    if (v149)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      unint64_t v396 = 99;
      unint64_t v150 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v150) {
        unint64_t v151 = v150;
      }
      else {
        unint64_t v151 = v396;
      }
      BOOL v152 = &v395[v151];
      unint64_t v153 = v396 - v151;
      if (v396 - v151 >= 0x12) {
        uint64_t v154 = 18;
      }
      else {
        uint64_t v154 = v396 - v151;
      }
      unint64_t v155 = v153 - v154;
      if (v155 >= v155 - 1) {
        uint64_t v156 = v155 - 1;
      }
      else {
        uint64_t v156 = v155;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v152[v154], v156);
      uint64_t v10 = v147;
      uint64_t v9 = v146;
      uint64_t v8 = v278;
      uint64_t v7 = v288;
      uint64_t v6 = v299;
      uint64_t v5 = v311;
      uint64_t v4 = v324;
      uint64_t v3 = v338;
      uint64_t v1 = v353;
      uint64_t v2 = v369;
      a1 = v386;
    }
  }
  uint64_t v11 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v370 = v2;
    uint64_t v387 = a1;
    uint64_t v339 = v3;
    uint64_t v354 = v1;
    uint64_t v325 = v4;
    uint64_t v300 = v6;
    uint64_t v312 = v5;
    uint64_t v279 = v8;
    uint64_t v289 = v7;
    uint64_t v270 = v9;
    uint64_t v157 = v10;
    uint64_t v158 = v11;
    uint64_t v11 = v158;
    uint64_t v10 = v157;
    uint64_t v9 = v270;
    uint64_t v8 = v279;
    uint64_t v7 = v289;
    uint64_t v6 = v300;
    uint64_t v5 = v312;
    uint64_t v4 = v325;
    uint64_t v3 = v339;
    uint64_t v1 = v354;
    uint64_t v2 = v370;
    int v160 = v159;
    a1 = v387;
    if (v160)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      unint64_t v396 = 85;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v396;
      }
      int64_t v163 = &v395[v162];
      unint64_t v164 = v396 - v162;
      if (v396 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v396 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      uint64_t v11 = v158;
      uint64_t v10 = v157;
      uint64_t v9 = v270;
      uint64_t v8 = v279;
      uint64_t v7 = v289;
      uint64_t v6 = v300;
      uint64_t v5 = v312;
      uint64_t v4 = v325;
      uint64_t v3 = v339;
      uint64_t v1 = v354;
      uint64_t v2 = v370;
      a1 = v387;
    }
  }
  uint64_t v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v371 = v2;
    uint64_t v388 = a1;
    uint64_t v340 = v3;
    uint64_t v355 = v1;
    uint64_t v326 = v4;
    uint64_t v301 = v6;
    uint64_t v313 = v5;
    uint64_t v280 = v8;
    uint64_t v290 = v7;
    uint64_t v263 = v10;
    uint64_t v271 = v9;
    uint64_t v168 = v11;
    uint64_t v169 = v12;
    uint64_t v12 = v169;
    uint64_t v11 = v168;
    uint64_t v10 = v263;
    uint64_t v9 = v271;
    uint64_t v8 = v280;
    uint64_t v7 = v290;
    uint64_t v6 = v301;
    uint64_t v5 = v313;
    uint64_t v4 = v326;
    uint64_t v3 = v340;
    uint64_t v1 = v355;
    uint64_t v2 = v371;
    int v171 = v170;
    a1 = v388;
    if (v171)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v396 = 97;
      unint64_t v172 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v172) {
        unint64_t v173 = v172;
      }
      else {
        unint64_t v173 = v396;
      }
      int64_t v174 = &v395[v173];
      unint64_t v175 = v396 - v173;
      if (v396 - v173 >= 0x12) {
        uint64_t v176 = 18;
      }
      else {
        uint64_t v176 = v396 - v173;
      }
      unint64_t v177 = v175 - v176;
      if (v177 >= v177 - 1) {
        uint64_t v178 = v177 - 1;
      }
      else {
        uint64_t v178 = v177;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v174[v176], v178);
      uint64_t v12 = v169;
      uint64_t v11 = v168;
      uint64_t v10 = v263;
      uint64_t v9 = v271;
      uint64_t v8 = v280;
      uint64_t v7 = v290;
      uint64_t v6 = v301;
      uint64_t v5 = v313;
      uint64_t v4 = v326;
      uint64_t v3 = v340;
      uint64_t v1 = v355;
      uint64_t v2 = v371;
      a1 = v388;
    }
  }
  uint64_t v13 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v372 = v2;
    uint64_t v389 = a1;
    uint64_t v341 = v3;
    uint64_t v356 = v1;
    uint64_t v327 = v4;
    uint64_t v302 = v6;
    uint64_t v314 = v5;
    uint64_t v281 = v8;
    uint64_t v291 = v7;
    uint64_t v264 = v10;
    uint64_t v272 = v9;
    uint64_t v257 = v11;
    uint64_t v179 = v12;
    uint64_t v180 = v13;
    uint64_t v13 = v180;
    uint64_t v12 = v179;
    uint64_t v11 = v257;
    uint64_t v10 = v264;
    uint64_t v9 = v272;
    uint64_t v8 = v281;
    uint64_t v7 = v291;
    uint64_t v6 = v302;
    uint64_t v5 = v314;
    uint64_t v4 = v327;
    uint64_t v3 = v341;
    uint64_t v1 = v356;
    uint64_t v2 = v372;
    int v182 = v181;
    a1 = v389;
    if (v182)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v396 = 93;
      unint64_t v183 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v183) {
        unint64_t v184 = v183;
      }
      else {
        unint64_t v184 = v396;
      }
      v185 = &v395[v184];
      unint64_t v186 = v396 - v184;
      if (v396 - v184 >= 0x12) {
        uint64_t v187 = 18;
      }
      else {
        uint64_t v187 = v396 - v184;
      }
      unint64_t v188 = v186 - v187;
      if (v188 >= v188 - 1) {
        uint64_t v189 = v188 - 1;
      }
      else {
        uint64_t v189 = v188;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      uint64_t v13 = v180;
      uint64_t v12 = v179;
      uint64_t v11 = v257;
      uint64_t v10 = v264;
      uint64_t v9 = v272;
      uint64_t v8 = v281;
      uint64_t v7 = v291;
      uint64_t v6 = v302;
      uint64_t v5 = v314;
      uint64_t v4 = v327;
      uint64_t v3 = v341;
      uint64_t v1 = v356;
      uint64_t v2 = v372;
      a1 = v389;
    }
  }
  uint64_t v14 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v373 = v2;
    uint64_t v390 = a1;
    uint64_t v342 = v3;
    uint64_t v357 = v1;
    uint64_t v328 = v4;
    uint64_t v303 = v6;
    uint64_t v315 = v5;
    uint64_t v282 = v8;
    uint64_t v292 = v7;
    uint64_t v265 = v10;
    uint64_t v273 = v9;
    uint64_t v252 = v12;
    uint64_t v258 = v11;
    uint64_t v190 = v13;
    uint64_t v191 = v14;
    uint64_t v14 = v191;
    uint64_t v13 = v190;
    uint64_t v12 = v252;
    uint64_t v11 = v258;
    uint64_t v10 = v265;
    uint64_t v9 = v273;
    uint64_t v8 = v282;
    uint64_t v7 = v292;
    uint64_t v6 = v303;
    uint64_t v5 = v315;
    uint64_t v4 = v328;
    uint64_t v3 = v342;
    uint64_t v1 = v357;
    uint64_t v2 = v373;
    int v193 = v192;
    a1 = v390;
    if (v193)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v396 = 83;
      unint64_t v194 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v194) {
        unint64_t v195 = v194;
      }
      else {
        unint64_t v195 = v396;
      }
      v196 = &v395[v195];
      unint64_t v197 = v396 - v195;
      if (v396 - v195 >= 0x12) {
        uint64_t v198 = 18;
      }
      else {
        uint64_t v198 = v396 - v195;
      }
      unint64_t v199 = v197 - v198;
      if (v199 >= v199 - 1) {
        uint64_t v200 = v199 - 1;
      }
      else {
        uint64_t v200 = v199;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v196[v198], v200);
      uint64_t v14 = v191;
      uint64_t v13 = v190;
      uint64_t v12 = v252;
      uint64_t v11 = v258;
      uint64_t v10 = v265;
      uint64_t v9 = v273;
      uint64_t v8 = v282;
      uint64_t v7 = v292;
      uint64_t v6 = v303;
      uint64_t v5 = v315;
      uint64_t v4 = v328;
      uint64_t v3 = v342;
      uint64_t v1 = v357;
      uint64_t v2 = v373;
      a1 = v390;
    }
  }
  uint64_t v15 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v374 = v2;
    uint64_t v391 = a1;
    uint64_t v343 = v3;
    uint64_t v358 = v1;
    uint64_t v329 = v4;
    uint64_t v304 = v6;
    uint64_t v316 = v5;
    uint64_t v283 = v8;
    uint64_t v293 = v7;
    uint64_t v266 = v10;
    uint64_t v274 = v9;
    uint64_t v253 = v12;
    uint64_t v259 = v11;
    uint64_t v201 = v13;
    uint64_t v202 = v14;
    uint64_t v242 = v15;
    uint64_t v15 = v242;
    uint64_t v14 = v202;
    uint64_t v13 = v201;
    uint64_t v12 = v253;
    uint64_t v11 = v259;
    uint64_t v10 = v266;
    uint64_t v9 = v274;
    uint64_t v8 = v283;
    uint64_t v7 = v293;
    uint64_t v6 = v304;
    uint64_t v5 = v316;
    uint64_t v4 = v329;
    uint64_t v3 = v343;
    uint64_t v1 = v358;
    uint64_t v2 = v374;
    int v204 = v203;
    a1 = v391;
    if (v204)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v396 = 84;
      unint64_t v205 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v205) {
        unint64_t v206 = v205;
      }
      else {
        unint64_t v206 = v396;
      }
      char v207 = &v395[v206];
      unint64_t v208 = v396 - v206;
      if (v396 - v206 >= 0x12) {
        uint64_t v209 = 18;
      }
      else {
        uint64_t v209 = v396 - v206;
      }
      unint64_t v210 = v208 - v209;
      if (v210 >= v210 - 1) {
        uint64_t v211 = v210 - 1;
      }
      else {
        uint64_t v211 = v210;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v207[v209], v211);
      uint64_t v15 = v242;
      uint64_t v14 = v202;
      uint64_t v13 = v201;
      uint64_t v12 = v253;
      uint64_t v11 = v259;
      uint64_t v10 = v266;
      uint64_t v9 = v274;
      uint64_t v8 = v283;
      uint64_t v7 = v293;
      uint64_t v6 = v304;
      uint64_t v5 = v316;
      uint64_t v4 = v329;
      uint64_t v3 = v343;
      uint64_t v1 = v358;
      uint64_t v2 = v374;
      a1 = v391;
    }
  }
  uint64_t v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v375 = v2;
    uint64_t v392 = a1;
    uint64_t v344 = v3;
    uint64_t v359 = v1;
    uint64_t v330 = v4;
    uint64_t v305 = v6;
    uint64_t v317 = v5;
    uint64_t v284 = v8;
    uint64_t v294 = v7;
    uint64_t v267 = v10;
    uint64_t v275 = v9;
    uint64_t v254 = v12;
    uint64_t v260 = v11;
    uint64_t v246 = v13;
    uint64_t v249 = v16;
    uint64_t v212 = v14;
    uint64_t v213 = v15;
    uint64_t v13 = v246;
    uint64_t v16 = v249;
    uint64_t v15 = v213;
    uint64_t v14 = v212;
    uint64_t v12 = v254;
    uint64_t v11 = v260;
    uint64_t v10 = v267;
    uint64_t v9 = v275;
    uint64_t v8 = v284;
    uint64_t v7 = v294;
    uint64_t v6 = v305;
    uint64_t v5 = v317;
    uint64_t v4 = v330;
    uint64_t v3 = v344;
    uint64_t v1 = v359;
    uint64_t v2 = v375;
    int v215 = v214;
    a1 = v392;
    if (v215)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v396 = 84;
      unint64_t v216 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v216) {
        unint64_t v217 = v216;
      }
      else {
        unint64_t v217 = v396;
      }
      v218 = &v395[v217];
      unint64_t v219 = v396 - v217;
      if (v396 - v217 >= 0x12) {
        uint64_t v220 = 18;
      }
      else {
        uint64_t v220 = v396 - v217;
      }
      unint64_t v221 = v219 - v220;
      if (v221 >= v221 - 1) {
        uint64_t v222 = v221 - 1;
      }
      else {
        uint64_t v222 = v221;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v218[v220], v222);
      uint64_t v13 = v246;
      uint64_t v16 = v249;
      uint64_t v15 = v213;
      uint64_t v14 = v212;
      uint64_t v12 = v254;
      uint64_t v11 = v260;
      uint64_t v10 = v267;
      uint64_t v9 = v275;
      uint64_t v8 = v284;
      uint64_t v7 = v294;
      uint64_t v6 = v305;
      uint64_t v5 = v317;
      uint64_t v4 = v330;
      uint64_t v3 = v344;
      uint64_t v1 = v359;
      uint64_t v2 = v375;
      a1 = v392;
    }
  }
  uint64_t v17 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v376 = v2;
    uint64_t v393 = a1;
    uint64_t v345 = v3;
    uint64_t v360 = v1;
    uint64_t v331 = v4;
    uint64_t v306 = v6;
    uint64_t v318 = v5;
    uint64_t v285 = v8;
    uint64_t v295 = v7;
    uint64_t v268 = v10;
    uint64_t v276 = v9;
    uint64_t v255 = v12;
    uint64_t v261 = v11;
    uint64_t v247 = v13;
    uint64_t v250 = v16;
    uint64_t v244 = v14;
    uint64_t v223 = v15;
    uint64_t v14 = v244;
    uint64_t v13 = v247;
    uint64_t v16 = v250;
    uint64_t v15 = v223;
    uint64_t v12 = v255;
    uint64_t v11 = v261;
    uint64_t v10 = v268;
    uint64_t v9 = v276;
    uint64_t v8 = v285;
    uint64_t v7 = v295;
    uint64_t v6 = v306;
    uint64_t v5 = v318;
    uint64_t v4 = v331;
    uint64_t v3 = v345;
    uint64_t v1 = v360;
    uint64_t v2 = v376;
    int v225 = v224;
    a1 = v393;
    if (v225)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v396 = 84;
      unint64_t v226 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v226) {
        unint64_t v227 = v226;
      }
      else {
        unint64_t v227 = v396;
      }
      v228 = &v395[v227];
      unint64_t v229 = v396 - v227;
      if (v396 - v227 >= 0x12) {
        uint64_t v230 = 18;
      }
      else {
        uint64_t v230 = v396 - v227;
      }
      unint64_t v231 = v229 - v230;
      if (v231 >= v231 - 1) {
        uint64_t v232 = v231 - 1;
      }
      else {
        uint64_t v232 = v231;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v228[v230], v232);
      uint64_t v14 = v244;
      uint64_t v13 = v247;
      uint64_t v16 = v250;
      uint64_t v15 = v223;
      uint64_t v12 = v255;
      uint64_t v11 = v261;
      uint64_t v10 = v268;
      uint64_t v9 = v276;
      uint64_t v8 = v285;
      uint64_t v7 = v295;
      uint64_t v6 = v306;
      uint64_t v5 = v318;
      uint64_t v4 = v331;
      uint64_t v3 = v345;
      uint64_t v1 = v360;
      uint64_t v2 = v376;
      a1 = v393;
    }
  }
  uint64_t v18 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v377 = v2;
    uint64_t v394 = a1;
    uint64_t v346 = v3;
    uint64_t v361 = v1;
    uint64_t v332 = v4;
    uint64_t v307 = v6;
    uint64_t v319 = v5;
    uint64_t v286 = v8;
    uint64_t v296 = v7;
    uint64_t v269 = v10;
    uint64_t v277 = v9;
    uint64_t v256 = v12;
    uint64_t v262 = v11;
    uint64_t v248 = v13;
    uint64_t v251 = v16;
    uint64_t v243 = v15;
    uint64_t v245 = v14;
    uint64_t v14 = v245;
    uint64_t v13 = v248;
    uint64_t v16 = v251;
    uint64_t v15 = v243;
    uint64_t v12 = v256;
    uint64_t v11 = v262;
    uint64_t v10 = v269;
    uint64_t v9 = v277;
    uint64_t v8 = v286;
    uint64_t v7 = v296;
    uint64_t v6 = v307;
    uint64_t v5 = v319;
    uint64_t v4 = v332;
    uint64_t v3 = v346;
    uint64_t v1 = v361;
    uint64_t v2 = v377;
    int v234 = v233;
    a1 = v394;
    if (v234)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v396 = 90;
      unint64_t v235 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v235) {
        unint64_t v236 = v235;
      }
      else {
        unint64_t v236 = v396;
      }
      v237 = &v395[v236];
      unint64_t v238 = v396 - v236;
      if (v396 - v236 >= 0x12) {
        uint64_t v239 = 18;
      }
      else {
        uint64_t v239 = v396 - v236;
      }
      unint64_t v240 = v238 - v239;
      if (v240 >= v240 - 1) {
        uint64_t v241 = v240 - 1;
      }
      else {
        uint64_t v241 = v240;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v237[v239], v241);
      uint64_t v14 = v245;
      uint64_t v13 = v248;
      uint64_t v16 = v251;
      uint64_t v15 = v243;
      uint64_t v12 = v256;
      uint64_t v11 = v262;
      uint64_t v10 = v269;
      uint64_t v9 = v277;
      uint64_t v8 = v286;
      uint64_t v7 = v296;
      uint64_t v6 = v307;
      uint64_t v5 = v319;
      uint64_t v4 = v332;
      uint64_t v3 = v346;
      uint64_t v1 = v361;
      uint64_t v2 = v377;
      a1 = v394;
    }
  }
  return v1 == a1
      || v2 == a1
      || v3 == a1
      || v4 == a1
      || v5 == a1
      || v6 == a1
      || v7 == a1
      || v8 == a1
      || v9 == a1
      || v10 == a1
      || v11 == a1
      || v12 == a1
      || v13 == a1
      || v14 == a1
      || v15 == a1
      || v16 == a1
      || v17 == a1
      || v18 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::arith::AddFOp::verifyInvariantsImpl((mlir::arith::AddFOp *)&v8))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::AddFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.addi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376708;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AddIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      char v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::AddIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AddIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AddIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.addi";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AddIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::AddIOpGenericAdaptorBase::AddIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::AddIOp::fold((uint64_t *)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  {
    uint64_t v348 = a1;
    a1 = v348;
    if (v36)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v367 = 83;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v367;
      }
      int v39 = &v366[v38];
      unint64_t v40 = v367 - v38;
      if (v367 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v367 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
      a1 = v348;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v331 = v1;
    uint64_t v349 = a1;
    uint64_t v1 = v331;
    a1 = v349;
    if (v44)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v367 = 81;
      unint64_t v45 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v45) {
        unint64_t v46 = v45;
      }
      else {
        unint64_t v46 = v367;
      }
      uint64_t v47 = &v366[v46];
      unint64_t v48 = v367 - v46;
      if (v367 - v46 >= 0x12) {
        uint64_t v49 = 18;
      }
      else {
        uint64_t v49 = v367 - v46;
      }
      unint64_t v50 = v48 - v49;
      if (v50 >= v50 - 1) {
        uint64_t v51 = v50 - 1;
      }
      else {
        uint64_t v51 = v50;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v47[v49], v51);
      uint64_t v1 = v331;
      a1 = v349;
    }
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v332 = v1;
    uint64_t v350 = a1;
    uint64_t v315 = v2;
    uint64_t v2 = v315;
    uint64_t v1 = v332;
    int v53 = v52;
    a1 = v350;
    if (v53)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v367 = 104;
      unint64_t v54 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v54) {
        unint64_t v55 = v54;
      }
      else {
        unint64_t v55 = v367;
      }
      unint64_t v56 = &v366[v55];
      unint64_t v57 = v367 - v55;
      if (v367 - v55 >= 0x12) {
        uint64_t v58 = 18;
      }
      else {
        uint64_t v58 = v367 - v55;
      }
      unint64_t v59 = v57 - v58;
      if (v59 >= v59 - 1) {
        uint64_t v60 = v59 - 1;
      }
      else {
        uint64_t v60 = v59;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      uint64_t v2 = v315;
      uint64_t v1 = v332;
      a1 = v350;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v333 = v1;
    uint64_t v351 = a1;
    uint64_t v300 = v3;
    uint64_t v316 = v2;
    uint64_t v3 = v300;
    uint64_t v2 = v316;
    int v62 = v61;
    uint64_t v1 = v333;
    a1 = v351;
    if (v62)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v367 = 86;
      unint64_t v63 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v63) {
        unint64_t v64 = v63;
      }
      else {
        unint64_t v64 = v367;
      }
      unint64_t v65 = &v366[v64];
      unint64_t v66 = v367 - v64;
      if (v367 - v64 >= 0x12) {
        uint64_t v67 = 18;
      }
      else {
        uint64_t v67 = v367 - v64;
      }
      unint64_t v68 = v66 - v67;
      if (v68 >= v68 - 1) {
        uint64_t v69 = v68 - 1;
      }
      else {
        uint64_t v69 = v68;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      uint64_t v3 = v300;
      uint64_t v2 = v316;
      uint64_t v1 = v333;
      a1 = v351;
    }
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v334 = v1;
    uint64_t v352 = a1;
    uint64_t v301 = v3;
    uint64_t v317 = v2;
    uint64_t v286 = v4;
    uint64_t v4 = v286;
    uint64_t v3 = v301;
    uint64_t v2 = v317;
    uint64_t v1 = v334;
    int v71 = v70;
    a1 = v352;
    if (v71)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v367 = 90;
      unint64_t v72 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v72) {
        unint64_t v73 = v72;
      }
      else {
        unint64_t v73 = v367;
      }
      unint64_t v74 = &v366[v73];
      unint64_t v75 = v367 - v73;
      if (v367 - v73 >= 0x12) {
        uint64_t v76 = 18;
      }
      else {
        uint64_t v76 = v367 - v73;
      }
      unint64_t v77 = v75 - v76;
      if (v77 >= v77 - 1) {
        uint64_t v78 = v77 - 1;
      }
      else {
        uint64_t v78 = v77;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      uint64_t v4 = v286;
      uint64_t v3 = v301;
      uint64_t v2 = v317;
      uint64_t v1 = v334;
      a1 = v352;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v335 = v1;
    uint64_t v353 = a1;
    uint64_t v302 = v3;
    uint64_t v318 = v2;
    uint64_t v287 = v4;
    uint64_t v273 = v5;
    uint64_t v5 = v273;
    uint64_t v4 = v287;
    uint64_t v3 = v302;
    uint64_t v2 = v318;
    uint64_t v1 = v335;
    int v80 = v79;
    a1 = v353;
    if (v80)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v367 = 84;
      unint64_t v81 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v81) {
        unint64_t v82 = v81;
      }
      else {
        unint64_t v82 = v367;
      }
      int v83 = &v366[v82];
      unint64_t v84 = v367 - v82;
      if (v367 - v82 >= 0x12) {
        uint64_t v85 = 18;
      }
      else {
        uint64_t v85 = v367 - v82;
      }
      unint64_t v86 = v84 - v85;
      if (v86 >= v86 - 1) {
        uint64_t v87 = v86 - 1;
      }
      else {
        uint64_t v87 = v86;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      uint64_t v5 = v273;
      uint64_t v4 = v287;
      uint64_t v3 = v302;
      uint64_t v2 = v318;
      uint64_t v1 = v335;
      a1 = v353;
    }
  }
  uint64_t v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v336 = v1;
    uint64_t v354 = a1;
    uint64_t v303 = v3;
    uint64_t v319 = v2;
    uint64_t v288 = v4;
    uint64_t v261 = v6;
    uint64_t v274 = v5;
    uint64_t v6 = v261;
    uint64_t v5 = v274;
    uint64_t v4 = v288;
    uint64_t v3 = v303;
    uint64_t v2 = v319;
    uint64_t v1 = v336;
    int v89 = v88;
    a1 = v354;
    if (v89)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      unint64_t v367 = 85;
      unint64_t v90 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v90) {
        unint64_t v91 = v90;
      }
      else {
        unint64_t v91 = v367;
      }
      uint64_t v92 = &v366[v91];
      unint64_t v93 = v367 - v91;
      if (v367 - v91 >= 0x12) {
        uint64_t v94 = 18;
      }
      else {
        uint64_t v94 = v367 - v91;
      }
      unint64_t v95 = v93 - v94;
      if (v95 >= v95 - 1) {
        uint64_t v96 = v95 - 1;
      }
      else {
        uint64_t v96 = v95;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      uint64_t v6 = v261;
      uint64_t v5 = v274;
      uint64_t v4 = v288;
      uint64_t v3 = v303;
      uint64_t v2 = v319;
      uint64_t v1 = v336;
      a1 = v354;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v337 = v1;
    uint64_t v355 = a1;
    uint64_t v304 = v3;
    uint64_t v320 = v2;
    uint64_t v289 = v4;
    uint64_t v262 = v6;
    uint64_t v275 = v5;
    uint64_t v250 = v7;
    uint64_t v7 = v250;
    uint64_t v6 = v262;
    uint64_t v5 = v275;
    uint64_t v4 = v289;
    uint64_t v3 = v304;
    uint64_t v2 = v320;
    uint64_t v1 = v337;
    int v98 = v97;
    a1 = v355;
    if (v98)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v367 = 95;
      unint64_t v99 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v99) {
        unint64_t v100 = v99;
      }
      else {
        unint64_t v100 = v367;
      }
      uint64_t v101 = &v366[v100];
      unint64_t v102 = v367 - v100;
      if (v367 - v100 >= 0x12) {
        uint64_t v103 = 18;
      }
      else {
        uint64_t v103 = v367 - v100;
      }
      unint64_t v104 = v102 - v103;
      if (v104 >= v104 - 1) {
        uint64_t v105 = v104 - 1;
      }
      else {
        uint64_t v105 = v104;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      uint64_t v7 = v250;
      uint64_t v6 = v262;
      uint64_t v5 = v275;
      uint64_t v4 = v289;
      uint64_t v3 = v304;
      uint64_t v2 = v320;
      uint64_t v1 = v337;
      a1 = v355;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v338 = v1;
    uint64_t v356 = a1;
    uint64_t v305 = v3;
    uint64_t v321 = v2;
    uint64_t v290 = v4;
    uint64_t v263 = v6;
    uint64_t v276 = v5;
    uint64_t v240 = v8;
    uint64_t v251 = v7;
    uint64_t v8 = v240;
    uint64_t v7 = v251;
    uint64_t v6 = v263;
    uint64_t v5 = v276;
    uint64_t v4 = v290;
    uint64_t v3 = v305;
    uint64_t v2 = v321;
    uint64_t v1 = v338;
    int v107 = v106;
    a1 = v356;
    if (v107)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v367 = 99;
      unint64_t v108 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v108) {
        unint64_t v109 = v108;
      }
      else {
        unint64_t v109 = v367;
      }
      uint64_t v110 = &v366[v109];
      unint64_t v111 = v367 - v109;
      if (v367 - v109 >= 0x12) {
        uint64_t v112 = 18;
      }
      else {
        uint64_t v112 = v367 - v109;
      }
      unint64_t v113 = v111 - v112;
      if (v113 >= v113 - 1) {
        uint64_t v114 = v113 - 1;
      }
      else {
        uint64_t v114 = v113;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      uint64_t v8 = v240;
      uint64_t v7 = v251;
      uint64_t v6 = v263;
      uint64_t v5 = v276;
      uint64_t v4 = v290;
      uint64_t v3 = v305;
      uint64_t v2 = v321;
      uint64_t v1 = v338;
      a1 = v356;
    }
  }
  uint64_t v9 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v339 = v1;
    uint64_t v357 = a1;
    uint64_t v306 = v3;
    uint64_t v322 = v2;
    uint64_t v291 = v4;
    uint64_t v264 = v6;
    uint64_t v277 = v5;
    uint64_t v241 = v8;
    uint64_t v252 = v7;
    uint64_t v231 = v9;
    uint64_t v9 = v231;
    uint64_t v8 = v241;
    uint64_t v7 = v252;
    uint64_t v6 = v264;
    uint64_t v5 = v277;
    uint64_t v4 = v291;
    uint64_t v3 = v306;
    uint64_t v2 = v322;
    uint64_t v1 = v339;
    int v116 = v115;
    a1 = v357;
    if (v116)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v117 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v117) {
        unint64_t v118 = v117;
      }
      else {
        unint64_t v118 = v367;
      }
      v119 = &v366[v118];
      unint64_t v120 = v367 - v118;
      if (v367 - v118 >= 0x12) {
        uint64_t v121 = 18;
      }
      else {
        uint64_t v121 = v367 - v118;
      }
      unint64_t v122 = v120 - v121;
      if (v122 >= v122 - 1) {
        uint64_t v123 = v122 - 1;
      }
      else {
        uint64_t v123 = v122;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      uint64_t v9 = v231;
      uint64_t v8 = v241;
      uint64_t v7 = v252;
      uint64_t v6 = v264;
      uint64_t v5 = v277;
      uint64_t v4 = v291;
      uint64_t v3 = v306;
      uint64_t v2 = v322;
      uint64_t v1 = v339;
      a1 = v357;
    }
  }
  uint64_t v10 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v340 = v1;
    uint64_t v358 = a1;
    uint64_t v307 = v3;
    uint64_t v323 = v2;
    uint64_t v292 = v4;
    uint64_t v265 = v6;
    uint64_t v278 = v5;
    uint64_t v242 = v8;
    uint64_t v253 = v7;
    uint64_t v223 = v10;
    uint64_t v232 = v9;
    uint64_t v10 = v223;
    uint64_t v9 = v232;
    uint64_t v8 = v242;
    uint64_t v7 = v253;
    uint64_t v6 = v265;
    uint64_t v5 = v278;
    uint64_t v4 = v292;
    uint64_t v3 = v307;
    uint64_t v2 = v323;
    uint64_t v1 = v340;
    int v125 = v124;
    a1 = v358;
    if (v125)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v367 = 92;
      unint64_t v126 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v126) {
        unint64_t v127 = v126;
      }
      else {
        unint64_t v127 = v367;
      }
      unint64_t v128 = &v366[v127];
      unint64_t v129 = v367 - v127;
      if (v367 - v127 >= 0x12) {
        uint64_t v130 = 18;
      }
      else {
        uint64_t v130 = v367 - v127;
      }
      unint64_t v131 = v129 - v130;
      if (v131 >= v131 - 1) {
        uint64_t v132 = v131 - 1;
      }
      else {
        uint64_t v132 = v131;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      uint64_t v10 = v223;
      uint64_t v9 = v232;
      uint64_t v8 = v242;
      uint64_t v7 = v253;
      uint64_t v6 = v265;
      uint64_t v5 = v278;
      uint64_t v4 = v292;
      uint64_t v3 = v307;
      uint64_t v2 = v323;
      uint64_t v1 = v340;
      a1 = v358;
    }
  }
  uint64_t v11 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v341 = v1;
    uint64_t v359 = a1;
    uint64_t v308 = v3;
    uint64_t v324 = v2;
    uint64_t v293 = v4;
    uint64_t v266 = v6;
    uint64_t v279 = v5;
    uint64_t v243 = v8;
    uint64_t v254 = v7;
    uint64_t v224 = v10;
    uint64_t v233 = v9;
    uint64_t v216 = v11;
    uint64_t v11 = v216;
    uint64_t v10 = v224;
    uint64_t v9 = v233;
    uint64_t v8 = v243;
    uint64_t v7 = v254;
    uint64_t v6 = v266;
    uint64_t v5 = v279;
    uint64_t v4 = v293;
    uint64_t v3 = v308;
    uint64_t v2 = v324;
    uint64_t v1 = v341;
    int v134 = v133;
    a1 = v359;
    if (v134)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v367 = 97;
      unint64_t v135 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v135) {
        unint64_t v136 = v135;
      }
      else {
        unint64_t v136 = v367;
      }
      int v137 = &v366[v136];
      unint64_t v138 = v367 - v136;
      if (v367 - v136 >= 0x12) {
        uint64_t v139 = 18;
      }
      else {
        uint64_t v139 = v367 - v136;
      }
      unint64_t v140 = v138 - v139;
      if (v140 >= v140 - 1) {
        uint64_t v141 = v140 - 1;
      }
      else {
        uint64_t v141 = v140;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      uint64_t v11 = v216;
      uint64_t v10 = v224;
      uint64_t v9 = v233;
      uint64_t v8 = v243;
      uint64_t v7 = v254;
      uint64_t v6 = v266;
      uint64_t v5 = v279;
      uint64_t v4 = v293;
      uint64_t v3 = v308;
      uint64_t v2 = v324;
      uint64_t v1 = v341;
      a1 = v359;
    }
  }
  uint64_t v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v342 = v1;
    uint64_t v360 = a1;
    uint64_t v309 = v3;
    uint64_t v325 = v2;
    uint64_t v294 = v4;
    uint64_t v267 = v6;
    uint64_t v280 = v5;
    uint64_t v244 = v8;
    uint64_t v255 = v7;
    uint64_t v225 = v10;
    uint64_t v234 = v9;
    uint64_t v210 = v12;
    uint64_t v217 = v11;
    uint64_t v12 = v210;
    uint64_t v11 = v217;
    uint64_t v10 = v225;
    uint64_t v9 = v234;
    uint64_t v8 = v244;
    uint64_t v7 = v255;
    uint64_t v6 = v267;
    uint64_t v5 = v280;
    uint64_t v4 = v294;
    uint64_t v3 = v309;
    uint64_t v2 = v325;
    uint64_t v1 = v342;
    int v143 = v142;
    a1 = v360;
    if (v143)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v144 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v144) {
        unint64_t v145 = v144;
      }
      else {
        unint64_t v145 = v367;
      }
      uint64_t v146 = &v366[v145];
      unint64_t v147 = v367 - v145;
      if (v367 - v145 >= 0x12) {
        uint64_t v148 = 18;
      }
      else {
        uint64_t v148 = v367 - v145;
      }
      unint64_t v149 = v147 - v148;
      if (v149 >= v149 - 1) {
        uint64_t v150 = v149 - 1;
      }
      else {
        uint64_t v150 = v149;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      uint64_t v12 = v210;
      uint64_t v11 = v217;
      uint64_t v10 = v225;
      uint64_t v9 = v234;
      uint64_t v8 = v244;
      uint64_t v7 = v255;
      uint64_t v6 = v267;
      uint64_t v5 = v280;
      uint64_t v4 = v294;
      uint64_t v3 = v309;
      uint64_t v2 = v325;
      uint64_t v1 = v342;
      a1 = v360;
    }
  }
  uint64_t v13 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v343 = v1;
    uint64_t v361 = a1;
    uint64_t v310 = v3;
    uint64_t v326 = v2;
    uint64_t v295 = v4;
    uint64_t v268 = v6;
    uint64_t v281 = v5;
    uint64_t v245 = v8;
    uint64_t v256 = v7;
    uint64_t v226 = v10;
    uint64_t v235 = v9;
    uint64_t v211 = v12;
    uint64_t v218 = v11;
    uint64_t v151 = v13;
    uint64_t v13 = v151;
    uint64_t v12 = v211;
    uint64_t v11 = v218;
    uint64_t v10 = v226;
    uint64_t v9 = v235;
    uint64_t v8 = v245;
    uint64_t v7 = v256;
    uint64_t v6 = v268;
    uint64_t v5 = v281;
    uint64_t v4 = v295;
    uint64_t v3 = v310;
    uint64_t v2 = v326;
    uint64_t v1 = v343;
    int v153 = v152;
    a1 = v361;
    if (v153)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v367 = 83;
      unint64_t v154 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v154) {
        unint64_t v155 = v154;
      }
      else {
        unint64_t v155 = v367;
      }
      uint64_t v156 = &v366[v155];
      unint64_t v157 = v367 - v155;
      if (v367 - v155 >= 0x12) {
        uint64_t v158 = 18;
      }
      else {
        uint64_t v158 = v367 - v155;
      }
      unint64_t v159 = v157 - v158;
      if (v159 >= v159 - 1) {
        uint64_t v160 = v159 - 1;
      }
      else {
        uint64_t v160 = v159;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v156[v158], v160);
      uint64_t v13 = v151;
      uint64_t v12 = v211;
      uint64_t v11 = v218;
      uint64_t v10 = v226;
      uint64_t v9 = v235;
      uint64_t v8 = v245;
      uint64_t v7 = v256;
      uint64_t v6 = v268;
      uint64_t v5 = v281;
      uint64_t v4 = v295;
      uint64_t v3 = v310;
      uint64_t v2 = v326;
      uint64_t v1 = v343;
      a1 = v361;
    }
  }
  uint64_t v14 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v344 = v1;
    uint64_t v362 = a1;
    uint64_t v311 = v3;
    uint64_t v327 = v2;
    uint64_t v296 = v4;
    uint64_t v269 = v6;
    uint64_t v282 = v5;
    uint64_t v246 = v8;
    uint64_t v257 = v7;
    uint64_t v227 = v10;
    uint64_t v236 = v9;
    uint64_t v212 = v12;
    uint64_t v219 = v11;
    uint64_t v161 = v13;
    uint64_t v204 = v14;
    uint64_t v14 = v204;
    uint64_t v13 = v161;
    uint64_t v12 = v212;
    uint64_t v11 = v219;
    uint64_t v10 = v227;
    uint64_t v9 = v236;
    uint64_t v8 = v246;
    uint64_t v7 = v257;
    uint64_t v6 = v269;
    uint64_t v5 = v282;
    uint64_t v4 = v296;
    uint64_t v3 = v311;
    uint64_t v2 = v327;
    uint64_t v1 = v344;
    int v163 = v162;
    a1 = v362;
    if (v163)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v367;
      }
      unint64_t v166 = &v366[v165];
      unint64_t v167 = v367 - v165;
      if (v367 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v367 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      uint64_t v14 = v204;
      uint64_t v13 = v161;
      uint64_t v12 = v212;
      uint64_t v11 = v219;
      uint64_t v10 = v227;
      uint64_t v9 = v236;
      uint64_t v8 = v246;
      uint64_t v7 = v257;
      uint64_t v6 = v269;
      uint64_t v5 = v282;
      uint64_t v4 = v296;
      uint64_t v3 = v311;
      uint64_t v2 = v327;
      uint64_t v1 = v344;
      a1 = v362;
    }
  }
  uint64_t v15 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v345 = v1;
    uint64_t v363 = a1;
    uint64_t v312 = v3;
    uint64_t v328 = v2;
    uint64_t v297 = v4;
    uint64_t v270 = v6;
    uint64_t v283 = v5;
    uint64_t v247 = v8;
    uint64_t v258 = v7;
    uint64_t v228 = v10;
    uint64_t v237 = v9;
    uint64_t v213 = v12;
    uint64_t v220 = v11;
    uint64_t v207 = v13;
    uint64_t v171 = v14;
    uint64_t v200 = v15;
    uint64_t v15 = v200;
    uint64_t v14 = v171;
    uint64_t v13 = v207;
    uint64_t v12 = v213;
    uint64_t v11 = v220;
    uint64_t v10 = v228;
    uint64_t v9 = v237;
    uint64_t v8 = v247;
    uint64_t v7 = v258;
    uint64_t v6 = v270;
    uint64_t v5 = v283;
    uint64_t v4 = v297;
    uint64_t v3 = v312;
    uint64_t v2 = v328;
    uint64_t v1 = v345;
    int v173 = v172;
    a1 = v363;
    if (v173)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v174 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v174) {
        unint64_t v175 = v174;
      }
      else {
        unint64_t v175 = v367;
      }
      uint64_t v176 = &v366[v175];
      unint64_t v177 = v367 - v175;
      if (v367 - v175 >= 0x12) {
        uint64_t v178 = 18;
      }
      else {
        uint64_t v178 = v367 - v175;
      }
      unint64_t v179 = v177 - v178;
      if (v179 >= v179 - 1) {
        uint64_t v180 = v179 - 1;
      }
      else {
        uint64_t v180 = v179;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      uint64_t v15 = v200;
      uint64_t v14 = v171;
      uint64_t v13 = v207;
      uint64_t v12 = v213;
      uint64_t v11 = v220;
      uint64_t v10 = v228;
      uint64_t v9 = v237;
      uint64_t v8 = v247;
      uint64_t v7 = v258;
      uint64_t v6 = v270;
      uint64_t v5 = v283;
      uint64_t v4 = v297;
      uint64_t v3 = v312;
      uint64_t v2 = v328;
      uint64_t v1 = v345;
      a1 = v363;
    }
  }
  uint64_t v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v346 = v1;
    uint64_t v364 = a1;
    uint64_t v313 = v3;
    uint64_t v329 = v2;
    uint64_t v298 = v4;
    uint64_t v271 = v6;
    uint64_t v284 = v5;
    uint64_t v248 = v8;
    uint64_t v259 = v7;
    uint64_t v229 = v10;
    uint64_t v238 = v9;
    uint64_t v214 = v12;
    uint64_t v221 = v11;
    uint64_t v205 = v14;
    uint64_t v208 = v13;
    uint64_t v181 = v15;
    uint64_t v202 = v16;
    uint64_t v16 = v202;
    uint64_t v14 = v205;
    uint64_t v15 = v181;
    uint64_t v13 = v208;
    uint64_t v12 = v214;
    uint64_t v11 = v221;
    uint64_t v10 = v229;
    uint64_t v9 = v238;
    uint64_t v8 = v248;
    uint64_t v7 = v259;
    uint64_t v6 = v271;
    uint64_t v5 = v284;
    uint64_t v4 = v298;
    uint64_t v3 = v313;
    uint64_t v2 = v329;
    uint64_t v1 = v346;
    int v183 = v182;
    a1 = v364;
    if (v183)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v184 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v184) {
        unint64_t v185 = v184;
      }
      else {
        unint64_t v185 = v367;
      }
      unint64_t v186 = &v366[v185];
      unint64_t v187 = v367 - v185;
      if (v367 - v185 >= 0x12) {
        uint64_t v188 = 18;
      }
      else {
        uint64_t v188 = v367 - v185;
      }
      unint64_t v189 = v187 - v188;
      if (v189 >= v189 - 1) {
        uint64_t v190 = v189 - 1;
      }
      else {
        uint64_t v190 = v189;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v186[v188], v190);
      uint64_t v16 = v202;
      uint64_t v14 = v205;
      uint64_t v15 = v181;
      uint64_t v13 = v208;
      uint64_t v12 = v214;
      uint64_t v11 = v221;
      uint64_t v10 = v229;
      uint64_t v9 = v238;
      uint64_t v8 = v248;
      uint64_t v7 = v259;
      uint64_t v6 = v271;
      uint64_t v5 = v284;
      uint64_t v4 = v298;
      uint64_t v3 = v313;
      uint64_t v2 = v329;
      uint64_t v1 = v346;
      a1 = v364;
    }
  }
  uint64_t v17 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v347 = v1;
    uint64_t v365 = a1;
    uint64_t v314 = v3;
    uint64_t v330 = v2;
    uint64_t v299 = v4;
    uint64_t v272 = v6;
    uint64_t v285 = v5;
    uint64_t v249 = v8;
    uint64_t v260 = v7;
    uint64_t v230 = v10;
    uint64_t v239 = v9;
    uint64_t v215 = v12;
    uint64_t v222 = v11;
    uint64_t v206 = v14;
    uint64_t v209 = v13;
    uint64_t v201 = v15;
    uint64_t v203 = v16;
    uint64_t v15 = v201;
    uint64_t v16 = v203;
    uint64_t v14 = v206;
    uint64_t v13 = v209;
    uint64_t v12 = v215;
    uint64_t v11 = v222;
    uint64_t v10 = v230;
    uint64_t v9 = v239;
    uint64_t v8 = v249;
    uint64_t v7 = v260;
    uint64_t v6 = v272;
    uint64_t v5 = v285;
    uint64_t v4 = v299;
    uint64_t v3 = v314;
    uint64_t v2 = v330;
    uint64_t v1 = v347;
    int v192 = v191;
    a1 = v365;
    if (v192)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v367 = 90;
      unint64_t v193 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v193) {
        unint64_t v194 = v193;
      }
      else {
        unint64_t v194 = v367;
      }
      unint64_t v195 = &v366[v194];
      unint64_t v196 = v367 - v194;
      if (v367 - v194 >= 0x12) {
        uint64_t v197 = 18;
      }
      else {
        uint64_t v197 = v367 - v194;
      }
      unint64_t v198 = v196 - v197;
      if (v198 >= v198 - 1) {
        uint64_t v199 = v198 - 1;
      }
      else {
        uint64_t v199 = v198;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v195[v197], v199);
      uint64_t v15 = v201;
      uint64_t v16 = v203;
      uint64_t v14 = v206;
      uint64_t v13 = v209;
      uint64_t v12 = v215;
      uint64_t v11 = v222;
      uint64_t v10 = v230;
      uint64_t v9 = v239;
      uint64_t v8 = v249;
      uint64_t v7 = v260;
      uint64_t v6 = v272;
      uint64_t v5 = v285;
      uint64_t v4 = v299;
      uint64_t v3 = v314;
      uint64_t v2 = v330;
      uint64_t v1 = v347;
      a1 = v365;
    }
  }
  return v1 == a1
      || v2 == a1
      || v3 == a1
      || v4 == a1
      || v5 == a1
      || v6 == a1
      || v7 == a1
      || v8 == a1
      || v9 == a1
      || v10 == a1
      || v11 == a1
      || v12 == a1
      || v13 == a1
      || v14 == a1
      || v15 == a1
      || v16 == a1
      || v17 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::arith::AddIOp::verifyInvariantsImpl((mlir::arith::AddIOp *)&v8))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::AddIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.addui_extended", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AddUIExtendedOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376320;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AddUIExtendedOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      char v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AddUIExtendedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::arith::AddUIExtendedOp::getShapeForUnroll((mlir::arith::AddUIExtendedOp *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::arith::AddUIExtendedOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::AddUIExtendedOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::AddUIExtendedOpGenericAdaptorBase::AddUIExtendedOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v9 = mlir::arith::AddUIExtendedOp::fold((uint64_t)&v13, (uint64_t)v14, a5);
  int v10 = *(_DWORD *)(a5 + 8);
  if ((_BYTE)v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 && !v10 && mlir::OpTrait::impl::foldCommutative((uint64_t)a2, a3, a4)) {
    return 1;
  }
  return v9;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v285 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v46 = v45;
    a1 = v285;
    if (v46)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v301 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v301;
      }
      uint64_t v49 = &v300[v48];
      unint64_t v50 = v301 - v48;
      if (v301 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v301 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v285;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v271 = v2;
    uint64_t v286 = a1;
    char v3 = (void *)&unk_267771000;
    int v55 = v54;
    uint64_t v2 = v271;
    a1 = v286;
    if (v55)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      unint64_t v301 = 89;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v301;
      }
      uint64_t v58 = &v300[v57];
      unint64_t v59 = v301 - v57;
      if (v301 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v301 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v271;
      a1 = v286;
    }
  }
  uint64_t v4 = v3[348];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v272 = v2;
    uint64_t v287 = a1;
    uint64_t v258 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v258;
    uint64_t v2 = v272;
    int v64 = v63;
    a1 = v287;
    if (v64)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v301 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v301;
      }
      uint64_t v67 = &v300[v66];
      unint64_t v68 = v301 - v66;
      if (v301 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v301 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v258;
      uint64_t v2 = v272;
      a1 = v287;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v273 = v2;
    uint64_t v288 = a1;
    uint64_t v246 = v6;
    uint64_t v259 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v246;
    uint64_t v4 = v259;
    int v73 = v72;
    uint64_t v2 = v273;
    a1 = v288;
    if (v73)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v301 = 90;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v301;
      }
      uint64_t v76 = &v300[v75];
      unint64_t v77 = v301 - v75;
      if (v301 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v301 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v246;
      uint64_t v4 = v259;
      uint64_t v2 = v273;
      a1 = v288;
    }
  }
  uint64_t v8 = v7[89];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v274 = v2;
    uint64_t v289 = a1;
    uint64_t v247 = v6;
    uint64_t v260 = v4;
    uint64_t v235 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v235;
    uint64_t v6 = v247;
    uint64_t v4 = v260;
    uint64_t v2 = v274;
    int v82 = v81;
    a1 = v289;
    if (v82)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v301 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v301;
      }
      uint64_t v85 = &v300[v84];
      unint64_t v86 = v301 - v84;
      if (v301 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v301 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v235;
      uint64_t v6 = v247;
      uint64_t v4 = v260;
      uint64_t v2 = v274;
      a1 = v289;
    }
  }
  uint64_t v10 = v9[435];
  BOOL v11 = &unk_267771000;
  {
    uint64_t v275 = v2;
    uint64_t v290 = a1;
    uint64_t v248 = v6;
    uint64_t v261 = v4;
    uint64_t v236 = v8;
    uint64_t v225 = v10;
    BOOL v11 = (void *)&unk_267771000;
    uint64_t v10 = v225;
    uint64_t v8 = v236;
    uint64_t v6 = v248;
    uint64_t v4 = v261;
    uint64_t v2 = v275;
    int v91 = v90;
    a1 = v290;
    if (v91)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v301 = 95;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v301;
      }
      uint64_t v94 = &v300[v93];
      unint64_t v95 = v301 - v93;
      if (v301 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v301 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      BOOL v11 = (void *)&unk_267771000;
      uint64_t v10 = v225;
      uint64_t v8 = v236;
      uint64_t v6 = v248;
      uint64_t v4 = v261;
      uint64_t v2 = v275;
      a1 = v290;
    }
  }
  uint64_t v12 = v11[322];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v276 = v2;
    uint64_t v291 = a1;
    uint64_t v249 = v6;
    uint64_t v262 = v4;
    uint64_t v237 = v8;
    uint64_t v216 = v12;
    uint64_t v226 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v216;
    uint64_t v10 = v226;
    uint64_t v8 = v237;
    uint64_t v6 = v249;
    uint64_t v4 = v262;
    uint64_t v2 = v276;
    int v100 = v99;
    a1 = v291;
    if (v100)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v301 = 99;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v301;
      }
      uint64_t v103 = &v300[v102];
      unint64_t v104 = v301 - v102;
      if (v301 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v301 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v216;
      uint64_t v10 = v226;
      uint64_t v8 = v237;
      uint64_t v6 = v249;
      uint64_t v4 = v262;
      uint64_t v2 = v276;
      a1 = v291;
    }
  }
  uint64_t v14 = v13[324];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v277 = v2;
    uint64_t v292 = a1;
    uint64_t v250 = v6;
    uint64_t v263 = v4;
    uint64_t v238 = v8;
    uint64_t v217 = v12;
    uint64_t v227 = v10;
    uint64_t v208 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v208;
    uint64_t v12 = v217;
    uint64_t v10 = v227;
    uint64_t v8 = v238;
    uint64_t v6 = v250;
    uint64_t v4 = v263;
    uint64_t v2 = v277;
    int v109 = v108;
    a1 = v292;
    if (v109)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v301 = 93;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v301;
      }
      uint64_t v112 = &v300[v111];
      unint64_t v113 = v301 - v111;
      if (v301 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v301 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v208;
      uint64_t v12 = v217;
      uint64_t v10 = v227;
      uint64_t v8 = v238;
      uint64_t v6 = v250;
      uint64_t v4 = v263;
      uint64_t v2 = v277;
      a1 = v292;
    }
  }
  uint64_t v16 = v15[31];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v278 = v2;
    uint64_t v293 = a1;
    uint64_t v251 = v6;
    uint64_t v264 = v4;
    uint64_t v239 = v8;
    uint64_t v218 = v12;
    uint64_t v228 = v10;
    uint64_t v201 = v16;
    uint64_t v209 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v201;
    uint64_t v14 = v209;
    uint64_t v12 = v218;
    uint64_t v10 = v228;
    uint64_t v8 = v239;
    uint64_t v6 = v251;
    uint64_t v4 = v264;
    uint64_t v2 = v278;
    int v118 = v117;
    a1 = v293;
    if (v118)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      unint64_t v301 = 85;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v301;
      }
      uint64_t v121 = &v300[v120];
      unint64_t v122 = v301 - v120;
      if (v301 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v301 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v201;
      uint64_t v14 = v209;
      uint64_t v12 = v218;
      uint64_t v10 = v228;
      uint64_t v8 = v239;
      uint64_t v6 = v251;
      uint64_t v4 = v264;
      uint64_t v2 = v278;
      a1 = v293;
    }
  }
  uint64_t v18 = v17[151];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v279 = v2;
    uint64_t v294 = a1;
    uint64_t v252 = v6;
    uint64_t v265 = v4;
    uint64_t v240 = v8;
    uint64_t v219 = v12;
    uint64_t v229 = v10;
    uint64_t v202 = v16;
    uint64_t v210 = v14;
    uint64_t v195 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v195;
    uint64_t v16 = v202;
    uint64_t v14 = v210;
    uint64_t v12 = v219;
    uint64_t v10 = v229;
    uint64_t v8 = v240;
    uint64_t v6 = v252;
    uint64_t v4 = v265;
    uint64_t v2 = v279;
    int v127 = v126;
    a1 = v294;
    if (v127)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v301 = 93;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v301;
      }
      uint64_t v130 = &v300[v129];
      unint64_t v131 = v301 - v129;
      if (v301 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v301 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v195;
      uint64_t v16 = v202;
      uint64_t v14 = v210;
      uint64_t v12 = v219;
      uint64_t v10 = v229;
      uint64_t v8 = v240;
      uint64_t v6 = v252;
      uint64_t v4 = v265;
      uint64_t v2 = v279;
      a1 = v294;
    }
  }
  uint64_t v20 = v19[330];
  int v21 = &unk_267771000;
  {
    uint64_t v280 = v2;
    uint64_t v295 = a1;
    uint64_t v253 = v6;
    uint64_t v266 = v4;
    uint64_t v241 = v8;
    uint64_t v220 = v12;
    uint64_t v230 = v10;
    uint64_t v203 = v16;
    uint64_t v211 = v14;
    uint64_t v190 = v20;
    uint64_t v196 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v190;
    uint64_t v18 = v196;
    uint64_t v16 = v203;
    uint64_t v14 = v211;
    uint64_t v12 = v220;
    uint64_t v10 = v230;
    uint64_t v8 = v241;
    uint64_t v6 = v253;
    uint64_t v4 = v266;
    uint64_t v2 = v280;
    int v136 = v135;
    a1 = v295;
    if (v136)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v301 = 83;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v301;
      }
      uint64_t v139 = &v300[v138];
      unint64_t v140 = v301 - v138;
      if (v301 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v301 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v190;
      uint64_t v18 = v196;
      uint64_t v16 = v203;
      uint64_t v14 = v211;
      uint64_t v12 = v220;
      uint64_t v10 = v230;
      uint64_t v8 = v241;
      uint64_t v6 = v253;
      uint64_t v4 = v266;
      uint64_t v2 = v280;
      a1 = v295;
    }
  }
  uint64_t v22 = v21[332];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v281 = v2;
    uint64_t v296 = a1;
    uint64_t v254 = v6;
    uint64_t v267 = v4;
    uint64_t v242 = v8;
    uint64_t v221 = v12;
    uint64_t v231 = v10;
    uint64_t v204 = v16;
    uint64_t v212 = v14;
    uint64_t v191 = v20;
    uint64_t v197 = v18;
    uint64_t v186 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v186;
    uint64_t v20 = v191;
    uint64_t v18 = v197;
    uint64_t v16 = v204;
    uint64_t v14 = v212;
    uint64_t v12 = v221;
    uint64_t v10 = v231;
    uint64_t v8 = v242;
    uint64_t v6 = v254;
    uint64_t v4 = v267;
    uint64_t v2 = v281;
    int v145 = v144;
    a1 = v296;
    if (v145)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v301 = 84;
      unint64_t v146 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v146) {
        unint64_t v147 = v146;
      }
      else {
        unint64_t v147 = v301;
      }
      uint64_t v148 = &v300[v147];
      unint64_t v149 = v301 - v147;
      if (v301 - v147 >= 0x12) {
        uint64_t v150 = 18;
      }
      else {
        uint64_t v150 = v301 - v147;
      }
      unint64_t v151 = v149 - v150;
      if (v151 >= v151 - 1) {
        uint64_t v152 = v151 - 1;
      }
      else {
        uint64_t v152 = v151;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v148[v150], v152);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v186;
      uint64_t v20 = v191;
      uint64_t v18 = v197;
      uint64_t v16 = v204;
      uint64_t v14 = v212;
      uint64_t v12 = v221;
      uint64_t v10 = v231;
      uint64_t v8 = v242;
      uint64_t v6 = v254;
      uint64_t v4 = v267;
      uint64_t v2 = v281;
      a1 = v296;
    }
  }
  uint64_t v24 = v23[334];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v282 = v2;
    uint64_t v297 = a1;
    uint64_t v255 = v6;
    uint64_t v268 = v4;
    uint64_t v243 = v8;
    uint64_t v222 = v12;
    uint64_t v232 = v10;
    uint64_t v205 = v16;
    uint64_t v213 = v14;
    uint64_t v192 = v20;
    uint64_t v198 = v18;
    uint64_t v183 = v24;
    uint64_t v187 = v22;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v183;
    uint64_t v22 = v187;
    uint64_t v20 = v192;
    uint64_t v18 = v198;
    uint64_t v16 = v205;
    uint64_t v14 = v213;
    uint64_t v12 = v222;
    uint64_t v10 = v232;
    uint64_t v8 = v243;
    uint64_t v6 = v255;
    uint64_t v4 = v268;
    uint64_t v2 = v282;
    int v154 = v153;
    a1 = v297;
    if (v154)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v301 = 84;
      unint64_t v155 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v155) {
        unint64_t v156 = v155;
      }
      else {
        unint64_t v156 = v301;
      }
      unint64_t v157 = &v300[v156];
      unint64_t v158 = v301 - v156;
      if (v301 - v156 >= 0x12) {
        uint64_t v159 = 18;
      }
      else {
        uint64_t v159 = v301 - v156;
      }
      unint64_t v160 = v158 - v159;
      if (v160 >= v160 - 1) {
        uint64_t v161 = v160 - 1;
      }
      else {
        uint64_t v161 = v160;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v157[v159], v161);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v183;
      uint64_t v22 = v187;
      uint64_t v20 = v192;
      uint64_t v18 = v198;
      uint64_t v16 = v205;
      uint64_t v14 = v213;
      uint64_t v12 = v222;
      uint64_t v10 = v232;
      uint64_t v8 = v243;
      uint64_t v6 = v255;
      uint64_t v4 = v268;
      uint64_t v2 = v282;
      a1 = v297;
    }
  }
  uint64_t v26 = v25[336];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v283 = v2;
    uint64_t v298 = a1;
    uint64_t v256 = v6;
    uint64_t v269 = v4;
    uint64_t v244 = v8;
    uint64_t v223 = v12;
    uint64_t v233 = v10;
    uint64_t v206 = v16;
    uint64_t v214 = v14;
    uint64_t v193 = v20;
    uint64_t v199 = v18;
    uint64_t v184 = v24;
    uint64_t v188 = v22;
    uint64_t v181 = v26;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v181;
    uint64_t v24 = v184;
    uint64_t v22 = v188;
    uint64_t v20 = v193;
    uint64_t v18 = v199;
    uint64_t v16 = v206;
    uint64_t v14 = v214;
    uint64_t v12 = v223;
    uint64_t v10 = v233;
    uint64_t v8 = v244;
    uint64_t v6 = v256;
    uint64_t v4 = v269;
    uint64_t v2 = v283;
    int v163 = v162;
    a1 = v298;
    if (v163)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v301 = 84;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v301;
      }
      unint64_t v166 = &v300[v165];
      unint64_t v167 = v301 - v165;
      if (v301 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v301 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v181;
      uint64_t v24 = v184;
      uint64_t v22 = v188;
      uint64_t v20 = v193;
      uint64_t v18 = v199;
      uint64_t v16 = v206;
      uint64_t v14 = v214;
      uint64_t v12 = v223;
      uint64_t v10 = v233;
      uint64_t v8 = v244;
      uint64_t v6 = v256;
      uint64_t v4 = v269;
      uint64_t v2 = v283;
      a1 = v298;
    }
  }
  uint64_t v28 = v27[338];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v284 = v2;
    uint64_t v299 = a1;
    uint64_t v257 = v6;
    uint64_t v270 = v4;
    uint64_t v245 = v8;
    uint64_t v224 = v12;
    uint64_t v234 = v10;
    uint64_t v207 = v16;
    uint64_t v215 = v14;
    uint64_t v194 = v20;
    uint64_t v200 = v18;
    uint64_t v185 = v24;
    uint64_t v189 = v22;
    uint64_t v180 = v28;
    uint64_t v182 = v26;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v180;
    uint64_t v26 = v182;
    uint64_t v24 = v185;
    uint64_t v22 = v189;
    uint64_t v20 = v194;
    uint64_t v18 = v200;
    uint64_t v16 = v207;
    uint64_t v14 = v215;
    uint64_t v12 = v224;
    uint64_t v10 = v234;
    uint64_t v8 = v245;
    uint64_t v6 = v257;
    uint64_t v4 = v270;
    uint64_t v2 = v284;
    int v172 = v171;
    a1 = v299;
    if (v172)
    {
      uint64_t v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v301 = 86;
      unint64_t v173 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v173) {
        unint64_t v174 = v173;
      }
      else {
        unint64_t v174 = v301;
      }
      unint64_t v175 = &v300[v174];
      unint64_t v176 = v301 - v174;
      if (v301 - v174 >= 0x12) {
        uint64_t v177 = 18;
      }
      else {
        uint64_t v177 = v301 - v174;
      }
      unint64_t v178 = v176 - v177;
      if (v178 >= v178 - 1) {
        uint64_t v179 = v178 - 1;
      }
      else {
        uint64_t v179 = v178;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v175[v177], v179);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v180;
      uint64_t v26 = v182;
      uint64_t v24 = v185;
      uint64_t v22 = v189;
      uint64_t v20 = v194;
      uint64_t v18 = v200;
      uint64_t v16 = v207;
      uint64_t v14 = v215;
      uint64_t v12 = v224;
      uint64_t v10 = v234;
      uint64_t v8 = v245;
      uint64_t v6 = v257;
      uint64_t v4 = v270;
      uint64_t v2 = v284;
      a1 = v299;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v29[350] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddUIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddUIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddUIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddUIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddUIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::AddUIExtendedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddUIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddUIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddUIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddUIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddUIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::AddUIExtendedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v6 = a1, mlir::arith::AddUIExtendedOp::verifyInvariantsImpl((mlir::arith::AddUIExtendedOp *)&v6)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::AddUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.andi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3767D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        BOOL v11 = v13;
      }
      else {
        BOOL v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::AndIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      BOOL v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          BOOL v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      char v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::AndIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::AndIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::AndIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AndIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::AndIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::AndIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.andi";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AndIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::AndIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v16 = a1;
  mlir::arith::detail::AndIOpGenericAdaptorBase::AndIOpGenericAdaptorBase((uint64_t)v17, a1);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  unint64_t v8 = mlir::arith::AndIOp::fold((uint64_t *)&v16, (uint64_t)v17);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8)) {
      return v9 > 7;
    }
    if (mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return 1;
    }
    if (*(_DWORD *)(a4 + 8)) {
      return v9 > 7;
    }
    unint64_t v13 = mlir::OpTrait::impl::foldIdempotent((mlir::OpTrait::impl *)a1, v12);
    if (v13 < 8) {
      return v9 > 7;
    }
    unint64_t v14 = v13;
    if (a1 - 4 == (unsigned int *)(v13 & ((uint64_t)(v13 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
      return 1;
    }
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    if (v15 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v15) = v14;
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
  }
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  {
    uint64_t v38 = a1;
    a1 = v38;
    if (v39)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v396 = 83;
      unint64_t v40 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v40) {
        unint64_t v41 = v40;
      }
      else {
        unint64_t v41 = v396;
      }
      unint64_t v42 = &v395[v41];
      unint64_t v43 = v396 - v41;
      if (v396 - v41 >= 0x12) {
        uint64_t v44 = 18;
      }
      else {
        uint64_t v44 = v396 - v41;
      }
      unint64_t v45 = v43 - v44;
      if (v45 >= v45 - 1) {
        uint64_t v46 = v45 - 1;
      }
      else {
        uint64_t v46 = v45;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      a1 = v38;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v47 = a1;
    uint64_t v48 = v1;
    uint64_t v1 = v48;
    int v50 = v49;
    a1 = v47;
    if (v50)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v396 = 81;
      unint64_t v51 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v51) {
        unint64_t v52 = v51;
      }
      else {
        unint64_t v52 = v396;
      }
      uint64_t v53 = &v395[v52];
      unint64_t v54 = v396 - v52;
      if (v396 - v52 >= 0x12) {
        uint64_t v55 = 18;
      }
      else {
        uint64_t v55 = v396 - v52;
      }
      unint64_t v56 = v54 - v55;
      if (v56 >= v56 - 1) {
        uint64_t v57 = v56 - 1;
      }
      else {
        uint64_t v57 = v56;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      uint64_t v1 = v48;
      a1 = v47;
    }
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v378 = a1;
    uint64_t v58 = v1;
    uint64_t v59 = v2;
    uint64_t v2 = v59;
    uint64_t v1 = v58;
    int v61 = v60;
    a1 = v378;
    if (v61)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v396 = 104;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v396;
      }
      int v64 = &v395[v63];
      unint64_t v65 = v396 - v63;
      if (v396 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v396 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v2 = v59;
      uint64_t v1 = v58;
      a1 = v378;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v362 = v2;
    uint64_t v379 = a1;
    uint64_t v69 = v1;
    uint64_t v70 = v3;
    uint64_t v3 = v70;
    uint64_t v1 = v69;
    int v72 = v71;
    uint64_t v2 = v362;
    a1 = v379;
    if (v72)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v396 = 86;
      unint64_t v73 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v73) {
        unint64_t v74 = v73;
      }
      else {
        unint64_t v74 = v396;
      }
      unint64_t v75 = &v395[v74];
      unint64_t v76 = v396 - v74;
      if (v396 - v74 >= 0x12) {
        uint64_t v77 = 18;
      }
      else {
        uint64_t v77 = v396 - v74;
      }
      unint64_t v78 = v76 - v77;
      if (v78 >= v78 - 1) {
        uint64_t v79 = v78 - 1;
      }
      else {
        uint64_t v79 = v78;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      uint64_t v3 = v70;
      uint64_t v2 = v362;
      a1 = v379;
      uint64_t v1 = v69;
    }
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v363 = v2;
    uint64_t v380 = a1;
    uint64_t v347 = v1;
    uint64_t v80 = v3;
    uint64_t v81 = v4;
    uint64_t v4 = v81;
    uint64_t v3 = v80;
    uint64_t v1 = v347;
    uint64_t v2 = v363;
    int v83 = v82;
    a1 = v380;
    if (v83)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v396 = 90;
      unint64_t v84 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v84) {
        unint64_t v85 = v84;
      }
      else {
        unint64_t v85 = v396;
      }
      unint64_t v86 = &v395[v85];
      unint64_t v87 = v396 - v85;
      if (v396 - v85 >= 0x12) {
        uint64_t v88 = 18;
      }
      else {
        uint64_t v88 = v396 - v85;
      }
      unint64_t v89 = v87 - v88;
      if (v89 >= v89 - 1) {
        uint64_t v90 = v89 - 1;
      }
      else {
        uint64_t v90 = v89;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      uint64_t v4 = v81;
      uint64_t v3 = v80;
      uint64_t v1 = v347;
      uint64_t v2 = v363;
      a1 = v380;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v364 = v2;
    uint64_t v381 = a1;
    uint64_t v333 = v3;
    uint64_t v348 = v1;
    uint64_t v91 = v4;
    uint64_t v92 = v5;
    uint64_t v5 = v92;
    uint64_t v4 = v91;
    uint64_t v3 = v333;
    uint64_t v1 = v348;
    int v94 = v93;
    uint64_t v2 = v364;
    a1 = v381;
    if (v94)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v396 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v396;
      }
      unint64_t v97 = &v395[v96];
      unint64_t v98 = v396 - v96;
      if (v396 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v396 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v5 = v92;
      uint64_t v4 = v91;
      uint64_t v3 = v333;
      uint64_t v1 = v348;
      uint64_t v2 = v364;
      a1 = v381;
    }
  }
  uint64_t v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v365 = v2;
    uint64_t v382 = a1;
    uint64_t v334 = v3;
    uint64_t v349 = v1;
    uint64_t v320 = v4;
    uint64_t v102 = v5;
    uint64_t v103 = v6;
    uint64_t v6 = v103;
    uint64_t v5 = v102;
    uint64_t v4 = v320;
    uint64_t v3 = v334;
    uint64_t v1 = v349;
    uint64_t v2 = v365;
    int v105 = v104;
    a1 = v382;
    if (v105)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      unint64_t v396 = 85;
      unint64_t v106 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v106) {
        unint64_t v107 = v106;
      }
      else {
        unint64_t v107 = v396;
      }
      int v108 = &v395[v107];
      unint64_t v109 = v396 - v107;
      if (v396 - v107 >= 0x12) {
        uint64_t v110 = 18;
      }
      else {
        uint64_t v110 = v396 - v107;
      }
      unint64_t v111 = v109 - v110;
      if (v111 >= v111 - 1) {
        uint64_t v112 = v111 - 1;
      }
      else {
        uint64_t v112 = v111;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v108[v110], v112);
      uint64_t v6 = v103;
      uint64_t v5 = v102;
      uint64_t v4 = v320;
      uint64_t v3 = v334;
      uint64_t v1 = v349;
      uint64_t v2 = v365;
      a1 = v382;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v366 = v2;
    uint64_t v383 = a1;
    uint64_t v335 = v3;
    uint64_t v350 = v1;
    uint64_t v321 = v4;
    uint64_t v308 = v5;
    uint64_t v113 = v6;
    uint64_t v114 = v7;
    uint64_t v7 = v114;
    uint64_t v6 = v113;
    uint64_t v5 = v308;
    uint64_t v4 = v321;
    uint64_t v3 = v335;
    uint64_t v1 = v350;
    uint64_t v2 = v366;
    int v116 = v115;
    a1 = v383;
    if (v116)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIdempotent<Empty>]";
      unint64_t v396 = 84;
      unint64_t v117 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v117) {
        unint64_t v118 = v117;
      }
      else {
        unint64_t v118 = v396;
      }
      unint64_t v119 = &v395[v118];
      unint64_t v120 = v396 - v118;
      if (v396 - v118 >= 0x12) {
        uint64_t v121 = 18;
      }
      else {
        uint64_t v121 = v396 - v118;
      }
      unint64_t v122 = v120 - v121;
      if (v122 >= v122 - 1) {
        uint64_t v123 = v122 - 1;
      }
      else {
        uint64_t v123 = v122;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIdempotent<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIdempotent>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      uint64_t v7 = v114;
      uint64_t v6 = v113;
      uint64_t v5 = v308;
      uint64_t v4 = v321;
      uint64_t v3 = v335;
      uint64_t v1 = v350;
      uint64_t v2 = v366;
      a1 = v383;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::OpTrait::IsIdempotent<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIdempotent>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v367 = v2;
    uint64_t v384 = a1;
    uint64_t v336 = v3;
    uint64_t v351 = v1;
    uint64_t v322 = v4;
    uint64_t v297 = v6;
    uint64_t v309 = v5;
    uint64_t v124 = v7;
    uint64_t v125 = v8;
    uint64_t v8 = v125;
    uint64_t v7 = v124;
    uint64_t v6 = v297;
    uint64_t v5 = v309;
    uint64_t v4 = v322;
    uint64_t v3 = v336;
    uint64_t v1 = v351;
    uint64_t v2 = v367;
    int v127 = v126;
    a1 = v384;
    if (v127)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v396 = 95;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v396;
      }
      uint64_t v130 = &v395[v129];
      unint64_t v131 = v396 - v129;
      if (v396 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v396 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v8 = v125;
      uint64_t v7 = v124;
      uint64_t v6 = v297;
      uint64_t v5 = v309;
      uint64_t v4 = v322;
      uint64_t v3 = v336;
      uint64_t v1 = v351;
      uint64_t v2 = v367;
      a1 = v384;
    }
  }
  uint64_t v9 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v368 = v2;
    uint64_t v385 = a1;
    uint64_t v337 = v3;
    uint64_t v352 = v1;
    uint64_t v323 = v4;
    uint64_t v298 = v6;
    uint64_t v310 = v5;
    uint64_t v287 = v7;
    uint64_t v135 = v8;
    uint64_t v136 = v9;
    uint64_t v9 = v136;
    uint64_t v8 = v135;
    uint64_t v7 = v287;
    uint64_t v6 = v298;
    uint64_t v5 = v310;
    uint64_t v4 = v323;
    uint64_t v3 = v337;
    uint64_t v1 = v352;
    uint64_t v2 = v368;
    int v138 = v137;
    a1 = v385;
    if (v138)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v396 = 99;
      unint64_t v139 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v139) {
        unint64_t v140 = v139;
      }
      else {
        unint64_t v140 = v396;
      }
      uint64_t v141 = &v395[v140];
      unint64_t v142 = v396 - v140;
      if (v396 - v140 >= 0x12) {
        uint64_t v143 = 18;
      }
      else {
        uint64_t v143 = v396 - v140;
      }
      unint64_t v144 = v142 - v143;
      if (v144 >= v144 - 1) {
        uint64_t v145 = v144 - 1;
      }
      else {
        uint64_t v145 = v144;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      uint64_t v9 = v136;
      uint64_t v8 = v135;
      uint64_t v7 = v287;
      uint64_t v6 = v298;
      uint64_t v5 = v310;
      uint64_t v4 = v323;
      uint64_t v3 = v337;
      uint64_t v1 = v352;
      uint64_t v2 = v368;
      a1 = v385;
    }
  }
  uint64_t v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v369 = v2;
    uint64_t v386 = a1;
    uint64_t v338 = v3;
    uint64_t v353 = v1;
    uint64_t v324 = v4;
    uint64_t v299 = v6;
    uint64_t v311 = v5;
    uint64_t v278 = v8;
    uint64_t v288 = v7;
    uint64_t v146 = v9;
    uint64_t v147 = v10;
    uint64_t v10 = v147;
    uint64_t v9 = v146;
    uint64_t v8 = v278;
    uint64_t v7 = v288;
    uint64_t v6 = v299;
    uint64_t v5 = v311;
    uint64_t v4 = v324;
    uint64_t v3 = v338;
    uint64_t v1 = v353;
    uint64_t v2 = v369;
    int v149 = v148;
    a1 = v386;
    if (v149)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v396 = 93;
      unint64_t v150 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v150) {
        unint64_t v151 = v150;
      }
      else {
        unint64_t v151 = v396;
      }
      uint64_t v152 = &v395[v151];
      unint64_t v153 = v396 - v151;
      if (v396 - v151 >= 0x12) {
        uint64_t v154 = 18;
      }
      else {
        uint64_t v154 = v396 - v151;
      }
      unint64_t v155 = v153 - v154;
      if (v155 >= v155 - 1) {
        uint64_t v156 = v155 - 1;
      }
      else {
        uint64_t v156 = v155;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v152[v154], v156);
      uint64_t v10 = v147;
      uint64_t v9 = v146;
      uint64_t v8 = v278;
      uint64_t v7 = v288;
      uint64_t v6 = v299;
      uint64_t v5 = v311;
      uint64_t v4 = v324;
      uint64_t v3 = v338;
      uint64_t v1 = v353;
      uint64_t v2 = v369;
      a1 = v386;
    }
  }
  uint64_t v11 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v370 = v2;
    uint64_t v387 = a1;
    uint64_t v339 = v3;
    uint64_t v354 = v1;
    uint64_t v325 = v4;
    uint64_t v300 = v6;
    uint64_t v312 = v5;
    uint64_t v279 = v8;
    uint64_t v289 = v7;
    uint64_t v270 = v9;
    uint64_t v157 = v10;
    uint64_t v158 = v11;
    uint64_t v11 = v158;
    uint64_t v10 = v157;
    uint64_t v9 = v270;
    uint64_t v8 = v279;
    uint64_t v7 = v289;
    uint64_t v6 = v300;
    uint64_t v5 = v312;
    uint64_t v4 = v325;
    uint64_t v3 = v339;
    uint64_t v1 = v354;
    uint64_t v2 = v370;
    int v160 = v159;
    a1 = v387;
    if (v160)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v396 = 92;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v396;
      }
      int v163 = &v395[v162];
      unint64_t v164 = v396 - v162;
      if (v396 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v396 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      uint64_t v11 = v158;
      uint64_t v10 = v157;
      uint64_t v9 = v270;
      uint64_t v8 = v279;
      uint64_t v7 = v289;
      uint64_t v6 = v300;
      uint64_t v5 = v312;
      uint64_t v4 = v325;
      uint64_t v3 = v339;
      uint64_t v1 = v354;
      uint64_t v2 = v370;
      a1 = v387;
    }
  }
  uint64_t v12 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v371 = v2;
    uint64_t v388 = a1;
    uint64_t v340 = v3;
    uint64_t v355 = v1;
    uint64_t v326 = v4;
    uint64_t v301 = v6;
    uint64_t v313 = v5;
    uint64_t v280 = v8;
    uint64_t v290 = v7;
    uint64_t v263 = v10;
    uint64_t v271 = v9;
    uint64_t v168 = v11;
    uint64_t v169 = v12;
    uint64_t v12 = v169;
    uint64_t v11 = v168;
    uint64_t v10 = v263;
    uint64_t v9 = v271;
    uint64_t v8 = v280;
    uint64_t v7 = v290;
    uint64_t v6 = v301;
    uint64_t v5 = v313;
    uint64_t v4 = v326;
    uint64_t v3 = v340;
    uint64_t v1 = v355;
    uint64_t v2 = v371;
    int v171 = v170;
    a1 = v388;
    if (v171)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v396 = 97;
      unint64_t v172 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v172) {
        unint64_t v173 = v172;
      }
      else {
        unint64_t v173 = v396;
      }
      unint64_t v174 = &v395[v173];
      unint64_t v175 = v396 - v173;
      if (v396 - v173 >= 0x12) {
        uint64_t v176 = 18;
      }
      else {
        uint64_t v176 = v396 - v173;
      }
      unint64_t v177 = v175 - v176;
      if (v177 >= v177 - 1) {
        uint64_t v178 = v177 - 1;
      }
      else {
        uint64_t v178 = v177;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v174[v176], v178);
      uint64_t v12 = v169;
      uint64_t v11 = v168;
      uint64_t v10 = v263;
      uint64_t v9 = v271;
      uint64_t v8 = v280;
      uint64_t v7 = v290;
      uint64_t v6 = v301;
      uint64_t v5 = v313;
      uint64_t v4 = v326;
      uint64_t v3 = v340;
      uint64_t v1 = v355;
      uint64_t v2 = v371;
      a1 = v388;
    }
  }
  uint64_t v13 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v372 = v2;
    uint64_t v389 = a1;
    uint64_t v341 = v3;
    uint64_t v356 = v1;
    uint64_t v327 = v4;
    uint64_t v302 = v6;
    uint64_t v314 = v5;
    uint64_t v281 = v8;
    uint64_t v291 = v7;
    uint64_t v264 = v10;
    uint64_t v272 = v9;
    uint64_t v257 = v11;
    uint64_t v179 = v12;
    uint64_t v180 = v13;
    uint64_t v13 = v180;
    uint64_t v12 = v179;
    uint64_t v11 = v257;
    uint64_t v10 = v264;
    uint64_t v9 = v272;
    uint64_t v8 = v281;
    uint64_t v7 = v291;
    uint64_t v6 = v302;
    uint64_t v5 = v314;
    uint64_t v4 = v327;
    uint64_t v3 = v341;
    uint64_t v1 = v356;
    uint64_t v2 = v372;
    int v182 = v181;
    a1 = v389;
    if (v182)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v396 = 93;
      unint64_t v183 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v183) {
        unint64_t v184 = v183;
      }
      else {
        unint64_t v184 = v396;
      }
      uint64_t v185 = &v395[v184];
      unint64_t v186 = v396 - v184;
      if (v396 - v184 >= 0x12) {
        uint64_t v187 = 18;
      }
      else {
        uint64_t v187 = v396 - v184;
      }
      unint64_t v188 = v186 - v187;
      if (v188 >= v188 - 1) {
        uint64_t v189 = v188 - 1;
      }
      else {
        uint64_t v189 = v188;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      uint64_t v13 = v180;
      uint64_t v12 = v179;
      uint64_t v11 = v257;
      uint64_t v10 = v264;
      uint64_t v9 = v272;
      uint64_t v8 = v281;
      uint64_t v7 = v291;
      uint64_t v6 = v302;
      uint64_t v5 = v314;
      uint64_t v4 = v327;
      uint64_t v3 = v341;
      uint64_t v1 = v356;
      uint64_t v2 = v372;
      a1 = v389;
    }
  }
  uint64_t v14 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v373 = v2;
    uint64_t v390 = a1;
    uint64_t v342 = v3;
    uint64_t v357 = v1;
    uint64_t v328 = v4;
    uint64_t v303 = v6;
    uint64_t v315 = v5;
    uint64_t v282 = v8;
    uint64_t v292 = v7;
    uint64_t v265 = v10;
    uint64_t v273 = v9;
    uint64_t v252 = v12;
    uint64_t v258 = v11;
    uint64_t v190 = v13;
    uint64_t v191 = v14;
    uint64_t v14 = v191;
    uint64_t v13 = v190;
    uint64_t v12 = v252;
    uint64_t v11 = v258;
    uint64_t v10 = v265;
    uint64_t v9 = v273;
    uint64_t v8 = v282;
    uint64_t v7 = v292;
    uint64_t v6 = v303;
    uint64_t v5 = v315;
    uint64_t v4 = v328;
    uint64_t v3 = v342;
    uint64_t v1 = v357;
    uint64_t v2 = v373;
    int v193 = v192;
    a1 = v390;
    if (v193)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v396 = 83;
      unint64_t v194 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v194) {
        unint64_t v195 = v194;
      }
      else {
        unint64_t v195 = v396;
      }
      uint64_t v196 = &v395[v195];
      unint64_t v197 = v396 - v195;
      if (v396 - v195 >= 0x12) {
        uint64_t v198 = 18;
      }
      else {
        uint64_t v198 = v396 - v195;
      }
      unint64_t v199 = v197 - v198;
      if (v199 >= v199 - 1) {
        uint64_t v200 = v199 - 1;
      }
      else {
        uint64_t v200 = v199;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v196[v198], v200);
      uint64_t v14 = v191;
      uint64_t v13 = v190;
      uint64_t v12 = v252;
      uint64_t v11 = v258;
      uint64_t v10 = v265;
      uint64_t v9 = v273;
      uint64_t v8 = v282;
      uint64_t v7 = v292;
      uint64_t v6 = v303;
      uint64_t v5 = v315;
      uint64_t v4 = v328;
      uint64_t v3 = v342;
      uint64_t v1 = v357;
      uint64_t v2 = v373;
      a1 = v390;
    }
  }
  uint64_t v15 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v374 = v2;
    uint64_t v391 = a1;
    uint64_t v343 = v3;
    uint64_t v358 = v1;
    uint64_t v329 = v4;
    uint64_t v304 = v6;
    uint64_t v316 = v5;
    uint64_t v283 = v8;
    uint64_t v293 = v7;
    uint64_t v266 = v10;
    uint64_t v274 = v9;
    uint64_t v253 = v12;
    uint64_t v259 = v11;
    uint64_t v201 = v13;
    uint64_t v202 = v14;
    uint64_t v242 = v15;
    uint64_t v15 = v242;
    uint64_t v14 = v202;
    uint64_t v13 = v201;
    uint64_t v12 = v253;
    uint64_t v11 = v259;
    uint64_t v10 = v266;
    uint64_t v9 = v274;
    uint64_t v8 = v283;
    uint64_t v7 = v293;
    uint64_t v6 = v304;
    uint64_t v5 = v316;
    uint64_t v4 = v329;
    uint64_t v3 = v343;
    uint64_t v1 = v358;
    uint64_t v2 = v374;
    int v204 = v203;
    a1 = v391;
    if (v204)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v396 = 84;
      unint64_t v205 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v205) {
        unint64_t v206 = v205;
      }
      else {
        unint64_t v206 = v396;
      }
      uint64_t v207 = &v395[v206];
      unint64_t v208 = v396 - v206;
      if (v396 - v206 >= 0x12) {
        uint64_t v209 = 18;
      }
      else {
        uint64_t v209 = v396 - v206;
      }
      unint64_t v210 = v208 - v209;
      if (v210 >= v210 - 1) {
        uint64_t v211 = v210 - 1;
      }
      else {
        uint64_t v211 = v210;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v207[v209], v211);
      uint64_t v15 = v242;
      uint64_t v14 = v202;
      uint64_t v13 = v201;
      uint64_t v12 = v253;
      uint64_t v11 = v259;
      uint64_t v10 = v266;
      uint64_t v9 = v274;
      uint64_t v8 = v283;
      uint64_t v7 = v293;
      uint64_t v6 = v304;
      uint64_t v5 = v316;
      uint64_t v4 = v329;
      uint64_t v3 = v343;
      uint64_t v1 = v358;
      uint64_t v2 = v374;
      a1 = v391;
    }
  }
  uint64_t v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v375 = v2;
    uint64_t v392 = a1;
    uint64_t v344 = v3;
    uint64_t v359 = v1;
    uint64_t v330 = v4;
    uint64_t v305 = v6;
    uint64_t v317 = v5;
    uint64_t v284 = v8;
    uint64_t v294 = v7;
    uint64_t v267 = v10;
    uint64_t v275 = v9;
    uint64_t v254 = v12;
    uint64_t v260 = v11;
    uint64_t v246 = v13;
    uint64_t v249 = v16;
    uint64_t v212 = v14;
    uint64_t v213 = v15;
    uint64_t v13 = v246;
    uint64_t v16 = v249;
    uint64_t v15 = v213;
    uint64_t v14 = v212;
    uint64_t v12 = v254;
    uint64_t v11 = v260;
    uint64_t v10 = v267;
    uint64_t v9 = v275;
    uint64_t v8 = v284;
    uint64_t v7 = v294;
    uint64_t v6 = v305;
    uint64_t v5 = v317;
    uint64_t v4 = v330;
    uint64_t v3 = v344;
    uint64_t v1 = v359;
    uint64_t v2 = v375;
    int v215 = v214;
    a1 = v392;
    if (v215)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v396 = 84;
      unint64_t v216 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v216) {
        unint64_t v217 = v216;
      }
      else {
        unint64_t v217 = v396;
      }
      uint64_t v218 = &v395[v217];
      unint64_t v219 = v396 - v217;
      if (v396 - v217 >= 0x12) {
        uint64_t v220 = 18;
      }
      else {
        uint64_t v220 = v396 - v217;
      }
      unint64_t v221 = v219 - v220;
      if (v221 >= v221 - 1) {
        uint64_t v222 = v221 - 1;
      }
      else {
        uint64_t v222 = v221;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v218[v220], v222);
      uint64_t v13 = v246;
      uint64_t v16 = v249;
      uint64_t v15 = v213;
      uint64_t v14 = v212;
      uint64_t v12 = v254;
      uint64_t v11 = v260;
      uint64_t v10 = v267;
      uint64_t v9 = v275;
      uint64_t v8 = v284;
      uint64_t v7 = v294;
      uint64_t v6 = v305;
      uint64_t v5 = v317;
      uint64_t v4 = v330;
      uint64_t v3 = v344;
      uint64_t v1 = v359;
      uint64_t v2 = v375;
      a1 = v392;
    }
  }
  uint64_t v17 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v376 = v2;
    uint64_t v393 = a1;
    uint64_t v345 = v3;
    uint64_t v360 = v1;
    uint64_t v331 = v4;
    uint64_t v306 = v6;
    uint64_t v318 = v5;
    uint64_t v285 = v8;
    uint64_t v295 = v7;
    uint64_t v268 = v10;
    uint64_t v276 = v9;
    uint64_t v255 = v12;
    uint64_t v261 = v11;
    uint64_t v247 = v13;
    uint64_t v250 = v16;
    uint64_t v244 = v14;
    uint64_t v223 = v15;
    uint64_t v14 = v244;
    uint64_t v13 = v247;
    uint64_t v16 = v250;
    uint64_t v15 = v223;
    uint64_t v12 = v255;
    uint64_t v11 = v261;
    uint64_t v10 = v268;
    uint64_t v9 = v276;
    uint64_t v8 = v285;
    uint64_t v7 = v295;
    uint64_t v6 = v306;
    uint64_t v5 = v318;
    uint64_t v4 = v331;
    uint64_t v3 = v345;
    uint64_t v1 = v360;
    uint64_t v2 = v376;
    int v225 = v224;
    a1 = v393;
    if (v225)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v396 = 84;
      unint64_t v226 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v226) {
        unint64_t v227 = v226;
      }
      else {
        unint64_t v227 = v396;
      }
      uint64_t v228 = &v395[v227];
      unint64_t v229 = v396 - v227;
      if (v396 - v227 >= 0x12) {
        uint64_t v230 = 18;
      }
      else {
        uint64_t v230 = v396 - v227;
      }
      unint64_t v231 = v229 - v230;
      if (v231 >= v231 - 1) {
        uint64_t v232 = v231 - 1;
      }
      else {
        uint64_t v232 = v231;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v228[v230], v232);
      uint64_t v14 = v244;
      uint64_t v13 = v247;
      uint64_t v16 = v250;
      uint64_t v15 = v223;
      uint64_t v12 = v255;
      uint64_t v11 = v261;
      uint64_t v10 = v268;
      uint64_t v9 = v276;
      uint64_t v8 = v285;
      uint64_t v7 = v295;
      uint64_t v6 = v306;
      uint64_t v5 = v318;
      uint64_t v4 = v331;
      uint64_t v3 = v345;
      uint64_t v1 = v360;
      uint64_t v2 = v376;
      a1 = v393;
    }
  }
  uint64_t v18 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v377 = v2;
    uint64_t v394 = a1;
    uint64_t v346 = v3;
    uint64_t v361 = v1;
    uint64_t v332 = v4;
    uint64_t v307 = v6;
    uint64_t v319 = v5;
    uint64_t v286 = v8;
    uint64_t v296 = v7;
    uint64_t v269 = v10;
    uint64_t v277 = v9;
    uint64_t v256 = v12;
    uint64_t v262 = v11;
    uint64_t v248 = v13;
    uint64_t v251 = v16;
    uint64_t v243 = v15;
    uint64_t v245 = v14;
    uint64_t v14 = v245;
    uint64_t v13 = v248;
    uint64_t v16 = v251;
    uint64_t v15 = v243;
    uint64_t v12 = v256;
    uint64_t v11 = v262;
    uint64_t v10 = v269;
    uint64_t v9 = v277;
    uint64_t v8 = v286;
    uint64_t v7 = v296;
    uint64_t v6 = v307;
    uint64_t v5 = v319;
    uint64_t v4 = v332;
    uint64_t v3 = v346;
    uint64_t v1 = v361;
    uint64_t v2 = v377;
    int v234 = v233;
    a1 = v394;
    if (v234)
    {
      v395 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v396 = 90;
      unint64_t v235 = llvm::StringRef::find((uint64_t *)&v395, "DesiredTypeName = ", 0x12uLL, 0);
      if (v396 >= v235) {
        unint64_t v236 = v235;
      }
      else {
        unint64_t v236 = v396;
      }
      uint64_t v237 = &v395[v236];
      unint64_t v238 = v396 - v236;
      if (v396 - v236 >= 0x12) {
        uint64_t v239 = 18;
      }
      else {
        uint64_t v239 = v396 - v236;
      }
      unint64_t v240 = v238 - v239;
      if (v240 >= v240 - 1) {
        uint64_t v241 = v240 - 1;
      }
      else {
        uint64_t v241 = v240;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v237[v239], v241);
      uint64_t v14 = v245;
      uint64_t v13 = v248;
      uint64_t v16 = v251;
      uint64_t v15 = v243;
      uint64_t v12 = v256;
      uint64_t v11 = v262;
      uint64_t v10 = v269;
      uint64_t v9 = v277;
      uint64_t v8 = v286;
      uint64_t v7 = v296;
      uint64_t v6 = v307;
      uint64_t v5 = v319;
      uint64_t v4 = v332;
      uint64_t v3 = v346;
      uint64_t v1 = v361;
      uint64_t v2 = v377;
      a1 = v394;
    }
  }
  return v1 == a1
      || v2 == a1
      || v3 == a1
      || v4 == a1
      || v5 == a1
      || v6 == a1
      || v7 == a1
      || v8 == a1
      || v9 == a1
      || v10 == a1
      || v11 == a1
      || v12 == a1
      || v13 == a1
      || v14 == a1
      || v15 == a1
      || v16 == a1
      || v17 == a1
      || v18 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AndIOp>,mlir::OpTrait::OneResult<mlir::arith::AndIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AndIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AndIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AndIOp>,mlir::OpTrait::IsIdempotent<mlir::arith::AndIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AndIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AndIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AndIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AndIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::Elementwise<mlir::arith::AndIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AndIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AndIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AndIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AndIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AndIOp>,mlir::OpTrait::OneResult<mlir::arith::AndIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AndIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AndIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AndIOp>,mlir::OpTrait::IsIdempotent<mlir::arith::AndIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AndIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AndIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AndIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AndIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::Elementwise<mlir::arith::AndIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AndIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AndIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AndIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AndIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::arith::AddIOp::verifyInvariantsImpl((mlir::arith::AddIOp *)&v8))
    && ZinIrConstData_specialization<half>::prepare()
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::AndIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.bitcast", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3780D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::BitcastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      char v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::BitcastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::BitcastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::BitcastOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

void mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
    unint64_t v3 = 0;
  }
  unint64_t v15 = v3;
  if (!v3)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  Value = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  uint64_t v5 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  uint64_t v7 = (unsigned char *)(v5 + 8 * v6);
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  uint64_t v8 = v7 - Value;
  if ((unint64_t)(v7 - Value) < 0x21)
  {
    int v9 = 0;
    unint64_t v10 = v18;
    if (v7 == Value) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v8 >> 3, 8);
  int v9 = v17;
  unint64_t v10 = v16;
  if (v7 != Value)
  {
LABEL_9:
    memcpy(&v10[v9], Value, v7 - Value);
    int v9 = v17;
    unint64_t v10 = v16;
  }
LABEL_10:
  unint64_t v11 = (unint64_t)v8 >> 3;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unint64_t v12 = v9 + ((unint64_t)v8 >> 3);
  LODWORD(v17) = v12;
  if (v12 && &v16 != (void **)a2)
  {
    if (v10 == v18)
    {
      unsigned int v14 = v9 + v11;
      unint64_t v10 = v18;
      if (v12 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v12, 8),
            unsigned int v14 = v17,
            unint64_t v10 = v16,
            v17))
      {
        memcpy(*(void **)a2, v10, 8 * v14);
        unint64_t v10 = v16;
      }
      *(_DWORD *)(a2 + 8) = v12;
    }
    else
    {
      *(void *)a2 = v10;
      int v13 = HIDWORD(v17);
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a2 + 12) = v13;
      uint64_t v16 = v18;
      HIDWORD(v17) = 0;
      unint64_t v10 = v18;
    }
    LODWORD(v17) = 0;
  }
  *(unsigned char *)(a2 + 48) = 1;
  if (v10 != v18) {
    free(v10);
  }
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::BitcastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::BitcastOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::BitcastOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v312 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v49 = v48;
    a1 = v312;
    if (v49)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v329 = 83;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v329;
      }
      unint64_t v52 = &v328[v51];
      unint64_t v53 = v329 - v51;
      if (v329 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v329 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v312;
    }
  }
  uint64_t v2 = v1[23];
  unint64_t v3 = &unk_267771000;
  {
    uint64_t v297 = v2;
    uint64_t v313 = a1;
    unint64_t v3 = (void *)&unk_267771000;
    int v58 = v57;
    uint64_t v2 = v297;
    a1 = v313;
    if (v58)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v329 = 81;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v329;
      }
      int v61 = &v328[v60];
      unint64_t v62 = v329 - v60;
      if (v329 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v329 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v297;
      a1 = v313;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v298 = v2;
    uint64_t v314 = a1;
    uint64_t v283 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v283;
    uint64_t v2 = v298;
    int v67 = v66;
    a1 = v314;
    if (v67)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v329 = 104;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v329;
      }
      uint64_t v70 = &v328[v69];
      unint64_t v71 = v329 - v69;
      if (v329 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v329 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v283;
      uint64_t v2 = v298;
      a1 = v314;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v299 = v2;
    uint64_t v315 = a1;
    uint64_t v270 = v6;
    uint64_t v284 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v270;
    uint64_t v4 = v284;
    int v76 = v75;
    uint64_t v2 = v299;
    a1 = v315;
    if (v76)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v329 = 86;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v329;
      }
      uint64_t v79 = &v328[v78];
      unint64_t v80 = v329 - v78;
      if (v329 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v329 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v270;
      uint64_t v4 = v284;
      uint64_t v2 = v299;
      a1 = v315;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v300 = v2;
    uint64_t v316 = a1;
    uint64_t v271 = v6;
    uint64_t v285 = v4;
    uint64_t v258 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v258;
    uint64_t v6 = v271;
    uint64_t v4 = v285;
    uint64_t v2 = v300;
    int v85 = v84;
    a1 = v316;
    if (v85)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v329 = 82;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v329;
      }
      uint64_t v88 = &v328[v87];
      unint64_t v89 = v329 - v87;
      if (v329 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v329 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v258;
      uint64_t v6 = v271;
      uint64_t v4 = v285;
      uint64_t v2 = v300;
      a1 = v316;
    }
  }
  uint64_t v10 = v9[29];
  unint64_t v11 = &unk_267770000;
  {
    uint64_t v301 = v2;
    uint64_t v317 = a1;
    uint64_t v272 = v6;
    uint64_t v286 = v4;
    uint64_t v259 = v8;
    uint64_t v247 = v10;
    unint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v247;
    uint64_t v8 = v259;
    uint64_t v6 = v272;
    uint64_t v4 = v286;
    uint64_t v2 = v301;
    int v94 = v93;
    a1 = v317;
    if (v94)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v329 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v329;
      }
      unint64_t v97 = &v328[v96];
      unint64_t v98 = v329 - v96;
      if (v329 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v329 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v247;
      uint64_t v8 = v259;
      uint64_t v6 = v272;
      uint64_t v4 = v286;
      uint64_t v2 = v301;
      a1 = v317;
    }
  }
  uint64_t v12 = v11[435];
  int v13 = &unk_267771000;
  {
    uint64_t v302 = v2;
    uint64_t v318 = a1;
    uint64_t v273 = v6;
    uint64_t v287 = v4;
    uint64_t v260 = v8;
    uint64_t v237 = v12;
    uint64_t v248 = v10;
    int v13 = (void *)&unk_267771000;
    uint64_t v12 = v237;
    uint64_t v10 = v248;
    uint64_t v8 = v260;
    uint64_t v6 = v273;
    uint64_t v4 = v287;
    uint64_t v2 = v302;
    int v103 = v102;
    a1 = v318;
    if (v103)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v329 = 95;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v329;
      }
      unint64_t v106 = &v328[v105];
      unint64_t v107 = v329 - v105;
      if (v329 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v329 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      int v13 = (void *)&unk_267771000;
      uint64_t v12 = v237;
      uint64_t v10 = v248;
      uint64_t v8 = v260;
      uint64_t v6 = v273;
      uint64_t v4 = v287;
      uint64_t v2 = v302;
      a1 = v318;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v303 = v2;
    uint64_t v319 = a1;
    uint64_t v274 = v6;
    uint64_t v288 = v4;
    uint64_t v261 = v8;
    uint64_t v238 = v12;
    uint64_t v249 = v10;
    uint64_t v228 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v228;
    uint64_t v12 = v238;
    uint64_t v10 = v249;
    uint64_t v8 = v261;
    uint64_t v6 = v274;
    uint64_t v4 = v288;
    uint64_t v2 = v303;
    int v112 = v111;
    a1 = v319;
    if (v112)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v329 = 99;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v329;
      }
      int v115 = &v328[v114];
      unint64_t v116 = v329 - v114;
      if (v329 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v329 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v228;
      uint64_t v12 = v238;
      uint64_t v10 = v249;
      uint64_t v8 = v261;
      uint64_t v6 = v274;
      uint64_t v4 = v288;
      uint64_t v2 = v303;
      a1 = v319;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v304 = v2;
    uint64_t v320 = a1;
    uint64_t v275 = v6;
    uint64_t v289 = v4;
    uint64_t v262 = v8;
    uint64_t v239 = v12;
    uint64_t v250 = v10;
    uint64_t v220 = v16;
    uint64_t v229 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v220;
    uint64_t v14 = v229;
    uint64_t v12 = v239;
    uint64_t v10 = v250;
    uint64_t v8 = v262;
    uint64_t v6 = v275;
    uint64_t v4 = v289;
    uint64_t v2 = v304;
    int v121 = v120;
    a1 = v320;
    if (v121)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v329;
      }
      uint64_t v124 = &v328[v123];
      unint64_t v125 = v329 - v123;
      if (v329 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v329 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v220;
      uint64_t v14 = v229;
      uint64_t v12 = v239;
      uint64_t v10 = v250;
      uint64_t v8 = v262;
      uint64_t v6 = v275;
      uint64_t v4 = v289;
      uint64_t v2 = v304;
      a1 = v320;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v305 = v2;
    uint64_t v321 = a1;
    uint64_t v276 = v6;
    uint64_t v290 = v4;
    uint64_t v263 = v8;
    uint64_t v240 = v12;
    uint64_t v251 = v10;
    uint64_t v221 = v16;
    uint64_t v230 = v14;
    uint64_t v213 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v213;
    uint64_t v16 = v221;
    uint64_t v14 = v230;
    uint64_t v12 = v240;
    uint64_t v10 = v251;
    uint64_t v8 = v263;
    uint64_t v6 = v276;
    uint64_t v4 = v290;
    uint64_t v2 = v305;
    int v130 = v129;
    a1 = v321;
    if (v130)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      unint64_t v329 = 98;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v329;
      }
      unint64_t v133 = &v328[v132];
      unint64_t v134 = v329 - v132;
      if (v329 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v329 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v213;
      uint64_t v16 = v221;
      uint64_t v14 = v230;
      uint64_t v12 = v240;
      uint64_t v10 = v251;
      uint64_t v8 = v263;
      uint64_t v6 = v276;
      uint64_t v4 = v290;
      uint64_t v2 = v305;
      a1 = v321;
    }
  }
  uint64_t v20 = v19[65];
  int v21 = &unk_267771000;
  {
    uint64_t v306 = v2;
    uint64_t v322 = a1;
    uint64_t v277 = v6;
    uint64_t v291 = v4;
    uint64_t v264 = v8;
    uint64_t v241 = v12;
    uint64_t v252 = v10;
    uint64_t v222 = v16;
    uint64_t v231 = v14;
    uint64_t v207 = v20;
    uint64_t v214 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v207;
    uint64_t v18 = v214;
    uint64_t v16 = v222;
    uint64_t v14 = v231;
    uint64_t v12 = v241;
    uint64_t v10 = v252;
    uint64_t v8 = v264;
    uint64_t v6 = v277;
    uint64_t v4 = v291;
    uint64_t v2 = v306;
    int v139 = v138;
    a1 = v322;
    if (v139)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v329 = 85;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v329;
      }
      unint64_t v142 = &v328[v141];
      unint64_t v143 = v329 - v141;
      if (v329 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v329 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v207;
      uint64_t v18 = v214;
      uint64_t v16 = v222;
      uint64_t v14 = v231;
      uint64_t v12 = v241;
      uint64_t v10 = v252;
      uint64_t v8 = v264;
      uint64_t v6 = v277;
      uint64_t v4 = v291;
      uint64_t v2 = v306;
      a1 = v322;
    }
  }
  uint64_t v22 = v21[356];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v307 = v2;
    uint64_t v323 = a1;
    uint64_t v278 = v6;
    uint64_t v292 = v4;
    uint64_t v265 = v8;
    uint64_t v242 = v12;
    uint64_t v253 = v10;
    uint64_t v223 = v16;
    uint64_t v232 = v14;
    uint64_t v208 = v20;
    uint64_t v215 = v18;
    uint64_t v202 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v202;
    uint64_t v20 = v208;
    uint64_t v18 = v215;
    uint64_t v16 = v223;
    uint64_t v14 = v232;
    uint64_t v12 = v242;
    uint64_t v10 = v253;
    uint64_t v8 = v265;
    uint64_t v6 = v278;
    uint64_t v4 = v292;
    uint64_t v2 = v307;
    int v148 = v147;
    a1 = v323;
    if (v148)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v329;
      }
      unint64_t v151 = &v328[v150];
      unint64_t v152 = v329 - v150;
      if (v329 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v329 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v202;
      uint64_t v20 = v208;
      uint64_t v18 = v215;
      uint64_t v16 = v223;
      uint64_t v14 = v232;
      uint64_t v12 = v242;
      uint64_t v10 = v253;
      uint64_t v8 = v265;
      uint64_t v6 = v278;
      uint64_t v4 = v292;
      uint64_t v2 = v307;
      a1 = v323;
    }
  }
  uint64_t v24 = v23[330];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v308 = v2;
    uint64_t v324 = a1;
    uint64_t v279 = v6;
    uint64_t v293 = v4;
    uint64_t v266 = v8;
    uint64_t v243 = v12;
    uint64_t v254 = v10;
    uint64_t v224 = v16;
    uint64_t v233 = v14;
    uint64_t v209 = v20;
    uint64_t v216 = v18;
    uint64_t v198 = v24;
    uint64_t v203 = v22;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v198;
    uint64_t v22 = v203;
    uint64_t v20 = v209;
    uint64_t v18 = v216;
    uint64_t v16 = v224;
    uint64_t v14 = v233;
    uint64_t v12 = v243;
    uint64_t v10 = v254;
    uint64_t v8 = v266;
    uint64_t v6 = v279;
    uint64_t v4 = v293;
    uint64_t v2 = v308;
    int v157 = v156;
    a1 = v324;
    if (v157)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v329 = 83;
      unint64_t v158 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v158) {
        unint64_t v159 = v158;
      }
      else {
        unint64_t v159 = v329;
      }
      int v160 = &v328[v159];
      unint64_t v161 = v329 - v159;
      if (v329 - v159 >= 0x12) {
        uint64_t v162 = 18;
      }
      else {
        uint64_t v162 = v329 - v159;
      }
      unint64_t v163 = v161 - v162;
      if (v163 >= v163 - 1) {
        uint64_t v164 = v163 - 1;
      }
      else {
        uint64_t v164 = v163;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v198;
      uint64_t v22 = v203;
      uint64_t v20 = v209;
      uint64_t v18 = v216;
      uint64_t v16 = v224;
      uint64_t v14 = v233;
      uint64_t v12 = v243;
      uint64_t v10 = v254;
      uint64_t v8 = v266;
      uint64_t v6 = v279;
      uint64_t v4 = v293;
      uint64_t v2 = v308;
      a1 = v324;
    }
  }
  uint64_t v26 = v25[332];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v309 = v2;
    uint64_t v325 = a1;
    uint64_t v280 = v6;
    uint64_t v294 = v4;
    uint64_t v267 = v8;
    uint64_t v244 = v12;
    uint64_t v255 = v10;
    uint64_t v225 = v16;
    uint64_t v234 = v14;
    uint64_t v210 = v20;
    uint64_t v217 = v18;
    uint64_t v199 = v24;
    uint64_t v204 = v22;
    uint64_t v195 = v26;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v195;
    uint64_t v24 = v199;
    uint64_t v22 = v204;
    uint64_t v20 = v210;
    uint64_t v18 = v217;
    uint64_t v16 = v225;
    uint64_t v14 = v234;
    uint64_t v12 = v244;
    uint64_t v10 = v255;
    uint64_t v8 = v267;
    uint64_t v6 = v280;
    uint64_t v4 = v294;
    uint64_t v2 = v309;
    int v166 = v165;
    a1 = v325;
    if (v166)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v167 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v167) {
        unint64_t v168 = v167;
      }
      else {
        unint64_t v168 = v329;
      }
      uint64_t v169 = &v328[v168];
      unint64_t v170 = v329 - v168;
      if (v329 - v168 >= 0x12) {
        uint64_t v171 = 18;
      }
      else {
        uint64_t v171 = v329 - v168;
      }
      unint64_t v172 = v170 - v171;
      if (v172 >= v172 - 1) {
        uint64_t v173 = v172 - 1;
      }
      else {
        uint64_t v173 = v172;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v169[v171], v173);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v195;
      uint64_t v24 = v199;
      uint64_t v22 = v204;
      uint64_t v20 = v210;
      uint64_t v18 = v217;
      uint64_t v16 = v225;
      uint64_t v14 = v234;
      uint64_t v12 = v244;
      uint64_t v10 = v255;
      uint64_t v8 = v267;
      uint64_t v6 = v280;
      uint64_t v4 = v294;
      uint64_t v2 = v309;
      a1 = v325;
    }
  }
  uint64_t v28 = v27[334];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v310 = v2;
    uint64_t v326 = a1;
    uint64_t v281 = v6;
    uint64_t v295 = v4;
    uint64_t v268 = v8;
    uint64_t v245 = v12;
    uint64_t v256 = v10;
    uint64_t v226 = v16;
    uint64_t v235 = v14;
    uint64_t v211 = v20;
    uint64_t v218 = v18;
    uint64_t v200 = v24;
    uint64_t v205 = v22;
    uint64_t v193 = v28;
    uint64_t v196 = v26;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v193;
    uint64_t v26 = v196;
    uint64_t v24 = v200;
    uint64_t v22 = v205;
    uint64_t v20 = v211;
    uint64_t v18 = v218;
    uint64_t v16 = v226;
    uint64_t v14 = v235;
    uint64_t v12 = v245;
    uint64_t v10 = v256;
    uint64_t v8 = v268;
    uint64_t v6 = v281;
    uint64_t v4 = v295;
    uint64_t v2 = v310;
    int v175 = v174;
    a1 = v326;
    if (v175)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v176 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v176) {
        unint64_t v177 = v176;
      }
      else {
        unint64_t v177 = v329;
      }
      uint64_t v178 = &v328[v177];
      unint64_t v179 = v329 - v177;
      if (v329 - v177 >= 0x12) {
        uint64_t v180 = 18;
      }
      else {
        uint64_t v180 = v329 - v177;
      }
      unint64_t v181 = v179 - v180;
      if (v181 >= v181 - 1) {
        uint64_t v182 = v181 - 1;
      }
      else {
        uint64_t v182 = v181;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v178[v180], v182);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v193;
      uint64_t v26 = v196;
      uint64_t v24 = v200;
      uint64_t v22 = v205;
      uint64_t v20 = v211;
      uint64_t v18 = v218;
      uint64_t v16 = v226;
      uint64_t v14 = v235;
      uint64_t v12 = v245;
      uint64_t v10 = v256;
      uint64_t v8 = v268;
      uint64_t v6 = v281;
      uint64_t v4 = v295;
      uint64_t v2 = v310;
      a1 = v326;
    }
  }
  uint64_t v30 = v29[336];
  long long v31 = &unk_267771000;
  {
    uint64_t v311 = v2;
    uint64_t v327 = a1;
    uint64_t v282 = v6;
    uint64_t v296 = v4;
    uint64_t v269 = v8;
    uint64_t v246 = v12;
    uint64_t v257 = v10;
    uint64_t v227 = v16;
    uint64_t v236 = v14;
    uint64_t v212 = v20;
    uint64_t v219 = v18;
    uint64_t v201 = v24;
    uint64_t v206 = v22;
    uint64_t v194 = v28;
    uint64_t v197 = v26;
    uint64_t v192 = v30;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v192;
    uint64_t v28 = v194;
    uint64_t v26 = v197;
    uint64_t v24 = v201;
    uint64_t v22 = v206;
    uint64_t v20 = v212;
    uint64_t v18 = v219;
    uint64_t v16 = v227;
    uint64_t v14 = v236;
    uint64_t v12 = v246;
    uint64_t v10 = v257;
    uint64_t v8 = v269;
    uint64_t v6 = v282;
    uint64_t v4 = v296;
    uint64_t v2 = v311;
    int v184 = v183;
    a1 = v327;
    if (v184)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v185 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v185) {
        unint64_t v186 = v185;
      }
      else {
        unint64_t v186 = v329;
      }
      uint64_t v187 = &v328[v186];
      unint64_t v188 = v329 - v186;
      if (v329 - v186 >= 0x12) {
        uint64_t v189 = 18;
      }
      else {
        uint64_t v189 = v329 - v186;
      }
      unint64_t v190 = v188 - v189;
      if (v190 >= v190 - 1) {
        uint64_t v191 = v190 - 1;
      }
      else {
        uint64_t v191 = v190;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v187[v189], v191);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v192;
      uint64_t v28 = v194;
      uint64_t v26 = v197;
      uint64_t v24 = v201;
      uint64_t v22 = v206;
      uint64_t v20 = v212;
      uint64_t v18 = v219;
      uint64_t v16 = v227;
      uint64_t v14 = v236;
      uint64_t v12 = v246;
      uint64_t v10 = v257;
      uint64_t v8 = v269;
      uint64_t v6 = v282;
      uint64_t v4 = v296;
      uint64_t v2 = v311;
      a1 = v327;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v31[338] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::BitcastOp>,mlir::OpTrait::OneResult<mlir::arith::BitcastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::BitcastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::BitcastOp>,mlir::OpTrait::OneOperand<mlir::arith::BitcastOp>,mlir::OpTrait::OpInvariants<mlir::arith::BitcastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::BitcastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::BitcastOp>,mlir::CastOpInterface::Trait<mlir::arith::BitcastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::Elementwise<mlir::arith::BitcastOp>,mlir::OpTrait::Scalarizable<mlir::arith::BitcastOp>,mlir::OpTrait::Vectorizable<mlir::arith::BitcastOp>,mlir::OpTrait::Tensorizable<mlir::arith::BitcastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::BitcastOp>,mlir::OpTrait::OneResult<mlir::arith::BitcastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::BitcastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::BitcastOp>,mlir::OpTrait::OneOperand<mlir::arith::BitcastOp>,mlir::OpTrait::OpInvariants<mlir::arith::BitcastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::BitcastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::BitcastOp>,mlir::CastOpInterface::Trait<mlir::arith::BitcastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::BitcastOp>,mlir::OpTrait::Elementwise<mlir::arith::BitcastOp>,mlir::OpTrait::Scalarizable<mlir::arith::BitcastOp>,mlir::OpTrait::Vectorizable<mlir::arith::BitcastOp>,mlir::OpTrait::Tensorizable<mlir::arith::BitcastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::arith::BitcastOp::verifyInvariantsImpl((mlir::arith::BitcastOp *)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.ceildivsi", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CeilDivSIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C375F38;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::CeilDivSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      char v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::DivSIOp::getSpeculatability((mlir::arith::DivSIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferResultRanges;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::CeilDivSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.ceildivsi";
  v16[1] = 15;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::CeilDivSIOpGenericAdaptorBase::CeilDivSIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::CeilDivSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v312 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v49 = v48;
    a1 = v312;
    if (v49)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v329 = 83;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v329;
      }
      unint64_t v52 = &v328[v51];
      unint64_t v53 = v329 - v51;
      if (v329 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v329 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v312;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v297 = v2;
    uint64_t v313 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v58 = v57;
    uint64_t v2 = v297;
    a1 = v313;
    if (v58)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v329 = 81;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v329;
      }
      int v61 = &v328[v60];
      unint64_t v62 = v329 - v60;
      if (v329 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v329 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v297;
      a1 = v313;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v298 = v2;
    uint64_t v314 = a1;
    uint64_t v283 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v283;
    uint64_t v2 = v298;
    int v67 = v66;
    a1 = v314;
    if (v67)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v329 = 104;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v329;
      }
      uint64_t v70 = &v328[v69];
      unint64_t v71 = v329 - v69;
      if (v329 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v329 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v283;
      uint64_t v2 = v298;
      a1 = v314;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v299 = v2;
    uint64_t v315 = a1;
    uint64_t v270 = v6;
    uint64_t v284 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v270;
    uint64_t v4 = v284;
    int v76 = v75;
    uint64_t v2 = v299;
    a1 = v315;
    if (v76)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v329 = 86;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v329;
      }
      uint64_t v79 = &v328[v78];
      unint64_t v80 = v329 - v78;
      if (v329 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v329 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v270;
      uint64_t v4 = v284;
      uint64_t v2 = v299;
      a1 = v315;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v300 = v2;
    uint64_t v316 = a1;
    uint64_t v271 = v6;
    uint64_t v285 = v4;
    uint64_t v258 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v258;
    uint64_t v6 = v271;
    uint64_t v4 = v285;
    uint64_t v2 = v300;
    int v85 = v84;
    a1 = v316;
    if (v85)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v329 = 90;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v329;
      }
      uint64_t v88 = &v328[v87];
      unint64_t v89 = v329 - v87;
      if (v329 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v329 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v258;
      uint64_t v6 = v271;
      uint64_t v4 = v285;
      uint64_t v2 = v300;
      a1 = v316;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v301 = v2;
    uint64_t v317 = a1;
    uint64_t v272 = v6;
    uint64_t v286 = v4;
    uint64_t v259 = v8;
    uint64_t v247 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v247;
    uint64_t v8 = v259;
    uint64_t v6 = v272;
    uint64_t v4 = v286;
    uint64_t v2 = v301;
    int v94 = v93;
    a1 = v317;
    if (v94)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v329 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v329;
      }
      unint64_t v97 = &v328[v96];
      unint64_t v98 = v329 - v96;
      if (v329 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v329 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v247;
      uint64_t v8 = v259;
      uint64_t v6 = v272;
      uint64_t v4 = v286;
      uint64_t v2 = v301;
      a1 = v317;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v302 = v2;
    uint64_t v318 = a1;
    uint64_t v273 = v6;
    uint64_t v287 = v4;
    uint64_t v260 = v8;
    uint64_t v237 = v12;
    uint64_t v248 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v237;
    uint64_t v10 = v248;
    uint64_t v8 = v260;
    uint64_t v6 = v273;
    uint64_t v4 = v287;
    uint64_t v2 = v302;
    int v103 = v102;
    a1 = v318;
    if (v103)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v329 = 95;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v329;
      }
      unint64_t v106 = &v328[v105];
      unint64_t v107 = v329 - v105;
      if (v329 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v329 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v237;
      uint64_t v10 = v248;
      uint64_t v8 = v260;
      uint64_t v6 = v273;
      uint64_t v4 = v287;
      uint64_t v2 = v302;
      a1 = v318;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v303 = v2;
    uint64_t v319 = a1;
    uint64_t v274 = v6;
    uint64_t v288 = v4;
    uint64_t v261 = v8;
    uint64_t v238 = v12;
    uint64_t v249 = v10;
    uint64_t v228 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v228;
    uint64_t v12 = v238;
    uint64_t v10 = v249;
    uint64_t v8 = v261;
    uint64_t v6 = v274;
    uint64_t v4 = v288;
    uint64_t v2 = v303;
    int v112 = v111;
    a1 = v319;
    if (v112)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v329 = 92;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v329;
      }
      int v115 = &v328[v114];
      unint64_t v116 = v329 - v114;
      if (v329 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v329 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v228;
      uint64_t v12 = v238;
      uint64_t v10 = v249;
      uint64_t v8 = v261;
      uint64_t v6 = v274;
      uint64_t v4 = v288;
      uint64_t v2 = v303;
      a1 = v319;
    }
  }
  uint64_t v16 = v15[344];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v304 = v2;
    uint64_t v320 = a1;
    uint64_t v275 = v6;
    uint64_t v289 = v4;
    uint64_t v262 = v8;
    uint64_t v239 = v12;
    uint64_t v250 = v10;
    uint64_t v220 = v16;
    uint64_t v229 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v220;
    uint64_t v14 = v229;
    uint64_t v12 = v239;
    uint64_t v10 = v250;
    uint64_t v8 = v262;
    uint64_t v6 = v275;
    uint64_t v4 = v289;
    uint64_t v2 = v304;
    int v121 = v120;
    a1 = v320;
    if (v121)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v329 = 97;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v329;
      }
      uint64_t v124 = &v328[v123];
      unint64_t v125 = v329 - v123;
      if (v329 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v329 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v220;
      uint64_t v14 = v229;
      uint64_t v12 = v239;
      uint64_t v10 = v250;
      uint64_t v8 = v262;
      uint64_t v6 = v275;
      uint64_t v4 = v289;
      uint64_t v2 = v304;
      a1 = v320;
    }
  }
  uint64_t v18 = v17[328];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v305 = v2;
    uint64_t v321 = a1;
    uint64_t v276 = v6;
    uint64_t v290 = v4;
    uint64_t v263 = v8;
    uint64_t v240 = v12;
    uint64_t v251 = v10;
    uint64_t v221 = v16;
    uint64_t v230 = v14;
    uint64_t v213 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v213;
    uint64_t v16 = v221;
    uint64_t v14 = v230;
    uint64_t v12 = v240;
    uint64_t v10 = v251;
    uint64_t v8 = v263;
    uint64_t v6 = v276;
    uint64_t v4 = v290;
    uint64_t v2 = v305;
    int v130 = v129;
    a1 = v321;
    if (v130)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v329;
      }
      unint64_t v133 = &v328[v132];
      unint64_t v134 = v329 - v132;
      if (v329 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v329 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v213;
      uint64_t v16 = v221;
      uint64_t v14 = v230;
      uint64_t v12 = v240;
      uint64_t v10 = v251;
      uint64_t v8 = v263;
      uint64_t v6 = v276;
      uint64_t v4 = v290;
      uint64_t v2 = v305;
      a1 = v321;
    }
  }
  uint64_t v20 = v19[330];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v306 = v2;
    uint64_t v322 = a1;
    uint64_t v277 = v6;
    uint64_t v291 = v4;
    uint64_t v264 = v8;
    uint64_t v241 = v12;
    uint64_t v252 = v10;
    uint64_t v222 = v16;
    uint64_t v231 = v14;
    uint64_t v207 = v20;
    uint64_t v214 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v207;
    uint64_t v18 = v214;
    uint64_t v16 = v222;
    uint64_t v14 = v231;
    uint64_t v12 = v241;
    uint64_t v10 = v252;
    uint64_t v8 = v264;
    uint64_t v6 = v277;
    uint64_t v4 = v291;
    uint64_t v2 = v306;
    int v139 = v138;
    a1 = v322;
    if (v139)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v329;
      }
      unint64_t v142 = &v328[v141];
      unint64_t v143 = v329 - v141;
      if (v329 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v329 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v207;
      uint64_t v18 = v214;
      uint64_t v16 = v222;
      uint64_t v14 = v231;
      uint64_t v12 = v241;
      uint64_t v10 = v252;
      uint64_t v8 = v264;
      uint64_t v6 = v277;
      uint64_t v4 = v291;
      uint64_t v2 = v306;
      a1 = v322;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v307 = v2;
    uint64_t v323 = a1;
    uint64_t v278 = v6;
    uint64_t v292 = v4;
    uint64_t v265 = v8;
    uint64_t v242 = v12;
    uint64_t v253 = v10;
    uint64_t v223 = v16;
    uint64_t v232 = v14;
    uint64_t v208 = v20;
    uint64_t v215 = v18;
    uint64_t v202 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v202;
    uint64_t v20 = v208;
    uint64_t v18 = v215;
    uint64_t v16 = v223;
    uint64_t v14 = v232;
    uint64_t v12 = v242;
    uint64_t v10 = v253;
    uint64_t v8 = v265;
    uint64_t v6 = v278;
    uint64_t v4 = v292;
    uint64_t v2 = v307;
    int v148 = v147;
    a1 = v323;
    if (v148)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v329 = 83;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v329;
      }
      unint64_t v151 = &v328[v150];
      unint64_t v152 = v329 - v150;
      if (v329 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v329 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v202;
      uint64_t v20 = v208;
      uint64_t v18 = v215;
      uint64_t v16 = v223;
      uint64_t v14 = v232;
      uint64_t v12 = v242;
      uint64_t v10 = v253;
      uint64_t v8 = v265;
      uint64_t v6 = v278;
      uint64_t v4 = v292;
      uint64_t v2 = v307;
      a1 = v323;
    }
  }
  uint64_t v24 = v23[332];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v308 = v2;
    uint64_t v324 = a1;
    uint64_t v279 = v6;
    uint64_t v293 = v4;
    uint64_t v266 = v8;
    uint64_t v243 = v12;
    uint64_t v254 = v10;
    uint64_t v224 = v16;
    uint64_t v233 = v14;
    uint64_t v209 = v20;
    uint64_t v216 = v18;
    uint64_t v198 = v24;
    uint64_t v203 = v22;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v198;
    uint64_t v22 = v203;
    uint64_t v20 = v209;
    uint64_t v18 = v216;
    uint64_t v16 = v224;
    uint64_t v14 = v233;
    uint64_t v12 = v243;
    uint64_t v10 = v254;
    uint64_t v8 = v266;
    uint64_t v6 = v279;
    uint64_t v4 = v293;
    uint64_t v2 = v308;
    int v157 = v156;
    a1 = v324;
    if (v157)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v158 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v158) {
        unint64_t v159 = v158;
      }
      else {
        unint64_t v159 = v329;
      }
      int v160 = &v328[v159];
      unint64_t v161 = v329 - v159;
      if (v329 - v159 >= 0x12) {
        uint64_t v162 = 18;
      }
      else {
        uint64_t v162 = v329 - v159;
      }
      unint64_t v163 = v161 - v162;
      if (v163 >= v163 - 1) {
        uint64_t v164 = v163 - 1;
      }
      else {
        uint64_t v164 = v163;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v198;
      uint64_t v22 = v203;
      uint64_t v20 = v209;
      uint64_t v18 = v216;
      uint64_t v16 = v224;
      uint64_t v14 = v233;
      uint64_t v12 = v243;
      uint64_t v10 = v254;
      uint64_t v8 = v266;
      uint64_t v6 = v279;
      uint64_t v4 = v293;
      uint64_t v2 = v308;
      a1 = v324;
    }
  }
  uint64_t v26 = v25[334];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v309 = v2;
    uint64_t v325 = a1;
    uint64_t v280 = v6;
    uint64_t v294 = v4;
    uint64_t v267 = v8;
    uint64_t v244 = v12;
    uint64_t v255 = v10;
    uint64_t v225 = v16;
    uint64_t v234 = v14;
    uint64_t v210 = v20;
    uint64_t v217 = v18;
    uint64_t v199 = v24;
    uint64_t v204 = v22;
    uint64_t v195 = v26;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v195;
    uint64_t v24 = v199;
    uint64_t v22 = v204;
    uint64_t v20 = v210;
    uint64_t v18 = v217;
    uint64_t v16 = v225;
    uint64_t v14 = v234;
    uint64_t v12 = v244;
    uint64_t v10 = v255;
    uint64_t v8 = v267;
    uint64_t v6 = v280;
    uint64_t v4 = v294;
    uint64_t v2 = v309;
    int v166 = v165;
    a1 = v325;
    if (v166)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v167 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v167) {
        unint64_t v168 = v167;
      }
      else {
        unint64_t v168 = v329;
      }
      uint64_t v169 = &v328[v168];
      unint64_t v170 = v329 - v168;
      if (v329 - v168 >= 0x12) {
        uint64_t v171 = 18;
      }
      else {
        uint64_t v171 = v329 - v168;
      }
      unint64_t v172 = v170 - v171;
      if (v172 >= v172 - 1) {
        uint64_t v173 = v172 - 1;
      }
      else {
        uint64_t v173 = v172;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v169[v171], v173);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v195;
      uint64_t v24 = v199;
      uint64_t v22 = v204;
      uint64_t v20 = v210;
      uint64_t v18 = v217;
      uint64_t v16 = v225;
      uint64_t v14 = v234;
      uint64_t v12 = v244;
      uint64_t v10 = v255;
      uint64_t v8 = v267;
      uint64_t v6 = v280;
      uint64_t v4 = v294;
      uint64_t v2 = v309;
      a1 = v325;
    }
  }
  uint64_t v28 = v27[336];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v310 = v2;
    uint64_t v326 = a1;
    uint64_t v281 = v6;
    uint64_t v295 = v4;
    uint64_t v268 = v8;
    uint64_t v245 = v12;
    uint64_t v256 = v10;
    uint64_t v226 = v16;
    uint64_t v235 = v14;
    uint64_t v211 = v20;
    uint64_t v218 = v18;
    uint64_t v200 = v24;
    uint64_t v205 = v22;
    uint64_t v193 = v28;
    uint64_t v196 = v26;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v193;
    uint64_t v26 = v196;
    uint64_t v24 = v200;
    uint64_t v22 = v205;
    uint64_t v20 = v211;
    uint64_t v18 = v218;
    uint64_t v16 = v226;
    uint64_t v14 = v235;
    uint64_t v12 = v245;
    uint64_t v10 = v256;
    uint64_t v8 = v268;
    uint64_t v6 = v281;
    uint64_t v4 = v295;
    uint64_t v2 = v310;
    int v175 = v174;
    a1 = v326;
    if (v175)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v176 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v176) {
        unint64_t v177 = v176;
      }
      else {
        unint64_t v177 = v329;
      }
      uint64_t v178 = &v328[v177];
      unint64_t v179 = v329 - v177;
      if (v329 - v177 >= 0x12) {
        uint64_t v180 = 18;
      }
      else {
        uint64_t v180 = v329 - v177;
      }
      unint64_t v181 = v179 - v180;
      if (v181 >= v181 - 1) {
        uint64_t v182 = v181 - 1;
      }
      else {
        uint64_t v182 = v181;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v178[v180], v182);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v193;
      uint64_t v26 = v196;
      uint64_t v24 = v200;
      uint64_t v22 = v205;
      uint64_t v20 = v211;
      uint64_t v18 = v218;
      uint64_t v16 = v226;
      uint64_t v14 = v235;
      uint64_t v12 = v245;
      uint64_t v10 = v256;
      uint64_t v8 = v268;
      uint64_t v6 = v281;
      uint64_t v4 = v295;
      uint64_t v2 = v310;
      a1 = v326;
    }
  }
  uint64_t v30 = v29[338];
  long long v31 = &unk_267771000;
  {
    uint64_t v311 = v2;
    uint64_t v327 = a1;
    uint64_t v282 = v6;
    uint64_t v296 = v4;
    uint64_t v269 = v8;
    uint64_t v246 = v12;
    uint64_t v257 = v10;
    uint64_t v227 = v16;
    uint64_t v236 = v14;
    uint64_t v212 = v20;
    uint64_t v219 = v18;
    uint64_t v201 = v24;
    uint64_t v206 = v22;
    uint64_t v194 = v28;
    uint64_t v197 = v26;
    uint64_t v192 = v30;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v192;
    uint64_t v28 = v194;
    uint64_t v26 = v197;
    uint64_t v24 = v201;
    uint64_t v22 = v206;
    uint64_t v20 = v212;
    uint64_t v18 = v219;
    uint64_t v16 = v227;
    uint64_t v14 = v236;
    uint64_t v12 = v246;
    uint64_t v10 = v257;
    uint64_t v8 = v269;
    uint64_t v6 = v282;
    uint64_t v4 = v296;
    uint64_t v2 = v311;
    int v184 = v183;
    a1 = v327;
    if (v184)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v329 = 90;
      unint64_t v185 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v185) {
        unint64_t v186 = v185;
      }
      else {
        unint64_t v186 = v329;
      }
      uint64_t v187 = &v328[v186];
      unint64_t v188 = v329 - v186;
      if (v329 - v186 >= 0x12) {
        uint64_t v189 = 18;
      }
      else {
        uint64_t v189 = v329 - v186;
      }
      unint64_t v190 = v188 - v189;
      if (v190 >= v190 - 1) {
        uint64_t v191 = v190 - 1;
      }
      else {
        uint64_t v191 = v190;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v187[v189], v191);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v192;
      uint64_t v28 = v194;
      uint64_t v26 = v197;
      uint64_t v24 = v201;
      uint64_t v22 = v206;
      uint64_t v20 = v212;
      uint64_t v18 = v219;
      uint64_t v16 = v227;
      uint64_t v14 = v236;
      uint64_t v12 = v246;
      uint64_t v10 = v257;
      uint64_t v8 = v269;
      uint64_t v6 = v282;
      uint64_t v4 = v296;
      uint64_t v2 = v311;
      a1 = v327;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v31[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::CeilDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.ceildivui", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CeilDivUIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376000;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::CeilDivUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      char v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CeilDivUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

mlir::Operation *mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::DivUIOp::getSpeculatability((mlir::arith::DivUIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferResultRanges;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::CeilDivUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CeilDivUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CeilDivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.ceildivui";
  v16[1] = 15;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::CeilDivUIOpGenericAdaptorBase::CeilDivUIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::CeilDivUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::CeilDivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.cmpf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CmpFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376898;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::arith::CmpFOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::CmpFOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::CmpFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::CmpFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::CmpFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::CmpFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::CmpFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.cmpf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::CmpFOpGenericAdaptorBase::CmpFOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::CmpFOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v340 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v52 = v51;
    a1 = v340;
    if (v52)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v358 = 83;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v358;
      }
      unint64_t v55 = &v357[v54];
      unint64_t v56 = v358 - v54;
      if (v358 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v358 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v340;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v324 = v2;
    uint64_t v341 = a1;
    char v3 = (void *)&unk_267771000;
    int v61 = v60;
    uint64_t v2 = v324;
    a1 = v341;
    if (v61)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v358 = 81;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v358;
      }
      unint64_t v64 = &v357[v63];
      unint64_t v65 = v358 - v63;
      if (v358 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v358 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v324;
      a1 = v341;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v325 = v2;
    uint64_t v342 = a1;
    uint64_t v309 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v309;
    uint64_t v2 = v325;
    int v70 = v69;
    a1 = v342;
    if (v70)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v358 = 104;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v358;
      }
      unint64_t v73 = &v357[v72];
      unint64_t v74 = v358 - v72;
      if (v358 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v358 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v309;
      uint64_t v2 = v325;
      a1 = v342;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v326 = v2;
    uint64_t v343 = a1;
    uint64_t v295 = v6;
    uint64_t v310 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v295;
    uint64_t v4 = v310;
    int v79 = v78;
    uint64_t v2 = v326;
    a1 = v343;
    if (v79)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v358 = 86;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v358;
      }
      unint64_t v82 = &v357[v81];
      unint64_t v83 = v358 - v81;
      if (v358 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v358 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v295;
      uint64_t v4 = v310;
      uint64_t v2 = v326;
      a1 = v343;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v327 = v2;
    uint64_t v344 = a1;
    uint64_t v296 = v6;
    uint64_t v311 = v4;
    uint64_t v282 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v282;
    uint64_t v6 = v296;
    uint64_t v4 = v311;
    uint64_t v2 = v327;
    int v88 = v87;
    a1 = v344;
    if (v88)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v358 = 90;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v358;
      }
      unint64_t v91 = &v357[v90];
      unint64_t v92 = v358 - v90;
      if (v358 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v358 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v282;
      uint64_t v6 = v296;
      uint64_t v4 = v311;
      uint64_t v2 = v327;
      a1 = v344;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v328 = v2;
    uint64_t v345 = a1;
    uint64_t v297 = v6;
    uint64_t v312 = v4;
    uint64_t v270 = v10;
    uint64_t v283 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v270;
    uint64_t v8 = v283;
    uint64_t v6 = v297;
    uint64_t v4 = v312;
    int v97 = v96;
    uint64_t v2 = v328;
    a1 = v345;
    if (v97)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v358 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v358;
      }
      unint64_t v100 = &v357[v99];
      unint64_t v101 = v358 - v99;
      if (v358 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v358 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v270;
      uint64_t v8 = v283;
      uint64_t v6 = v297;
      uint64_t v4 = v312;
      uint64_t v2 = v328;
      a1 = v345;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v329 = v2;
    uint64_t v346 = a1;
    uint64_t v298 = v6;
    uint64_t v313 = v4;
    uint64_t v271 = v10;
    uint64_t v284 = v8;
    uint64_t v259 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v259;
    uint64_t v10 = v271;
    uint64_t v8 = v284;
    uint64_t v6 = v298;
    uint64_t v4 = v313;
    int v106 = v105;
    uint64_t v2 = v329;
    a1 = v346;
    if (v106)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v358 = 89;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v358;
      }
      unint64_t v109 = &v357[v108];
      unint64_t v110 = v358 - v108;
      if (v358 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v358 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v259;
      uint64_t v10 = v271;
      uint64_t v8 = v284;
      uint64_t v6 = v298;
      uint64_t v4 = v313;
      uint64_t v2 = v329;
      a1 = v346;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v330 = v2;
    uint64_t v347 = a1;
    uint64_t v299 = v6;
    uint64_t v314 = v4;
    uint64_t v272 = v10;
    uint64_t v285 = v8;
    uint64_t v249 = v14;
    uint64_t v260 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v249;
    uint64_t v12 = v260;
    uint64_t v10 = v272;
    uint64_t v8 = v285;
    uint64_t v6 = v299;
    uint64_t v4 = v314;
    int v115 = v114;
    uint64_t v2 = v330;
    a1 = v347;
    if (v115)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v358 = 95;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v358;
      }
      unint64_t v118 = &v357[v117];
      unint64_t v119 = v358 - v117;
      if (v358 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v358 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v249;
      uint64_t v12 = v260;
      uint64_t v10 = v272;
      uint64_t v8 = v285;
      uint64_t v6 = v299;
      uint64_t v4 = v314;
      uint64_t v2 = v330;
      a1 = v347;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v331 = v2;
    uint64_t v348 = a1;
    uint64_t v300 = v6;
    uint64_t v315 = v4;
    uint64_t v273 = v10;
    uint64_t v286 = v8;
    uint64_t v250 = v14;
    uint64_t v261 = v12;
    uint64_t v240 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v240;
    uint64_t v14 = v250;
    uint64_t v12 = v261;
    uint64_t v10 = v273;
    uint64_t v8 = v286;
    uint64_t v6 = v300;
    uint64_t v4 = v315;
    int v124 = v123;
    uint64_t v2 = v331;
    a1 = v348;
    if (v124)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v358 = 99;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v358;
      }
      unint64_t v127 = &v357[v126];
      unint64_t v128 = v358 - v126;
      if (v358 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v358 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v240;
      uint64_t v14 = v250;
      uint64_t v12 = v261;
      uint64_t v10 = v273;
      uint64_t v8 = v286;
      uint64_t v6 = v300;
      uint64_t v4 = v315;
      uint64_t v2 = v331;
      a1 = v348;
    }
  }
  uint64_t v18 = v17[324];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v332 = v2;
    uint64_t v349 = a1;
    uint64_t v301 = v6;
    uint64_t v316 = v4;
    uint64_t v274 = v10;
    uint64_t v287 = v8;
    uint64_t v251 = v14;
    uint64_t v262 = v12;
    uint64_t v232 = v18;
    uint64_t v241 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v232;
    uint64_t v16 = v241;
    uint64_t v14 = v251;
    uint64_t v12 = v262;
    uint64_t v10 = v274;
    uint64_t v8 = v287;
    uint64_t v6 = v301;
    uint64_t v4 = v316;
    int v133 = v132;
    uint64_t v2 = v332;
    a1 = v349;
    if (v133)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v358 = 93;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v358;
      }
      unint64_t v136 = &v357[v135];
      unint64_t v137 = v358 - v135;
      if (v358 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v358 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v232;
      uint64_t v16 = v241;
      uint64_t v14 = v251;
      uint64_t v12 = v262;
      uint64_t v10 = v274;
      uint64_t v8 = v287;
      uint64_t v6 = v301;
      uint64_t v4 = v316;
      uint64_t v2 = v332;
      a1 = v349;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v333 = v2;
    uint64_t v350 = a1;
    uint64_t v302 = v6;
    uint64_t v317 = v4;
    uint64_t v275 = v10;
    uint64_t v288 = v8;
    uint64_t v252 = v14;
    uint64_t v263 = v12;
    uint64_t v233 = v18;
    uint64_t v242 = v16;
    uint64_t v225 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v225;
    uint64_t v18 = v233;
    uint64_t v16 = v242;
    uint64_t v14 = v252;
    uint64_t v12 = v263;
    uint64_t v10 = v275;
    uint64_t v8 = v288;
    uint64_t v6 = v302;
    uint64_t v4 = v317;
    int v142 = v141;
    uint64_t v2 = v333;
    a1 = v350;
    if (v142)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameTypeOperands<Empty>]";
      unint64_t v358 = 88;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v358;
      }
      unint64_t v145 = &v357[v144];
      unint64_t v146 = v358 - v144;
      if (v358 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v358 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v225;
      uint64_t v18 = v233;
      uint64_t v16 = v242;
      uint64_t v14 = v252;
      uint64_t v12 = v263;
      uint64_t v10 = v275;
      uint64_t v8 = v288;
      uint64_t v6 = v302;
      uint64_t v4 = v317;
      uint64_t v2 = v333;
      a1 = v350;
    }
  }
  uint64_t v22 = v21[358];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v334 = v2;
    uint64_t v351 = a1;
    uint64_t v303 = v6;
    uint64_t v318 = v4;
    uint64_t v276 = v10;
    uint64_t v289 = v8;
    uint64_t v253 = v14;
    uint64_t v264 = v12;
    uint64_t v234 = v18;
    uint64_t v243 = v16;
    uint64_t v219 = v22;
    uint64_t v226 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v219;
    uint64_t v20 = v226;
    uint64_t v18 = v234;
    uint64_t v16 = v243;
    uint64_t v14 = v253;
    uint64_t v12 = v264;
    uint64_t v10 = v276;
    uint64_t v8 = v289;
    uint64_t v6 = v303;
    uint64_t v4 = v318;
    int v151 = v150;
    uint64_t v2 = v334;
    a1 = v351;
    if (v151)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v358 = 93;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v358;
      }
      unint64_t v154 = &v357[v153];
      unint64_t v155 = v358 - v153;
      if (v358 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v358 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v219;
      uint64_t v20 = v226;
      uint64_t v18 = v234;
      uint64_t v16 = v243;
      uint64_t v14 = v253;
      uint64_t v12 = v264;
      uint64_t v10 = v276;
      uint64_t v8 = v289;
      uint64_t v6 = v303;
      uint64_t v4 = v318;
      uint64_t v2 = v334;
      a1 = v351;
    }
  }
  uint64_t v24 = v23[330];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v335 = v2;
    uint64_t v352 = a1;
    uint64_t v304 = v6;
    uint64_t v319 = v4;
    uint64_t v277 = v10;
    uint64_t v290 = v8;
    uint64_t v254 = v14;
    uint64_t v265 = v12;
    uint64_t v235 = v18;
    uint64_t v244 = v16;
    uint64_t v220 = v22;
    uint64_t v227 = v20;
    uint64_t v214 = v24;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v214;
    uint64_t v22 = v220;
    uint64_t v20 = v227;
    uint64_t v18 = v235;
    uint64_t v16 = v244;
    uint64_t v14 = v254;
    uint64_t v12 = v265;
    uint64_t v10 = v277;
    uint64_t v8 = v290;
    uint64_t v6 = v304;
    uint64_t v4 = v319;
    int v160 = v159;
    uint64_t v2 = v335;
    a1 = v352;
    if (v160)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v358 = 83;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v358;
      }
      unint64_t v163 = &v357[v162];
      unint64_t v164 = v358 - v162;
      if (v358 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v358 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v214;
      uint64_t v22 = v220;
      uint64_t v20 = v227;
      uint64_t v18 = v235;
      uint64_t v16 = v244;
      uint64_t v14 = v254;
      uint64_t v12 = v265;
      uint64_t v10 = v277;
      uint64_t v8 = v290;
      uint64_t v6 = v304;
      uint64_t v4 = v319;
      uint64_t v2 = v335;
      a1 = v352;
    }
  }
  uint64_t v26 = v25[332];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v336 = v2;
    uint64_t v353 = a1;
    uint64_t v305 = v6;
    uint64_t v320 = v4;
    uint64_t v278 = v10;
    uint64_t v291 = v8;
    uint64_t v255 = v14;
    uint64_t v266 = v12;
    uint64_t v236 = v18;
    uint64_t v245 = v16;
    uint64_t v221 = v22;
    uint64_t v228 = v20;
    uint64_t v210 = v26;
    uint64_t v215 = v24;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v210;
    uint64_t v24 = v215;
    uint64_t v22 = v221;
    uint64_t v20 = v228;
    uint64_t v18 = v236;
    uint64_t v16 = v245;
    uint64_t v14 = v255;
    uint64_t v12 = v266;
    uint64_t v10 = v278;
    uint64_t v8 = v291;
    uint64_t v6 = v305;
    uint64_t v4 = v320;
    int v169 = v168;
    uint64_t v2 = v336;
    a1 = v353;
    if (v169)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v170 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v170) {
        unint64_t v171 = v170;
      }
      else {
        unint64_t v171 = v358;
      }
      unint64_t v172 = &v357[v171];
      unint64_t v173 = v358 - v171;
      if (v358 - v171 >= 0x12) {
        uint64_t v174 = 18;
      }
      else {
        uint64_t v174 = v358 - v171;
      }
      unint64_t v175 = v173 - v174;
      if (v175 >= v175 - 1) {
        uint64_t v176 = v175 - 1;
      }
      else {
        uint64_t v176 = v175;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v210;
      uint64_t v24 = v215;
      uint64_t v22 = v221;
      uint64_t v20 = v228;
      uint64_t v18 = v236;
      uint64_t v16 = v245;
      uint64_t v14 = v255;
      uint64_t v12 = v266;
      uint64_t v10 = v278;
      uint64_t v8 = v291;
      uint64_t v6 = v305;
      uint64_t v4 = v320;
      uint64_t v2 = v336;
      a1 = v353;
    }
  }
  uint64_t v28 = v27[334];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v337 = v2;
    uint64_t v354 = a1;
    uint64_t v306 = v6;
    uint64_t v321 = v4;
    uint64_t v279 = v10;
    uint64_t v292 = v8;
    uint64_t v256 = v14;
    uint64_t v267 = v12;
    uint64_t v237 = v18;
    uint64_t v246 = v16;
    uint64_t v222 = v22;
    uint64_t v229 = v20;
    uint64_t v211 = v26;
    uint64_t v216 = v24;
    uint64_t v207 = v28;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v207;
    uint64_t v26 = v211;
    uint64_t v24 = v216;
    uint64_t v22 = v222;
    uint64_t v20 = v229;
    uint64_t v18 = v237;
    uint64_t v16 = v246;
    uint64_t v14 = v256;
    uint64_t v12 = v267;
    uint64_t v10 = v279;
    uint64_t v8 = v292;
    uint64_t v6 = v306;
    uint64_t v4 = v321;
    int v178 = v177;
    uint64_t v2 = v337;
    a1 = v354;
    if (v178)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v179 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v179) {
        unint64_t v180 = v179;
      }
      else {
        unint64_t v180 = v358;
      }
      unint64_t v181 = &v357[v180];
      unint64_t v182 = v358 - v180;
      if (v358 - v180 >= 0x12) {
        uint64_t v183 = 18;
      }
      else {
        uint64_t v183 = v358 - v180;
      }
      unint64_t v184 = v182 - v183;
      if (v184 >= v184 - 1) {
        uint64_t v185 = v184 - 1;
      }
      else {
        uint64_t v185 = v184;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v207;
      uint64_t v26 = v211;
      uint64_t v24 = v216;
      uint64_t v22 = v222;
      uint64_t v20 = v229;
      uint64_t v18 = v237;
      uint64_t v16 = v246;
      uint64_t v14 = v256;
      uint64_t v12 = v267;
      uint64_t v10 = v279;
      uint64_t v8 = v292;
      uint64_t v6 = v306;
      uint64_t v4 = v321;
      uint64_t v2 = v337;
      a1 = v354;
    }
  }
  uint64_t v30 = v29[336];
  long long v31 = &unk_267771000;
  {
    uint64_t v338 = v2;
    uint64_t v355 = a1;
    uint64_t v307 = v6;
    uint64_t v322 = v4;
    uint64_t v280 = v10;
    uint64_t v293 = v8;
    uint64_t v257 = v14;
    uint64_t v268 = v12;
    uint64_t v238 = v18;
    uint64_t v247 = v16;
    uint64_t v223 = v22;
    uint64_t v230 = v20;
    uint64_t v212 = v26;
    uint64_t v217 = v24;
    uint64_t v205 = v30;
    uint64_t v208 = v28;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v205;
    uint64_t v28 = v208;
    uint64_t v26 = v212;
    uint64_t v24 = v217;
    uint64_t v22 = v223;
    uint64_t v20 = v230;
    uint64_t v18 = v238;
    uint64_t v16 = v247;
    uint64_t v14 = v257;
    uint64_t v12 = v268;
    uint64_t v10 = v280;
    uint64_t v8 = v293;
    uint64_t v6 = v307;
    uint64_t v4 = v322;
    int v187 = v186;
    uint64_t v2 = v338;
    a1 = v355;
    if (v187)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v188 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v188) {
        unint64_t v189 = v188;
      }
      else {
        unint64_t v189 = v358;
      }
      unint64_t v190 = &v357[v189];
      unint64_t v191 = v358 - v189;
      if (v358 - v189 >= 0x12) {
        uint64_t v192 = 18;
      }
      else {
        uint64_t v192 = v358 - v189;
      }
      unint64_t v193 = v191 - v192;
      if (v193 >= v193 - 1) {
        uint64_t v194 = v193 - 1;
      }
      else {
        uint64_t v194 = v193;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v205;
      uint64_t v28 = v208;
      uint64_t v26 = v212;
      uint64_t v24 = v217;
      uint64_t v22 = v223;
      uint64_t v20 = v230;
      uint64_t v18 = v238;
      uint64_t v16 = v247;
      uint64_t v14 = v257;
      uint64_t v12 = v268;
      uint64_t v10 = v280;
      uint64_t v8 = v293;
      uint64_t v6 = v307;
      uint64_t v4 = v322;
      uint64_t v2 = v338;
      a1 = v355;
    }
  }
  uint64_t v32 = v31[338];
  char v33 = &unk_267771000;
  {
    uint64_t v339 = v2;
    uint64_t v356 = a1;
    uint64_t v308 = v6;
    uint64_t v323 = v4;
    uint64_t v281 = v10;
    uint64_t v294 = v8;
    uint64_t v258 = v14;
    uint64_t v269 = v12;
    uint64_t v239 = v18;
    uint64_t v248 = v16;
    uint64_t v224 = v22;
    uint64_t v231 = v20;
    uint64_t v213 = v26;
    uint64_t v218 = v24;
    uint64_t v206 = v30;
    uint64_t v209 = v28;
    uint64_t v204 = v32;
    uint64_t v32 = v204;
    uint64_t v30 = v206;
    uint64_t v28 = v209;
    uint64_t v26 = v213;
    uint64_t v24 = v218;
    uint64_t v22 = v224;
    uint64_t v20 = v231;
    uint64_t v18 = v239;
    uint64_t v16 = v248;
    uint64_t v14 = v258;
    uint64_t v12 = v269;
    uint64_t v10 = v281;
    uint64_t v8 = v294;
    uint64_t v6 = v308;
    uint64_t v4 = v323;
    int v196 = v195;
    uint64_t v2 = v339;
    a1 = v356;
    if (v196)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v358 = 90;
      unint64_t v197 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v197) {
        unint64_t v198 = v197;
      }
      else {
        unint64_t v198 = v358;
      }
      uint64_t v199 = &v357[v198];
      unint64_t v200 = v358 - v198;
      if (v358 - v198 >= 0x12) {
        uint64_t v201 = 18;
      }
      else {
        uint64_t v201 = v358 - v198;
      }
      unint64_t v202 = v200 - v201;
      if (v202 >= v202 - 1) {
        uint64_t v203 = v202 - 1;
      }
      else {
        uint64_t v203 = v202;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v199[v201], v203);
      char v33 = (void *)&unk_267771000;
      uint64_t v32 = v204;
      uint64_t v30 = v206;
      uint64_t v28 = v209;
      uint64_t v26 = v213;
      uint64_t v24 = v218;
      uint64_t v22 = v224;
      uint64_t v20 = v231;
      uint64_t v18 = v239;
      uint64_t v16 = v248;
      uint64_t v14 = v258;
      uint64_t v12 = v269;
      uint64_t v10 = v281;
      uint64_t v8 = v294;
      uint64_t v6 = v308;
      uint64_t v4 = v323;
      uint64_t v2 = v339;
      a1 = v356;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v33[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::CmpFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpFOp>,mlir::OpTrait::OneResult<mlir::arith::CmpFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpFOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpFOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpFOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpFOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpFOp>,mlir::OpTrait::OneResult<mlir::arith::CmpFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpFOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpFOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpFOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpFOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpFOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::arith::CmpFOp::verifyInvariantsImpl((mlir::arith::CmpFOp *)&v8))
    && mlir::OpTrait::impl::verifySameTypeOperands(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::CmpFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.cmpi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376960;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::arith::CmpIOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::CmpFOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::CmpIOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::CmpFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::CmpIOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::CmpIOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::CmpFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::CmpIOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::CmpIOp::inferResultRanges((mlir::arith::CmpIOp *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::CmpIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::CmpIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::CmpIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::CmpFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.cmpi";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::CmpIOpGenericAdaptorBase::CmpIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::CmpIOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  {
    uint64_t v348 = a1;
    a1 = v348;
    if (v36)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v367 = 83;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v367;
      }
      int v39 = &v366[v38];
      unint64_t v40 = v367 - v38;
      if (v367 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v367 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
      a1 = v348;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v331 = v1;
    uint64_t v349 = a1;
    uint64_t v1 = v331;
    a1 = v349;
    if (v44)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v367 = 81;
      unint64_t v45 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v45) {
        unint64_t v46 = v45;
      }
      else {
        unint64_t v46 = v367;
      }
      uint64_t v47 = &v366[v46];
      unint64_t v48 = v367 - v46;
      if (v367 - v46 >= 0x12) {
        uint64_t v49 = 18;
      }
      else {
        uint64_t v49 = v367 - v46;
      }
      unint64_t v50 = v48 - v49;
      if (v50 >= v50 - 1) {
        uint64_t v51 = v50 - 1;
      }
      else {
        uint64_t v51 = v50;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v47[v49], v51);
      uint64_t v1 = v331;
      a1 = v349;
    }
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v332 = v1;
    uint64_t v350 = a1;
    uint64_t v315 = v2;
    uint64_t v2 = v315;
    uint64_t v1 = v332;
    int v53 = v52;
    a1 = v350;
    if (v53)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v367 = 104;
      unint64_t v54 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v54) {
        unint64_t v55 = v54;
      }
      else {
        unint64_t v55 = v367;
      }
      unint64_t v56 = &v366[v55];
      unint64_t v57 = v367 - v55;
      if (v367 - v55 >= 0x12) {
        uint64_t v58 = 18;
      }
      else {
        uint64_t v58 = v367 - v55;
      }
      unint64_t v59 = v57 - v58;
      if (v59 >= v59 - 1) {
        uint64_t v60 = v59 - 1;
      }
      else {
        uint64_t v60 = v59;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      uint64_t v2 = v315;
      uint64_t v1 = v332;
      a1 = v350;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v333 = v1;
    uint64_t v351 = a1;
    uint64_t v300 = v3;
    uint64_t v316 = v2;
    uint64_t v3 = v300;
    uint64_t v2 = v316;
    int v62 = v61;
    uint64_t v1 = v333;
    a1 = v351;
    if (v62)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v367 = 86;
      unint64_t v63 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v63) {
        unint64_t v64 = v63;
      }
      else {
        unint64_t v64 = v367;
      }
      unint64_t v65 = &v366[v64];
      unint64_t v66 = v367 - v64;
      if (v367 - v64 >= 0x12) {
        uint64_t v67 = 18;
      }
      else {
        uint64_t v67 = v367 - v64;
      }
      unint64_t v68 = v66 - v67;
      if (v68 >= v68 - 1) {
        uint64_t v69 = v68 - 1;
      }
      else {
        uint64_t v69 = v68;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      uint64_t v3 = v300;
      uint64_t v2 = v316;
      uint64_t v1 = v333;
      a1 = v351;
    }
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v334 = v1;
    uint64_t v352 = a1;
    uint64_t v301 = v3;
    uint64_t v317 = v2;
    uint64_t v286 = v4;
    uint64_t v4 = v286;
    uint64_t v3 = v301;
    uint64_t v2 = v317;
    uint64_t v1 = v334;
    int v71 = v70;
    a1 = v352;
    if (v71)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v367 = 90;
      unint64_t v72 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v72) {
        unint64_t v73 = v72;
      }
      else {
        unint64_t v73 = v367;
      }
      unint64_t v74 = &v366[v73];
      unint64_t v75 = v367 - v73;
      if (v367 - v73 >= 0x12) {
        uint64_t v76 = 18;
      }
      else {
        uint64_t v76 = v367 - v73;
      }
      unint64_t v77 = v75 - v76;
      if (v77 >= v77 - 1) {
        uint64_t v78 = v77 - 1;
      }
      else {
        uint64_t v78 = v77;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      uint64_t v4 = v286;
      uint64_t v3 = v301;
      uint64_t v2 = v317;
      uint64_t v1 = v334;
      a1 = v352;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v335 = v1;
    uint64_t v353 = a1;
    uint64_t v302 = v3;
    uint64_t v318 = v2;
    uint64_t v287 = v4;
    uint64_t v273 = v5;
    uint64_t v5 = v273;
    uint64_t v4 = v287;
    uint64_t v3 = v302;
    uint64_t v2 = v318;
    uint64_t v1 = v335;
    int v80 = v79;
    a1 = v353;
    if (v80)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v367 = 84;
      unint64_t v81 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v81) {
        unint64_t v82 = v81;
      }
      else {
        unint64_t v82 = v367;
      }
      unint64_t v83 = &v366[v82];
      unint64_t v84 = v367 - v82;
      if (v367 - v82 >= 0x12) {
        uint64_t v85 = 18;
      }
      else {
        uint64_t v85 = v367 - v82;
      }
      unint64_t v86 = v84 - v85;
      if (v86 >= v86 - 1) {
        uint64_t v87 = v86 - 1;
      }
      else {
        uint64_t v87 = v86;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      uint64_t v5 = v273;
      uint64_t v4 = v287;
      uint64_t v3 = v302;
      uint64_t v2 = v318;
      uint64_t v1 = v335;
      a1 = v353;
    }
  }
  uint64_t v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v336 = v1;
    uint64_t v354 = a1;
    uint64_t v303 = v3;
    uint64_t v319 = v2;
    uint64_t v288 = v4;
    uint64_t v261 = v6;
    uint64_t v274 = v5;
    uint64_t v6 = v261;
    uint64_t v5 = v274;
    uint64_t v4 = v288;
    uint64_t v3 = v303;
    uint64_t v2 = v319;
    uint64_t v1 = v336;
    int v89 = v88;
    a1 = v354;
    if (v89)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v367 = 89;
      unint64_t v90 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v90) {
        unint64_t v91 = v90;
      }
      else {
        unint64_t v91 = v367;
      }
      unint64_t v92 = &v366[v91];
      unint64_t v93 = v367 - v91;
      if (v367 - v91 >= 0x12) {
        uint64_t v94 = 18;
      }
      else {
        uint64_t v94 = v367 - v91;
      }
      unint64_t v95 = v93 - v94;
      if (v95 >= v95 - 1) {
        uint64_t v96 = v95 - 1;
      }
      else {
        uint64_t v96 = v95;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      uint64_t v6 = v261;
      uint64_t v5 = v274;
      uint64_t v4 = v288;
      uint64_t v3 = v303;
      uint64_t v2 = v319;
      uint64_t v1 = v336;
      a1 = v354;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v337 = v1;
    uint64_t v355 = a1;
    uint64_t v304 = v3;
    uint64_t v320 = v2;
    uint64_t v289 = v4;
    uint64_t v262 = v6;
    uint64_t v275 = v5;
    uint64_t v250 = v7;
    uint64_t v7 = v250;
    uint64_t v6 = v262;
    uint64_t v5 = v275;
    uint64_t v4 = v289;
    uint64_t v3 = v304;
    uint64_t v2 = v320;
    uint64_t v1 = v337;
    int v98 = v97;
    a1 = v355;
    if (v98)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v367 = 92;
      unint64_t v99 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v99) {
        unint64_t v100 = v99;
      }
      else {
        unint64_t v100 = v367;
      }
      unint64_t v101 = &v366[v100];
      unint64_t v102 = v367 - v100;
      if (v367 - v100 >= 0x12) {
        uint64_t v103 = 18;
      }
      else {
        uint64_t v103 = v367 - v100;
      }
      unint64_t v104 = v102 - v103;
      if (v104 >= v104 - 1) {
        uint64_t v105 = v104 - 1;
      }
      else {
        uint64_t v105 = v104;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      uint64_t v7 = v250;
      uint64_t v6 = v262;
      uint64_t v5 = v275;
      uint64_t v4 = v289;
      uint64_t v3 = v304;
      uint64_t v2 = v320;
      uint64_t v1 = v337;
      a1 = v355;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v338 = v1;
    uint64_t v356 = a1;
    uint64_t v305 = v3;
    uint64_t v321 = v2;
    uint64_t v290 = v4;
    uint64_t v263 = v6;
    uint64_t v276 = v5;
    uint64_t v240 = v8;
    uint64_t v251 = v7;
    uint64_t v8 = v240;
    uint64_t v7 = v251;
    uint64_t v6 = v263;
    uint64_t v5 = v276;
    uint64_t v4 = v290;
    uint64_t v3 = v305;
    uint64_t v2 = v321;
    uint64_t v1 = v338;
    int v107 = v106;
    a1 = v356;
    if (v107)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v367 = 95;
      unint64_t v108 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v108) {
        unint64_t v109 = v108;
      }
      else {
        unint64_t v109 = v367;
      }
      unint64_t v110 = &v366[v109];
      unint64_t v111 = v367 - v109;
      if (v367 - v109 >= 0x12) {
        uint64_t v112 = 18;
      }
      else {
        uint64_t v112 = v367 - v109;
      }
      unint64_t v113 = v111 - v112;
      if (v113 >= v113 - 1) {
        uint64_t v114 = v113 - 1;
      }
      else {
        uint64_t v114 = v113;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      uint64_t v8 = v240;
      uint64_t v7 = v251;
      uint64_t v6 = v263;
      uint64_t v5 = v276;
      uint64_t v4 = v290;
      uint64_t v3 = v305;
      uint64_t v2 = v321;
      uint64_t v1 = v338;
      a1 = v356;
    }
  }
  uint64_t v9 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v339 = v1;
    uint64_t v357 = a1;
    uint64_t v306 = v3;
    uint64_t v322 = v2;
    uint64_t v291 = v4;
    uint64_t v264 = v6;
    uint64_t v277 = v5;
    uint64_t v241 = v8;
    uint64_t v252 = v7;
    uint64_t v231 = v9;
    uint64_t v9 = v231;
    uint64_t v8 = v241;
    uint64_t v7 = v252;
    uint64_t v6 = v264;
    uint64_t v5 = v277;
    uint64_t v4 = v291;
    uint64_t v3 = v306;
    uint64_t v2 = v322;
    uint64_t v1 = v339;
    int v116 = v115;
    a1 = v357;
    if (v116)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v367 = 99;
      unint64_t v117 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v117) {
        unint64_t v118 = v117;
      }
      else {
        unint64_t v118 = v367;
      }
      unint64_t v119 = &v366[v118];
      unint64_t v120 = v367 - v118;
      if (v367 - v118 >= 0x12) {
        uint64_t v121 = 18;
      }
      else {
        uint64_t v121 = v367 - v118;
      }
      unint64_t v122 = v120 - v121;
      if (v122 >= v122 - 1) {
        uint64_t v123 = v122 - 1;
      }
      else {
        uint64_t v123 = v122;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      uint64_t v9 = v231;
      uint64_t v8 = v241;
      uint64_t v7 = v252;
      uint64_t v6 = v264;
      uint64_t v5 = v277;
      uint64_t v4 = v291;
      uint64_t v3 = v306;
      uint64_t v2 = v322;
      uint64_t v1 = v339;
      a1 = v357;
    }
  }
  uint64_t v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v340 = v1;
    uint64_t v358 = a1;
    uint64_t v307 = v3;
    uint64_t v323 = v2;
    uint64_t v292 = v4;
    uint64_t v265 = v6;
    uint64_t v278 = v5;
    uint64_t v242 = v8;
    uint64_t v253 = v7;
    uint64_t v223 = v10;
    uint64_t v232 = v9;
    uint64_t v10 = v223;
    uint64_t v9 = v232;
    uint64_t v8 = v242;
    uint64_t v7 = v253;
    uint64_t v6 = v265;
    uint64_t v5 = v278;
    uint64_t v4 = v292;
    uint64_t v3 = v307;
    uint64_t v2 = v323;
    uint64_t v1 = v340;
    int v125 = v124;
    a1 = v358;
    if (v125)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v126 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v126) {
        unint64_t v127 = v126;
      }
      else {
        unint64_t v127 = v367;
      }
      unint64_t v128 = &v366[v127];
      unint64_t v129 = v367 - v127;
      if (v367 - v127 >= 0x12) {
        uint64_t v130 = 18;
      }
      else {
        uint64_t v130 = v367 - v127;
      }
      unint64_t v131 = v129 - v130;
      if (v131 >= v131 - 1) {
        uint64_t v132 = v131 - 1;
      }
      else {
        uint64_t v132 = v131;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      uint64_t v10 = v223;
      uint64_t v9 = v232;
      uint64_t v8 = v242;
      uint64_t v7 = v253;
      uint64_t v6 = v265;
      uint64_t v5 = v278;
      uint64_t v4 = v292;
      uint64_t v3 = v307;
      uint64_t v2 = v323;
      uint64_t v1 = v340;
      a1 = v358;
    }
  }
  uint64_t v11 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v341 = v1;
    uint64_t v359 = a1;
    uint64_t v308 = v3;
    uint64_t v324 = v2;
    uint64_t v293 = v4;
    uint64_t v266 = v6;
    uint64_t v279 = v5;
    uint64_t v243 = v8;
    uint64_t v254 = v7;
    uint64_t v224 = v10;
    uint64_t v233 = v9;
    uint64_t v216 = v11;
    uint64_t v11 = v216;
    uint64_t v10 = v224;
    uint64_t v9 = v233;
    uint64_t v8 = v243;
    uint64_t v7 = v254;
    uint64_t v6 = v266;
    uint64_t v5 = v279;
    uint64_t v4 = v293;
    uint64_t v3 = v308;
    uint64_t v2 = v324;
    uint64_t v1 = v341;
    int v134 = v133;
    a1 = v359;
    if (v134)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameTypeOperands<Empty>]";
      unint64_t v367 = 88;
      unint64_t v135 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v135) {
        unint64_t v136 = v135;
      }
      else {
        unint64_t v136 = v367;
      }
      unint64_t v137 = &v366[v136];
      unint64_t v138 = v367 - v136;
      if (v367 - v136 >= 0x12) {
        uint64_t v139 = 18;
      }
      else {
        uint64_t v139 = v367 - v136;
      }
      unint64_t v140 = v138 - v139;
      if (v140 >= v140 - 1) {
        uint64_t v141 = v140 - 1;
      }
      else {
        uint64_t v141 = v140;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      uint64_t v11 = v216;
      uint64_t v10 = v224;
      uint64_t v9 = v233;
      uint64_t v8 = v243;
      uint64_t v7 = v254;
      uint64_t v6 = v266;
      uint64_t v5 = v279;
      uint64_t v4 = v293;
      uint64_t v3 = v308;
      uint64_t v2 = v324;
      uint64_t v1 = v341;
      a1 = v359;
    }
  }
  uint64_t v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v342 = v1;
    uint64_t v360 = a1;
    uint64_t v309 = v3;
    uint64_t v325 = v2;
    uint64_t v294 = v4;
    uint64_t v267 = v6;
    uint64_t v280 = v5;
    uint64_t v244 = v8;
    uint64_t v255 = v7;
    uint64_t v225 = v10;
    uint64_t v234 = v9;
    uint64_t v210 = v12;
    uint64_t v217 = v11;
    uint64_t v12 = v210;
    uint64_t v11 = v217;
    uint64_t v10 = v225;
    uint64_t v9 = v234;
    uint64_t v8 = v244;
    uint64_t v7 = v255;
    uint64_t v6 = v267;
    uint64_t v5 = v280;
    uint64_t v4 = v294;
    uint64_t v3 = v309;
    uint64_t v2 = v325;
    uint64_t v1 = v342;
    int v143 = v142;
    a1 = v360;
    if (v143)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v144 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v144) {
        unint64_t v145 = v144;
      }
      else {
        unint64_t v145 = v367;
      }
      unint64_t v146 = &v366[v145];
      unint64_t v147 = v367 - v145;
      if (v367 - v145 >= 0x12) {
        uint64_t v148 = 18;
      }
      else {
        uint64_t v148 = v367 - v145;
      }
      unint64_t v149 = v147 - v148;
      if (v149 >= v149 - 1) {
        uint64_t v150 = v149 - 1;
      }
      else {
        uint64_t v150 = v149;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      uint64_t v12 = v210;
      uint64_t v11 = v217;
      uint64_t v10 = v225;
      uint64_t v9 = v234;
      uint64_t v8 = v244;
      uint64_t v7 = v255;
      uint64_t v6 = v267;
      uint64_t v5 = v280;
      uint64_t v4 = v294;
      uint64_t v3 = v309;
      uint64_t v2 = v325;
      uint64_t v1 = v342;
      a1 = v360;
    }
  }
  uint64_t v13 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v343 = v1;
    uint64_t v361 = a1;
    uint64_t v310 = v3;
    uint64_t v326 = v2;
    uint64_t v295 = v4;
    uint64_t v268 = v6;
    uint64_t v281 = v5;
    uint64_t v245 = v8;
    uint64_t v256 = v7;
    uint64_t v226 = v10;
    uint64_t v235 = v9;
    uint64_t v211 = v12;
    uint64_t v218 = v11;
    uint64_t v151 = v13;
    uint64_t v13 = v151;
    uint64_t v12 = v211;
    uint64_t v11 = v218;
    uint64_t v10 = v226;
    uint64_t v9 = v235;
    uint64_t v8 = v245;
    uint64_t v7 = v256;
    uint64_t v6 = v268;
    uint64_t v5 = v281;
    uint64_t v4 = v295;
    uint64_t v3 = v310;
    uint64_t v2 = v326;
    uint64_t v1 = v343;
    int v153 = v152;
    a1 = v361;
    if (v153)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v367 = 83;
      unint64_t v154 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v154) {
        unint64_t v155 = v154;
      }
      else {
        unint64_t v155 = v367;
      }
      uint64_t v156 = &v366[v155];
      unint64_t v157 = v367 - v155;
      if (v367 - v155 >= 0x12) {
        uint64_t v158 = 18;
      }
      else {
        uint64_t v158 = v367 - v155;
      }
      unint64_t v159 = v157 - v158;
      if (v159 >= v159 - 1) {
        uint64_t v160 = v159 - 1;
      }
      else {
        uint64_t v160 = v159;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v156[v158], v160);
      uint64_t v13 = v151;
      uint64_t v12 = v211;
      uint64_t v11 = v218;
      uint64_t v10 = v226;
      uint64_t v9 = v235;
      uint64_t v8 = v245;
      uint64_t v7 = v256;
      uint64_t v6 = v268;
      uint64_t v5 = v281;
      uint64_t v4 = v295;
      uint64_t v3 = v310;
      uint64_t v2 = v326;
      uint64_t v1 = v343;
      a1 = v361;
    }
  }
  uint64_t v14 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v344 = v1;
    uint64_t v362 = a1;
    uint64_t v311 = v3;
    uint64_t v327 = v2;
    uint64_t v296 = v4;
    uint64_t v269 = v6;
    uint64_t v282 = v5;
    uint64_t v246 = v8;
    uint64_t v257 = v7;
    uint64_t v227 = v10;
    uint64_t v236 = v9;
    uint64_t v212 = v12;
    uint64_t v219 = v11;
    uint64_t v161 = v13;
    uint64_t v204 = v14;
    uint64_t v14 = v204;
    uint64_t v13 = v161;
    uint64_t v12 = v212;
    uint64_t v11 = v219;
    uint64_t v10 = v227;
    uint64_t v9 = v236;
    uint64_t v8 = v246;
    uint64_t v7 = v257;
    uint64_t v6 = v269;
    uint64_t v5 = v282;
    uint64_t v4 = v296;
    uint64_t v3 = v311;
    uint64_t v2 = v327;
    uint64_t v1 = v344;
    int v163 = v162;
    a1 = v362;
    if (v163)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v367;
      }
      unint64_t v166 = &v366[v165];
      unint64_t v167 = v367 - v165;
      if (v367 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v367 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      uint64_t v14 = v204;
      uint64_t v13 = v161;
      uint64_t v12 = v212;
      uint64_t v11 = v219;
      uint64_t v10 = v227;
      uint64_t v9 = v236;
      uint64_t v8 = v246;
      uint64_t v7 = v257;
      uint64_t v6 = v269;
      uint64_t v5 = v282;
      uint64_t v4 = v296;
      uint64_t v3 = v311;
      uint64_t v2 = v327;
      uint64_t v1 = v344;
      a1 = v362;
    }
  }
  uint64_t v15 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v345 = v1;
    uint64_t v363 = a1;
    uint64_t v312 = v3;
    uint64_t v328 = v2;
    uint64_t v297 = v4;
    uint64_t v270 = v6;
    uint64_t v283 = v5;
    uint64_t v247 = v8;
    uint64_t v258 = v7;
    uint64_t v228 = v10;
    uint64_t v237 = v9;
    uint64_t v213 = v12;
    uint64_t v220 = v11;
    uint64_t v207 = v13;
    uint64_t v171 = v14;
    uint64_t v200 = v15;
    uint64_t v15 = v200;
    uint64_t v14 = v171;
    uint64_t v13 = v207;
    uint64_t v12 = v213;
    uint64_t v11 = v220;
    uint64_t v10 = v228;
    uint64_t v9 = v237;
    uint64_t v8 = v247;
    uint64_t v7 = v258;
    uint64_t v6 = v270;
    uint64_t v5 = v283;
    uint64_t v4 = v297;
    uint64_t v3 = v312;
    uint64_t v2 = v328;
    uint64_t v1 = v345;
    int v173 = v172;
    a1 = v363;
    if (v173)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v174 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v174) {
        unint64_t v175 = v174;
      }
      else {
        unint64_t v175 = v367;
      }
      uint64_t v176 = &v366[v175];
      unint64_t v177 = v367 - v175;
      if (v367 - v175 >= 0x12) {
        uint64_t v178 = 18;
      }
      else {
        uint64_t v178 = v367 - v175;
      }
      unint64_t v179 = v177 - v178;
      if (v179 >= v179 - 1) {
        uint64_t v180 = v179 - 1;
      }
      else {
        uint64_t v180 = v179;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      uint64_t v15 = v200;
      uint64_t v14 = v171;
      uint64_t v13 = v207;
      uint64_t v12 = v213;
      uint64_t v11 = v220;
      uint64_t v10 = v228;
      uint64_t v9 = v237;
      uint64_t v8 = v247;
      uint64_t v7 = v258;
      uint64_t v6 = v270;
      uint64_t v5 = v283;
      uint64_t v4 = v297;
      uint64_t v3 = v312;
      uint64_t v2 = v328;
      uint64_t v1 = v345;
      a1 = v363;
    }
  }
  uint64_t v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v346 = v1;
    uint64_t v364 = a1;
    uint64_t v313 = v3;
    uint64_t v329 = v2;
    uint64_t v298 = v4;
    uint64_t v271 = v6;
    uint64_t v284 = v5;
    uint64_t v248 = v8;
    uint64_t v259 = v7;
    uint64_t v229 = v10;
    uint64_t v238 = v9;
    uint64_t v214 = v12;
    uint64_t v221 = v11;
    uint64_t v205 = v14;
    uint64_t v208 = v13;
    uint64_t v181 = v15;
    uint64_t v202 = v16;
    uint64_t v16 = v202;
    uint64_t v14 = v205;
    uint64_t v15 = v181;
    uint64_t v13 = v208;
    uint64_t v12 = v214;
    uint64_t v11 = v221;
    uint64_t v10 = v229;
    uint64_t v9 = v238;
    uint64_t v8 = v248;
    uint64_t v7 = v259;
    uint64_t v6 = v271;
    uint64_t v5 = v284;
    uint64_t v4 = v298;
    uint64_t v3 = v313;
    uint64_t v2 = v329;
    uint64_t v1 = v346;
    int v183 = v182;
    a1 = v364;
    if (v183)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v184 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v184) {
        unint64_t v185 = v184;
      }
      else {
        unint64_t v185 = v367;
      }
      int v186 = &v366[v185];
      unint64_t v187 = v367 - v185;
      if (v367 - v185 >= 0x12) {
        uint64_t v188 = 18;
      }
      else {
        uint64_t v188 = v367 - v185;
      }
      unint64_t v189 = v187 - v188;
      if (v189 >= v189 - 1) {
        uint64_t v190 = v189 - 1;
      }
      else {
        uint64_t v190 = v189;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v186[v188], v190);
      uint64_t v16 = v202;
      uint64_t v14 = v205;
      uint64_t v15 = v181;
      uint64_t v13 = v208;
      uint64_t v12 = v214;
      uint64_t v11 = v221;
      uint64_t v10 = v229;
      uint64_t v9 = v238;
      uint64_t v8 = v248;
      uint64_t v7 = v259;
      uint64_t v6 = v271;
      uint64_t v5 = v284;
      uint64_t v4 = v298;
      uint64_t v3 = v313;
      uint64_t v2 = v329;
      uint64_t v1 = v346;
      a1 = v364;
    }
  }
  uint64_t v17 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v347 = v1;
    uint64_t v365 = a1;
    uint64_t v314 = v3;
    uint64_t v330 = v2;
    uint64_t v299 = v4;
    uint64_t v272 = v6;
    uint64_t v285 = v5;
    uint64_t v249 = v8;
    uint64_t v260 = v7;
    uint64_t v230 = v10;
    uint64_t v239 = v9;
    uint64_t v215 = v12;
    uint64_t v222 = v11;
    uint64_t v206 = v14;
    uint64_t v209 = v13;
    uint64_t v201 = v15;
    uint64_t v203 = v16;
    uint64_t v15 = v201;
    uint64_t v16 = v203;
    uint64_t v14 = v206;
    uint64_t v13 = v209;
    uint64_t v12 = v215;
    uint64_t v11 = v222;
    uint64_t v10 = v230;
    uint64_t v9 = v239;
    uint64_t v8 = v249;
    uint64_t v7 = v260;
    uint64_t v6 = v272;
    uint64_t v5 = v285;
    uint64_t v4 = v299;
    uint64_t v3 = v314;
    uint64_t v2 = v330;
    uint64_t v1 = v347;
    int v192 = v191;
    a1 = v365;
    if (v192)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v367 = 90;
      unint64_t v193 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v193) {
        unint64_t v194 = v193;
      }
      else {
        unint64_t v194 = v367;
      }
      int v195 = &v366[v194];
      unint64_t v196 = v367 - v194;
      if (v367 - v194 >= 0x12) {
        uint64_t v197 = 18;
      }
      else {
        uint64_t v197 = v367 - v194;
      }
      unint64_t v198 = v196 - v197;
      if (v198 >= v198 - 1) {
        uint64_t v199 = v198 - 1;
      }
      else {
        uint64_t v199 = v198;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v195[v197], v199);
      uint64_t v15 = v201;
      uint64_t v16 = v203;
      uint64_t v14 = v206;
      uint64_t v13 = v209;
      uint64_t v12 = v215;
      uint64_t v11 = v222;
      uint64_t v10 = v230;
      uint64_t v9 = v239;
      uint64_t v8 = v249;
      uint64_t v7 = v260;
      uint64_t v6 = v272;
      uint64_t v5 = v285;
      uint64_t v4 = v299;
      uint64_t v3 = v314;
      uint64_t v2 = v330;
      uint64_t v1 = v347;
      a1 = v365;
    }
  }
  return v1 == a1
      || v2 == a1
      || v3 == a1
      || v4 == a1
      || v5 == a1
      || v6 == a1
      || v7 == a1
      || v8 == a1
      || v9 == a1
      || v10 == a1
      || v11 == a1
      || v12 == a1
      || v13 == a1
      || v14 == a1
      || v15 == a1
      || v16 == a1
      || v17 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::CmpIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpIOp>,mlir::OpTrait::OneResult<mlir::arith::CmpIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpIOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::CmpIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpIOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpIOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpIOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::CmpIOp>,mlir::OpTrait::OneResult<mlir::arith::CmpIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::CmpIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::CmpIOp>,mlir::OpTrait::OpInvariants<mlir::arith::CmpIOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::CmpIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::CmpIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::CmpIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::SameTypeOperands<mlir::arith::CmpIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::CmpIOp>,mlir::OpTrait::Elementwise<mlir::arith::CmpIOp>,mlir::OpTrait::Scalarizable<mlir::arith::CmpIOp>,mlir::OpTrait::Vectorizable<mlir::arith::CmpIOp>,mlir::OpTrait::Tensorizable<mlir::arith::CmpIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::CmpIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::arith::CmpIOp::verifyInvariantsImpl((mlir::arith::CmpIOp *)&v8))
    && mlir::OpTrait::impl::verifySameTypeOperands(a1, v5))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::CmpIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.constant", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C375CE0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ConstantOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::ConstantOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::ConstantOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::ConstantOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::ConstantOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::ConstantOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::ConstantOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ConstantOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

void mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v4 = a2;
  mlir::arith::ConstantOp::getAsmResultNames((uint64_t)&v4, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

void *mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void **), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::ConstantOp::inferResultRanges((mlir::arith::ConstantOp *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::ConstantOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ConstantOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ConstantOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ConstantOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::ConstantOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.constant";
  v16[1] = 14;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::ConstantOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v259 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      unint64_t v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    char v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      unint64_t v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v274 = 104;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      unint64_t v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      unint64_t v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267770000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v274 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      unint64_t v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      unint64_t v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      unint64_t v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267770000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    uint64_t v15 = (void *)&unk_267770000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      unint64_t v274 = 84;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      unint64_t v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v15 = (void *)&unk_267770000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[387];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      unint64_t v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[322];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      unint64_t v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[324];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      unint64_t v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v274 = 86;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      unint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[350];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v274 = 92;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      unint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[344];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v274 = 90;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      int v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::ConstantOp::print((mlir::arith::ConstantOp *)&v7, a3);
}

BOOL mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::arith::ConstantOp::verifyInvariantsImpl((mlir::arith::ConstantOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::arith::ConstantOp::verify((mlir::arith::ConstantOp *)&v7) != 0;
}

BOOL mlir::Op<mlir::arith::ConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::ConstantLike,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.divf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::DivFOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376A28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::DivFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.divf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::DivFOpGenericAdaptorBase::DivFOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::DivFOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  {
    uint64_t v348 = a1;
    a1 = v348;
    if (v36)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v367 = 83;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v367;
      }
      int v39 = &v366[v38];
      unint64_t v40 = v367 - v38;
      if (v367 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v367 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
      a1 = v348;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v331 = v1;
    uint64_t v349 = a1;
    uint64_t v1 = v331;
    a1 = v349;
    if (v44)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v367 = 81;
      unint64_t v45 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v45) {
        unint64_t v46 = v45;
      }
      else {
        unint64_t v46 = v367;
      }
      unint64_t v47 = &v366[v46];
      unint64_t v48 = v367 - v46;
      if (v367 - v46 >= 0x12) {
        uint64_t v49 = 18;
      }
      else {
        uint64_t v49 = v367 - v46;
      }
      unint64_t v50 = v48 - v49;
      if (v50 >= v50 - 1) {
        uint64_t v51 = v50 - 1;
      }
      else {
        uint64_t v51 = v50;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v47[v49], v51);
      uint64_t v1 = v331;
      a1 = v349;
    }
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v332 = v1;
    uint64_t v350 = a1;
    uint64_t v315 = v2;
    uint64_t v2 = v315;
    uint64_t v1 = v332;
    int v53 = v52;
    a1 = v350;
    if (v53)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v367 = 104;
      unint64_t v54 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v54) {
        unint64_t v55 = v54;
      }
      else {
        unint64_t v55 = v367;
      }
      unint64_t v56 = &v366[v55];
      unint64_t v57 = v367 - v55;
      if (v367 - v55 >= 0x12) {
        uint64_t v58 = 18;
      }
      else {
        uint64_t v58 = v367 - v55;
      }
      unint64_t v59 = v57 - v58;
      if (v59 >= v59 - 1) {
        uint64_t v60 = v59 - 1;
      }
      else {
        uint64_t v60 = v59;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      uint64_t v2 = v315;
      uint64_t v1 = v332;
      a1 = v350;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v333 = v1;
    uint64_t v351 = a1;
    uint64_t v300 = v3;
    uint64_t v316 = v2;
    uint64_t v3 = v300;
    uint64_t v2 = v316;
    int v62 = v61;
    uint64_t v1 = v333;
    a1 = v351;
    if (v62)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v367 = 86;
      unint64_t v63 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v63) {
        unint64_t v64 = v63;
      }
      else {
        unint64_t v64 = v367;
      }
      unint64_t v65 = &v366[v64];
      unint64_t v66 = v367 - v64;
      if (v367 - v64 >= 0x12) {
        uint64_t v67 = 18;
      }
      else {
        uint64_t v67 = v367 - v64;
      }
      unint64_t v68 = v66 - v67;
      if (v68 >= v68 - 1) {
        uint64_t v69 = v68 - 1;
      }
      else {
        uint64_t v69 = v68;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      uint64_t v3 = v300;
      uint64_t v2 = v316;
      uint64_t v1 = v333;
      a1 = v351;
    }
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v334 = v1;
    uint64_t v352 = a1;
    uint64_t v301 = v3;
    uint64_t v317 = v2;
    uint64_t v286 = v4;
    uint64_t v4 = v286;
    uint64_t v3 = v301;
    uint64_t v2 = v317;
    uint64_t v1 = v334;
    int v71 = v70;
    a1 = v352;
    if (v71)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v367 = 90;
      unint64_t v72 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v72) {
        unint64_t v73 = v72;
      }
      else {
        unint64_t v73 = v367;
      }
      unint64_t v74 = &v366[v73];
      unint64_t v75 = v367 - v73;
      if (v367 - v73 >= 0x12) {
        uint64_t v76 = 18;
      }
      else {
        uint64_t v76 = v367 - v73;
      }
      unint64_t v77 = v75 - v76;
      if (v77 >= v77 - 1) {
        uint64_t v78 = v77 - 1;
      }
      else {
        uint64_t v78 = v77;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      uint64_t v4 = v286;
      uint64_t v3 = v301;
      uint64_t v2 = v317;
      uint64_t v1 = v334;
      a1 = v352;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v335 = v1;
    uint64_t v353 = a1;
    uint64_t v302 = v3;
    uint64_t v318 = v2;
    uint64_t v287 = v4;
    uint64_t v273 = v5;
    uint64_t v5 = v273;
    uint64_t v4 = v287;
    uint64_t v3 = v302;
    uint64_t v2 = v318;
    uint64_t v1 = v335;
    int v80 = v79;
    a1 = v353;
    if (v80)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v367 = 84;
      unint64_t v81 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v81) {
        unint64_t v82 = v81;
      }
      else {
        unint64_t v82 = v367;
      }
      unint64_t v83 = &v366[v82];
      unint64_t v84 = v367 - v82;
      if (v367 - v82 >= 0x12) {
        uint64_t v85 = 18;
      }
      else {
        uint64_t v85 = v367 - v82;
      }
      unint64_t v86 = v84 - v85;
      if (v86 >= v86 - 1) {
        uint64_t v87 = v86 - 1;
      }
      else {
        uint64_t v87 = v86;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      uint64_t v5 = v273;
      uint64_t v4 = v287;
      uint64_t v3 = v302;
      uint64_t v2 = v318;
      uint64_t v1 = v335;
      a1 = v353;
    }
  }
  uint64_t v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v336 = v1;
    uint64_t v354 = a1;
    uint64_t v303 = v3;
    uint64_t v319 = v2;
    uint64_t v288 = v4;
    uint64_t v261 = v6;
    uint64_t v274 = v5;
    uint64_t v6 = v261;
    uint64_t v5 = v274;
    uint64_t v4 = v288;
    uint64_t v3 = v303;
    uint64_t v2 = v319;
    uint64_t v1 = v336;
    int v89 = v88;
    a1 = v354;
    if (v89)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v367 = 89;
      unint64_t v90 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v90) {
        unint64_t v91 = v90;
      }
      else {
        unint64_t v91 = v367;
      }
      unint64_t v92 = &v366[v91];
      unint64_t v93 = v367 - v91;
      if (v367 - v91 >= 0x12) {
        uint64_t v94 = 18;
      }
      else {
        uint64_t v94 = v367 - v91;
      }
      unint64_t v95 = v93 - v94;
      if (v95 >= v95 - 1) {
        uint64_t v96 = v95 - 1;
      }
      else {
        uint64_t v96 = v95;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      uint64_t v6 = v261;
      uint64_t v5 = v274;
      uint64_t v4 = v288;
      uint64_t v3 = v303;
      uint64_t v2 = v319;
      uint64_t v1 = v336;
      a1 = v354;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v337 = v1;
    uint64_t v355 = a1;
    uint64_t v304 = v3;
    uint64_t v320 = v2;
    uint64_t v289 = v4;
    uint64_t v262 = v6;
    uint64_t v275 = v5;
    uint64_t v250 = v7;
    uint64_t v7 = v250;
    uint64_t v6 = v262;
    uint64_t v5 = v275;
    uint64_t v4 = v289;
    uint64_t v3 = v304;
    uint64_t v2 = v320;
    uint64_t v1 = v337;
    int v98 = v97;
    a1 = v355;
    if (v98)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v367 = 95;
      unint64_t v99 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v99) {
        unint64_t v100 = v99;
      }
      else {
        unint64_t v100 = v367;
      }
      unint64_t v101 = &v366[v100];
      unint64_t v102 = v367 - v100;
      if (v367 - v100 >= 0x12) {
        uint64_t v103 = 18;
      }
      else {
        uint64_t v103 = v367 - v100;
      }
      unint64_t v104 = v102 - v103;
      if (v104 >= v104 - 1) {
        uint64_t v105 = v104 - 1;
      }
      else {
        uint64_t v105 = v104;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      uint64_t v7 = v250;
      uint64_t v6 = v262;
      uint64_t v5 = v275;
      uint64_t v4 = v289;
      uint64_t v3 = v304;
      uint64_t v2 = v320;
      uint64_t v1 = v337;
      a1 = v355;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v338 = v1;
    uint64_t v356 = a1;
    uint64_t v305 = v3;
    uint64_t v321 = v2;
    uint64_t v290 = v4;
    uint64_t v263 = v6;
    uint64_t v276 = v5;
    uint64_t v240 = v8;
    uint64_t v251 = v7;
    uint64_t v8 = v240;
    uint64_t v7 = v251;
    uint64_t v6 = v263;
    uint64_t v5 = v276;
    uint64_t v4 = v290;
    uint64_t v3 = v305;
    uint64_t v2 = v321;
    uint64_t v1 = v338;
    int v107 = v106;
    a1 = v356;
    if (v107)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v367 = 99;
      unint64_t v108 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v108) {
        unint64_t v109 = v108;
      }
      else {
        unint64_t v109 = v367;
      }
      unint64_t v110 = &v366[v109];
      unint64_t v111 = v367 - v109;
      if (v367 - v109 >= 0x12) {
        uint64_t v112 = 18;
      }
      else {
        uint64_t v112 = v367 - v109;
      }
      unint64_t v113 = v111 - v112;
      if (v113 >= v113 - 1) {
        uint64_t v114 = v113 - 1;
      }
      else {
        uint64_t v114 = v113;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      uint64_t v8 = v240;
      uint64_t v7 = v251;
      uint64_t v6 = v263;
      uint64_t v5 = v276;
      uint64_t v4 = v290;
      uint64_t v3 = v305;
      uint64_t v2 = v321;
      uint64_t v1 = v338;
      a1 = v356;
    }
  }
  uint64_t v9 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v339 = v1;
    uint64_t v357 = a1;
    uint64_t v306 = v3;
    uint64_t v322 = v2;
    uint64_t v291 = v4;
    uint64_t v264 = v6;
    uint64_t v277 = v5;
    uint64_t v241 = v8;
    uint64_t v252 = v7;
    uint64_t v231 = v9;
    uint64_t v9 = v231;
    uint64_t v8 = v241;
    uint64_t v7 = v252;
    uint64_t v6 = v264;
    uint64_t v5 = v277;
    uint64_t v4 = v291;
    uint64_t v3 = v306;
    uint64_t v2 = v322;
    uint64_t v1 = v339;
    int v116 = v115;
    a1 = v357;
    if (v116)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v117 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v117) {
        unint64_t v118 = v117;
      }
      else {
        unint64_t v118 = v367;
      }
      unint64_t v119 = &v366[v118];
      unint64_t v120 = v367 - v118;
      if (v367 - v118 >= 0x12) {
        uint64_t v121 = 18;
      }
      else {
        uint64_t v121 = v367 - v118;
      }
      unint64_t v122 = v120 - v121;
      if (v122 >= v122 - 1) {
        uint64_t v123 = v122 - 1;
      }
      else {
        uint64_t v123 = v122;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      uint64_t v9 = v231;
      uint64_t v8 = v241;
      uint64_t v7 = v252;
      uint64_t v6 = v264;
      uint64_t v5 = v277;
      uint64_t v4 = v291;
      uint64_t v3 = v306;
      uint64_t v2 = v322;
      uint64_t v1 = v339;
      a1 = v357;
    }
  }
  uint64_t v10 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v340 = v1;
    uint64_t v358 = a1;
    uint64_t v307 = v3;
    uint64_t v323 = v2;
    uint64_t v292 = v4;
    uint64_t v265 = v6;
    uint64_t v278 = v5;
    uint64_t v242 = v8;
    uint64_t v253 = v7;
    uint64_t v223 = v10;
    uint64_t v232 = v9;
    uint64_t v10 = v223;
    uint64_t v9 = v232;
    uint64_t v8 = v242;
    uint64_t v7 = v253;
    uint64_t v6 = v265;
    uint64_t v5 = v278;
    uint64_t v4 = v292;
    uint64_t v3 = v307;
    uint64_t v2 = v323;
    uint64_t v1 = v340;
    int v125 = v124;
    a1 = v358;
    if (v125)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      unint64_t v367 = 99;
      unint64_t v126 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v126) {
        unint64_t v127 = v126;
      }
      else {
        unint64_t v127 = v367;
      }
      unint64_t v128 = &v366[v127];
      unint64_t v129 = v367 - v127;
      if (v367 - v127 >= 0x12) {
        uint64_t v130 = 18;
      }
      else {
        uint64_t v130 = v367 - v127;
      }
      unint64_t v131 = v129 - v130;
      if (v131 >= v131 - 1) {
        uint64_t v132 = v131 - 1;
      }
      else {
        uint64_t v132 = v131;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      uint64_t v10 = v223;
      uint64_t v9 = v232;
      uint64_t v8 = v242;
      uint64_t v7 = v253;
      uint64_t v6 = v265;
      uint64_t v5 = v278;
      uint64_t v4 = v292;
      uint64_t v3 = v307;
      uint64_t v2 = v323;
      uint64_t v1 = v340;
      a1 = v358;
    }
  }
  uint64_t v11 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v341 = v1;
    uint64_t v359 = a1;
    uint64_t v308 = v3;
    uint64_t v324 = v2;
    uint64_t v293 = v4;
    uint64_t v266 = v6;
    uint64_t v279 = v5;
    uint64_t v243 = v8;
    uint64_t v254 = v7;
    uint64_t v224 = v10;
    uint64_t v233 = v9;
    uint64_t v216 = v11;
    uint64_t v11 = v216;
    uint64_t v10 = v224;
    uint64_t v9 = v233;
    uint64_t v8 = v243;
    uint64_t v7 = v254;
    uint64_t v6 = v266;
    uint64_t v5 = v279;
    uint64_t v4 = v293;
    uint64_t v3 = v308;
    uint64_t v2 = v324;
    uint64_t v1 = v341;
    int v134 = v133;
    a1 = v359;
    if (v134)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v367 = 97;
      unint64_t v135 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v135) {
        unint64_t v136 = v135;
      }
      else {
        unint64_t v136 = v367;
      }
      unint64_t v137 = &v366[v136];
      unint64_t v138 = v367 - v136;
      if (v367 - v136 >= 0x12) {
        uint64_t v139 = 18;
      }
      else {
        uint64_t v139 = v367 - v136;
      }
      unint64_t v140 = v138 - v139;
      if (v140 >= v140 - 1) {
        uint64_t v141 = v140 - 1;
      }
      else {
        uint64_t v141 = v140;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      uint64_t v11 = v216;
      uint64_t v10 = v224;
      uint64_t v9 = v233;
      uint64_t v8 = v243;
      uint64_t v7 = v254;
      uint64_t v6 = v266;
      uint64_t v5 = v279;
      uint64_t v4 = v293;
      uint64_t v3 = v308;
      uint64_t v2 = v324;
      uint64_t v1 = v341;
      a1 = v359;
    }
  }
  uint64_t v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v342 = v1;
    uint64_t v360 = a1;
    uint64_t v309 = v3;
    uint64_t v325 = v2;
    uint64_t v294 = v4;
    uint64_t v267 = v6;
    uint64_t v280 = v5;
    uint64_t v244 = v8;
    uint64_t v255 = v7;
    uint64_t v225 = v10;
    uint64_t v234 = v9;
    uint64_t v210 = v12;
    uint64_t v217 = v11;
    uint64_t v12 = v210;
    uint64_t v11 = v217;
    uint64_t v10 = v225;
    uint64_t v9 = v234;
    uint64_t v8 = v244;
    uint64_t v7 = v255;
    uint64_t v6 = v267;
    uint64_t v5 = v280;
    uint64_t v4 = v294;
    uint64_t v3 = v309;
    uint64_t v2 = v325;
    uint64_t v1 = v342;
    int v143 = v142;
    a1 = v360;
    if (v143)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v144 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v144) {
        unint64_t v145 = v144;
      }
      else {
        unint64_t v145 = v367;
      }
      unint64_t v146 = &v366[v145];
      unint64_t v147 = v367 - v145;
      if (v367 - v145 >= 0x12) {
        uint64_t v148 = 18;
      }
      else {
        uint64_t v148 = v367 - v145;
      }
      unint64_t v149 = v147 - v148;
      if (v149 >= v149 - 1) {
        uint64_t v150 = v149 - 1;
      }
      else {
        uint64_t v150 = v149;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      uint64_t v12 = v210;
      uint64_t v11 = v217;
      uint64_t v10 = v225;
      uint64_t v9 = v234;
      uint64_t v8 = v244;
      uint64_t v7 = v255;
      uint64_t v6 = v267;
      uint64_t v5 = v280;
      uint64_t v4 = v294;
      uint64_t v3 = v309;
      uint64_t v2 = v325;
      uint64_t v1 = v342;
      a1 = v360;
    }
  }
  uint64_t v13 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v343 = v1;
    uint64_t v361 = a1;
    uint64_t v310 = v3;
    uint64_t v326 = v2;
    uint64_t v295 = v4;
    uint64_t v268 = v6;
    uint64_t v281 = v5;
    uint64_t v245 = v8;
    uint64_t v256 = v7;
    uint64_t v226 = v10;
    uint64_t v235 = v9;
    uint64_t v211 = v12;
    uint64_t v218 = v11;
    uint64_t v151 = v13;
    uint64_t v13 = v151;
    uint64_t v12 = v211;
    uint64_t v11 = v218;
    uint64_t v10 = v226;
    uint64_t v9 = v235;
    uint64_t v8 = v245;
    uint64_t v7 = v256;
    uint64_t v6 = v268;
    uint64_t v5 = v281;
    uint64_t v4 = v295;
    uint64_t v3 = v310;
    uint64_t v2 = v326;
    uint64_t v1 = v343;
    int v153 = v152;
    a1 = v361;
    if (v153)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v367 = 83;
      unint64_t v154 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v154) {
        unint64_t v155 = v154;
      }
      else {
        unint64_t v155 = v367;
      }
      uint64_t v156 = &v366[v155];
      unint64_t v157 = v367 - v155;
      if (v367 - v155 >= 0x12) {
        uint64_t v158 = 18;
      }
      else {
        uint64_t v158 = v367 - v155;
      }
      unint64_t v159 = v157 - v158;
      if (v159 >= v159 - 1) {
        uint64_t v160 = v159 - 1;
      }
      else {
        uint64_t v160 = v159;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v156[v158], v160);
      uint64_t v13 = v151;
      uint64_t v12 = v211;
      uint64_t v11 = v218;
      uint64_t v10 = v226;
      uint64_t v9 = v235;
      uint64_t v8 = v245;
      uint64_t v7 = v256;
      uint64_t v6 = v268;
      uint64_t v5 = v281;
      uint64_t v4 = v295;
      uint64_t v3 = v310;
      uint64_t v2 = v326;
      uint64_t v1 = v343;
      a1 = v361;
    }
  }
  uint64_t v14 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v344 = v1;
    uint64_t v362 = a1;
    uint64_t v311 = v3;
    uint64_t v327 = v2;
    uint64_t v296 = v4;
    uint64_t v269 = v6;
    uint64_t v282 = v5;
    uint64_t v246 = v8;
    uint64_t v257 = v7;
    uint64_t v227 = v10;
    uint64_t v236 = v9;
    uint64_t v212 = v12;
    uint64_t v219 = v11;
    uint64_t v161 = v13;
    uint64_t v204 = v14;
    uint64_t v14 = v204;
    uint64_t v13 = v161;
    uint64_t v12 = v212;
    uint64_t v11 = v219;
    uint64_t v10 = v227;
    uint64_t v9 = v236;
    uint64_t v8 = v246;
    uint64_t v7 = v257;
    uint64_t v6 = v269;
    uint64_t v5 = v282;
    uint64_t v4 = v296;
    uint64_t v3 = v311;
    uint64_t v2 = v327;
    uint64_t v1 = v344;
    int v163 = v162;
    a1 = v362;
    if (v163)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v367;
      }
      unint64_t v166 = &v366[v165];
      unint64_t v167 = v367 - v165;
      if (v367 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v367 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      uint64_t v14 = v204;
      uint64_t v13 = v161;
      uint64_t v12 = v212;
      uint64_t v11 = v219;
      uint64_t v10 = v227;
      uint64_t v9 = v236;
      uint64_t v8 = v246;
      uint64_t v7 = v257;
      uint64_t v6 = v269;
      uint64_t v5 = v282;
      uint64_t v4 = v296;
      uint64_t v3 = v311;
      uint64_t v2 = v327;
      uint64_t v1 = v344;
      a1 = v362;
    }
  }
  uint64_t v15 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v345 = v1;
    uint64_t v363 = a1;
    uint64_t v312 = v3;
    uint64_t v328 = v2;
    uint64_t v297 = v4;
    uint64_t v270 = v6;
    uint64_t v283 = v5;
    uint64_t v247 = v8;
    uint64_t v258 = v7;
    uint64_t v228 = v10;
    uint64_t v237 = v9;
    uint64_t v213 = v12;
    uint64_t v220 = v11;
    uint64_t v207 = v13;
    uint64_t v171 = v14;
    uint64_t v200 = v15;
    uint64_t v15 = v200;
    uint64_t v14 = v171;
    uint64_t v13 = v207;
    uint64_t v12 = v213;
    uint64_t v11 = v220;
    uint64_t v10 = v228;
    uint64_t v9 = v237;
    uint64_t v8 = v247;
    uint64_t v7 = v258;
    uint64_t v6 = v270;
    uint64_t v5 = v283;
    uint64_t v4 = v297;
    uint64_t v3 = v312;
    uint64_t v2 = v328;
    uint64_t v1 = v345;
    int v173 = v172;
    a1 = v363;
    if (v173)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v174 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v174) {
        unint64_t v175 = v174;
      }
      else {
        unint64_t v175 = v367;
      }
      uint64_t v176 = &v366[v175];
      unint64_t v177 = v367 - v175;
      if (v367 - v175 >= 0x12) {
        uint64_t v178 = 18;
      }
      else {
        uint64_t v178 = v367 - v175;
      }
      unint64_t v179 = v177 - v178;
      if (v179 >= v179 - 1) {
        uint64_t v180 = v179 - 1;
      }
      else {
        uint64_t v180 = v179;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      uint64_t v15 = v200;
      uint64_t v14 = v171;
      uint64_t v13 = v207;
      uint64_t v12 = v213;
      uint64_t v11 = v220;
      uint64_t v10 = v228;
      uint64_t v9 = v237;
      uint64_t v8 = v247;
      uint64_t v7 = v258;
      uint64_t v6 = v270;
      uint64_t v5 = v283;
      uint64_t v4 = v297;
      uint64_t v3 = v312;
      uint64_t v2 = v328;
      uint64_t v1 = v345;
      a1 = v363;
    }
  }
  uint64_t v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v346 = v1;
    uint64_t v364 = a1;
    uint64_t v313 = v3;
    uint64_t v329 = v2;
    uint64_t v298 = v4;
    uint64_t v271 = v6;
    uint64_t v284 = v5;
    uint64_t v248 = v8;
    uint64_t v259 = v7;
    uint64_t v229 = v10;
    uint64_t v238 = v9;
    uint64_t v214 = v12;
    uint64_t v221 = v11;
    uint64_t v205 = v14;
    uint64_t v208 = v13;
    uint64_t v181 = v15;
    uint64_t v202 = v16;
    uint64_t v16 = v202;
    uint64_t v14 = v205;
    uint64_t v15 = v181;
    uint64_t v13 = v208;
    uint64_t v12 = v214;
    uint64_t v11 = v221;
    uint64_t v10 = v229;
    uint64_t v9 = v238;
    uint64_t v8 = v248;
    uint64_t v7 = v259;
    uint64_t v6 = v271;
    uint64_t v5 = v284;
    uint64_t v4 = v298;
    uint64_t v3 = v313;
    uint64_t v2 = v329;
    uint64_t v1 = v346;
    int v183 = v182;
    a1 = v364;
    if (v183)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v184 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v184) {
        unint64_t v185 = v184;
      }
      else {
        unint64_t v185 = v367;
      }
      uint64_t v186 = &v366[v185];
      unint64_t v187 = v367 - v185;
      if (v367 - v185 >= 0x12) {
        uint64_t v188 = 18;
      }
      else {
        uint64_t v188 = v367 - v185;
      }
      unint64_t v189 = v187 - v188;
      if (v189 >= v189 - 1) {
        uint64_t v190 = v189 - 1;
      }
      else {
        uint64_t v190 = v189;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v186[v188], v190);
      uint64_t v16 = v202;
      uint64_t v14 = v205;
      uint64_t v15 = v181;
      uint64_t v13 = v208;
      uint64_t v12 = v214;
      uint64_t v11 = v221;
      uint64_t v10 = v229;
      uint64_t v9 = v238;
      uint64_t v8 = v248;
      uint64_t v7 = v259;
      uint64_t v6 = v271;
      uint64_t v5 = v284;
      uint64_t v4 = v298;
      uint64_t v3 = v313;
      uint64_t v2 = v329;
      uint64_t v1 = v346;
      a1 = v364;
    }
  }
  uint64_t v17 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v347 = v1;
    uint64_t v365 = a1;
    uint64_t v314 = v3;
    uint64_t v330 = v2;
    uint64_t v299 = v4;
    uint64_t v272 = v6;
    uint64_t v285 = v5;
    uint64_t v249 = v8;
    uint64_t v260 = v7;
    uint64_t v230 = v10;
    uint64_t v239 = v9;
    uint64_t v215 = v12;
    uint64_t v222 = v11;
    uint64_t v206 = v14;
    uint64_t v209 = v13;
    uint64_t v201 = v15;
    uint64_t v203 = v16;
    uint64_t v15 = v201;
    uint64_t v16 = v203;
    uint64_t v14 = v206;
    uint64_t v13 = v209;
    uint64_t v12 = v215;
    uint64_t v11 = v222;
    uint64_t v10 = v230;
    uint64_t v9 = v239;
    uint64_t v8 = v249;
    uint64_t v7 = v260;
    uint64_t v6 = v272;
    uint64_t v5 = v285;
    uint64_t v4 = v299;
    uint64_t v3 = v314;
    uint64_t v2 = v330;
    uint64_t v1 = v347;
    int v192 = v191;
    a1 = v365;
    if (v192)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v367 = 90;
      unint64_t v193 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v193) {
        unint64_t v194 = v193;
      }
      else {
        unint64_t v194 = v367;
      }
      uint64_t v195 = &v366[v194];
      unint64_t v196 = v367 - v194;
      if (v367 - v194 >= 0x12) {
        uint64_t v197 = 18;
      }
      else {
        uint64_t v197 = v367 - v194;
      }
      unint64_t v198 = v196 - v197;
      if (v198 >= v198 - 1) {
        uint64_t v199 = v198 - 1;
      }
      else {
        uint64_t v199 = v198;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v195[v197], v199);
      uint64_t v15 = v201;
      uint64_t v16 = v203;
      uint64_t v14 = v206;
      uint64_t v13 = v209;
      uint64_t v12 = v215;
      uint64_t v11 = v222;
      uint64_t v10 = v230;
      uint64_t v9 = v239;
      uint64_t v8 = v249;
      uint64_t v7 = v260;
      uint64_t v6 = v272;
      uint64_t v5 = v285;
      uint64_t v4 = v299;
      uint64_t v3 = v314;
      uint64_t v2 = v330;
      uint64_t v1 = v347;
      a1 = v365;
    }
  }
  return v1 == a1
      || v2 == a1
      || v3 == a1
      || v4 == a1
      || v5 == a1
      || v6 == a1
      || v7 == a1
      || v8 == a1
      || v9 == a1
      || v10 == a1
      || v11 == a1
      || v12 == a1
      || v13 == a1
      || v14 == a1
      || v15 == a1
      || v16 == a1
      || v17 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::DivFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.divsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::DivSIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3771F8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::DivSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivSIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::DivSIOp::getSpeculatability((mlir::arith::DivSIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferResultRanges;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::DivSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.divsi";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::DivSIOpGenericAdaptorBase::DivSIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::DivSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::DivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.divui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::DivUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3772C0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::DivUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::DivUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

mlir::Operation *mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::DivUIOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::DivUIOp::getSpeculatability((mlir::arith::DivUIOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferResultRanges;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::DivUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::DivUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::DivUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.divui";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::DivUIOpGenericAdaptorBase::DivUIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::DivUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::DivUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.extf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ExtFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376AF0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ExtFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtFOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtFOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::ExtFOpGenericAdaptorBase::ExtFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::ExtFOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtFOp>,mlir::OpTrait::OneResult<mlir::arith::ExtFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtFOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtFOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtFOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtFOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtFOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtFOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtFOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::arith::ExtFOp::verify((mlir::arith::ExtFOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtFOp>,mlir::OpTrait::OneResult<mlir::arith::ExtFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtFOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtFOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtFOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtFOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtFOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtFOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::arith::ExtFOp::verifyInvariantsImpl((mlir::arith::ExtFOp *)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::ExtFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.extsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377388;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ExtSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::ExtSIOp::inferResultRanges(&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::ExtSIOpGenericAdaptorBase::ExtSIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::ExtSIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v340 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v52 = v51;
    a1 = v340;
    if (v52)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v358 = 83;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v358;
      }
      unint64_t v55 = &v357[v54];
      unint64_t v56 = v358 - v54;
      if (v358 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v358 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v340;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v324 = v2;
    uint64_t v341 = a1;
    char v3 = (void *)&unk_267771000;
    int v61 = v60;
    uint64_t v2 = v324;
    a1 = v341;
    if (v61)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v358 = 81;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v358;
      }
      unint64_t v64 = &v357[v63];
      unint64_t v65 = v358 - v63;
      if (v358 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v358 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v324;
      a1 = v341;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v325 = v2;
    uint64_t v342 = a1;
    uint64_t v309 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v309;
    uint64_t v2 = v325;
    int v70 = v69;
    a1 = v342;
    if (v70)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v358 = 104;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v358;
      }
      unint64_t v73 = &v357[v72];
      unint64_t v74 = v358 - v72;
      if (v358 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v358 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v309;
      uint64_t v2 = v325;
      a1 = v342;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v326 = v2;
    uint64_t v343 = a1;
    uint64_t v295 = v6;
    uint64_t v310 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v295;
    uint64_t v4 = v310;
    int v79 = v78;
    uint64_t v2 = v326;
    a1 = v343;
    if (v79)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v358 = 86;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v358;
      }
      unint64_t v82 = &v357[v81];
      unint64_t v83 = v358 - v81;
      if (v358 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v358 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v295;
      uint64_t v4 = v310;
      uint64_t v2 = v326;
      a1 = v343;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v327 = v2;
    uint64_t v344 = a1;
    uint64_t v296 = v6;
    uint64_t v311 = v4;
    uint64_t v282 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v282;
    uint64_t v6 = v296;
    uint64_t v4 = v311;
    uint64_t v2 = v327;
    int v88 = v87;
    a1 = v344;
    if (v88)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v358 = 82;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v358;
      }
      unint64_t v91 = &v357[v90];
      unint64_t v92 = v358 - v90;
      if (v358 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v358 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v282;
      uint64_t v6 = v296;
      uint64_t v4 = v311;
      uint64_t v2 = v327;
      a1 = v344;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v328 = v2;
    uint64_t v345 = a1;
    uint64_t v297 = v6;
    uint64_t v312 = v4;
    uint64_t v270 = v10;
    uint64_t v283 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v270;
    uint64_t v8 = v283;
    uint64_t v6 = v297;
    uint64_t v4 = v312;
    int v97 = v96;
    uint64_t v2 = v328;
    a1 = v345;
    if (v97)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v358 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v358;
      }
      unint64_t v100 = &v357[v99];
      unint64_t v101 = v358 - v99;
      if (v358 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v358 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v270;
      uint64_t v8 = v283;
      uint64_t v6 = v297;
      uint64_t v4 = v312;
      uint64_t v2 = v328;
      a1 = v345;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v329 = v2;
    uint64_t v346 = a1;
    uint64_t v298 = v6;
    uint64_t v313 = v4;
    uint64_t v271 = v10;
    uint64_t v284 = v8;
    uint64_t v259 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v259;
    uint64_t v10 = v271;
    uint64_t v8 = v284;
    uint64_t v6 = v298;
    uint64_t v4 = v313;
    int v106 = v105;
    uint64_t v2 = v329;
    a1 = v346;
    if (v106)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v358 = 92;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v358;
      }
      unint64_t v109 = &v357[v108];
      unint64_t v110 = v358 - v108;
      if (v358 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v358 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v259;
      uint64_t v10 = v271;
      uint64_t v8 = v284;
      uint64_t v6 = v298;
      uint64_t v4 = v313;
      uint64_t v2 = v329;
      a1 = v346;
    }
  }
  uint64_t v14 = v13[344];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v330 = v2;
    uint64_t v347 = a1;
    uint64_t v299 = v6;
    uint64_t v314 = v4;
    uint64_t v272 = v10;
    uint64_t v285 = v8;
    uint64_t v249 = v14;
    uint64_t v260 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v249;
    uint64_t v12 = v260;
    uint64_t v10 = v272;
    uint64_t v8 = v285;
    uint64_t v6 = v299;
    uint64_t v4 = v314;
    int v115 = v114;
    uint64_t v2 = v330;
    a1 = v347;
    if (v115)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v358 = 95;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v358;
      }
      unint64_t v118 = &v357[v117];
      unint64_t v119 = v358 - v117;
      if (v358 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v358 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v249;
      uint64_t v12 = v260;
      uint64_t v10 = v272;
      uint64_t v8 = v285;
      uint64_t v6 = v299;
      uint64_t v4 = v314;
      uint64_t v2 = v330;
      a1 = v347;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v331 = v2;
    uint64_t v348 = a1;
    uint64_t v300 = v6;
    uint64_t v315 = v4;
    uint64_t v273 = v10;
    uint64_t v286 = v8;
    uint64_t v250 = v14;
    uint64_t v261 = v12;
    uint64_t v240 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v240;
    uint64_t v14 = v250;
    uint64_t v12 = v261;
    uint64_t v10 = v273;
    uint64_t v8 = v286;
    uint64_t v6 = v300;
    uint64_t v4 = v315;
    int v124 = v123;
    uint64_t v2 = v331;
    a1 = v348;
    if (v124)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v358 = 99;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v358;
      }
      unint64_t v127 = &v357[v126];
      unint64_t v128 = v358 - v126;
      if (v358 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v358 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v240;
      uint64_t v14 = v250;
      uint64_t v12 = v261;
      uint64_t v10 = v273;
      uint64_t v8 = v286;
      uint64_t v6 = v300;
      uint64_t v4 = v315;
      uint64_t v2 = v331;
      a1 = v348;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v332 = v2;
    uint64_t v349 = a1;
    uint64_t v301 = v6;
    uint64_t v316 = v4;
    uint64_t v274 = v10;
    uint64_t v287 = v8;
    uint64_t v251 = v14;
    uint64_t v262 = v12;
    uint64_t v232 = v18;
    uint64_t v241 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v232;
    uint64_t v16 = v241;
    uint64_t v14 = v251;
    uint64_t v12 = v262;
    uint64_t v10 = v274;
    uint64_t v8 = v287;
    uint64_t v6 = v301;
    uint64_t v4 = v316;
    int v133 = v132;
    uint64_t v2 = v332;
    a1 = v349;
    if (v133)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v358 = 93;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v358;
      }
      unint64_t v136 = &v357[v135];
      unint64_t v137 = v358 - v135;
      if (v358 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v358 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v232;
      uint64_t v16 = v241;
      uint64_t v14 = v251;
      uint64_t v12 = v262;
      uint64_t v10 = v274;
      uint64_t v8 = v287;
      uint64_t v6 = v301;
      uint64_t v4 = v316;
      uint64_t v2 = v332;
      a1 = v349;
    }
  }
  uint64_t v20 = v19[31];
  int v21 = &unk_267771000;
  {
    uint64_t v333 = v2;
    uint64_t v350 = a1;
    uint64_t v302 = v6;
    uint64_t v317 = v4;
    uint64_t v275 = v10;
    uint64_t v288 = v8;
    uint64_t v252 = v14;
    uint64_t v263 = v12;
    uint64_t v233 = v18;
    uint64_t v242 = v16;
    uint64_t v225 = v20;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v225;
    uint64_t v18 = v233;
    uint64_t v16 = v242;
    uint64_t v14 = v252;
    uint64_t v12 = v263;
    uint64_t v10 = v275;
    uint64_t v8 = v288;
    uint64_t v6 = v302;
    uint64_t v4 = v317;
    int v142 = v141;
    uint64_t v2 = v333;
    a1 = v350;
    if (v142)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      unint64_t v358 = 98;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v358;
      }
      unint64_t v145 = &v357[v144];
      unint64_t v146 = v358 - v144;
      if (v358 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v358 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v225;
      uint64_t v18 = v233;
      uint64_t v16 = v242;
      uint64_t v14 = v252;
      uint64_t v12 = v263;
      uint64_t v10 = v275;
      uint64_t v8 = v288;
      uint64_t v6 = v302;
      uint64_t v4 = v317;
      uint64_t v2 = v333;
      a1 = v350;
    }
  }
  uint64_t v22 = v21[65];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v334 = v2;
    uint64_t v351 = a1;
    uint64_t v303 = v6;
    uint64_t v318 = v4;
    uint64_t v276 = v10;
    uint64_t v289 = v8;
    uint64_t v253 = v14;
    uint64_t v264 = v12;
    uint64_t v234 = v18;
    uint64_t v243 = v16;
    uint64_t v219 = v22;
    uint64_t v226 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v219;
    uint64_t v20 = v226;
    uint64_t v18 = v234;
    uint64_t v16 = v243;
    uint64_t v14 = v253;
    uint64_t v12 = v264;
    uint64_t v10 = v276;
    uint64_t v8 = v289;
    uint64_t v6 = v303;
    uint64_t v4 = v318;
    int v151 = v150;
    uint64_t v2 = v334;
    a1 = v351;
    if (v151)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v358 = 85;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v358;
      }
      unint64_t v154 = &v357[v153];
      unint64_t v155 = v358 - v153;
      if (v358 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v358 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v219;
      uint64_t v20 = v226;
      uint64_t v18 = v234;
      uint64_t v16 = v243;
      uint64_t v14 = v253;
      uint64_t v12 = v264;
      uint64_t v10 = v276;
      uint64_t v8 = v289;
      uint64_t v6 = v303;
      uint64_t v4 = v318;
      uint64_t v2 = v334;
      a1 = v351;
    }
  }
  uint64_t v24 = v23[356];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v335 = v2;
    uint64_t v352 = a1;
    uint64_t v304 = v6;
    uint64_t v319 = v4;
    uint64_t v277 = v10;
    uint64_t v290 = v8;
    uint64_t v254 = v14;
    uint64_t v265 = v12;
    uint64_t v235 = v18;
    uint64_t v244 = v16;
    uint64_t v220 = v22;
    uint64_t v227 = v20;
    uint64_t v214 = v24;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v214;
    uint64_t v22 = v220;
    uint64_t v20 = v227;
    uint64_t v18 = v235;
    uint64_t v16 = v244;
    uint64_t v14 = v254;
    uint64_t v12 = v265;
    uint64_t v10 = v277;
    uint64_t v8 = v290;
    uint64_t v6 = v304;
    uint64_t v4 = v319;
    int v160 = v159;
    uint64_t v2 = v335;
    a1 = v352;
    if (v160)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v358 = 93;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v358;
      }
      int v163 = &v357[v162];
      unint64_t v164 = v358 - v162;
      if (v358 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v358 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v214;
      uint64_t v22 = v220;
      uint64_t v20 = v227;
      uint64_t v18 = v235;
      uint64_t v16 = v244;
      uint64_t v14 = v254;
      uint64_t v12 = v265;
      uint64_t v10 = v277;
      uint64_t v8 = v290;
      uint64_t v6 = v304;
      uint64_t v4 = v319;
      uint64_t v2 = v335;
      a1 = v352;
    }
  }
  uint64_t v26 = v25[330];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v336 = v2;
    uint64_t v353 = a1;
    uint64_t v305 = v6;
    uint64_t v320 = v4;
    uint64_t v278 = v10;
    uint64_t v291 = v8;
    uint64_t v255 = v14;
    uint64_t v266 = v12;
    uint64_t v236 = v18;
    uint64_t v245 = v16;
    uint64_t v221 = v22;
    uint64_t v228 = v20;
    uint64_t v210 = v26;
    uint64_t v215 = v24;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v210;
    uint64_t v24 = v215;
    uint64_t v22 = v221;
    uint64_t v20 = v228;
    uint64_t v18 = v236;
    uint64_t v16 = v245;
    uint64_t v14 = v255;
    uint64_t v12 = v266;
    uint64_t v10 = v278;
    uint64_t v8 = v291;
    uint64_t v6 = v305;
    uint64_t v4 = v320;
    int v169 = v168;
    uint64_t v2 = v336;
    a1 = v353;
    if (v169)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v358 = 83;
      unint64_t v170 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v170) {
        unint64_t v171 = v170;
      }
      else {
        unint64_t v171 = v358;
      }
      int v172 = &v357[v171];
      unint64_t v173 = v358 - v171;
      if (v358 - v171 >= 0x12) {
        uint64_t v174 = 18;
      }
      else {
        uint64_t v174 = v358 - v171;
      }
      unint64_t v175 = v173 - v174;
      if (v175 >= v175 - 1) {
        uint64_t v176 = v175 - 1;
      }
      else {
        uint64_t v176 = v175;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v210;
      uint64_t v24 = v215;
      uint64_t v22 = v221;
      uint64_t v20 = v228;
      uint64_t v18 = v236;
      uint64_t v16 = v245;
      uint64_t v14 = v255;
      uint64_t v12 = v266;
      uint64_t v10 = v278;
      uint64_t v8 = v291;
      uint64_t v6 = v305;
      uint64_t v4 = v320;
      uint64_t v2 = v336;
      a1 = v353;
    }
  }
  uint64_t v28 = v27[332];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v337 = v2;
    uint64_t v354 = a1;
    uint64_t v306 = v6;
    uint64_t v321 = v4;
    uint64_t v279 = v10;
    uint64_t v292 = v8;
    uint64_t v256 = v14;
    uint64_t v267 = v12;
    uint64_t v237 = v18;
    uint64_t v246 = v16;
    uint64_t v222 = v22;
    uint64_t v229 = v20;
    uint64_t v211 = v26;
    uint64_t v216 = v24;
    uint64_t v207 = v28;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v207;
    uint64_t v26 = v211;
    uint64_t v24 = v216;
    uint64_t v22 = v222;
    uint64_t v20 = v229;
    uint64_t v18 = v237;
    uint64_t v16 = v246;
    uint64_t v14 = v256;
    uint64_t v12 = v267;
    uint64_t v10 = v279;
    uint64_t v8 = v292;
    uint64_t v6 = v306;
    uint64_t v4 = v321;
    int v178 = v177;
    uint64_t v2 = v337;
    a1 = v354;
    if (v178)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v179 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v179) {
        unint64_t v180 = v179;
      }
      else {
        unint64_t v180 = v358;
      }
      uint64_t v181 = &v357[v180];
      unint64_t v182 = v358 - v180;
      if (v358 - v180 >= 0x12) {
        uint64_t v183 = 18;
      }
      else {
        uint64_t v183 = v358 - v180;
      }
      unint64_t v184 = v182 - v183;
      if (v184 >= v184 - 1) {
        uint64_t v185 = v184 - 1;
      }
      else {
        uint64_t v185 = v184;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v207;
      uint64_t v26 = v211;
      uint64_t v24 = v216;
      uint64_t v22 = v222;
      uint64_t v20 = v229;
      uint64_t v18 = v237;
      uint64_t v16 = v246;
      uint64_t v14 = v256;
      uint64_t v12 = v267;
      uint64_t v10 = v279;
      uint64_t v8 = v292;
      uint64_t v6 = v306;
      uint64_t v4 = v321;
      uint64_t v2 = v337;
      a1 = v354;
    }
  }
  uint64_t v30 = v29[334];
  long long v31 = &unk_267771000;
  {
    uint64_t v338 = v2;
    uint64_t v355 = a1;
    uint64_t v307 = v6;
    uint64_t v322 = v4;
    uint64_t v280 = v10;
    uint64_t v293 = v8;
    uint64_t v257 = v14;
    uint64_t v268 = v12;
    uint64_t v238 = v18;
    uint64_t v247 = v16;
    uint64_t v223 = v22;
    uint64_t v230 = v20;
    uint64_t v212 = v26;
    uint64_t v217 = v24;
    uint64_t v205 = v30;
    uint64_t v208 = v28;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v205;
    uint64_t v28 = v208;
    uint64_t v26 = v212;
    uint64_t v24 = v217;
    uint64_t v22 = v223;
    uint64_t v20 = v230;
    uint64_t v18 = v238;
    uint64_t v16 = v247;
    uint64_t v14 = v257;
    uint64_t v12 = v268;
    uint64_t v10 = v280;
    uint64_t v8 = v293;
    uint64_t v6 = v307;
    uint64_t v4 = v322;
    int v187 = v186;
    uint64_t v2 = v338;
    a1 = v355;
    if (v187)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v188 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v188) {
        unint64_t v189 = v188;
      }
      else {
        unint64_t v189 = v358;
      }
      uint64_t v190 = &v357[v189];
      unint64_t v191 = v358 - v189;
      if (v358 - v189 >= 0x12) {
        uint64_t v192 = 18;
      }
      else {
        uint64_t v192 = v358 - v189;
      }
      unint64_t v193 = v191 - v192;
      if (v193 >= v193 - 1) {
        uint64_t v194 = v193 - 1;
      }
      else {
        uint64_t v194 = v193;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v205;
      uint64_t v28 = v208;
      uint64_t v26 = v212;
      uint64_t v24 = v217;
      uint64_t v22 = v223;
      uint64_t v20 = v230;
      uint64_t v18 = v238;
      uint64_t v16 = v247;
      uint64_t v14 = v257;
      uint64_t v12 = v268;
      uint64_t v10 = v280;
      uint64_t v8 = v293;
      uint64_t v6 = v307;
      uint64_t v4 = v322;
      uint64_t v2 = v338;
      a1 = v355;
    }
  }
  uint64_t v32 = v31[336];
  char v33 = &unk_267771000;
  {
    uint64_t v339 = v2;
    uint64_t v356 = a1;
    uint64_t v308 = v6;
    uint64_t v323 = v4;
    uint64_t v281 = v10;
    uint64_t v294 = v8;
    uint64_t v258 = v14;
    uint64_t v269 = v12;
    uint64_t v239 = v18;
    uint64_t v248 = v16;
    uint64_t v224 = v22;
    uint64_t v231 = v20;
    uint64_t v213 = v26;
    uint64_t v218 = v24;
    uint64_t v206 = v30;
    uint64_t v209 = v28;
    uint64_t v204 = v32;
    uint64_t v32 = v204;
    uint64_t v30 = v206;
    uint64_t v28 = v209;
    uint64_t v26 = v213;
    uint64_t v24 = v218;
    uint64_t v22 = v224;
    uint64_t v20 = v231;
    uint64_t v18 = v239;
    uint64_t v16 = v248;
    uint64_t v14 = v258;
    uint64_t v12 = v269;
    uint64_t v10 = v281;
    uint64_t v8 = v294;
    uint64_t v6 = v308;
    uint64_t v4 = v323;
    int v196 = v195;
    uint64_t v2 = v339;
    a1 = v356;
    if (v196)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v197 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v197) {
        unint64_t v198 = v197;
      }
      else {
        unint64_t v198 = v358;
      }
      uint64_t v199 = &v357[v198];
      unint64_t v200 = v358 - v198;
      if (v358 - v198 >= 0x12) {
        uint64_t v201 = 18;
      }
      else {
        uint64_t v201 = v358 - v198;
      }
      unint64_t v202 = v200 - v201;
      if (v202 >= v202 - 1) {
        uint64_t v203 = v202 - 1;
      }
      else {
        uint64_t v203 = v202;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v199[v201], v203);
      char v33 = (void *)&unk_267771000;
      uint64_t v32 = v204;
      uint64_t v30 = v206;
      uint64_t v28 = v209;
      uint64_t v26 = v213;
      uint64_t v24 = v218;
      uint64_t v22 = v224;
      uint64_t v20 = v231;
      uint64_t v18 = v239;
      uint64_t v16 = v248;
      uint64_t v14 = v258;
      uint64_t v12 = v269;
      uint64_t v10 = v281;
      uint64_t v8 = v294;
      uint64_t v6 = v308;
      uint64_t v4 = v323;
      uint64_t v2 = v339;
      a1 = v356;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v33[338] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::arith::ExtUIOp::verify((mlir::arith::ExtUIOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::arith::ExtSIOp::verifyInvariantsImpl((mlir::arith::ExtSIOp *)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::ExtSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.extui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377450;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ExtUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ExtUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::ExtUIOp::inferResultRanges(&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ExtUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ExtUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::ExtUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::ExtUIOpGenericAdaptorBase::ExtUIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::ExtUIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::arith::ExtUIOp::verify((mlir::arith::ExtUIOp *)&v4) != 0;
}

uint64_t mlir::Op<mlir::arith::ExtUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.fptosi", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FPToSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377B58;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::FPToSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::FPToSIOpGenericAdaptorBase::FPToSIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::FPToSIOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::FPToSIOp>,mlir::OpTrait::OneResult<mlir::arith::FPToSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::FPToSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::FPToSIOp>,mlir::OpTrait::OneOperand<mlir::arith::FPToSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::FPToSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::FPToSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::FPToSIOp>,mlir::CastOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::Elementwise<mlir::arith::FPToSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::FPToSIOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::FPToSIOp>,mlir::OpTrait::OneResult<mlir::arith::FPToSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::FPToSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::FPToSIOp>,mlir::OpTrait::OneOperand<mlir::arith::FPToSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::FPToSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::FPToSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::FPToSIOp>,mlir::CastOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::Elementwise<mlir::arith::FPToSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::FPToSIOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::arith::FPToSIOp::verifyInvariantsImpl((mlir::arith::FPToSIOp *)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::FPToSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.fptoui", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FPToUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377C20;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::FPToUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FPToUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FPToUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FPToUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::FPToUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::FPToUIOpGenericAdaptorBase::FPToUIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::FPToUIOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::FPToSIOp>,mlir::OpTrait::OneResult<mlir::arith::FPToSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::FPToSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::FPToSIOp>,mlir::OpTrait::OneOperand<mlir::arith::FPToSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::FPToSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::FPToSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::FPToSIOp>,mlir::CastOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::FPToSIOp>,mlir::OpTrait::Elementwise<mlir::arith::FPToSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::FPToSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::FPToSIOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::arith::FPToUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.floordivsi", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FloorDivSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376190;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::FloorDivSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::FloorDivSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::FloorDivSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::FloorDivSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::FloorDivSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::FloorDivSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.floordivsi";
  v16[1] = 16;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::FloorDivSIOpGenericAdaptorBase::FloorDivSIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::FloorDivSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v340 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v52 = v51;
    a1 = v340;
    if (v52)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v358 = 83;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v358;
      }
      unint64_t v55 = &v357[v54];
      unint64_t v56 = v358 - v54;
      if (v358 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v358 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v340;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v324 = v2;
    uint64_t v341 = a1;
    char v3 = (void *)&unk_267771000;
    int v61 = v60;
    uint64_t v2 = v324;
    a1 = v341;
    if (v61)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v358 = 81;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v358;
      }
      unint64_t v64 = &v357[v63];
      unint64_t v65 = v358 - v63;
      if (v358 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v358 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v324;
      a1 = v341;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v325 = v2;
    uint64_t v342 = a1;
    uint64_t v309 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v309;
    uint64_t v2 = v325;
    int v70 = v69;
    a1 = v342;
    if (v70)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v358 = 104;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v358;
      }
      unint64_t v73 = &v357[v72];
      unint64_t v74 = v358 - v72;
      if (v358 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v358 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v309;
      uint64_t v2 = v325;
      a1 = v342;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v326 = v2;
    uint64_t v343 = a1;
    uint64_t v295 = v6;
    uint64_t v310 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v295;
    uint64_t v4 = v310;
    int v79 = v78;
    uint64_t v2 = v326;
    a1 = v343;
    if (v79)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v358 = 86;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v358;
      }
      unint64_t v82 = &v357[v81];
      unint64_t v83 = v358 - v81;
      if (v358 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v358 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v295;
      uint64_t v4 = v310;
      uint64_t v2 = v326;
      a1 = v343;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v327 = v2;
    uint64_t v344 = a1;
    uint64_t v296 = v6;
    uint64_t v311 = v4;
    uint64_t v282 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v282;
    uint64_t v6 = v296;
    uint64_t v4 = v311;
    uint64_t v2 = v327;
    int v88 = v87;
    a1 = v344;
    if (v88)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v358 = 90;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v358;
      }
      unint64_t v91 = &v357[v90];
      unint64_t v92 = v358 - v90;
      if (v358 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v358 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v282;
      uint64_t v6 = v296;
      uint64_t v4 = v311;
      uint64_t v2 = v327;
      a1 = v344;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v328 = v2;
    uint64_t v345 = a1;
    uint64_t v297 = v6;
    uint64_t v312 = v4;
    uint64_t v270 = v10;
    uint64_t v283 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v270;
    uint64_t v8 = v283;
    uint64_t v6 = v297;
    uint64_t v4 = v312;
    int v97 = v96;
    uint64_t v2 = v328;
    a1 = v345;
    if (v97)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v358 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v358;
      }
      unint64_t v100 = &v357[v99];
      unint64_t v101 = v358 - v99;
      if (v358 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v358 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v270;
      uint64_t v8 = v283;
      uint64_t v6 = v297;
      uint64_t v4 = v312;
      uint64_t v2 = v328;
      a1 = v345;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v329 = v2;
    uint64_t v346 = a1;
    uint64_t v298 = v6;
    uint64_t v313 = v4;
    uint64_t v271 = v10;
    uint64_t v284 = v8;
    uint64_t v259 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v259;
    uint64_t v10 = v271;
    uint64_t v8 = v284;
    uint64_t v6 = v298;
    uint64_t v4 = v313;
    int v106 = v105;
    uint64_t v2 = v329;
    a1 = v346;
    if (v106)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v358 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v358;
      }
      unint64_t v109 = &v357[v108];
      unint64_t v110 = v358 - v108;
      if (v358 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v358 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v259;
      uint64_t v10 = v271;
      uint64_t v8 = v284;
      uint64_t v6 = v298;
      uint64_t v4 = v313;
      uint64_t v2 = v329;
      a1 = v346;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v330 = v2;
    uint64_t v347 = a1;
    uint64_t v299 = v6;
    uint64_t v314 = v4;
    uint64_t v272 = v10;
    uint64_t v285 = v8;
    uint64_t v249 = v14;
    uint64_t v260 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v249;
    uint64_t v12 = v260;
    uint64_t v10 = v272;
    uint64_t v8 = v285;
    uint64_t v6 = v299;
    uint64_t v4 = v314;
    int v115 = v114;
    uint64_t v2 = v330;
    a1 = v347;
    if (v115)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v358 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v358;
      }
      unint64_t v118 = &v357[v117];
      unint64_t v119 = v358 - v117;
      if (v358 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v358 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v249;
      uint64_t v12 = v260;
      uint64_t v10 = v272;
      uint64_t v8 = v285;
      uint64_t v6 = v299;
      uint64_t v4 = v314;
      uint64_t v2 = v330;
      a1 = v347;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v331 = v2;
    uint64_t v348 = a1;
    uint64_t v300 = v6;
    uint64_t v315 = v4;
    uint64_t v273 = v10;
    uint64_t v286 = v8;
    uint64_t v250 = v14;
    uint64_t v261 = v12;
    uint64_t v240 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v240;
    uint64_t v14 = v250;
    uint64_t v12 = v261;
    uint64_t v10 = v273;
    uint64_t v8 = v286;
    uint64_t v6 = v300;
    uint64_t v4 = v315;
    int v124 = v123;
    uint64_t v2 = v331;
    a1 = v348;
    if (v124)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v358 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v358;
      }
      unint64_t v127 = &v357[v126];
      unint64_t v128 = v358 - v126;
      if (v358 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v358 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v240;
      uint64_t v14 = v250;
      uint64_t v12 = v261;
      uint64_t v10 = v273;
      uint64_t v8 = v286;
      uint64_t v6 = v300;
      uint64_t v4 = v315;
      uint64_t v2 = v331;
      a1 = v348;
    }
  }
  uint64_t v18 = v17[31];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v332 = v2;
    uint64_t v349 = a1;
    uint64_t v301 = v6;
    uint64_t v316 = v4;
    uint64_t v274 = v10;
    uint64_t v287 = v8;
    uint64_t v251 = v14;
    uint64_t v262 = v12;
    uint64_t v232 = v18;
    uint64_t v241 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v232;
    uint64_t v16 = v241;
    uint64_t v14 = v251;
    uint64_t v12 = v262;
    uint64_t v10 = v274;
    uint64_t v8 = v287;
    uint64_t v6 = v301;
    uint64_t v4 = v316;
    int v133 = v132;
    uint64_t v2 = v332;
    a1 = v349;
    if (v133)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v358 = 92;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v358;
      }
      unint64_t v136 = &v357[v135];
      unint64_t v137 = v358 - v135;
      if (v358 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v358 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v232;
      uint64_t v16 = v241;
      uint64_t v14 = v251;
      uint64_t v12 = v262;
      uint64_t v10 = v274;
      uint64_t v8 = v287;
      uint64_t v6 = v301;
      uint64_t v4 = v316;
      uint64_t v2 = v332;
      a1 = v349;
    }
  }
  uint64_t v20 = v19[344];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v333 = v2;
    uint64_t v350 = a1;
    uint64_t v302 = v6;
    uint64_t v317 = v4;
    uint64_t v275 = v10;
    uint64_t v288 = v8;
    uint64_t v252 = v14;
    uint64_t v263 = v12;
    uint64_t v233 = v18;
    uint64_t v242 = v16;
    uint64_t v225 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v225;
    uint64_t v18 = v233;
    uint64_t v16 = v242;
    uint64_t v14 = v252;
    uint64_t v12 = v263;
    uint64_t v10 = v275;
    uint64_t v8 = v288;
    uint64_t v6 = v302;
    uint64_t v4 = v317;
    int v142 = v141;
    uint64_t v2 = v333;
    a1 = v350;
    if (v142)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v358 = 97;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v358;
      }
      unint64_t v145 = &v357[v144];
      unint64_t v146 = v358 - v144;
      if (v358 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v358 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v225;
      uint64_t v18 = v233;
      uint64_t v16 = v242;
      uint64_t v14 = v252;
      uint64_t v12 = v263;
      uint64_t v10 = v275;
      uint64_t v8 = v288;
      uint64_t v6 = v302;
      uint64_t v4 = v317;
      uint64_t v2 = v333;
      a1 = v350;
    }
  }
  uint64_t v22 = v21[328];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v334 = v2;
    uint64_t v351 = a1;
    uint64_t v303 = v6;
    uint64_t v318 = v4;
    uint64_t v276 = v10;
    uint64_t v289 = v8;
    uint64_t v253 = v14;
    uint64_t v264 = v12;
    uint64_t v234 = v18;
    uint64_t v243 = v16;
    uint64_t v219 = v22;
    uint64_t v226 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v219;
    uint64_t v20 = v226;
    uint64_t v18 = v234;
    uint64_t v16 = v243;
    uint64_t v14 = v253;
    uint64_t v12 = v264;
    uint64_t v10 = v276;
    uint64_t v8 = v289;
    uint64_t v6 = v303;
    uint64_t v4 = v318;
    int v151 = v150;
    uint64_t v2 = v334;
    a1 = v351;
    if (v151)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v358 = 93;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v358;
      }
      unint64_t v154 = &v357[v153];
      unint64_t v155 = v358 - v153;
      if (v358 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v358 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v219;
      uint64_t v20 = v226;
      uint64_t v18 = v234;
      uint64_t v16 = v243;
      uint64_t v14 = v253;
      uint64_t v12 = v264;
      uint64_t v10 = v276;
      uint64_t v8 = v289;
      uint64_t v6 = v303;
      uint64_t v4 = v318;
      uint64_t v2 = v334;
      a1 = v351;
    }
  }
  uint64_t v24 = v23[330];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v335 = v2;
    uint64_t v352 = a1;
    uint64_t v304 = v6;
    uint64_t v319 = v4;
    uint64_t v277 = v10;
    uint64_t v290 = v8;
    uint64_t v254 = v14;
    uint64_t v265 = v12;
    uint64_t v235 = v18;
    uint64_t v244 = v16;
    uint64_t v220 = v22;
    uint64_t v227 = v20;
    uint64_t v214 = v24;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v214;
    uint64_t v22 = v220;
    uint64_t v20 = v227;
    uint64_t v18 = v235;
    uint64_t v16 = v244;
    uint64_t v14 = v254;
    uint64_t v12 = v265;
    uint64_t v10 = v277;
    uint64_t v8 = v290;
    uint64_t v6 = v304;
    uint64_t v4 = v319;
    int v160 = v159;
    uint64_t v2 = v335;
    a1 = v352;
    if (v160)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v358 = 83;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v358;
      }
      int v163 = &v357[v162];
      unint64_t v164 = v358 - v162;
      if (v358 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v358 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v214;
      uint64_t v22 = v220;
      uint64_t v20 = v227;
      uint64_t v18 = v235;
      uint64_t v16 = v244;
      uint64_t v14 = v254;
      uint64_t v12 = v265;
      uint64_t v10 = v277;
      uint64_t v8 = v290;
      uint64_t v6 = v304;
      uint64_t v4 = v319;
      uint64_t v2 = v335;
      a1 = v352;
    }
  }
  uint64_t v26 = v25[332];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v336 = v2;
    uint64_t v353 = a1;
    uint64_t v305 = v6;
    uint64_t v320 = v4;
    uint64_t v278 = v10;
    uint64_t v291 = v8;
    uint64_t v255 = v14;
    uint64_t v266 = v12;
    uint64_t v236 = v18;
    uint64_t v245 = v16;
    uint64_t v221 = v22;
    uint64_t v228 = v20;
    uint64_t v210 = v26;
    uint64_t v215 = v24;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v210;
    uint64_t v24 = v215;
    uint64_t v22 = v221;
    uint64_t v20 = v228;
    uint64_t v18 = v236;
    uint64_t v16 = v245;
    uint64_t v14 = v255;
    uint64_t v12 = v266;
    uint64_t v10 = v278;
    uint64_t v8 = v291;
    uint64_t v6 = v305;
    uint64_t v4 = v320;
    int v169 = v168;
    uint64_t v2 = v336;
    a1 = v353;
    if (v169)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v170 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v170) {
        unint64_t v171 = v170;
      }
      else {
        unint64_t v171 = v358;
      }
      int v172 = &v357[v171];
      unint64_t v173 = v358 - v171;
      if (v358 - v171 >= 0x12) {
        uint64_t v174 = 18;
      }
      else {
        uint64_t v174 = v358 - v171;
      }
      unint64_t v175 = v173 - v174;
      if (v175 >= v175 - 1) {
        uint64_t v176 = v175 - 1;
      }
      else {
        uint64_t v176 = v175;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v210;
      uint64_t v24 = v215;
      uint64_t v22 = v221;
      uint64_t v20 = v228;
      uint64_t v18 = v236;
      uint64_t v16 = v245;
      uint64_t v14 = v255;
      uint64_t v12 = v266;
      uint64_t v10 = v278;
      uint64_t v8 = v291;
      uint64_t v6 = v305;
      uint64_t v4 = v320;
      uint64_t v2 = v336;
      a1 = v353;
    }
  }
  uint64_t v28 = v27[334];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v337 = v2;
    uint64_t v354 = a1;
    uint64_t v306 = v6;
    uint64_t v321 = v4;
    uint64_t v279 = v10;
    uint64_t v292 = v8;
    uint64_t v256 = v14;
    uint64_t v267 = v12;
    uint64_t v237 = v18;
    uint64_t v246 = v16;
    uint64_t v222 = v22;
    uint64_t v229 = v20;
    uint64_t v211 = v26;
    uint64_t v216 = v24;
    uint64_t v207 = v28;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v207;
    uint64_t v26 = v211;
    uint64_t v24 = v216;
    uint64_t v22 = v222;
    uint64_t v20 = v229;
    uint64_t v18 = v237;
    uint64_t v16 = v246;
    uint64_t v14 = v256;
    uint64_t v12 = v267;
    uint64_t v10 = v279;
    uint64_t v8 = v292;
    uint64_t v6 = v306;
    uint64_t v4 = v321;
    int v178 = v177;
    uint64_t v2 = v337;
    a1 = v354;
    if (v178)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v179 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v179) {
        unint64_t v180 = v179;
      }
      else {
        unint64_t v180 = v358;
      }
      uint64_t v181 = &v357[v180];
      unint64_t v182 = v358 - v180;
      if (v358 - v180 >= 0x12) {
        uint64_t v183 = 18;
      }
      else {
        uint64_t v183 = v358 - v180;
      }
      unint64_t v184 = v182 - v183;
      if (v184 >= v184 - 1) {
        uint64_t v185 = v184 - 1;
      }
      else {
        uint64_t v185 = v184;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v207;
      uint64_t v26 = v211;
      uint64_t v24 = v216;
      uint64_t v22 = v222;
      uint64_t v20 = v229;
      uint64_t v18 = v237;
      uint64_t v16 = v246;
      uint64_t v14 = v256;
      uint64_t v12 = v267;
      uint64_t v10 = v279;
      uint64_t v8 = v292;
      uint64_t v6 = v306;
      uint64_t v4 = v321;
      uint64_t v2 = v337;
      a1 = v354;
    }
  }
  uint64_t v30 = v29[336];
  long long v31 = &unk_267771000;
  {
    uint64_t v338 = v2;
    uint64_t v355 = a1;
    uint64_t v307 = v6;
    uint64_t v322 = v4;
    uint64_t v280 = v10;
    uint64_t v293 = v8;
    uint64_t v257 = v14;
    uint64_t v268 = v12;
    uint64_t v238 = v18;
    uint64_t v247 = v16;
    uint64_t v223 = v22;
    uint64_t v230 = v20;
    uint64_t v212 = v26;
    uint64_t v217 = v24;
    uint64_t v205 = v30;
    uint64_t v208 = v28;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v205;
    uint64_t v28 = v208;
    uint64_t v26 = v212;
    uint64_t v24 = v217;
    uint64_t v22 = v223;
    uint64_t v20 = v230;
    uint64_t v18 = v238;
    uint64_t v16 = v247;
    uint64_t v14 = v257;
    uint64_t v12 = v268;
    uint64_t v10 = v280;
    uint64_t v8 = v293;
    uint64_t v6 = v307;
    uint64_t v4 = v322;
    int v187 = v186;
    uint64_t v2 = v338;
    a1 = v355;
    if (v187)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v358 = 84;
      unint64_t v188 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v188) {
        unint64_t v189 = v188;
      }
      else {
        unint64_t v189 = v358;
      }
      uint64_t v190 = &v357[v189];
      unint64_t v191 = v358 - v189;
      if (v358 - v189 >= 0x12) {
        uint64_t v192 = 18;
      }
      else {
        uint64_t v192 = v358 - v189;
      }
      unint64_t v193 = v191 - v192;
      if (v193 >= v193 - 1) {
        uint64_t v194 = v193 - 1;
      }
      else {
        uint64_t v194 = v193;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v205;
      uint64_t v28 = v208;
      uint64_t v26 = v212;
      uint64_t v24 = v217;
      uint64_t v22 = v223;
      uint64_t v20 = v230;
      uint64_t v18 = v238;
      uint64_t v16 = v247;
      uint64_t v14 = v257;
      uint64_t v12 = v268;
      uint64_t v10 = v280;
      uint64_t v8 = v293;
      uint64_t v6 = v307;
      uint64_t v4 = v322;
      uint64_t v2 = v338;
      a1 = v355;
    }
  }
  uint64_t v32 = v31[338];
  char v33 = &unk_267771000;
  {
    uint64_t v339 = v2;
    uint64_t v356 = a1;
    uint64_t v308 = v6;
    uint64_t v323 = v4;
    uint64_t v281 = v10;
    uint64_t v294 = v8;
    uint64_t v258 = v14;
    uint64_t v269 = v12;
    uint64_t v239 = v18;
    uint64_t v248 = v16;
    uint64_t v224 = v22;
    uint64_t v231 = v20;
    uint64_t v213 = v26;
    uint64_t v218 = v24;
    uint64_t v206 = v30;
    uint64_t v209 = v28;
    uint64_t v204 = v32;
    uint64_t v32 = v204;
    uint64_t v30 = v206;
    uint64_t v28 = v209;
    uint64_t v26 = v213;
    uint64_t v24 = v218;
    uint64_t v22 = v224;
    uint64_t v20 = v231;
    uint64_t v18 = v239;
    uint64_t v16 = v248;
    uint64_t v14 = v258;
    uint64_t v12 = v269;
    uint64_t v10 = v281;
    uint64_t v8 = v294;
    uint64_t v6 = v308;
    uint64_t v4 = v323;
    int v196 = v195;
    uint64_t v2 = v339;
    a1 = v356;
    if (v196)
    {
      uint64_t v357 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v358 = 90;
      unint64_t v197 = llvm::StringRef::find((uint64_t *)&v357, "DesiredTypeName = ", 0x12uLL, 0);
      if (v358 >= v197) {
        unint64_t v198 = v197;
      }
      else {
        unint64_t v198 = v358;
      }
      uint64_t v199 = &v357[v198];
      unint64_t v200 = v358 - v198;
      if (v358 - v198 >= 0x12) {
        uint64_t v201 = 18;
      }
      else {
        uint64_t v201 = v358 - v198;
      }
      unint64_t v202 = v200 - v201;
      if (v202 >= v202 - 1) {
        uint64_t v203 = v202 - 1;
      }
      else {
        uint64_t v203 = v202;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v199[v201], v203);
      char v33 = (void *)&unk_267771000;
      uint64_t v32 = v204;
      uint64_t v30 = v206;
      uint64_t v28 = v209;
      uint64_t v26 = v213;
      uint64_t v24 = v218;
      uint64_t v22 = v224;
      uint64_t v20 = v231;
      uint64_t v18 = v239;
      uint64_t v16 = v248;
      uint64_t v14 = v258;
      uint64_t v12 = v269;
      uint64_t v10 = v281;
      uint64_t v8 = v294;
      uint64_t v6 = v308;
      uint64_t v4 = v323;
      uint64_t v2 = v339;
      a1 = v356;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v32 == a1
      || v33[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::FloorDivSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.index_cast", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3760C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::IndexCastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::IndexCastOp::inferResultRanges((uint64_t)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::IndexCastOpGenericAdaptorBase::IndexCastOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::IndexCastOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::IndexCastOp>,mlir::OpTrait::OneResult<mlir::arith::IndexCastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::IndexCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::IndexCastOp>,mlir::OpTrait::OneOperand<mlir::arith::IndexCastOp>,mlir::OpTrait::OpInvariants<mlir::arith::IndexCastOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::IndexCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::IndexCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::IndexCastOp>,mlir::CastOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::Elementwise<mlir::arith::IndexCastOp>,mlir::OpTrait::Scalarizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Vectorizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Tensorizable<mlir::arith::IndexCastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::IndexCastOp>,mlir::OpTrait::OneResult<mlir::arith::IndexCastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::IndexCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::IndexCastOp>,mlir::OpTrait::OneOperand<mlir::arith::IndexCastOp>,mlir::OpTrait::OpInvariants<mlir::arith::IndexCastOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::IndexCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::IndexCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::IndexCastOp>,mlir::CastOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::Elementwise<mlir::arith::IndexCastOp>,mlir::OpTrait::Scalarizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Vectorizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Tensorizable<mlir::arith::IndexCastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::arith::IndexCastOp::verifyInvariantsImpl((mlir::arith::IndexCastOp *)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::IndexCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.index_castui", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376258;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::IndexCastUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::IndexCastUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::IndexCastUIOp::inferResultRanges((uint64_t)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::IndexCastUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::IndexCastUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::IndexCastUIOpGenericAdaptorBase::IndexCastUIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::IndexCastUIOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::IndexCastOp>,mlir::OpTrait::OneResult<mlir::arith::IndexCastOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::IndexCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::IndexCastOp>,mlir::OpTrait::OneOperand<mlir::arith::IndexCastOp>,mlir::OpTrait::OpInvariants<mlir::arith::IndexCastOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::IndexCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::IndexCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::IndexCastOp>,mlir::CastOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::IndexCastOp>,mlir::OpTrait::Elementwise<mlir::arith::IndexCastOp>,mlir::OpTrait::Scalarizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Vectorizable<mlir::arith::IndexCastOp>,mlir::OpTrait::Tensorizable<mlir::arith::IndexCastOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::arith::IndexCastUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maxnumf", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaxNumFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C378198;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v8 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MaxNumFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxNumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxNumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxNumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.maxnumf";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxNumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxNumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  mlir::arith::detail::MaxNumFOpGenericAdaptorBase::MaxNumFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MaximumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaxNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maxsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaxSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377518;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MaxSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::MaxSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.maxsi";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::MaxSIOpGenericAdaptorBase::MaxSIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MaxSIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaxSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maxui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaxUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3775E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MaxUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaxUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaxUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::MaxUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaxUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaxUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.maxui";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaxUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::MaxUIOpGenericAdaptorBase::MaxUIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MaxUIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaxUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.maximumf", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MaximumFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C375DA8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MaximumFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MaximumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MaximumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaximumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MaximumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MaximumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.maximumf";
  v16[1] = 14;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaximumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MaximumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  mlir::arith::detail::MaximumFOpGenericAdaptorBase::MaximumFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MaximumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MaximumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minnumf", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinNumFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C378260;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MinNumFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinNumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinNumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinNumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinNumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinNumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.minnumf";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinNumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinNumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  mlir::arith::detail::MinNumFOpGenericAdaptorBase::MinNumFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MinNumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinNumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3776A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MinSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::MinSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.minsi";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinSIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinSIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::MinSIOpGenericAdaptorBase::MinSIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MinSIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377770;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MinUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::MinUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.minui";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinUIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinUIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::MinUIOpGenericAdaptorBase::MinUIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MinUIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.minimumf", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MinimumFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C375E70;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MinimumFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MinimumFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MinimumFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinimumFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MinimumFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MinimumFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.minimumf";
  v16[1] = 14;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinimumFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MinimumFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  mlir::arith::detail::MinimumFOpGenericAdaptorBase::MinimumFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MinimumFOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MinimumFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.mulf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376BB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.mulf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulFOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  mlir::arith::detail::MulFOpGenericAdaptorBase::MulFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MulFOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 16 == (v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative(a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MulFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::IsCommutative,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.muli", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376C80;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::MulIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.muli";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::MulIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::MulIOpGenericAdaptorBase::MulIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::MulIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MulIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.mulsi_extended", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3763E8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulSIExtendedOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulSIExtendedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::arith::AddUIExtendedOp::getShapeForUnroll((mlir::arith::AddUIExtendedOp *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  return mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulSIExtendedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulSIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.mulsi_extended";
  v16[1] = 20;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::arith::MulSIExtendedOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulSIExtendedOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::MulSIExtendedOpGenericAdaptorBase::MulSIExtendedOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v9 = mlir::arith::MulSIExtendedOp::fold((uint64_t)&v13, (uint64_t)v14, a5);
  int v10 = *(_DWORD *)(a5 + 8);
  if ((_BYTE)v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 && !v10 && mlir::OpTrait::impl::foldCommutative((uint64_t)a2, a3, a4)) {
    return 1;
  }
  return v9;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v312 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v49 = v48;
    a1 = v312;
    if (v49)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v329 = 83;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v329;
      }
      int v52 = &v328[v51];
      unint64_t v53 = v329 - v51;
      if (v329 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v329 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v312;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v297 = v2;
    uint64_t v313 = a1;
    char v3 = (void *)&unk_267771000;
    int v58 = v57;
    uint64_t v2 = v297;
    a1 = v313;
    if (v58)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      unint64_t v329 = 89;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v329;
      }
      int v61 = &v328[v60];
      unint64_t v62 = v329 - v60;
      if (v329 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v329 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v297;
      a1 = v313;
    }
  }
  uint64_t v4 = v3[348];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v298 = v2;
    uint64_t v314 = a1;
    uint64_t v283 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v283;
    uint64_t v2 = v298;
    int v67 = v66;
    a1 = v314;
    if (v67)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v329 = 86;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v329;
      }
      int v70 = &v328[v69];
      unint64_t v71 = v329 - v69;
      if (v329 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v329 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v283;
      uint64_t v2 = v298;
      a1 = v314;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v299 = v2;
    uint64_t v315 = a1;
    uint64_t v270 = v6;
    uint64_t v284 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v270;
    uint64_t v4 = v284;
    int v76 = v75;
    uint64_t v2 = v299;
    a1 = v315;
    if (v76)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v329 = 90;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v329;
      }
      int v79 = &v328[v78];
      unint64_t v80 = v329 - v78;
      if (v329 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v329 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v270;
      uint64_t v4 = v284;
      uint64_t v2 = v299;
      a1 = v315;
    }
  }
  uint64_t v8 = v7[89];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v300 = v2;
    uint64_t v316 = a1;
    uint64_t v271 = v6;
    uint64_t v285 = v4;
    uint64_t v258 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v258;
    uint64_t v6 = v271;
    uint64_t v4 = v285;
    uint64_t v2 = v300;
    int v85 = v84;
    a1 = v316;
    if (v85)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v329 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v329;
      }
      int v88 = &v328[v87];
      unint64_t v89 = v329 - v87;
      if (v329 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v329 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v258;
      uint64_t v6 = v271;
      uint64_t v4 = v285;
      uint64_t v2 = v300;
      a1 = v316;
    }
  }
  uint64_t v10 = v9[435];
  BOOL v11 = &unk_267771000;
  {
    uint64_t v301 = v2;
    uint64_t v317 = a1;
    uint64_t v272 = v6;
    uint64_t v286 = v4;
    uint64_t v259 = v8;
    uint64_t v247 = v10;
    BOOL v11 = (void *)&unk_267771000;
    uint64_t v10 = v247;
    uint64_t v8 = v259;
    uint64_t v6 = v272;
    uint64_t v4 = v286;
    uint64_t v2 = v301;
    int v94 = v93;
    a1 = v317;
    if (v94)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v329 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v329;
      }
      int v97 = &v328[v96];
      unint64_t v98 = v329 - v96;
      if (v329 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v329 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      BOOL v11 = (void *)&unk_267771000;
      uint64_t v10 = v247;
      uint64_t v8 = v259;
      uint64_t v6 = v272;
      uint64_t v4 = v286;
      uint64_t v2 = v301;
      a1 = v317;
    }
  }
  uint64_t v12 = v11[322];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v302 = v2;
    uint64_t v318 = a1;
    uint64_t v273 = v6;
    uint64_t v287 = v4;
    uint64_t v260 = v8;
    uint64_t v237 = v12;
    uint64_t v248 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v237;
    uint64_t v10 = v248;
    uint64_t v8 = v260;
    uint64_t v6 = v273;
    uint64_t v4 = v287;
    uint64_t v2 = v302;
    int v103 = v102;
    a1 = v318;
    if (v103)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v329 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v329;
      }
      int v106 = &v328[v105];
      unint64_t v107 = v329 - v105;
      if (v329 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v329 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v237;
      uint64_t v10 = v248;
      uint64_t v8 = v260;
      uint64_t v6 = v273;
      uint64_t v4 = v287;
      uint64_t v2 = v302;
      a1 = v318;
    }
  }
  uint64_t v14 = v13[324];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v303 = v2;
    uint64_t v319 = a1;
    uint64_t v274 = v6;
    uint64_t v288 = v4;
    uint64_t v261 = v8;
    uint64_t v238 = v12;
    uint64_t v249 = v10;
    uint64_t v228 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v228;
    uint64_t v12 = v238;
    uint64_t v10 = v249;
    uint64_t v8 = v261;
    uint64_t v6 = v274;
    uint64_t v4 = v288;
    uint64_t v2 = v303;
    int v112 = v111;
    a1 = v319;
    if (v112)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v329;
      }
      int v115 = &v328[v114];
      unint64_t v116 = v329 - v114;
      if (v329 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v329 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v228;
      uint64_t v12 = v238;
      uint64_t v10 = v249;
      uint64_t v8 = v261;
      uint64_t v6 = v274;
      uint64_t v4 = v288;
      uint64_t v2 = v303;
      a1 = v319;
    }
  }
  uint64_t v16 = v15[31];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v304 = v2;
    uint64_t v320 = a1;
    uint64_t v275 = v6;
    uint64_t v289 = v4;
    uint64_t v262 = v8;
    uint64_t v239 = v12;
    uint64_t v250 = v10;
    uint64_t v220 = v16;
    uint64_t v229 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v220;
    uint64_t v14 = v229;
    uint64_t v12 = v239;
    uint64_t v10 = v250;
    uint64_t v8 = v262;
    uint64_t v6 = v275;
    uint64_t v4 = v289;
    uint64_t v2 = v304;
    int v121 = v120;
    a1 = v320;
    if (v121)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      unint64_t v329 = 85;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v329;
      }
      int v124 = &v328[v123];
      unint64_t v125 = v329 - v123;
      if (v329 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v329 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v220;
      uint64_t v14 = v229;
      uint64_t v12 = v239;
      uint64_t v10 = v250;
      uint64_t v8 = v262;
      uint64_t v6 = v275;
      uint64_t v4 = v289;
      uint64_t v2 = v304;
      a1 = v320;
    }
  }
  uint64_t v18 = v17[151];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v305 = v2;
    uint64_t v321 = a1;
    uint64_t v276 = v6;
    uint64_t v290 = v4;
    uint64_t v263 = v8;
    uint64_t v240 = v12;
    uint64_t v251 = v10;
    uint64_t v221 = v16;
    uint64_t v230 = v14;
    uint64_t v213 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v213;
    uint64_t v16 = v221;
    uint64_t v14 = v230;
    uint64_t v12 = v240;
    uint64_t v10 = v251;
    uint64_t v8 = v263;
    uint64_t v6 = v276;
    uint64_t v4 = v290;
    uint64_t v2 = v305;
    int v130 = v129;
    a1 = v321;
    if (v130)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v329;
      }
      int v133 = &v328[v132];
      unint64_t v134 = v329 - v132;
      if (v329 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v329 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v213;
      uint64_t v16 = v221;
      uint64_t v14 = v230;
      uint64_t v12 = v240;
      uint64_t v10 = v251;
      uint64_t v8 = v263;
      uint64_t v6 = v276;
      uint64_t v4 = v290;
      uint64_t v2 = v305;
      a1 = v321;
    }
  }
  uint64_t v20 = v19[330];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v306 = v2;
    uint64_t v322 = a1;
    uint64_t v277 = v6;
    uint64_t v291 = v4;
    uint64_t v264 = v8;
    uint64_t v241 = v12;
    uint64_t v252 = v10;
    uint64_t v222 = v16;
    uint64_t v231 = v14;
    uint64_t v207 = v20;
    uint64_t v214 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v207;
    uint64_t v18 = v214;
    uint64_t v16 = v222;
    uint64_t v14 = v231;
    uint64_t v12 = v241;
    uint64_t v10 = v252;
    uint64_t v8 = v264;
    uint64_t v6 = v277;
    uint64_t v4 = v291;
    uint64_t v2 = v306;
    int v139 = v138;
    a1 = v322;
    if (v139)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v329 = 83;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v329;
      }
      int v142 = &v328[v141];
      unint64_t v143 = v329 - v141;
      if (v329 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v329 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v207;
      uint64_t v18 = v214;
      uint64_t v16 = v222;
      uint64_t v14 = v231;
      uint64_t v12 = v241;
      uint64_t v10 = v252;
      uint64_t v8 = v264;
      uint64_t v6 = v277;
      uint64_t v4 = v291;
      uint64_t v2 = v306;
      a1 = v322;
    }
  }
  uint64_t v22 = v21[332];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v307 = v2;
    uint64_t v323 = a1;
    uint64_t v278 = v6;
    uint64_t v292 = v4;
    uint64_t v265 = v8;
    uint64_t v242 = v12;
    uint64_t v253 = v10;
    uint64_t v223 = v16;
    uint64_t v232 = v14;
    uint64_t v208 = v20;
    uint64_t v215 = v18;
    uint64_t v202 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v202;
    uint64_t v20 = v208;
    uint64_t v18 = v215;
    uint64_t v16 = v223;
    uint64_t v14 = v232;
    uint64_t v12 = v242;
    uint64_t v10 = v253;
    uint64_t v8 = v265;
    uint64_t v6 = v278;
    uint64_t v4 = v292;
    uint64_t v2 = v307;
    int v148 = v147;
    a1 = v323;
    if (v148)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v329;
      }
      int v151 = &v328[v150];
      unint64_t v152 = v329 - v150;
      if (v329 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v329 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v202;
      uint64_t v20 = v208;
      uint64_t v18 = v215;
      uint64_t v16 = v223;
      uint64_t v14 = v232;
      uint64_t v12 = v242;
      uint64_t v10 = v253;
      uint64_t v8 = v265;
      uint64_t v6 = v278;
      uint64_t v4 = v292;
      uint64_t v2 = v307;
      a1 = v323;
    }
  }
  uint64_t v24 = v23[334];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v308 = v2;
    uint64_t v324 = a1;
    uint64_t v279 = v6;
    uint64_t v293 = v4;
    uint64_t v266 = v8;
    uint64_t v243 = v12;
    uint64_t v254 = v10;
    uint64_t v224 = v16;
    uint64_t v233 = v14;
    uint64_t v209 = v20;
    uint64_t v216 = v18;
    uint64_t v198 = v24;
    uint64_t v203 = v22;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v198;
    uint64_t v22 = v203;
    uint64_t v20 = v209;
    uint64_t v18 = v216;
    uint64_t v16 = v224;
    uint64_t v14 = v233;
    uint64_t v12 = v243;
    uint64_t v10 = v254;
    uint64_t v8 = v266;
    uint64_t v6 = v279;
    uint64_t v4 = v293;
    uint64_t v2 = v308;
    int v157 = v156;
    a1 = v324;
    if (v157)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v158 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v158) {
        unint64_t v159 = v158;
      }
      else {
        unint64_t v159 = v329;
      }
      int v160 = &v328[v159];
      unint64_t v161 = v329 - v159;
      if (v329 - v159 >= 0x12) {
        uint64_t v162 = 18;
      }
      else {
        uint64_t v162 = v329 - v159;
      }
      unint64_t v163 = v161 - v162;
      if (v163 >= v163 - 1) {
        uint64_t v164 = v163 - 1;
      }
      else {
        uint64_t v164 = v163;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v198;
      uint64_t v22 = v203;
      uint64_t v20 = v209;
      uint64_t v18 = v216;
      uint64_t v16 = v224;
      uint64_t v14 = v233;
      uint64_t v12 = v243;
      uint64_t v10 = v254;
      uint64_t v8 = v266;
      uint64_t v6 = v279;
      uint64_t v4 = v293;
      uint64_t v2 = v308;
      a1 = v324;
    }
  }
  uint64_t v26 = v25[336];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v309 = v2;
    uint64_t v325 = a1;
    uint64_t v280 = v6;
    uint64_t v294 = v4;
    uint64_t v267 = v8;
    uint64_t v244 = v12;
    uint64_t v255 = v10;
    uint64_t v225 = v16;
    uint64_t v234 = v14;
    uint64_t v210 = v20;
    uint64_t v217 = v18;
    uint64_t v199 = v24;
    uint64_t v204 = v22;
    uint64_t v195 = v26;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v195;
    uint64_t v24 = v199;
    uint64_t v22 = v204;
    uint64_t v20 = v210;
    uint64_t v18 = v217;
    uint64_t v16 = v225;
    uint64_t v14 = v234;
    uint64_t v12 = v244;
    uint64_t v10 = v255;
    uint64_t v8 = v267;
    uint64_t v6 = v280;
    uint64_t v4 = v294;
    uint64_t v2 = v309;
    int v166 = v165;
    a1 = v325;
    if (v166)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v167 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v167) {
        unint64_t v168 = v167;
      }
      else {
        unint64_t v168 = v329;
      }
      int v169 = &v328[v168];
      unint64_t v170 = v329 - v168;
      if (v329 - v168 >= 0x12) {
        uint64_t v171 = 18;
      }
      else {
        uint64_t v171 = v329 - v168;
      }
      unint64_t v172 = v170 - v171;
      if (v172 >= v172 - 1) {
        uint64_t v173 = v172 - 1;
      }
      else {
        uint64_t v173 = v172;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v169[v171], v173);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v195;
      uint64_t v24 = v199;
      uint64_t v22 = v204;
      uint64_t v20 = v210;
      uint64_t v18 = v217;
      uint64_t v16 = v225;
      uint64_t v14 = v234;
      uint64_t v12 = v244;
      uint64_t v10 = v255;
      uint64_t v8 = v267;
      uint64_t v6 = v280;
      uint64_t v4 = v294;
      uint64_t v2 = v309;
      a1 = v325;
    }
  }
  uint64_t v28 = v27[338];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v310 = v2;
    uint64_t v326 = a1;
    uint64_t v281 = v6;
    uint64_t v295 = v4;
    uint64_t v268 = v8;
    uint64_t v245 = v12;
    uint64_t v256 = v10;
    uint64_t v226 = v16;
    uint64_t v235 = v14;
    uint64_t v211 = v20;
    uint64_t v218 = v18;
    uint64_t v200 = v24;
    uint64_t v205 = v22;
    uint64_t v193 = v28;
    uint64_t v196 = v26;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v193;
    uint64_t v26 = v196;
    uint64_t v24 = v200;
    uint64_t v22 = v205;
    uint64_t v20 = v211;
    uint64_t v18 = v218;
    uint64_t v16 = v226;
    uint64_t v14 = v235;
    uint64_t v12 = v245;
    uint64_t v10 = v256;
    uint64_t v8 = v268;
    uint64_t v6 = v281;
    uint64_t v4 = v295;
    uint64_t v2 = v310;
    int v175 = v174;
    a1 = v326;
    if (v175)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v329 = 90;
      unint64_t v176 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v176) {
        unint64_t v177 = v176;
      }
      else {
        unint64_t v177 = v329;
      }
      int v178 = &v328[v177];
      unint64_t v179 = v329 - v177;
      if (v329 - v177 >= 0x12) {
        uint64_t v180 = 18;
      }
      else {
        uint64_t v180 = v329 - v177;
      }
      unint64_t v181 = v179 - v180;
      if (v181 >= v181 - 1) {
        uint64_t v182 = v181 - 1;
      }
      else {
        uint64_t v182 = v181;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v178[v180], v182);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v193;
      uint64_t v26 = v196;
      uint64_t v24 = v200;
      uint64_t v22 = v205;
      uint64_t v20 = v211;
      uint64_t v18 = v218;
      uint64_t v16 = v226;
      uint64_t v14 = v235;
      uint64_t v12 = v245;
      uint64_t v10 = v256;
      uint64_t v8 = v268;
      uint64_t v6 = v281;
      uint64_t v4 = v295;
      uint64_t v2 = v310;
      a1 = v326;
    }
  }
  uint64_t v30 = v29[37];
  long long v31 = &unk_267771000;
  {
    uint64_t v311 = v2;
    uint64_t v327 = a1;
    uint64_t v282 = v6;
    uint64_t v296 = v4;
    uint64_t v269 = v8;
    uint64_t v246 = v12;
    uint64_t v257 = v10;
    uint64_t v227 = v16;
    uint64_t v236 = v14;
    uint64_t v212 = v20;
    uint64_t v219 = v18;
    uint64_t v201 = v24;
    uint64_t v206 = v22;
    uint64_t v194 = v28;
    uint64_t v197 = v26;
    uint64_t v192 = v30;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v192;
    uint64_t v28 = v194;
    uint64_t v26 = v197;
    uint64_t v24 = v201;
    uint64_t v22 = v206;
    uint64_t v20 = v212;
    uint64_t v18 = v219;
    uint64_t v16 = v227;
    uint64_t v14 = v236;
    uint64_t v12 = v246;
    uint64_t v10 = v257;
    uint64_t v8 = v269;
    uint64_t v6 = v282;
    uint64_t v4 = v296;
    uint64_t v2 = v311;
    int v184 = v183;
    a1 = v327;
    if (v184)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v329 = 86;
      unint64_t v185 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v185) {
        unint64_t v186 = v185;
      }
      else {
        unint64_t v186 = v329;
      }
      int v187 = &v328[v186];
      unint64_t v188 = v329 - v186;
      if (v329 - v186 >= 0x12) {
        uint64_t v189 = 18;
      }
      else {
        uint64_t v189 = v329 - v186;
      }
      unint64_t v190 = v188 - v189;
      if (v190 >= v190 - 1) {
        uint64_t v191 = v190 - 1;
      }
      else {
        uint64_t v191 = v190;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v187[v189], v191);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v192;
      uint64_t v28 = v194;
      uint64_t v26 = v197;
      uint64_t v24 = v201;
      uint64_t v22 = v206;
      uint64_t v20 = v212;
      uint64_t v18 = v219;
      uint64_t v16 = v227;
      uint64_t v14 = v236;
      uint64_t v12 = v246;
      uint64_t v10 = v257;
      uint64_t v8 = v269;
      uint64_t v6 = v282;
      uint64_t v4 = v296;
      uint64_t v2 = v311;
      a1 = v327;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v31[350] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::MulSIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::MulSIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::MulSIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::MulSIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::MulSIExtendedOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::MulSIExtendedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::MulSIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::MulSIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::MulSIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::MulSIExtendedOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::MulSIExtendedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v6 = a1, mlir::arith::MulSIExtendedOp::verifyInvariantsImpl((mlir::arith::MulSIExtendedOp *)&v6)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v4) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::MulSIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.mului_extended", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3764B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        BOOL v11 = v13;
      }
      else {
        BOOL v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::MulUIExtendedOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      BOOL v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          BOOL v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::MulUIExtendedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::arith::AddUIExtendedOp::getShapeForUnroll((mlir::arith::AddUIExtendedOp *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  return mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulUIExtendedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::MulUIExtendedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::MulSIExtendedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.mului_extended";
  v16[1] = 20;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::arith::MulSIExtendedOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::arith::MulUIExtendedOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::MulUIExtendedOpGenericAdaptorBase::MulUIExtendedOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v9 = mlir::arith::MulUIExtendedOp::fold((uint64_t)&v13, (uint64_t)v14, a5);
  int v10 = *(_DWORD *)(a5 + 8);
  if ((_BYTE)v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 && !v10 && mlir::OpTrait::impl::foldCommutative((uint64_t)a2, a3, a4)) {
    return 1;
  }
  return v9;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::MulSIExtendedOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::OpInvariants<mlir::arith::MulSIExtendedOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::MulSIExtendedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::IsCommutative<mlir::arith::MulSIExtendedOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Elementwise<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Scalarizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Vectorizable<mlir::arith::MulSIExtendedOp>,mlir::OpTrait::Tensorizable<mlir::arith::MulSIExtendedOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::MulSIExtendedOp>,mlir::OpAsmOpInterface::Trait<mlir::arith::MulSIExtendedOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::MulUIExtendedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsCommutative,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.negf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376D48;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        BOOL v11 = v13;
      }
      else {
        BOOL v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::NegFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::NegFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>::getSpeculatability;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::NegFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::NegFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::NegFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::NegFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.negf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::NegFOpGenericAdaptorBase::NegFOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::NegFOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  {
    uint64_t v348 = a1;
    a1 = v348;
    if (v36)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v367 = 83;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v367;
      }
      int v39 = &v366[v38];
      unint64_t v40 = v367 - v38;
      if (v367 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v367 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
      a1 = v348;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v331 = v1;
    uint64_t v349 = a1;
    uint64_t v1 = v331;
    a1 = v349;
    if (v44)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v367 = 81;
      unint64_t v45 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v45) {
        unint64_t v46 = v45;
      }
      else {
        unint64_t v46 = v367;
      }
      unint64_t v47 = &v366[v46];
      unint64_t v48 = v367 - v46;
      if (v367 - v46 >= 0x12) {
        uint64_t v49 = 18;
      }
      else {
        uint64_t v49 = v367 - v46;
      }
      unint64_t v50 = v48 - v49;
      if (v50 >= v50 - 1) {
        uint64_t v51 = v50 - 1;
      }
      else {
        uint64_t v51 = v50;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v47[v49], v51);
      uint64_t v1 = v331;
      a1 = v349;
    }
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v332 = v1;
    uint64_t v350 = a1;
    uint64_t v315 = v2;
    uint64_t v2 = v315;
    uint64_t v1 = v332;
    int v53 = v52;
    a1 = v350;
    if (v53)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v367 = 104;
      unint64_t v54 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v54) {
        unint64_t v55 = v54;
      }
      else {
        unint64_t v55 = v367;
      }
      uint64_t v56 = &v366[v55];
      unint64_t v57 = v367 - v55;
      if (v367 - v55 >= 0x12) {
        uint64_t v58 = 18;
      }
      else {
        uint64_t v58 = v367 - v55;
      }
      unint64_t v59 = v57 - v58;
      if (v59 >= v59 - 1) {
        uint64_t v60 = v59 - 1;
      }
      else {
        uint64_t v60 = v59;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      uint64_t v2 = v315;
      uint64_t v1 = v332;
      a1 = v350;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v333 = v1;
    uint64_t v351 = a1;
    uint64_t v300 = v3;
    uint64_t v316 = v2;
    uint64_t v3 = v300;
    uint64_t v2 = v316;
    int v62 = v61;
    uint64_t v1 = v333;
    a1 = v351;
    if (v62)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v367 = 86;
      unint64_t v63 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v63) {
        unint64_t v64 = v63;
      }
      else {
        unint64_t v64 = v367;
      }
      uint64_t v65 = &v366[v64];
      unint64_t v66 = v367 - v64;
      if (v367 - v64 >= 0x12) {
        uint64_t v67 = 18;
      }
      else {
        uint64_t v67 = v367 - v64;
      }
      unint64_t v68 = v66 - v67;
      if (v68 >= v68 - 1) {
        uint64_t v69 = v68 - 1;
      }
      else {
        uint64_t v69 = v68;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      uint64_t v3 = v300;
      uint64_t v2 = v316;
      uint64_t v1 = v333;
      a1 = v351;
    }
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v334 = v1;
    uint64_t v352 = a1;
    uint64_t v301 = v3;
    uint64_t v317 = v2;
    uint64_t v286 = v4;
    uint64_t v4 = v286;
    uint64_t v3 = v301;
    uint64_t v2 = v317;
    uint64_t v1 = v334;
    int v71 = v70;
    a1 = v352;
    if (v71)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v367 = 82;
      unint64_t v72 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v72) {
        unint64_t v73 = v72;
      }
      else {
        unint64_t v73 = v367;
      }
      uint64_t v74 = &v366[v73];
      unint64_t v75 = v367 - v73;
      if (v367 - v73 >= 0x12) {
        uint64_t v76 = 18;
      }
      else {
        uint64_t v76 = v367 - v73;
      }
      unint64_t v77 = v75 - v76;
      if (v77 >= v77 - 1) {
        uint64_t v78 = v77 - 1;
      }
      else {
        uint64_t v78 = v77;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      uint64_t v4 = v286;
      uint64_t v3 = v301;
      uint64_t v2 = v317;
      uint64_t v1 = v334;
      a1 = v352;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v335 = v1;
    uint64_t v353 = a1;
    uint64_t v302 = v3;
    uint64_t v318 = v2;
    uint64_t v287 = v4;
    uint64_t v273 = v5;
    uint64_t v5 = v273;
    uint64_t v4 = v287;
    uint64_t v3 = v302;
    uint64_t v2 = v318;
    uint64_t v1 = v335;
    int v80 = v79;
    a1 = v353;
    if (v80)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v367 = 84;
      unint64_t v81 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v81) {
        unint64_t v82 = v81;
      }
      else {
        unint64_t v82 = v367;
      }
      uint64_t v83 = &v366[v82];
      unint64_t v84 = v367 - v82;
      if (v367 - v82 >= 0x12) {
        uint64_t v85 = 18;
      }
      else {
        uint64_t v85 = v367 - v82;
      }
      unint64_t v86 = v84 - v85;
      if (v86 >= v86 - 1) {
        uint64_t v87 = v86 - 1;
      }
      else {
        uint64_t v87 = v86;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      uint64_t v5 = v273;
      uint64_t v4 = v287;
      uint64_t v3 = v302;
      uint64_t v2 = v318;
      uint64_t v1 = v335;
      a1 = v353;
    }
  }
  uint64_t v6 = mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v336 = v1;
    uint64_t v354 = a1;
    uint64_t v303 = v3;
    uint64_t v319 = v2;
    uint64_t v288 = v4;
    uint64_t v261 = v6;
    uint64_t v274 = v5;
    uint64_t v6 = v261;
    uint64_t v5 = v274;
    uint64_t v4 = v288;
    uint64_t v3 = v303;
    uint64_t v2 = v319;
    uint64_t v1 = v336;
    int v89 = v88;
    a1 = v354;
    if (v89)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v367 = 89;
      unint64_t v90 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v90) {
        unint64_t v91 = v90;
      }
      else {
        unint64_t v91 = v367;
      }
      uint64_t v92 = &v366[v91];
      unint64_t v93 = v367 - v91;
      if (v367 - v91 >= 0x12) {
        uint64_t v94 = 18;
      }
      else {
        uint64_t v94 = v367 - v91;
      }
      unint64_t v95 = v93 - v94;
      if (v95 >= v95 - 1) {
        uint64_t v96 = v95 - 1;
      }
      else {
        uint64_t v96 = v95;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      uint64_t v6 = v261;
      uint64_t v5 = v274;
      uint64_t v4 = v288;
      uint64_t v3 = v303;
      uint64_t v2 = v319;
      uint64_t v1 = v336;
      a1 = v354;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v337 = v1;
    uint64_t v355 = a1;
    uint64_t v304 = v3;
    uint64_t v320 = v2;
    uint64_t v289 = v4;
    uint64_t v262 = v6;
    uint64_t v275 = v5;
    uint64_t v250 = v7;
    uint64_t v7 = v250;
    uint64_t v6 = v262;
    uint64_t v5 = v275;
    uint64_t v4 = v289;
    uint64_t v3 = v304;
    uint64_t v2 = v320;
    uint64_t v1 = v337;
    int v98 = v97;
    a1 = v355;
    if (v98)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface::Trait<Empty>]";
      unint64_t v367 = 99;
      unint64_t v99 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v99) {
        unint64_t v100 = v99;
      }
      else {
        unint64_t v100 = v367;
      }
      uint64_t v101 = &v366[v100];
      unint64_t v102 = v367 - v100;
      if (v367 - v100 >= 0x12) {
        uint64_t v103 = 18;
      }
      else {
        uint64_t v103 = v367 - v100;
      }
      unint64_t v104 = v102 - v103;
      if (v104 >= v104 - 1) {
        uint64_t v105 = v104 - 1;
      }
      else {
        uint64_t v105 = v104;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      uint64_t v7 = v250;
      uint64_t v6 = v262;
      uint64_t v5 = v275;
      uint64_t v4 = v289;
      uint64_t v3 = v304;
      uint64_t v2 = v320;
      uint64_t v1 = v337;
      a1 = v355;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::arith::ArithFastMathInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v338 = v1;
    uint64_t v356 = a1;
    uint64_t v305 = v3;
    uint64_t v321 = v2;
    uint64_t v290 = v4;
    uint64_t v263 = v6;
    uint64_t v276 = v5;
    uint64_t v240 = v8;
    uint64_t v251 = v7;
    uint64_t v8 = v240;
    uint64_t v7 = v251;
    uint64_t v6 = v263;
    uint64_t v5 = v276;
    uint64_t v4 = v290;
    uint64_t v3 = v305;
    uint64_t v2 = v321;
    uint64_t v1 = v338;
    int v107 = v106;
    a1 = v356;
    if (v107)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v367 = 95;
      unint64_t v108 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v108) {
        unint64_t v109 = v108;
      }
      else {
        unint64_t v109 = v367;
      }
      uint64_t v110 = &v366[v109];
      unint64_t v111 = v367 - v109;
      if (v367 - v109 >= 0x12) {
        uint64_t v112 = 18;
      }
      else {
        uint64_t v112 = v367 - v109;
      }
      unint64_t v113 = v111 - v112;
      if (v113 >= v113 - 1) {
        uint64_t v114 = v113 - 1;
      }
      else {
        uint64_t v114 = v113;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      uint64_t v8 = v240;
      uint64_t v7 = v251;
      uint64_t v6 = v263;
      uint64_t v5 = v276;
      uint64_t v4 = v290;
      uint64_t v3 = v305;
      uint64_t v2 = v321;
      uint64_t v1 = v338;
      a1 = v356;
    }
  }
  uint64_t v9 = mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v339 = v1;
    uint64_t v357 = a1;
    uint64_t v306 = v3;
    uint64_t v322 = v2;
    uint64_t v291 = v4;
    uint64_t v264 = v6;
    uint64_t v277 = v5;
    uint64_t v241 = v8;
    uint64_t v252 = v7;
    uint64_t v231 = v9;
    uint64_t v9 = v231;
    uint64_t v8 = v241;
    uint64_t v7 = v252;
    uint64_t v6 = v264;
    uint64_t v5 = v277;
    uint64_t v4 = v291;
    uint64_t v3 = v306;
    uint64_t v2 = v322;
    uint64_t v1 = v339;
    int v116 = v115;
    a1 = v357;
    if (v116)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v367 = 99;
      unint64_t v117 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v117) {
        unint64_t v118 = v117;
      }
      else {
        unint64_t v118 = v367;
      }
      uint64_t v119 = &v366[v118];
      unint64_t v120 = v367 - v118;
      if (v367 - v118 >= 0x12) {
        uint64_t v121 = 18;
      }
      else {
        uint64_t v121 = v367 - v118;
      }
      unint64_t v122 = v120 - v121;
      if (v122 >= v122 - 1) {
        uint64_t v123 = v122 - 1;
      }
      else {
        uint64_t v123 = v122;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      uint64_t v9 = v231;
      uint64_t v8 = v241;
      uint64_t v7 = v252;
      uint64_t v6 = v264;
      uint64_t v5 = v277;
      uint64_t v4 = v291;
      uint64_t v3 = v306;
      uint64_t v2 = v322;
      uint64_t v1 = v339;
      a1 = v357;
    }
  }
  uint64_t v10 = mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v340 = v1;
    uint64_t v358 = a1;
    uint64_t v307 = v3;
    uint64_t v323 = v2;
    uint64_t v292 = v4;
    uint64_t v265 = v6;
    uint64_t v278 = v5;
    uint64_t v242 = v8;
    uint64_t v253 = v7;
    uint64_t v223 = v10;
    uint64_t v232 = v9;
    uint64_t v10 = v223;
    uint64_t v9 = v232;
    uint64_t v8 = v242;
    uint64_t v7 = v253;
    uint64_t v6 = v265;
    uint64_t v5 = v278;
    uint64_t v4 = v292;
    uint64_t v3 = v307;
    uint64_t v2 = v323;
    uint64_t v1 = v340;
    int v125 = v124;
    a1 = v358;
    if (v125)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v126 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v126) {
        unint64_t v127 = v126;
      }
      else {
        unint64_t v127 = v367;
      }
      uint64_t v128 = &v366[v127];
      unint64_t v129 = v367 - v127;
      if (v367 - v127 >= 0x12) {
        uint64_t v130 = 18;
      }
      else {
        uint64_t v130 = v367 - v127;
      }
      unint64_t v131 = v129 - v130;
      if (v131 >= v131 - 1) {
        uint64_t v132 = v131 - 1;
      }
      else {
        uint64_t v132 = v131;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      uint64_t v10 = v223;
      uint64_t v9 = v232;
      uint64_t v8 = v242;
      uint64_t v7 = v253;
      uint64_t v6 = v265;
      uint64_t v5 = v278;
      uint64_t v4 = v292;
      uint64_t v3 = v307;
      uint64_t v2 = v323;
      uint64_t v1 = v340;
      a1 = v358;
    }
  }
  uint64_t v11 = mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v341 = v1;
    uint64_t v359 = a1;
    uint64_t v308 = v3;
    uint64_t v324 = v2;
    uint64_t v293 = v4;
    uint64_t v266 = v6;
    uint64_t v279 = v5;
    uint64_t v243 = v8;
    uint64_t v254 = v7;
    uint64_t v224 = v10;
    uint64_t v233 = v9;
    uint64_t v216 = v11;
    uint64_t v11 = v216;
    uint64_t v10 = v224;
    uint64_t v9 = v233;
    uint64_t v8 = v243;
    uint64_t v7 = v254;
    uint64_t v6 = v266;
    uint64_t v5 = v279;
    uint64_t v4 = v293;
    uint64_t v3 = v308;
    uint64_t v2 = v324;
    uint64_t v1 = v341;
    int v134 = v133;
    a1 = v359;
    if (v134)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v367 = 97;
      unint64_t v135 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v135) {
        unint64_t v136 = v135;
      }
      else {
        unint64_t v136 = v367;
      }
      uint64_t v137 = &v366[v136];
      unint64_t v138 = v367 - v136;
      if (v367 - v136 >= 0x12) {
        uint64_t v139 = 18;
      }
      else {
        uint64_t v139 = v367 - v136;
      }
      unint64_t v140 = v138 - v139;
      if (v140 >= v140 - 1) {
        uint64_t v141 = v140 - 1;
      }
      else {
        uint64_t v141 = v140;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      uint64_t v11 = v216;
      uint64_t v10 = v224;
      uint64_t v9 = v233;
      uint64_t v8 = v243;
      uint64_t v7 = v254;
      uint64_t v6 = v266;
      uint64_t v5 = v279;
      uint64_t v4 = v293;
      uint64_t v3 = v308;
      uint64_t v2 = v324;
      uint64_t v1 = v341;
      a1 = v359;
    }
  }
  uint64_t v12 = mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v342 = v1;
    uint64_t v360 = a1;
    uint64_t v309 = v3;
    uint64_t v325 = v2;
    uint64_t v294 = v4;
    uint64_t v267 = v6;
    uint64_t v280 = v5;
    uint64_t v244 = v8;
    uint64_t v255 = v7;
    uint64_t v225 = v10;
    uint64_t v234 = v9;
    uint64_t v210 = v12;
    uint64_t v217 = v11;
    uint64_t v12 = v210;
    uint64_t v11 = v217;
    uint64_t v10 = v225;
    uint64_t v9 = v234;
    uint64_t v8 = v244;
    uint64_t v7 = v255;
    uint64_t v6 = v267;
    uint64_t v5 = v280;
    uint64_t v4 = v294;
    uint64_t v3 = v309;
    uint64_t v2 = v325;
    uint64_t v1 = v342;
    int v143 = v142;
    a1 = v360;
    if (v143)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v367 = 93;
      unint64_t v144 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v144) {
        unint64_t v145 = v144;
      }
      else {
        unint64_t v145 = v367;
      }
      uint64_t v146 = &v366[v145];
      unint64_t v147 = v367 - v145;
      if (v367 - v145 >= 0x12) {
        uint64_t v148 = 18;
      }
      else {
        uint64_t v148 = v367 - v145;
      }
      unint64_t v149 = v147 - v148;
      if (v149 >= v149 - 1) {
        uint64_t v150 = v149 - 1;
      }
      else {
        uint64_t v150 = v149;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      uint64_t v12 = v210;
      uint64_t v11 = v217;
      uint64_t v10 = v225;
      uint64_t v9 = v234;
      uint64_t v8 = v244;
      uint64_t v7 = v255;
      uint64_t v6 = v267;
      uint64_t v5 = v280;
      uint64_t v4 = v294;
      uint64_t v3 = v309;
      uint64_t v2 = v325;
      uint64_t v1 = v342;
      a1 = v360;
    }
  }
  uint64_t v13 = mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v343 = v1;
    uint64_t v361 = a1;
    uint64_t v310 = v3;
    uint64_t v326 = v2;
    uint64_t v295 = v4;
    uint64_t v268 = v6;
    uint64_t v281 = v5;
    uint64_t v245 = v8;
    uint64_t v256 = v7;
    uint64_t v226 = v10;
    uint64_t v235 = v9;
    uint64_t v211 = v12;
    uint64_t v218 = v11;
    uint64_t v151 = v13;
    uint64_t v13 = v151;
    uint64_t v12 = v211;
    uint64_t v11 = v218;
    uint64_t v10 = v226;
    uint64_t v9 = v235;
    uint64_t v8 = v245;
    uint64_t v7 = v256;
    uint64_t v6 = v268;
    uint64_t v5 = v281;
    uint64_t v4 = v295;
    uint64_t v3 = v310;
    uint64_t v2 = v326;
    uint64_t v1 = v343;
    int v153 = v152;
    a1 = v361;
    if (v153)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v367 = 83;
      unint64_t v154 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v154) {
        unint64_t v155 = v154;
      }
      else {
        unint64_t v155 = v367;
      }
      int v156 = &v366[v155];
      unint64_t v157 = v367 - v155;
      if (v367 - v155 >= 0x12) {
        uint64_t v158 = 18;
      }
      else {
        uint64_t v158 = v367 - v155;
      }
      unint64_t v159 = v157 - v158;
      if (v159 >= v159 - 1) {
        uint64_t v160 = v159 - 1;
      }
      else {
        uint64_t v160 = v159;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v156[v158], v160);
      uint64_t v13 = v151;
      uint64_t v12 = v211;
      uint64_t v11 = v218;
      uint64_t v10 = v226;
      uint64_t v9 = v235;
      uint64_t v8 = v245;
      uint64_t v7 = v256;
      uint64_t v6 = v268;
      uint64_t v5 = v281;
      uint64_t v4 = v295;
      uint64_t v3 = v310;
      uint64_t v2 = v326;
      uint64_t v1 = v343;
      a1 = v361;
    }
  }
  uint64_t v14 = mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v344 = v1;
    uint64_t v362 = a1;
    uint64_t v311 = v3;
    uint64_t v327 = v2;
    uint64_t v296 = v4;
    uint64_t v269 = v6;
    uint64_t v282 = v5;
    uint64_t v246 = v8;
    uint64_t v257 = v7;
    uint64_t v227 = v10;
    uint64_t v236 = v9;
    uint64_t v212 = v12;
    uint64_t v219 = v11;
    uint64_t v161 = v13;
    uint64_t v204 = v14;
    uint64_t v14 = v204;
    uint64_t v13 = v161;
    uint64_t v12 = v212;
    uint64_t v11 = v219;
    uint64_t v10 = v227;
    uint64_t v9 = v236;
    uint64_t v8 = v246;
    uint64_t v7 = v257;
    uint64_t v6 = v269;
    uint64_t v5 = v282;
    uint64_t v4 = v296;
    uint64_t v3 = v311;
    uint64_t v2 = v327;
    uint64_t v1 = v344;
    int v163 = v162;
    a1 = v362;
    if (v163)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v367;
      }
      int v166 = &v366[v165];
      unint64_t v167 = v367 - v165;
      if (v367 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v367 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      uint64_t v14 = v204;
      uint64_t v13 = v161;
      uint64_t v12 = v212;
      uint64_t v11 = v219;
      uint64_t v10 = v227;
      uint64_t v9 = v236;
      uint64_t v8 = v246;
      uint64_t v7 = v257;
      uint64_t v6 = v269;
      uint64_t v5 = v282;
      uint64_t v4 = v296;
      uint64_t v3 = v311;
      uint64_t v2 = v327;
      uint64_t v1 = v344;
      a1 = v362;
    }
  }
  uint64_t v15 = mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v345 = v1;
    uint64_t v363 = a1;
    uint64_t v312 = v3;
    uint64_t v328 = v2;
    uint64_t v297 = v4;
    uint64_t v270 = v6;
    uint64_t v283 = v5;
    uint64_t v247 = v8;
    uint64_t v258 = v7;
    uint64_t v228 = v10;
    uint64_t v237 = v9;
    uint64_t v213 = v12;
    uint64_t v220 = v11;
    uint64_t v207 = v13;
    uint64_t v171 = v14;
    uint64_t v200 = v15;
    uint64_t v15 = v200;
    uint64_t v14 = v171;
    uint64_t v13 = v207;
    uint64_t v12 = v213;
    uint64_t v11 = v220;
    uint64_t v10 = v228;
    uint64_t v9 = v237;
    uint64_t v8 = v247;
    uint64_t v7 = v258;
    uint64_t v6 = v270;
    uint64_t v5 = v283;
    uint64_t v4 = v297;
    uint64_t v3 = v312;
    uint64_t v2 = v328;
    uint64_t v1 = v345;
    int v173 = v172;
    a1 = v363;
    if (v173)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v174 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v174) {
        unint64_t v175 = v174;
      }
      else {
        unint64_t v175 = v367;
      }
      unint64_t v176 = &v366[v175];
      unint64_t v177 = v367 - v175;
      if (v367 - v175 >= 0x12) {
        uint64_t v178 = 18;
      }
      else {
        uint64_t v178 = v367 - v175;
      }
      unint64_t v179 = v177 - v178;
      if (v179 >= v179 - 1) {
        uint64_t v180 = v179 - 1;
      }
      else {
        uint64_t v180 = v179;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      uint64_t v15 = v200;
      uint64_t v14 = v171;
      uint64_t v13 = v207;
      uint64_t v12 = v213;
      uint64_t v11 = v220;
      uint64_t v10 = v228;
      uint64_t v9 = v237;
      uint64_t v8 = v247;
      uint64_t v7 = v258;
      uint64_t v6 = v270;
      uint64_t v5 = v283;
      uint64_t v4 = v297;
      uint64_t v3 = v312;
      uint64_t v2 = v328;
      uint64_t v1 = v345;
      a1 = v363;
    }
  }
  uint64_t v16 = mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v346 = v1;
    uint64_t v364 = a1;
    uint64_t v313 = v3;
    uint64_t v329 = v2;
    uint64_t v298 = v4;
    uint64_t v271 = v6;
    uint64_t v284 = v5;
    uint64_t v248 = v8;
    uint64_t v259 = v7;
    uint64_t v229 = v10;
    uint64_t v238 = v9;
    uint64_t v214 = v12;
    uint64_t v221 = v11;
    uint64_t v205 = v14;
    uint64_t v208 = v13;
    uint64_t v181 = v15;
    uint64_t v202 = v16;
    uint64_t v16 = v202;
    uint64_t v14 = v205;
    uint64_t v15 = v181;
    uint64_t v13 = v208;
    uint64_t v12 = v214;
    uint64_t v11 = v221;
    uint64_t v10 = v229;
    uint64_t v9 = v238;
    uint64_t v8 = v248;
    uint64_t v7 = v259;
    uint64_t v6 = v271;
    uint64_t v5 = v284;
    uint64_t v4 = v298;
    uint64_t v3 = v313;
    uint64_t v2 = v329;
    uint64_t v1 = v346;
    int v183 = v182;
    a1 = v364;
    if (v183)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v367 = 84;
      unint64_t v184 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v184) {
        unint64_t v185 = v184;
      }
      else {
        unint64_t v185 = v367;
      }
      unint64_t v186 = &v366[v185];
      unint64_t v187 = v367 - v185;
      if (v367 - v185 >= 0x12) {
        uint64_t v188 = 18;
      }
      else {
        uint64_t v188 = v367 - v185;
      }
      unint64_t v189 = v187 - v188;
      if (v189 >= v189 - 1) {
        uint64_t v190 = v189 - 1;
      }
      else {
        uint64_t v190 = v189;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v186[v188], v190);
      uint64_t v16 = v202;
      uint64_t v14 = v205;
      uint64_t v15 = v181;
      uint64_t v13 = v208;
      uint64_t v12 = v214;
      uint64_t v11 = v221;
      uint64_t v10 = v229;
      uint64_t v9 = v238;
      uint64_t v8 = v248;
      uint64_t v7 = v259;
      uint64_t v6 = v271;
      uint64_t v5 = v284;
      uint64_t v4 = v298;
      uint64_t v3 = v313;
      uint64_t v2 = v329;
      uint64_t v1 = v346;
      a1 = v364;
    }
  }
  uint64_t v17 = mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v347 = v1;
    uint64_t v365 = a1;
    uint64_t v314 = v3;
    uint64_t v330 = v2;
    uint64_t v299 = v4;
    uint64_t v272 = v6;
    uint64_t v285 = v5;
    uint64_t v249 = v8;
    uint64_t v260 = v7;
    uint64_t v230 = v10;
    uint64_t v239 = v9;
    uint64_t v215 = v12;
    uint64_t v222 = v11;
    uint64_t v206 = v14;
    uint64_t v209 = v13;
    uint64_t v201 = v15;
    uint64_t v203 = v16;
    uint64_t v15 = v201;
    uint64_t v16 = v203;
    uint64_t v14 = v206;
    uint64_t v13 = v209;
    uint64_t v12 = v215;
    uint64_t v11 = v222;
    uint64_t v10 = v230;
    uint64_t v9 = v239;
    uint64_t v8 = v249;
    uint64_t v7 = v260;
    uint64_t v6 = v272;
    uint64_t v5 = v285;
    uint64_t v4 = v299;
    uint64_t v3 = v314;
    uint64_t v2 = v330;
    uint64_t v1 = v347;
    int v192 = v191;
    a1 = v365;
    if (v192)
    {
      uint64_t v366 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v367 = 90;
      unint64_t v193 = llvm::StringRef::find((uint64_t *)&v366, "DesiredTypeName = ", 0x12uLL, 0);
      if (v367 >= v193) {
        unint64_t v194 = v193;
      }
      else {
        unint64_t v194 = v367;
      }
      uint64_t v195 = &v366[v194];
      unint64_t v196 = v367 - v194;
      if (v367 - v194 >= 0x12) {
        uint64_t v197 = 18;
      }
      else {
        uint64_t v197 = v367 - v194;
      }
      unint64_t v198 = v196 - v197;
      if (v198 >= v198 - 1) {
        uint64_t v199 = v198 - 1;
      }
      else {
        uint64_t v199 = v198;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v195[v197], v199);
      uint64_t v15 = v201;
      uint64_t v16 = v203;
      uint64_t v14 = v206;
      uint64_t v13 = v209;
      uint64_t v12 = v215;
      uint64_t v11 = v222;
      uint64_t v10 = v230;
      uint64_t v9 = v239;
      uint64_t v8 = v249;
      uint64_t v7 = v260;
      uint64_t v6 = v272;
      uint64_t v5 = v285;
      uint64_t v4 = v299;
      uint64_t v3 = v314;
      uint64_t v2 = v330;
      uint64_t v1 = v347;
      a1 = v365;
    }
  }
  return v1 == a1
      || v2 == a1
      || v3 == a1
      || v4 == a1
      || v5 == a1
      || v6 == a1
      || v7 == a1
      || v8 == a1
      || v9 == a1
      || v10 == a1
      || v11 == a1
      || v12 == a1
      || v13 == a1
      || v14 == a1
      || v15 == a1
      || v16 == a1
      || v17 == a1
      || mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::NegFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::NegFOp>,mlir::OpTrait::OneResult<mlir::arith::NegFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::NegFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::NegFOp>,mlir::OpTrait::OneOperand<mlir::arith::NegFOp>,mlir::OpTrait::OpInvariants<mlir::arith::NegFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::NegFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::NegFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::NegFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::NegFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::NegFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::Elementwise<mlir::arith::NegFOp>,mlir::OpTrait::Scalarizable<mlir::arith::NegFOp>,mlir::OpTrait::Vectorizable<mlir::arith::NegFOp>,mlir::OpTrait::Tensorizable<mlir::arith::NegFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::NegFOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::NegFOp>,mlir::OpTrait::OneResult<mlir::arith::NegFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::NegFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::NegFOp>,mlir::OpTrait::OneOperand<mlir::arith::NegFOp>,mlir::OpTrait::OpInvariants<mlir::arith::NegFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::NegFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::NegFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::NegFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::NegFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::NegFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::NegFOp>,mlir::OpTrait::Elementwise<mlir::arith::NegFOp>,mlir::OpTrait::Scalarizable<mlir::arith::NegFOp>,mlir::OpTrait::Vectorizable<mlir::arith::NegFOp>,mlir::OpTrait::Tensorizable<mlir::arith::NegFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::NegFOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v9 = a1, mlir::arith::NegFOp::verifyInvariantsImpl((mlir::arith::NegFOp *)&v9))
    && mlir::OpTrait::impl::verifySameOperandsAndResultType(a1, v6))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::NegFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.ori", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376578;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::OrIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::OrIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::OrIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::OrIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::OrIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::OrIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::OrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.ori";
  v16[1] = 9;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::OrIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::OrIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v16 = a1;
  mlir::arith::detail::OrIOpGenericAdaptorBase::OrIOpGenericAdaptorBase((uint64_t)v17, a1);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  unint64_t v8 = mlir::arith::OrIOp::fold((uint64_t)&v16, (uint64_t)v17);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8)) {
      return v9 > 7;
    }
    if (mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return 1;
    }
    if (*(_DWORD *)(a4 + 8)) {
      return v9 > 7;
    }
    unint64_t v13 = mlir::OpTrait::impl::foldIdempotent((mlir::OpTrait::impl *)a1, v12);
    if (v13 < 8) {
      return v9 > 7;
    }
    unint64_t v14 = v13;
    if (a1 - 4 == (unsigned int *)(v13 & ((uint64_t)(v13 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
      return 1;
    }
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    if (v15 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v15) = v14;
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
  }
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AndIOp>,mlir::OpTrait::OneResult<mlir::arith::AndIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AndIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AndIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AndIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AndIOp>,mlir::OpTrait::IsIdempotent<mlir::arith::AndIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AndIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AndIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AndIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AndIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AndIOp>,mlir::OpTrait::Elementwise<mlir::arith::AndIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AndIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AndIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AndIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AndIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::OrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::OpTrait::IsIdempotent,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.remf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::RemFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376E10;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::RemFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.remf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::RemFOpGenericAdaptorBase::RemFOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::RemFOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::RemFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.remsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::RemSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377838;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::RemSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::RemSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.remsi";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::RemSIOpGenericAdaptorBase::RemSIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::RemSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::RemSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.remui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::RemUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377900;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::RemUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::RemUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::RemUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::RemUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::RemUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::RemUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.remui";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::RemUIOpGenericAdaptorBase::RemUIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::RemUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::RemUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.sitofp", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SIToFPOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377CE8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SIToFPOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SIToFPOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SIToFPOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SIToFPOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::SIToFPOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::SIToFPOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::SIToFPOpGenericAdaptorBase::SIToFPOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::SIToFPOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SIToFPOp>,mlir::OpTrait::OneResult<mlir::arith::SIToFPOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SIToFPOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SIToFPOp>,mlir::OpTrait::OneOperand<mlir::arith::SIToFPOp>,mlir::OpTrait::OpInvariants<mlir::arith::SIToFPOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SIToFPOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::SIToFPOp>,mlir::CastOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::Elementwise<mlir::arith::SIToFPOp>,mlir::OpTrait::Scalarizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Vectorizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Tensorizable<mlir::arith::SIToFPOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SIToFPOp>,mlir::OpTrait::OneResult<mlir::arith::SIToFPOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SIToFPOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SIToFPOp>,mlir::OpTrait::OneOperand<mlir::arith::SIToFPOp>,mlir::OpTrait::OpInvariants<mlir::arith::SIToFPOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SIToFPOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::SIToFPOp>,mlir::CastOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::Elementwise<mlir::arith::SIToFPOp>,mlir::OpTrait::Scalarizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Vectorizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Tensorizable<mlir::arith::SIToFPOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::arith::SIToFPOp::verifyInvariantsImpl((mlir::arith::SIToFPOp *)&v10))
    && mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6)
    && mlir::impl::verifyCastInterfaceOp(a1, v7))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::arith::SIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.shli", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ShLIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376ED8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ShLIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShLIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShLIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::ShLIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShLIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShLIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShLIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.shli";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::ShLIOpGenericAdaptorBase::ShLIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::ShLIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::ShLIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.shrsi", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ShRSIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3779C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ShRSIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRSIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRSIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::ShRSIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRSIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRSIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRSIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.shrsi";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::ShRSIOpGenericAdaptorBase::ShRSIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::ShRSIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::ShRSIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.shrui", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377A90;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::ShRUIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::ShRUIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::ShRUIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::ShRUIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRUIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::ShRUIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::ShRUIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.shrui";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::ShRUIOpGenericAdaptorBase::ShRUIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::ShRUIOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::ShRUIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.subf", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SubFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C376FA0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SubFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::arith::AddFOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::arith::AddFOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::arith::AddFOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::arith::AddFOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  return mlir::arith::AddFOp::populateDefaultProperties(a2, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::arith::AddFOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::AddFOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubFOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathFlagsAttr;
  v2[1] = mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathAttrName;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::ArithFastMathInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::arith::ArithFastMathInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[282], v2);
}

uint64_t mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathFlagsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v3);
}

const char *mlir::arith::detail::ArithFastMathInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getFastMathAttrName()
{
  return "fastmath";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getShapeForUnroll;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubFOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubFOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubFOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.subf";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::SubFOpGenericAdaptorBase::SubFOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::SubFOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddFOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddFOp>,mlir::OpTrait::OneResult<mlir::arith::AddFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddFOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddFOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddFOp>,mlir::BytecodeOpInterface::Trait<mlir::arith::AddFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddFOp>,mlir::arith::ArithFastMathInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddFOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddFOp>,mlir::OpTrait::Elementwise<mlir::arith::AddFOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddFOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddFOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddFOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddFOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::SubFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::arith::ArithFastMathInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.subi", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377068;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SubIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SubIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SubIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferResultRanges(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::SubIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SubIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SubIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.subi";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::SubIOpGenericAdaptorBase::SubIOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::SubIOp::fold((uint64_t *)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::SubIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.truncf", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::TruncFOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377E78;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::TruncFOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncFOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncFOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncFOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncFOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncFOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::TruncFOpGenericAdaptorBase::TruncFOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::TruncFOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtFOp>,mlir::OpTrait::OneResult<mlir::arith::ExtFOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtFOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtFOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtFOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtFOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtFOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtFOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtFOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtFOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtFOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtFOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtFOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtFOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::arith::TruncFOp::verify((mlir::arith::TruncFOp *)&v4) != 0;
}

uint64_t mlir::Op<mlir::arith::TruncFOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.trunci", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377F40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::TruncIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::TruncIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::inferResultRanges(uint64_t a1, uint64_t a2, mlir::intrange *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::TruncIOp::inferResultRanges(&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::TruncIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::TruncIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::TruncIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::TruncIOpGenericAdaptorBase::TruncIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::TruncIOp::fold((uint64_t)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::ExtSIOp>,mlir::OpTrait::OneResult<mlir::arith::ExtSIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::ExtSIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::ExtSIOp>,mlir::OpTrait::OneOperand<mlir::arith::ExtSIOp>,mlir::OpTrait::OpInvariants<mlir::arith::ExtSIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::ExtSIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::ExtSIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::ExtSIOp>,mlir::CastOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::ExtSIOp>,mlir::OpTrait::Elementwise<mlir::arith::ExtSIOp>,mlir::OpTrait::Scalarizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Vectorizable<mlir::arith::ExtSIOp>,mlir::OpTrait::Tensorizable<mlir::arith::ExtSIOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::arith::TruncIOp::verify((mlir::arith::TruncIOp *)&v4) != 0;
}

uint64_t mlir::Op<mlir::arith::TruncIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::InferIntRangeInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.uitofp", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::UIToFPOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C378008;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::UIToFPOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::UIToFPOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::UIToFPOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::UIToFPOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::BitcastOp>::getShapeForUnroll(&v2, a2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::UIToFPOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::foldSingleResultHook<mlir::arith::UIToFPOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::UIToFPOpGenericAdaptorBase::UIToFPOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::UIToFPOp::fold(&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SIToFPOp>,mlir::OpTrait::OneResult<mlir::arith::SIToFPOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SIToFPOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SIToFPOp>,mlir::OpTrait::OneOperand<mlir::arith::SIToFPOp>,mlir::OpTrait::OpInvariants<mlir::arith::SIToFPOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SIToFPOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::arith::SIToFPOp>,mlir::CastOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SIToFPOp>,mlir::OpTrait::Elementwise<mlir::arith::SIToFPOp>,mlir::OpTrait::Scalarizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Vectorizable<mlir::arith::SIToFPOp>,mlir::OpTrait::Tensorizable<mlir::arith::SIToFPOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::arith::UIToFPOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::CastOpInterface::Trait,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.xori", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377130;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::XOrIOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::XOrIOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::XOrIOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferResultRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::XOrIOp::inferResultRanges((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::XOrIOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::XOrIOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::XOrIOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.xori";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::XOrIOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::arith::XOrIOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::arith::detail::XOrIOpGenericAdaptorBase::XOrIOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::arith::XOrIOp::fold((uint64_t *)&v12, (uint64_t)v13);
  unint64_t v9 = v8;
  if (v8 < 8 || a1 - 4 == (unsigned int *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::OpTrait::impl::foldCommutative((uint64_t)a1, a2, a3)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::AddIOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::AddIOp>,mlir::OpTrait::OneResult<mlir::arith::AddIOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::AddIOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::arith::AddIOp>,mlir::OpTrait::OpInvariants<mlir::arith::AddIOp>,mlir::OpTrait::IsCommutative<mlir::arith::AddIOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::AddIOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::AddIOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::AddIOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::arith::AddIOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::AddIOp>,mlir::OpTrait::Elementwise<mlir::arith::AddIOp>,mlir::OpTrait::Scalarizable<mlir::arith::AddIOp>,mlir::OpTrait::Vectorizable<mlir::arith::AddIOp>,mlir::OpTrait::Tensorizable<mlir::arith::AddIOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::AddIOp>>(a1, a2);
}

BOOL mlir::Op<mlir::arith::XOrIOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsCommutative,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::SameOperandsAndResultType,mlir::VectorUnrollOpInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"arith.select", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C377DB0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        char v11 = v13;
      }
      else {
        char v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::arith::SelectOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::arith::SelectOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::arith::SelectOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferResultRanges;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface]";
      unint64_t v14 = 78;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[342], v2);
}

uint64_t mlir::detail::InferIntRangeInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferResultRanges(int a1, uint64_t a2, mlir::ConstantIntRanges *this, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, char *), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::arith::SelectOp::inferResultRanges((mlir::anec::Convolution *)&v7, this, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getShapeForUnroll;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[316], v2);
}

void mlir::detail::VectorUnrollOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::getShapeForUnroll(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::VectorUnrollOpInterfaceTrait<mlir::arith::AddFOp>::getShapeForUnroll((mlir::anec::Convolution *)&v2, a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::SelectOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SelectOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::arith::SelectOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::arith::SelectOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::SelectOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "arith.select";
  v16[1] = 12;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::arith::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::arith::SelectOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v312 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v49 = v48;
    a1 = v312;
    if (v49)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v329 = 83;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v329;
      }
      int v52 = &v328[v51];
      unint64_t v53 = v329 - v51;
      if (v329 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v329 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v312;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v297 = v2;
    uint64_t v313 = a1;
    char v3 = (void *)&unk_267771000;
    int v58 = v57;
    uint64_t v2 = v297;
    a1 = v313;
    if (v58)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v329 = 81;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v329;
      }
      int v61 = &v328[v60];
      unint64_t v62 = v329 - v60;
      if (v329 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v329 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v297;
      a1 = v313;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v298 = v2;
    uint64_t v314 = a1;
    uint64_t v283 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v283;
    uint64_t v2 = v298;
    int v67 = v66;
    a1 = v314;
    if (v67)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v329 = 104;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v329;
      }
      int v70 = &v328[v69];
      unint64_t v71 = v329 - v69;
      if (v329 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v329 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v283;
      uint64_t v2 = v298;
      a1 = v314;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v299 = v2;
    uint64_t v315 = a1;
    uint64_t v270 = v6;
    uint64_t v284 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v270;
    uint64_t v4 = v284;
    int v76 = v75;
    uint64_t v2 = v299;
    a1 = v315;
    if (v76)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v329 = 86;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v329;
      }
      int v79 = &v328[v78];
      unint64_t v80 = v329 - v78;
      if (v329 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v329 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v270;
      uint64_t v4 = v284;
      uint64_t v2 = v299;
      a1 = v315;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v300 = v2;
    uint64_t v316 = a1;
    uint64_t v271 = v6;
    uint64_t v285 = v4;
    uint64_t v258 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v258;
    uint64_t v6 = v271;
    uint64_t v4 = v285;
    uint64_t v2 = v300;
    int v85 = v84;
    a1 = v316;
    if (v85)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<3>::Impl<Empty>]";
      unint64_t v329 = 90;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v329;
      }
      int v88 = &v328[v87];
      unint64_t v89 = v329 - v87;
      if (v329 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v329 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v258;
      uint64_t v6 = v271;
      uint64_t v4 = v285;
      uint64_t v2 = v300;
      a1 = v316;
    }
  }
  uint64_t v10 = v9[159];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v301 = v2;
    uint64_t v317 = a1;
    uint64_t v272 = v6;
    uint64_t v286 = v4;
    uint64_t v259 = v8;
    uint64_t v247 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v247;
    uint64_t v8 = v259;
    uint64_t v6 = v272;
    uint64_t v4 = v286;
    uint64_t v2 = v301;
    int v94 = v93;
    a1 = v317;
    if (v94)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v329 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v329;
      }
      int v97 = &v328[v96];
      unint64_t v98 = v329 - v96;
      if (v329 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v329 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v247;
      uint64_t v8 = v259;
      uint64_t v6 = v272;
      uint64_t v4 = v286;
      uint64_t v2 = v301;
      a1 = v317;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v302 = v2;
    uint64_t v318 = a1;
    uint64_t v273 = v6;
    uint64_t v287 = v4;
    uint64_t v260 = v8;
    uint64_t v237 = v12;
    uint64_t v248 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v237;
    uint64_t v10 = v248;
    uint64_t v8 = v260;
    uint64_t v6 = v273;
    uint64_t v4 = v287;
    uint64_t v2 = v302;
    int v103 = v102;
    a1 = v318;
    if (v103)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v329 = 95;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v329;
      }
      int v106 = &v328[v105];
      unint64_t v107 = v329 - v105;
      if (v329 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v329 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v237;
      uint64_t v10 = v248;
      uint64_t v8 = v260;
      uint64_t v6 = v273;
      uint64_t v4 = v287;
      uint64_t v2 = v302;
      a1 = v318;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v303 = v2;
    uint64_t v319 = a1;
    uint64_t v274 = v6;
    uint64_t v288 = v4;
    uint64_t v261 = v8;
    uint64_t v238 = v12;
    uint64_t v249 = v10;
    uint64_t v228 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v228;
    uint64_t v12 = v238;
    uint64_t v10 = v249;
    uint64_t v8 = v261;
    uint64_t v6 = v274;
    uint64_t v4 = v288;
    uint64_t v2 = v303;
    int v112 = v111;
    a1 = v319;
    if (v112)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v329 = 99;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v329;
      }
      int v115 = &v328[v114];
      unint64_t v116 = v329 - v114;
      if (v329 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v329 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v228;
      uint64_t v12 = v238;
      uint64_t v10 = v249;
      uint64_t v8 = v261;
      uint64_t v6 = v274;
      uint64_t v4 = v288;
      uint64_t v2 = v303;
      a1 = v319;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v304 = v2;
    uint64_t v320 = a1;
    uint64_t v275 = v6;
    uint64_t v289 = v4;
    uint64_t v262 = v8;
    uint64_t v239 = v12;
    uint64_t v250 = v10;
    uint64_t v220 = v16;
    uint64_t v229 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v220;
    uint64_t v14 = v229;
    uint64_t v12 = v239;
    uint64_t v10 = v250;
    uint64_t v8 = v262;
    uint64_t v6 = v275;
    uint64_t v4 = v289;
    uint64_t v2 = v304;
    int v121 = v120;
    a1 = v320;
    if (v121)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v329;
      }
      int v124 = &v328[v123];
      unint64_t v125 = v329 - v123;
      if (v329 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v329 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v220;
      uint64_t v14 = v229;
      uint64_t v12 = v239;
      uint64_t v10 = v250;
      uint64_t v8 = v262;
      uint64_t v6 = v275;
      uint64_t v4 = v289;
      uint64_t v2 = v304;
      a1 = v320;
    }
  }
  uint64_t v18 = v17[31];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v305 = v2;
    uint64_t v321 = a1;
    uint64_t v276 = v6;
    uint64_t v290 = v4;
    uint64_t v263 = v8;
    uint64_t v240 = v12;
    uint64_t v251 = v10;
    uint64_t v221 = v16;
    uint64_t v230 = v14;
    uint64_t v213 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v213;
    uint64_t v16 = v221;
    uint64_t v14 = v230;
    uint64_t v12 = v240;
    uint64_t v10 = v251;
    uint64_t v8 = v263;
    uint64_t v6 = v276;
    uint64_t v4 = v290;
    uint64_t v2 = v305;
    int v130 = v129;
    a1 = v321;
    if (v130)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferIntRangeInterface::Trait<Empty>]";
      unint64_t v329 = 92;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v329;
      }
      int v133 = &v328[v132];
      unint64_t v134 = v329 - v132;
      if (v329 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v329 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::InferIntRangeInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferIntRangeInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v213;
      uint64_t v16 = v221;
      uint64_t v14 = v230;
      uint64_t v12 = v240;
      uint64_t v10 = v251;
      uint64_t v8 = v263;
      uint64_t v6 = v276;
      uint64_t v4 = v290;
      uint64_t v2 = v305;
      a1 = v321;
    }
  }
  uint64_t v20 = v19[344];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v306 = v2;
    uint64_t v322 = a1;
    uint64_t v277 = v6;
    uint64_t v291 = v4;
    uint64_t v264 = v8;
    uint64_t v241 = v12;
    uint64_t v252 = v10;
    uint64_t v222 = v16;
    uint64_t v231 = v14;
    uint64_t v207 = v20;
    uint64_t v214 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v207;
    uint64_t v18 = v214;
    uint64_t v16 = v222;
    uint64_t v14 = v231;
    uint64_t v12 = v241;
    uint64_t v10 = v252;
    uint64_t v8 = v264;
    uint64_t v6 = v277;
    uint64_t v4 = v291;
    uint64_t v2 = v306;
    int v139 = v138;
    a1 = v322;
    if (v139)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Elementwise<Empty>]";
      unint64_t v329 = 83;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v329;
      }
      int v142 = &v328[v141];
      unint64_t v143 = v329 - v141;
      if (v329 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v329 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Elementwise<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Elementwise>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v207;
      uint64_t v18 = v214;
      uint64_t v16 = v222;
      uint64_t v14 = v231;
      uint64_t v12 = v241;
      uint64_t v10 = v252;
      uint64_t v8 = v264;
      uint64_t v6 = v277;
      uint64_t v4 = v291;
      uint64_t v2 = v306;
      a1 = v322;
    }
  }
  uint64_t v22 = v21[332];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v307 = v2;
    uint64_t v323 = a1;
    uint64_t v278 = v6;
    uint64_t v292 = v4;
    uint64_t v265 = v8;
    uint64_t v242 = v12;
    uint64_t v253 = v10;
    uint64_t v223 = v16;
    uint64_t v232 = v14;
    uint64_t v208 = v20;
    uint64_t v215 = v18;
    uint64_t v202 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v202;
    uint64_t v20 = v208;
    uint64_t v18 = v215;
    uint64_t v16 = v223;
    uint64_t v14 = v232;
    uint64_t v12 = v242;
    uint64_t v10 = v253;
    uint64_t v8 = v265;
    uint64_t v6 = v278;
    uint64_t v4 = v292;
    uint64_t v2 = v307;
    int v148 = v147;
    a1 = v323;
    if (v148)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Scalarizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v329;
      }
      uint64_t v151 = &v328[v150];
      unint64_t v152 = v329 - v150;
      if (v329 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v329 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Scalarizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Scalarizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v202;
      uint64_t v20 = v208;
      uint64_t v18 = v215;
      uint64_t v16 = v223;
      uint64_t v14 = v232;
      uint64_t v12 = v242;
      uint64_t v10 = v253;
      uint64_t v8 = v265;
      uint64_t v6 = v278;
      uint64_t v4 = v292;
      uint64_t v2 = v307;
      a1 = v323;
    }
  }
  uint64_t v24 = v23[334];
  BOOL v25 = &unk_267771000;
  {
    uint64_t v308 = v2;
    uint64_t v324 = a1;
    uint64_t v279 = v6;
    uint64_t v293 = v4;
    uint64_t v266 = v8;
    uint64_t v243 = v12;
    uint64_t v254 = v10;
    uint64_t v224 = v16;
    uint64_t v233 = v14;
    uint64_t v209 = v20;
    uint64_t v216 = v18;
    uint64_t v198 = v24;
    uint64_t v203 = v22;
    BOOL v25 = (void *)&unk_267771000;
    uint64_t v24 = v198;
    uint64_t v22 = v203;
    uint64_t v20 = v209;
    uint64_t v18 = v216;
    uint64_t v16 = v224;
    uint64_t v14 = v233;
    uint64_t v12 = v243;
    uint64_t v10 = v254;
    uint64_t v8 = v266;
    uint64_t v6 = v279;
    uint64_t v4 = v293;
    uint64_t v2 = v308;
    int v157 = v156;
    a1 = v324;
    if (v157)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Vectorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v158 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v158) {
        unint64_t v159 = v158;
      }
      else {
        unint64_t v159 = v329;
      }
      uint64_t v160 = &v328[v159];
      unint64_t v161 = v329 - v159;
      if (v329 - v159 >= 0x12) {
        uint64_t v162 = 18;
      }
      else {
        uint64_t v162 = v329 - v159;
      }
      unint64_t v163 = v161 - v162;
      if (v163 >= v163 - 1) {
        uint64_t v164 = v163 - 1;
      }
      else {
        uint64_t v164 = v163;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Vectorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Vectorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      BOOL v25 = (void *)&unk_267771000;
      uint64_t v24 = v198;
      uint64_t v22 = v203;
      uint64_t v20 = v209;
      uint64_t v18 = v216;
      uint64_t v16 = v224;
      uint64_t v14 = v233;
      uint64_t v12 = v243;
      uint64_t v10 = v254;
      uint64_t v8 = v266;
      uint64_t v6 = v279;
      uint64_t v4 = v293;
      uint64_t v2 = v308;
      a1 = v324;
    }
  }
  uint64_t v26 = v25[336];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v309 = v2;
    uint64_t v325 = a1;
    uint64_t v280 = v6;
    uint64_t v294 = v4;
    uint64_t v267 = v8;
    uint64_t v244 = v12;
    uint64_t v255 = v10;
    uint64_t v225 = v16;
    uint64_t v234 = v14;
    uint64_t v210 = v20;
    uint64_t v217 = v18;
    uint64_t v199 = v24;
    uint64_t v204 = v22;
    uint64_t v195 = v26;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v195;
    uint64_t v24 = v199;
    uint64_t v22 = v204;
    uint64_t v20 = v210;
    uint64_t v18 = v217;
    uint64_t v16 = v225;
    uint64_t v14 = v234;
    uint64_t v12 = v244;
    uint64_t v10 = v255;
    uint64_t v8 = v267;
    uint64_t v6 = v280;
    uint64_t v4 = v294;
    uint64_t v2 = v309;
    int v166 = v165;
    a1 = v325;
    if (v166)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Tensorizable<Empty>]";
      unint64_t v329 = 84;
      unint64_t v167 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v167) {
        unint64_t v168 = v167;
      }
      else {
        unint64_t v168 = v329;
      }
      unint64_t v169 = &v328[v168];
      unint64_t v170 = v329 - v168;
      if (v329 - v168 >= 0x12) {
        uint64_t v171 = 18;
      }
      else {
        uint64_t v171 = v329 - v168;
      }
      unint64_t v172 = v170 - v171;
      if (v172 >= v172 - 1) {
        uint64_t v173 = v172 - 1;
      }
      else {
        uint64_t v173 = v172;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Tensorizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Tensorizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v169[v171], v173);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v195;
      uint64_t v24 = v199;
      uint64_t v22 = v204;
      uint64_t v20 = v210;
      uint64_t v18 = v217;
      uint64_t v16 = v225;
      uint64_t v14 = v234;
      uint64_t v12 = v244;
      uint64_t v10 = v255;
      uint64_t v8 = v267;
      uint64_t v6 = v280;
      uint64_t v4 = v294;
      uint64_t v2 = v309;
      a1 = v325;
    }
  }
  uint64_t v28 = v27[338];
  __int16 v29 = &unk_267771000;
  {
    uint64_t v310 = v2;
    uint64_t v326 = a1;
    uint64_t v281 = v6;
    uint64_t v295 = v4;
    uint64_t v268 = v8;
    uint64_t v245 = v12;
    uint64_t v256 = v10;
    uint64_t v226 = v16;
    uint64_t v235 = v14;
    uint64_t v211 = v20;
    uint64_t v218 = v18;
    uint64_t v200 = v24;
    uint64_t v205 = v22;
    uint64_t v193 = v28;
    uint64_t v196 = v26;
    __int16 v29 = (void *)&unk_267771000;
    uint64_t v28 = v193;
    uint64_t v26 = v196;
    uint64_t v24 = v200;
    uint64_t v22 = v205;
    uint64_t v20 = v211;
    uint64_t v18 = v218;
    uint64_t v16 = v226;
    uint64_t v14 = v235;
    uint64_t v12 = v245;
    uint64_t v10 = v256;
    uint64_t v8 = v268;
    uint64_t v6 = v281;
    uint64_t v4 = v295;
    uint64_t v2 = v310;
    int v175 = v174;
    a1 = v326;
    if (v175)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VectorUnrollOpInterface::Trait<Empty>]";
      unint64_t v329 = 93;
      unint64_t v176 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v176) {
        unint64_t v177 = v176;
      }
      else {
        unint64_t v177 = v329;
      }
      uint64_t v178 = &v328[v177];
      unint64_t v179 = v329 - v177;
      if (v329 - v177 >= 0x12) {
        uint64_t v180 = 18;
      }
      else {
        uint64_t v180 = v329 - v177;
      }
      unint64_t v181 = v179 - v180;
      if (v181 >= v181 - 1) {
        uint64_t v182 = v181 - 1;
      }
      else {
        uint64_t v182 = v181;
      }
      mlir::detail::TypeIDResolver<mlir::VectorUnrollOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::VectorUnrollOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v178[v180], v182);
      __int16 v29 = (void *)&unk_267771000;
      uint64_t v28 = v193;
      uint64_t v26 = v196;
      uint64_t v24 = v200;
      uint64_t v22 = v205;
      uint64_t v20 = v211;
      uint64_t v18 = v218;
      uint64_t v16 = v226;
      uint64_t v14 = v235;
      uint64_t v12 = v245;
      uint64_t v10 = v256;
      uint64_t v8 = v268;
      uint64_t v6 = v281;
      uint64_t v4 = v295;
      uint64_t v2 = v310;
      a1 = v326;
    }
  }
  uint64_t v30 = v29[330];
  long long v31 = &unk_267771000;
  {
    uint64_t v311 = v2;
    uint64_t v327 = a1;
    uint64_t v282 = v6;
    uint64_t v296 = v4;
    uint64_t v269 = v8;
    uint64_t v246 = v12;
    uint64_t v257 = v10;
    uint64_t v227 = v16;
    uint64_t v236 = v14;
    uint64_t v212 = v20;
    uint64_t v219 = v18;
    uint64_t v201 = v24;
    uint64_t v206 = v22;
    uint64_t v194 = v28;
    uint64_t v197 = v26;
    uint64_t v192 = v30;
    long long v31 = (void *)&unk_267771000;
    uint64_t v30 = v192;
    uint64_t v28 = v194;
    uint64_t v26 = v197;
    uint64_t v24 = v201;
    uint64_t v22 = v206;
    uint64_t v20 = v212;
    uint64_t v18 = v219;
    uint64_t v16 = v227;
    uint64_t v14 = v236;
    uint64_t v12 = v246;
    uint64_t v10 = v257;
    uint64_t v8 = v269;
    uint64_t v6 = v282;
    uint64_t v4 = v296;
    uint64_t v2 = v311;
    int v184 = v183;
    a1 = v327;
    if (v184)
    {
      uint64_t v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v329 = 90;
      unint64_t v185 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v185) {
        unint64_t v186 = v185;
      }
      else {
        unint64_t v186 = v329;
      }
      unint64_t v187 = &v328[v186];
      unint64_t v188 = v329 - v186;
      if (v329 - v186 >= 0x12) {
        uint64_t v189 = 18;
      }
      else {
        uint64_t v189 = v329 - v186;
      }
      unint64_t v190 = v188 - v189;
      if (v190 >= v190 - 1) {
        uint64_t v191 = v190 - 1;
      }
      else {
        uint64_t v191 = v190;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v187[v189], v191);
      long long v31 = (void *)&unk_267771000;
      uint64_t v30 = v192;
      uint64_t v28 = v194;
      uint64_t v26 = v197;
      uint64_t v24 = v201;
      uint64_t v22 = v206;
      uint64_t v20 = v212;
      uint64_t v18 = v219;
      uint64_t v16 = v227;
      uint64_t v14 = v236;
      uint64_t v12 = v246;
      uint64_t v10 = v257;
      uint64_t v8 = v269;
      uint64_t v6 = v282;
      uint64_t v4 = v296;
      uint64_t v2 = v311;
      a1 = v327;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v31[37] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::arith::SelectOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SelectOp>,mlir::OpTrait::OneResult<mlir::arith::SelectOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SelectOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::OpInvariants<mlir::arith::SelectOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SelectOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SelectOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::SelectOp>,mlir::OpTrait::Elementwise<mlir::arith::SelectOp>,mlir::OpTrait::Scalarizable<mlir::arith::SelectOp>,mlir::OpTrait::Vectorizable<mlir::arith::SelectOp>,mlir::OpTrait::Tensorizable<mlir::arith::SelectOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::SelectOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::arith::SelectOp::verify((mlir::arith::SelectOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::arith::SelectOp>,mlir::OpTrait::OneResult<mlir::arith::SelectOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::ZeroSuccessors<mlir::arith::SelectOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::arith::SelectOp>,mlir::OpTrait::OpInvariants<mlir::arith::SelectOp>,mlir::ConditionallySpeculatable::Trait<mlir::arith::SelectOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::arith::SelectOp>,mlir::MemoryEffectOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferIntRangeInterface::Trait<mlir::arith::SelectOp>,mlir::OpTrait::Elementwise<mlir::arith::SelectOp>,mlir::OpTrait::Scalarizable<mlir::arith::SelectOp>,mlir::OpTrait::Vectorizable<mlir::arith::SelectOp>,mlir::OpTrait::Tensorizable<mlir::arith::SelectOp>,mlir::VectorUnrollOpInterface::Trait<mlir::arith::SelectOp>,mlir::InferTypeOpInterface::Trait<mlir::arith::SelectOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3)
    && (uint64_t v7 = a1, mlir::arith::SelectOp::verifyInvariantsImpl((mlir::arith::SelectOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyElementwise(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::arith::SelectOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferIntRangeInterface::Trait,mlir::OpTrait::Elementwise,mlir::OpTrait::Scalarizable,mlir::OpTrait::Vectorizable,mlir::OpTrait::Tensorizable,mlir::VectorUnrollOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void mlir::Dialect::addAttribute<mlir::arith::FastMathFlagsAttr>(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v24, 0, sizeof(v24));
  uint64_t v22 = v24;
  int v23 = 0;
  uint64_t v11 = a1;
  uint64_t v12 = v14;
  uint64_t v13 = 0x300000000;
  unint64_t v16 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v15[0] = (llvm *)mlir::detail::StorageUserBase<mlir::arith::FastMathFlagsAttr,mlir::Attribute,mlir::arith::detail::FastMathFlagsAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v17 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_5arith17FastMathFlagsAttrES2_NSD_6detail24FastMathFlagsAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v18 = &v10;
  uint64_t v19 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_5arith17FastMathFlagsAttrES2_NSC_6detail24FastMathFlagsAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v20 = &v9;
  uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, (uint64_t)&v11);
  char v3 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        uint64_t v4 = v15;
      }
      else {
        uint64_t v4 = (llvm **)v15[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  unint64_t v5 = v12;
  if (v13)
  {
    uint64_t v6 = 16 * v13;
    uint64_t v7 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v12;
  }
  if (v5 != v14) {
    free(v5);
  }
  mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

uint64_t mlir::detail::StorageUserBase<mlir::arith::FastMathFlagsAttr,mlir::Attribute,mlir::arith::detail::FastMathFlagsAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<BOOL (* const)(mlir::TypeID)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_5arith17FastMathFlagsAttrES2_NSC_6detail24FastMathFlagsAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unsigned int v7 = v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::arith::detail::FastMathFlagsAttrStorage,mlir::arith::FastMathFlags>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir5arith6detail24FastMathFlagsAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17FastMathFlagsAttrEJNS2_13FastMathFlagsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id, &v7);
}

void anonymous namespace'::ArithInlinerInterface::~ArithInlinerInterface(_anonymous_namespace_::ArithInlinerInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::DialectInlinerInterface::isLegalToInline(mlir::DialectInlinerInterface *this, Operation *a2, Operation *a3)
{
  return 0;
}

uint64_t mlir::DialectInlinerInterface::isLegalToInline()
{
  return 0;
}

uint64_t anonymous namespace'::ArithInlinerInterface::isLegalToInline()
{
  return 1;
}

uint64_t mlir::DialectInlinerInterface::shouldAnalyzeRecursively(mlir::DialectInlinerInterface *this, Operation *a2)
{
  return 1;
}

uint64_t mlir::DialectInlinerInterface::materializeCallConversion()
{
  return 0;
}

uint64_t mlir::DialectInlinerInterface::handleArgument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t mlir::DialectInlinerInterface::handleResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ub::PoisonAttrInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ub::PoisonAttrInterface]";
      unint64_t v22 = 79;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ub::PoisonAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[386];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unsigned int v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void *mlir::arith::ConstantOp::inferResultRanges(mlir::arith::ConstantOp *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void **), uint64_t a5)
{
  __n128 result = mlir::arith::ConstantOp::getValue(a1);
  if (result)
  {
    unint64_t v9 = *(void **)(*result + 136);
    BOOL v10 = v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    int v11 = v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? result : 0;
    int v23 = v11;
    if (v10)
    {
      mlir::IntegerAttr::getValue((uint64_t)&v23, (llvm::APInt *)&v21);
      uint64_t v12 = mlir::anec::Convolution::getResult(a1);
      mlir::ConstantIntRanges::constant((mlir::ConstantIntRanges *)&v21, (uint64_t)&v13);
      __n128 result = (void *)a4(a5, v12, &v13);
      if (v20 >= 0x41)
      {
        __n128 result = v19;
        if (v19) {
          __n128 result = (void *)MEMORY[0x21667D390](v19, 0x1000C8000313F17);
        }
      }
      if (v18 >= 0x41)
      {
        __n128 result = v17;
        if (v17) {
          __n128 result = (void *)MEMORY[0x21667D390](v17, 0x1000C8000313F17);
        }
      }
      if (v16 >= 0x41)
      {
        __n128 result = v15;
        if (v15) {
          __n128 result = (void *)MEMORY[0x21667D390](v15, 0x1000C8000313F17);
        }
      }
      if (v14 >= 0x41)
      {
        __n128 result = v13;
        if (v13) {
          __n128 result = (void *)MEMORY[0x21667D390](v13, 0x1000C8000313F17);
        }
      }
      if (v22 >= 0x41)
      {
        __n128 result = v21;
        if (v21) {
          return (void *)MEMORY[0x21667D390](v21, 0x1000C8000313F17);
        }
      }
    }
  }
  return result;
}

uint64_t mlir::arith::AddIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferAdd(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::SubIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferSub(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::MulIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMul(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::DivUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferDivU(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::DivSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferDivS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::CeilDivUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferCeilDivU(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::CeilDivSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferCeilDivS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::FloorDivSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferFloorDivS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::RemUIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferRemU(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::RemSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferRemS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::AndIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferAnd(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::OrIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferOr(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::XOrIOp::inferResultRanges(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferXor(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::MaxSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMaxS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::MaxUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMaxU(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::MinSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMinS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::MinUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferMinU(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::ExtUIOp::inferResultRanges(void *a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  StorageBitwidth = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *a1 - 16;
  mlir::intrange::extUIRange(a2, StorageBitwidth, &v12);
  uint64_t result = a4(a5, v10, &v12);
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      return MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::ExtSIOp::inferResultRanges(void *a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  StorageBitwidth = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *a1 - 16;
  mlir::intrange::extSIRange(a2, StorageBitwidth, &v12);
  uint64_t result = a4(a5, v10, &v12);
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      return MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::TruncIOp::inferResultRanges(void *a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  StorageBitwidth = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *a1 - 16;
  mlir::intrange::truncRange(a2, StorageBitwidth, &v12);
  uint64_t result = a4(a5, v10, &v12);
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      return MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::IndexCastOp::inferResultRanges(uint64_t a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  unint64_t v8 = *(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  unsigned int StorageBitwidth = mlir::ConstantIntRanges::getStorageBitwidth(*(void *)(*(void *)(*(void *)(*(void *)a1 + 72)
                                                                                      + 24)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(v8);
  if (StorageBitwidth < v10)
  {
    uint64_t v11 = *(void *)a1 - 16;
    mlir::intrange::extSIRange(a2, v10, &v14);
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)a1 - 16;
  if (StorageBitwidth > v10)
  {
    mlir::intrange::truncRange(a2, v10, &v14);
LABEL_5:
    uint64_t result = a4(a5, v11, &v14);
    if (v21 >= 0x41)
    {
      uint64_t result = v20;
      if (v20) {
        uint64_t result = MEMORY[0x21667D390](v20, 0x1000C8000313F17);
      }
    }
    if (v19 >= 0x41)
    {
      uint64_t result = v18;
      if (v18) {
        uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
      }
    }
    if (v17 >= 0x41)
    {
      uint64_t result = v16;
      if (v16) {
        uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
      }
    }
    if (v15 >= 0x41)
    {
      uint64_t result = v14;
      if (v14) {
        return MEMORY[0x21667D390](v14, 0x1000C8000313F17);
      }
    }
    return result;
  }

  return a4(a5, v11, (uint64_t *)a2);
}

uint64_t mlir::arith::IndexCastUIOp::inferResultRanges(uint64_t a1, mlir::intrange *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  unint64_t v8 = *(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  unsigned int StorageBitwidth = mlir::ConstantIntRanges::getStorageBitwidth(*(void *)(*(void *)(*(void *)(*(void *)a1 + 72)
                                                                                      + 24)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (const mlir::ConstantIntRanges *)mlir::ConstantIntRanges::getStorageBitwidth(v8);
  if (StorageBitwidth < v10)
  {
    uint64_t v11 = *(void *)a1 - 16;
    mlir::intrange::extUIRange(a2, v10, &v14);
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)a1 - 16;
  if (StorageBitwidth > v10)
  {
    mlir::intrange::truncRange(a2, v10, &v14);
LABEL_5:
    uint64_t result = a4(a5, v11, &v14);
    if (v21 >= 0x41)
    {
      uint64_t result = v20;
      if (v20) {
        uint64_t result = MEMORY[0x21667D390](v20, 0x1000C8000313F17);
      }
    }
    if (v19 >= 0x41)
    {
      uint64_t result = v18;
      if (v18) {
        uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
      }
    }
    if (v17 >= 0x41)
    {
      uint64_t result = v16;
      if (v16) {
        uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
      }
    }
    if (v15 >= 0x41)
    {
      uint64_t result = v14;
      if (v14) {
        return MEMORY[0x21667D390](v14, 0x1000C8000313F17);
      }
    }
    return result;
  }

  return a4(a5, v11, (uint64_t *)a2);
}

uint64_t mlir::arith::CmpIOp::inferResultRanges(mlir::arith::CmpIOp *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t Predicate = mlir::arith::CmpIOp::getPredicate(a1);
  unsigned int v25 = 1;
  uint64_t v24 = 0;
  unsigned int v23 = 1;
  uint64_t v22 = 1;
  unsigned __int16 v10 = mlir::intrange::evaluatePred(Predicate, (mlir::ConstantIntRanges *)a2, (ZinSpatialSplitTransform *)(a2 + 64));
  if (v10 >= 0x100u)
  {
    if ((_BYTE)v10)
    {
      uint64_t v11 = &v25;
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v11 = &v23;
      uint64_t v22 = 0;
    }
    *uint64_t v11 = 1;
  }
  uint64_t v12 = mlir::anec::Convolution::getResult(a1);
  mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v24, (const llvm::APInt *)&v22, &v14);
  uint64_t result = a4(a5, v12, &v14);
  if (v21 >= 0x41)
  {
    uint64_t result = v20;
    if (v20) {
      uint64_t result = MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v23 >= 0x41)
  {
    uint64_t result = v22;
    if (v22) {
      uint64_t result = MEMORY[0x21667D390](v22, 0x1000C8000313F17);
    }
  }
  if (v25 >= 0x41)
  {
    uint64_t result = v24;
    if (v24) {
      return MEMORY[0x21667D390](v24, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::SelectOp::inferResultRanges(mlir::anec::Convolution *a1, mlir::ConstantIntRanges *this, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, char *), uint64_t a5)
{
  mlir::ConstantIntRanges::getConstantValue((uint64_t)this, (uint64_t)&v22);
  if (v24)
  {
    unsigned int v9 = v23;
    if (v23 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v22) != v9) {
        goto LABEL_4;
      }
    }
    else if (v22)
    {
LABEL_4:
      uint64_t v10 = mlir::anec::Convolution::getResult(a1);
      uint64_t v11 = (char *)this + 64;
LABEL_19:
      uint64_t result = a4(a5, v10, v11);
      goto LABEL_20;
    }
    uint64_t v10 = mlir::anec::Convolution::getResult(a1);
    uint64_t v11 = (char *)this + 128;
    goto LABEL_19;
  }
  uint64_t v12 = mlir::anec::Convolution::getResult(a1);
  mlir::ConstantIntRanges::rangeUnion((mlir::ConstantIntRanges *)((char *)this + 64), (mlir::ConstantIntRanges *)((char *)this + 128), &v14);
  uint64_t result = a4(a5, v12, (char *)&v14);
  if (v21 >= 0x41)
  {
    uint64_t result = v20;
    if (v20) {
      uint64_t result = MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
  }
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
LABEL_20:
  if (v24 && v23 >= 0x41)
  {
    uint64_t result = v22;
    if (v22) {
      return MEMORY[0x21667D390](v22, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::ShLIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferShl(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::ShRUIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinIrHalH13g *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferShrU(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::arith::ShRSIOp::inferResultRanges(mlir::anec::Convolution *a1, ZinSpatialSplitTransform *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t v8 = mlir::anec::Convolution::getResult(a1);
  mlir::intrange::inferShrS(a2, &v10);
  uint64_t result = a4(a5, v8, &v10);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x21667D390](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
  if (v13 >= 0x41)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    }
  }
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      return MEMORY[0x21667D390](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::getPositionsOfShapeOne@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  int v4 = result;
  if (a3 > 0x39) {
    operator new();
  }
  unint64_t v6 = (a3 << 58) | 1;
  *a4 = v6;
  if (a3 && result)
  {
    unint64_t v7 = 0;
    do
    {
      if (*(void *)(a2 + 8 * v7) == 1)
      {
        if (v6)
        {
          unint64_t v6 = v6 & 0xFC00000000000000 | (2
                                          * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << v7)) & ~(-1 << (v6 >> 58)))) | 1;
          *a4 = v6;
        }
        else
        {
          *(void *)(*(void *)v6 + 8 * (v7 >> 6)) |= 1 << v7;
        }
        --v4;
      }
      ++v7;
    }
    while (v7 < a3 && v4);
  }
  return result;
}

char *mlir::getValueOrCreateConstantIndexOp(mlir::IndexType **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)(a3 & 0xFFFFFFFFFFFFFFF8);
  if ((a3 & 4) != 0 && v5) {
    return v5;
  }
  if ((a3 & 4) != 0) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_UNKNOWN **)(*(void *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    unint64_t v7 = 0;
  }
  unint64_t v12 = v7;
  mlir::IntegerAttr::getValue((uint64_t)&v12, (llvm::APInt *)&v9);
  uint64_t v8 = (mlir::MLIRContext *)(v10 > 0x40 ? *v9 : (uint64_t)((void)v9 << -(uint64_t)v10) >> -(uint64_t)v10);
  unsigned int v11 = v8;
  uint64_t v5 = (char *)mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, a2, &v11) - 16;
  if (v10 < 0x41 || !v9) {
    return v5;
  }
  MEMORY[0x21667D390](v9, 0x1000C8000313F17);
  return v5;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(mlir::IndexType **a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"arith.constant";
    v15[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::arith::ConstantIndexOp::build(a1, (uint64_t)v17, *a3);
  unsigned int v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (!mlir::arith::ConstantIndexOp::classof((BOOL)v9, v10)) {
    unsigned int v9 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v9;
}

void mlir::getValueOrCreateConstantIndexOp(mlir::IndexType **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v28[4] = *MEMORY[0x263EF8340];
  unint64_t v10 = 8 * a4;
  unsigned int v11 = v28;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  if ((unint64_t)(8 * a4) < 0x21)
  {
    int v12 = 0;
    unsigned int v13 = v28;
    if (!a4) {
      goto LABEL_21;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, (8 * a4) >> 3, 8);
    int v12 = v27;
    unsigned int v13 = v26;
    if (!a4) {
      goto LABEL_21;
    }
  }
  __int16 v14 = &v13[v12];
  unint64_t v15 = v10;
  do
  {
    unint64_t v16 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if ((*a3 & 4) == 0 || !v16)
    {
      if ((*a3 & 4) != 0) {
        unint64_t v16 = 0;
      }
      if (*(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        unint64_t v16 = 0;
      }
      unint64_t v25 = v16;
      mlir::IntegerAttr::getValue((uint64_t)&v25, (llvm::APInt *)&v22);
      if (v23 > 0x40) {
        uint64_t v17 = *v22;
      }
      else {
        uint64_t v17 = (uint64_t)((void)v22 << -(uint64_t)v23) >> -(uint64_t)v23;
      }
      char v24 = (mlir::MLIRContext *)v17;
      uint64_t v18 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, a2, &v24);
      if (v23 >= 0x41 && v22) {
        MEMORY[0x21667D390](v22, 0x1000C8000313F17);
      }
      unint64_t v16 = (unint64_t)v18 - 16;
    }
    *v14++ = v16;
    ++a3;
    v15 -= 8;
  }
  while (v15);
  int v12 = v27;
  unsigned int v13 = v26;
  unsigned int v11 = v28;
LABEL_21:
  *(void *)a5 = a5 + 16;
  *(void *)(a5 + 8) = 0x600000000;
  unint64_t v19 = v12 + (v10 >> 3);
  LODWORD(v27) = v19;
  if (v19 && &v26 != (void **)a5)
  {
    if (v13 == v28)
    {
      unsigned int v21 = v12 + (v10 >> 3);
      if (v19 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v19, 8),
            unsigned int v21 = v27,
            unsigned int v11 = v26,
            v27))
      {
        memcpy(*(void **)a5, v11, 8 * v21);
        unsigned int v11 = v26;
      }
      *(_DWORD *)(a5 + 8) = v19;
    }
    else
    {
      *(void *)a5 = v13;
      int v20 = HIDWORD(v27);
      *(_DWORD *)(a5 + 8) = v19;
      *(_DWORD *)(a5 + 12) = v20;
      uint64_t v26 = v28;
      HIDWORD(v27) = 0;
    }
    LODWORD(v27) = 0;
    unsigned int v13 = v11;
  }
  if (v13 != v28) {
    free(v13);
  }
}

uint64_t mlir::detail::Parser::parseAffineMapOrIntegerSetReference(mlir::detail::Parser *this, mlir::AffineMap *a2, mlir::IntegerSet *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v5 = (mlir::MLIRContext ***)*((void *)this + 1);
  uint64_t v26 = **v5;
  uint64_t v27 = v5;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  long long v31 = v33;
  uint64_t v32 = *(void *)"";
  int v18 = 0;
  int v19 = 0;
  *(void *)&long long v34 = &v19;
  *((void *)&v34 + 1) = &v26;
  unint64_t v6 = v27;
  int v7 = *((_DWORD *)v27 + 14);
  if (v7 == 22)
  {
    *(void *)&long long v34 = &v18;
    *((void *)&v34 + 1) = &v26;
    unint64_t v6 = v27;
    if (*((_DWORD *)v27 + 14) != 13)
    {
LABEL_5:
      *(void *)&long long v34 = "expected '->' or ':'";
      __int16 v36 = 259;
      if (mlir::detail::Parser::parseToken((uint64_t)&v26, 15, (uint64_t)&v34))
      {
        int v8 = v18;
        int v9 = v19;
        *(void *)&long long v34 = v35;
        *((void *)&v34 + 1) = *(void *)"";
        unint64_t v22[2] = &v23;
        unsigned int v23 = &v25;
        long long v24 = xmmword_211ED5570;
        v22[0] = &v26;
        v22[1] = &v34;
        {
          if (DWORD2(v34))
          {
            *(void *)a3 = mlir::IntegerSet::get(v9, v8, (mlir::AffineExpr *)v34, DWORD2(v34), (uint64_t)v23, v24);
            uint64_t v11 = 1;
            int v12 = v23;
            if (v23 == &v25) {
              goto LABEL_10;
            }
            goto LABEL_9;
          }
          uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(0, **v27, v10);
          uint64_t v11 = 1;
          char v20 = 1;
          *(void *)a3 = mlir::IntegerSet::get(v9, v8, (mlir::AffineExpr *)&AffineConstantExpr, 1, (uint64_t)&v20, 1);
          int v12 = v23;
          if (v23 == &v25)
          {
LABEL_10:
            unsigned int v13 = (void *)v34;
            if ((void *)v34 == v35) {
              goto LABEL_17;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v11 = 0;
          int v12 = v23;
          if (v23 == &v25) {
            goto LABEL_10;
          }
        }
LABEL_9:
        free(v12);
        goto LABEL_10;
      }
LABEL_12:
      uint64_t v11 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    int v18 = 0;
    if (v7 != 13) {
      goto LABEL_5;
    }
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 1), (uint64_t)&v34);
  __int16 v14 = v27;
  *(_OWORD *)(v27 + 7) = v34;
  v14[9] = (mlir::MLIRContext **)v35[0];
  int v16 = v18;
  int v15 = v19;
  *(void *)&long long v34 = v35;
  *((void *)&v34 + 1) = *(void *)"";
  unsigned int v23 = &v26;
  *(void *)&long long v24 = &v34;
  {
    *(void *)a2 = mlir::AffineMap::get(v15, v16, v34, DWORD2(v34), **v27);
    uint64_t v11 = 1;
    unsigned int v13 = (void *)v34;
    if ((void *)v34 == v35) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  unsigned int v13 = (void *)v34;
  if ((void *)v34 != v35) {
LABEL_16:
  }
    free(v13);
LABEL_17:
  if (v31 != v33) {
    free(v31);
  }
  return v11;
}

uint64_t mlir::detail::Parser::parseAffineMapReference(mlir::detail::Parser *this, mlir::AffineMap *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  uint64_t v17 = 0;
  if (!mlir::detail::Parser::parseAffineMapOrIntegerSetReference(this, a2, (mlir::IntegerSet *)&v17)) {
    return 0;
  }
  if (!v17) {
    return 1;
  }
  int v15 = "expected AffineMap, but got IntegerSet";
  __int16 v16 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v15, v18);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
  if (v18[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
  }
  if (v25)
  {
    unint64_t v6 = __p;
    if (__p)
    {
      int v7 = v24;
      int v8 = __p;
      if (v24 != __p)
      {
        do
          int v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        int v8 = __p;
      }
      long long v24 = v6;
      operator delete(v8);
    }
    int v9 = v21;
    if (v21)
    {
      unint64_t v10 = v22;
      uint64_t v11 = v21;
      if (v22 != v21)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *unint64_t v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v21;
      }
      uint64_t v22 = v9;
      operator delete(v11);
    }
    if (v19 != &v20) {
      free(v19);
    }
  }
  return v5;
}

BOOL mlir::detail::Parser::parseAffineExprReference(uint64_t a1, void *__src, uint64_t a3, uint64_t *a4)
{
  unsigned int v7 = 0;
  v19[12] = *MEMORY[0x263EF8340];
  int v8 = *(void ***)(a1 + 8);
  v13[0] = **v8;
  v13[1] = v8;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v9 = 3 * a3;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((24 * a3) >> 3);
  uint64_t v16 = 0;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (v10 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, 0xAAAAAAAAAAAAAAABLL * ((24 * a3) >> 3), 24);
    unsigned int v7 = v18;
  }
  if (a3)
  {
    memcpy((char *)v17 + 24 * v7, __src, 8 * v9);
    unsigned int v7 = v18;
  }
  LODWORD(v18) = v7 + v10;
  *a4 = v11;
  if (v17 != v19) {
    free(v17);
  }
  return v11 != 0;
}

uint64_t mlir::detail::Parser::parseIntegerSetReference(mlir::detail::Parser *this, mlir::IntegerSet *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  uint64_t v17 = 0;
  if (!mlir::detail::Parser::parseAffineMapOrIntegerSetReference(this, (mlir::AffineMap *)&v17, a2)) {
    return 0;
  }
  if (!v17) {
    return 1;
  }
  uint64_t v15 = "expected IntegerSet, but got AffineMap";
  __int16 v16 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, OCGSize, (uint64_t)&v15, v18);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
  if (v18[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
  }
  if (v25)
  {
    unint64_t v6 = __p;
    if (__p)
    {
      unsigned int v7 = v24;
      int v8 = __p;
      if (v24 != __p)
      {
        do
          unsigned int v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        int v8 = __p;
      }
      long long v24 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v21;
    if (v21)
    {
      unint64_t v10 = v22;
      uint64_t v11 = v21;
      if (v22 != v21)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *unint64_t v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v21;
      }
      uint64_t v22 = v9;
      operator delete(v11);
    }
    if (v19 != &v20) {
      free(v19);
    }
  }
  return v5;
}

uint64_t mlir::detail::Parser::parseAffineMapOfSSAIds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  v22[4] = *MEMORY[0x263EF8340];
  unint64_t v6 = *(uint64_t ***)(a1 + 8);
  uint64_t v11 = **v6;
  uint64_t v12 = v6;
  char v13 = 1;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = 0;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  v10[0] = &v11;
  v10[1] = &v20;
  {
    *a2 = mlir::AffineMap::get(v16, (int)v18 - (int)v16, (uint64_t)v20, v21, (void *)**v12);
    uint64_t v7 = 1;
    int v8 = v20;
    if (v20 == v22) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  int v8 = v20;
  if (v20 != v22) {
LABEL_3:
  }
    free(v8);
LABEL_4:
  if (v17 != v19) {
    free(v17);
  }
  return v7;
}

BOOL mlir::detail::Parser::parseAffineExprOfSSAIds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v15[12] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void ***)(a1 + 8);
  v8[0] = **v5;
  v8[1] = v5;
  char v9 = 1;
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = 0;
  char v13 = v15;
  uint64_t v14 = 0x400000000;
  *a2 = v6;
  if (v13 != v15) {
    free(v13);
  }
  return v6 != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::AffineParser::parseDimIdList(unsigned int &)::$_0>(unsigned int **a1, uint64_t a2, mlir::MLIRContext *a3)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = (mlir *)**a1;
  _DWORD *v3 = v5 + 1;
  uint64_t AffineDimExpr = mlir::getAffineDimExpr(v5, ***(mlir::MLIRContext ****)(v4 + 8), a3);
}

uint64_t anonymous namespace'::AffineParser::parseIdentifierDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
  {
    int v8 = (const void *)v4[8];
    size_t v7 = v4[9];
    uint64_t v9 = a1 + 48;
    uint64_t v10 = *(void *)(a1 + 48);
    unsigned int v11 = *(_DWORD *)(a1 + 56);
    if (!v11)
    {
LABEL_28:
      mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v43);
      uint64_t v23 = *(void *)(a1 + 8);
      *(_OWORD *)(v23 + 56) = v43;
      *(void *)(v23 + 72) = v44;
      *(void *)&long long v43 = v8;
      *((void *)&v43 + 1) = v7;
      uint64_t v44 = a2;
      uint64_t v24 = *(unsigned int *)(a1 + 56);
      unint64_t v25 = *(void *)(a1 + 48);
      uint64_t v26 = (char *)&v43;
      if (v24 >= *(_DWORD *)(a1 + 60))
      {
        unint64_t v36 = v24 + 1;
        BOOL v37 = v25 + 24 * v24 > (unint64_t)&v43;
        if (v25 <= (unint64_t)&v43 && v37)
        {
          unint64_t v38 = (char *)&v43 - v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 64), v36, 24);
          unint64_t v25 = *(void *)(a1 + 48);
          uint64_t v26 = &v38[v25];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 64), v36, 24);
          unint64_t v25 = *(void *)(a1 + 48);
          uint64_t v26 = (char *)&v43;
        }
      }
      uint64_t v27 = v25 + 24 * *(unsigned int *)(a1 + 56);
      long long v28 = *(_OWORD *)v26;
      *(void *)(v27 + 16) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v27 = v28;
      ++*(_DWORD *)(a1 + 56);
      return 1;
    }
LABEL_7:
    uint64_t v12 = v10 + 24 * v11;
    while (*(void *)(v10 + 8) != v7 || v7 && memcmp(*(const void **)v10, v8, v7))
    {
      v10 += 24;
      if (v10 == v12) {
        goto LABEL_28;
      }
    }
    __int16 v40 = 1283;
    v39[0] = "redefinition of identifier '";
    v39[2] = v8;
    v39[3] = v7;
    v41[0] = v39;
    v41[2] = "'";
    __int16 v42 = 770;
    mlir::detail::Parser::emitError(a1, (uint64_t)v41, &v43);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
    if ((void)v43) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
    }
    if (v51)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v50;
        uint64_t v16 = __p;
        if (v50 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        unint64_t v50 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v47;
      if (!v47) {
        goto LABEL_46;
      }
      uint64_t v18 = v48;
      int v19 = v47;
      if (v48 == v47)
      {
LABEL_45:
        int v48 = v17;
        operator delete(v19);
LABEL_46:
        if (v45 != &v46) {
          free(v45);
        }
        return v13;
      }
      do
      {
        uint64_t v21 = *--v18;
        uint64_t v20 = v21;
        void *v18 = 0;
        if (v21) {
          MEMORY[0x21667D390](v20, 0x1000C8077774924);
        }
      }
      while (v18 != v17);
LABEL_44:
      int v19 = v47;
      goto LABEL_45;
    }
    return v13;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    uint64_t v4 = *(void **)(a1 + 8);
    int v8 = (const void *)v4[8];
    size_t v7 = v4[9];
    uint64_t v9 = a1 + 48;
    uint64_t v10 = *(void *)(a1 + 48);
    unsigned int v11 = *(_DWORD *)(a1 + 56);
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_7;
  }
  v41[0] = "expected bare identifier";
  __int16 v42 = 259;
  mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v41, &v43);
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if ((void)v43) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  }
  if (v51)
  {
    uint64_t v29 = __p;
    if (__p)
    {
      uint64_t v30 = v50;
      long long v31 = __p;
      if (v50 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        long long v31 = __p;
      }
      unint64_t v50 = v29;
      operator delete(v31);
    }
    uint64_t v17 = v47;
    if (!v47) {
      goto LABEL_46;
    }
    uint64_t v32 = v48;
    int v19 = v47;
    if (v48 == v47) {
      goto LABEL_45;
    }
    do
    {
      uint64_t v34 = *--v32;
      uint64_t v33 = v34;
      void *v32 = 0;
      if (v34) {
        MEMORY[0x21667D390](v33, 0x1000C8077774924);
      }
    }
    while (v32 != v17);
    goto LABEL_44;
  }
  return v13;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::AffineParser::parseSymbolIdList(unsigned int &)::$_0>(unsigned int **a1, uint64_t a2, mlir::MLIRContext *a3)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)a1[1];
  int v5 = (mlir *)**a1;
  _DWORD *v3 = v5 + 1;
  uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr(v5, ***(mlir::MLIRContext ****)(v4 + 8), a3);
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::AffineParser::parseAffineMapRange(unsigned int,unsigned int,mlir::AffineMap &)::$_0>(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  BOOL result = v2 != 0;
  *(void *)(*(void *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t anonymous namespace'::AffineParser::parseAffineLowPrecOpExpr(_anonymous_namespace_::AffineParser *a1, uint64_t a2, int a3)
{
  if (AffineBinaryOpExpr)
  {
    uint64_t v7 = *((void *)a1 + 1);
    int v8 = *(_DWORD *)(v7 + 56);
    if (v8 == 24)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v31);
      uint64_t v12 = *((void *)a1 + 1);
      *(_OWORD *)(v12 + 56) = v31;
      *(void *)(v12 + 72) = v32;
      uint64_t v10 = 2;
      if (a2) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    if (v8 == 25)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v31);
      uint64_t v9 = *((void *)a1 + 1);
      *(_OWORD *)(v9 + 56) = v31;
      *(void *)(v9 + 72) = v32;
      uint64_t v10 = 1;
      if (a2)
      {
LABEL_5:
        *(void *)&long long v31 = a2;
        if (a3 == 1) {
          uint64_t v11 = mlir::AffineExpr::operator+((unint64_t *)&v31, (uint64_t)AffineBinaryOpExpr);
        }
        else {
          uint64_t v11 = mlir::AffineExpr::operator-((unint64_t *)&v31, AffineBinaryOpExpr);
        }
        uint64_t v14 = v11;
        uint64_t v13 = a1;
        goto LABEL_17;
      }
LABEL_8:
      uint64_t v13 = a1;
      uint64_t v14 = (uint64_t)AffineBinaryOpExpr;
LABEL_17:
      uint64_t v23 = v10;
    }
    OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v7 + 56));
    if (!v16)
    {
      if (!a2) {
        return (uint64_t)AffineBinaryOpExpr;
      }
      *(void *)&long long v31 = a2;
      if (a3 == 1) {
        return mlir::AffineExpr::operator+((unint64_t *)&v31, (uint64_t)AffineBinaryOpExpr);
      }
      else {
        return mlir::AffineExpr::operator-((unint64_t *)&v31, AffineBinaryOpExpr);
      }
    }
    int v17 = v16;
    if (v18)
    {
      while (1)
      {
        uint64_t v19 = v18;
        uint64_t v20 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1) + 56));
        if (!v21) {
          break;
        }
        int v22 = v17;
        OCGSize = v20;
        int v17 = v21;
        if (!AffineBinaryOpExpr) {
          return (uint64_t)AffineBinaryOpExpr;
        }
        if (!v18) {
          return 0;
        }
      }
      if (AffineBinaryOpExpr)
      {
        if (a2)
        {
          *(void *)&long long v31 = a2;
          if (a3 == 1) {
            uint64_t v26 = mlir::AffineExpr::operator+((unint64_t *)&v31, (uint64_t)AffineBinaryOpExpr);
          }
          else {
            uint64_t v26 = mlir::AffineExpr::operator-((unint64_t *)&v31, AffineBinaryOpExpr);
          }
          AffineBinaryOpExpr = (mlir::MLIRContext **)v26;
        }
        uint64_t v27 = *((void *)a1 + 1);
        int v28 = *(_DWORD *)(v27 + 56);
        if (v28 == 24)
        {
          mlir::Lexer::lexToken((mlir::Lexer *)(v27 + 8), (uint64_t)&v31);
          uint64_t v30 = *((void *)a1 + 1);
          *(_OWORD *)(v30 + 56) = v31;
          *(void *)(v30 + 72) = v32;
          uint64_t v23 = 2;
        }
        else
        {
          if (v28 != 25) {
            return (uint64_t)AffineBinaryOpExpr;
          }
          mlir::Lexer::lexToken((mlir::Lexer *)(v27 + 8), (uint64_t)&v31);
          uint64_t v29 = *((void *)a1 + 1);
          *(_OWORD *)(v29 + 56) = v31;
          *(void *)(v29 + 72) = v32;
          uint64_t v23 = 1;
        }
        uint64_t v13 = a1;
        uint64_t v14 = (uint64_t)AffineBinaryOpExpr;
      }
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)AffineBinaryOpExpr;
}

uint64_t anonymous namespace'::AffineParser::parseAffineOperandExpr(_anonymous_namespace_::AffineParser *a1, uint64_t a2)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 1);
  switch(*(_DWORD *)(v4 + 56))
  {
    case 3:
    case 0xC:
    case 0x27:
    case 0x37:
    case 0x3F:
    case 6:
    case 0xA:
      unint64_t UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v4 + 64), *(void *)(v4 + 72));
      if (v23)
      {
        uint64_t v24 = (mlir *)UInt64IntegerValue;
        if ((UInt64IntegerValue & 0x8000000000000000) == 0)
        {
          mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&v68);
          uint64_t v25 = *((void *)a1 + 1);
          *(_OWORD *)(v25 + 56) = v68;
          *(void *)(v25 + 72) = v69;
          return mlir::Builder::getAffineConstantExpr((mlir::MLIRContext **)a1, v24, v26);
        }
      }
      *(void *)&long long v68 = "constant too large for index";
      __int16 v70 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v68, v95);
      if (v95[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v95);
      }
      if (!v101) {
        return 0;
      }
      uint64_t v46 = v99;
      if (v99)
      {
        unint64_t v47 = v100;
        int v48 = v99;
        if (v100 != v99)
        {
          do
            unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          int v48 = v99;
        }
        unint64_t v100 = v46;
        operator delete(v48);
      }
      uint64_t v30 = v97;
      if (!v97) {
        goto LABEL_113;
      }
      int v49 = v98;
      uint64_t v32 = v97;
      if (v98 == v97) {
        goto LABEL_112;
      }
      do
      {
        uint64_t v51 = *--v49;
        uint64_t v50 = v51;
        *int v49 = 0;
        if (v51) {
          MEMORY[0x21667D390](v50, 0x1000C8077774924);
        }
      }
      while (v49 != v30);
      goto LABEL_111;
    case 0x15:
      v95[0] = (mlir::MLIRContext **)"expected '('";
      __int16 v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 21, (uint64_t)v95)) {
        return 0;
      }
      if (*(_DWORD *)(*((void *)a1 + 1) + 56) != 28)
      {
        if (result)
        {
          uint64_t v36 = result;
          BOOL v37 = "expected ')'";
LABEL_91:
          v95[0] = (mlir::MLIRContext **)v37;
          __int16 v96 = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)a1, 28, (uint64_t)v95)) {
            return v36;
          }
          else {
            return 0;
          }
        }
        return result;
      }
      *(void *)&long long v68 = "no expression inside parentheses";
      __int16 v70 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v68, v95);
      if (v95[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v95);
      }
      if (!v101) {
        return 0;
      }
      uint64_t v27 = v99;
      if (v99)
      {
        int v28 = v100;
        uint64_t v29 = v99;
        if (v100 != v99)
        {
          do
            int v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = v99;
        }
        unint64_t v100 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v97;
      if (!v97) {
        goto LABEL_113;
      }
      long long v31 = v98;
      uint64_t v32 = v97;
      if (v98 == v97) {
        goto LABEL_112;
      }
      do
      {
        uint64_t v34 = *--v31;
        uint64_t v33 = v34;
        *long long v31 = 0;
        if (v34) {
          MEMORY[0x21667D390](v33, 0x1000C8077774924);
        }
      }
      while (v31 != v30);
      goto LABEL_111;
    case 0x18:
      v95[0] = (mlir::MLIRContext **)"expected '-'";
      __int16 v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 24, (uint64_t)v95)) {
        return 0;
      }
      if (v35)
      {
        v95[0] = v35;
        return mlir::AffineExpr::operator*(v95, -1);
      }
      *(void *)&long long v68 = "missing operand of negation";
      __int16 v70 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v68, v95);
      if (v95[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v95);
      }
      if (!v101) {
        return 0;
      }
      uint64_t v54 = v99;
      if (v99)
      {
        unint64_t v55 = v100;
        uint64_t v56 = v99;
        if (v100 != v99)
        {
          do
            unint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          uint64_t v56 = v99;
        }
        unint64_t v100 = v54;
        operator delete(v56);
      }
      uint64_t v30 = v97;
      if (v97)
      {
        int v57 = v98;
        uint64_t v32 = v97;
        if (v98 != v97)
        {
          do
          {
            uint64_t v59 = *--v57;
            uint64_t v58 = v59;
            *int v57 = 0;
            if (v59) {
              MEMORY[0x21667D390](v58, 0x1000C8077774924);
            }
          }
          while (v57 != v30);
LABEL_111:
          uint64_t v32 = v97;
        }
LABEL_112:
        unint64_t v98 = v30;
        operator delete(v32);
      }
LABEL_113:
      uint64_t v52 = v95[3];
      unint64_t v53 = v95;
      goto LABEL_137;
    case 0x19:
    case 0x1E:
      if (a2)
      {
        v95[0] = (mlir::MLIRContext **)"missing right operand of binary operator";
        __int16 v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v89);
        if (v89[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v89);
        }
        if (v94)
        {
          uint64_t v6 = __p;
          if (__p)
          {
            uint64_t v7 = v93;
            int v8 = __p;
            if (v93 != __p)
            {
              do
                uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
              while (v7 != v6);
              int v8 = __p;
            }
            int v93 = v6;
            operator delete(v8);
          }
          uint64_t v9 = v90;
          if (v90)
          {
            uint64_t v10 = v91;
            uint64_t v11 = v90;
            if (v91 != v90)
            {
              do
              {
                uint64_t v13 = *--v10;
                uint64_t v12 = v13;
                *uint64_t v10 = 0;
                if (v13) {
                  MEMORY[0x21667D390](v12, 0x1000C8077774924);
                }
              }
              while (v10 != v9);
              uint64_t v11 = v90;
            }
            unint64_t v91 = v9;
            operator delete(v11);
          }
          uint64_t v52 = (mlir::MLIRContext **)v89[3];
          unint64_t v53 = (mlir::MLIRContext ***)v89;
          goto LABEL_137;
        }
      }
      else
      {
        v95[0] = (mlir::MLIRContext **)"missing left operand of binary operator";
        __int16 v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v83);
        if (v83[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
        }
        if (v88)
        {
          unint64_t v38 = v86;
          if (v86)
          {
            int v39 = v87;
            __int16 v40 = v86;
            if (v87 != v86)
            {
              do
                int v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
              while (v39 != v38);
              __int16 v40 = v86;
            }
            unint64_t v87 = v38;
            operator delete(v40);
          }
          uint64_t v41 = v84;
          if (v84)
          {
            __int16 v42 = v85;
            long long v43 = v84;
            if (v85 != v84)
            {
              do
              {
                uint64_t v45 = *--v42;
                uint64_t v44 = v45;
                *__int16 v42 = 0;
                if (v45) {
                  MEMORY[0x21667D390](v44, 0x1000C8077774924);
                }
              }
              while (v42 != v41);
              long long v43 = v84;
            }
            int v85 = v41;
            operator delete(v43);
          }
          uint64_t v52 = (mlir::MLIRContext **)v83[3];
          unint64_t v53 = (mlir::MLIRContext ***)v83;
          goto LABEL_137;
        }
      }
      return 0;
    case 0x46:
      v95[0] = (mlir::MLIRContext **)"expected symbol keyword";
      __int16 v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 70, (uint64_t)v95)) {
        return 0;
      }
      *(void *)&long long v68 = "expected '(' at start of SSA symbol";
      __int16 v70 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 21, (uint64_t)&v68)) {
        return 0;
      }
      if (!result) {
        return result;
      }
      uint64_t v36 = result;
      BOOL v37 = "expected ')' at end of SSA symbol";
      goto LABEL_91;
    default:
      if (mlir::Token::isKeyword((mlir::Token *)(v4 + 56))) {
      if (a2)
      }
      {
        v95[0] = (mlir::MLIRContext **)"missing right operand of binary operator";
        __int16 v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v77);
        if (v77[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
        }
        if (v82)
        {
          uint64_t v14 = v80;
          if (v80)
          {
            uint64_t v15 = v81;
            int v16 = v80;
            if (v81 != v80)
            {
              do
                uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              int v16 = v80;
            }
            uint64_t v81 = v14;
            operator delete(v16);
          }
          int v17 = v78;
          if (v78)
          {
            uint64_t v18 = v79;
            uint64_t v19 = v78;
            if (v79 != v78)
            {
              do
              {
                uint64_t v21 = *--v18;
                uint64_t v20 = v21;
                void *v18 = 0;
                if (v21) {
                  MEMORY[0x21667D390](v20, 0x1000C8077774924);
                }
              }
              while (v18 != v17);
              uint64_t v19 = v78;
            }
            int v79 = v17;
            operator delete(v19);
          }
          uint64_t v52 = (mlir::MLIRContext **)v77[3];
          unint64_t v53 = (mlir::MLIRContext ***)v77;
LABEL_137:
          if (v52 != (mlir::MLIRContext **)(v53 + 5)) {
            free(v52);
          }
        }
      }
      else
      {
        v95[0] = (mlir::MLIRContext **)"expected affine expression";
        __int16 v96 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v95, v71);
        if (v71[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v71);
        }
        if (v76)
        {
          unint64_t v60 = v74;
          if (v74)
          {
            int v61 = v75;
            unint64_t v62 = v74;
            if (v75 != v74)
            {
              do
                int v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
              while (v61 != v60);
              unint64_t v62 = v74;
            }
            int v75 = v60;
            operator delete(v62);
          }
          uint64_t v63 = v72;
          if (v72)
          {
            unint64_t v64 = v73;
            uint64_t v65 = v72;
            if (v73 != v72)
            {
              do
              {
                uint64_t v67 = *--v64;
                uint64_t v66 = v67;
                void *v64 = 0;
                if (v67) {
                  MEMORY[0x21667D390](v66, 0x1000C8077774924);
                }
              }
              while (v64 != v63);
              uint64_t v65 = v72;
            }
            unint64_t v73 = v63;
            operator delete(v65);
          }
          uint64_t v52 = (mlir::MLIRContext **)v71[3];
          unint64_t v53 = (mlir::MLIRContext ***)v71;
          goto LABEL_137;
        }
      }
      return 0;
  }
}

uint64_t anonymous namespace'::AffineParser::consumeIfHighPrecOp(_anonymous_namespace_::AffineParser *this)
{
  uint64_t result = 0;
  uint64_t v3 = *((void *)this + 1);
  switch(*(_DWORD *)(v3 + 56))
  {
    case 0x1E:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      uint64_t v4 = *((void *)this + 1);
      *(_OWORD *)(v4 + 56) = v8;
      *(void *)(v4 + 72) = v9;
      uint64_t result = 1;
      break;
    case 0x27:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      uint64_t v5 = *((void *)this + 1);
      *(_OWORD *)(v5 + 56) = v8;
      *(void *)(v5 + 72) = v9;
      uint64_t result = 3;
      break;
    case 0x37:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      uint64_t v6 = *((void *)this + 1);
      *(_OWORD *)(v6 + 56) = v8;
      *(void *)(v6 + 72) = v9;
      uint64_t result = 2;
      break;
    case 0x3F:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
      uint64_t v7 = *((void *)this + 1);
      *(_OWORD *)(v7 + 56) = v8;
      *(void *)(v7 + 72) = v9;
      uint64_t result = 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t anonymous namespace'::AffineParser::parseSSAIdExpr(_anonymous_namespace_::AffineParser *this, uint64_t a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 16))
  {
    *(void *)&long long v44 = "unexpected ssa identifier";
    __int16 v46 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v44, v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (!v62) {
      return 0;
    }
    uint64_t v14 = __p;
    if (__p)
    {
      uint64_t v15 = v61;
      int v16 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        int v16 = __p;
      }
      int v61 = v14;
      operator delete(v16);
    }
    int v17 = v58;
    if (v58)
    {
      uint64_t v18 = v59;
      uint64_t v19 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v21 = *--v18;
          uint64_t v20 = v21;
          void *v18 = 0;
          if (v21) {
            MEMORY[0x21667D390](v20, 0x1000C8077774924);
          }
        }
        while (v18 != v17);
        uint64_t v19 = v58;
      }
      uint64_t v59 = v17;
      operator delete(v19);
    }
    uint64_t v33 = v56;
    if (v56 == &v57) {
      return 0;
    }
LABEL_44:
    free(v33);
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (*(_DWORD *)(v3 + 56) != 6)
  {
    *(void *)&long long v44 = "expected ssa identifier";
    __int16 v46 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v44, v47);
    if (v47[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v54) {
      return 0;
    }
    int v22 = v52;
    if (v52)
    {
      char v23 = v53;
      uint64_t v24 = v52;
      if (v53 != v52)
      {
        do
          char v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = v52;
      }
      unint64_t v53 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v50;
    if (v50)
    {
      uint64_t v26 = v51;
      uint64_t v27 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v29 = *--v26;
          uint64_t v28 = v29;
          *uint64_t v26 = 0;
          if (v29) {
            MEMORY[0x21667D390](v28, 0x1000C8077774924);
          }
        }
        while (v26 != v25);
        uint64_t v27 = v50;
      }
      uint64_t v51 = v25;
      operator delete(v27);
    }
    uint64_t v33 = v48;
    if (v48 == &v49) {
      return 0;
    }
    goto LABEL_44;
  }
  uint64_t v6 = *(const void **)(v3 + 64);
  size_t v5 = *(void *)(v3 + 72);
  uint64_t v7 = *((void *)this + 6);
  unsigned int v8 = *((_DWORD *)this + 14);
  if (!v8)
  {
LABEL_38:
    if ((*((unsigned __int8 (**)(void, uint64_t))this + 3))(*((void *)this + 4), a2))
    {
      if (a2)
      {
        long long v31 = (mlir *)*((unsigned int *)this + 11);
        *((_DWORD *)this + 11) = v31 + 1;
        uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr(v31, ***((mlir::MLIRContext ****)this + 1), v30);
      }
      else
      {
        int64_t v35 = (mlir *)*((unsigned int *)this + 10);
        *((_DWORD *)this + 10) = v35 + 1;
        uint64_t AffineSymbolExpr = mlir::getAffineDimExpr(v35, ***((mlir::MLIRContext ****)this + 1), v30);
      }
      uint64_t v12 = AffineSymbolExpr;
      *(void *)&long long v44 = v6;
      *((void *)&v44 + 1) = v5;
      uint64_t v45 = AffineSymbolExpr;
      uint64_t v36 = *((unsigned int *)this + 14);
      unint64_t v37 = *((void *)this + 6);
      unint64_t v38 = (char *)&v44;
      if (v36 >= *((_DWORD *)this + 15))
      {
        unint64_t v41 = v36 + 1;
        BOOL v42 = v37 + 24 * v36 > (unint64_t)&v44;
        if (v37 <= (unint64_t)&v44 && v42)
        {
          long long v43 = (char *)&v44 - v37;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 48, (char *)this + 64, v41, 24);
          unint64_t v37 = *((void *)this + 6);
          unint64_t v38 = &v43[v37];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 48, (char *)this + 64, v41, 24);
          unint64_t v37 = *((void *)this + 6);
          unint64_t v38 = (char *)&v44;
        }
      }
      uint64_t v39 = v37 + 24 * *((unsigned int *)this + 14);
      long long v40 = *(_OWORD *)v38;
      *(void *)(v39 + 16) = *((void *)v38 + 2);
      *(_OWORD *)uint64_t v39 = v40;
      ++*((_DWORD *)this + 14);
      return v12;
    }
    return 0;
  }
  uint64_t v9 = (uint64_t *)(v7 + 24 * v8);
  uint64_t v10 = (uint64_t *)(v7 + 16);
  while (1)
  {
    uint64_t v11 = v10 - 2;
    if (*(v10 - 1) == v5 && (!v5 || !memcmp((const void *)*(v10 - 2), v6, v5))) {
      break;
    }
    v10 += 3;
    if (v11 + 3 == v9) {
      goto LABEL_38;
    }
  }
  uint64_t v12 = *v10;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v44);
  uint64_t v13 = *((void *)this + 1);
  *(_OWORD *)(v13 + 56) = v44;
  *(void *)(v13 + 72) = v45;
  return v12;
}

uint64_t anonymous namespace'::AffineParser::parseBareIdExpr(_anonymous_namespace_::AffineParser *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 1);
  int v3 = *((_DWORD *)v2 + 14);
  if (v3 == 3 || v3 == 12)
  {
    unsigned int v5 = *((_DWORD *)this + 14);
    if (!v5) {
      goto LABEL_15;
    }
  }
  else
  {
    if (!mlir::Token::isKeyword((mlir::Token *)(v2 + 7)))
    {
      *(void *)&long long v33 = "expected bare identifier";
      __int16 v35 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v33, v44);
      if (v44[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
      }
      if (!v51) {
        return 0;
      }
      char v23 = v49;
      if (v49)
      {
        uint64_t v24 = v50;
        uint64_t v25 = v49;
        if (v50 != v49)
        {
          do
            uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          uint64_t v25 = v49;
        }
        uint64_t v50 = v23;
        operator delete(v25);
      }
      uint64_t v26 = v47;
      if (v47)
      {
        uint64_t v27 = v48;
        uint64_t v28 = v47;
        if (v48 != v47)
        {
          do
          {
            uint64_t v30 = *--v27;
            uint64_t v29 = v30;
            *uint64_t v27 = 0;
            if (v30) {
              MEMORY[0x21667D390](v29, 0x1000C8077774924);
            }
          }
          while (v27 != v26);
          uint64_t v28 = v47;
        }
        int v48 = v26;
        operator delete(v28);
      }
      long long v31 = v45;
      if (v45 == &v46) {
        return 0;
      }
LABEL_46:
      free(v31);
      return 0;
    }
    uint64_t v2 = (void *)*((void *)this + 1);
    unsigned int v5 = *((_DWORD *)this + 14);
    if (!v5)
    {
LABEL_15:
      *(void *)&long long v33 = "use of undeclared identifier";
      __int16 v35 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v33, v36);
      if (v36[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
      }
      if (!v43) {
        return 0;
      }
      uint64_t v15 = __p;
      if (__p)
      {
        int v16 = v42;
        int v17 = __p;
        if (v42 != __p)
        {
          do
            int v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          int v17 = __p;
        }
        BOOL v42 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v39;
      if (v39)
      {
        uint64_t v19 = v40;
        uint64_t v20 = v39;
        if (v40 != v39)
        {
          do
          {
            uint64_t v22 = *--v19;
            uint64_t v21 = v22;
            *uint64_t v19 = 0;
            if (v22) {
              MEMORY[0x21667D390](v21, 0x1000C8077774924);
            }
          }
          while (v19 != v18);
          uint64_t v20 = v39;
        }
        long long v40 = v18;
        operator delete(v20);
      }
      long long v31 = v37;
      if (v37 == &v38) {
        return 0;
      }
      goto LABEL_46;
    }
  }
  uint64_t v6 = *((void *)this + 6);
  uint64_t v7 = (uint64_t *)(v6 + 24 * v5);
  uint64_t v9 = (const void *)v2[8];
  size_t v8 = v2[9];
  uint64_t v10 = (uint64_t *)(v6 + 16);
  while (1)
  {
    uint64_t v11 = v10 - 2;
    if (*(v10 - 1) == v8 && (!v8 || !memcmp((const void *)*(v10 - 2), v9, v8))) {
      break;
    }
    v10 += 3;
    if (v11 + 3 == v7) {
      goto LABEL_15;
    }
  }
  uint64_t v12 = *v10;
  mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 1), (uint64_t)&v33);
  uint64_t v13 = *((void *)this + 1);
  *(_OWORD *)(v13 + 56) = v33;
  *(void *)(v13 + 72) = v34;
  return v12;
}

uint64_t anonymous namespace'::AffineParser::getAffineBinaryOpExpr(uint64_t a1, int a2, mlir::MLIRContext **a3, uint64_t a4, const char *a5)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v43 = a4;
  long long v44 = a3;
  switch(a2)
  {
    case 2:
      if ((mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v43) & 1) == 0)
      {
        v41[0] = "non-affine expression: right operand of floordiv has to be either a constant or symbolic";
        __int16 v42 = 259;
        mlir::detail::Parser::emitError(a1, a5, (uint64_t)v41, v61);
        if (v61[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
        }
        if (v68)
        {
          uint64_t v24 = v66;
          if (v66)
          {
            uint64_t v25 = v67;
            uint64_t v26 = v66;
            if (v67 != v66)
            {
              do
                uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
              while (v25 != v24);
              uint64_t v26 = v66;
            }
            uint64_t v67 = v24;
            operator delete(v26);
          }
          uint64_t v27 = v64;
          if (v64)
          {
            uint64_t v28 = v65;
            uint64_t v29 = v64;
            if (v65 != v64)
            {
              do
              {
                uint64_t v31 = *--v28;
                uint64_t v30 = v31;
                void *v28 = 0;
                if (v31) {
                  MEMORY[0x21667D390](v30, 0x1000C8077774924);
                }
              }
              while (v28 != v27);
              uint64_t v29 = v64;
            }
            uint64_t v65 = v27;
            operator delete(v29);
          }
          long long v40 = v62;
          if (v62 != &v63) {
            goto LABEL_70;
          }
        }
        goto LABEL_71;
      }
      uint64_t result = mlir::AffineExpr::floorDiv(&v44, v43);
      break;
    case 3:
      if ((mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v43) & 1) == 0)
      {
        v41[0] = "non-affine expression: right operand of ceildiv has to be either a constant or symbolic";
        __int16 v42 = 259;
        mlir::detail::Parser::emitError(a1, a5, (uint64_t)v41, v53);
        if (v53[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
        }
        if (!v60) {
          goto LABEL_71;
        }
        size_t v8 = __p;
        if (__p)
        {
          uint64_t v9 = v59;
          uint64_t v10 = __p;
          if (v59 != __p)
          {
            do
              uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
            while (v9 != v8);
            uint64_t v10 = __p;
          }
          uint64_t v59 = v8;
          operator delete(v10);
        }
        uint64_t v11 = v56;
        if (v56)
        {
          uint64_t v12 = v57;
          uint64_t v13 = v56;
          if (v57 != v56)
          {
            do
            {
              uint64_t v15 = *--v12;
              uint64_t v14 = v15;
              *uint64_t v12 = 0;
              if (v15) {
                MEMORY[0x21667D390](v14, 0x1000C8077774924);
              }
            }
            while (v12 != v11);
            uint64_t v13 = v56;
          }
          uint64_t v57 = v11;
          operator delete(v13);
        }
        long long v40 = v54;
        if (v54 == &v55) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      uint64_t result = mlir::AffineExpr::ceilDiv((unint64_t *)&v44, v43);
      break;
    case 4:
      if ((mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v43) & 1) == 0)
      {
        v41[0] = "non-affine expression: right operand of mod has to be either a constant or symbolic";
        __int16 v42 = 259;
        mlir::detail::Parser::emitError(a1, a5, (uint64_t)v41, v45);
        if (v45[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
        }
        if (v52)
        {
          int v16 = v50;
          if (v50)
          {
            int v17 = v51;
            uint64_t v18 = v50;
            if (v51 != v50)
            {
              do
                int v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
              while (v17 != v16);
              uint64_t v18 = v50;
            }
            char v51 = v16;
            operator delete(v18);
          }
          uint64_t v19 = v48;
          if (v48)
          {
            uint64_t v20 = v49;
            uint64_t v21 = v48;
            if (v49 != v48)
            {
              do
              {
                uint64_t v23 = *--v20;
                uint64_t v22 = v23;
                void *v20 = 0;
                if (v23) {
                  MEMORY[0x21667D390](v22, 0x1000C8077774924);
                }
              }
              while (v20 != v19);
              uint64_t v21 = v48;
            }
            uint64_t v49 = v19;
            operator delete(v21);
          }
          long long v40 = v46;
          if (v46 != &v47) {
            goto LABEL_70;
          }
        }
        goto LABEL_71;
      }
      uint64_t result = mlir::AffineExpr::operator%((unint64_t *)&v44, v43);
      break;
    default:
      if ((mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v44) & 1) != 0
        || (mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&v43) & 1) != 0)
      {
        uint64_t result = mlir::AffineExpr::operator*((unint64_t *)&v44, v43);
      }
      else
      {
        v41[0] = "non-affine expression: at least one of the multiply operands has to be either a constant or symbolic";
        __int16 v42 = 259;
        mlir::detail::Parser::emitError(a1, a5, (uint64_t)v41, v69);
        if (v69[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
        }
        if (v76)
        {
          uint64_t v32 = v74;
          if (v74)
          {
            long long v33 = v75;
            uint64_t v34 = v74;
            if (v75 != v74)
            {
              do
                long long v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
              while (v33 != v32);
              uint64_t v34 = v74;
            }
            int v75 = v32;
            operator delete(v34);
          }
          __int16 v35 = v72;
          if (v72)
          {
            uint64_t v36 = v73;
            unint64_t v37 = v72;
            if (v73 != v72)
            {
              do
              {
                uint64_t v39 = *--v36;
                uint64_t v38 = v39;
                *uint64_t v36 = 0;
                if (v39) {
                  MEMORY[0x21667D390](v38, 0x1000C8077774924);
                }
              }
              while (v36 != v35);
              unint64_t v37 = v72;
            }
            unint64_t v73 = v35;
            operator delete(v37);
          }
          long long v40 = v70;
          if (v70 != &v71) {
LABEL_70:
          }
            free(v40);
        }
LABEL_71:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::AffineParser::parseIntegerSetConstraints(unsigned int,unsigned int,mlir::IntegerSet &)::$_0>(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_anonymous_namespace_::AffineParser **)a1;
  if (!v36) {
    return 0;
  }
  uint64_t v3 = *((void *)v2 + 1);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 != 19
    || (mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33),
        uint64_t v5 = *((void *)v2 + 1),
        *(_OWORD *)(v5 + 56) = v33,
        *(void *)(v5 + 72) = v34,
        uint64_t v3 = *((void *)v2 + 1),
        int v4 = *(_DWORD *)(v3 + 56),
        v4 != 18))
  {
    if (v4 == 18)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33);
      uint64_t v13 = *((void *)v2 + 1);
      *(_OWORD *)(v13 + 56) = v33;
      *(void *)(v13 + 72) = v34;
      uint64_t v14 = *((void *)v2 + 1);
      if (*(_DWORD *)(v14 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v33);
        uint64_t v15 = *((void *)v2 + 1);
        *(_OWORD *)(v15 + 56) = v33;
        *(void *)(v15 + 72) = v34;
        if (!v16) {
          return 0;
        }
        uint64_t v8 = mlir::AffineExpr::operator-((unint64_t *)&v36, v16);
        char v9 = 1;
        if (!v8) {
          return 0;
        }
        goto LABEL_37;
      }
    }
    else if (v4 == 23)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33);
      uint64_t v10 = *((void *)v2 + 1);
      *(_OWORD *)(v10 + 56) = v33;
      *(void *)(v10 + 72) = v34;
      uint64_t v11 = *((void *)v2 + 1);
      if (*(_DWORD *)(v11 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v33);
        uint64_t v12 = *((void *)v2 + 1);
        *(_OWORD *)(v12 + 56) = v33;
        *(void *)(v12 + 72) = v34;
        if (!(void)v33) {
          return 0;
        }
        uint64_t v8 = mlir::AffineExpr::operator-((unint64_t *)&v33, v36);
        char v9 = 0;
        if (!v8) {
          return 0;
        }
        goto LABEL_37;
      }
    }
    *(void *)&long long v33 = "expected '== affine-expr' or '>= affine-expr' at end of affine constraint";
    __int16 v35 = 259;
    mlir::detail::Parser::emitError((uint64_t)v2, (uint64_t)&v33, v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      int v17 = __p;
      if (__p)
      {
        uint64_t v18 = v43;
        uint64_t v19 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        uint64_t v43 = v17;
        operator delete(v19);
      }
      uint64_t v20 = v40;
      if (v40)
      {
        uint64_t v21 = v41;
        uint64_t v22 = v40;
        if (v41 != v40)
        {
          do
          {
            uint64_t v24 = *--v21;
            uint64_t v23 = v24;
            *uint64_t v21 = 0;
            if (v24) {
              MEMORY[0x21667D390](v23, 0x1000C8077774924);
            }
          }
          while (v21 != v20);
          uint64_t v22 = v40;
        }
        unint64_t v41 = v20;
        operator delete(v22);
      }
      if (v38 != &v39) {
        free(v38);
      }
    }
    return 0;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v33);
  uint64_t v6 = *((void *)v2 + 1);
  *(_OWORD *)(v6 + 56) = v33;
  *(void *)(v6 + 72) = v34;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = mlir::AffineExpr::operator-((unint64_t *)&v36, v7);
  char v9 = 0;
  if (!v8) {
    return 0;
  }
LABEL_37:
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v27 = *(unsigned int *)(v26 + 8);
  if (v27 >= *(_DWORD *)(v26 + 12))
  {
    uint64_t v32 = *(void *)(a1 + 8);
    char v31 = v9;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(v26 + 16), v27 + 1, 8);
    char v9 = v31;
    uint64_t v26 = v32;
    LODWORD(v27) = *(_DWORD *)(v32 + 8);
  }
  *(void *)(*(void *)v26 + 8 * v27) = v8;
  ++*(_DWORD *)(v26 + 8);
  uint64_t v28 = *(void **)(a1 + 16);
  uint64_t v29 = v28[1];
  if ((unint64_t)(v29 + 1) > v28[2])
  {
    char v30 = v9;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v28, v28 + 3, v29 + 1, 1);
    char v9 = v30;
    uint64_t v29 = v28[1];
  }
  *(unsigned char *)(*v28 + v29) = v9;
  ++v28[1];
  return 1;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::AffineParser::parseAffineMapOfSSAIds(mlir::AffineMap &,mlir::AsmParser::Delimiter)::$_0>(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(void *)(*(void *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return v2 != 0;
}

__n128 *std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>(__n128 **a1, __n128 *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (__n128 *)&v7[24 * v6];
  llvm::SourceMgr::SrcBuffer::SrcBuffer((__n128 *)&v7[24 * v2], a2);
  uint64_t v10 = (__n128 *)((char *)v9 + 24);
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_16;
  }
  do
  {
    uint64_t v11 = (__n128 *)((char *)v11 - 24);
    llvm::SourceMgr::SrcBuffer::SrcBuffer((__n128 *)((char *)v9 - 24), v11);
  }
  while (v11 != v12);
  uint64_t v11 = *a1;
  uint64_t v13 = (llvm::SourceMgr::SrcBuffer *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  while (v13 != (llvm::SourceMgr::SrcBuffer *)v11)
  {
    uint64_t v13 = (llvm::SourceMgr::SrcBuffer *)((char *)v13 - 24);
    llvm::SourceMgr::SrcBuffer::~SrcBuffer(v13);
  }
  if (v11) {
LABEL_16:
  }
    operator delete(v11);
  return v10;
}

void mlir::ParserConfig::~ParserConfig(mlir::ParserConfig *this)
{
  unint64_t v2 = (char *)*((void *)this + 14);
  uint64_t v3 = *((unsigned int *)this + 30);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    unint64_t v2 = (char *)*((void *)this + 14);
  }
  if (v2 != (char *)this + 128) {
    free(v2);
  }
  uint64_t v7 = (char *)*((void *)this + 6);
  uint64_t v8 = *((unsigned int *)this + 14);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = v7 - 8;
    do
    {
      uint64_t v11 = *(void *)&v10[v9];
      *(void *)&v10[v9] = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      v9 -= 8;
    }
    while (v9);
    uint64_t v7 = (char *)*((void *)this + 6);
  }
  if (v7 != (char *)this + 64) {
    free(v7);
  }
  uint64_t v12 = *((unsigned int *)this + 8);
  uint64_t v13 = (llvm *)*((void *)this + 2);
  if (v12)
  {
    uint64_t v14 = 24 * v12;
    uint64_t v15 = (uint64_t *)((char *)v13 + 16);
    do
    {
      if ((unint64_t)*(v15 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v16 = *v15;
        *uint64_t v15 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      v15 += 3;
      v14 -= 24;
    }
    while (v14);
    uint64_t v13 = (llvm *)*((void *)this + 2);
    uint64_t v17 = 24 * *((unsigned int *)this + 8);
  }
  else
  {
    uint64_t v17 = 0;
  }
  llvm::deallocate_buffer(v13, (void *)v17);
}

{
  char **v2;

  unint64_t v2 = (char **)((char *)this + 48);
  llvm::SmallVector<std::unique_ptr<mlir::AttrTypeBytecodeReader<mlir::Type>>,6u>::~SmallVector((char **)this + 14);
  llvm::SmallVector<std::unique_ptr<mlir::AttrTypeBytecodeReader<mlir::Attribute>>,6u>::~SmallVector(v2);
  llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::~DenseMap((unsigned int *)this + 4);
}

uint64_t sub_2115588B4()
{
  return v0;
}

void mlir::detail::SymbolState::~SymbolState(llvm **this)
{
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::destroyAll(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *a1 + 32 * v1;
    do
    {
      if ((*(void *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_DWORD *)(v2 + 20))
        {
          uint64_t v4 = *(unsigned int *)(v2 + 16);
          if (v4)
          {
            uint64_t v5 = 0;
            do
            {
              uint64_t v6 = *(llvm **)(*(void *)(v2 + 8) + v5);
              if (v6 != (llvm *)-8 && v6 != 0)
              {
                uint64_t v8 = *(void *)v6;
                if (*((char *)v6 + 31) < 0) {
                  operator delete(*((void **)v6 + 1));
                }
                llvm::deallocate_buffer(v6, (void *)(v8 + 57));
              }
              v5 += 8;
            }
            while (8 * v4 != v5);
          }
        }
        free(*(void **)(v2 + 8));
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void mlir::AsmParserState::Impl::resolveSymbolUses(mlir::AsmParserState::Impl *this)
{
  v36[6] = *MEMORY[0x263EF8340];
  uint64_t v34 = v36;
  uint64_t v35 = 0x600000000;
  uint64_t v1 = *((unsigned int *)this + 96);
  if (v1)
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 47);
    uint64_t v4 = &v3[2 * v1];
    uint64_t v32 = (char *)this + 568;
    long long v33 = v4;
    while (1)
    {
      uint64_t v5 = v3[1];
      if (*(_DWORD *)(v5 + 8)) {
        break;
      }
LABEL_3:
      v3 += 2;
      if (v3 == v4)
      {
        if (v34 != v36) {
          free(v34);
        }
        return;
      }
    }
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(unsigned int *)(v5 + 16);
    if (v7)
    {
      uint64_t v8 = 24 * v7;
      uint64_t v9 = v6;
      while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 24;
        v8 -= 24;
        if (!v8) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      uint64_t v9 = v6;
    }
    uint64_t v10 = v6 + 24 * v7;
    while (1)
    {
      if (v9 == v10) {
        goto LABEL_3;
      }
      LODWORD(v35) = 0;
      if (mlir::SymbolTableCollection::lookupSymbolIn((uint64_t)v32, *v3, *(void *)v9, (uint64_t)&v34))
      {
        uint64_t v11 = *(unsigned int *)(v9 + 16);
        if (v11) {
          break;
        }
      }
LABEL_36:
      v9 += 24;
      uint64_t v4 = v33;
      if (v9 == v10) {
        goto LABEL_3;
      }
      while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 24;
        if (v9 == v10) {
          goto LABEL_3;
        }
      }
    }
    uint64_t v12 = *(void *)(v9 + 8);
    uint64_t v13 = v12 + (v11 << 6);
    while (1)
    {
      uint64_t v14 = *(unsigned int *)(v12 + 8);
      if (v35 && v14 != 0) {
        break;
      }
LABEL_16:
      v12 += 64;
      if (v12 == v13) {
        goto LABEL_36;
      }
    }
    uint64_t v16 = *(long long **)v12;
    uint64_t v17 = v34;
    uint64_t v18 = (char *)v34 + 8 * v35;
    uint64_t v19 = *(void *)v12 + 16 * v14;
    while (1)
    {
      uint64_t v20 = *((void *)this + 8);
      uint64_t v21 = *((unsigned int *)this + 20);
      if (!v21) {
        goto LABEL_28;
      }
      LODWORD(v22) = ((*v17 >> 4) ^ (*v17 >> 9)) & (v21 - 1);
      uint64_t v23 = (uint64_t *)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 != *v17) {
        break;
      }
LABEL_29:
      if (v23 != (uint64_t *)(v20 + 16 * v21))
      {
        uint64_t v27 = *(void *)(*(void *)this + 8 * *((unsigned int *)v23 + 2));
        long long v28 = *v16;
        unint64_t v29 = *(unsigned int *)(v27 + 152);
        if (v29 >= *(unsigned int *)(v27 + 156))
        {
          uint64_t v31 = v13;
          long long v30 = *v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 144, (void *)(v27 + 160), v29 + 1, 16);
          long long v28 = v30;
          uint64_t v13 = v31;
          unint64_t v29 = *(unsigned int *)(v27 + 152);
        }
        *(_OWORD *)(*(void *)(v27 + 144) + 16 * v29) = v28;
        ++*(_DWORD *)(v27 + 152);
      }
      if (++v17 != (void *)v18 && ++v16 != (long long *)v19) {
        continue;
      }
      goto LABEL_16;
    }
    int v25 = 1;
    while (v24 != -4096)
    {
      int v26 = v22 + v25++;
      uint64_t v22 = v26 & (v21 - 1);
      uint64_t v24 = *(void *)(v20 + 16 * v22);
      if (v24 == *v17)
      {
        uint64_t v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_29;
      }
    }
LABEL_28:
    uint64_t v23 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_29;
  }
}

unsigned char *mlir::AsmParserState::convertIdLocToRange(unsigned char *a1)
{
  if (!a1 || !*a1) {
    return a1;
  }
  if (*a1 != 34)
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = MEMORY[0x263EF8318];
    while (1)
    {
      uint64_t v11 = v9;
      unsigned int v12 = *v9;
      if ((v12 & 0x80000000) != 0)
      {
        if (__maskrune(*v9, 0x500uLL)) {
          goto LABEL_26;
        }
      }
      else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x500) != 0)
      {
        goto LABEL_26;
      }
      if (v12 - 36 > 0x3B
        || ((1 << (v12 - 36)) & 0x800000000000601) == 0)
      {
        return a1;
      }
LABEL_26:
      uint64_t v9 = v11 + 1;
      if (!*v11) {
        return a1;
      }
    }
  }
  uint64_t v2 = a1 + 1;
  signed __int8 v3 = a1[1];
  if (v3)
  {
    do
    {
      uint64_t v4 = v2 + 1;
      uint64_t v5 = memchr("\"\n\v\f", v3, 4uLL);
      if (v5 && v5 - "\"\n\v\f" != -1) {
        break;
      }
      if (v3 == 92)
      {
        uint64_t v7 = *v4;
        BOOL v8 = (v7 - 92) > 0x18 || ((1 << (v7 - 92)) & 0x1040001) == 0;
        if (!v8 || v7 == 34)
        {
          uint64_t v4 = v2 + 2;
        }
        else
        {
          if (llvm::hexDigitValue(char)::LUT[v7] == -1 || llvm::hexDigitValue(char)::LUT[v2[2]] == -1) {
            return a1;
          }
          uint64_t v4 = v2 + 3;
        }
      }
      signed __int8 v3 = *v4;
      uint64_t v2 = v4;
    }
    while (*v4);
  }
  return a1;
}

void mlir::AsmParserState::initialize(mlir::AsmParserState *this, mlir::Operation *a2)
{
  uint64_t v9 = *((void *)a2 + 6);
  uint64_t v3 = *(void *)this;
  uint64_t v4 = (void *)(*(void *)this + 440);
  uint64_t v5 = *(unsigned int *)(v3 + 448);
  if (v5 >= *(_DWORD *)(v3 + 452))
  {
    llvm::SmallVectorTemplateBase<mlir::AsmParserState::Impl::PartialOpDef,false>::growAndEmplaceBack<mlir::OperationName const&>((uint64_t)v4, &v9);
    uint64_t v6 = *(void *)this;
    uint64_t v7 = *(void *)(*(void *)(v6 + 440) + 8 * *(unsigned int *)(v6 + 448) - 8);
    if (!v7) {
      return;
    }
    goto LABEL_5;
  }
  *(void *)(*v4 + 8 * v5) = 0;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(&v9)) {
    operator new();
  }
  ++*(_DWORD *)(v3 + 448);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *(void *)(*(void *)(v6 + 440) + 8 * *(unsigned int *)(v6 + 448) - 8);
  if (v7)
  {
LABEL_5:
    uint64_t v8 = *(unsigned int *)(v6 + 512);
    if (v8 >= *(_DWORD *)(v6 + 516))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 504, (void *)(v6 + 520), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(v6 + 512);
    }
    *(void *)(*(void *)(v6 + 504) + 8 * v8) = v7;
    ++*(_DWORD *)(v6 + 512);
  }
}

uint64_t mlir::AsmParserState::startOperationDefinition(mlir::AsmParserState *this, const mlir::OperationName *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (void *)(*(void *)this + 440);
  uint64_t v4 = *(unsigned int *)(v2 + 448);
  if (v4 >= *(_DWORD *)(v2 + 452))
  {
    return llvm::SmallVectorTemplateBase<mlir::AsmParserState::Impl::PartialOpDef,false>::growAndEmplaceBack<mlir::OperationName const&>((uint64_t)v3, a2);
  }
  else
  {
    *(void *)(*v3 + 8 * v4) = 0;
    uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(a2);
    if (result) {
      operator new();
    }
    ++*(_DWORD *)(v2 + 448);
  }
  return result;
}

void mlir::AsmParserState::finalize(mlir::AsmParserState::Impl **this, mlir::Operation *a2)
{
  uint64_t v16 = a2;
  uint64_t v4 = *this;
  uint64_t v5 = *((unsigned int *)*this + 112);
  uint64_t v6 = *((void *)*this + 55) + 8 * v5;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v6 - 8) = 0;
  uint64_t v15 = (uint64_t *)v7;
  *((_DWORD *)v4 + 112) = v5 - 1;
  uint64_t v8 = (uint64_t **)(*((void *)v4 + 55) + 8 * (v5 - 1));
  uint64_t v9 = *v8;
  *uint64_t v8 = 0;
  if (v9) {
    std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v8, v9);
  }
  if (!v7)
  {
LABEL_6:
    mlir::AsmParserState::Impl::resolveSymbolUses(*this);
    uint64_t v14 = v15;
    uint64_t v15 = 0;
    if (!v14) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v10 = *this;
  uint64_t v11 = *((unsigned int *)*this + 96);
  if (v11 < *((_DWORD *)*this + 97))
  {
    unsigned int v12 = (void *)(*((void *)v10 + 47) + 16 * v11);
    *unsigned int v12 = a2;
    uint64_t v13 = (uint64_t)v15;
    uint64_t v15 = 0;
    v12[1] = v13;
    *((_DWORD *)v10 + 96) = v11 + 1;
    goto LABEL_6;
  }
  llvm::SmallVectorTemplateBase<std::pair<mlir::Operation *,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>,false>::growAndEmplaceBack<mlir::Operation *&,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>((uint64_t)v10 + 376, &v16, (uint64_t *)&v15);
  mlir::AsmParserState::Impl::resolveSymbolUses(*this);
  uint64_t v14 = v15;
  uint64_t v15 = 0;
  if (!v14) {
    return;
  }
LABEL_7:
  std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)&v15, v14);
}

void mlir::AsmParserState::finalizeOperationDefinition(uint64_t *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(*a1 + 448);
  uint64_t v4 = *(void *)(*a1 + 440) + 8 * v3;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v4 - 8) = 0;
  uint64_t v8 = v5;
  *(_DWORD *)(v2 + 448) = v3 - 1;
  uint64_t v6 = (uint64_t **)(*(void *)(v2 + 440) + 8 * (v3 - 1));
  uint64_t v7 = *v6;
  *uint64_t v6 = 0;
  if (v7) {
    std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100]((uint64_t)v6, v7);
  }
  operator new();
}

void mlir::AsmParserState::startRegionDefinition(mlir::AsmParserState *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)(*(void *)this + 440) + 8 * *(unsigned int *)(*(void *)this + 448) - 8);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v1 + 512);
    if (v3 >= *(_DWORD *)(v1 + 516))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v1 + 504, (void *)(v1 + 520), v3 + 1, 8);
      LODWORD(v3) = *(_DWORD *)(v1 + 512);
    }
    *(void *)(*(void *)(v1 + 504) + 8 * v3) = v2;
    ++*(_DWORD *)(v1 + 512);
  }
}

uint64_t mlir::AsmParserState::finalizeRegionDefinition(uint64_t this)
{
  if (*(void *)(*(void *)(*(void *)this + 440) + 8 * *(unsigned int *)(*(void *)this + 448) - 8)) {
    --*(_DWORD *)(*(void *)this + 512);
  }
  return this;
}

unsigned char *mlir::AsmParserState::addDefinition(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *a1;
  uint64_t v8 = *(void *)(*a1 + 152);
  uint64_t v6 = *a1 + 152;
  uint64_t v7 = v8;
  uint64_t v9 = *(unsigned int *)(v5 + 168);
  unsigned int v10 = a2 >> 4;
  if (v9)
  {
    uint64_t v11 = (v9 - 1) & (v10 ^ (a2 >> 9));
    uint64_t v12 = *(void *)(v7 + 16 * v11);
    if (v12 == a2)
    {
      if (v11 == v9)
      {
        int v13 = *(_DWORD *)(v5 + 96);
LABEL_12:
        unsigned int v16 = (v9 - 1) & (v10 ^ (a2 >> 9));
        uint64_t v17 = (void *)(v7 + 16 * v16);
        uint64_t v18 = *v17;
        if (*v17 == a2) {
          goto LABEL_13;
        }
        uint64_t v23 = 0;
        int v24 = 1;
        while (v18 != -4096)
        {
          if (v23) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v18 == -8192;
          }
          if (v25) {
            uint64_t v23 = v17;
          }
          unsigned int v26 = v16 + v24++;
          unsigned int v16 = v26 & (v9 - 1);
          uint64_t v17 = (void *)(v7 + 16 * v16);
          uint64_t v18 = *v17;
          if (*v17 == a2) {
            goto LABEL_13;
          }
        }
        if (v23) {
          uint64_t v27 = v23;
        }
        else {
          uint64_t v27 = v17;
        }
        int v28 = *(_DWORD *)(v5 + 160);
        if (4 * v28 + 4 < (3 * v9))
        {
          if ((int)v9 + ~v28 - *(_DWORD *)(v5 + 164) > v9 >> 3) {
            goto LABEL_17;
          }
          goto LABEL_34;
        }
LABEL_33:
        LODWORD(v9) = 2 * v9;
LABEL_34:
        unint64_t v29 = a3;
        llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v6, v9);
        uint64_t v30 = *(void *)(v5 + 152);
        int v31 = *(_DWORD *)(v5 + 168) - 1;
        unsigned int v32 = v31 & (v10 ^ (a2 >> 9));
        uint64_t v27 = (void *)(v30 + 16 * v32);
        uint64_t v33 = *v27;
        if (*v27 == a2)
        {
LABEL_35:
          a3 = v29;
          ++*(_DWORD *)(v5 + 160);
          if (a2 == -4096) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        uint64_t v34 = 0;
        int v35 = 1;
        while (v33 != -4096)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v33 == -8192;
          }
          if (v36) {
            uint64_t v34 = v27;
          }
          unsigned int v37 = v32 + v35++;
          unsigned int v32 = v37 & v31;
          uint64_t v27 = (void *)(v30 + 16 * (v37 & v31));
          uint64_t v33 = *v27;
          if (*v27 == a2) {
            goto LABEL_35;
          }
        }
        if (v34) {
          uint64_t v27 = v34;
        }
        a3 = v29;
LABEL_17:
        uint64_t v22 = *v27;
        ++*(_DWORD *)(v5 + 160);
        if (v22 == -4096)
        {
LABEL_19:
          *uint64_t v27 = a2;
          *((_DWORD *)v27 + 2) = v13;
LABEL_13:
          mlir::AsmParserState::convertIdLocToRange(a3);
          operator new();
        }
LABEL_18:
        --*(_DWORD *)(v5 + 164);
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    int v14 = 1;
    while (v12 != -4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v9 - 1);
      uint64_t v12 = *(void *)(v7 + 16 * v11);
      if (v12 == a2) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(v5 + 168);
LABEL_10:
  if (v11 == v9)
  {
    int v13 = *(_DWORD *)(v5 + 96);
    if (!v9) {
      goto LABEL_33;
    }
    goto LABEL_12;
  }
LABEL_14:
  uint64_t result = mlir::AsmParserState::convertIdLocToRange(a3);
  uint64_t v20 = *(void *)(*(void *)(*a1 + 88) + 8 * *(unsigned int *)(v7 + 16 * v11 + 8));
  *(void *)(v20 + 8) = result;
  *(void *)(v20 + 16) = v21;
  return result;
}

void mlir::AsmParserState::addDefinition(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  v33[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)a1 + 152);
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 168);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    LODWORD(v7) = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
    uint64_t v8 = (uint64_t *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == v6) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == v6)
      {
        uint64_t v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(v4 + 16 * v5);
LABEL_8:
  uint64_t v12 = *(void *)(*(void *)(*(void *)a1 + 88) + 8 * *((unsigned int *)v8 + 2));
  unint64_t v13 = *(unsigned int *)(a2 + 24);
  int v14 = (void *)(v12 + 88);
  unint64_t v15 = *(unsigned int *)(v12 + 96);
  uint64_t v16 = (v13 + 1);
  if (v13 >= v15 && v15 != v16)
  {
    if (v15 <= v16)
    {
      if (*(_DWORD *)(v12 + 100) < v16)
      {
        llvm::SmallVectorTemplateBase<mlir::AsmParserState::SMDefinition,false>::grow(v12 + 88, (v13 + 1));
        unint64_t v15 = *(unsigned int *)(v12 + 96);
      }
      if (v15 != v16)
      {
        uint64_t v21 = *v14 + 80 * v16;
        uint64_t v22 = *v14 + 80 * v15;
        do
        {
          *(_OWORD *)(v22 + 48) = 0uLL;
          *(_OWORD *)(v22 + 64) = 0uLL;
          *(_OWORD *)uint64_t v22 = 0uLL;
          *(_OWORD *)(v22 + 16) = 0uLL;
          *(_OWORD *)(v22 + 32) = 0uLL;
          *(void *)(v22 + 16) = v22 + 32;
          *(_DWORD *)(v22 + 28) = 3;
          v22 += 80;
        }
        while (v22 != v21);
      }
    }
    else
    {
      uint64_t v18 = 80 * v15;
      uint64_t v19 = (void **)(v18 + *v14 - 64);
      uint64_t v20 = 80 * v16 - v18;
      do
      {
        if (v19 + 2 != *v19) {
          free(*v19);
        }
        v19 -= 10;
        v20 += 80;
      }
      while (v20);
    }
    *(_DWORD *)(v12 + 96) = v16;
  }
  *(void *)&long long v30 = mlir::AsmParserState::convertIdLocToRange(a3);
  *((void *)&v30 + 1) = v23;
  int v31 = v33;
  uint64_t v32 = 0x300000000;
  uint64_t v24 = *v14 + 80 * v13;
  *(_OWORD *)uint64_t v24 = v30;
  BOOL v25 = v31;
  if ((long long *)v24 != &v30)
  {
    uint64_t v26 = v24 + 16;
    if (v31 != v33)
    {
      if (*(void *)(v24 + 16) != v24 + 32)
      {
        free(*(void **)v26);
        BOOL v25 = v31;
      }
      *(void *)uint64_t v26 = v25;
      *(void *)(v26 + 8) = v32;
      int v31 = v33;
      HIDWORD(v32) = 0;
      goto LABEL_38;
    }
    unint64_t v27 = v32;
    uint64_t v28 = *(unsigned int *)(v24 + 24);
    if (v28 >= v32)
    {
      if (v32) {
        memmove(*(void **)v26, v33, 16 * v32);
      }
      goto LABEL_37;
    }
    if (*(_DWORD *)(v24 + 28) >= v32)
    {
      if (v28)
      {
        memmove(*(void **)v26, v33, 16 * v28);
        uint64_t v29 = v32;
        if (v28 == v32)
        {
LABEL_37:
          *(_DWORD *)(v26 + 8) = v27;
LABEL_38:
          LODWORD(v32) = 0;
          BOOL v25 = v31;
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = v32;
        if (!v32) {
          goto LABEL_37;
        }
      }
    }
    else
    {
      *(_DWORD *)(v24 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 16, (void *)(v24 + 32), v27, 16);
      uint64_t v28 = 0;
      uint64_t v29 = v32;
      if (!v32) {
        goto LABEL_37;
      }
    }
    memcpy((void *)(*(void *)v26 + 16 * v28), (char *)v31 + 16 * v28, 16 * v29 - 16 * v28);
    goto LABEL_37;
  }
LABEL_39:
  if (v25 != v33) {
    free(v25);
  }
}

uint64_t *mlir::AsmParserState::addAttrAliasDefinition(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = *a1 + 304;
  uint64_t v15 = *(unsigned int *)(v10 + 184);
  uint64_t result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(v11, a2, a3, &v15);
  if (v13) {
    operator new();
  }
  int v14 = *(void **)(*(void *)(*a1 + 176) + 8 * *(unsigned int *)(*result + 8));
  void v14[2] = a4;
  v14[3] = a5;
  v14[12] = a6;
  return result;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, void *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 4;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v17 = v9[1];
        ++v9;
        uint64_t v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 4;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  *(void *)buffer = a3;
  buffer[2] = *a4;
  *uint64_t v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v13 = *v9 == -8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    do
    {
      uint64_t v15 = v9[1];
      ++v9;
      uint64_t v14 = v15;
      if (v15) {
        BOOL v16 = v14 == -8;
      }
      else {
        BOOL v16 = 1;
      }
    }
    while (v16);
  }
  return v9;
}

void mlir::AsmParserState::addTypeAliasDefinition(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 328;
  uint64_t v5 = *(unsigned int *)(v3 + 248);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(v4, a2, a3, &v5);
  operator new();
}

void mlir::AsmParserState::addUses(uint64_t a1, unint64_t a2, unsigned char **a3, uint64_t a4)
{
  unint64_t v65 = a2;
  if ((~*(_DWORD *)(a2 + 8) & 7) != 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = 0;
  }
  if (!v7)
  {
    uint64_t v17 = *(void *)(*(void *)a1 + 152);
    uint64_t v18 = *(unsigned int *)(*(void *)a1 + 168);
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 16);
      LODWORD(v20) = ((v19 >> 4) ^ (v19 >> 9)) & (v18 - 1);
      uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
      uint64_t v22 = *v21;
      if (*v21 == v19) {
        goto LABEL_70;
      }
      int v23 = 1;
      while (v22 != -4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v18 - 1);
        uint64_t v22 = *(void *)(v17 + 16 * v20);
        if (v22 == v19)
        {
          uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
          goto LABEL_70;
        }
      }
    }
    uint64_t v21 = (uint64_t *)(v17 + 16 * v18);
LABEL_70:
    if (a4)
    {
      uint64_t v53 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 88) + 8 * *((unsigned int *)v21 + 2)) + 88)
          + 80 * *(unsigned int *)(a2 + 24);
      uint64_t v54 = v53 + 16;
      uint64_t v55 = (void *)(v53 + 32);
      uint64_t v56 = 8 * a4;
      do
      {
        while (1)
        {
          uint64_t v57 = mlir::AsmParserState::convertIdLocToRange(*a3);
          uint64_t v59 = v57;
          uint64_t v60 = v58;
          uint64_t v61 = *(unsigned int *)(v54 + 8);
          if (v61 >= *(_DWORD *)(v54 + 12)) {
            break;
          }
          char v62 = (void *)(*(void *)v54 + 16 * v61);
          *char v62 = v57;
          v62[1] = v58;
          *(_DWORD *)(v54 + 8) = v61 + 1;
          ++a3;
          v56 -= 8;
          if (!v56) {
            return;
          }
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(v54, v55, v61 + 1, 16);
        uint64_t v63 = (void *)(*(void *)v54 + 16 * *(unsigned int *)(v54 + 8));
        void *v63 = v59;
        v63[1] = v60;
        ++*(_DWORD *)(v54 + 8);
        ++a3;
        v56 -= 8;
      }
      while (v56);
    }
    return;
  }
  uint64_t Owner = mlir::detail::OpResultImpl::getOwner((mlir::detail::OpResultImpl *)v7);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(*(void *)a1 + 64);
  uint64_t v11 = *(unsigned int *)(*(void *)a1 + 80);
  if (v11)
  {
    LODWORD(v12) = (v11 - 1) & ((Owner >> 4) ^ (Owner >> 9));
    BOOL v13 = (uint64_t *)(v10 + 16 * v12);
    uint64_t v14 = *v13;
    if (*v13 == Owner) {
      goto LABEL_18;
    }
    int v15 = 1;
    while (v14 != -4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      uint64_t v14 = *(void *)(v10 + 16 * v12);
      if (v14 == Owner)
      {
        BOOL v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_18;
      }
    }
  }
  BOOL v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_18:
  if (v13 == (uint64_t *)(v10 + 16 * v11))
  {
    uint64_t v27 = (uint64_t)(v9 + 44);
    uint64_t v66 = 0;
    int v28 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>(v9 + 44, &v65, &v66);
    uint64_t v29 = v66;
    if (v28)
    {
      unsigned int v30 = *((_DWORD *)v66 + 4);
      unint64_t v31 = ((8 * a4) >> 3) + v30;
      if (v31 <= *((unsigned int *)v66 + 5)) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v29 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::InsertIntoBucketImpl<mlir::Value>(v27, (uint64_t)&v65, &v65, v66);
      unsigned int v30 = 0;
      void *v29 = v65;
      v29[1] = v29 + 3;
      v29[2] = 0x600000000;
      unint64_t v31 = (8 * a4) >> 3;
      if (v31 <= 6)
      {
LABEL_79:
        if (a4)
        {
          memcpy((void *)(v29[1] + 8 * v30), a3, 8 * a4);
          unsigned int v30 = *((_DWORD *)v29 + 4);
        }
        *((_DWORD *)v29 + 4) = v30 + a4;
        return;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v29 + 1), v29 + 3, v31, 8);
    unsigned int v30 = *((_DWORD *)v29 + 4);
    goto LABEL_79;
  }
  uint64_t v25 = *(void *)(v7 + 8);
  if ((v25 & 7) == 6) {
    unsigned int v26 = *(_DWORD *)(v7 + 16) + 6;
  }
  else {
    unsigned int v26 = v25 & 7;
  }
  uint64_t v32 = 0;
  uint64_t v33 = *(void *)(*v9 + 8 * *((unsigned int *)v13 + 2));
  uint64_t v34 = *(void *)(v33 + 40);
  unsigned int v35 = *(_DWORD *)(v33 + 48);
  uint64_t v36 = 88 * v35;
  do
  {
    if (v36 == v32) {
      return;
    }
    unsigned int v37 = *(_DWORD *)(v34 + v36 - 88);
    v34 -= 88;
    v32 += 88;
  }
  while (v26 < v37);
  if (a4)
  {
    uint64_t v38 = v34 + 88 * v35;
    unint64_t v64 = &a3[a4];
    uint64_t v39 = MEMORY[0x263EF8318];
    do
    {
      long long v40 = *a3;
      if (*a3)
      {
        unint64_t v41 = *a3;
        if (*v40)
        {
          if (*v40 == 34)
          {
            uint64_t v43 = v40 + 1;
            signed __int8 v42 = v40[1];
            if (v42)
            {
              while (1)
              {
                unint64_t v41 = v43 + 1;
                char v44 = memchr("\"\n\v\f", v42, 4uLL);
                if (v44 && v44 - "\"\n\v\f" != -1) {
                  break;
                }
                if (v42 == 92)
                {
                  uint64_t v46 = *v41;
                  BOOL v47 = (v46 - 92) > 0x18 || ((1 << (v46 - 92)) & 0x1040001) == 0;
                  if (!v47 || v46 == 34)
                  {
                    unint64_t v41 = v43 + 2;
                  }
                  else
                  {
                    if (llvm::hexDigitValue(char)::LUT[v46] == -1 || llvm::hexDigitValue(char)::LUT[v43[2]] == -1) {
                      goto LABEL_53;
                    }
                    unint64_t v41 = v43 + 3;
                  }
                }
                signed __int8 v42 = *v41;
                uint64_t v43 = v41;
                if (!*v41) {
                  goto LABEL_53;
                }
              }
            }
            else
            {
              unint64_t v41 = v40 + 1;
            }
            goto LABEL_53;
          }
          uint64_t v50 = v40 + 1;
          while (2)
          {
            unint64_t v41 = (unsigned __int8 *)v50;
            unsigned int v51 = *v50;
            if ((v51 & 0x80000000) != 0)
            {
              if (!__maskrune(*v50, 0x500uLL))
              {
LABEL_63:
                if (v51 - 36 > 0x3B
                  || ((1 << (v51 - 36)) & 0x800000000000601) == 0)
                {
                  break;
                }
              }
            }
            else if ((*(_DWORD *)(v39 + 4 * v51 + 60) & 0x500) == 0)
            {
              goto LABEL_63;
            }
            uint64_t v50 = (char *)(v41 + 1);
            if (!*v41) {
              break;
            }
            continue;
          }
        }
      }
      else
      {
        unint64_t v41 = 0;
      }
LABEL_53:
      unint64_t v48 = *(unsigned int *)(v38 + 32);
      if (v48 >= *(unsigned int *)(v38 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 24, (void *)(v38 + 40), v48 + 1, 16);
        unint64_t v48 = *(unsigned int *)(v38 + 32);
      }
      uint64_t v49 = (void *)(*(void *)(v38 + 24) + 16 * v48);
      *uint64_t v49 = v40;
      v49[1] = v41;
      ++*(_DWORD *)(v38 + 32);
      ++a3;
    }
    while (a3 != v64);
  }
}

void mlir::AsmParserState::addUses(uint64_t *a1, uint64_t a2, unsigned char **a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v10 = *(void *)(*a1 + 152);
  uint64_t v8 = *a1 + 152;
  uint64_t v9 = v10;
  uint64_t v11 = *(unsigned int *)(v7 + 168);
  unsigned int v12 = a2 >> 4;
  if (!v11) {
    goto LABEL_9;
  }
  LODWORD(v13) = (v11 - 1) & (v12 ^ (a2 >> 9));
  uint64_t v14 = (uint64_t *)(v9 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14 != a2)
  {
    int v17 = 1;
    while (v15 != -4096)
    {
      int v18 = v13 + v17++;
      uint64_t v13 = v18 & (v11 - 1);
      uint64_t v15 = *(void *)(v9 + 16 * v13);
      if (v15 == a2) {
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v13 = *(unsigned int *)(v7 + 168);
LABEL_10:
    if (v13 == v11)
    {
      int v16 = *(_DWORD *)(v7 + 96);
      if (!v11) {
        goto LABEL_39;
      }
      goto LABEL_12;
    }
    uint64_t v14 = (uint64_t *)(v9 + 16 * v13);
    if (a4) {
      goto LABEL_15;
    }
    return;
  }
  if (v13 == v11)
  {
    int v16 = *(_DWORD *)(v7 + 96);
LABEL_12:
    unsigned int v19 = (v11 - 1) & (v12 ^ (a2 >> 9));
    uint64_t v20 = (uint64_t *)(v9 + 16 * v19);
    uint64_t v21 = *v20;
    if (*v20 == a2) {
      goto LABEL_13;
    }
    unsigned int v30 = 0;
    int v31 = 1;
    while (v21 != -4096)
    {
      if (v30) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v21 == -8192;
      }
      if (v32) {
        unsigned int v30 = v20;
      }
      unsigned int v33 = v19 + v31++;
      unsigned int v19 = v33 & (v11 - 1);
      uint64_t v20 = (uint64_t *)(v9 + 16 * v19);
      uint64_t v21 = *v20;
      if (*v20 == a2) {
        goto LABEL_13;
      }
    }
    if (v30) {
      uint64_t v20 = v30;
    }
    int v34 = *(_DWORD *)(v7 + 160);
    if (4 * v34 + 4 < (3 * v11))
    {
      if ((int)v11 + ~v34 - *(_DWORD *)(v7 + 164) > v11 >> 3) {
        goto LABEL_24;
      }
      goto LABEL_40;
    }
LABEL_39:
    LODWORD(v11) = 2 * v11;
LABEL_40:
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v8, v11);
    uint64_t v35 = *(void *)(v7 + 152);
    int v36 = *(_DWORD *)(v7 + 168) - 1;
    unsigned int v37 = v36 & (v12 ^ (a2 >> 9));
    uint64_t v20 = (uint64_t *)(v35 + 16 * v37);
    uint64_t v38 = *v20;
    if (*v20 == a2)
    {
LABEL_41:
      ++*(_DWORD *)(v7 + 160);
      if (a2 == -4096) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    uint64_t v39 = 0;
    int v40 = 1;
    while (v38 != -4096)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v38 == -8192;
      }
      if (v41) {
        uint64_t v39 = v20;
      }
      unsigned int v42 = v37 + v40++;
      unsigned int v37 = v42 & v36;
      uint64_t v20 = (uint64_t *)(v35 + 16 * v37);
      uint64_t v38 = *v20;
      if (*v20 == a2) {
        goto LABEL_41;
      }
    }
    if (v39) {
      uint64_t v20 = v39;
    }
LABEL_24:
    uint64_t v29 = *v20;
    ++*(_DWORD *)(v7 + 160);
    if (v29 == -4096)
    {
LABEL_26:
      uint64_t *v20 = a2;
      *((_DWORD *)v20 + 2) = v16;
LABEL_13:
      operator new();
    }
LABEL_25:
    --*(_DWORD *)(v7 + 164);
    goto LABEL_26;
  }
  if (a4)
  {
LABEL_15:
    uint64_t v22 = *(void *)(*(void *)(*a1 + 88) + 8 * *((unsigned int *)v14 + 2));
    uint64_t v23 = 8 * a4;
    do
    {
      int v24 = mlir::AsmParserState::convertIdLocToRange(*a3);
      uint64_t v26 = v25;
      unint64_t v27 = *(unsigned int *)(v22 + 32);
      if (v27 >= *(unsigned int *)(v22 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v22 + 24, (void *)(v22 + 40), v27 + 1, 16);
        unint64_t v27 = *(unsigned int *)(v22 + 32);
      }
      int v28 = (void *)(*(void *)(v22 + 24) + 16 * v27);
      void *v28 = v24;
      v28[1] = v26;
      ++*(_DWORD *)(v22 + 32);
      ++a3;
      v23 -= 8;
    }
    while (v23);
  }
}

void mlir::AsmParserState::addUses(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v24 = a2;
  uint64_t v4 = *(unsigned int *)(*(void *)a1 + 512);
  if (v4)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 504) + 8 * v4 - 8);
    int v8 = *(_DWORD *)(v7 + 16);
    if (v8)
    {
      int v9 = v8 - 1;
      unsigned int v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v11 = (uint64_t *)(*(void *)v7 + 24 * v10);
      uint64_t v12 = *v11;
      if (*v11 == a2) {
        goto LABEL_15;
      }
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          uint64_t v13 = v11;
        }
        unsigned int v16 = v10 + v14++;
        unsigned int v10 = v16 & v9;
        uint64_t v11 = (uint64_t *)(*(void *)v7 + 24 * v10);
        uint64_t v12 = *v11;
        if (*v11 == a2) {
          goto LABEL_15;
        }
      }
      if (v13) {
        int v17 = v13;
      }
      else {
        int v17 = v11;
      }
    }
    else
    {
      int v17 = 0;
    }
    uint64_t v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::InsertIntoBucket<mlir::Attribute const&>(v7, v17, &v24);
LABEL_15:
    int v18 = v11 + 1;
    uint64_t v22 = &a3[16 * a4];
    uint64_t v23 = a3;
    uint64_t v19 = *((unsigned int *)v11 + 4);
    if (v19 >= *((_DWORD *)v11 + 5))
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::growAndEmplaceBack<llvm::SMRange const*,llvm::SMRange const*>((uint64_t)v18, &v23, (const void **)&v22);
      return;
    }
    uint64_t v20 = (void *)(*v18 + (v19 << 6));
    void *v20 = v20 + 2;
    v20[1] = 0x300000000;
    if ((unint64_t)(16 * a4) < 0x31)
    {
      unsigned int v21 = 0;
      if (!a4)
      {
LABEL_21:
        *((_DWORD *)v20 + 2) = v21 + a4;
        ++*((_DWORD *)v11 + 4);
        return;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v20, v20 + 2, (16 * a4) >> 4, 16);
      unsigned int v21 = *((_DWORD *)v20 + 2);
      if (!a4) {
        goto LABEL_21;
      }
    }
    memcpy((void *)(*v20 + 16 * v21), a3, 16 * a4);
    unsigned int v21 = *((_DWORD *)v20 + 2);
    goto LABEL_21;
  }
}

void mlir::AsmParserState::addAttrAliasUses(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(*a1 + 304), a2, a3);
  if (Key == -1) {
    uint64_t v12 = *(unsigned int *)(v10 + 312);
  }
  else {
    uint64_t v12 = Key;
  }
  uint64_t v13 = *(void *)(v10 + 304) + 8 * v12;
  uint64_t v14 = *a1;
  if (v13 == *(void *)(*a1 + 304) + 8 * *(unsigned int *)(*a1 + 312))
  {
    uint64_t v18 = *(unsigned int *)(v14 + 184);
    llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned long>(v14 + 304, a2, a3, &v18);
    operator new();
  }
  uint64_t v15 = *(void *)(*(void *)(v14 + 176) + 8 * *(unsigned int *)(*(void *)v13 + 8));
  uint64_t v16 = *(unsigned int *)(v15 + 40);
  if (v16 >= *(_DWORD *)(v15 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 32, (void *)(v15 + 48), v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(v15 + 40);
  }
  int v17 = (void *)(*(void *)(v15 + 32) + 16 * v16);
  *int v17 = a4;
  v17[1] = a5;
  ++*(_DWORD *)(v15 + 40);
}

void mlir::AsmParserState::addTypeAliasUses(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(*a1 + 328), a2, a3);
  if (Key == -1) {
    uint64_t v10 = *(unsigned int *)(v8 + 336);
  }
  else {
    uint64_t v10 = Key;
  }
  uint64_t v11 = *(void *)(*(void *)(*a1 + 240) + 8 * *(unsigned int *)(*(void *)(*(void *)(v8 + 328) + 8 * v10) + 8));
  uint64_t v12 = *(unsigned int *)(v11 + 40);
  if (v12 >= *(_DWORD *)(v11 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 32, (void *)(v11 + 48), v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(v11 + 40);
  }
  uint64_t v13 = (void *)(*(void *)(v11 + 32) + 16 * v12);
  void *v13 = a4;
  v13[1] = a5;
  ++*(_DWORD *)(v11 + 40);
}

int32x2_t mlir::AsmParserState::refineDefinition(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v13 = a2;
  uint64_t v14 = 0;
  uint64_t v5 = *(void *)a1;
  int v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)(*(void *)a1 + 352), &v13, &v14);
  uint64_t v7 = (uint64_t)v14;
  if (!v6) {
    uint64_t v7 = *(void *)(v5 + 352) + 72 * *(unsigned int *)(v5 + 368);
  }
  mlir::AsmParserState::addUses(a1, a3, *(unsigned char ***)(v7 + 8), *(unsigned int *)(v7 + 16));
  uint64_t v8 = *(int32x2_t **)a1;
  int v9 = (uint64_t *)(*(void *)a1 + 352);
  uint64_t v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14))
  {
    uint64_t v11 = v14;
    uint64_t v12 = (void *)v14[1];
    if (v12 != v14 + 3) {
      free(v12);
    }
    *uint64_t v11 = -8192;
    int32x2_t result = vadd_s32(v8[45], (int32x2_t)0x1FFFFFFFFLL);
    v8[45] = result;
  }
  return result;
}

void std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    unsigned int v3 = *((_DWORD *)a2 + 4);
    uint64_t v4 = *a2;
    if (v3)
    {
      uint64_t v5 = v4 + 24 * v3;
      do
      {
        if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v6 = *(char **)(v4 + 8);
          uint64_t v7 = *(unsigned int *)(v4 + 16);
          if (v7)
          {
            uint64_t v8 = v7 << 6;
            do
            {
              int v9 = *(char **)&v6[v8 - 64];
              if (&v6[v8 - 48] != v9) {
                free(v9);
              }
              v8 -= 64;
            }
            while (v8);
            int v6 = *(char **)(v4 + 8);
          }
          if (v6 != (char *)(v4 + 24)) {
            free(v6);
          }
        }
        v4 += 24;
      }
      while (v4 != v5);
      uint64_t v4 = *a2;
      uint64_t v10 = 24 * *((unsigned int *)a2 + 4);
    }
    else
    {
      uint64_t v10 = 0;
    }
    llvm::deallocate_buffer((llvm *)v4, (void *)v10);
  }
}

void sub_21155AF00()
{
  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::SmallVectorImpl<llvm::SMRange>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 16 * v8);
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        uint64_t v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          _DWORD *v7 = 0;
          return a1;
        }
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = *v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
      uint64_t v9 = 0;
      uint64_t v10 = *v7;
      if (!*v7) {
        goto LABEL_15;
      }
    }
    memcpy((void *)(*(void *)a1 + 16 * v9), (const void *)(*(void *)a2 + 16 * v9), *(void *)a2 + 16 * v10 - (*(void *)a2 + 16 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::Operation *,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>,false>::growAndEmplaceBack<mlir::Operation *&,std::unique_ptr<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v30 = 0;
  int v6 = (char *)(a1 + 16);
  uint64_t v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v30);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  uint64_t v9 = 16 * v8;
  uint64_t v10 = &v7[16 * v8];
  *(void *)uint64_t v10 = *a2;
  uint64_t v11 = *a3;
  *a3 = 0;
  *((void *)v10 + 1) = v11;
  uint64_t v12 = *(char **)a1;
  if (!v8) {
    goto LABEL_19;
  }
  unint64_t v13 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v13 < 7 || (v7 < &v12[v9] ? (BOOL v14 = v12 >= &v7[v9]) : (BOOL v14 = 1), !v14))
  {
    int v17 = v7;
    uint64_t v18 = *(char **)a1;
    do
    {
LABEL_13:
      *(void *)int v17 = *(void *)v18;
      uint64_t v24 = *((void *)v18 + 1);
      *((void *)v18 + 1) = 0;
      *((void *)v17 + 1) = v24;
      v18 += 16;
      v17 += 16;
    }
    while (v18 != &v12[v9]);
    goto LABEL_14;
  }
  unint64_t v15 = v13 + 1;
  uint64_t v16 = (v13 + 1) & 0x1FFFFFFFFFFFFFFELL;
  int v17 = &v7[16 * v16];
  uint64_t v18 = &v12[16 * v16];
  uint64_t v19 = v16;
  uint64_t v20 = v7;
  unsigned int v21 = *(char **)a1;
  do
  {
    long long v22 = *(_OWORD *)v21;
    long long v23 = *((_OWORD *)v21 + 1);
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 3) = 0;
    *(_OWORD *)uint64_t v20 = v22;
    *((_OWORD *)v20 + 1) = v23;
    v20 += 32;
    v21 += 32;
    v19 -= 2;
  }
  while (v19);
  if (v15 != v16) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v25 = *(void *)a1 - 8;
  do
  {
    uint64_t v26 = *(uint64_t **)(v25 + v9);
    *(void *)(v25 + v9) = 0;
    if (v26) {
      std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100](v25 + v9, v26);
    }
    v9 -= 16;
  }
  while (v9);
  uint64_t v12 = *(char **)a1;
LABEL_19:
  int v27 = v30;
  if (v12 != v6) {
    free(v12);
  }
  *(void *)a1 = v7;
  unsigned int v28 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 12) = v27;
  return (uint64_t)&v7[16 * v28 - 16];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::AsmParserState::Impl::PartialOpDef,false>::growAndEmplaceBack<mlir::OperationName const&>(uint64_t a1, void *a2)
{
  unint64_t v27 = 0;
  uint64_t v4 = (char *)(a1 + 16);
  uint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v27);
  *(void *)&v5[8 * *(unsigned int *)(a1 + 8)] = 0;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(a2)) {
    operator new();
  }
  int v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v9 = 8 * v7;
    if (v8 >= 0xB)
    {
      BOOL v12 = v6 >= &v5[v9] || v5 >= &v6[v9];
      uint64_t v10 = v5;
      uint64_t v11 = *(char **)a1;
      if (v12)
      {
        unint64_t v13 = v8 + 1;
        uint64_t v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v10 = &v5[v14];
        uint64_t v11 = &v6[v14];
        unint64_t v15 = (long long *)(v6 + 16);
        uint64_t v16 = v5 + 16;
        uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v18 = *(v15 - 1);
          long long v19 = *v15;
          *(v15 - 1) = 0uLL;
          *unint64_t v15 = 0uLL;
          *(v16 - 1) = v18;
          *uint64_t v16 = v19;
          v15 += 2;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          uint64_t v22 = *(void *)a1 - 8;
          do
          {
            long long v23 = *(uint64_t **)(v22 + v9);
            *(void *)(v22 + v9) = 0;
            if (v23) {
              std::default_delete<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>>::operator()[abi:nn180100](v22 + v9, v23);
            }
            v9 -= 8;
          }
          while (v9);
          int v6 = *(char **)a1;
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v10 = v5;
      uint64_t v11 = *(char **)a1;
    }
    uint64_t v20 = &v6[8 * v7];
    do
    {
      uint64_t v21 = *(void *)v11;
      *(void *)uint64_t v11 = 0;
      v11 += 8;
      *(void *)uint64_t v10 = v21;
      v10 += 8;
    }
    while (v11 != v20);
    goto LABEL_16;
  }
LABEL_21:
  int v24 = v27;
  if (v6 != v4) {
    free(v6);
  }
  *(void *)a1 = v5;
  unsigned int v25 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 12) = v24;
  return (uint64_t)&v5[8 * v25 - 8];
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(void *a1)
{
  uint64_t v1 = &unk_267771000;
  {
    BOOL v12 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
      unint64_t v14 = 83;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[388]);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::AsmParserState::OperationDefinition::ResultGroupDefinition,false>::growAndEmplaceBack<unsigned int const&,llvm::SMRange>(uint64_t a1, _DWORD *a2, _OWORD *a3)
{
  unint64_t v22 = 0;
  unint64_t v6 = (char *)(a1 + 16);
  uint64_t v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 88, &v22);
  unint64_t v8 = v7;
  uint64_t v9 = &v7[88 * *(unsigned int *)(a1 + 8)];
  *(_DWORD *)uint64_t v9 = *a2;
  *(_OWORD *)(v9 + 8) = *a3;
  *((void *)v9 + 3) = v9 + 40;
  *((void *)v9 + 4) = 0x300000000;
  unint64_t v10 = *(char **)a1;
  int v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    BOOL v12 = &v10[88 * v11];
    unint64_t v13 = v7 + 24;
    uint64_t v14 = (uint64_t)(v10 + 24);
    do
    {
      uint64_t v15 = v14 - 24;
      *((_DWORD *)v13 - 6) = *(_DWORD *)(v14 - 24);
      *((_OWORD *)v13 - 1) = *(_OWORD *)(v14 - 16);
      void *v13 = v13 + 2;
      v13[1] = 0x300000000;
      if (*(_DWORD *)(v14 + 8)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v13, v14);
      }
      v13 += 11;
      v14 += 88;
    }
    while ((char *)(v15 + 88) != v12);
    unint64_t v10 = *(char **)a1;
    unsigned int v16 = *(_DWORD *)(a1 + 8);
    if (v16)
    {
      uint64_t v17 = 88 * v16;
      do
      {
        long long v18 = *(char **)&v10[v17 - 64];
        if (&v10[v17 - 48] != v18) {
          free(v18);
        }
        v17 -= 88;
      }
      while (v17);
      unint64_t v10 = *(char **)a1;
    }
  }
  int v19 = v22;
  if (v10 != v6) {
    free(v10);
  }
  *(void *)a1 = v8;
  unsigned int v20 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 12) = v19;
  return (uint64_t)&v8[88 * v20 - 88];
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::OperationDefinition>,false>::moveElementsForGrow(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (!v2) {
    return result;
  }
  unint64_t v3 = *(void *)result;
  unint64_t v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v4 < 0xB || (v3 < a2 + 8 * v2 ? (BOOL v5 = v3 + 8 * v2 > a2) : (BOOL v5 = 0), v5))
  {
    unint64_t v8 = (void *)a2;
    uint64_t v9 = *(uint64_t **)result;
LABEL_12:
    uint64_t v15 = (uint64_t *)(v3 + 8 * v2);
    do
    {
      uint64_t v16 = *v9;
      *v9++ = 0;
      *v8++ = v16;
    }
    while (v9 != v15);
    goto LABEL_14;
  }
  unint64_t v6 = v4 + 1;
  uint64_t v7 = (v4 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  unint64_t v8 = (void *)(a2 + 8 * v7);
  uint64_t v9 = (uint64_t *)(v3 + 8 * v7);
  unint64_t v10 = (long long *)(v3 + 16);
  int v11 = (_OWORD *)(a2 + 16);
  uint64_t v12 = v7;
  do
  {
    long long v13 = *(v10 - 1);
    long long v14 = *v10;
    *(v10 - 1) = 0uLL;
    *unint64_t v10 = 0uLL;
    *(v11 - 1) = v13;
    *int v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v6 != v7) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v17 = *(void **)result;
  long long v18 = (void *)(*(void *)result + 8 * v2);
  do
  {
    uint64_t v20 = *--v18;
    uint64_t v19 = v20;
    void *v18 = 0;
    if (v20)
    {
      uint64_t v21 = *(void **)(v19 + 144);
      if (v21 != (void *)(v19 + 160)) {
        free(v21);
      }
      unint64_t v22 = *(char **)(v19 + 40);
      unsigned int v23 = *(_DWORD *)(v19 + 48);
      if (v23)
      {
        uint64_t v24 = 88 * v23;
        do
        {
          unsigned int v25 = *(char **)&v22[v24 - 64];
          if (&v22[v24 - 48] != v25) {
            free(v25);
          }
          v24 -= 88;
        }
        while (v24);
        unint64_t v22 = *(char **)(v19 + 40);
      }
      if (v22 != (char *)(v19 + 56)) {
        free(v22);
      }
      int32x2_t result = MEMORY[0x21667D3C0](v19, 0x10F0C401650C48ELL);
    }
  }
  while (v18 != v17);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::BlockDefinition>,false>::moveElementsForGrow(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (!v2) {
    return result;
  }
  unint64_t v3 = *(void *)result;
  unint64_t v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v4 < 0xB || (v3 < a2 + 8 * v2 ? (BOOL v5 = v3 + 8 * v2 > a2) : (BOOL v5 = 0), v5))
  {
    unint64_t v8 = (void *)a2;
    uint64_t v9 = *(uint64_t **)result;
LABEL_12:
    uint64_t v15 = (uint64_t *)(v3 + 8 * v2);
    do
    {
      uint64_t v16 = *v9;
      *v9++ = 0;
      *v8++ = v16;
    }
    while (v9 != v15);
    goto LABEL_14;
  }
  unint64_t v6 = v4 + 1;
  uint64_t v7 = (v4 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  unint64_t v8 = (void *)(a2 + 8 * v7);
  uint64_t v9 = (uint64_t *)(v3 + 8 * v7);
  unint64_t v10 = (long long *)(v3 + 16);
  int v11 = (_OWORD *)(a2 + 16);
  uint64_t v12 = v7;
  do
  {
    long long v13 = *(v10 - 1);
    long long v14 = *v10;
    *(v10 - 1) = 0uLL;
    *unint64_t v10 = 0uLL;
    *(v11 - 1) = v13;
    *int v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v6 != v7) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v17 = *(void **)result;
  long long v18 = (void *)(*(void *)result + 8 * v2);
  do
  {
    uint64_t v20 = *--v18;
    uint64_t v19 = v20;
    void *v18 = 0;
    if (v20)
    {
      uint64_t v21 = *(char **)(v19 + 88);
      uint64_t v22 = *(unsigned int *)(v19 + 96);
      if (v22)
      {
        uint64_t v23 = 80 * v22;
        do
        {
          uint64_t v24 = *(char **)&v21[v23 - 64];
          if (&v21[v23 - 48] != v24) {
            free(v24);
          }
          v23 -= 80;
        }
        while (v23);
        uint64_t v21 = *(char **)(v19 + 88);
      }
      if (v21 != (char *)(v19 + 104)) {
        free(v21);
      }
      unsigned int v25 = *(void **)(v19 + 24);
      if (v25 != (void *)(v19 + 40)) {
        free(v25);
      }
      int32x2_t result = MEMORY[0x21667D3C0](v19, 0x10F0C400A026A70);
    }
  }
  while (v18 != v17);
  return result;
}

void llvm::SmallVectorTemplateBase<mlir::AsmParserState::SMDefinition,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = 0;
  unint64_t v3 = (char *)(a1 + 16);
  unint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 80, &v16);
  BOOL v5 = v4;
  unint64_t v6 = *(char **)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = &v6[80 * v7];
    uint64_t v9 = v4 + 16;
    uint64_t v10 = (uint64_t)(v6 + 16);
    do
    {
      *((_OWORD *)v9 - 1) = *(_OWORD *)(v10 - 16);
      *uint64_t v9 = v9 + 2;
      v9[1] = 0x300000000;
      if (*(_DWORD *)(v10 + 8)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v9, v10);
      }
      uint64_t v11 = v10 - 16;
      v9 += 10;
      v10 += 80;
    }
    while ((char *)(v11 + 80) != v8);
    unint64_t v6 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 80 * v12;
      do
      {
        long long v14 = *(char **)&v6[v13 - 64];
        if (&v6[v13 - 48] != v14) {
          free(v14);
        }
        v13 -= 80;
      }
      while (v13);
      unint64_t v6 = *(char **)a1;
    }
  }
  int v15 = v16;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v15;
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::AsmParserState::AttributeAliasDefinition>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v25 = 0;
  unint64_t v3 = (char *)(a1 + 16);
  unint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v25);
  BOOL v5 = *(char **)a1;
  unint64_t v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (!v7) {
    goto LABEL_21;
  }
  unint64_t v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v9 = 8 * v7;
  if (v8 < 0xB)
  {
    uint64_t v10 = v4;
LABEL_12:
    uint64_t v19 = &v5[8 * v7];
    do
    {
      uint64_t v20 = *(void *)v6;
      *(void *)unint64_t v6 = 0;
      v6 += 8;
      *(void *)uint64_t v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  BOOL v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  uint64_t v10 = v4;
  if (!v11) {
    goto LABEL_12;
  }
  unint64_t v12 = v8 + 1;
  uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v10 = &v4[v13];
  unint64_t v6 = &v5[v13];
  long long v14 = (long long *)(v5 + 16);
  int v15 = v4 + 16;
  uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v17 = *(v14 - 1);
    long long v18 = *v14;
    *(v14 - 1) = 0uLL;
    *long long v14 = 0uLL;
    *(v15 - 1) = v17;
    *int v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v21 = *(void *)a1 - 8;
  do
  {
    uint64_t v22 = *(void *)(v21 + v9);
    *(void *)(v21 + v9) = 0;
    if (v22)
    {
      uint64_t v23 = *(void **)(v22 + 32);
      if (v23 != (void *)(v22 + 48)) {
        free(v23);
      }
      MEMORY[0x21667D3C0](v22, 0x10F0C40C6C5BB84);
    }
    v9 -= 8;
  }
  while (v9);
  unint64_t v6 = *(char **)a1;
LABEL_21:
  int v24 = v25;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    unint64_t v6 = &unk_267770000;
    {
      uint64_t v23 = a3;
      uint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      unint64_t v6 = &unk_267770000;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        unint64_t v6 = (void *)&unk_267770000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (v6[385] + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    int v10 = v3 - 1;
    unsigned int v11 = v9 & (v3 - 1);
    unint64_t v12 = (void *)(v4 + 72 * v11);
    uint64_t v13 = *v12;
    if (*a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      int v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          int v15 = v12;
        }
        unsigned int v18 = v11 + v16++;
        unsigned int v11 = v18 & v10;
        unint64_t v12 = (void *)(v4 + 72 * (v18 & v10));
        uint64_t v13 = *v12;
        if (*a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        unint64_t v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::grow(a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    uint64_t v10 = 72 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    unint64_t v12 = 72 * v11 - 72;
    if (v12 < 0x48)
    {
      uint64_t v13 = result;
LABEL_14:
      BOOL v17 = &result[9 * v11];
      do
      {
        void *v13 = -4096;
        v13 += 9;
      }
      while (v13 != v17);
      return result;
    }
    unint64_t v14 = v12 / 0x48 + 1;
    uint64_t v13 = &result[9 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    int v16 = result;
    do
    {
      *int v16 = -4096;
      v16[9] = -4096;
      v16 += 18;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_14;
    }
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    unint64_t v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      int v9 = *(void **)a1;
LABEL_7:
      uint64_t v13 = (void *)(v7 + 72 * v6);
      do
      {
        *int v9 = -4096;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x48 + 1;
    int v9 = (void *)(v7 + 72 * (v10 & 0x7FFFFFFFFFFFFFELL));
    uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[9] = -4096;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        BOOL v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v4, &v17);
        unint64_t v14 = v17;
        *BOOL v17 = *(void *)v4;
        void v14[2] = 0x600000000;
        v14[1] = v14 + 3;
        uint64_t v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v15, v4 + 8);
        }
        ++*(_DWORD *)(a1 + 8);
        int v16 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v16) {
          free(v16);
        }
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SMLoc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      unsigned int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 8 * v8);
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 8 * v9);
        uint64_t v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          _DWORD *v7 = 0;
          return a1;
        }
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = *v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
      uint64_t v9 = 0;
      uint64_t v10 = *v7;
      if (!*v7) {
        goto LABEL_15;
      }
    }
    memcpy((void *)(*(void *)a1 + 8 * v9), (const void *)(*(void *)a2 + 8 * v9), *(void *)a2 + 8 * v10 - (*(void *)a2 + 8 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::InsertIntoBucket<mlir::Attribute const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(24 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = 3 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  unint64_t v18 = 24 * v17 - 24;
  int v19 = buffer;
  if (v18 < 0x18) {
    goto LABEL_34;
  }
  unint64_t v20 = v18 / 0x18 + 1;
  int v19 = &buffer[3 * (v20 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v21 = v20 & 0x1FFFFFFFFFFFFFFELL;
  int v22 = buffer;
  do
  {
    *int v22 = -4096;
    void v22[3] = -4096;
    v22 += 6;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *int v19 = -4096;
      v19 += 3;
    }
    while (v19 != &buffer[3 * v17]);
  }
  uint64_t v7 = *a3;
  int v23 = v17 - 1;
  unsigned int v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[3 * v24];
  uint64_t v25 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = a2;
      }
      unsigned int v29 = v24 + v27++;
      unsigned int v24 = v29 & v23;
      a2 = &buffer[3 * v24];
      uint64_t v25 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v26) {
      a2 = v26;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>,mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,llvm::SmallVector<llvm::SmallVector<llvm::SMRange,3u>,0u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    unint64_t v8 = 24 * v6 - 24;
    if (v8 < 0x18)
    {
      int v9 = *(void **)a1;
LABEL_7:
      int v13 = &v7[3 * v6];
      do
      {
        *int v9 = -4096;
        v9 += 3;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x18 + 1;
    int v9 = &v7[3 * (v10 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0x1FFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[3] = -4096;
      v12 += 6;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        break;
      }
LABEL_11:
      v4 += 3;
      if (v4 == a3) {
        return;
      }
    }
    int v15 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    uint64_t v17 = (void *)(*(void *)a1 + 24 * v16);
    uint64_t v18 = *v17;
    if (v14 != *v17)
    {
      int v23 = 0;
      int v24 = 1;
      while (v18 != -4096)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v18 == -8192;
        }
        if (v25) {
          int v23 = v17;
        }
        unsigned int v26 = v16 + v24++;
        unsigned int v16 = v26 & v15;
        uint64_t v17 = (void *)(*(void *)a1 + 24 * (v26 & v15));
        uint64_t v18 = *v17;
        if (v14 == *v17) {
          goto LABEL_14;
        }
      }
      if (v23) {
        uint64_t v17 = v23;
      }
    }
LABEL_14:
    *uint64_t v17 = v14;
    v17[1] = v17 + 3;
    unint64_t v17[2] = 0;
    if (*((_DWORD *)v4 + 4))
    {
      llvm::SmallVectorImpl<llvm::SmallVector<llvm::SMRange,3u>>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
      uint64_t v19 = *((unsigned int *)v4 + 4);
      ++*(_DWORD *)(a1 + 8);
      unint64_t v20 = (char *)v4[1];
      if (!v19) {
        goto LABEL_22;
      }
      uint64_t v21 = v19 << 6;
      do
      {
        int v22 = *(char **)&v20[v21 - 64];
        if (&v20[v21 - 48] != v22) {
          free(v22);
        }
        v21 -= 64;
      }
      while (v21);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
    }
    unint64_t v20 = (char *)v4[1];
LABEL_22:
    if (v20 != (char *)(v4 + 3)) {
      free(v20);
    }
    goto LABEL_11;
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SmallVector<llvm::SMRange,3u>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 16;
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2 != a2 + 16)
    {
      unsigned int v6 = *(char **)a1;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = v7 << 6;
        do
        {
          int v9 = *(char **)&v6[v8 - 64];
          if (&v6[v8 - 48] != v9) {
            free(v9);
          }
          v8 -= 64;
        }
        while (v8);
        unsigned int v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16)) {
        free(v6);
      }
      *(void *)a1 = *(void *)a2;
      unint64_t v10 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *unint64_t v10 = 0;
      return a1;
    }
    unint64_t v10 = (_DWORD *)(a2 + 8);
    unint64_t v12 = *(unsigned int *)(a2 + 8);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      uint64_t v17 = *(char **)a1;
      if (v12)
      {
        uint64_t v18 = 0;
        do
        {
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)&v17[v18], v4 + v18);
          v18 += 64;
        }
        while (v12 << 6 != v18);
        uint64_t v19 = &v17[v18];
        uint64_t v17 = *(char **)a1;
        uint64_t v13 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v19 = *(char **)a1;
      }
      int v31 = &v17[64 * v13];
      while (v31 != v19)
      {
        unsigned int v33 = (char *)*((void *)v31 - 8);
        v31 -= 64;
        BOOL v32 = v33;
        if (v31 + 16 != v33) {
          free(v32);
        }
      }
      *(_DWORD *)(a1 + 8) = v12;
      uint64_t v34 = *(unsigned int *)(a2 + 8);
      if (v34)
      {
        uint64_t v35 = *(void *)a2;
        uint64_t v36 = v34 << 6;
        do
        {
          unsigned int v37 = *(void **)(v35 + v36 - 64);
          if ((void *)(v35 + v36 - 48) != v37) {
            free(v37);
          }
          v36 -= 64;
        }
        while (v36);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if (!v13)
      {
        uint64_t v13 = 0;
        uint64_t v22 = *(void *)a2;
        uint64_t v23 = *(unsigned int *)(a2 + 8);
        if (*(_DWORD *)(a2 + 8))
        {
LABEL_31:
          int v24 = *(char **)a1;
          uint64_t v25 = v13 << 6;
          uint64_t v26 = v23 << 6;
          do
          {
            int v27 = &v24[v25];
            *(void *)int v27 = &v24[v25 + 16];
            *((void *)v27 + 1) = 0x300000000;
            if (*(_DWORD *)(v22 + v25 + 8)) {
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v27, v22 + v25);
            }
            v24 += 64;
            v26 -= 64;
            v22 += 64;
          }
          while (v25 != v26);
          uint64_t v22 = *(void *)a2;
        }
LABEL_36:
        *(_DWORD *)(a1 + 8) = v12;
        uint64_t v28 = *v10;
        if (v28)
        {
          uint64_t v29 = v28 << 6;
          do
          {
            unint64_t v30 = *(void **)(v22 + v29 - 64);
            if ((void *)(v22 + v29 - 48) != v30) {
              free(v30);
            }
            v29 -= 64;
          }
          while (v29);
        }
        goto LABEL_12;
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = v13 << 6;
      do
      {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v20, v4);
        v4 += 64;
        v20 += 64;
        v21 -= 64;
      }
      while (v21);
    }
    else
    {
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = v13 << 6;
        do
        {
          unsigned int v16 = *(void **)(v14 + v15 - 64);
          if ((void *)(v14 + v15 - 48) != v16) {
            free(v16);
          }
          v15 -= 64;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::grow(a1, v12);
      uint64_t v13 = 0;
    }
    uint64_t v22 = *(void *)a2;
    uint64_t v23 = *(unsigned int *)(a2 + 8);
    if (v13 != v23) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  uint64_t v3 = (_DWORD *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 64, &v14);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = v7 << 6;
    int v9 = v4;
    do
    {
      *int v9 = v9 + 2;
      v9[1] = 0x300000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 8;
      v6 += 16;
      v8 -= 64;
    }
    while (v8);
    unsigned int v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = v10 << 6;
      do
      {
        unint64_t v12 = *(char **)((char *)v6 + v11 - 64);
        if ((char *)v6 + v11 - 48 != v12) {
          free(v12);
        }
        v11 -= 64;
      }
      while (v11);
      unsigned int v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallVector<llvm::SMRange,3u>,false>::growAndEmplaceBack<llvm::SMRange const*,llvm::SMRange const*>(uint64_t a1, const void **a2, const void **a3)
{
  unint64_t v23 = 0;
  unsigned int v6 = (_DWORD *)(a1 + 16);
  uint64_t v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 64, &v23);
  uint64_t v8 = &v7[8 * (unint64_t)*(unsigned int *)(a1 + 8)];
  int v9 = *a2;
  uint64_t v10 = *a3;
  *uint64_t v8 = v8 + 2;
  v8[1] = 0x300000000;
  uint64_t v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) < 0x31)
  {
    unsigned int v12 = 0;
    if (v9 == v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, v8 + 2, v11 >> 4, 16);
  unsigned int v12 = *((_DWORD *)v8 + 2);
  if (v9 != v10)
  {
LABEL_5:
    memcpy((void *)(*v8 + 16 * v12), v9, v10 - v9);
    unsigned int v12 = *((_DWORD *)v8 + 2);
  }
LABEL_6:
  *((_DWORD *)v8 + 2) = v12 + ((unint64_t)v11 >> 4);
  int v13 = *(_DWORD **)a1;
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  if (v14)
  {
    uint64_t v15 = v14 << 6;
    unsigned int v16 = v7;
    do
    {
      *unsigned int v16 = v16 + 2;
      v16[1] = 0x300000000;
      if (v13[2]) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v16, (uint64_t)v13);
      }
      v16 += 8;
      v13 += 16;
      v15 -= 64;
    }
    while (v15);
    int v13 = *(_DWORD **)a1;
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    if (v17)
    {
      uint64_t v18 = v17 << 6;
      do
      {
        uint64_t v19 = *(char **)((char *)v13 + v18 - 64);
        if ((char *)v13 + v18 - 48 != v19) {
          free(v19);
        }
        v18 -= 64;
      }
      while (v18);
      int v13 = *(_DWORD **)a1;
    }
  }
  int v20 = v23;
  if (v13 != v6) {
    free(v13);
  }
  *(void *)a1 = v7;
  uint64_t v21 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v21;
  *(_DWORD *)(a1 + 12) = v20;
  return (uint64_t)&v7[8 * v21 - 8];
}

llvm::APFloatBase *mlir::detail::Parser::parseAttribute(mlir::StringAttr ****a1, void *a2)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[1];
  uint64_t v4 = (mlir::Token *)(v3 + 7);
  uint64_t v5 = (uint64_t)a2;
  switch(*((_DWORD *)v3 + 14))
  {
    case 2:
      if (mlir::Token::isCodeCompletionFor((uint64_t)v4, 5)) {
        return (llvm::APFloatBase *)mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, v5);
      }
      return (llvm::APFloatBase *)mlir::detail::Parser::codeCompleteAttribute((mlir::detail::Parser *)a1);
    case 4:
      *(void *)&long long v94 = v95;
      *((void *)&v94 + 1) = 0x300000000;
      if (v3[16])
      {
        uint64_t LocRange = mlir::Token::getLocRange(v4);
        uint64_t v10 = (uint64_t *)(v94 + 16 * DWORD2(v94));
        *uint64_t v10 = LocRange;
        v10[1] = v11;
        ++DWORD2(v94);
        uint64_t v3 = a1[1];
      }
      mlir::Token::getSymbolReference((mlir::Token *)(v3 + 7), &v82);
      mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v98);
      unsigned int v12 = a1[1];
      *(_OWORD *)(v12 + 7) = v98;
      v12[9] = (mlir::StringAttr **)v99;
      int v13 = a1[1];
      uint64_t v14 = (MirInfoChannelAssignment *)(v13 + 7);
      if (*((_DWORD *)v13 + 14) != 15)
      {
        unsigned int v16 = 0;
        uint64_t v15 = 0;
LABEL_115:
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v70 = &v82;
        }
        else {
          __int16 v70 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v82.__r_.__value_.__l.__size_;
        }
        uint64_t Dictionary = mlir::SymbolRefAttr::get(**v13, (uint64_t)v70, size, (uint64_t)v15, v16 - v15);
        uint64_t v72 = (uint64_t)a1[1][16];
        if (v72) {
          mlir::AsmParserState::addUses(v72, Dictionary, (char *)v94, DWORD2(v94));
        }
        goto LABEL_142;
      }
      uint64_t v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize(v14);
        mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v98);
        uint64_t v19 = a1[1];
        *(_OWORD *)(v19 + 7) = v98;
        v19[9] = (mlir::StringAttr **)v99;
        int v13 = a1[1];
        unsigned int v20 = *((_DWORD *)v13 + 14);
        if (v20 != 15)
        {
          if (v20 >= 2)
          {
            v13[5] = (mlir::StringAttr **)OCGSize;
            mlir::Lexer::lexToken((mlir::Lexer *)(v13 + 1), (uint64_t)&v98);
            uint64_t v69 = a1[1];
            *(_OWORD *)(v69 + 7) = v98;
            v69[9] = (mlir::StringAttr **)v99;
            int v13 = a1[1];
          }
          goto LABEL_115;
        }
        mlir::Lexer::lexToken((mlir::Lexer *)(v13 + 1), (uint64_t)&v98);
        uint64_t v21 = a1[1];
        *(_OWORD *)(v21 + 7) = v98;
        v21[9] = (mlir::StringAttr **)v99;
        uint64_t v22 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 7));
        unint64_t v23 = a1[1];
        if (*((_DWORD *)v23 + 14) != 4) {
          break;
        }
        if (v23[16])
        {
          uint64_t v25 = mlir::Token::getLocRange((mlir::Token *)(v23 + 7));
          uint64_t v26 = DWORD2(v94);
          if (DWORD2(v94) >= (unint64_t)HIDWORD(v94))
          {
            uint64_t v48 = v24;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v95, DWORD2(v94) + 1, 16);
            uint64_t v24 = v48;
            uint64_t v26 = DWORD2(v94);
          }
          int v27 = (uint64_t *)(v94 + 16 * v26);
          *int v27 = v25;
          v27[1] = v24;
          ++DWORD2(v94);
          unint64_t v23 = a1[1];
        }
        mlir::Token::getSymbolReference((mlir::Token *)(v23 + 7), &__p);
        mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v98);
        uint64_t v28 = a1[1];
        *(_OWORD *)(v28 + 7) = v98;
        v28[9] = (mlir::StringAttr **)v99;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v31 = mlir::SymbolRefAttr::get(**a1[1], (uint64_t)p_p, v30);
        uint64_t v32 = v31;
        if (v16 < v17)
        {
          *v16++ = v31;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
        uint64_t v33 = v16 - v15;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
          abort();
        }
        if (((char *)v17 - (char *)v15) >> 2 > v34) {
          unint64_t v34 = ((char *)v17 - (char *)v15) >> 2;
        }
        if ((unint64_t)((char *)v17 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35)
        {
          if (v35 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v36 = operator new(8 * v35);
          unsigned int v37 = (uint64_t *)&v36[8 * v33];
          *unsigned int v37 = v32;
          uint64_t v38 = (uint64_t)(v37 + 1);
          if (v16 == v15) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v36 = 0;
          unsigned int v37 = (uint64_t *)(8 * v33);
          *(void *)(8 * v33) = v32;
          uint64_t v38 = 8 * v33 + 8;
          if (v16 == v15) {
            goto LABEL_52;
          }
        }
        unint64_t v39 = (char *)(v16 - 1) - (char *)v15;
        if (v39 < 0x168)
        {
          int v40 = v16;
          goto LABEL_51;
        }
        if (&v36[(char *)v16 - (char *)v15 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v36[(char *)v16 - (char *)v15 - 8])
        {
          int v40 = v16;
          goto LABEL_51;
        }
        if ((uint64_t *)((char *)v16 - (v39 & 0xFFFFFFFFFFFFFFF8) - 8) > v16 - 1)
        {
          int v40 = v16;
          do
          {
LABEL_51:
            uint64_t v47 = *--v40;
            *--unsigned int v37 = v47;
          }
          while (v40 != v15);
          goto LABEL_52;
        }
        if ((unint64_t)((char *)v15 - v36) < 0x20)
        {
          int v40 = v16;
          goto LABEL_51;
        }
        uint64_t v41 = (v39 >> 3) + 1;
        uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        int v40 = &v16[v42 / 0xFFFFFFFFFFFFFFF8];
        unsigned int v37 = (uint64_t *)((char *)v37 - v42);
        uint64_t v43 = &v36[8 * v33 - 16];
        char v44 = v16 - 2;
        uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          _OWORD *v43 = v46;
          v43 -= 2;
          v44 -= 4;
          v45 -= 4;
        }
        while (v45);
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_51;
        }
LABEL_52:
        uint64_t v17 = (uint64_t *)&v36[8 * v35];
        if (v15) {
          operator delete(v15);
        }
        uint64_t v15 = v37;
        unsigned int v16 = (uint64_t *)v38;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_13;
        }
LABEL_12:
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
        int v13 = a1[1];
        uint64_t v14 = (MirInfoChannelAssignment *)(v13 + 7);
        if (*((_DWORD *)v13 + 14) != 15) {
          goto LABEL_115;
        }
      }
      *(void *)&long long v98 = "expected nested symbol reference identifier";
      LOWORD(v101) = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, v22, (uint64_t)&v98, v85);
      if (v85[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v85);
      }
      if (v92)
      {
        unint64_t v73 = v90;
        if (v90)
        {
          uint64_t v74 = v91;
          int v75 = v90;
          if (v91 != v90)
          {
            do
              uint64_t v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
            while (v74 != v73);
            int v75 = v90;
          }
          unint64_t v91 = v73;
          operator delete(v75);
        }
        char v76 = v88;
        if (v88)
        {
          uint64_t v77 = v89;
          unint64_t v78 = v88;
          if (v89 != v88)
          {
            do
            {
              uint64_t v80 = *--v77;
              uint64_t v79 = v80;
              *uint64_t v77 = 0;
              if (v80) {
                MEMORY[0x21667D390](v79, 0x1000C8077774924);
              }
            }
            while (v77 != v76);
            unint64_t v78 = v88;
          }
          unint64_t v89 = v76;
          operator delete(v78);
        }
        if (v86 != &v87) {
          free(v86);
        }
      }
      uint64_t Dictionary = 0;
LABEL_142:
      if (v15) {
        operator delete(v15);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      uint64_t v66 = (void *)v94;
      if ((void *)v94 != v95) {
LABEL_147:
      }
        free(v66);
      return (llvm::APFloatBase *)Dictionary;
    case 5:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, v5);
    case 9:
      uint64_t v49 = (mlir::detail::Parser *)a1;
      int v50 = 0;
      return mlir::detail::Parser::parseFloatAttr(v49, (uint64_t)a2, v50);
    case 0xA:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDecOrHexAttr((mlir::detail::Parser *)a1, (uint64_t)a2, 0);
    case 0xB:
      mlir::Token::getStringValue(v4, &v82);
      mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v94);
      unsigned int v51 = a1[1];
      *(_OWORD *)(v51 + 7) = v94;
      v51[9] = (mlir::StringAttr **)v95[0];
      if (v5) {
        goto LABEL_59;
      }
      unint64_t v64 = a1[1];
      if (*((_DWORD *)v64 + 14) == 15)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v64 + 1), (uint64_t)&v94);
        unint64_t v65 = a1[1];
        *(_OWORD *)(v65 + 7) = v94;
        v65[9] = (mlir::StringAttr **)v95[0];
        uint64_t v5 = mlir::detail::Parser::parseType((mlir::detail::Parser *)a1);
        if (!v5)
        {
          uint64_t Dictionary = 0;
          goto LABEL_111;
        }
LABEL_59:
        __int16 v96 = 260;
        *(void *)&long long v94 = &v82;
        uint64_t v52 = mlir::StringAttr::get((char **)&v94, v5);
      }
      else
      {
        char v68 = **v64;
        LOWORD(v101) = 260;
        *(void *)&long long v98 = &v82;
        uint64_t v52 = mlir::StringAttr::get(v68, (mlir::MLIRContext *)&v98);
      }
      uint64_t Dictionary = v52;
LABEL_111:
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      return (llvm::APFloatBase *)Dictionary;
    case 0x14:
      *(void *)&long long v94 = v95;
      *((void *)&v94 + 1) = *(void *)"";
      uint64_t v97 = 4;
      *(void *)&long long v98 = 1;
      *((void *)&v98 + 1) = -4096;
      uint64_t v99 = -4096;
      uint64_t v100 = -4096;
      uint64_t v101 = -4096;
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      v82.__r_.__value_.__l.__size_ = (std::string::size_type)&v98;
      v82.__r_.__value_.__r.__words[2] = (std::string::size_type)&v94;
      char v53 = mlir::detail::Parser::parseCommaSeparatedList((uint64_t)a1, 4, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>, (uint64_t)&v82, (uint64_t)" in attribute dictionary", 24);
      if ((v98 & 1) == 0) {
        llvm::deallocate_buffer(*((llvm **)&v98 + 1), (void *)(8 * v99));
      }
      if (v53) {
        uint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)&v94, **a1[1]);
      }
      else {
        uint64_t Dictionary = 0;
      }
      uint64_t v66 = (void *)v94;
      if ((void *)v94 == v95) {
        return (llvm::APFloatBase *)Dictionary;
      }
      goto LABEL_147;
    case 0x16:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v54 = a1[1];
      *(_OWORD *)(v54 + 7) = v94;
      v54[9] = (mlir::StringAttr **)v95[0];
      *(void *)&long long v94 = v95;
      *((void *)&v94 + 1) = *(void *)"";
      *(void *)&long long v98 = &v94;
      *((void *)&v98 + 1) = a1;
      if (mlir::detail::Parser::parseCommaSeparatedListUntil((uint64_t)a1, 29, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttribute(mlir::Type)::$_0>, (uint64_t)&v98, 1))
      {
        uint64_t Dictionary = mlir::Builder::getArrayAttr((mlir::MLIRContext **)a1, v94, DWORD2(v94));
      }
      else
      {
        uint64_t Dictionary = 0;
      }
      uint64_t v66 = (void *)v94;
      if ((void *)v94 == v95) {
        return (llvm::APFloatBase *)Dictionary;
      }
      goto LABEL_147;
    case 0x18:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v55 = a1[1];
      *(_OWORD *)(v55 + 7) = v94;
      v55[9] = (mlir::StringAttr **)v95[0];
      int v56 = *((_DWORD *)a1[1] + 14);
      if (v56 == 9)
      {
        uint64_t v49 = (mlir::detail::Parser *)a1;
        a2 = (void *)v5;
        int v50 = 1;
        return mlir::detail::Parser::parseFloatAttr(v49, (uint64_t)a2, v50);
      }
      if (v56 == 10) {
        return (llvm::APFloatBase *)mlir::detail::Parser::parseDecOrHexAttr((mlir::detail::Parser *)a1, v5, 1);
      }
      *(void *)&long long v94 = "expected constant integer or floating point value";
      __int16 v96 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v94, v93);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v93);
      return 0;
    case 0x22:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v57 = a1[1];
      *(_OWORD *)(v57 + 7) = v94;
      v57[9] = (mlir::StringAttr **)v95[0];
      v82.__r_.__value_.__r.__words[0] = 0;
      *(void *)&long long v94 = "expected '<' in affine map";
      __int16 v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v94)) {
        return 0;
      }
      if (!mlir::detail::Parser::parseAffineMapReference((mlir::detail::Parser *)a1, (mlir::AffineMap *)&v82))return 0; {
      *(void *)&long long v98 = "expected '>' in affine map";
      }
      LOWORD(v101) = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v98)) {
        return 0;
      }
      return (llvm::APFloatBase *)mlir::AffineMapAttr::get(v82.__r_.__value_.__r.__words[0]);
    case 0x23:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v58 = a1[1];
      *(_OWORD *)(v58 + 7) = v94;
      v58[9] = (mlir::StringAttr **)v95[0];
      v82.__r_.__value_.__r.__words[0] = 0;
      *(void *)&long long v94 = "expected '<' in integer set";
      __int16 v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v94)) {
        return 0;
      }
      if (!mlir::detail::Parser::parseIntegerSetReference((mlir::detail::Parser *)a1, (mlir::IntegerSet *)&v82))return 0; {
      *(void *)&long long v98 = "expected '>' in integer set";
      }
      LOWORD(v101) = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v98)) {
        return 0;
      }
      return (llvm::APFloatBase *)mlir::IntegerSetAttr::get(v82.__r_.__value_.__r.__words[0]);
    case 0x24:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDenseArrayAttr((mlir::detail::Parser *)a1);
    case 0x29:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDenseElementsAttr(a1, a2);
    case 0x2A:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDenseResourceElementsAttr((uint64_t ****)a1, a2);
    case 0x2B:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseDistinctAttr((uint64_t)a1, (uint64_t)a2);
    case 0x36:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v59 = a1[1];
      *(_OWORD *)(v59 + 7) = v94;
      v59[9] = (mlir::StringAttr **)v95[0];
      return (llvm::APFloatBase *)mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, 0);
    case 0x3B:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v60 = a1[1];
      *(_OWORD *)(v60 + 7) = v94;
      v60[9] = (mlir::StringAttr **)v95[0];
      v82.__r_.__value_.__r.__words[0] = 0;
      *(void *)&long long v94 = "expected '(' in inline location";
      __int16 v96 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 21, (uint64_t)&v94)) {
        return 0;
      }
      if (!mlir::detail::Parser::parseLocationInstance(a1, (uint64_t *)&v82)) {
        return 0;
      }
      *(void *)&long long v98 = "expected ')' in inline location";
      LOWORD(v101) = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)a1, 28, (uint64_t)&v98)) {
        return 0;
      }
      return (llvm::APFloatBase *)v82.__r_.__value_.__r.__words[0];
    case 0x43:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseSparseElementsAttr((char *)a1, a2);
    case 0x45:
      return (llvm::APFloatBase *)mlir::detail::Parser::parseStridedLayoutAttr((mlir::detail::Parser *)a1);
    case 0x4A:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      uint64_t v61 = a1[1];
      *(_OWORD *)(v61 + 7) = v94;
      v61[9] = (mlir::StringAttr **)v95[0];
      return (llvm::APFloatBase *)mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, (mlir::MLIRContext *)1);
    case 0x4D:
      mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v94);
      char v62 = a1[1];
      *(_OWORD *)(v62 + 7) = v94;
      v62[9] = (mlir::StringAttr **)v95[0];
      return (llvm::APFloatBase *)mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v63);
    default:
      *(void *)&long long v98 = 0;
      unsigned __int16 v7 = mlir::detail::Parser::parseOptionalType((mlir::detail::Parser *)a1, (mlir::Type *)&v98);
      if (v7 > 0xFFu)
      {
        if ((_BYTE)v7) {
          return (llvm::APFloatBase *)mlir::TypeAttr::get(v98);
        }
        else {
          return 0;
        }
      }
      else
      {
        *(void *)&long long v94 = "expected attribute value";
        __int16 v96 = 259;
        mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v94, &v83);
        if (v83) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v83);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v84);
        return 0;
      }
  }
}

uint64_t mlir::detail::Parser::parseDenseElementsAttr(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 8), (uint64_t)v19);
  uint64_t v5 = a1[1];
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v19;
  *(void *)(v5 + 72) = v20;
  v19[0] = "expected '<' after 'dense'";
  v21[4] = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v19)) {
    return 0;
  }
  v19[0] = a1;
  v19[1] = v21;
  uint64_t v20 = *(void *)"";
  char v27 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  std::string __p = 0;
  LOBYTE(v25) = 0;
  uint64_t v6 = a1[1];
  int v7 = *(_DWORD *)(v6 + 56);
  switch(v7)
  {
    case 11:
      long long v10 = *(_OWORD *)(v6 + 56);
      uint64_t v26 = *(void *)(v6 + 72);
      long long v25 = v10;
      char v27 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v16);
      uint64_t v11 = a1[1];
      *(_OWORD *)(v11 + 56) = v16;
      *(void *)(v11 + 72) = v17;
      break;
    case 22:
        goto LABEL_17;
      break;
    case 19:
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v16);
      uint64_t v8 = a1[1];
      *(_OWORD *)(v8 + 56) = v16;
      *(void *)(v8 + 72) = v17;
      goto LABEL_12;
    default:
        goto LABEL_17;
      break;
  }
  *(void *)&long long v16 = "expected '>'";
  __int16 v18 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v16)) {
    goto LABEL_17;
  }
LABEL_12:
  if (a2)
  {
    uint64_t v12 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
    if (v12) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t Attr = 0;
    uint64_t v14 = __p;
    if (!__p) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 56));
  uint64_t v12 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, 0);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v14 = __p;
  if (__p)
  {
LABEL_18:
    unint64_t v23 = v14;
    operator delete(v14);
  }
LABEL_19:
  if (v19[1] != v21) {
    free(v19[1]);
  }
  return Attr;
}

void *mlir::detail::Parser::parseDenseResourceElementsAttr(uint64_t ****a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 7));
  mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v42);
  uint64_t v5 = a1[1];
  *(_OWORD *)(v5 + 7) = v42;
  v5[9] = v43;
  *(void *)&long long v42 = "expected '<' after 'dense_resource'";
  __int16 v44 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v42)) {
    return 0;
  }
  LoadedDialect = (mlir::Dialect *)mlir::MLIRContext::getLoadedDialect(**a1[1], (uint64_t)"builtin", 7);
  mlir::detail::Parser::parseResourceHandle((mlir::detail::Parser *)a1, LoadedDialect, &v39);
  if (!v41) {
    return 0;
  }
  *(void *)&long long v42 = "expected '>'";
  __int16 v44 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v42)) {
    return 0;
  }
  uint64_t v7 = *((void *)&v39 + 1);
  uint64_t v8 = &unk_267771000;
  {
    uint64_t v36 = v7;
    uint64_t v8 = (void *)&unk_267771000;
    uint64_t v7 = v36;
    if (v28)
    {
      *(void *)&long long v42 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
      *((void *)&v42 + 1) = 103;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v42, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v42 + 1) >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = *((void *)&v42 + 1);
      }
      uint64_t v31 = v42 + v30;
      unint64_t v32 = *((void *)&v42 + 1) - v30;
      if (*((void *)&v42 + 1) - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = *((void *)&v42 + 1) - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v31 + v33, v35);
      uint64_t v8 = (void *)&unk_267771000;
      uint64_t v7 = v36;
    }
  }
  if (v7 != v8[390])
  {
    __int16 v44 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v42, v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return 0;
    }
    int v9 = v58;
    if (v58)
    {
      long long v10 = v59;
      uint64_t v11 = v58;
      if (v59 != v58)
      {
        do
          long long v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        uint64_t v11 = v58;
      }
      uint64_t v59 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v56;
    if (v56)
    {
      uint64_t v13 = v57;
      uint64_t v14 = v56;
      if (v57 != v56)
      {
        do
        {
          uint64_t v16 = *--v13;
          uint64_t v15 = v16;
          void *v13 = 0;
          if (v16) {
            MEMORY[0x21667D390](v15, 0x1000C8077774924);
          }
        }
        while (v13 != v12);
        uint64_t v14 = v56;
      }
      uint64_t v57 = v12;
      operator delete(v14);
    }
    uint64_t v19 = v54;
    if (v54 == &v55) {
      return 0;
    }
    goto LABEL_27;
  }
  if (a2)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8)) {
      goto LABEL_22;
    }
    goto LABEL_33;
  }
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(a1[1] + 7));
  *(void *)&long long v42 = "expected ':'";
  __int16 v44 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)&v42)) {
    return 0;
  }
  uint64_t result = (void *)mlir::detail::Parser::parseType((mlir::detail::Parser *)a1);
  if (result)
  {
    a2 = result;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*result + 8))
    {
LABEL_22:
      uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
      long long v37 = v39;
      uint64_t v38 = v40;
      return (void *)mlir::DenseResourceElementsAttr::get((uint64_t)a2, v17, &v37);
    }
LABEL_33:
    __int16 v44 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v42, v45);
    if (v45[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    }
    if (!v52) {
      return 0;
    }
    uint64_t v20 = __p;
    if (__p)
    {
      uint64_t v21 = v51;
      uint64_t v22 = __p;
      if (v51 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      unsigned int v51 = v20;
      operator delete(v22);
    }
    unint64_t v23 = v48;
    if (v48)
    {
      uint64_t v24 = v49;
      long long v25 = v48;
      if (v49 != v48)
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        long long v25 = v48;
      }
      uint64_t v49 = v23;
      operator delete(v25);
    }
    uint64_t v19 = v46;
    if (v46 == &v47) {
      return 0;
    }
LABEL_27:
    free(v19);
    return 0;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseDenseArrayAttr(mlir::detail::Parser *a1)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)v52);
  uint64_t v2 = *((void *)a1 + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v52;
  *(void *)(v2 + 72) = *(void *)&v52[16];
  *(void *)char v52 = "expected '<' after 'array'";
  WORD4(v53) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v52)) {
    return 0;
  }
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1) + 56));
  uint64_t v42 = mlir::detail::Parser::parseType(a1);
  if (!v42)
  {
    *(void *)char v52 = "expected an integer or floating point type";
    WORD4(v53) = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)v52, v60);
    if (v60[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
    if (!v67) {
      return 0;
    }
    uint64_t v12 = v65;
    if (v65)
    {
      uint64_t v13 = v66;
      uint64_t v14 = v65;
      if (v66 != v65)
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = v65;
      }
      uint64_t v66 = v12;
      operator delete(v14);
    }
    uint64_t v15 = v63;
    if (v63)
    {
      uint64_t v16 = v64;
      uint64_t v17 = v63;
      if (v64 != v63)
      {
        do
        {
          uint64_t v19 = *--v16;
          uint64_t v18 = v19;
          *uint64_t v16 = 0;
          if (v19) {
            MEMORY[0x21667D390](v18, 0x1000C8077774924);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v63;
      }
      unint64_t v64 = v15;
      operator delete(v17);
    }
    uint64_t v36 = v61;
    if (v61 == &v62) {
      return 0;
    }
LABEL_58:
    free(v36);
    return 0;
  }
  if (!mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v42))
  {
    v40[0] = "expected integer or float type, got: ";
    __int16 v41 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)v40, v52);
    if (*(void *)v52)
    {
      uint64_t v20 = v43;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v43, v42);
      uint64_t v21 = v53;
      if (DWORD2(v53) >= HIDWORD(v53))
      {
        unint64_t v38 = DWORD2(v53) + 1;
        if ((unint64_t)v53 <= (unint64_t)v43
          && (unint64_t)v53 + 24 * DWORD2(v53) > (unint64_t)v43)
        {
          long long v39 = &v43[-v53];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v54, v38, 24);
          uint64_t v21 = v53;
          uint64_t v20 = &v39[v53];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v54, v38, 24);
          uint64_t v20 = v43;
          uint64_t v21 = v53;
        }
      }
      uint64_t v22 = v21 + 24 * DWORD2(v53);
      long long v23 = *(_OWORD *)v20;
      *(void *)(v22 + 16) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v22 = v23;
      ++DWORD2(v53);
      if (*(void *)v52) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
      }
    }
    if (!v59) {
      return 0;
    }
    uint64_t v24 = v57;
    if (v57)
    {
      long long v25 = v58;
      uint64_t v26 = v57;
      if (v58 != v57)
      {
        do
          long long v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = v57;
      }
      uint64_t v58 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v55;
    if (v55)
    {
      int v28 = v56;
      unint64_t v29 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        unint64_t v29 = v55;
      }
      int v56 = v27;
      operator delete(v29);
    }
    uint64_t v36 = (uint64_t *)v53;
    if ((unsigned char *)v53 == v54) {
      return 0;
    }
    goto LABEL_58;
  }
  if (!mlir::Type::isInteger((mlir::Type *)&v42, 1) && (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v42) & 7) != 0)
  {
    *(void *)char v52 = "element type bitwidth must be a multiple of 8";
    WORD4(v53) = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)v52, v44);
    if (v44[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    }
    if (!v51) {
      return 0;
    }
    uint64_t v4 = __p;
    if (__p)
    {
      uint64_t v5 = v50;
      uint64_t v6 = __p;
      if (v50 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      int v50 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v47;
    if (v47)
    {
      uint64_t v8 = v48;
      int v9 = v47;
      if (v48 != v47)
      {
        do
        {
          uint64_t v11 = *--v8;
          uint64_t v10 = v11;
          *uint64_t v8 = 0;
          if (v11) {
            MEMORY[0x21667D390](v10, 0x1000C8077774924);
          }
        }
        while (v8 != v7);
        int v9 = v47;
      }
      uint64_t v48 = v7;
      operator delete(v9);
    }
    uint64_t v36 = v45;
    if (v45 == &v46) {
      return 0;
    }
    goto LABEL_58;
  }
  uint64_t v32 = *((void *)a1 + 1);
  if (*(_DWORD *)(v32 + 56) == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)v52);
    uint64_t v33 = *((void *)a1 + 1);
    *(_OWORD *)(v33 + 56) = *(_OWORD *)v52;
    *(void *)(v33 + 72) = *(void *)&v52[16];
    return mlir::DenseArrayAttr::get(v42, 0, 0, 0);
  }
  else
  {
    *(void *)char v52 = "expected ':' after dense array type";
    WORD4(v53) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)v52)) {
      return 0;
    }
    *(void *)char v52 = v42;
    *(_OWORD *)&v52[8] = 0u;
    long long v53 = 0u;
    v40[0] = v52;
    v40[1] = a1;
    if (mlir::Type::isIntOrIndex((mlir::Type *)&v42)) {
      uint64_t v35 = (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_0>;
    }
    else {
      uint64_t v35 = (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_1>;
    }
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)a1, 0, v35, (uint64_t)v40, 0, 0)
      && (v40[0] = "expected '>' to close an array attribute",
          __int16 v41 = 259,
          mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)v40)))
    {
      uint64_t v34 = mlir::DenseArrayAttr::get(*(uint64_t *)v52, DWORD2(v53), *(uint64_t *)&v52[8], *(void *)&v52[16] - *(void *)&v52[8]);
    }
    else
    {
      uint64_t v34 = 0;
    }
    if (*(void *)&v52[8])
    {
      *(void *)&v52[16] = *(void *)&v52[8];
      operator delete(*(void **)&v52[8]);
    }
  }
  return v34;
}

uint64_t mlir::detail::Parser::parseAttributeDict(mlir::detail::Parser *this, mlir::NamedAttrList *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = 1;
  uint64_t v5 = (llvm *)-4096;
  uint64_t v6 = -4096;
  uint64_t v7 = -4096;
  uint64_t v8 = -4096;
  v3[0] = this;
  v3[1] = &v4;
  v3[2] = a2;
  uint64_t result = mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 4, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>, (uint64_t)v3, (uint64_t)" in attribute dictionary", 24);
  if ((v4 & 1) == 0) {
    llvm::deallocate_buffer(v5, (void *)(8 * v6));
  }
  return result;
}

llvm::APFloatBase *mlir::detail::Parser::parseFloatAttr(mlir::detail::Parser *a1, uint64_t F64Type, int a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)(*((void *)a1 + 1) + 56));
  if (v7)
  {
    double v8 = *(double *)&FloatingPointValue;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&v43);
    uint64_t v10 = *((void *)a1 + 1);
    *(_OWORD *)(v10 + 56) = v43;
    *(void *)(v10 + 72) = v44;
    if (!F64Type)
    {
      uint64_t v11 = *((void *)a1 + 1);
      if (*(_DWORD *)(v11 + 56) == 15)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v43);
        uint64_t v12 = *((void *)a1 + 1);
        *(_OWORD *)(v12 + 56) = v43;
        *(void *)(v12 + 72) = v44;
        uint64_t result = (llvm::APFloatBase *)mlir::detail::Parser::parseType(a1);
        F64Type = (uint64_t)result;
        if (!result) {
          return result;
        }
      }
      else
      {
        F64Type = mlir::Builder::getF64Type((mlir::Float64Type **)a1, v9);
      }
    }
    uint64_t v22 = *(void **)(*(void *)F64Type + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      double v34 = v8;
      if (a3) {
        double v34 = -v8;
      }
      return mlir::FloatAttr::get(F64Type, v34);
    }
    else
    {
      *(void *)&long long v43 = "floating point value not valid for specified type";
      __int16 v45 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v43, v46);
      if (v46[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      }
      if (v53)
      {
        uint64_t v35 = v51;
        if (v51)
        {
          uint64_t v36 = v52;
          long long v37 = v51;
          if (v52 != v51)
          {
            do
              uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            long long v37 = v51;
          }
          char v52 = v35;
          operator delete(v37);
        }
        unint64_t v38 = v49;
        if (v49)
        {
          long long v39 = v50;
          uint64_t v40 = v49;
          if (v50 != v49)
          {
            do
            {
              uint64_t v42 = *--v39;
              uint64_t v41 = v42;
              *long long v39 = 0;
              if (v42) {
                MEMORY[0x21667D390](v41, 0x1000C8077774924);
              }
            }
            while (v39 != v38);
            uint64_t v40 = v49;
          }
          int v50 = v38;
          operator delete(v40);
        }
        if (v47 != &v48) {
          free(v47);
        }
      }
      return 0;
    }
  }
  else
  {
    *(void *)&long long v43 = "floating point value too large for attribute";
    __int16 v45 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v43, v54);
    if (v54[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    }
    if (v61)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v60;
        uint64_t v16 = __p;
        if (v60 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        char v60 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v57;
      if (v57)
      {
        uint64_t v18 = v58;
        uint64_t v19 = v57;
        if (v58 != v57)
        {
          do
          {
            uint64_t v21 = *--v18;
            uint64_t v20 = v21;
            void *v18 = 0;
            if (v21) {
              MEMORY[0x21667D390](v20, 0x1000C8077774924);
            }
          }
          while (v18 != v17);
          uint64_t v19 = v57;
        }
        uint64_t v58 = v17;
        operator delete(v19);
      }
      if (v55 != &v56) {
        free(v55);
      }
    }
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseDecOrHexAttr(mlir::detail::Parser *a1, uint64_t a2, int a3)
{
  uint64_t IntegerType = a2;
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a1 + 1);
  long long v59 = *(_OWORD *)(v6 + 56);
  unint64_t v7 = *(void *)(v6 + 72);
  unint64_t v60 = v7;
  uint64_t v61 = a2;
  uint64_t v8 = *((void *)&v59 + 1);
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v59);
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&v86);
  uint64_t v10 = *((void *)a1 + 1);
  *(_OWORD *)(v10 + 56) = v86;
  *(void *)(v10 + 72) = v87;
  if (!IntegerType)
  {
    uint64_t v11 = *((void *)a1 + 1);
    if (*(_DWORD *)(v11 + 56) == 15)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v86);
      uint64_t v12 = *((void *)a1 + 1);
      *(_OWORD *)(v12 + 56) = v86;
      *(void *)(v12 + 72) = v87;
      uint64_t IntegerType = mlir::detail::Parser::parseType(a1);
      uint64_t v61 = IntegerType;
      if (!IntegerType) {
        return 0;
      }
    }
    else
    {
      uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x40u);
      uint64_t v61 = IntegerType;
    }
  }
  uint64_t v14 = *(void **)(*(void *)IntegerType + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t v56 = IntegerType;
    LOBYTE(v86) = 0;
    LOBYTE(v88) = 0;
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v56);
    unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)&v56);
    int v28 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral((uint64_t)a1, (uint64_t)&v86, (MirInfoChannelAssignment *)&v59, a3, FloatSemantics, Width);
    if ((_BYTE)v28)
    {
      int v28 = (llvm::APFloatBase *)mlir::FloatAttr::get(v56, (uint64_t)&v86);
      Integeruint64_t Attr = (uint64_t)v28;
      if (!(_BYTE)v88) {
        return IntegerAttr;
      }
    }
    else
    {
      Integeruint64_t Attr = 0;
      if (!(_BYTE)v88) {
        return IntegerAttr;
      }
    }
    unint64_t v29 = (void *)*((void *)&v86 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v28) == v29) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v86 + 8));
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v86 + 8));
    }
  }
  else
  {
    if (v14 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && v14 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      *(void *)&long long v86 = "integer literal not valid for specified type";
      __int16 v88 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v86, v78);
      if (v78[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
      }
      if (!v85) {
        return 0;
      }
      uint64_t v31 = __p;
      if (__p)
      {
        uint64_t v32 = v84;
        uint64_t v33 = __p;
        if (v84 != __p)
        {
          do
            uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        uint64_t v84 = v31;
        operator delete(v33);
      }
      double v34 = v81;
      if (v81)
      {
        uint64_t v35 = v82;
        uint64_t v36 = v81;
        if (v82 != v81)
        {
          do
          {
            uint64_t v38 = *--v35;
            uint64_t v37 = v38;
            void *v35 = 0;
            if (v38) {
              MEMORY[0x21667D390](v37, 0x1000C8077774924);
            }
          }
          while (v35 != v34);
          uint64_t v36 = v81;
        }
        std::string v82 = v34;
        operator delete(v36);
      }
      uint64_t v55 = v79;
      if (v79 == &v80) {
        return 0;
      }
      goto LABEL_114;
    }
    if (a3)
    {
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v61))
      {
        *(void *)&long long v86 = "negative integer literal not valid for unsigned integer type";
        __int16 v88 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v86, v70);
        if (v70[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
        }
        if (!v77) {
          return 0;
        }
        long long v39 = v75;
        if (v75)
        {
          uint64_t v40 = v76;
          uint64_t v41 = v75;
          if (v76 != v75)
          {
            do
              uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            uint64_t v41 = v75;
          }
          char v76 = v39;
          operator delete(v41);
        }
        uint64_t v42 = v73;
        if (v73)
        {
          long long v43 = v74;
          uint64_t v44 = v73;
          if (v74 != v73)
          {
            do
            {
              uint64_t v46 = *--v43;
              uint64_t v45 = v46;
              void *v43 = 0;
              if (v46) {
                MEMORY[0x21667D390](v45, 0x1000C8077774924);
              }
            }
            while (v43 != v42);
            uint64_t v44 = v73;
          }
          uint64_t v74 = v42;
          operator delete(v44);
        }
        uint64_t v55 = v71;
        if (v71 == &v72) {
          return 0;
        }
LABEL_114:
        free(v55);
        return 0;
      }
      uint64_t IntegerType = v61;
    }
    buildAttributeAPInt((uint64_t)&v56, IntegerType, a3, v8, v7);
    if (v58)
    {
      Integeruint64_t Attr = mlir::Builder::getIntegerAttr((uint64_t)a1, v61, (const llvm::APInt *)&v56);
    }
    else
    {
      *(void *)&long long v86 = "integer constant out of range for attribute";
      __int16 v88 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, OCGSize, (uint64_t)&v86, v62);
      if (v62[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
      }
      if (v69)
      {
        uint64_t v47 = v67;
        if (v67)
        {
          uint64_t v48 = v68;
          uint64_t v49 = v67;
          if (v68 != v67)
          {
            do
              uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            uint64_t v49 = v67;
          }
          uint64_t v68 = v47;
          operator delete(v49);
        }
        int v50 = v65;
        if (v65)
        {
          char v51 = v66;
          char v52 = v65;
          if (v66 != v65)
          {
            do
            {
              uint64_t v54 = *--v51;
              uint64_t v53 = v54;
              *char v51 = 0;
              if (v54) {
                MEMORY[0x21667D390](v53, 0x1000C8077774924);
              }
            }
            while (v51 != v50);
            char v52 = v65;
          }
          uint64_t v66 = v50;
          operator delete(v52);
        }
        if (v63 != &v64) {
          free(v63);
        }
      }
      Integeruint64_t Attr = 0;
    }
    if (v58 && v57 >= 0x41 && v56) {
      MEMORY[0x21667D390](v56, 0x1000C8000313F17);
    }
  }
  return IntegerAttr;
}

uint64_t mlir::detail::Parser::parseSparseElementsAttr(char *a1, void *a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)v61);
  uint64_t v5 = *((void *)a1 + 1);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v61;
  *(void *)(v5 + 72) = v62;
  v61[0] = "Expected '<' after 'sparse'";
  v63[4] = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v61)) {
    return 0;
  }
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u);
  uint64_t v7 = *((void *)a1 + 1);
  int v9 = *(_DWORD *)(v7 + 56);
  uint64_t v8 = (MirInfoChannelAssignment *)(v7 + 56);
  if (v9 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)v61);
    uint64_t v10 = *((void *)a1 + 1);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)v61;
    *(void *)(v10 + 72) = v62;
    char v51 = (const char *)mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
    char v52 = v11;
    if (v51)
    {
      v61[0] = 0;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v51);
      v61[1] = v12;
      uint64_t v13 = (void *)mlir::RankedTensorType::get((uint64_t)v61, 2, IntegerType, 0);
      uint64_t v14 = (uint64_t)v13;
      if (v13) {
        uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
      }
      else {
        uint64_t v15 = 0;
      }
      v61[0] = 0;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
      uint64_t v24 = (void *)mlir::RankedTensorType::get((uint64_t)v61, 1, OperandRange, 0);
      uint64_t v25 = (uint64_t)v24;
      if (v24) {
        uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = mlir::DenseElementsAttr::get(v14, v15, 0, 0);
      uint64_t v28 = mlir::DenseElementsAttr::get(v25, v26, 0, 0);
      *(void *)&long long v48 = OCGSize;
      v61[0] = a1;
      v61[1] = &v48;
      return mlir::SparseElementsAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr &&)::{lambda(void)#1}>, (uint64_t)v61, (uint64_t)v51, (uint64_t)v52, v27, v28);
    }
    return 0;
  }
  uint64_t v17 = (const char *)MirInfoChannelAssignment::GetOCGSize(v8);
  v61[0] = a1;
  v61[1] = v63;
  uint64_t v62 = *(void *)"";
  char v68 = 0;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  char v67 = 0;
  if (*(_DWORD *)(*((void *)a1 + 1) + 56) == 22)
  {
      goto LABEL_15;
  }
  {
    goto LABEL_15;
  }
  char v51 = "expected ','";
  v54[4] = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)a1, 16, (uint64_t)&v51))
  {
    uint64_t v18 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1) + 56));
    char v51 = a1;
    char v52 = v54;
    uint64_t v53 = *(void *)"";
    char v60 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    std::string __p = 0;
    LOBYTE(v58) = 0;
    uint64_t v19 = *((void *)a1 + 1);
    int v20 = *(_DWORD *)(v19 + 56);
    if (v20 == 22)
    {
        goto LABEL_29;
    }
    else if (v20 == 11)
    {
      long long v21 = *(_OWORD *)(v19 + 56);
      uint64_t v59 = *(void *)(v19 + 72);
      long long v58 = v21;
      char v60 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(v19 + 8), (uint64_t)&v48);
      uint64_t v22 = *((void *)a1 + 1);
      *(_OWORD *)(v22 + 56) = v48;
      *(void *)(v22 + 72) = v49;
    }
    {
      goto LABEL_29;
    }
    *(void *)&long long v48 = "expected '>'";
    __int16 v50 = 259;
    if (mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v48))
    {
      uint64_t v45 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
      uint64_t v46 = v29;
      if (v45)
      {
        long long v43 = 0;
        uint64_t v44 = 0;
        if (v62)
        {
          uint64_t v30 = (void *)mlir::RankedTensorType::get((uint64_t)v61[1], v62, IntegerType, 0);
          if (v30)
          {
LABEL_28:
            uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
            goto LABEL_40;
          }
        }
        else
        {
          *(void *)&long long v48 = 1;
          mlir::ShapedType::getShape((mlir::ShapedType *)&v45);
          *((void *)&v48 + 1) = v34;
          uint64_t v30 = (void *)mlir::RankedTensorType::get((uint64_t)&v48, 2, IntegerType, 0);
          if (v30) {
            goto LABEL_28;
          }
        }
        uint64_t v31 = 0;
LABEL_40:
        long long v43 = v30;
        uint64_t v44 = v31;
        uint64_t v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v45);
        uint64_t v37 = v53;
        if (v53)
        {
          uint64_t v38 = (long long *)v52;
        }
        else
        {
          *(void *)&long long v48 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v43);
          uint64_t v38 = &v48;
          uint64_t v37 = 1;
        }
        long long v39 = (void *)mlir::RankedTensorType::get((uint64_t)v38, v37, v36, 0);
        uint64_t v40 = (uint64_t)v39;
        if (v39) {
          uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v47 = OCGSize;
        *(void *)&long long v48 = a1;
        *((void *)&v48 + 1) = &v47;
        uint64_t Checked = mlir::SparseElementsAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &)::{lambda(void)#1}>, (uint64_t)&v48, v45, v46, Attr, v42);
        uint64_t v32 = __p;
        if (!__p)
        {
LABEL_31:
          if (v52 != v54) {
            free(v52);
          }
          goto LABEL_33;
        }
LABEL_30:
        uint64_t v56 = v32;
        operator delete(v32);
        goto LABEL_31;
      }
    }
LABEL_29:
    uint64_t Checked = 0;
    uint64_t v32 = __p;
    if (!__p) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_15:
  uint64_t Checked = 0;
LABEL_33:
  if (v64)
  {
    unint64_t v65 = v64;
    operator delete(v64);
  }
  if (v61[1] != v63) {
    free(v61[1]);
  }
  return Checked;
}

uint64_t mlir::detail::Parser::parseStridedLayoutAttr(mlir::detail::Parser *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  v25[0] = this;
  v25[1] = &OCGSize;
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v27);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(void *)(v2 + 72) = v28[0];
  *(void *)&long long v27 = "expected '<' after 'strided'";
  __int16 v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27)) {
    return 0;
  }
  *(void *)&long long v22 = "expected '['";
  __int16 v24 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 22, (uint64_t)&v22)) {
    return 0;
  }
  *(void *)&long long v27 = v28;
  *((void *)&v27 + 1) = 0x600000000;
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 29) {
    goto LABEL_4;
  }
  unint64_t v7 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
  if (v8)
  {
    unint64_t v9 = v7;
    while (1)
    {
      uint64_t v10 = DWORD2(v27);
      if (DWORD2(v27) >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v28, DWORD2(v27) + 1, 8);
        uint64_t v10 = DWORD2(v27);
      }
      *(void *)(v27 + 8 * v10) = v9;
      ++DWORD2(v27);
      uint64_t v11 = *((void *)this + 1);
      if (*(_DWORD *)(v11 + 56) != 16) {
        break;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v22);
      uint64_t v12 = *((void *)this + 1);
      *(_OWORD *)(v12 + 56) = v22;
      *(void *)(v12 + 72) = v23;
      unint64_t v9 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
      if (!v13) {
        goto LABEL_25;
      }
    }
LABEL_4:
    *(void *)&long long v22 = "expected ']'";
    __int16 v24 = 259;
    if (mlir::detail::Parser::parseToken((uint64_t)this, 29, (uint64_t)&v22))
    {
      uint64_t v3 = *((void *)this + 1);
      if (*(_DWORD *)(v3 + 56) == 19)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v22);
        uint64_t v4 = *((void *)this + 1);
        *(_OWORD *)(v4 + 56) = v22;
        *(void *)(v4 + 72) = v23;
        if (mlir::StridedLayoutAttr::verify((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>, (uint64_t)v25, 0, (void *)v27, DWORD2(v27)))
        {
          uint64_t v5 = mlir::StridedLayoutAttr::get(***((mlir::MLIRContext ****)this + 1), 0, v27, DWORD2(v27));
          uint64_t v6 = (void *)v27;
          if ((void *)v27 == v28) {
            return v5;
          }
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)&long long v22 = "expected ','";
        __int16 v24 = 259;
        if (mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v22))
        {
          int v20 = "expected 'offset' after comma";
          __int16 v21 = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)this, 65, (uint64_t)&v20))
          {
            uint64_t v18 = "expected ':' after 'offset'";
            __int16 v19 = 259;
            if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v18))
            {
              unint64_t v14 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
              if (v15)
              {
                uint64_t v16 = v14;
                *(void *)&long long v22 = "expected '>'";
                __int16 v24 = 259;
                if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v22))
                {
                  if (mlir::StridedLayoutAttr::verify((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>, (uint64_t)v25, v16, (void *)v27, DWORD2(v27)))
                  {
                    uint64_t v5 = mlir::StridedLayoutAttr::get(***((mlir::MLIRContext ****)this + 1), v16, v27, DWORD2(v27));
                    uint64_t v6 = (void *)v27;
                    if ((void *)v27 == v28) {
                      return v5;
                    }
                    goto LABEL_26;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  uint64_t v5 = 0;
  uint64_t v6 = (void *)v27;
  if ((void *)v27 != v28) {
LABEL_26:
  }
    free(v6);
  return v5;
}

uint64_t mlir::detail::Parser::parseDistinctAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*(void *)(a1 + 8) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v33);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v33;
  *(void *)(v5 + 72) = v34;
  *(void *)&long long v33 = "expected '[' after 'distinct'";
  __int16 v35 = 259;
  if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v33))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unint64_t v7 = *(unsigned __int8 **)(v6 + 64);
    unint64_t v8 = *(void *)(v6 + 72);
    *(void *)&long long v33 = "expected distinct ID";
    __int16 v35 = 259;
    if (mlir::detail::Parser::parseToken(a1, 10, (uint64_t)&v33))
    {
      v32[0] = mlir::Token::getUInt64IntegerValue(v7, v8);
      v32[1] = v9;
      if (!(_BYTE)v9)
      {
        *(void *)&long long v33 = "expected an unsigned 64-bit integer";
        __int16 v35 = 259;
        mlir::detail::Parser::emitError(a1, (uint64_t)&v33, v37);
        if (v37[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
        }
        if (v44)
        {
          unint64_t v14 = __p;
          if (__p)
          {
            char v15 = v43;
            uint64_t v16 = __p;
            if (v43 != __p)
            {
              do
                char v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              uint64_t v16 = __p;
            }
            long long v43 = v14;
            operator delete(v16);
          }
          uint64_t v17 = v40;
          if (v40)
          {
            uint64_t v18 = v41;
            __int16 v19 = v40;
            if (v41 != v40)
            {
              do
              {
                uint64_t v21 = *--v18;
                uint64_t v20 = v21;
                void *v18 = 0;
                if (v21) {
                  MEMORY[0x21667D390](v20, 0x1000C8077774924);
                }
              }
              while (v18 != v17);
              __int16 v19 = v40;
            }
            uint64_t v41 = v17;
            operator delete(v19);
          }
          if (v38 != &v39) {
            free(v38);
          }
        }
        return 0;
      }
      *(void *)&long long v33 = "expected ']' to close distinct ID";
      __int16 v35 = 259;
      if (mlir::detail::Parser::parseToken(a1, 29, (uint64_t)&v33))
      {
        v30[0] = (uint64_t)"expected '<' after distinct ID";
        __int16 v31 = 259;
        if (mlir::detail::Parser::parseToken(a1, 23, (uint64_t)v30))
        {
          uint64_t v10 = *(void *)(a1 + 8);
          if (*(_DWORD *)(v10 + 56) == 19)
          {
            mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v33);
            uint64_t v11 = *(void *)(a1 + 8);
            *(_OWORD *)(v11 + 56) = v33;
            *(void *)(v11 + 72) = v34;
            Unituint64_t Attr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v12);
            goto LABEL_24;
          }
          uint64_t v22 = mlir::detail::Parser::parseAttribute(a1, a2);
          if (!v22)
          {
            *(void *)&long long v33 = "expected attribute";
            __int16 v35 = 259;
            mlir::detail::Parser::emitError(a1, (uint64_t)&v33, v36);
            long long v27 = (mlir::InFlightDiagnostic *)v36;
            goto LABEL_34;
          }
          Unituint64_t Attr = v22;
          *(void *)&long long v33 = "expected '>' to close distinct attribute";
          __int16 v35 = 259;
          if (mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v33))
          {
LABEL_24:
            uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 80);
            __int16 v24 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::find((uint64_t *)(v23 + 72), v32);
            if ((uint64_t *)(*(void *)(v23 + 72) + 16 * *(unsigned int *)(v23 + 88)) == v24)
            {
              v30[0] = (uint64_t)mlir::DistinctAttr::create(UnitAttr);
              llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::try_emplace<mlir::DistinctAttr&>((void *)(v23 + 72), v32, v30, (uint64_t)&v33);
              uint64_t v25 = (uint64_t *)v33;
            }
            else
            {
              uint64_t v25 = v24;
              uint64_t v26 = (mlir::AffineMapAttr *)(v24 + 1);
              if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)(v24 + 1)) != UnitAttr)
              {
                v30[0] = (uint64_t)"referenced attribute does not match previous definition: ";
                __int16 v31 = 259;
                mlir::detail::Parser::emitError(a1, OCGSize, (uint64_t)v30, &v33);
                uint64_t Value = mlir::AffineMapAttr::getValue(v26);
                mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&v33, &Value);
                long long v27 = (mlir::InFlightDiagnostic *)&v33;
LABEL_34:
                mlir::InFlightDiagnostic::~InFlightDiagnostic(v27);
                return 0;
              }
            }
            return v25[1];
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseOptionalAttribute(uint64_t a1, void *a2, void *a3)
{
  switch(*(_DWORD *)(*(void *)(a1 + 8) + 56))
  {
    case 4:
    case 5:
    case 9:
    case 0xA:
    case 0xB:
    case 0x14:
    case 0x16:
    case 0x18:
    case 0x22:
    case 0x23:
    case 0x29:
    case 0x2A:
    case 0x36:
    case 0x3B:
    case 0x43:
    case 0x4A:
    case 0x4D:
      uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
      *a2 = v4;
      BOOL v5 = v4 != 0;
      int v6 = 1;
      break;
    default:
      uint64_t v9 = 0;
      __int16 v8 = mlir::detail::Parser::parseOptionalType((mlir::detail::Parser *)a1, (mlir::Type *)&v9);
      BOOL v5 = v8;
      int v6 = HIBYTE(v8);
      if ((_BYTE)v8 && HIBYTE(v8)) {
        *a2 = mlir::TypeAttr::get(v9);
      }
      break;
  }
  return v5 | (v6 << 8);
}

uint64_t mlir::detail::Parser::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 22) {
    return 0;
  }
  uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4) {
    return 256;
  }
  *a2 = v4;
  return 257;
}

{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 11) {
    return 0;
  }
  uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4) {
    return 256;
  }
  *a2 = v4;
  return 257;
}

{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 4) {
    return 0;
  }
  uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4) {
    return 256;
  }
  *a2 = v4;
  return 257;
}

uint64_t buildAttributeAPInt(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  v20[1] = a5;
  uint64_t v21 = a2;
  v20[0] = a4;
  unsigned int v19 = 1;
  unsigned int v7 = 10;
  unint64_t v18 = 0;
  if (a5 >= 2)
  {
    if (*(unsigned char *)(a4 + 1) == 120) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = 10;
    }
  }
  uint64_t result = llvm::StringRef::getAsInteger((llvm::StringRef *)v20, v7, (llvm::APInt *)&v18);
  if (!result)
  {
    uint64_t result = mlir::Type::isIndex((mlir::Type *)&v21);
    if (result)
    {
      unsigned int v9 = 64;
      unsigned int v10 = v19;
      unsigned int v12 = v19 - 64;
      BOOL v11 = v19 > 0x40;
      if (v19 >= 0x40) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t result = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
      unsigned int v9 = result;
      unsigned int v10 = v19;
      unsigned int v12 = v19 - result;
      BOOL v11 = v19 > result;
      if (v19 >= result)
      {
LABEL_10:
        if (v11)
        {
          if (v10 > 0x40)
          {
            uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18);
            if (result < v12) {
              goto LABEL_43;
            }
          }
          else
          {
            uint64_t result = v10 + __clz(v18) - 64;
            if (result < v12) {
              goto LABEL_43;
            }
          }
          uint64_t result = llvm::APInt::trunc((uint64_t)&v18, v9, (uint64_t)&v16);
          if (v19 >= 0x41)
          {
            uint64_t result = v18;
            if (v18) {
              uint64_t result = MEMORY[0x21667D390](v18, 0x1000C8000313F17);
            }
          }
          unint64_t v18 = (unint64_t)v16;
          unsigned int v10 = v17;
          unsigned int v19 = v17;
        }
        if (!v9)
        {
          if (a3) {
            goto LABEL_43;
          }
          goto LABEL_47;
        }
LABEL_26:
        if (a3)
        {
          if (v10 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v18);
          }
          else
          {
            unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
            if (!v10) {
              unint64_t v13 = 0;
            }
            unint64_t v18 = v13 & ~v18;
          }
          uint64_t result = (uint64_t)llvm::APInt::operator++((uint64_t **)&v18);
          unsigned int v10 = v19;
          char v15 = (uint64_t *)(v18 + 8 * ((v19 - 1) >> 6));
          if (v19 < 0x41) {
            char v15 = (uint64_t *)&v18;
          }
          if ((((unint64_t)*v15 >> (v19 - 1)) & 1) == 0) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t result = mlir::Type::isSignedInteger((mlir::Type *)&v21);
          if (result & 1) != 0 || (uint64_t result = mlir::Type::isIndex((mlir::Type *)&v21), (result))
          {
            unsigned int v10 = v19;
            unint64_t v14 = (uint64_t *)(v18 + 8 * ((v19 - 1) >> 6));
            if (v19 < 0x41) {
              unint64_t v14 = (uint64_t *)&v18;
            }
            if (((unint64_t)*v14 >> (v19 - 1)))
            {
LABEL_43:
              *(unsigned char *)a1 = 0;
              *(unsigned char *)(a1 + 16) = 0;
              if (v10 < 0x41) {
                return result;
              }
              goto LABEL_44;
            }
          }
          else
          {
            unsigned int v10 = v19;
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v10;
        *(void *)a1 = v18;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
    }
    llvm::APInt::zext((uint64_t *)&v18, v9, (uint64_t)&v16);
    if (v19 >= 0x41 && v18) {
      MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
    unint64_t v18 = (unint64_t)v16;
    unsigned int v10 = v17;
    unsigned int v19 = v17;
    goto LABEL_26;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v19 < 0x41) {
    return result;
  }
LABEL_44:
  uint64_t result = v18;
  if (v18) {
    return MEMORY[0x21667D390](v18, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::detail::Parser::parseElementsLiteralType(mlir::detail::Parser *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (a2) {
    goto LABEL_53;
  }
  v28[0] = "expected ':'";
  __int16 v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)v28)) {
    return 0;
  }
  uint64_t result = mlir::detail::Parser::parseType(a1);
  uint64_t v2 = (void *)result;
  if (result)
  {
LABEL_53:
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
    {
      uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
      uint64_t v26 = v2;
      uint64_t v27 = v4;
      if (v2)
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v26))
        {
          Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
          if (!v6) {
            return (uint64_t)v26;
          }
          uint64_t v7 = 8 * v6;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v7 -= 8;
            if (!v7) {
              return (uint64_t)v26;
            }
          }
        }
        v28[0] = "elements literal type must have static shape";
        __int16 v29 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v28, v30);
        if (v30[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
        }
        if (!v37) {
          return 0;
        }
        unsigned int v9 = __p;
        if (__p)
        {
          unsigned int v10 = v36;
          BOOL v11 = __p;
          if (v36 != __p)
          {
            do
              unsigned int v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
            while (v10 != v9);
            BOOL v11 = __p;
          }
          uint64_t v36 = v9;
          operator delete(v11);
        }
        unsigned int v12 = v33;
        if (v33)
        {
          unint64_t v13 = v34;
          unint64_t v14 = v33;
          if (v34 != v33)
          {
            do
            {
              uint64_t v16 = *--v13;
              uint64_t v15 = v16;
              void *v13 = 0;
              if (v16) {
                MEMORY[0x21667D390](v15, 0x1000C8077774924);
              }
            }
            while (v13 != v12);
            unint64_t v14 = v33;
          }
          uint64_t v34 = v12;
          operator delete(v14);
        }
        uint64_t v25 = v31;
        if (v31 == &v32) {
          return 0;
        }
LABEL_45:
        free(v25);
        return 0;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    v28[0] = "elements literal must be a shaped type";
    __int16 v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v28, v38);
    if (v38[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    }
    if (!v45) {
      return 0;
    }
    unsigned int v17 = v43;
    if (v43)
    {
      unint64_t v18 = v44;
      unsigned int v19 = v43;
      if (v44 != v43)
      {
        do
          unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unsigned int v19 = v43;
      }
      char v44 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v41;
    if (v41)
    {
      uint64_t v21 = v42;
      uint64_t v22 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          *uint64_t v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v41;
      }
      uint64_t v42 = v20;
      operator delete(v22);
    }
    uint64_t v25 = v39;
    if (v39 == &v40) {
      return 0;
    }
    goto LABEL_45;
  }
  return result;
}

uint64_t anonymous namespace'::TensorLiteralParser::getAttr(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v328 = *MEMORY[0x263EF8340];
  *(void *)&long long v305 = a3;
  *((void *)&v305 + 1) = a4;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v305);
  uint64_t v6 = (mlir::Token *)(a1 + 80);
  if (*(unsigned char *)(a1 + 104)
    && (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&OperandRange)
     || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
  {
    long long v312 = v305;
    uint64_t v311 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v312);
    if (!mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v311)
      && *(_UNKNOWN **)(*(void *)v311 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v36 = *(void *)a1;
      __int16 v317 = 257;
      mlir::detail::Parser::emitError(v36, a2, (uint64_t)&v316, &v318);
      if ((void)v318)
      {
        LODWORD(v313) = 3;
        uint64_t v314 = "expected floating-point, integer, or complex element type, got ";
        uint64_t v315 = 63;
        char v37 = &v313;
        uint64_t v38 = *((void *)&v319 + 1);
        if (v320 >= v321)
        {
          unint64_t v274 = v320 + 1;
          if (*((void *)&v319 + 1) <= (unint64_t)&v313
            && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            uint64_t v289 = (char *)&v313 - *((void *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v274, 24);
            uint64_t v38 = *((void *)&v319 + 1);
            char v37 = (const char **)&v289[*((void *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v274, 24);
            char v37 = &v313;
            uint64_t v38 = *((void *)&v319 + 1);
          }
        }
        uint64_t v39 = v38 + 24 * v320;
        long long v40 = *(_OWORD *)v37;
        *(void *)(v39 + 16) = v37[2];
        *(_OWORD *)uint64_t v39 = v40;
        ++v320;
        if ((void)v318)
        {
          uint64_t v41 = &v313;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v313, v311);
          uint64_t v42 = *((void *)&v319 + 1);
          if (v320 >= v321)
          {
            unint64_t v277 = v320 + 1;
            if (*((void *)&v319 + 1) <= (unint64_t)&v313
              && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              uint64_t v292 = (char *)&v313 - *((void *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v277, 24);
              uint64_t v42 = *((void *)&v319 + 1);
              uint64_t v41 = (const char **)&v292[*((void *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v277, 24);
              uint64_t v41 = &v313;
              uint64_t v42 = *((void *)&v319 + 1);
            }
          }
          uint64_t v43 = v42 + 24 * v320;
          long long v44 = *(_OWORD *)v41;
          *(void *)(v43 + 16) = v41[2];
          *(_OWORD *)uint64_t v43 = v44;
          ++v320;
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
        }
      }
      if (!v327) {
        return 0;
      }
      char v45 = __p;
      if (__p)
      {
        uint64_t v46 = v326;
        uint64_t v47 = __p;
        if (v326 != __p)
        {
          do
            uint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          uint64_t v47 = __p;
        }
        uint64_t v326 = v45;
        operator delete(v47);
      }
      __int16 v31 = v323;
      if (!v323) {
        goto LABEL_213;
      }
      long long v48 = v324;
      long long v33 = v323;
      if (v324 == v323) {
        goto LABEL_212;
      }
      do
      {
        uint64_t v50 = *--v48;
        uint64_t v49 = v50;
        *long long v48 = 0;
        if (v50) {
          MEMORY[0x21667D390](v49, 0x1000C8077774924);
        }
      }
      while (v48 != v31);
      goto LABEL_211;
    }
    v309[0] = 0;
    v309[1] = 0;
    uint64_t v310 = 0;
    uint64_t v51 = *(void *)a1;
    long long v307 = *(_OWORD *)v6;
    uint64_t v308 = *(void *)(a1 + 96);
    mlir::Token::getHexStringValue((mlir::Token *)&v307, (std::string *)&v318);
    if (BYTE8(v319))
    {
      if (SHIBYTE(v310) < 0) {
        operator delete(v309[0]);
      }
      *(_OWORD *)uint64_t v309 = v318;
      uint64_t v310 = (llvm::APFloatBase *)v319;
    }
    else
    {
      uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v307);
      __int16 v317 = 259;
      mlir::detail::Parser::emitError(v51, OCGSize, (uint64_t)&v316, &v318);
      char v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
      if ((void)v318) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
      }
      if (v327)
      {
        uint64_t v80 = __p;
        if (__p)
        {
          uint64_t v81 = v326;
          std::string v82 = __p;
          if (v326 != __p)
          {
            do
              uint64_t v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
            while (v81 != v80);
            std::string v82 = __p;
          }
          uint64_t v326 = v80;
          operator delete(v82);
        }
        uint64_t v83 = v323;
        if (v323)
        {
          uint64_t v84 = v324;
          char v85 = v323;
          if (v324 != v323)
          {
            do
            {
              uint64_t v87 = *--v84;
              uint64_t v86 = v87;
              void *v84 = 0;
              if (v87) {
                MEMORY[0x21667D390](v86, 0x1000C8077774924);
              }
            }
            while (v84 != v83);
            char v85 = v323;
          }
          uint64_t v324 = v83;
          operator delete(v85);
        }
        if (*((unsigned char **)&v319 + 1) != v322) {
          free(*((void **)&v319 + 1));
        }
      }
      if (!v79) {
        goto LABEL_269;
      }
    }
    if (SHIBYTE(v310) >= 0) {
      unint64_t v161 = (unsigned __int8 *)v309;
    }
    else {
      unint64_t v161 = (unsigned __int8 *)v309[0];
    }
    if (SHIBYTE(v310) >= 0) {
      uint64_t v162 = HIBYTE(v310);
    }
    else {
      uint64_t v162 = (uint64_t)v309[1];
    }
    BOOL v306 = 0;
    if (mlir::DenseElementsAttr::isValidRawBuffer(v312, *((uint64_t *)&v312 + 1), v161, v162, &v306))
    {
      uint64_t v146 = mlir::DenseElementsAttr::getFromRawBuffer(v312, *((void *)&v312 + 1), v161, v162, v163, v164, v165);
      if ((SHIBYTE(v310) & 0x80000000) == 0) {
        return v146;
      }
LABEL_270:
      int v183 = v309[0];
      goto LABEL_373;
    }
    uint64_t v166 = *(void *)a1;
    __int16 v317 = 257;
    mlir::detail::Parser::emitError(v166, a2, (uint64_t)&v316, &v318);
    if ((void)v318)
    {
      LODWORD(v313) = 3;
      uint64_t v314 = "elements hex data size is invalid for provided type: ";
      uint64_t v315 = 53;
      unint64_t v167 = &v313;
      uint64_t v168 = *((void *)&v319 + 1);
      if (v320 >= v321)
      {
        unint64_t v275 = v320 + 1;
        if (*((void *)&v319 + 1) <= (unint64_t)&v313
          && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
        {
          uint64_t v290 = (char *)&v313 - *((void *)&v319 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v275, 24);
          uint64_t v168 = *((void *)&v319 + 1);
          unint64_t v167 = (const char **)&v290[*((void *)&v319 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v275, 24);
          unint64_t v167 = &v313;
          uint64_t v168 = *((void *)&v319 + 1);
        }
      }
      uint64_t v169 = v168 + 24 * v320;
      long long v170 = *(_OWORD *)v167;
      *(void *)(v169 + 16) = v167[2];
      *(_OWORD *)uint64_t v169 = v170;
      ++v320;
      if ((void)v318)
      {
        uint64_t v171 = &v313;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v313, v312);
        uint64_t v172 = *((void *)&v319 + 1);
        if (v320 >= v321)
        {
          unint64_t v278 = v320 + 1;
          if (*((void *)&v319 + 1) <= (unint64_t)&v313
            && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            uint64_t v293 = (char *)&v313 - *((void *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v278, 24);
            uint64_t v172 = *((void *)&v319 + 1);
            uint64_t v171 = (const char **)&v293[*((void *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v278, 24);
            uint64_t v171 = &v313;
            uint64_t v172 = *((void *)&v319 + 1);
          }
        }
        uint64_t v173 = v172 + 24 * v320;
        long long v174 = *(_OWORD *)v171;
        *(void *)(v173 + 16) = v171[2];
        *(_OWORD *)uint64_t v173 = v174;
        ++v320;
        if ((void)v318) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
        }
      }
    }
    if (v327)
    {
      int v175 = __p;
      if (__p)
      {
        unint64_t v176 = v326;
        unint64_t v177 = __p;
        if (v326 != __p)
        {
          do
            unint64_t v176 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v176 - 1);
          while (v176 != v175);
          unint64_t v177 = __p;
        }
        uint64_t v326 = v175;
        operator delete(v177);
      }
      uint64_t v178 = v323;
      if (v323)
      {
        unint64_t v179 = v324;
        uint64_t v180 = v323;
        if (v324 != v323)
        {
          do
          {
            uint64_t v182 = *--v179;
            uint64_t v181 = v182;
            *unint64_t v179 = 0;
            if (v182) {
              MEMORY[0x21667D390](v181, 0x1000C8077774924);
            }
          }
          while (v179 != v178);
          uint64_t v180 = v323;
        }
        uint64_t v324 = v178;
        operator delete(v180);
      }
      if (*((unsigned char **)&v319 + 1) != v322) {
        free(*((void **)&v319 + 1));
      }
    }
LABEL_269:
    uint64_t v146 = 0;
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      return v146;
    }
    goto LABEL_270;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (v7)
  {
    __int16 v8 = *(const void **)(a1 + 8);
    Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v305);
    if (v10 != v7 || memcmp(v8, Shape, 8 * v7))
    {
      uint64_t v11 = *(void *)a1;
      __int16 v317 = 257;
      mlir::detail::Parser::emitError(v11, a2, (uint64_t)&v316, &v318);
      if ((void)v318)
      {
        LODWORD(v313) = 3;
        uint64_t v314 = "inferred shape of elements literal ([";
        uint64_t v315 = 37;
        unsigned int v12 = &v313;
        uint64_t v13 = *((void *)&v319 + 1);
        if (v320 >= v321)
        {
          unint64_t v272 = v320 + 1;
          if (*((void *)&v319 + 1) <= (unint64_t)&v313
            && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            uint64_t v287 = (char *)&v313 - *((void *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v272, 24);
            uint64_t v13 = *((void *)&v319 + 1);
            unsigned int v12 = (const char **)&v287[*((void *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v272, 24);
            unsigned int v12 = &v313;
            uint64_t v13 = *((void *)&v319 + 1);
          }
        }
        uint64_t v14 = v13 + 24 * v320;
        long long v15 = *(_OWORD *)v12;
        *(void *)(v14 + 16) = v12[2];
        *(_OWORD *)uint64_t v14 = v15;
        ++v320;
        if ((void)v318)
        {
          uint64_t v16 = *(unsigned int *)(a1 + 16);
          unsigned int v17 = *(const char ***)(a1 + 8);
          uint64_t v313 = ", ";
          llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v17, &v17[v16], (uint64_t)&v318 + 8, (uint64_t)&v318 + 8, &v313);
          if ((void)v318)
          {
            LODWORD(v313) = 3;
            uint64_t v314 = "]) does not match type ([";
            uint64_t v315 = 25;
            unint64_t v18 = &v313;
            uint64_t v19 = *((void *)&v319 + 1);
            if (v320 >= v321)
            {
              unint64_t v276 = v320 + 1;
              if (*((void *)&v319 + 1) <= (unint64_t)&v313
                && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                uint64_t v291 = (char *)&v313 - *((void *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v276, 24);
                uint64_t v19 = *((void *)&v319 + 1);
                unint64_t v18 = (const char **)&v291[*((void *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v276, 24);
                unint64_t v18 = &v313;
                uint64_t v19 = *((void *)&v319 + 1);
              }
            }
            uint64_t v20 = v19 + 24 * v320;
            long long v21 = *(_OWORD *)v18;
            *(void *)(v20 + 16) = v18[2];
            *(_OWORD *)uint64_t v20 = v21;
            ++v320;
          }
        }
      }
      uint64_t v22 = (const char **)mlir::ShapedType::getShape((mlir::ShapedType *)&v305);
      if ((void)v318)
      {
        uint64_t v313 = ", ";
        llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v22, &v22[v23], (uint64_t)&v318 + 8, (uint64_t)&v318 + 8, &v313);
        if ((void)v318)
        {
          LODWORD(v313) = 3;
          uint64_t v314 = "])";
          uint64_t v315 = 2;
          uint64_t v24 = &v313;
          uint64_t v25 = *((void *)&v319 + 1);
          if (v320 >= v321)
          {
            unint64_t v273 = v320 + 1;
            if (*((void *)&v319 + 1) <= (unint64_t)&v313
              && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              uint64_t v288 = (char *)&v313 - *((void *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v273, 24);
              uint64_t v25 = *((void *)&v319 + 1);
              uint64_t v24 = (const char **)&v288[*((void *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v273, 24);
              uint64_t v24 = &v313;
              uint64_t v25 = *((void *)&v319 + 1);
            }
          }
          uint64_t v26 = v25 + 24 * v320;
          long long v27 = *(_OWORD *)v24;
          *(void *)(v26 + 16) = v24[2];
          *(_OWORD *)uint64_t v26 = v27;
          ++v320;
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
        }
      }
      if (!v327) {
        return 0;
      }
      uint64_t v28 = __p;
      if (__p)
      {
        __int16 v29 = v326;
        uint64_t v30 = __p;
        if (v326 != __p)
        {
          do
            __int16 v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        uint64_t v326 = v28;
        operator delete(v30);
      }
      __int16 v31 = v323;
      if (!v323)
      {
LABEL_213:
        if (*((unsigned char **)&v319 + 1) != v322) {
          free(*((void **)&v319 + 1));
        }
        return 0;
      }
      uint64_t v32 = v324;
      long long v33 = v323;
      if (v324 == v323)
      {
LABEL_212:
        uint64_t v324 = v31;
        operator delete(v33);
        goto LABEL_213;
      }
      do
      {
        uint64_t v35 = *--v32;
        uint64_t v34 = v35;
        void *v32 = 0;
        if (v35) {
          MEMORY[0x21667D390](v34, 0x1000C8077774924);
        }
      }
      while (v32 != v31);
LABEL_211:
      long long v33 = v323;
      goto LABEL_212;
    }
  }
  if (!*(unsigned char *)(a1 + 104) && *(void *)(a1 + 56) == *(void *)(a1 + 64))
  {
    int v124 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v305);
    if (mlir::ShapedType::getNumElements(v124, v125))
    {
      uint64_t v126 = *(void *)a1;
      __int16 v317 = 257;
      mlir::detail::Parser::emitError(v126, a2, (uint64_t)&v316, &v318);
      if ((void)v318)
      {
        LODWORD(v313) = 3;
        uint64_t v314 = "parsed zero elements, but type (";
        uint64_t v315 = 32;
        unint64_t v127 = &v313;
        uint64_t v128 = *((void *)&v319 + 1);
        if (v320 >= v321)
        {
          unint64_t v281 = v320 + 1;
          if (*((void *)&v319 + 1) <= (unint64_t)&v313
            && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
          {
            uint64_t v296 = (char *)&v313 - *((void *)&v319 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v281, 24);
            uint64_t v128 = *((void *)&v319 + 1);
            unint64_t v127 = (const char **)&v296[*((void *)&v319 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v281, 24);
            unint64_t v127 = &v313;
            uint64_t v128 = *((void *)&v319 + 1);
          }
        }
        uint64_t v129 = v128 + 24 * v320;
        long long v130 = *(_OWORD *)v127;
        *(void *)(v129 + 16) = v127[2];
        *(_OWORD *)uint64_t v129 = v130;
        ++v320;
        if ((void)v318)
        {
          unint64_t v131 = &v313;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v313, v305);
          uint64_t v132 = *((void *)&v319 + 1);
          if (v320 >= v321)
          {
            unint64_t v283 = v320 + 1;
            if (*((void *)&v319 + 1) <= (unint64_t)&v313
              && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              uint64_t v298 = (char *)&v313 - *((void *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v283, 24);
              uint64_t v132 = *((void *)&v319 + 1);
              unint64_t v131 = (const char **)&v298[*((void *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v283, 24);
              unint64_t v131 = &v313;
              uint64_t v132 = *((void *)&v319 + 1);
            }
          }
          uint64_t v133 = v132 + 24 * v320;
          long long v134 = *(_OWORD *)v131;
          *(void *)(v133 + 16) = v131[2];
          *(_OWORD *)uint64_t v133 = v134;
          uint64_t v135 = ++v320;
          if ((void)v318)
          {
            LODWORD(v313) = 3;
            uint64_t v314 = ") expected at least 1";
            uint64_t v315 = 21;
            unint64_t v136 = &v313;
            uint64_t v137 = *((void *)&v319 + 1);
            if (v135 >= v321)
            {
              unint64_t v284 = v135 + 1;
              BOOL v285 = *((void *)&v319 + 1) + 24 * (unint64_t)v135 > (unint64_t)&v313;
              if (*((void *)&v319 + 1) <= (unint64_t)&v313 && v285)
              {
                uint64_t v299 = (char *)&v313 - *((void *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v284, 24);
                uint64_t v137 = *((void *)&v319 + 1);
                unint64_t v136 = (const char **)&v299[*((void *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v284, 24);
                unint64_t v136 = &v313;
                uint64_t v137 = *((void *)&v319 + 1);
              }
            }
            uint64_t v138 = v137 + 24 * v320;
            long long v139 = *(_OWORD *)v136;
            *(void *)(v138 + 16) = v136[2];
            *(_OWORD *)uint64_t v138 = v139;
            ++v320;
            if ((void)v318) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
            }
          }
        }
      }
      if (!v327) {
        return 0;
      }
      unint64_t v140 = __p;
      if (__p)
      {
        unint64_t v141 = v326;
        int v142 = __p;
        if (v326 != __p)
        {
          do
            unint64_t v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
          while (v141 != v140);
          int v142 = __p;
        }
        uint64_t v326 = v140;
        operator delete(v142);
      }
      __int16 v31 = v323;
      if (!v323) {
        goto LABEL_213;
      }
      unint64_t v143 = v324;
      long long v33 = v323;
      if (v324 == v323) {
        goto LABEL_212;
      }
      do
      {
        uint64_t v145 = *--v143;
        uint64_t v144 = v145;
        *unint64_t v143 = 0;
        if (v145) {
          MEMORY[0x21667D390](v144, 0x1000C8077774924);
        }
      }
      while (v143 != v31);
      goto LABEL_211;
    }
  }
  uint64_t v52 = OperandRange;
  uint64_t v53 = *(void **)(*(void *)OperandRange + 136);
  if (v53 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v52 = 0;
  }
  *(void *)&long long v318 = v52;
  if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v318);
    if (mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange)) {
      goto LABEL_60;
    }
  }
  else if (mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
  {
LABEL_60:
    v309[0] = 0;
    v309[1] = 0;
    uint64_t v310 = 0;
    *(void *)&long long v307 = OperandRange;
    std::vector<llvm::APInt>::reserve((uint64_t)v309, (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 5);
    BOOL isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)&v307);
    uint64_t v55 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v56 = *(unsigned __int8 **)(a1 + 64);
    if (v55 == v56) {
      goto LABEL_359;
    }
    BOOL v57 = isUnsignedInteger;
    while (1)
    {
      uint64_t v59 = (int *)(v55 + 8);
      int v58 = *v55;
      char v60 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v55 + 8));
      if (v58) {
        BOOL v61 = v57;
      }
      else {
        BOOL v61 = 0;
      }
      if (v61)
      {
        uint64_t v184 = *(void *)a1;
        __int16 v317 = 257;
        mlir::detail::Parser::emitError(v184, v60, (uint64_t)&v316, &v318);
        if ((void)v318)
        {
          LODWORD(v313) = 3;
          uint64_t v314 = "expected unsigned integer elements, but parsed negative value";
          uint64_t v315 = 61;
          unint64_t v185 = &v313;
          uint64_t v186 = *((void *)&v319 + 1);
          if (v320 >= v321)
          {
            unint64_t v280 = v320 + 1;
            if (*((void *)&v319 + 1) <= (unint64_t)&v313
              && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
            {
              uint64_t v295 = (char *)&v313 - *((void *)&v319 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v280, 24);
              uint64_t v186 = *((void *)&v319 + 1);
              unint64_t v185 = (const char **)&v295[*((void *)&v319 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v280, 24);
              unint64_t v185 = &v313;
              uint64_t v186 = *((void *)&v319 + 1);
            }
          }
          uint64_t v187 = v186 + 24 * v320;
          long long v188 = *(_OWORD *)v185;
          *(void *)(v187 + 16) = v185[2];
          *(_OWORD *)uint64_t v187 = v188;
          ++v320;
        }
        char v189 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
        if ((void)v318) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
        }
        char v302 = v189;
        if (v327)
        {
          unint64_t v190 = __p;
          if (__p)
          {
            uint64_t v191 = v326;
            uint64_t v192 = __p;
            if (v326 != __p)
            {
              do
                uint64_t v191 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v191 - 1);
              while (v191 != v190);
              uint64_t v192 = __p;
            }
            uint64_t v326 = v190;
            operator delete(v192);
          }
          uint64_t v193 = v323;
          if (v323)
          {
            uint64_t v194 = v324;
            uint64_t v195 = v323;
            if (v324 == v323) {
              goto LABEL_355;
            }
            do
            {
              uint64_t v197 = *--v194;
              uint64_t v196 = v197;
              void *v194 = 0;
              if (v197) {
                MEMORY[0x21667D390](v196, 0x1000C8077774924);
              }
            }
            while (v194 != v193);
            goto LABEL_354;
          }
LABEL_356:
          if (*((unsigned char **)&v319 + 1) != v322) {
            free(*((void **)&v319 + 1));
          }
        }
LABEL_358:
        if (v302)
        {
LABEL_359:
          if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
          {
            uint64_t v146 = mlir::DenseElementsAttr::get(v305, *((uint64_t *)&v305 + 1), v309[0], (unint64_t)((v309[1] - v309[0]) >> 4) >> 1);
            uint64_t v237 = v309[0];
            if (!v309[0]) {
              return v146;
            }
          }
          else
          {
            uint64_t v146 = mlir::DenseElementsAttr::get(v305, *((uint64_t *)&v305 + 1), v309[0], (v309[1] - v309[0]) >> 4);
            uint64_t v237 = v309[0];
            if (!v309[0]) {
              return v146;
            }
          }
LABEL_365:
          uint64_t v238 = v309[1];
          int v183 = v237;
          if (v309[1] != v237)
          {
            do
            {
              if (*((_DWORD *)v238 - 2) >= 0x41u)
              {
                uint64_t v239 = *((void *)v238 - 2);
                if (v239) {
                  MEMORY[0x21667D390](v239, 0x1000C8000313F17);
                }
              }
              uint64_t v238 = (llvm::APFloatBase *)((char *)v238 - 16);
            }
            while (v238 != v237);
            int v183 = v309[0];
          }
          v309[1] = v237;
LABEL_373:
          operator delete(v183);
        }
        else
        {
          uint64_t v146 = 0;
          uint64_t v237 = v309[0];
          if (v309[0]) {
            goto LABEL_365;
          }
        }
        return v146;
      }
      int v62 = *v59;
      if (*v59 == 54 || v62 == 74)
      {
        if (!mlir::Type::isInteger((mlir::Type *)&v307, 1))
        {
          uint64_t v198 = *(void *)a1;
          __int16 v317 = 257;
          mlir::detail::Parser::emitError(v198, v60, (uint64_t)&v316, &v318);
          if ((void)v318)
          {
            LODWORD(v313) = 3;
            uint64_t v314 = "expected i1 type for 'true' or 'false' values";
            uint64_t v315 = 45;
            uint64_t v199 = &v313;
            uint64_t v200 = *((void *)&v319 + 1);
            if (v320 >= v321)
            {
              unint64_t v282 = v320 + 1;
              if (*((void *)&v319 + 1) <= (unint64_t)&v313
                && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                uint64_t v297 = (char *)&v313 - *((void *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v282, 24);
                uint64_t v200 = *((void *)&v319 + 1);
                uint64_t v199 = (const char **)&v297[*((void *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v282, 24);
                uint64_t v199 = &v313;
                uint64_t v200 = *((void *)&v319 + 1);
              }
            }
            uint64_t v201 = v200 + 24 * v320;
            long long v202 = *(_OWORD *)v199;
            *(void *)(v201 + 16) = v199[2];
            *(_OWORD *)uint64_t v201 = v202;
            ++v320;
          }
          char v203 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
          char v302 = v203;
          if (v327)
          {
            uint64_t v204 = __p;
            if (__p)
            {
              uint64_t v205 = v326;
              uint64_t v206 = __p;
              if (v326 != __p)
              {
                do
                  uint64_t v205 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v205 - 1);
                while (v205 != v204);
                uint64_t v206 = __p;
              }
              uint64_t v326 = v204;
              operator delete(v206);
            }
            uint64_t v193 = v323;
            if (v323)
            {
              uint64_t v207 = v324;
              uint64_t v195 = v323;
              if (v324 == v323) {
                goto LABEL_355;
              }
              do
              {
                uint64_t v209 = *--v207;
                uint64_t v208 = v209;
                *uint64_t v207 = 0;
                if (v209) {
                  MEMORY[0x21667D390](v208, 0x1000C8077774924);
                }
              }
              while (v207 != v193);
LABEL_354:
              uint64_t v195 = v323;
              goto LABEL_355;
            }
            goto LABEL_356;
          }
          goto LABEL_358;
        }
        BOOL v66 = *v59 == 74;
        DWORD2(v318) = 1;
        *(void *)&long long v318 = v66;
        char v67 = v309[1];
        if (v309[1] >= v310)
        {
          v309[1] = (llvm::APFloatBase *)std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(v309, (const llvm::APInt *)&v318);
          if (DWORD2(v318) >= 0x41)
          {
LABEL_80:
            if ((void)v318) {
              MEMORY[0x21667D390](v318, 0x1000C8000313F17);
            }
          }
        }
        else
        {
          *((_DWORD *)v309[1] + 2) = 1;
          *(void *)char v67 = v66;
          v309[1] = (llvm::APFloatBase *)((char *)v67 + 16);
          if (DWORD2(v318) >= 0x41) {
            goto LABEL_80;
          }
        }
      }
      else
      {
        if (v62 == 9)
        {
          uint64_t v225 = *(void *)a1;
          __int16 v317 = 257;
          mlir::detail::Parser::emitError(v225, v60, (uint64_t)&v316, &v318);
          if ((void)v318)
          {
            LODWORD(v313) = 3;
            uint64_t v314 = "expected integer elements, but parsed floating-point";
            uint64_t v315 = 52;
            uint64_t v226 = &v313;
            uint64_t v227 = *((void *)&v319 + 1);
            if (v320 >= v321)
            {
              unint64_t v286 = v320 + 1;
              if (*((void *)&v319 + 1) <= (unint64_t)&v313
                && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                uint64_t v300 = (char *)&v313 - *((void *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v286, 24);
                uint64_t v227 = *((void *)&v319 + 1);
                uint64_t v226 = (const char **)&v300[*((void *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v286, 24);
                uint64_t v226 = &v313;
                uint64_t v227 = *((void *)&v319 + 1);
              }
            }
            uint64_t v228 = v227 + 24 * v320;
            long long v229 = *(_OWORD *)v226;
            *(void *)(v228 + 16) = v226[2];
            *(_OWORD *)uint64_t v228 = v229;
            ++v320;
          }
          char v230 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
          char v302 = v230;
          if (v327)
          {
            uint64_t v231 = __p;
            if (__p)
            {
              uint64_t v232 = v326;
              uint64_t v233 = __p;
              if (v326 != __p)
              {
                do
                  uint64_t v232 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v232 - 1);
                while (v232 != v231);
                uint64_t v233 = __p;
              }
              uint64_t v326 = v231;
              operator delete(v233);
            }
            uint64_t v193 = v323;
            if (v323)
            {
              uint64_t v234 = v324;
              uint64_t v195 = v323;
              if (v324 != v323)
              {
                do
                {
                  uint64_t v236 = *--v234;
                  uint64_t v235 = v236;
                  *uint64_t v234 = 0;
                  if (v236) {
                    MEMORY[0x21667D390](v235, 0x1000C8077774924);
                  }
                }
                while (v234 != v193);
                goto LABEL_354;
              }
LABEL_355:
              uint64_t v324 = v193;
              operator delete(v195);
            }
            goto LABEL_356;
          }
          goto LABEL_358;
        }
        buildAttributeAPInt((uint64_t)&v313, v307, v58 != 0, *((void *)v55 + 2), *((void *)v55 + 3));
        int v63 = v315;
        if ((_BYTE)v315)
        {
          uint64_t v64 = v309[1];
          if (v309[1] >= v310)
          {
            char v77 = std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(v309, (const llvm::APInt *)&v313);
          }
          else
          {
            unsigned int v65 = v314;
            *((_DWORD *)v309[1] + 2) = v314;
            if (v65 > 0x40) {
              llvm::APInt::initSlowCase(v64, (const llvm::APInt *)&v313);
            }
            *(void *)uint64_t v64 = v313;
            char v77 = (char *)v64 + 16;
          }
          v309[1] = (llvm::APFloatBase *)v77;
        }
        else
        {
          uint64_t v68 = *(void *)a1;
          v316.__r_.__value_.__r.__words[0] = (std::string::size_type)"integer constant out of range for type";
          __int16 v317 = 259;
          mlir::detail::Parser::emitError(v68, v60, (uint64_t)&v316, &v318);
          char v302 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
          if (v327)
          {
            uint64_t v69 = __p;
            if (__p)
            {
              __int16 v70 = v326;
              uint64_t v71 = __p;
              if (v326 != __p)
              {
                do
                  __int16 v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
                while (v70 != v69);
                uint64_t v71 = __p;
              }
              uint64_t v326 = v69;
              operator delete(v71);
            }
            uint64_t v72 = v323;
            if (v323)
            {
              unint64_t v73 = v324;
              uint64_t v74 = v323;
              if (v324 != v323)
              {
                do
                {
                  uint64_t v76 = *--v73;
                  uint64_t v75 = v76;
                  void *v73 = 0;
                  if (v76) {
                    MEMORY[0x21667D390](v75, 0x1000C8077774924);
                  }
                }
                while (v73 != v72);
                uint64_t v74 = v323;
              }
              uint64_t v324 = v72;
              operator delete(v74);
            }
            if (*((unsigned char **)&v319 + 1) != v322) {
              free(*((void **)&v319 + 1));
            }
          }
        }
        if ((_BYTE)v315 && v314 >= 0x41 && v313) {
          MEMORY[0x21667D390](v313, 0x1000C8000313F17);
        }
        if (!v63) {
          goto LABEL_358;
        }
      }
      v55 += 32;
      if (v55 == v56) {
        goto LABEL_359;
      }
    }
  }
  __int16 v88 = *(void **)(*(void *)OperandRange + 136);
  if (v88 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v88 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v309[0] = 0;
    v309[1] = 0;
    uint64_t v310 = 0;
    *(void *)&long long v307 = OperandRange;
    std::vector<llvm::APFloat>::reserve((uint64_t)v309, (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 5);
    uint64_t v100 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v101 = *(unsigned __int8 **)(a1 + 64);
    if (v100 == v101) {
      goto LABEL_324;
    }
    while (1)
    {
      int v102 = *v100;
      int v103 = *((_DWORD *)v100 + 2);
      if (v103 == 9)
      {
        double v111 = COERCE_DOUBLE(mlir::Token::getFloatingPointValue((mlir::Token *)(v100 + 8)));
        if (!v112)
        {
          uint64_t v210 = *(void *)a1;
          v316.__r_.__value_.__r.__words[0] = (std::string::size_type)"floating point value too large for attribute";
          __int16 v317 = 259;
          mlir::detail::Parser::emitError(v210, (uint64_t)&v316, &v318);
          char v152 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
          if (v327)
          {
            uint64_t v211 = __p;
            if (__p)
            {
              uint64_t v212 = v326;
              uint64_t v213 = __p;
              if (v326 != __p)
              {
                do
                  uint64_t v212 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v212 - 1);
                while (v212 != v211);
                uint64_t v213 = __p;
              }
              uint64_t v326 = v211;
              operator delete(v213);
            }
            int v156 = v323;
            if (v323)
            {
              uint64_t v214 = v324;
              unint64_t v158 = v323;
              if (v324 != v323)
              {
                do
                {
                  uint64_t v216 = *--v214;
                  uint64_t v215 = v216;
                  *uint64_t v214 = 0;
                  if (v216) {
                    MEMORY[0x21667D390](v215, 0x1000C8077774924);
                  }
                }
                while (v214 != v156);
                goto LABEL_319;
              }
LABEL_320:
              uint64_t v324 = v156;
              operator delete(v158);
            }
LABEL_321:
            if (*((unsigned char **)&v319 + 1) != v322) {
              free(*((void **)&v319 + 1));
            }
          }
LABEL_323:
          if (v152)
          {
LABEL_324:
            if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
            {
              uint64_t v146 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)v305, *((uint64_t *)&v305 + 1), (uint64_t)v309[0], (unint64_t)((v309[1] - v309[0]) >> 5) >> 1);
              uint64_t v217 = v309[0];
              if (!v309[0]) {
                return v146;
              }
            }
            else
            {
              uint64_t v146 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)v305, *((uint64_t *)&v305 + 1), (uint64_t)v309[0], (v309[1] - v309[0]) >> 5);
              uint64_t v217 = v309[0];
              if (!v309[0]) {
                return v146;
              }
            }
          }
          else
          {
LABEL_329:
            uint64_t v146 = 0;
            uint64_t v217 = v309[0];
            if (!v309[0]) {
              return v146;
            }
          }
          uint64_t v218 = v309[1];
          int v183 = v217;
          if (v309[1] != v217)
          {
            uint64_t v219 = llvm::APFloatBase::PPCDoubleDouble(v217);
            uint64_t v220 = (llvm::APFloatBase *)((char *)v218 - 24);
            do
            {
              while (v219 == *(void **)v220)
              {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v220);
                uint64_t v222 = (llvm::APFloatBase *)(v221 - 8);
                uint64_t v220 = (llvm::detail::DoubleAPFloat *)(v221 - 32);
                if (v222 == v217) {
                  goto LABEL_335;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v220);
              uint64_t v224 = (llvm::APFloatBase *)(v223 - 8);
              uint64_t v220 = (llvm::detail::DoubleAPFloat *)(v223 - 32);
            }
            while (v224 != v217);
LABEL_335:
            int v183 = v309[0];
          }
          v309[1] = v217;
          goto LABEL_373;
        }
        double v113 = v111;
        if (v102) {
          double v113 = -v111;
        }
        unint64_t v114 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v316, v113);
        int v115 = llvm::APFloatBase::IEEEdouble(v114);
        llvm::APFloat::Storage::Storage((char *)&v318 + 8, &v316, v115);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v316);
        uint64_t isF64 = mlir::Type::isF64((mlir::Type *)&v307);
        if ((isF64 & 1) == 0)
        {
          v316.__r_.__value_.__s.__data_[0] = 0;
          FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v307);
          uint64_t isF64 = llvm::APFloat::convert((uint64_t)&v318, FloatSemantics, 1, &v316);
        }
        unint64_t v118 = v309[1];
        if (v309[1] >= v310)
        {
          int v121 = std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>((char **)v309, (uint64_t)&v318);
          unint64_t v122 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v121);
          v309[1] = (llvm::APFloatBase *)v121;
          if (v122 != *((void **)&v318 + 1)) {
            goto LABEL_180;
          }
        }
        else
        {
          uint64_t v119 = (void *)*((void *)&v318 + 1);
          int v120 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)isF64);
          if (v120 == v119)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)v118 + 1, (const llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
            v309[1] = (llvm::APFloatBase *)((char *)v118 + 32);
            if (v120 != *((void **)&v318 + 1))
            {
LABEL_180:
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v318 + 8));
              goto LABEL_161;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v118 + 8), (const llvm::detail::IEEEFloat *)((char *)&v318 + 8));
            v309[1] = (llvm::APFloatBase *)((char *)v118 + 32);
            if (v120 != *((void **)&v318 + 1)) {
              goto LABEL_180;
            }
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
      }
      else
      {
        if (v103 != 10 || *((void *)v100 + 3) < 2uLL || **((_WORD **)v100 + 2) != 30768)
        {
          uint64_t v147 = *(void *)a1;
          __int16 v317 = 257;
          mlir::detail::Parser::emitError(v147, (uint64_t)&v316, &v318);
          if ((void)v318)
          {
            LODWORD(v313) = 3;
            uint64_t v314 = "expected floating-point elements, but parsed integer";
            uint64_t v315 = 52;
            int v148 = &v313;
            uint64_t v149 = *((void *)&v319 + 1);
            if (v320 >= v321)
            {
              unint64_t v279 = v320 + 1;
              if (*((void *)&v319 + 1) <= (unint64_t)&v313
                && *((void *)&v319 + 1) + 24 * (unint64_t)v320 > (unint64_t)&v313)
              {
                uint64_t v294 = (char *)&v313 - *((void *)&v319 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v279, 24);
                uint64_t v149 = *((void *)&v319 + 1);
                int v148 = (const char **)&v294[*((void *)&v319 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319 + 8, v322, v279, 24);
                int v148 = &v313;
                uint64_t v149 = *((void *)&v319 + 1);
              }
            }
            uint64_t v150 = v149 + 24 * v320;
            long long v151 = *(_OWORD *)v148;
            *(void *)(v150 + 16) = v148[2];
            *(_OWORD *)uint64_t v150 = v151;
            ++v320;
          }
          char v152 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
          if ((void)v318) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
          }
          if (v327)
          {
            uint64_t v153 = __p;
            if (__p)
            {
              unint64_t v154 = v326;
              uint64_t v155 = __p;
              if (v326 != __p)
              {
                do
                  unint64_t v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
                while (v154 != v153);
                uint64_t v155 = __p;
              }
              uint64_t v326 = v153;
              operator delete(v155);
            }
            int v156 = v323;
            if (v323)
            {
              int v157 = v324;
              unint64_t v158 = v323;
              if (v324 == v323) {
                goto LABEL_320;
              }
              do
              {
                uint64_t v160 = *--v157;
                uint64_t v159 = v160;
                *int v157 = 0;
                if (v160) {
                  MEMORY[0x21667D390](v159, 0x1000C8077774924);
                }
              }
              while (v157 != v156);
LABEL_319:
              unint64_t v158 = v323;
              goto LABEL_320;
            }
            goto LABEL_321;
          }
          goto LABEL_323;
        }
        LOBYTE(v318) = 0;
        LOBYTE(v320) = 0;
        uint64_t v104 = *(void *)a1;
        unint64_t v105 = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v307);
        unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)&v307);
        unint64_t v107 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v104, (uint64_t)&v318, (MirInfoChannelAssignment *)(v100 + 8), v102 != 0, v105, Width);
        char v108 = (char)v107;
        if ((_BYTE)v107)
        {
          unint64_t v109 = v309[1];
          if (v309[1] >= v310)
          {
            unint64_t v107 = (llvm::APFloatBase *)std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>((char **)v309, (uint64_t)&v318);
          }
          else
          {
            uint64_t v110 = (void *)*((void *)&v318 + 1);
            if (llvm::APFloatBase::PPCDoubleDouble(v107) == v110) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)v109 + 1, (const llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v109 + 8), (const llvm::detail::IEEEFloat *)((char *)&v318 + 8));
            }
            unint64_t v107 = (llvm::APFloatBase *)((char *)v109 + 32);
          }
          v309[1] = v107;
        }
        if ((_BYTE)v320)
        {
          unint64_t v123 = (void *)*((void *)&v318 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble(v107) == v123) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v318 + 8));
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v318 + 8));
          }
        }
        if (!v108) {
          goto LABEL_329;
        }
      }
LABEL_161:
      v100 += 32;
      if (v100 == v101) {
        goto LABEL_324;
      }
    }
  }
  long long v241 = v305;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v305);
  if (*(unsigned char *)(a1 + 104))
  {
    mlir::Token::getStringValue(v6, (std::string *)&v318);
    std::string::size_type v242 = BYTE7(v319);
    uint64_t v243 = (long long *)v318;
    if (SBYTE7(v319) < 0) {
      std::string::size_type v242 = *((void *)&v318 + 1);
    }
    else {
      uint64_t v243 = &v318;
    }
    v316.__r_.__value_.__r.__words[0] = (std::string::size_type)v243;
    v316.__r_.__value_.__l.__size_ = v242;
    uint64_t v146 = mlir::DenseStringElementsAttr::get(v241, *((uint64_t *)&v241 + 1), (uint64_t)&v316, 1);
    if (SBYTE7(v319) < 0)
    {
      int v183 = (llvm::APFloatBase *)v318;
      goto LABEL_373;
    }
    return v146;
  }
  uint64_t v244 = *(char **)(a1 + 56);
  uint64_t v303 = *(char **)(a1 + 64);
  uint64_t v245 = v303 - v244;
  if (v303 == v244)
  {
    uint64_t v250 = 0;
    uint64_t v248 = 0;
    uint64_t v249 = 0;
    uint64_t v246 = 0;
  }
  else
  {
    if (v245 < 0) {
LABEL_493:
    }
      abort();
    uint64_t v246 = (std::string *)operator new(24 * (v245 >> 5));
    uint64_t v247 = &v246[v245 >> 5];
    uint64_t v248 = (char *)operator new((unint64_t)v245 >> 1);
    uint64_t v249 = v246;
    uint64_t v250 = v248;
    uint64_t v251 = &v248[16 * (v245 >> 5)];
    do
    {
      while (1)
      {
        long long v254 = *((_OWORD *)v244 + 1);
        long long v318 = *(_OWORD *)v244;
        long long v319 = v254;
        mlir::Token::getStringValue((mlir::Token *)((char *)&v318 + 8), &v316);
        if (v249 >= v247)
        {
          unint64_t v256 = 0xAAAAAAAAAAAAAAABLL * (((char *)v249 - (char *)v246) >> 3) + 1;
          if (v256 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_493;
          }
          if (0x5555555555555556 * (((char *)v247 - (char *)v246) >> 3) > v256) {
            unint64_t v256 = 0x5555555555555556 * (((char *)v247 - (char *)v246) >> 3);
          }
          unint64_t v257 = 0xAAAAAAAAAAAAAAABLL * (((char *)v247 - (char *)v246) >> 3) >= 0x555555555555555
               ? 0xAAAAAAAAAAAAAAALL
               : v256;
          uint64_t v301 = v251;
          if (v257)
          {
            if (v257 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_496;
            }
            uint64_t v258 = (char *)operator new(24 * v257);
          }
          else
          {
            uint64_t v258 = 0;
          }
          uint64_t v259 = (std::string *)&v258[8 * (((char *)v249 - (char *)v246) >> 3)];
          *uint64_t v259 = v316;
          memset(&v316, 0, sizeof(v316));
          if (v249 == v246)
          {
            uint64_t v261 = &v258[8 * (((char *)v249 - (char *)v246) >> 3)];
          }
          else
          {
            uint64_t v260 = v249;
            uint64_t v261 = &v258[8 * (((char *)v249 - (char *)v246) >> 3)];
            do
            {
              long long v262 = *(_OWORD *)&v260[-1].__r_.__value_.__l.__data_;
              *((void *)v261 - 1) = *((void *)&v260[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v261 - 24) = v262;
              v261 -= 24;
              v260[-1].__r_.__value_.__l.__size_ = 0;
              v260[-1].__r_.__value_.__r.__words[2] = 0;
              v260[-1].__r_.__value_.__r.__words[0] = 0;
              --v260;
            }
            while (v260 != v246);
            do
            {
              if (SHIBYTE(v249[-1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v249[-1].__r_.__value_.__l.__data_);
              }
              --v249;
            }
            while (v249 != v246);
          }
          uint64_t v247 = (std::string *)&v258[24 * v257];
          uint64_t v249 = v259 + 1;
          if (v246) {
            operator delete(v246);
          }
          uint64_t v246 = (std::string *)v261;
          uint64_t v251 = v301;
        }
        else
        {
          long long v255 = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
          v249->__r_.__value_.__r.__words[2] = v316.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v255;
          ++v249;
          memset(&v316, 0, sizeof(v316));
        }
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v316.__r_.__value_.__l.__data_);
        }
        if (v248 >= v251) {
          break;
        }
        if ((v249[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          data = v249 - 1;
        }
        else {
          data = (std::string *)v249[-1].__r_.__value_.__l.__data_;
        }
        *(void *)uint64_t v248 = data;
        std::string::size_type size = HIBYTE(v249[-1].__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v249[-1].__r_.__value_.__l.__size_;
        }
        *((void *)v248 + 1) = size;
        v248 += 16;
        v244 += 32;
        if (v244 == v303) {
          goto LABEL_437;
        }
      }
      uint64_t v263 = (v248 - v250) >> 4;
      unint64_t v264 = v263 + 1;
      if ((unint64_t)(v263 + 1) >> 60) {
        goto LABEL_493;
      }
      if ((v251 - v250) >> 3 > v264) {
        unint64_t v264 = (v251 - v250) >> 3;
      }
      if ((unint64_t)(v251 - v250) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v264 = 0xFFFFFFFFFFFFFFFLL;
      }
      if (v264 >> 60) {
LABEL_496:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v265 = 16 * v264;
      uint64_t v266 = (char *)operator new(16 * v264);
      uint64_t v267 = &v266[16 * v263];
      std::string::size_type v268 = HIBYTE(v249[-1].__r_.__value_.__r.__words[2]);
      if ((v268 & 0x80u) == 0) {
        uint64_t v269 = v249 - 1;
      }
      else {
        uint64_t v269 = (std::string *)v249[-1].__r_.__value_.__l.__data_;
      }
      *(void *)uint64_t v267 = v269;
      if ((v268 & 0x80u) != 0) {
        std::string::size_type v268 = v249[-1].__r_.__value_.__l.__size_;
      }
      *((void *)v267 + 1) = v268;
      if (v248 == v250)
      {
        uint64_t v271 = &v266[16 * v263];
      }
      else
      {
        uint64_t v270 = &v266[16 * v263];
        do
        {
          uint64_t v271 = v270 - 16;
          *((_OWORD *)v270 - 1) = *((_OWORD *)v248 - 1);
          v248 -= 16;
          v270 -= 16;
        }
        while (v248 != v250);
      }
      uint64_t v251 = &v266[v265];
      uint64_t v248 = v267 + 16;
      if (v250) {
        operator delete(v250);
      }
      uint64_t v250 = v271;
      v244 += 32;
    }
    while (v244 != v303);
  }
LABEL_437:
  uint64_t v146 = mlir::DenseStringElementsAttr::get(v241, *((uint64_t *)&v241 + 1), (uint64_t)v250, (v248 - v250) >> 4);
  if (v250) {
    operator delete(v250);
  }
  if (v246)
  {
    while (v249 != v246)
    {
      if (SHIBYTE(v249[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v249[-1].__r_.__value_.__l.__data_);
      }
      --v249;
    }
    int v183 = (llvm::APFloatBase *)v246;
    goto LABEL_373;
  }
  return v146;
}

unint64_t mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v15);
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = v15;
    *(void *)(v4 + 72) = v16;
    unint64_t v5 = 0x8000000000000000;
    return v5 | v3;
  }
  uint64_t OCGSize = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(v2 + 56));
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v15);
    uint64_t v9 = *(void *)(a1 + 8);
    *(_OWORD *)(v9 + 56) = v15;
    *(void *)(v9 + 72) = v16;
    uint64_t v7 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v7 + 56) != 10) {
      goto LABEL_14;
    }
  }
  else if (v8 != 10)
  {
    goto LABEL_14;
  }
  unint64_t UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v7 + 64), *(void *)(v7 + 72));
  if (v11)
  {
    unint64_t v12 = UInt64IntegerValue;
    if ((UInt64IntegerValue & 0x8000000000000000) == 0)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v15);
      uint64_t v13 = *(void *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v15;
      *(void *)(v13 + 72) = v16;
      if (v8 == 24) {
        unint64_t v3 = -(uint64_t)v12;
      }
      else {
        unint64_t v3 = v12;
      }
      unint64_t v5 = v3 & 0xFFFFFFFFFFFFFF00;
      unint64_t v3 = v3;
      return v5 | v3;
    }
  }
LABEL_14:
  mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()(a1, OCGSize);
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::find(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    uint64_t result = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    int v7 = 1;
    while (v6 != -1)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (*a2 == v6) {
        return (uint64_t *)(v2 + 16 * v4);
      }
    }
  }
  return (uint64_t *)(v2 + 16 * v3);
}

void *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::try_emplace<mlir::DistinctAttr&>@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  unsigned int v8 = *((_DWORD *)result + 4);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v9 = *result;
  unsigned int v10 = v8 - 1;
  unsigned int v11 = (37 * *a2) & (v8 - 1);
  unint64_t v12 = (uint64_t *)(*result + 16 * v11);
  uint64_t v13 = *v12;
  if (*a2 == *v12)
  {
LABEL_3:
    char v14 = 0;
    goto LABEL_10;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v13 != -1)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v13 == -2;
    }
    if (v18) {
      uint64_t v16 = v12;
    }
    unsigned int v19 = v11 + v17++;
    unsigned int v11 = v19 & v10;
    unint64_t v12 = (uint64_t *)(v9 + 16 * (v19 & v10));
    uint64_t v13 = *v12;
    if (*a2 == *v12) {
      goto LABEL_3;
    }
  }
  if (v16) {
    unint64_t v12 = v16;
  }
  int v20 = *((_DWORD *)result + 2);
  if (4 * v20 + 4 < 3 * v8)
  {
    if (v8 + ~v20 - *((_DWORD *)result + 3) > v8 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_23:
    v8 *= 2;
  }
  uint64_t result = llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::grow((uint64_t)result, v8);
  uint64_t v15 = *a2;
  int v21 = *((_DWORD *)v6 + 4) - 1;
  unsigned int v22 = (37 * *a2) & v21;
  unint64_t v12 = (uint64_t *)(*v6 + 16 * v22);
  uint64_t v23 = *v12;
  if (*a2 == *v12) {
    goto LABEL_7;
  }
  uint64_t v24 = 0;
  int v25 = 1;
  while (v23 != -1)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == -2;
    }
    if (v26) {
      uint64_t v24 = v12;
    }
    unsigned int v27 = v22 + v25++;
    unsigned int v22 = v27 & v21;
    unint64_t v12 = (uint64_t *)(*v6 + 16 * (v27 & v21));
    uint64_t v23 = *v12;
    if (v15 == *v12) {
      goto LABEL_7;
    }
  }
  if (v24) {
    unint64_t v12 = v24;
  }
LABEL_6:
  uint64_t v15 = *v12;
LABEL_7:
  ++*((_DWORD *)v6 + 2);
  if (v15 != -1) {
    --*((_DWORD *)v6 + 3);
  }
  *unint64_t v12 = *a2;
  v12[1] = *a3;
  uint64_t v9 = *v6;
  unsigned int v8 = *((_DWORD *)v6 + 4);
  char v14 = 1;
LABEL_10:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v14;
  return result;
}

uint64_t anonymous namespace'::TensorLiteralParser::parseList(uint64_t *a1, uint64_t a2)
{
  uint64_t v19[4] = *MEMORY[0x263EF8340];
  char v15 = 1;
  uint64_t v16 = a1;
  __src = v19;
  uint64_t v18 = *(void *)"";
  unsigned int v14 = 0;
  v13[0] = a1;
  v13[1] = &v14;
  void v13[2] = &v15;
  v13[3] = &v16;
  v13[4] = &__src;
  {
    uint64_t v10 = 0;
    unsigned int v11 = __src;
    if (__src == v19) {
      return v10;
    }
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v3 = v14;
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), 1uLL, 8);
    uint64_t v4 = *(unsigned int *)(a2 + 8);
  }
  *(void *)(*(void *)a2 + 8 * v4) = v3;
  unint64_t v5 = *(unsigned int *)(a2 + 12);
  uint64_t v6 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v6;
  int v7 = __src;
  uint64_t v8 = v18;
  unint64_t v9 = v18 + v6;
  if (v9 > v5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  if (v8)
  {
    memcpy((void *)(*(void *)a2 + 8 * v6), v7, 8 * v8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a2 + 8) = v6 + v8;
  uint64_t v10 = 1;
  unsigned int v11 = __src;
  if (__src != v19) {
LABEL_9:
  }
    free(v11);
  return v10;
}

uint64_t anonymous namespace'::TensorLiteralParser::parseElement(_anonymous_namespace_::TensorLiteralParser *this)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)this + 8);
  uint64_t v3 = (long long *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 9:
    case 0xA:
    case 0x36:
    case 0x4A:
      uint64_t v6 = (char *)*((void *)this + 8);
      unint64_t v5 = *((void *)this + 9);
      if ((unint64_t)v6 < v5) {
        goto LABEL_13;
      }
      int v7 = (unsigned char *)*((void *)this + 7);
      uint64_t v8 = (v6 - v7) >> 5;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 59) {
        goto LABEL_93;
      }
      uint64_t v10 = v5 - (void)v7;
      if (v10 >> 4 > v9) {
        unint64_t v9 = v10 >> 4;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (!v11)
      {
        unint64_t v12 = 0;
        goto LABEL_37;
      }
      if (!(v11 >> 59))
      {
        unint64_t v12 = (char *)operator new(32 * v11);
LABEL_37:
        uint64_t v36 = &v12[32 * v8];
        *uint64_t v36 = 0;
        long long v37 = *v3;
        uint64_t v38 = &v12[32 * v11];
        *((void *)v36 + 3) = *((void *)v3 + 2);
        *(_OWORD *)(v36 + 8) = v37;
        char v15 = v36 + 32;
        if (v6 == v7) {
          goto LABEL_40;
        }
        do
        {
          long long v39 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v36 - 1) = v39;
          v36 -= 32;
          v6 -= 32;
        }
        while (v6 != v7);
        goto LABEL_39;
      }
      goto LABEL_94;
    case 0xB:
      uint64_t v6 = (char *)*((void *)this + 8);
      unint64_t v13 = *((void *)this + 9);
      if ((unint64_t)v6 < v13)
      {
LABEL_13:
        *uint64_t v6 = 0;
        long long v14 = *v3;
        *((void *)v6 + 3) = *((void *)v3 + 2);
        *(_OWORD *)(v6 + 8) = v14;
        char v15 = v6 + 32;
LABEL_42:
        *((void *)this + 8) = v15;
        goto LABEL_43;
      }
      uint64_t v43 = (unsigned char *)*((void *)this + 7);
      uint64_t v44 = (v6 - v43) >> 5;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59) {
        goto LABEL_93;
      }
      uint64_t v46 = v13 - (void)v43;
      if (v46 >> 4 > v45) {
        unint64_t v45 = v46 >> 4;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v47 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (!v47)
      {
        long long v48 = 0;
        goto LABEL_83;
      }
      if (!(v47 >> 59))
      {
        long long v48 = (char *)operator new(32 * v47);
LABEL_83:
        uint64_t v36 = &v48[32 * v44];
        *uint64_t v36 = 0;
        long long v61 = *v3;
        uint64_t v38 = &v48[32 * v47];
        *((void *)v36 + 3) = *((void *)v3 + 2);
        *(_OWORD *)(v36 + 8) = v61;
        char v15 = v36 + 32;
        if (v6 == v43)
        {
LABEL_40:
          *((void *)this + 7) = v36;
          *((void *)this + 8) = v15;
          *((void *)this + 9) = v38;
          if (v6) {
            operator delete(v6);
          }
          goto LABEL_42;
        }
        do
        {
          long long v62 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v36 - 1) = v62;
          v36 -= 32;
          v6 -= 32;
        }
        while (v6 != v43);
LABEL_39:
        uint64_t v6 = (char *)*((void *)this + 7);
        goto LABEL_40;
      }
      goto LABEL_94;
    case 0x15:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v69);
      uint64_t v25 = *(void *)(v1 + 8);
      *(_OWORD *)(v25 + 56) = v69;
      *(void *)(v25 + 72) = v70;
      {
        uint64_t v26 = *(void *)this;
        *(void *)&long long v69 = "expected ',' between complex elements";
        __int16 v72 = 259;
        if (mlir::detail::Parser::parseToken(v26, 16, (uint64_t)&v69))
        {
          {
            uint64_t v27 = *(void *)this;
            v67[0] = "expected ')' after complex elements";
            __int16 v68 = 259;
            if (mlir::detail::Parser::parseToken(v27, 28, (uint64_t)v67)) {
              return 1;
            }
          }
        }
      }
      return 0;
    case 0x18:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v69);
      uint64_t v28 = *(void *)(v1 + 8);
      *(_OWORD *)(v28 + 56) = v69;
      *(void *)(v28 + 72) = v70;
      uint64_t v29 = *(void *)this;
      uint64_t v30 = *(void *)(*(void *)this + 8);
      int v32 = *(_DWORD *)(v30 + 56);
      __int16 v31 = (long long *)(v30 + 56);
      if ((v32 - 9) < 2)
      {
        uint64_t v34 = (char *)*((void *)this + 8);
        unint64_t v33 = *((void *)this + 9);
        if ((unint64_t)v34 < v33)
        {
          *uint64_t v34 = 1;
          long long v35 = *v31;
          *((void *)v34 + 3) = *((void *)v31 + 2);
          *(_OWORD *)(v34 + 8) = v35;
          *((void *)this + 8) = v34 + 32;
          goto LABEL_43;
        }
        uint64_t v55 = (unsigned char *)*((void *)this + 7);
        uint64_t v56 = (v34 - v55) >> 5;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 59) {
LABEL_93:
        }
          abort();
        uint64_t v58 = v33 - (void)v55;
        if (v58 >> 4 > v57) {
          unint64_t v57 = v58 >> 4;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          if (v59 >> 59) {
LABEL_94:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          char v60 = (char *)operator new(32 * v59);
        }
        else
        {
          char v60 = 0;
        }
        int v63 = &v60[32 * v56];
        char *v63 = 1;
        long long v64 = *v31;
        *((void *)v63 + 3) = *((void *)v31 + 2);
        *(_OWORD *)(v63 + 8) = v64;
        unsigned int v65 = v63 + 32;
        if (v34 != v55)
        {
          do
          {
            long long v66 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v63 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v63 - 1) = v66;
            v63 -= 32;
            v34 -= 32;
          }
          while (v34 != v55);
          uint64_t v34 = (char *)*((void *)this + 7);
        }
        *((void *)this + 7) = v63;
        *((void *)this + 8) = v65;
        *((void *)this + 9) = &v60[32 * v59];
        if (v34) {
          operator delete(v34);
        }
        *((void *)this + 8) = v65;
LABEL_43:
        uint64_t v40 = *(void *)this;
        mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v40 + 8) + 8), (uint64_t)&v69);
        uint64_t v41 = *(void *)(v40 + 8);
        *(_OWORD *)(v41 + 56) = v69;
        *(void *)(v41 + 72) = v70;
        return 1;
      }
      v67[0] = "expected integer or floating point literal";
      __int16 v68 = 259;
      mlir::detail::Parser::emitError(v29, (uint64_t)v67, &v69);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
      if ((void)v69) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
      }
      if (v78)
      {
        uint64_t v49 = __p;
        if (__p)
        {
          uint64_t v50 = v77;
          uint64_t v51 = __p;
          if (v77 != __p)
          {
            do
              uint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
            while (v50 != v49);
            uint64_t v51 = __p;
          }
          char v77 = v49;
          operator delete(v51);
        }
        int v20 = v74;
        if (v74)
        {
          uint64_t v52 = v75;
          unsigned int v22 = v74;
          if (v75 != v74)
          {
            do
            {
              uint64_t v54 = *--v52;
              uint64_t v53 = v54;
              *uint64_t v52 = 0;
              if (v54) {
                MEMORY[0x21667D390](v53, 0x1000C8077774924);
              }
            }
            while (v52 != v20);
LABEL_69:
            unsigned int v22 = v74;
          }
LABEL_70:
          uint64_t v75 = v20;
          operator delete(v22);
        }
LABEL_71:
        if (v71 != &v73) {
          free(v71);
        }
      }
      return v16;
    default:
      v67[0] = "expected element literal of primitive type";
      __int16 v68 = 259;
      mlir::detail::Parser::emitError(v1, (uint64_t)v67, &v69);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
      if ((void)v69) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
      }
      if (!v78) {
        return v16;
      }
      int v17 = __p;
      if (__p)
      {
        uint64_t v18 = v77;
        unsigned int v19 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unsigned int v19 = __p;
        }
        char v77 = v17;
        operator delete(v19);
      }
      int v20 = v74;
      if (!v74) {
        goto LABEL_71;
      }
      int v21 = v75;
      unsigned int v22 = v74;
      if (v75 == v74) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v24 = *--v21;
        uint64_t v23 = v24;
        *int v21 = 0;
        if (v24) {
          MEMORY[0x21667D390](v23, 0x1000C8077774924);
        }
      }
      while (v21 != v20);
      goto LABEL_69;
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TensorLiteralParser::parseList(llvm::SmallVectorImpl<long long> &)::$_0>(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_anonymous_namespace_::TensorLiteralParser **)a1;
  __s2 = v26;
  uint64_t v25 = *(void *)"";
  if (*(_DWORD *)(*(void *)(*(void *)v2 + 8) + 56) == 22)
  {
    {
LABEL_3:
      uint64_t v3 = 0;
      goto LABEL_35;
    }
  }
  {
    goto LABEL_3;
  }
  ++**(_DWORD **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  if (*v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if ((void **)v5 == &__s2)
    {
LABEL_33:
      *uint64_t v4 = 0;
LABEL_34:
      uint64_t v3 = 1;
      goto LABEL_35;
    }
    unint64_t v6 = v25;
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7 >= v25)
    {
      if (v25) {
        memmove(*(void **)v5, __s2, 8 * v25);
      }
      goto LABEL_32;
    }
    if (*(_DWORD *)(v5 + 12) >= v25)
    {
      if (v7)
      {
        memmove(*(void **)v5, __s2, 8 * v7);
        uint64_t v8 = v25;
        if (v7 == v25)
        {
LABEL_32:
          *(_DWORD *)(v5 + 8) = v6;
          uint64_t v4 = *(unsigned char **)(a1 + 16);
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = v25;
        if (!v25) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6, 8);
      uint64_t v7 = 0;
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_32;
      }
    }
    memcpy((void *)(*(void *)v5 + 8 * v7), (char *)__s2 + 8 * v7, 8 * v8 - 8 * v7);
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = **(uint64_t ***)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(v9 + 8);
  if (v11 == v25 && !memcmp(*(const void **)v9, __s2, 8 * v11)) {
    goto LABEL_34;
  }
  uint64_t v12 = *v10;
  unsigned int v22 = "tensor literal is invalid; ranks are not consistent between elements";
  __int16 v23 = 259;
  mlir::detail::Parser::emitError(v12, (uint64_t)&v22, v27);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    unint64_t v13 = __p;
    if (__p)
    {
      long long v14 = v33;
      char v15 = __p;
      if (v33 != __p)
      {
        do
          long long v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        char v15 = __p;
      }
      unint64_t v33 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v30;
    if (v30)
    {
      int v17 = v31;
      uint64_t v18 = v30;
      if (v31 != v30)
      {
        do
        {
          uint64_t v20 = *--v17;
          uint64_t v19 = v20;
          *int v17 = 0;
          if (v20) {
            MEMORY[0x21667D390](v19, 0x1000C8077774924);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v30;
      }
      __int16 v31 = v16;
      operator delete(v18);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
LABEL_35:
  if (__s2 != v26) {
    free(__s2);
  }
  return v3;
}

__n128 llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, const char **a5)
{
  if (a1 != a2)
  {
    uint64_t v47 = v5;
    uint64_t v48 = v6;
    unint64_t v13 = (unint64_t *)(a3 + 16);
    unint64_t v12 = *(void *)(a3 + 16);
    long long v14 = *a1;
    int v44 = 2;
    unint64_t v45 = v14;
    uint64_t v15 = *(unsigned int *)(a3 + 24);
    uint64_t v16 = (__n128 *)&v44;
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      unint64_t v37 = v15 + 1;
      BOOL v38 = v12 + 24 * v15 > (unint64_t)&v44;
      if (v12 <= (unint64_t)&v44 && v38)
      {
        long long v39 = (char *)&v44 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        unint64_t v12 = *(void *)(a3 + 16);
        uint64_t v16 = (__n128 *)&v39[v12];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        unint64_t v12 = *(void *)(a3 + 16);
        uint64_t v16 = (__n128 *)&v44;
      }
    }
    int v17 = (__n128 *)(v12 + 24 * *(unsigned int *)(a3 + 24));
    __n128 result = *v16;
    v17[1].n128_u64[0] = v16[1].n128_u64[0];
    *int v17 = result;
    ++*(_DWORD *)(a3 + 24);
    uint64_t v19 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v42 = (void *)(a4 + 32);
      uint64_t v43 = (unint64_t *)(a4 + 16);
      uint64_t v41 = (void *)(a3 + 32);
      do
      {
        uint64_t v20 = *a5;
        if (*a5)
        {
          size_t v21 = strlen(*a5);
          int v44 = 3;
          unint64_t v45 = v20;
          size_t v46 = v21;
          uint64_t v22 = *(unsigned int *)(a4 + 24);
          unint64_t v23 = *(void *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28)) {
            goto LABEL_9;
          }
        }
        else
        {
          int v44 = 3;
          unint64_t v45 = 0;
          size_t v46 = 0;
          uint64_t v22 = *(unsigned int *)(a4 + 24);
          unint64_t v23 = *(void *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28)) {
            goto LABEL_9;
          }
        }
        unint64_t v32 = v22 + 1;
        BOOL v33 = v23 + 24 * v22 > (unint64_t)&v44;
        if (v23 > (unint64_t)&v44 || !v33)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
          unint64_t v23 = *v43;
LABEL_9:
          uint64_t v24 = &v44;
          goto LABEL_10;
        }
        uint64_t v40 = (char *)&v44 - v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
        unint64_t v23 = *v43;
        uint64_t v24 = (int *)&v40[*v43];
LABEL_10:
        uint64_t v25 = v23 + 24 * *(unsigned int *)(a4 + 24);
        long long v26 = *(_OWORD *)v24;
        *(void *)(v25 + 16) = *((void *)v24 + 2);
        *(_OWORD *)uint64_t v25 = v26;
        ++*(_DWORD *)(a4 + 24);
        uint64_t v27 = *v19;
        int v44 = 2;
        unint64_t v45 = v27;
        uint64_t v28 = *(unsigned int *)(a3 + 24);
        unint64_t v29 = *(void *)(a3 + 16);
        if (v28 >= *(_DWORD *)(a3 + 28))
        {
          unint64_t v34 = v28 + 1;
          BOOL v35 = v29 + 24 * v28 > (unint64_t)&v44;
          if (v29 <= (unint64_t)&v44 && v35)
          {
            uint64_t v36 = (char *)&v44 - v29;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
            unint64_t v29 = *v13;
            uint64_t v30 = (__n128 *)&v36[*v13];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
          unint64_t v29 = *v13;
        }
        uint64_t v30 = (__n128 *)&v44;
LABEL_12:
        __int16 v31 = (__n128 *)(v29 + 24 * *(unsigned int *)(a3 + 24));
        __n128 result = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *__int16 v31 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v19;
      }
      while (v19 != a2);
    }
  }
  return result;
}

void std::vector<llvm::APInt>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    uint64_t v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = v4;
      uint64_t v10 = &v6[v4 - v2];
      uint64_t v11 = v4;
      do
      {
        *((_DWORD *)v10 - 2) = *((_DWORD *)v9 - 2);
        uint64_t v12 = *((void *)v11 - 2);
        v11 -= 16;
        *((void *)v10 - 2) = v12;
        v10 -= 16;
        *((_DWORD *)v9 - 2) = 0;
        uint64_t v9 = v11;
      }
      while (v11 != v2);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while (v4 != v2)
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          uint64_t v13 = *((void *)v4 - 2);
          if (v13) {
            MEMORY[0x21667D390](v13, 0x1000C8000313F17);
          }
        }
        v4 -= 16;
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

char *std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(llvm::APInt **a1, const llvm::APInt *a2)
{
  uint64_t v2 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = (v3 - (char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v7 = a1[2] - (llvm::APInt *)v2;
  if (v7 >> 3 > v5) {
    unint64_t v5 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = 16 * v5;
  uint64_t v10 = (char *)operator new(16 * v5);
  uint64_t v11 = (llvm::APInt *)&v10[16 * v4];
  unsigned int v12 = *((_DWORD *)a2 + 2);
  *((_DWORD *)v11 + 2) = v12;
  if (v12 > 0x40) {
    llvm::APInt::initSlowCase(v11, a2);
  }
  *(void *)uint64_t v11 = *(void *)a2;
  uint64_t v13 = &v10[v9];
  long long v14 = (char *)v11 + 16;
  if (v3 == v2)
  {
    *a1 = v11;
    a1[1] = (llvm::APInt *)v14;
    a1[2] = (llvm::APInt *)v13;
  }
  else
  {
    uint64_t v15 = v3;
    uint64_t v16 = v3;
    do
    {
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      uint64_t v17 = *((void *)v16 - 2);
      v16 -= 16;
      *((void *)v11 - 2) = v17;
      uint64_t v11 = (llvm::APInt *)((char *)v11 - 16);
      *((_DWORD *)v15 - 2) = 0;
      uint64_t v15 = v16;
    }
    while (v16 != v2);
    *a1 = v11;
    a1[1] = (llvm::APInt *)v14;
    a1[2] = (llvm::APInt *)v13;
    while (v3 != v2)
    {
      if (*((_DWORD *)v3 - 2) >= 0x41u)
      {
        uint64_t v18 = *((void *)v3 - 2);
        if (v18) {
          MEMORY[0x21667D390](v18, 0x1000C8000313F17);
        }
      }
      v3 -= 16;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void std::vector<llvm::APFloat>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    abort();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 32 * a2;
  uint64_t v6 = (llvm::APFloatBase *)operator new(32 * a2);
  uint64_t v7 = (char *)v6 + v5;
  uint64_t v8 = (char *)v6 + (char *)v4 - (char *)v2;
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(v6);
  uint64_t v10 = v4 - 3;
  uint64_t v11 = v8;
  do
  {
    while (1)
    {
      uint64_t v13 = v11 - 24;
      if (v9 != *v10) {
        break;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v10);
      v11 -= 32;
      unsigned int v12 = v10 - 1;
      v10 -= 4;
      if (v12 == v2) {
        goto LABEL_8;
      }
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t)v10);
    v11 -= 32;
    long long v14 = v10 - 1;
    v10 -= 4;
  }
  while (v14 != v2);
LABEL_8:
  uint64_t v2 = *(void ***)a1;
  uint64_t v15 = *(void ***)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v15 != v2)
  {
    uint64_t v16 = (llvm::detail::IEEEFloat *)(v15 - 3);
    do
    {
      while (v9 != *(void **)v16)
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v16);
        uint64_t v18 = (void **)(v17 - 8);
        uint64_t v16 = (llvm::detail::IEEEFloat *)(v17 - 32);
        if (v18 == v2) {
          goto LABEL_13;
        }
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v16);
      uint64_t v20 = (void **)(v19 - 8);
      uint64_t v16 = (llvm::detail::IEEEFloat *)(v19 - 32);
    }
    while (v20 != v2);
  }
LABEL_13:
  if (v2)
  {
LABEL_14:
    operator delete(v2);
  }
}

char *std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>(char **a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v5 = a1;
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    a1 = (char **)operator new(32 * v7);
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (char *)&v8[4 * v2];
  uint64_t v11 = *(void **)(a2 + 8);
  uint64_t v10 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  unsigned int v12 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v12 != v11)
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(v9 + 8), v10);
    uint64_t v13 = (char *)&v8[4 * v7];
    long long v14 = v9 + 32;
    uint64_t v16 = (void **)*v5;
    uint64_t v15 = v5[1];
    if (v15 != *v5) {
      goto LABEL_13;
    }
LABEL_24:
    llvm *v5 = v9;
    v5[1] = v14;
    v5[2] = v13;
    goto LABEL_25;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)v9 + 1, v10);
  uint64_t v13 = (char *)&v8[4 * v7];
  long long v14 = v9 + 32;
  uint64_t v16 = (void **)*v5;
  uint64_t v15 = v5[1];
  if (v15 == *v5) {
    goto LABEL_24;
  }
LABEL_13:
  uint64_t v17 = (void **)(v15 - 24);
  do
  {
    while (1)
    {
      uint64_t v19 = v9 - 24;
      if (v12 != *v17) {
        break;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v17);
      v9 -= 32;
      uint64_t v18 = v17 - 1;
      v17 -= 4;
      if (v18 == v16) {
        goto LABEL_17;
      }
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v19, (uint64_t)v17);
    v9 -= 32;
    uint64_t v20 = v17 - 1;
    v17 -= 4;
  }
  while (v20 != v16);
LABEL_17:
  uint64_t v15 = *v5;
  size_t v21 = v5[1];
  llvm *v5 = v9;
  v5[1] = v14;
  v5[2] = v13;
  if (v21 != v15)
  {
    uint64_t v22 = (llvm::detail::IEEEFloat *)(v21 - 24);
    do
    {
      while (v12 != *(void **)v22)
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v22);
        uint64_t v24 = (char *)(v23 - 8);
        uint64_t v22 = (llvm::detail::IEEEFloat *)(v23 - 32);
        if (v24 == v15) {
          goto LABEL_25;
        }
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v22);
      long long v26 = (char *)(v25 - 8);
      uint64_t v22 = (llvm::detail::IEEEFloat *)(v25 - 32);
    }
    while (v26 != v15);
  }
LABEL_25:
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()(uint64_t a1, const char *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = "expected a 64-bit signed integer or '?'";
  __int16 v11 = 259;
  mlir::detail::Parser::emitError(a1, a2, (uint64_t)&v10, v12);
  if (v12[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v12);
  }
  if (v19)
  {
    uint64_t v2 = __p;
    if (__p)
    {
      unint64_t v3 = v18;
      uint64_t v4 = __p;
      if (v18 != __p)
      {
        do
          unint64_t v3 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v3 - 1);
        while (v3 != v2);
        uint64_t v4 = __p;
      }
      uint64_t v18 = v2;
      operator delete(v4);
    }
    uint64_t v5 = v15;
    if (v15)
    {
      uint64_t v6 = v16;
      unint64_t v7 = v15;
      if (v16 != v15)
      {
        do
        {
          uint64_t v9 = *--v6;
          uint64_t v8 = v9;
          *uint64_t v6 = 0;
          if (v9) {
            MEMORY[0x21667D390](v8, 0x1000C8077774924);
          }
        }
        while (v6 != v5);
        unint64_t v7 = v15;
      }
      uint64_t v16 = v5;
      operator delete(v7);
    }
    if (v13 != &v14) {
      free(v13);
    }
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttribute(mlir::Type)::$_0>(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = mlir::detail::Parser::parseAttribute(a1[1], 0);
  uint64_t v4 = *((unsigned int *)v2 + 2);
  if (v4 >= *((_DWORD *)v2 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v2 + 2, v4 + 1, 8);
    LODWORD(v4) = *((_DWORD *)v2 + 2);
  }
  *(void *)(*v2 + 8 * v4) = v3;
  ++*((_DWORD *)v2 + 2);
  return *(void *)(*(void *)*a1 + 8 * *(unsigned int *)(*a1 + 8) - 8) != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>(uint64_t *a1)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  LOBYTE(StringAttr) = 0;
  char v74 = 0;
  uint64_t v3 = *(void **)(v2 + 8);
  uint64_t v4 = (mlir::Token *)(v3 + 7);
  int v5 = *((_DWORD *)v3 + 14);
  if (v5 != 3 && v5 != 12)
  {
    if (v5 == 11)
    {
      mlir::Token::getStringValue(v4, &__s2);
      LOWORD(v80) = 260;
      *(void *)&long long v77 = &__s2;
      char v74 = 1;
      Stringuint64_t Attr = mlir::Builder::getStringAttr((mlir::StringAttr **)v2, (mlir::MLIRContext *)&v77);
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s2.__r_.__value_.__l.__data_);
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
        if (!v60) {
          goto LABEL_34;
        }
      }
      else
      {
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
        if (!v7) {
          goto LABEL_34;
        }
      }
      goto LABEL_8;
    }
    if (!mlir::Token::isKeyword(v4))
    {
      __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected attribute name";
      __int16 v76 = 259;
      mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)&__s2, &v77);
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
      if ((void)v77) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
      }
      if (v87)
      {
        long long v39 = __p;
        if (__p)
        {
          uint64_t v40 = v86;
          uint64_t v41 = __p;
          if (v86 != __p)
          {
            do
              uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            uint64_t v41 = __p;
          }
          uint64_t v86 = v39;
          operator delete(v41);
        }
        uint64_t v42 = v83;
        if (v83)
        {
          uint64_t v43 = v84;
          int v44 = v83;
          if (v84 != v83)
          {
            do
            {
              uint64_t v46 = *--v43;
              uint64_t v45 = v46;
              void *v43 = 0;
              if (v46) {
                MEMORY[0x21667D390](v45, 0x1000C8077774924);
              }
            }
            while (v43 != v42);
            int v44 = v83;
          }
          uint64_t v84 = v42;
          operator delete(v44);
        }
        if (v79 != v82) {
          free(v79);
        }
      }
      return v21;
    }
    uint64_t v3 = *(void **)(v2 + 8);
  }
  uint64_t v31 = v3[8];
  uint64_t v30 = v3[9];
  LOWORD(v80) = 261;
  *(void *)&long long v77 = v31;
  *((void *)&v77 + 1) = v30;
  char v74 = 1;
  Stringuint64_t Attr = mlir::Builder::getStringAttr((mlir::StringAttr **)v2, (mlir::MLIRContext *)&v77);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
  if (!v38)
  {
LABEL_34:
    __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected valid attribute name";
    __int16 v76 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)&__s2, &v77);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if ((void)v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v87)
    {
      unint64_t v32 = __p;
      if (__p)
      {
        BOOL v33 = v86;
        unint64_t v34 = __p;
        if (v86 != __p)
        {
          do
            BOOL v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          unint64_t v34 = __p;
        }
        uint64_t v86 = v32;
        operator delete(v34);
      }
      uint64_t v25 = v83;
      if (!v83) {
        goto LABEL_52;
      }
      BOOL v35 = v84;
      uint64_t v27 = v83;
      if (v84 == v83)
      {
LABEL_51:
        uint64_t v84 = v25;
        operator delete(v27);
LABEL_52:
        if (v79 != v82) {
          free(v79);
        }
        return v21;
      }
      do
      {
        uint64_t v37 = *--v35;
        uint64_t v36 = v37;
        void *v35 = 0;
        if (v37) {
          MEMORY[0x21667D390](v36, 0x1000C8077774924);
        }
      }
      while (v35 != v25);
LABEL_50:
      uint64_t v27 = v83;
      goto LABEL_51;
    }
    return v21;
  }
LABEL_8:
  uint64_t v8 = a1[1];
  uint64_t v9 = v8 + 8;
  if (*(unsigned char *)v8)
  {
    int v10 = 4;
  }
  else
  {
    int v10 = *(_DWORD *)(v8 + 16);
    if (!v10)
    {
      uint64_t v47 = 0;
LABEL_69:
      llvm::DenseMapBase<llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>,mlir::StringAttr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::InsertIntoBucket<mlir::StringAttr const&,llvm::detail::DenseSetEmpty&>(v8, v47, &StringAttr);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v2 + 8) + 8), (uint64_t)&v77);
      uint64_t v48 = *(void *)(v2 + 8);
      *(_OWORD *)(v48 + 56) = v77;
      *(void *)(v48 + 72) = v78;
      *(void *)&long long v77 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
      *((void *)&v77 + 1) = v49;
      __s2.__r_.__value_.__s.__data_[0] = 46;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v77, (char *)&__s2, 1uLL, 0);
      if (v50 != -1 && *((void *)&v77 + 1) > v50 + 1)
      {
        if (v50 >= *((void *)&v77 + 1)) {
          size_t v52 = *((void *)&v77 + 1);
        }
        else {
          size_t v52 = v50;
        }
        mlir::MLIRContext::getOrLoadDialect(***(void ***)(v2 + 8), (void *)v77, v52);
      }
      uint64_t v53 = *(void *)(v2 + 8);
      if (*(_DWORD *)(v53 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v53 + 8), (uint64_t)&v77);
        uint64_t v54 = *(void *)(v2 + 8);
        *(_OWORD *)(v54 + 56) = v77;
        *(void *)(v54 + 72) = v78;
        uint64_t v55 = mlir::detail::Parser::parseAttribute(v2, 0);
        if (!v55) {
          return 0;
        }
        uint64_t v56 = a1[2];
        ZinMirCacheTensors::ZinMirCacheTensors(&v77, StringAttr, v55);
        uint64_t v58 = *((void *)&v77 + 1);
        uint64_t v57 = v77;
        uint64_t v59 = v56;
      }
      else
      {
        uint64_t v61 = a1[2];
        uint64_t v62 = StringAttr;
        Unituint64_t Attr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v2, v51);
        ZinMirCacheTensors::ZinMirCacheTensors(&v77, v62, UnitAttr);
        uint64_t v58 = *((void *)&v77 + 1);
        uint64_t v57 = v77;
        uint64_t v59 = v61;
      }
      mlir::NamedAttrList::push_back(v59, v57, v58);
      return 1;
    }
    uint64_t v9 = *(void *)(v8 + 8);
  }
  int v11 = v10 - 1;
  unsigned int v12 = ((StringAttr >> 4) ^ (StringAttr >> 9)) & v11;
  uint64_t v13 = (void *)(v9 + 8 * v12);
  uint64_t v14 = *v13;
  if (StringAttr != *v13)
  {
    unsigned int v65 = 0;
    int v66 = 1;
    while (v14 != -4096)
    {
      if (v65) {
        BOOL v67 = 0;
      }
      else {
        BOOL v67 = v14 == -8192;
      }
      if (v67) {
        unsigned int v65 = v13;
      }
      unsigned int v68 = v12 + v66++;
      unsigned int v12 = v68 & v11;
      uint64_t v13 = (void *)(v9 + 8 * v12);
      uint64_t v14 = *v13;
      if (StringAttr == *v13) {
        goto LABEL_13;
      }
    }
    if (v65) {
      uint64_t v47 = v65;
    }
    else {
      uint64_t v47 = v13;
    }
    goto LABEL_69;
  }
LABEL_13:
  uint64_t v71 = "duplicate key '";
  __int16 v72 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v71, &v77);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
  if ((void)v77)
  {
    __int16 v76 = 261;
    __s2.__r_.__value_.__r.__words[0] = AttrData;
    __s2.__r_.__value_.__l.__size_ = v16;
    mlir::Diagnostic::operator<<((uint64_t)&v77 + 8, (void ***)&__s2);
    if ((void)v77)
    {
      LODWORD(__s2.__r_.__value_.__l.__data_) = 3;
      __s2.__r_.__value_.__l.__size_ = (std::string::size_type)"' in dictionary attribute";
      __s2.__r_.__value_.__r.__words[2] = 25;
      p_s2 = &__s2;
      uint64_t v18 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v69 = v80 + 1;
        if (v79 <= &__s2 && (char *)v79 + 24 * v80 > (char *)&__s2)
        {
          int64_t v70 = (char *)&__s2 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v69, 24);
          uint64_t v18 = (char *)v79;
          p_s2 = (std::string *)((char *)v79 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v69, 24);
          p_s2 = &__s2;
          uint64_t v18 = (char *)v79;
        }
      }
      char v19 = &v18[24 * v80];
      long long v20 = *(_OWORD *)&p_s2->__r_.__value_.__l.__data_;
      *((void *)v19 + 2) = *((void *)&p_s2->__r_.__value_.__l + 2);
      *(_OWORD *)char v19 = v20;
      ++v80;
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
  if ((void)v77) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
  }
  if (v87)
  {
    uint64_t v22 = __p;
    if (__p)
    {
      uint64_t v23 = v86;
      uint64_t v24 = __p;
      if (v86 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v86 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v83;
    if (!v83) {
      goto LABEL_52;
    }
    long long v26 = v84;
    uint64_t v27 = v83;
    if (v84 == v83) {
      goto LABEL_51;
    }
    do
    {
      uint64_t v29 = *--v26;
      uint64_t v28 = v29;
      *long long v26 = 0;
      if (v29) {
        MEMORY[0x21667D390](v28, 0x1000C8077774924);
      }
    }
    while (v26 != v25);
    goto LABEL_50;
  }
  return v21;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>,mlir::StringAttr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::InsertIntoBucket<mlir::StringAttr const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    int v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::grow((unsigned int *)a1, v8);
  uint64_t v11 = a1 + 8;
  unsigned int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = (void *)(v11 + 8 * v14);
  uint64_t v15 = *a2;
  if (*a3 != *a2)
  {
    std::string::size_type v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        std::string::size_type v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = (void *)(v11 + 8 * (v19 & v13));
      uint64_t v15 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v16) {
      a2 = v16;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  return a2;
}

unsigned int *llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::grow(unsigned int *result, unsigned int a2)
{
  uint64_t v2 = result;
  void v60[3] = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(unsigned char *)result & 1) == 0)
  {
    unsigned int v6 = (llvm *)*((void *)result + 1);
    uint64_t v7 = result[4];
    if (a2 > 4)
    {
      uint64_t v23 = a2;
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
      *((void *)v2 + 1) = buffer;
      *((void *)v2 + 2) = v23;
      int v25 = *v2;
      unsigned int v8 = (llvm *)((char *)v6 + 8 * v7);
      *(void *)uint64_t v2 = *v2 & 1;
      if ((v25 & 1) == 0)
      {
        long long v26 = &buffer->i8[8 * v23];
        unint64_t v27 = 8 * v23 - 8;
        if (v27 < 0x18)
        {
          uint64_t v29 = (char *)buffer;
          goto LABEL_28;
        }
LABEL_22:
        uint64_t v28 = (v27 >> 3) + 1;
        uint64_t v29 = &buffer->i8[8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v30 = buffer + 1;
        int64x2_t v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30[-1] = v31;
          *uint64_t v30 = v31;
          v30 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          if (v7)
          {
            BOOL v33 = v6;
            do
            {
              uint64_t v40 = *(void *)v33;
              if ((*(void *)v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (*(unsigned char *)v2)
                {
                  int v35 = 4;
                  unint64_t v34 = v2 + 2;
                }
                else
                {
                  unint64_t v34 = (unsigned int *)*((void *)v2 + 1);
                  int v35 = v2[4];
                }
                int v36 = v35 - 1;
                unsigned int v37 = (v35 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                uint64_t v38 = &v34[2 * v37];
                uint64_t v39 = *(void *)v38;
                if (v40 != *(void *)v38)
                {
                  uint64_t v41 = 0;
                  int v42 = 1;
                  while (v39 != -4096)
                  {
                    if (v41) {
                      BOOL v43 = 0;
                    }
                    else {
                      BOOL v43 = v39 == -8192;
                    }
                    if (v43) {
                      uint64_t v41 = v38;
                    }
                    unsigned int v44 = v37 + v42++;
                    unsigned int v37 = v44 & v36;
                    uint64_t v38 = &v34[2 * (v44 & v36)];
                    uint64_t v39 = *(void *)v38;
                    if (v40 == *(void *)v38) {
                      goto LABEL_33;
                    }
                  }
                  if (v41) {
                    uint64_t v38 = v41;
                  }
                }
LABEL_33:
                *(void *)uint64_t v38 = v40;
                *v2 += 2;
              }
              BOOL v33 = (llvm *)((char *)v33 + 8);
            }
            while (v33 != v8);
          }
          llvm::deallocate_buffer(v6, (void *)(8 * v7));
        }
        do
        {
LABEL_28:
          *(void *)uint64_t v29 = -4096;
          v29 += 8;
        }
        while (v29 != v26);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v8 = (llvm *)((char *)v6 + 8 * v7);
      *(void *)__n128 result = 1;
    }
    long long v26 = (char *)(v2 + 10);
    buffer = (int64x2_t *)(v2 + 2);
    unint64_t v27 = 24;
    goto LABEL_22;
  }
  int v9 = &v59;
  if ((*((void *)result + 1) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    uint64_t v10 = *((void *)result + 2);
    if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v59 = *((void *)result + 1);
    int v9 = v60;
    uint64_t v10 = *((void *)result + 2);
    if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      uint64_t v11 = *((void *)result + 3);
      if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_11;
      }
      goto LABEL_55;
    }
  }
  *v9++ = v10;
  uint64_t v11 = *((void *)result + 3);
  if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    uint64_t v12 = *((void *)result + 4);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }
LABEL_55:
  *v9++ = v11;
  uint64_t v12 = *((void *)result + 4);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    unsigned int v13 = *result;
    if (a2 < 5) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }
LABEL_56:
  *v9++ = v12;
  unsigned int v13 = *result;
  if (a2 < 5)
  {
LABEL_13:
    *(void *)__n128 result = v13 & 1;
    if ((v13 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_58:
    std::string::size_type v16 = (uint64_t *)(v2 + 10);
    uint64_t v15 = (int64x2_t *)(v2 + 2);
    unint64_t v17 = 24;
    goto LABEL_16;
  }
LABEL_57:
  *__n128 result = v13 & 0xFFFFFFFE;
  uint64_t v45 = a2;
  __n128 result = (unsigned int *)llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
  *((void *)v2 + 1) = result;
  *((void *)v2 + 2) = v45;
  int v46 = *v2;
  *(void *)uint64_t v2 = *v2 & 1;
  if (v46) {
    goto LABEL_58;
  }
LABEL_14:
  uint64_t v14 = v2[4];
  if (!v14) {
    goto LABEL_61;
  }
  uint64_t v15 = (int64x2_t *)*((void *)v2 + 1);
  std::string::size_type v16 = &v15->i64[v14];
  unint64_t v17 = (char *)v16 - (char *)v15 - 8;
  if (v17 < 0x18)
  {
    unsigned int v19 = (uint64_t *)*((void *)v2 + 1);
    do
LABEL_60:
      *v19++ = -4096;
    while (v19 != v16);
    goto LABEL_61;
  }
LABEL_16:
  uint64_t v18 = (v17 >> 3) + 1;
  unsigned int v19 = &v15->i64[v18 & 0x3FFFFFFFFFFFFFFCLL];
  long long v20 = v15 + 1;
  int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v20[-1] = v21;
    int64x2_t *v20 = v21;
    v20 += 2;
    v22 -= 4;
  }
  while (v22);
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_60;
  }
LABEL_61:
  if (&v59 != v9)
  {
    uint64_t v47 = &v59;
    do
    {
      uint64_t v54 = *v47;
      if ((*v47 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)v2)
        {
          int v49 = 4;
          uint64_t v48 = v2 + 2;
        }
        else
        {
          uint64_t v48 = (unsigned int *)*((void *)v2 + 1);
          int v49 = v2[4];
        }
        int v50 = v49 - 1;
        unsigned int v51 = (v49 - 1) & ((v54 >> 4) ^ (v54 >> 9));
        size_t v52 = &v48[2 * v51];
        uint64_t v53 = *(void *)v52;
        if (v54 != *(void *)v52)
        {
          uint64_t v55 = 0;
          int v56 = 1;
          while (v53 != -4096)
          {
            if (v55) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v53 == -8192;
            }
            if (v57) {
              uint64_t v55 = v52;
            }
            unsigned int v58 = v51 + v56++;
            unsigned int v51 = v58 & v50;
            size_t v52 = &v48[2 * (v58 & v50)];
            uint64_t v53 = *(void *)v52;
            if (v54 == *(void *)v52) {
              goto LABEL_65;
            }
          }
          if (v55) {
            size_t v52 = v55;
          }
        }
LABEL_65:
        *(void *)size_t v52 = v54;
        *v2 += 2;
      }
      ++v47;
    }
    while (v47 != v9);
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_0>(uint64_t *a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 != 24)
  {
    int v6 = *(_DWORD *)(v3 + 56);
    LOBYTE(v43) = 0;
    unsigned __int8 v45 = 0;
    if (v4 != 10) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v11 = *(void *)(v3 + 64);
    unint64_t v12 = *(void *)(v3 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__x);
    uint64_t v13 = *(void *)(v2 + 8);
    *(_OWORD *)(v13 + 56) = *(_OWORD *)__x;
    *(void *)(v13 + 72) = v47;
    buildAttributeAPInt((uint64_t)__x, *(void *)v1, v4 == 24, v11, v12);
    int v14 = v47;
    if (v45 == v47)
    {
      if (v45)
      {
        if (v44 >= 0x41 && v43) {
          MEMORY[0x21667D390](v43, 0x1000C8000313F17);
        }
        int v15 = 0;
        BOOL v43 = *(llvm **)__x;
        unsigned int v44 = *(_DWORD *)&__x[8];
        *(_DWORD *)&__x[8] = 0;
      }
      else
      {
        int v15 = 1;
      }
    }
    else if (v45)
    {
      if (v44 >= 0x41 && v43) {
        MEMORY[0x21667D390](v43, 0x1000C8000313F17);
      }
      unsigned __int8 v45 = 0;
      int v15 = 1;
    }
    else
    {
      int v15 = 0;
      unsigned int v44 = *(_DWORD *)&__x[8];
      BOOL v43 = *(llvm **)__x;
      *(_DWORD *)&__x[8] = 0;
      unsigned __int8 v45 = 1;
    }
    if (v14 && *(_DWORD *)&__x[8] >= 0x41u && *(void *)__x) {
      MEMORY[0x21667D390](*(void *)__x, 0x1000C8000313F17);
    }
    if (!v15)
    {
      unsigned int v9 = v44;
      if (!v44)
      {
LABEL_74:
        ++*(void *)(v1 + 32);
        uint64_t v16 = 1;
        goto LABEL_75;
      }
LABEL_73:
      std::vector<char>::size_type v37 = v9 >> 3;
      v38.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)(v1 + 16);
      uint64_t v39 = &v38.__i_[-*(void *)(v1 + 8)];
      __x[0] = 0;
      std::vector<char>::insert((std::vector<char> *)(v1 + 8), v38, v37, __x);
      llvm::StoreIntToMemory(&v43, (const llvm::APInt *)&v39[*(void *)(v1 + 8)], v37);
      goto LABEL_74;
    }
    v41[0] = "integer constant out of range";
    __int16 v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(void *)__x) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    }
    if (v54)
    {
      int64x2_t v31 = __p;
      if (__p)
      {
        uint64_t v32 = v53;
        BOOL v33 = __p;
        if (v53 != __p)
        {
          do
            uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          BOOL v33 = __p;
        }
        uint64_t v53 = v31;
        operator delete(v33);
      }
      long long v20 = v50;
      if (!v50) {
        goto LABEL_70;
      }
      unint64_t v34 = v51;
      uint64_t v22 = v50;
      if (v51 == v50) {
        goto LABEL_69;
      }
      do
      {
        uint64_t v36 = *--v34;
        uint64_t v35 = v36;
        *unint64_t v34 = 0;
        if (v36) {
          MEMORY[0x21667D390](v35, 0x1000C8077774924);
        }
      }
      while (v34 != v20);
      goto LABEL_68;
    }
    goto LABEL_75;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__x);
  uint64_t v5 = *(void *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)__x;
  *(void *)(v5 + 72) = v47;
  uint64_t v3 = *(void *)(v2 + 8);
  int v6 = *(_DWORD *)(v3 + 56);
  LOBYTE(v43) = 0;
  unsigned __int8 v45 = 0;
  if (v6 == 10) {
    goto LABEL_8;
  }
LABEL_3:
  if (v6 == 74 || v6 == 54)
  {
    if (mlir::Type::isInteger((mlir::Type *)v1, 1))
    {
      int v7 = *(_DWORD *)(*(void *)(v2 + 8) + 56);
      mlir::Type::isUnsignedInteger((mlir::Type *)v1);
      BOOL v8 = v7 == 74;
      unsigned int v9 = 8;
      unsigned int v44 = 8;
      BOOL v43 = (llvm *)v8;
      unsigned __int8 v45 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v2 + 8) + 8), (uint64_t)__x);
      uint64_t v10 = *(void *)(v2 + 8);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)__x;
      *(void *)(v10 + 72) = v47;
      goto LABEL_73;
    }
    v41[0] = "expected i1 type for 'true' or 'false' values";
    __int16 v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(void *)__x) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    }
    if (v54)
    {
      unint64_t v17 = __p;
      if (__p)
      {
        uint64_t v18 = v53;
        unsigned int v19 = __p;
        if (v53 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unsigned int v19 = __p;
        }
        uint64_t v53 = v17;
        operator delete(v19);
      }
      long long v20 = v50;
      if (!v50) {
        goto LABEL_70;
      }
      int64x2_t v21 = v51;
      uint64_t v22 = v50;
      if (v51 == v50)
      {
LABEL_69:
        unsigned int v51 = v20;
        operator delete(v22);
LABEL_70:
        if (v48 != &v49) {
          free(v48);
        }
        goto LABEL_75;
      }
      do
      {
        uint64_t v24 = *--v21;
        uint64_t v23 = v24;
        *int64x2_t v21 = 0;
        if (v24) {
          MEMORY[0x21667D390](v23, 0x1000C8077774924);
        }
      }
      while (v21 != v20);
LABEL_68:
      uint64_t v22 = v50;
      goto LABEL_69;
    }
  }
  else
  {
    v41[0] = "expected integer literal";
    __int16 v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(void *)__x) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    }
    if (v54)
    {
      int v25 = __p;
      if (__p)
      {
        long long v26 = v53;
        unint64_t v27 = __p;
        if (v53 != __p)
        {
          do
            long long v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          unint64_t v27 = __p;
        }
        uint64_t v53 = v25;
        operator delete(v27);
      }
      long long v20 = v50;
      if (!v50) {
        goto LABEL_70;
      }
      uint64_t v28 = v51;
      uint64_t v22 = v50;
      if (v51 == v50) {
        goto LABEL_69;
      }
      do
      {
        uint64_t v30 = *--v28;
        uint64_t v29 = v30;
        void *v28 = 0;
        if (v30) {
          MEMORY[0x21667D390](v29, 0x1000C8077774924);
        }
      }
      while (v28 != v20);
      goto LABEL_68;
    }
  }
LABEL_75:
  if (v45 && v44 >= 0x41 && v43) {
    MEMORY[0x21667D390](v43, 0x1000C8000313F17);
  }
  return v16;
}

std::vector<char>::iterator std::vector<char>::insert(std::vector<char> *this, std::vector<char>::const_iterator __position, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  if (!__n) {
    return (std::vector<char>::iterator)__position.__i_;
  }
  uint64_t v5 = (char *)__x;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    std::vector<char>::size_type v19 = end - __position.__i_;
    long long v20 = this->__end_;
    std::vector<char>::size_type v21 = __n;
    std::vector<char>::size_type v22 = __n - (end - __position.__i_);
    if (__n <= end - __position.__i_) {
      goto LABEL_58;
    }
    long long v20 = (char *)&__position.__i_[__n];
    std::vector<char>::pointer v23 = this->__end_;
    if (v22 >= 8)
    {
      if (end >= __x + 1 || (std::vector<char>::pointer v23 = this->__end_, v20 <= __x))
      {
        if (v22 < 0x20)
        {
          unint64_t v24 = 0;
          goto LABEL_35;
        }
        unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFE0;
        int8x16_t v32 = vld1q_dup_s8(__x);
        BOOL v33 = (int8x16_t *)(end + 16);
        unint64_t v34 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33[-1] = v32;
          int8x16_t *v33 = v32;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
        if (v22 == v24) {
          goto LABEL_56;
        }
        if ((v22 & 0x18) != 0)
        {
LABEL_35:
          std::vector<char>::pointer v23 = (std::vector<char>::pointer)&end[v22 & 0xFFFFFFFFFFFFFFF8];
          int8x8_t v35 = vld1_dup_s8(__x);
          uint64_t v36 = (int8x8_t *)&end[v24];
          unint64_t v37 = v24 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v36++ = v35;
            v37 += 8;
          }
          while (v37);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        std::vector<char>::pointer v23 = (std::vector<char>::pointer)&end[v24];
      }
    }
    do
LABEL_55:
      *v23++ = *__x;
    while (v23 != v20);
LABEL_56:
    this->__end_ = v20;
    if (!v19) {
      return (std::vector<char>::iterator)__position.__i_;
    }
    std::vector<char>::size_type v21 = end - __position.__i_;
LABEL_58:
    unsigned int v51 = &__position.__i_[__n];
    size_t v52 = &v20[-__n];
    uint64_t v53 = v20;
    if (&v20[-__n] >= end) {
      goto LABEL_69;
    }
    if (__n <= v19) {
      std::vector<char>::size_type v54 = end - __position.__i_;
    }
    else {
      std::vector<char>::size_type v54 = __n;
    }
    std::vector<char>::size_type v55 = &end[__n] - &__position.__i_[v54];
    if (v55 >= 0x20)
    {
      unint64_t v56 = (unint64_t)&v20[__n - (unint64_t)&__position.__i_[v54]];
      uint64_t v53 = v20;
      if (v56 >= 0x20)
      {
        v52 += v55 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v53 = &v20[v55 & 0xFFFFFFFFFFFFFFE0];
        BOOL v57 = (char *)&__position.__i_[v54 + 16];
        unsigned int v58 = &v57[-v56];
        unint64_t v59 = v55 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v60 = *(_OWORD *)v58;
          *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
          *(_OWORD *)BOOL v57 = v60;
          v57 += 32;
          v58 += 32;
          v59 -= 32;
        }
        while (v59);
        if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_69:
          this->__end_ = v53;
          if (v20 != v51) {
            memmove((void *)&__position.__i_[__n], __position.__i_, v20 - v51);
          }
          if (__position.__i_ <= v5)
          {
            if (this->__end_ <= v5) {
              std::vector<char>::size_type v62 = 0;
            }
            else {
              std::vector<char>::size_type v62 = __n;
            }
            v5 += v62;
          }
          if (v21 < 8 || __position.__i_ < v5 + 1 && v5 < &__position.__i_[v21])
          {
            i = (char *)__position.__i_;
            std::vector<char>::size_type v64 = v21;
            goto LABEL_80;
          }
          if (v21 >= 0x20)
          {
            unint64_t v66 = v21 & 0xFFFFFFFFFFFFFFE0;
            int8x16_t v67 = vld1q_dup_s8(v5);
            unsigned int v68 = (char *)(__position.__i_ + 16);
            unint64_t v69 = v21 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *((int8x16_t *)v68 - 1) = v67;
              *(int8x16_t *)unsigned int v68 = v67;
              v68 += 32;
              v69 -= 32;
            }
            while (v69);
            if (v21 == v66) {
              return (std::vector<char>::iterator)__position.__i_;
            }
            if ((v21 & 0x18) == 0)
            {
              std::vector<char>::size_type v64 = v21 & 0x1F;
              i = (char *)&__position.__i_[v66];
              do
              {
LABEL_80:
                *i++ = *v5;
                --v64;
              }
              while (v64);
              return (std::vector<char>::iterator)__position.__i_;
            }
          }
          else
          {
            unint64_t v66 = 0;
          }
          i = (char *)&__position.__i_[v21 & 0xFFFFFFFFFFFFFFF8];
          std::vector<char>::size_type v64 = v21 & 7;
          int8x8_t v70 = vld1_dup_s8(v5);
          uint64_t v71 = (char *)&__position.__i_[v66];
          unint64_t v72 = v66 - (v21 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(int8x8_t *)uint64_t v71 = v70;
            v71 += 8;
            v72 += 8;
          }
          while (v72);
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8)) {
            return (std::vector<char>::iterator)__position.__i_;
          }
          goto LABEL_80;
        }
      }
    }
    else
    {
      uint64_t v53 = v20;
    }
    do
    {
      char v61 = *v52++;
      *v53++ = v61;
    }
    while (v52 != end);
    goto LABEL_69;
  }
  begin = this->__begin_;
  int64_t v11 = end - this->__begin_ + __n;
  if (v11 < 0) {
    abort();
  }
  unint64_t v12 = (const char *)(__position.__i_ - begin);
  unint64_t v13 = value - begin;
  if (2 * v13 > v11) {
    int64_t v11 = 2 * v13;
  }
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v14 = v11;
  }
  if (v14)
  {
    int v15 = operator new(v14);
    uint64_t v16 = &v12[(void)v15];
    unint64_t v17 = (char *)&v12[(void)v15 + __n];
    uint64_t v18 = (char *)&v12[(void)v15];
    if (__n < 8) {
      goto LABEL_40;
    }
  }
  else
  {
    int v15 = 0;
    uint64_t v16 = (const char *)(__position.__i_ - begin);
    unint64_t v17 = (char *)&v12[__n];
    uint64_t v18 = (char *)(__position.__i_ - begin);
    if (__n < 8) {
      goto LABEL_40;
    }
  }
  if (v16 < v5 + 1)
  {
    uint64_t v18 = (char *)v16;
    if (v17 > v5) {
      goto LABEL_40;
    }
  }
  if (__n < 0x20)
  {
    std::vector<char>::size_type v25 = 0;
    goto LABEL_27;
  }
  std::vector<char>::size_type v25 = __n & 0xFFFFFFFFFFFFFFE0;
  int8x16_t v26 = vld1q_dup_s8(v5);
  unint64_t v27 = (int8x16_t *)((char *)v15 + (void)v12 + 16);
  std::vector<char>::size_type v28 = __n & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v27[-1] = v26;
    *unint64_t v27 = v26;
    v27 += 2;
    v28 -= 32;
  }
  while (v28);
  if (v25 != __n)
  {
    if ((__n & 0x18) == 0)
    {
      uint64_t v18 = (char *)&v16[v25];
      goto LABEL_40;
    }
LABEL_27:
    uint64_t v18 = (char *)&v16[__n & 0xFFFFFFFFFFFFFFF8];
    int8x8_t v29 = vld1_dup_s8(v5);
    uint64_t v30 = (char *)v15 + &__position.__i_[v25] - begin;
    std::vector<char>::size_type v31 = v25 - (__n & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *(int8x8_t *)uint64_t v30 = v29;
      v30 += 8;
      v31 += 8;
    }
    while (v31);
    if ((__n & 0xFFFFFFFFFFFFFFF8) == __n) {
      goto LABEL_41;
    }
    do
LABEL_40:
      *v18++ = *v5;
    while (v18 != v17);
  }
LABEL_41:
  std::vector<char>::const_iterator v38 = this->__begin_;
  if (this->__begin_ != __position.__i_)
  {
    int64_t v39 = __position.__i_ - v38;
    std::__wrap_iter<const char *>::iterator_type v40 = __position.__i_;
    uint64_t v41 = (char *)v16;
    if ((std::__wrap_iter<const char *>::iterator_type)(__position.__i_ - v38) < (std::__wrap_iter<const char *>::iterator_type)0x20) {
      goto LABEL_98;
    }
    std::__wrap_iter<const char *>::iterator_type v40 = __position.__i_;
    uint64_t v41 = (char *)v16;
    if ((unint64_t)(begin - (unsigned char *)v15) < 0x20) {
      goto LABEL_98;
    }
    std::__wrap_iter<const char *>::iterator_type v40 = &__position.__i_[-(v39 & 0xFFFFFFFFFFFFFFE0)];
    uint64_t v41 = (char *)&v16[-(v39 & 0xFFFFFFFFFFFFFFE0)];
    std::__wrap_iter<const char *>::iterator_type v42 = __position.__i_ - 16;
    BOOL v43 = (char *)v15 + __position.__i_ - 16 - begin;
    unint64_t v44 = v39 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v45 = *(_OWORD *)v42;
      *((_OWORD *)v43 - 1) = *((_OWORD *)v42 - 1);
      *(_OWORD *)BOOL v43 = v45;
      v43 -= 32;
      v42 -= 32;
      v44 -= 32;
    }
    while (v44);
    if (v39 != (v39 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_98:
      do
      {
        char v46 = *--v40;
        *--uint64_t v41 = v46;
      }
      while (v40 != v38);
    }
    uint64_t v47 = this->__end_;
    uint64_t v48 = (char *)v15 + v14;
    size_t v49 = v47 - __position.__i_;
    if (v47 == __position.__i_) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  uint64_t v41 = (char *)v16;
  uint64_t v48 = (char *)v15 + v14;
  size_t v49 = end - __position.__i_;
  if (end != __position.__i_) {
LABEL_49:
  }
    memmove(v17, __position.__i_, v49);
LABEL_50:
  std::vector<char>::pointer v50 = this->__begin_;
  this->__begin_ = v41;
  this->__end_ = &v17[v49];
  this->__end_cap_.__value_ = v48;
  if (v50) {
    operator delete(v50);
  }
  return (std::vector<char>::iterator)v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_1>(uint64_t **a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)a1[1];
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v43);
    uint64_t v5 = *(void *)(v2 + 8);
    *(_OWORD *)(v5 + 56) = v43;
    *(void *)(v5 + 72) = v44;
    uint64_t v3 = *(void *)(v2 + 8);
  }
  long long v41 = *(_OWORD *)(v3 + 56);
  uint64_t v42 = *(void *)(v3 + 72);
  v52[0] = 0;
  char v54 = 0;
  uint64_t v40 = *v1;
  if (v41 == 9)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v43);
    uint64_t v11 = *(void *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = v43;
    *(void *)(v11 + 72) = v44;
    double v9 = COERCE_DOUBLE(mlir::Token::getFloatingPointValue((mlir::Token *)&v41));
    if (!v12) {
      goto LABEL_33;
    }
    double v13 = v9;
    if (v4 == 24) {
      double v13 = -v9;
    }
    size_t v14 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v38, v13);
    int v15 = llvm::APFloatBase::IEEEdouble(v14);
    llvm::APFloat::Storage::Storage((char *)&v43 + 8, v38, v15);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v38);
    if (v54)
    {
      unint64_t v17 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)v53, (llvm::APFloatBase *)((char *)&v43 + 8));
      uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(v17);
      if (v10 != *((void **)&v43 + 1)) {
        goto LABEL_12;
      }
LABEL_50:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v43 + 8));
      if (mlir::Type::isF64((mlir::Type *)v1))
      {
LABEL_14:
        if (v10 == (void *)v53[0])
        {
          double v9 = COERCE_DOUBLE(llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v53, (uint64_t)&v43));
          unint64_t v19 = DWORD2(v43);
          if (DWORD2(v43)) {
            goto LABEL_16;
          }
        }
        else
        {
          double v9 = COERCE_DOUBLE(llvm::detail::IEEEFloat::bitcastToAPInt(v53, (uint64_t)&v43));
          unint64_t v19 = DWORD2(v43);
          if (DWORD2(v43))
          {
LABEL_16:
            std::vector<char>::size_type v20 = v19 >> 3;
            uint64_t v22 = v1[1];
            v21.__i_ = (std::__wrap_iter<const char *>::iterator_type)v1[2];
            std::vector<char>::pointer v23 = (std::vector<char> *)(v1 + 1);
            unint64_t v24 = &v21.__i_[-v22];
            v38[0] = 0;
            std::vector<char>::insert(v23, v21, v20, v38);
            double v9 = COERCE_DOUBLE(llvm::StoreIntToMemory((llvm **)&v43, (const llvm::APInt *)&v23->__begin_[(unint64_t)v24], v20));
            unsigned int v25 = DWORD2(v43);
            ++v23[1].__begin_;
            if (v25 >= 0x41)
            {
              double v9 = *(double *)&v43;
              if ((void)v43) {
                double v9 = COERCE_DOUBLE(MEMORY[0x21667D390](v43, 0x1000C8000313F17));
              }
            }
            goto LABEL_36;
          }
        }
        ++v1[4];
LABEL_36:
        uint64_t v26 = 1;
        goto LABEL_41;
      }
LABEL_13:
      LOBYTE(v43) = 0;
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v40);
      llvm::APFloat::convert((uint64_t)v52, FloatSemantics, 1, &v43);
      goto LABEL_14;
    }
    unint64_t v37 = (void *)*((void *)&v43 + 1);
    uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(v16);
    if (v10 == v37)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v53, (void *)&v43 + 1);
      char v54 = 1;
      if (v10 == *((void **)&v43 + 1)) {
        goto LABEL_50;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v53, (uint64_t)&v43 + 8);
      char v54 = 1;
      if (v10 == *((void **)&v43 + 1)) {
        goto LABEL_50;
      }
    }
LABEL_12:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v43 + 8));
    if (mlir::Type::isF64((mlir::Type *)v1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v41 == 10)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v43);
    uint64_t v6 = *(void *)(v2 + 8);
    *(_OWORD *)(v6 + 56) = v43;
    *(void *)(v6 + 72) = v44;
    int v7 = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v40);
    unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)&v40);
    double v9 = COERCE_DOUBLE(mlir::detail::Parser::parseFloatFromIntegerLiteral(v2, (uint64_t)v52, (MirInfoChannelAssignment *)&v41, v4 == 24, v7, Width));
    if (LOBYTE(v9))
    {
      uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(*(llvm::APFloatBase **)&v9);
      goto LABEL_14;
    }
LABEL_33:
    uint64_t v26 = 0;
    goto LABEL_41;
  }
  *(void *)std::vector<char>::const_iterator v38 = "expected integer or floating point literal";
  __int16 v39 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v38, &v43);
  double v9 = COERCE_DOUBLE(mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43));
  uint64_t v26 = *(void *)&v9;
  if ((void)v43) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  }
  if (v51)
  {
    unint64_t v27 = __p;
    if (__p)
    {
      std::vector<char>::size_type v28 = v50;
      int8x8_t v29 = __p;
      if (v50 != __p)
      {
        do
          std::vector<char>::size_type v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        int8x8_t v29 = __p;
      }
      std::vector<char>::pointer v50 = v27;
      operator delete(v29);
    }
    uint64_t v30 = v47;
    if (v47)
    {
      std::vector<char>::size_type v31 = v48;
      int8x16_t v32 = v47;
      if (v48 != v47)
      {
        do
        {
          uint64_t v34 = *--v31;
          uint64_t v33 = v34;
          *std::vector<char>::size_type v31 = 0;
          if (v34) {
            MEMORY[0x21667D390](v33, 0x1000C8077774924);
          }
        }
        while (v31 != v30);
        int8x16_t v32 = v47;
      }
      uint64_t v48 = v30;
      operator delete(v32);
    }
    double v9 = *(double *)&v45;
    if (v45 != &v46) {
      free(v45);
    }
  }
LABEL_41:
  if (v54)
  {
    int8x8_t v35 = (void *)v53[0];
    if (llvm::APFloatBase::PPCDoubleDouble(*(llvm::APFloatBase **)&v9) == v35) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v53);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v53);
    }
  }
  return v26;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr &&)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void *llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      double v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        void *v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &result[2 * v11];
        do
        {
          *uint64_t v10 = -1;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      uint64_t v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if (*(void *)v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v25 = v24 & (37 * v23);
          uint64_t v22 = (void *)(*(void *)a1 + 16 * v25);
          uint64_t v26 = *v22;
          if (v23 != *v22)
          {
            unint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -1)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -2;
              }
              if (v29) {
                unint64_t v27 = v22;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v24;
              uint64_t v22 = (void *)(*(void *)a1 + 16 * (v30 & v24));
              uint64_t v26 = *v22;
              if (v23 == *v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          *uint64_t v22 = v23;
          v22[1] = *((void *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -1;
      *unint64_t v19 = -1;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      std::vector<char>::const_iterator v21 = &result[2 * v17];
      do
      {
        *uint64_t v10 = -1;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t mlir::detail::Parser::parseDialectSymbolBody(mlir::detail::Parser *this, llvm::StringRef *a2, BOOL *a3)
{
  uint64_t v6 = 0;
  v49[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)this + 1);
  unsigned int v8 = *(char **)(v7 + 64);
  uint64_t v47 = v49;
  long long v48 = xmmword_211F0AC10;
  double v9 = *(char **)(v7 + 48);
  v37[0] = this;
  v37[1] = &v47;
  while (2)
  {
    if (v8 == v9)
    {
      uint64_t EndLoc = (uint64_t)v9;
LABEL_24:
      *a3 = 1;
      *(void *)&long long v48 = 0;
LABEL_25:
      uint64_t v17 = *((void *)this + 1);
      *(void *)(v17 + 40) = EndLoc;
      mlir::Lexer::lexToken((mlir::Lexer *)(v17 + 8), (uint64_t)&v38);
      uint64_t v18 = *((void *)this + 1);
      *(_OWORD *)(v18 + 56) = v38;
      *(void *)(v18 + 72) = v39;
      *((void *)a2 + 1) = (EndLoc - *(_DWORD *)a2);
      uint64_t v19 = 1;
      goto LABEL_26;
    }
    uint64_t EndLoc = (uint64_t)(v8 + 1);
    char v13 = *v8;
    switch(*v8)
    {
      case '""':
        uint64_t v14 = *((void *)this + 1);
        *(void *)(v14 + 40) = v8;
        mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v38);
        uint64_t v15 = *((void *)this + 1);
        *(_OWORD *)(v15 + 56) = v38;
        *(void *)(v15 + 72) = v39;
        uint64_t EndLoc = mlir::Token::getEndLoc((mlir::Token *)(*((void *)this + 1) + 56));
        int v16 = *(_DWORD *)(*((void *)this + 1) + 56);
        if (v16 == 11) {
          goto LABEL_4;
        }
        if (v16 == 2) {
          goto LABEL_24;
        }
LABEL_30:
        uint64_t v19 = 0;
        goto LABEL_26;
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '*':
      case '+':
      case ',':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '\\':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case '|':
        goto LABEL_4;
      case '(':
      case '<':
      case '[':
      case '{':
        if ((unint64_t)(v6 + 1) > *((void *)&v48 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, v49, v6 + 1, 1);
          uint64_t v6 = v48;
        }
        v47[v6] = v13;
        unsigned int v8 = (char *)EndLoc;
        uint64_t v6 = v48 + 1;
        *(void *)&long long v48 = v6;
        if (!v6) {
          goto LABEL_25;
        }
        continue;
      case ')':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x28u))goto LABEL_30; {
        goto LABEL_4;
        }
      case '-':
        int v10 = v8[1];
        uint64_t v11 = v8 + 2;
        if (v10 == 62) {
          uint64_t EndLoc = (uint64_t)v11;
        }
        goto LABEL_4;
      case '>':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x3Cu))goto LABEL_30; {
        goto LABEL_4;
        }
      case ']':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x5Bu))goto LABEL_30; {
        goto LABEL_4;
        }
      case '}':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x7Bu))goto LABEL_30; {
        goto LABEL_4;
        }
      default:
        if (*v8)
        {
LABEL_4:
          uint64_t v6 = v48;
          unsigned int v8 = (char *)EndLoc;
          if (!(void)v48) {
            goto LABEL_25;
          }
          continue;
        }
        if (v6)
        {
          mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)&v38, (uint64_t)v37);
          uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v38);
          if ((void)v38) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
          }
          if (v46)
          {
            std::vector<char>::const_iterator v21 = __p;
            if (__p)
            {
              uint64_t v22 = v45;
              uint64_t v23 = __p;
              if (v45 != __p)
              {
                do
                  uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
                while (v22 != v21);
                uint64_t v23 = __p;
              }
              long long v45 = v21;
              operator delete(v23);
            }
            int v24 = v42;
            if (v42)
            {
              unsigned int v25 = v43;
              uint64_t v26 = v42;
              if (v43 == v42) {
                goto LABEL_61;
              }
              do
              {
                uint64_t v28 = *--v25;
                uint64_t v27 = v28;
                *unsigned int v25 = 0;
                if (v28) {
                  MEMORY[0x21667D390](v27, 0x1000C8077774924);
                }
              }
              while (v25 != v24);
LABEL_60:
              uint64_t v26 = v42;
              goto LABEL_61;
            }
            goto LABEL_62;
          }
        }
        else
        {
          int8x8_t v35 = "unexpected nul or EOF in pretty dialect name";
          __int16 v36 = 259;
          mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v35, &v38);
          uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v38);
          if ((void)v38) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
          }
          if (v46)
          {
            BOOL v29 = __p;
            if (__p)
            {
              unsigned int v30 = v45;
              std::vector<char>::size_type v31 = __p;
              if (v45 != __p)
              {
                do
                  unsigned int v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
                while (v30 != v29);
                std::vector<char>::size_type v31 = __p;
              }
              long long v45 = v29;
              operator delete(v31);
            }
            int v24 = v42;
            if (v42)
            {
              int8x16_t v32 = v43;
              uint64_t v26 = v42;
              if (v43 != v42)
              {
                do
                {
                  uint64_t v34 = *--v32;
                  uint64_t v33 = v34;
                  void *v32 = 0;
                  if (v34) {
                    MEMORY[0x21667D390](v33, 0x1000C8077774924);
                  }
                }
                while (v32 != v24);
                goto LABEL_60;
              }
LABEL_61:
              long long v43 = v24;
              operator delete(v26);
            }
LABEL_62:
            if (v40 != &v41) {
              free(v40);
            }
          }
        }
LABEL_26:
        if (v47 != (unsigned char *)v49) {
          free(v47);
        }
        return v19;
    }
  }
}

void mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a2;
  __int16 v39 = 257;
  mlir::detail::Parser::emitError(v4, (uint64_t)v38, &v43);
  uint64_t v5 = v43;
  if (v43)
  {
    int v40 = 3;
    uint64_t v41 = "unbalanced '";
    uint64_t v42 = 12;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)__src;
    if (v47 >= v48)
    {
      unint64_t v34 = v47 + 1;
      if (__src <= &v40 && (char *)__src + 24 * v47 > (char *)&v40)
      {
        int64_t v36 = (char *)&v40 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v34, 24);
        uint64_t v7 = (char *)__src;
        uint64_t v6 = (int *)((char *)__src + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v34, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)__src;
      }
    }
    unsigned int v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)unsigned int v8 = v9;
    ++v47;
    uint64_t v5 = v43;
    if (v43)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v44, *(unsigned char *)(**(void **)(a2 + 8) + *(void *)(*(void *)(a2 + 8) + 8) - 1));
      uint64_t v5 = v43;
      if (v43)
      {
        int v40 = 3;
        uint64_t v41 = "' character in pretty dialect name";
        uint64_t v42 = 34;
        int v10 = &v40;
        uint64_t v11 = (char *)__src;
        if (v47 >= v48)
        {
          unint64_t v35 = v47 + 1;
          if (__src <= &v40 && (char *)__src + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v35, 24);
            uint64_t v11 = (char *)__src;
            int v10 = (int *)((char *)__src + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v35, 24);
            int v10 = &v40;
            uint64_t v11 = (char *)__src;
          }
        }
        uint64_t v12 = &v11[24 * v47];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v47;
        uint64_t v5 = v43;
      }
    }
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v54)
  {
    *(void *)(a1 + 8) = v44;
    unint64_t v14 = v47;
    *(_DWORD *)(a1 + 16) = v45;
    *(void *)(a1 + 24) = a1 + 40;
    *(void *)(a1 + 32) = *(void *)"";
    if (!v14 || &v43 == (uint64_t *)a1)
    {
      int v16 = 1;
      goto LABEL_20;
    }
    if (__src != v49)
    {
      *(void *)(a1 + 24) = __src;
      unsigned int v15 = v48;
      *(_DWORD *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 36) = v15;
      __src = v49;
      unsigned int v48 = 0;
      int v16 = 1;
LABEL_19:
      unsigned int v47 = 0;
LABEL_20:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v50;
      *(void *)(a1 + 152) = v51;
      v50[0] = 0;
      v50[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v53;
      uint64_t v51 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v53 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v16)
      {
        uint64_t v18 = __p[0];
        if (__p[0])
        {
          uint64_t v19 = __p[1];
          uint64_t v20 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = __p[0];
          }
          __p[1] = v18;
          operator delete(v20);
        }
        std::vector<char>::const_iterator v21 = v50[0];
        if (v50[0])
        {
          uint64_t v22 = v50[1];
          uint64_t v23 = v50[0];
          if (v50[1] != v50[0])
          {
            do
            {
              uint64_t v25 = *--v22;
              uint64_t v24 = v25;
              *uint64_t v22 = 0;
              if (v25) {
                MEMORY[0x21667D390](v24, 0x1000C8077774924);
              }
            }
            while (v22 != v21);
            uint64_t v23 = v50[0];
          }
          v50[1] = v21;
          operator delete(v23);
        }
        if (__src != v49) {
          free(__src);
        }
        unsigned __int8 v54 = 0;
      }
      goto LABEL_37;
    }
    if (v14 < 5)
    {
      unint64_t v17 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v14, 24);
      unint64_t v17 = v47;
      if (!v47) {
        goto LABEL_18;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v17);
LABEL_18:
    *(_DWORD *)(a1 + 32) = v14;
    int v16 = v54;
    goto LABEL_19;
  }
LABEL_37:
  mlir::InFlightDiagnostic::abandon(&v43);
  if (v43) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  }
  if (v54)
  {
    uint64_t v26 = __p[0];
    if (__p[0])
    {
      uint64_t v27 = __p[1];
      uint64_t v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    BOOL v29 = v50[0];
    if (v50[0])
    {
      unsigned int v30 = v50[1];
      std::vector<char>::size_type v31 = v50[0];
      if (v50[1] != v50[0])
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          *unsigned int v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        std::vector<char>::size_type v31 = v50[0];
      }
      v50[1] = v29;
      operator delete(v31);
    }
    if (__src != v49) {
      free(__src);
    }
  }
}

uint64_t mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(void *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[1];
  if (*(char *)(*a1 + v3 - 1) == a3)
  {
    a1[1] = v3 - 1;
    return 1;
  }
  else
  {
    mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)v14, a2);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        uint64_t v6 = v20;
        uint64_t v7 = __p;
        if (v20 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v20 = v5;
        operator delete(v7);
      }
      unsigned int v8 = v17;
      if (v17)
      {
        long long v9 = v18;
        int v10 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            *long long v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          int v10 = v17;
        }
        uint64_t v18 = v8;
        operator delete(v10);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v4;
}

void *mlir::detail::Parser::parseExtendedAttr(mlir::detail::Parser *a1, uint64_t a2)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = **(mlir::StringAttr ***)v4;
  uint64_t v6 = *(uint64_t **)(v4 + 128);
  uint64_t v7 = *(void *)(v4 + 80);
  int v10 = *(_DWORD *)(v4 + 56);
  unsigned int v8 = (mlir::Token *)(v4 + 56);
  int v9 = v10;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v12 = *((void *)v8 + 2);
  uint64_t v13 = v12 != 0;
  if (v12) {
    ++v11;
  }
  *(void *)&long long v98 = v11;
  *((void *)&v98 + 1) = v12 - v13;
  if (v9 == 2 && v12 == v13)
  {
    int v40 = (void *)mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)a1);
    if (!v40) {
      goto LABEL_62;
    }
    goto LABEL_72;
  }
  uint64_t LocRange = mlir::Token::getLocRange(v8);
  uint64_t v17 = v16;
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&__s2);
  uint64_t v19 = *((void *)a1 + 1);
  *(_OWORD *)(v19 + 56) = __s2;
  *(void *)(v19 + 72) = v100;
  LOBYTE(__s2) = 46;
  unint64_t v20 = llvm::StringRef::find((uint64_t *)&v98, (char *)&__s2, 1uLL, 0);
  if (v20 == -1)
  {
    uint64_t v25 = 0;
    uint64_t v96 = 0;
    unint64_t v97 = 0;
    long long v95 = v98;
    char v21 = (const unsigned __int8 *)*((void *)&v98 + 1);
    uint64_t v22 = (int8x16_t *)v98;
  }
  else
  {
    char v21 = (const unsigned __int8 *)*((void *)&v98 + 1);
    uint64_t v22 = (int8x16_t *)v98;
    if (v20 >= *((void *)&v98 + 1)) {
      unint64_t v23 = *((void *)&v98 + 1);
    }
    else {
      unint64_t v23 = v20;
    }
    if (*((void *)&v98 + 1) >= v20 + 1) {
      unint64_t v24 = v20 + 1;
    }
    else {
      unint64_t v24 = *((void *)&v98 + 1);
    }
    uint64_t v25 = v98 + v24;
    *(void *)&long long v95 = v98;
    *((void *)&v95 + 1) = v23;
    unint64_t v26 = *((void *)&v98 + 1) - v24;
    uint64_t v96 = v98 + v24;
    unint64_t v97 = *((void *)&v98 + 1) - v24;
    if (*((void *)&v98 + 1) != v24)
    {
      BOOL v27 = 1;
      uint64_t v28 = *((void *)a1 + 1);
      if (*(_DWORD *)(v28 + 56) != 23) {
        goto LABEL_16;
      }
      goto LABEL_39;
    }
  }
  unint64_t v26 = 0;
  BOOL v27 = v22->u8[(void)v21 - 1] == 46;
  uint64_t v28 = *((void *)a1 + 1);
  if (*(_DWORD *)(v28 + 56) != 23)
  {
LABEL_16:
    BOOL v29 = 0;
    if (!v27) {
      goto LABEL_17;
    }
LABEL_40:
    if (v27)
    {
      if (v29)
      {
        if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v96, (BOOL *)&__s2)) {
          goto LABEL_71;
        }
        uint64_t v41 = v96;
        unint64_t v26 = v97;
      }
      else
      {
        uint64_t v41 = v25;
      }
    }
    else
    {
      uint64_t v96 = v95 + *((void *)&v95 + 1);
      unint64_t v97 = 0;
      LOBYTE(__s2) = 0;
      if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v96, (BOOL *)&__s2)) {
        goto LABEL_71;
      }
      uint64_t v43 = v97 != 0;
      if (v97) {
        uint64_t v41 = v96 + 1;
      }
      else {
        uint64_t v41 = v96;
      }
      unint64_t v26 = v97 - v43;
      uint64_t v96 = v41;
      v97 -= v43;
      if (!(_BYTE)__s2)
      {
        if (v26 >= v26 - 1) {
          --v26;
        }
        unint64_t v97 = v26;
      }
      uint64_t v25 = OCGSize;
    }
    long long v44 = v95;
    v89[0] = v25;
    uint64_t v45 = *((void *)a1 + 1);
    uint64_t v46 = a2;
    if (*(_DWORD *)(v45 + 56) != 15
      || (mlir::Lexer::lexToken((mlir::Lexer *)(v45 + 8), (uint64_t)&__s2),
          uint64_t v47 = *((void *)a1 + 1),
          *(_OWORD *)(v47 + 56) = __s2,
          *(void *)(v47 + 72) = v100,
          (uint64_t v46 = mlir::detail::Parser::parseType(a1)) != 0))
    {
      Dialect = mlir::MLIRContext::getOrLoadDialect(*(void *)a1, (void *)v44, *((size_t *)&v44 + 1));
      if (!Dialect)
      {
        *(void *)&long long v92 = a1;
        *((void *)&v92 + 1) = v89;
        LOWORD(v102) = 261;
        long long __s2 = v44;
        uint64_t v57 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&__s2);
        if (!v46) {
          mlir::NoneType::get(v5, v56);
        }
        mlir::OpaqueAttr::getChecked((uint64_t)llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v92, v57);
      }
      size_t v49 = Dialect;
      uint64_t v50 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1) + 56));
      uint64_t v51 = *((void *)a1 + 1);
      *(void *)(v51 + 40) = v41;
      mlir::Lexer::lexToken((mlir::Lexer *)(v51 + 8), (uint64_t)&__s2);
      uint64_t v52 = *((void *)a1 + 1);
      *(_OWORD *)(v52 + 56) = __s2;
      *(void *)(v52 + 72) = v100;
      *((void *)&__s2 + 1) = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)a1 + 1)
                                                                                               + 56));
      uint64_t v100 = a1;
      LOBYTE(v101) = 0;
      *(void *)&long long __s2 = &unk_26C357F78;
      uint64_t v102 = v41;
      v103[0] = v26;
      int v40 = (void *)(*(uint64_t (**)(uint64_t **(*)(uint64_t, uint64_t), long long *, uint64_t))(*(void *)v49 + 32))(v49, &__s2, v46);
      uint64_t v53 = *((void *)a1 + 1);
      *(void *)(v53 + 40) = v50;
      mlir::Lexer::lexToken((mlir::Lexer *)(v53 + 8), (uint64_t)&v92);
      uint64_t v54 = *((void *)a1 + 1);
      *(_OWORD *)(v54 + 56) = v92;
      *(void *)(v54 + 72) = v93;
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__s2);
      if (!v40) {
        goto LABEL_62;
      }
      goto LABEL_72;
    }
LABEL_71:
    int v40 = 0;
    goto LABEL_62;
  }
LABEL_39:
  BOOL v29 = &v21[(void)v22] == *(const unsigned __int8 **)(v28 + 64);
  if (v29 || v27) {
    goto LABEL_40;
  }
LABEL_17:
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v7, v22, v21);
  if (Key == -1) {
    uint64_t v31 = *(unsigned int *)(v7 + 8);
  }
  else {
    uint64_t v31 = Key;
  }
  if (v31 == *(_DWORD *)(v7 + 8))
  {
    __int16 v91 = 1283;
    v89[0] = "undefined symbol alias id '";
    long long v90 = v98;
    *(void *)&long long v92 = v89;
    int v93 = "'";
    __int16 v94 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v92, &__s2);
    if ((void)__s2) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s2);
    }
    if (v108)
    {
      uint64_t v32 = __p;
      if (__p)
      {
        uint64_t v33 = v107;
        unint64_t v34 = __p;
        if (v107 != __p)
        {
          do
            uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          unint64_t v34 = __p;
        }
        unint64_t v107 = v32;
        operator delete(v34);
      }
      unint64_t v35 = v104;
      if (v104)
      {
        int64_t v36 = v105;
        int64_t v37 = v104;
        if (v105 != v104)
        {
          do
          {
            uint64_t v39 = *--v36;
            uint64_t v38 = v39;
            *int64_t v36 = 0;
            if (v39) {
              MEMORY[0x21667D390](v38, 0x1000C8077774924);
            }
          }
          while (v36 != v35);
          int64_t v37 = v104;
        }
        unint64_t v105 = v35;
        operator delete(v37);
      }
      if (v101 != v103) {
        free(v101);
      }
    }
    goto LABEL_71;
  }
  uint64_t v42 = *(void *)v7;
  if (v6) {
    mlir::AsmParserState::addAttrAliasUses(v6, (int8x16_t *)v98, *((const unsigned __int8 **)&v98 + 1), LocRange, v17);
  }
  int v40 = *(void **)(*(void *)(v42 + 8 * v31) + 8);
  if (!v40)
  {
LABEL_62:
    uint64_t v55 = 0;
    long long v95 = 0uLL;
    if (!a2) {
      return v40;
    }
    goto LABEL_76;
  }
LABEL_72:
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v40 + 8))
  {
    uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v40 + 8);
    uint64_t v55 = v40;
    *(void *)&long long v95 = v40;
    *((void *)&v95 + 1) = v58;
    if (!a2) {
      return v40;
    }
  }
  else
  {
    uint64_t v55 = 0;
    long long v95 = 0uLL;
    if (!a2) {
      return v40;
    }
  }
LABEL_76:
  if (v55 && mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v95) != a2)
  {
    *(void *)&long long v92 = "attribute type different than expected: expected ";
    __int16 v94 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v92, &__s2);
    if ((void)__s2)
    {
      unint64_t v59 = (char *)v89;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v89, a2);
      long long v60 = (char *)v101;
      if (v102 >= HIDWORD(v102))
      {
        unint64_t v82 = v102 + 1;
        if (v101 <= v89 && (char *)v101 + 24 * v102 > (char *)v89)
        {
          int64_t v86 = (char *)v89 - (unsigned char *)v101;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v82, 24);
          long long v60 = (char *)v101;
          unint64_t v59 = (char *)v101 + v86;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v82, 24);
          unint64_t v59 = (char *)v89;
          long long v60 = (char *)v101;
        }
      }
      char v61 = &v60[24 * v102];
      long long v62 = *(_OWORD *)v59;
      *((void *)v61 + 2) = *((void *)v59 + 2);
      *(_OWORD *)char v61 = v62;
      uint64_t v63 = (v102 + 1);
      LODWORD(v102) = v102 + 1;
      if ((void)__s2)
      {
        LODWORD(v89[0]) = 3;
        v89[1] = ", but got ";
        *(void *)&long long v90 = 10;
        std::vector<char>::size_type v64 = (char *)v89;
        unsigned int v65 = (char *)v101;
        if (v63 >= HIDWORD(v102))
        {
          unint64_t v84 = v63 + 1;
          BOOL v85 = (char *)v101 + 24 * v63 > (char *)v89;
          if (v101 <= v89 && v85)
          {
            int64_t v88 = (char *)v89 - (unsigned char *)v101;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v84, 24);
            unsigned int v65 = (char *)v101;
            std::vector<char>::size_type v64 = (char *)v101 + v88;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v84, 24);
            std::vector<char>::size_type v64 = (char *)v89;
            unsigned int v65 = (char *)v101;
          }
        }
        unint64_t v66 = &v65[24 * v102];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = *((void *)v64 + 2);
        *(_OWORD *)unint64_t v66 = v67;
        LODWORD(v102) = v102 + 1;
      }
    }
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v95);
    if ((void)__s2)
    {
      unint64_t v69 = (char *)v89;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v89, canMapOperands);
      int8x8_t v70 = (char *)v101;
      if (v102 >= HIDWORD(v102))
      {
        unint64_t v83 = v102 + 1;
        if (v101 <= v89 && (char *)v101 + 24 * v102 > (char *)v89)
        {
          int64_t v87 = (char *)v89 - (unsigned char *)v101;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v83, 24);
          int8x8_t v70 = (char *)v101;
          unint64_t v69 = (char *)v101 + v87;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v83, 24);
          unint64_t v69 = (char *)v89;
          int8x8_t v70 = (char *)v101;
        }
      }
      uint64_t v71 = &v70[24 * v102];
      long long v72 = *(_OWORD *)v69;
      *((void *)v71 + 2) = *((void *)v69 + 2);
      *(_OWORD *)uint64_t v71 = v72;
      LODWORD(v102) = v102 + 1;
      if ((void)__s2) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s2);
      }
    }
    if (v108)
    {
      uint64_t v73 = __p;
      if (__p)
      {
        char v74 = v107;
        uint64_t v75 = __p;
        if (v107 != __p)
        {
          do
            char v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
          while (v74 != v73);
          uint64_t v75 = __p;
        }
        unint64_t v107 = v73;
        operator delete(v75);
      }
      __int16 v76 = v104;
      if (v104)
      {
        long long v77 = v105;
        uint64_t v78 = v104;
        if (v105 != v104)
        {
          do
          {
            uint64_t v80 = *--v77;
            uint64_t v79 = v80;
            *long long v77 = 0;
            if (v80) {
              MEMORY[0x21667D390](v79, 0x1000C8077774924);
            }
          }
          while (v77 != v76);
          uint64_t v78 = v104;
        }
        unint64_t v105 = v76;
        operator delete(v78);
      }
      if (v101 != v103) {
        free(v101);
      }
    }
    return 0;
  }
  return v40;
}

uint64_t mlir::detail::Parser::parseExtendedType(mlir::detail::Parser *this)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = **(mlir::StringAttr ***)v2;
  uint64_t v4 = *(uint64_t **)(v2 + 128);
  uint64_t v5 = *(void *)(v2 + 80);
  int v8 = *(_DWORD *)(v2 + 56);
  uint64_t v6 = (mlir::Token *)(v2 + 56);
  int v7 = v8;
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v10 = *((void *)v6 + 2);
  uint64_t v11 = v10 != 0;
  if (v10) {
    ++v9;
  }
  *(void *)&long long v60 = v9;
  *((void *)&v60 + 1) = v10 - v11;
  if (v7 == 2 && v10 == v11) {
    return mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)this);
  }
  uint64_t LocRange = mlir::Token::getLocRange(v6);
  uint64_t v15 = v14;
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&__s2);
  uint64_t v17 = *((void *)this + 1);
  *(_OWORD *)(v17 + 56) = __s2;
  *(void *)(v17 + 72) = v62;
  LOBYTE(__s2) = 46;
  unint64_t v18 = llvm::StringRef::find((uint64_t *)&v60, (char *)&__s2, 1uLL, 0);
  if (v18 == -1)
  {
    uint64_t v23 = 0;
    uint64_t v58 = 0;
    unint64_t v59 = 0;
    long long v57 = v60;
    uint64_t v19 = (const unsigned __int8 *)*((void *)&v60 + 1);
    unint64_t v20 = (int8x16_t *)v60;
  }
  else
  {
    uint64_t v19 = (const unsigned __int8 *)*((void *)&v60 + 1);
    unint64_t v20 = (int8x16_t *)v60;
    if (v18 >= *((void *)&v60 + 1)) {
      unint64_t v21 = *((void *)&v60 + 1);
    }
    else {
      unint64_t v21 = v18;
    }
    if (*((void *)&v60 + 1) >= v18 + 1) {
      unint64_t v22 = v18 + 1;
    }
    else {
      unint64_t v22 = *((void *)&v60 + 1);
    }
    uint64_t v23 = v60 + v22;
    *(void *)&long long v57 = v60;
    *((void *)&v57 + 1) = v21;
    unint64_t v24 = *((void *)&v60 + 1) - v22;
    uint64_t v58 = v60 + v22;
    unint64_t v59 = *((void *)&v60 + 1) - v22;
    if (*((void *)&v60 + 1) != v22)
    {
      BOOL v25 = 1;
      uint64_t v26 = *((void *)this + 1);
      if (*(_DWORD *)(v26 + 56) != 23) {
        goto LABEL_16;
      }
LABEL_38:
      BOOL v27 = &v19[(void)v20] == *(const unsigned __int8 **)(v26 + 64);
      if (!v27 && !v25) {
        goto LABEL_17;
      }
LABEL_39:
      if (v25)
      {
        if (!v27)
        {
          uint64_t v39 = v23;
          goto LABEL_56;
        }
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v58, (BOOL *)&__s2))
        {
          uint64_t v39 = v58;
          unint64_t v24 = v59;
LABEL_56:
          v51[0] = v23;
          Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)v3, (void *)v57, *((size_t *)&v57 + 1));
          if (!Dialect)
          {
            *(void *)&long long v54 = this;
            *((void *)&v54 + 1) = v51;
            LOWORD(v64) = 261;
            long long __s2 = v57;
            uint64_t v49 = mlir::StringAttr::get(v3, (mlir::MLIRContext *)&__s2);
            mlir::OpaqueType::getChecked((uint64_t)llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v54, v49);
          }
          uint64_t v43 = Dialect;
          uint64_t v44 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
          uint64_t v45 = *((void *)this + 1);
          *(void *)(v45 + 40) = v39;
          mlir::Lexer::lexToken((mlir::Lexer *)(v45 + 8), (uint64_t)&__s2);
          uint64_t v46 = *((void *)this + 1);
          *(_OWORD *)(v46 + 56) = __s2;
          *(void *)(v46 + 72) = v62;
          *((void *)&__s2 + 1) = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)(*((void *)this + 1) + 56));
          long long v62 = this;
          LOBYTE(v63) = 0;
          *(void *)&long long __s2 = &unk_26C357F78;
          uint64_t v64 = v39;
          unint64_t v65 = v24;
          uint64_t v38 = (*(uint64_t (**)(void, long long *))(*(void *)v43 + 48))(v43, &__s2);
          uint64_t v47 = *((void *)this + 1);
          *(void *)(v47 + 40) = v44;
          mlir::Lexer::lexToken((mlir::Lexer *)(v47 + 8), (uint64_t)&v54);
          uint64_t v48 = *((void *)this + 1);
          *(_OWORD *)(v48 + 56) = v54;
          *(void *)(v48 + 72) = v55;
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__s2);
          return v38;
        }
      }
      else
      {
        uint64_t v58 = v57 + *((void *)&v57 + 1);
        unint64_t v59 = 0;
        LOBYTE(__s2) = 0;
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v58, (BOOL *)&__s2))
        {
          uint64_t v41 = v59 != 0;
          if (v59) {
            uint64_t v39 = v58 + 1;
          }
          else {
            uint64_t v39 = v58;
          }
          unint64_t v24 = v59 - v41;
          uint64_t v58 = v39;
          v59 -= v41;
          if (!(_BYTE)__s2)
          {
            if (v24 >= v24 - 1) {
              --v24;
            }
            unint64_t v59 = v24;
          }
          uint64_t v23 = OCGSize;
          goto LABEL_56;
        }
      }
      return 0;
    }
  }
  unint64_t v24 = 0;
  BOOL v25 = v20->u8[(void)v19 - 1] == 46;
  uint64_t v26 = *((void *)this + 1);
  if (*(_DWORD *)(v26 + 56) == 23) {
    goto LABEL_38;
  }
LABEL_16:
  BOOL v27 = 0;
  if (v25) {
    goto LABEL_39;
  }
LABEL_17:
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v5 + 24), v20, v19);
  if (Key == -1) {
    uint64_t v29 = *(unsigned int *)(v5 + 32);
  }
  else {
    uint64_t v29 = Key;
  }
  if (v29 == *(_DWORD *)(v5 + 32))
  {
    __int16 v53 = 1283;
    v51[0] = "undefined symbol alias id '";
    long long v52 = v60;
    *(void *)&long long v54 = v51;
    uint64_t v55 = "'";
    __int16 v56 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v54, &__s2);
    if ((void)__s2) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s2);
    }
    if (v70)
    {
      unsigned int v30 = __p;
      if (__p)
      {
        uint64_t v31 = v69;
        uint64_t v32 = __p;
        if (v69 != __p)
        {
          do
            uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          uint64_t v32 = __p;
        }
        unint64_t v69 = v30;
        operator delete(v32);
      }
      uint64_t v33 = v66;
      if (v66)
      {
        unint64_t v34 = v67;
        unint64_t v35 = v66;
        if (v67 != v66)
        {
          do
          {
            uint64_t v37 = *--v34;
            uint64_t v36 = v37;
            *unint64_t v34 = 0;
            if (v37) {
              MEMORY[0x21667D390](v36, 0x1000C8077774924);
            }
          }
          while (v34 != v33);
          unint64_t v35 = v66;
        }
        long long v67 = v33;
        operator delete(v35);
      }
      if (v63 != &v65) {
        free(v63);
      }
    }
    return 0;
  }
  uint64_t v40 = *(void *)(v5 + 24);
  if (v4) {
    mlir::AsmParserState::addTypeAliasUses(v4, (int8x16_t *)v60, *((const unsigned __int8 **)&v60 + 1), LocRange, v15);
  }
  return *(void *)(*(void *)(v40 + 8 * v29) + 8);
}

void mlir::parseAttribute(char *a1, unint64_t a2, uint64_t **a3, void *a4, unint64_t *a5, int a6)
{
  v95[6] = *MEMORY[0x263EF8340];
  if (a6)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v55);
  }
  else
  {
    __int16 v73 = 261;
    v71.n128_u64[0] = (unint64_t)a1;
    v71.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v71, 0, &v55);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v52);
  uint64_t v11 = v55;
  uint64_t v55 = 0;
  uint64_t v72 = 0;
  __n128 v71 = (__n128)(unint64_t)v11;
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v13 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v52, &v71);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v53, &v71);
    uint64_t v13 = (__n128 *)(v12 + 24);
  }
  __int16 v53 = v13;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v71);
  v47[0] = 0;
  v47[1] = 0;
  v47[2] = 0x1000000000;
  void v47[3] = 0;
  v47[4] = 0;
  v47[5] = 0x1000000000;
  v47[6] = 0;
  v47[7] = 0;
  int v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  int64_t v86 = a3;
  char v87 = 1;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  int v90 = 0;
  uint64_t v91 = 0;
  long long v92 = v94;
  uint64_t v93 = 0x600000000;
  v94[6] = v95;
  v94[7] = 0x600000000;
  v71.n128_u64[0] = (unint64_t)&v86;
  uint64_t v14 = mlir::Lexer::Lexer((uint64_t ***)&v71.n128_u64[1], &v52, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v14, (uint64_t)&v74);
  uint64_t v78 = 0;
  __int16 v76 = v47;
  long long v77 = 0;
  unsigned int v79 = 0;
  uint64_t v80 = v82;
  uint64_t v81 = 0;
  v82[1] = 0;
  v82[0] = 0;
  unint64_t v83 = v85;
  v85[0] = "builtin";
  v85[1] = 7;
  uint64_t v84 = 0x300000001;
  uint64_t v45 = *(mlir::StringAttr ****)v71.n128_u64[0];
  uint64_t v46 = &v71;
  long long v43 = v74;
  uint64_t v44 = v75;
  if (mlir::detail::Parser::parseAttribute(&v45, a4))
  {
    long long v41 = *(long long *)((char *)&v46[3] + 8);
    unint64_t v42 = v46[4].n128_u64[1];
    uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v41);
    unint64_t v16 = OCGSize - MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v43);
    if (a5)
    {
      *a5 = v16;
    }
    else if (v16 != a2)
    {
      uint64_t v17 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v41);
      __int16 v40 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v45, v17, (uint64_t)v39, &v60);
      if (v60)
      {
        LODWORD(v56) = 3;
        long long v57 = "found trailing characters: '";
        uint64_t v58 = 28;
        unint64_t v18 = &v56;
        uint64_t v19 = (char *)v62;
        if (v63 >= v64)
        {
          unint64_t v35 = v63 + 1;
          if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
          {
            int64_t v37 = (char *)&v56 - (unsigned char *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            uint64_t v19 = (char *)v62;
            unint64_t v18 = (void ***)((char *)v62 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            unint64_t v18 = &v56;
            uint64_t v19 = (char *)v62;
          }
        }
        unint64_t v20 = &v19[24 * v63];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v63;
        if (v60)
        {
          unint64_t v22 = a2 >= v16 ? v16 : a2;
          __int16 v59 = 261;
          __int16 v56 = (void **)&a1[v22];
          long long v57 = (const char *)(a2 - v22);
          mlir::Diagnostic::operator<<((uint64_t)&v61, &v56);
          if (v60)
          {
            LODWORD(v56) = 3;
            long long v57 = "'";
            uint64_t v58 = 1;
            uint64_t v23 = &v56;
            unint64_t v24 = (char *)v62;
            if (v63 >= v64)
            {
              unint64_t v36 = v63 + 1;
              if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
              {
                int64_t v38 = (char *)&v56 - (unsigned char *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                unint64_t v24 = (char *)v62;
                uint64_t v23 = (void ***)((char *)v62 + v38);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                uint64_t v23 = &v56;
                unint64_t v24 = (char *)v62;
              }
            }
            BOOL v25 = &v24[24 * v63];
            long long v26 = *(_OWORD *)v23;
            *((void *)v25 + 2) = v23[2];
            *(_OWORD *)BOOL v25 = v26;
            ++v63;
            if (v60) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
            }
          }
        }
      }
      if (v70)
      {
        BOOL v27 = __p;
        if (__p)
        {
          uint64_t v28 = v69;
          uint64_t v29 = __p;
          if (v69 != __p)
          {
            do
              uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
            while (v28 != v27);
            uint64_t v29 = __p;
          }
          unint64_t v69 = v27;
          operator delete(v29);
        }
        unsigned int v30 = v66;
        if (v66)
        {
          uint64_t v31 = v67;
          uint64_t v32 = v66;
          if (v67 != v66)
          {
            do
            {
              uint64_t v34 = *--v31;
              uint64_t v33 = v34;
              *uint64_t v31 = 0;
              if (v34) {
                MEMORY[0x21667D390](v33, 0x1000C8077774924);
              }
            }
            while (v31 != v30);
            uint64_t v32 = v66;
          }
          long long v67 = v30;
          operator delete(v32);
        }
        if (v62 != v65) {
          free(v62);
        }
      }
    }
  }
  if (v83 != v85) {
    free(v83);
  }
  if (v80 != v82) {
    free(v80);
  }
  llvm::deallocate_buffer(v77, (void *)(8 * v79));
}

void mlir::parseType(char *a1, unint64_t a2, uint64_t **a3, unint64_t *a4, int a5)
{
  v93[6] = *MEMORY[0x263EF8340];
  if (a5)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v53);
  }
  else
  {
    __int16 v71 = 261;
    v69.n128_u64[0] = (unint64_t)a1;
    v69.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v69, 0, &v53);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v50);
  uint64_t v9 = v53;
  __int16 v53 = 0;
  uint64_t v70 = 0;
  __n128 v69 = (__n128)(unint64_t)v9;
  if ((unint64_t)v51 >= v52)
  {
    uint64_t v11 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v50, &v69);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v51, &v69);
    uint64_t v11 = (__n128 *)(v10 + 24);
  }
  int v51 = v11;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v69);
  v45[0] = 0;
  v45[1] = 0;
  v45[2] = 0x1000000000;
  void v45[3] = 0;
  v45[4] = 0;
  v45[5] = 0x1000000000;
  v45[6] = 0;
  v45[7] = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  uint64_t v84 = a3;
  char v85 = 1;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int v88 = 0;
  uint64_t v89 = 0;
  int v90 = v92;
  uint64_t v91 = 0x600000000;
  v92[6] = v93;
  v92[7] = 0x600000000;
  v69.n128_u64[0] = (unint64_t)&v84;
  uint64_t v12 = mlir::Lexer::Lexer((uint64_t ***)&v69.n128_u64[1], &v50, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v12, (uint64_t)&v72);
  uint64_t v76 = 0;
  long long v74 = v45;
  uint64_t v75 = 0;
  unsigned int v77 = 0;
  uint64_t v78 = v80;
  uint64_t v79 = 0;
  v80[1] = 0;
  v80[0] = 0;
  uint64_t v81 = v83;
  v83[0] = "builtin";
  v83[1] = 7;
  uint64_t v82 = 0x300000001;
  uint64_t v43 = *(void *)v69.n128_u64[0];
  uint64_t v44 = &v69;
  long long v41 = v72;
  uint64_t v42 = v73;
  if (mlir::detail::Parser::parseType((mlir::detail::Parser *)&v43))
  {
    long long v39 = *(long long *)((char *)&v44[3] + 8);
    unint64_t v40 = v44[4].n128_u64[1];
    uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v39);
    unint64_t v14 = OCGSize - MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v41);
    if (a4)
    {
      *a4 = v14;
    }
    else if (v14 != a2)
    {
      uint64_t v15 = (const char *)MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v39);
      __int16 v38 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v43, v15, (uint64_t)v37, &v58);
      if (v58)
      {
        LODWORD(v54) = 3;
        uint64_t v55 = "found trailing characters: '";
        uint64_t v56 = 28;
        unint64_t v16 = &v54;
        uint64_t v17 = (char *)v60;
        if (v61 >= v62)
        {
          unint64_t v33 = v61 + 1;
          if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
          {
            int64_t v35 = (char *)&v54 - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            uint64_t v17 = (char *)v60;
            unint64_t v16 = (void ***)((char *)v60 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            unint64_t v16 = &v54;
            uint64_t v17 = (char *)v60;
          }
        }
        unint64_t v18 = &v17[24 * v61];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = v16[2];
        *(_OWORD *)unint64_t v18 = v19;
        ++v61;
        if (v58)
        {
          unint64_t v20 = a2 >= v14 ? v14 : a2;
          __int16 v57 = 261;
          unint64_t v54 = (void **)&a1[v20];
          uint64_t v55 = (const char *)(a2 - v20);
          mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
          if (v58)
          {
            LODWORD(v54) = 3;
            uint64_t v55 = "'";
            uint64_t v56 = 1;
            long long v21 = &v54;
            unint64_t v22 = (char *)v60;
            if (v61 >= v62)
            {
              unint64_t v34 = v61 + 1;
              if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
              {
                int64_t v36 = (char *)&v54 - (unsigned char *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                unint64_t v22 = (char *)v60;
                long long v21 = (void ***)((char *)v60 + v36);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                long long v21 = &v54;
                unint64_t v22 = (char *)v60;
              }
            }
            uint64_t v23 = &v22[24 * v61];
            long long v24 = *(_OWORD *)v21;
            *((void *)v23 + 2) = v21[2];
            *(_OWORD *)uint64_t v23 = v24;
            ++v61;
            if (v58) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
            }
          }
        }
      }
      if (v68)
      {
        BOOL v25 = __p;
        if (__p)
        {
          long long v26 = v67;
          BOOL v27 = __p;
          if (v67 != __p)
          {
            do
              long long v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            BOOL v27 = __p;
          }
          long long v67 = v25;
          operator delete(v27);
        }
        uint64_t v28 = v64;
        if (v64)
        {
          uint64_t v29 = v65;
          unsigned int v30 = v64;
          if (v65 != v64)
          {
            do
            {
              uint64_t v32 = *--v29;
              uint64_t v31 = v32;
              void *v29 = 0;
              if (v32) {
                MEMORY[0x21667D390](v31, 0x1000C8077774924);
              }
            }
            while (v29 != v28);
            unsigned int v30 = v64;
          }
          unint64_t v65 = v28;
          operator delete(v30);
        }
        if (v60 != v63) {
          free(v60);
        }
      }
    }
  }
  if (v81 != v83) {
    free(v81);
  }
  if (v78 != v80) {
    free(v78);
  }
  llvm::deallocate_buffer(v75, (void *)(8 * v77));
}