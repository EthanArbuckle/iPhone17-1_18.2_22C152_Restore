uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(void *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(void *)(v6 + 24);
  v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(void *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      v57 = 0;
    }
    else {
      v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      result = 0;
    }
    else {
      result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    v20 = 0;
  }
  else {
    v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  v28 = *(void *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      v56 = 0;
    }
    else {
      v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      v32 = 0;
    }
    else {
      v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      v31 = 0;
    }
    else {
      v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = *v53 + *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v56);
      v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, float16x4_t a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v7 = **a2;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v8 - 1;
  if (v8 <= 0)
  {
    uint64_t v12 = v8 - 2;
    uint64_t v11 = 1;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v8 - 3;
    uint64_t v14 = 1;
    char v15 = 1;
LABEL_6:
    uint64_t v16 = v8 - 4;
    char v17 = 1;
    uint64_t v18 = 1;
    char v19 = 1;
LABEL_7:
    uint64_t v20 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v8 - 2;
  uint64_t v14 = *(void *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    uint64_t v12 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v8 - 3;
  uint64_t v18 = *(void *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    char v15 = 0;
    uint64_t v13 = 0;
    char v19 = 0;
    uint64_t v16 = -1;
    uint64_t v12 = 1;
    char v17 = 1;
    goto LABEL_7;
  }
  char v17 = 0;
  char v15 = 0;
  char v19 = 0;
  uint64_t v16 = v8 - 4;
  uint64_t v20 = *(void *)(v10 + 8 * (v8 - 4));
LABEL_8:
  uint64_t v59 = v20;
  if (*(unsigned char *)(v5 + 50))
  {
    uint64_t v21 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_26;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_31;
  }
  if (v23 < 2)
  {
    uint64_t v26 = 0;
    uint64_t v21 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v27 = 0;
    if (v23 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v28 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
  }
  uint64_t v26 = v23 - 1;
LABEL_36:
  if (v26 > (int)v23 - 1)
  {
LABEL_37:
    uint64_t v27 = 0;
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v32 = 0;
    uint64_t v57 = 0;
    uint64_t v33 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
  {
    uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
    if (*(unsigned char *)(v6 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v27 = 0;
LABEL_46:
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v29 = *(void *)(v6 + 16);
  uint64_t v30 = v29 - 4;
  if (v29 >= 4)
  {
    if (v30 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v30) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v30);
    }
    uint64_t v31 = v29 - 3;
    goto LABEL_56;
  }
  if (v29 == 3)
  {
    uint64_t v31 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v31 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v31) == 1) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v31);
    }
    uint64_t v36 = v29 - 2;
    goto LABEL_61;
  }
  if (v29 >= 2)
  {
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v36 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v36) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v6 + 56) + 8 * v36);
    }
    uint64_t v34 = v29 - 1;
    goto LABEL_66;
  }
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v57 = 0;
  uint64_t v33 = 0;
  uint64_t v35 = 0;
  if (v29 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v34 <= (int)v29 - 1)
  {
    if (*(void *)(*(void *)(v6 + 24) + 8 * v34) != 1)
    {
      uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v34);
      if (!*(unsigned char *)(v7 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v35 = 0;
LABEL_78:
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v39 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v35 = 0;
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v17 & 1) != 0 || v16 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v16) == 1)
  {
    uint64_t v37 = 0;
    if (v19) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v37 = *(void *)(*(void *)(v7 + 56) + 8 * v16);
    if (v19) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v38 = 0;
    if (v15) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v38 = *(void *)(*(void *)(v7 + 56) + 8 * v13);
  if (v15) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v8 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v12) != 1)
  {
    uint64_t v39 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
    if (v8 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v40 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v39 = 0;
  if (v8 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v9 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v9) == 1) {
    goto LABEL_80;
  }
  uint64_t v40 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v41 = 0;
    v42 = (__int32 *)(**(void **)a3 + *(void *)(v5 + 40));
    v43 = (float32x2_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v6 + 40));
    v44 = (double *)(**a4 + *(void *)(v7 + 40));
    do
    {
      if (v18 >= 1)
      {
        uint64_t v45 = 0;
        v46 = v42;
        v47 = v43;
        v48 = v44;
        do
        {
          if (v14 >= 1)
          {
            uint64_t v49 = 0;
            v50 = v46;
            v51 = v47;
            v52 = v48;
            do
            {
              uint64_t v53 = v11;
              v54 = v50;
              v55 = v51;
              v56 = v52;
              if (v11 >= 1)
              {
                do
                {
                  a5.i32[0] = *v54;
                  a5 = (float16x4_t)vadd_f32(*v55, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a5));
                  double *v56 = *(double *)&a5;
                  v56 = (double *)((char *)v56 + v40);
                  v55 = (float32x2_t *)((char *)v55 + v35);
                  v54 = (__int32 *)((char *)v54 + v27);
                  --v53;
                }
                while (v53);
              }
              ++v49;
              v52 = (double *)((char *)v52 + v39);
              v51 = (float32x2_t *)((char *)v51 + v32);
              v50 = (__int32 *)((char *)v50 + v21);
            }
            while (v49 != v14);
          }
          ++v45;
          v48 = (double *)((char *)v48 + v38);
          v47 = (float32x2_t *)((char *)v47 + v33);
          v46 = (__int32 *)((char *)v46 + result);
        }
        while (v45 != v18);
      }
      ++v41;
      v44 = (double *)((char *)v44 + v37);
      v43 = (float32x2_t *)((char *)v43 + v57);
      v42 = (__int32 *)((char *)v42 + v58);
    }
    while (v41 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  float *v55 = *v54 + _S0;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      uint64_t v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double a5, float16x4_t a6)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v13 = v9 - 2;
    uint64_t v12 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v13 = -1;
LABEL_5:
    uint64_t v14 = v9 - 3;
    uint64_t v15 = 1;
    char v16 = 1;
LABEL_6:
    uint64_t v17 = v9 - 4;
    char v18 = 1;
    uint64_t v19 = 1;
    char v20 = 1;
LABEL_7:
    uint64_t v21 = 1;
    goto LABEL_8;
  }
  uint64_t v13 = v9 - 2;
  uint64_t v15 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v13 = 0;
    char v16 = 0;
    uint64_t v14 = -1;
    goto LABEL_6;
  }
  uint64_t v14 = v9 - 3;
  uint64_t v19 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v16 = 0;
    uint64_t v14 = 0;
    char v20 = 0;
    uint64_t v17 = -1;
    uint64_t v13 = 1;
    char v18 = 1;
    goto LABEL_7;
  }
  char v18 = 0;
  char v16 = 0;
  char v20 = 0;
  uint64_t v17 = v9 - 4;
  uint64_t v21 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v60 = v21;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v22 = 0;
    uint64_t v59 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v24 = *(void *)(v6 + 16);
  uint64_t v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v25) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    }
    uint64_t v26 = v24 - 3;
    goto LABEL_26;
  }
  if (v24 == 3)
  {
    uint64_t v26 = 0;
    uint64_t v59 = 0;
LABEL_26:
    if (v26 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v26) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v6 + 56) + 8 * v26);
    }
    uint64_t v29 = v24 - 2;
    goto LABEL_31;
  }
  if (v24 < 2)
  {
    uint64_t v27 = 0;
    uint64_t v22 = 0;
    uint64_t v59 = 0;
    uint64_t result = 0;
    uint64_t v28 = 0;
    if (v24 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v29 = 0;
  uint64_t result = 0;
  uint64_t v59 = 0;
LABEL_31:
  if (v29 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v29) == 1) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(void *)(*(void *)(v6 + 56) + 8 * v29);
  }
  uint64_t v27 = v24 - 1;
LABEL_36:
  if (v27 > (int)v24 - 1)
  {
LABEL_37:
    uint64_t v28 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v33 = 0;
    uint64_t v58 = 0;
    uint64_t v34 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v27) != 1)
  {
    uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v27);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v28 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v30 = *(void *)(v7 + 16);
  uint64_t v31 = v30 - 4;
  if (v30 >= 4)
  {
    if (v31 > (int)v30 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v31) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v7 + 56) + 8 * v31);
    }
    uint64_t v32 = v30 - 3;
    goto LABEL_56;
  }
  if (v30 == 3)
  {
    uint64_t v32 = 0;
    uint64_t v58 = 0;
LABEL_56:
    if (v32 > (int)v30 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v32) == 1) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = *(void *)(*(void *)(v7 + 56) + 8 * v32);
    }
    uint64_t v37 = v30 - 2;
    goto LABEL_61;
  }
  if (v30 >= 2)
  {
    uint64_t v37 = 0;
    uint64_t v34 = 0;
    uint64_t v58 = 0;
LABEL_61:
    if (v37 > (int)v30 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v37) == 1) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *(void *)(*(void *)(v7 + 56) + 8 * v37);
    }
    uint64_t v35 = v30 - 1;
    goto LABEL_66;
  }
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  uint64_t v58 = 0;
  uint64_t v34 = 0;
  uint64_t v36 = 0;
  if (v30 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v35 <= (int)v30 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v35) != 1)
    {
      uint64_t v36 = *(void *)(*(void *)(v7 + 56) + 8 * v35);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v36 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v36 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v18 & 1) != 0 || v17 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v17) == 1)
  {
    uint64_t v38 = 0;
    if (v20) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v38 = *(void *)(*(void *)(v8 + 56) + 8 * v17);
    if (v20) {
      goto LABEL_98;
    }
  }
  if (v14 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v14) == 1)
  {
LABEL_98:
    uint64_t v39 = 0;
    if (v16) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v39 = *(void *)(*(void *)(v8 + 56) + 8 * v14);
  if (v16) {
    goto LABEL_101;
  }
LABEL_99:
  if (v13 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v13) != 1)
  {
    uint64_t v40 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v41 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v40 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v41 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v60 >= 1)
  {
    uint64_t v42 = 0;
    v43 = (float32x2_t *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v44 = (__int32 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v45 = (float32x2_t *)(**a4 + *(void *)(v8 + 40));
    do
    {
      if (v19 >= 1)
      {
        uint64_t v46 = 0;
        v47 = v43;
        uint64_t v48 = v44;
        uint64_t v49 = v45;
        do
        {
          if (v15 >= 1)
          {
            uint64_t v50 = 0;
            v51 = v47;
            uint64_t v52 = v48;
            uint64_t v53 = v49;
            do
            {
              uint64_t v54 = v12;
              v55 = v51;
              v56 = v52;
              uint64_t v57 = v53;
              if (v12 >= 1)
              {
                do
                {
                  a6.i32[0] = *v56;
                  a6 = (float16x4_t)vcvtq_f32_f16(a6).u64[0];
                  *uint64_t v57 = vadd_f32(*v55, (float32x2_t)a6);
                  uint64_t v57 = (float32x2_t *)((char *)v57 + v41);
                  v56 = (__int32 *)((char *)v56 + v36);
                  v55 = (float32x2_t *)((char *)v55 + v28);
                  --v54;
                }
                while (v54);
              }
              ++v50;
              uint64_t v53 = (float32x2_t *)((char *)v53 + v40);
              uint64_t v52 = (__int32 *)((char *)v52 + v33);
              v51 = (float32x2_t *)((char *)v51 + v22);
            }
            while (v50 != v15);
          }
          ++v46;
          uint64_t v49 = (float32x2_t *)((char *)v49 + v39);
          uint64_t v48 = (__int32 *)((char *)v48 + v34);
          v47 = (float32x2_t *)((char *)v47 + result);
        }
        while (v46 != v19);
      }
      ++v42;
      uint64_t v45 = (float32x2_t *)((char *)v45 + v38);
      uint64_t v44 = (__int32 *)((char *)v44 + v58);
      v43 = (float32x2_t *)((char *)v43 + v59);
    }
    while (v42 != v60);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  float *v55 = *v53 + _S1;
                  v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (__int16 *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (__int16 *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (__int16 *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (__int16 *)((char *)v42 + v62);
      uint64_t v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = *v53 + COERCE_FLOAT(*v52 << 16);
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (float *)((char *)v53 + v34);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (float *)((char *)v49 + v31);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (float *)((char *)v45 + v32);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (float *)((char *)v41 + v55);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = *v52 + COERCE_FLOAT(*v53 << 16);
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (unsigned __int16 *)((char *)v53 + v34);
                  uint64_t v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (unsigned __int16 *)((char *)v49 + v31);
              uint64_t v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (unsigned __int16 *)((char *)v45 + v32);
          uint64_t v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (unsigned __int16 *)((char *)v41 + v55);
      uint64_t v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v57 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float v56 = v53[1] + v54[1];
                  short float *v55 = *v53 + *v54;
                  v55[1] = v56;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  uint64_t v54 = (short float *)((char *)v54 + v34);
                  uint64_t v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v57);
      uint64_t v41 = (short float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float *v55 = *v53 + *v54;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  uint64_t v54 = (short float *)((char *)v54 + v34);
                  uint64_t v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v56);
      uint64_t v41 = (short float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  float v54 = COERCE_FLOAT(*v51 << 16) + COERCE_FLOAT(*v52 << 16);
                  *uint64_t v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v33);
                  uint64_t v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v30);
              uint64_t v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + v31);
          uint64_t v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v57);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v55);
      uint64_t v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (void *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (void *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (void *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 + *v51;
                  uint64_t v53 = (void *)((char *)v53 + v37);
                  uint64_t v52 = (void *)((char *)v52 + v33);
                  uint64_t v51 = (void *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (void *)((char *)v49 + v36);
              uint64_t v48 = (void *)((char *)v48 + v30);
              uint64_t v47 = (void *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (void *)((char *)v45 + v35);
          uint64_t v44 = (void *)((char *)v44 + v31);
          uint64_t v43 = (void *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (void *)((char *)v41 + v56);
      uint64_t v40 = (void *)((char *)v40 + v54);
      uint64_t v39 = (void *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_DWORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_DWORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 + *v51;
                  uint64_t v53 = (_DWORD *)((char *)v53 + v37);
                  uint64_t v52 = (_DWORD *)((char *)v52 + v33);
                  uint64_t v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_DWORD *)((char *)v49 + v36);
              uint64_t v48 = (_DWORD *)((char *)v48 + v30);
              uint64_t v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_DWORD *)((char *)v45 + v35);
          uint64_t v44 = (_DWORD *)((char *)v44 + v31);
          uint64_t v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_DWORD *)((char *)v41 + v56);
      uint64_t v40 = (_DWORD *)((char *)v40 + v54);
      uint64_t v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_WORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_WORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 + *v51;
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (_WORD *)((char *)v52 + v33);
                  uint64_t v51 = (_WORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (_WORD *)((char *)v48 + v30);
              uint64_t v47 = (_WORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (_WORD *)((char *)v44 + v31);
          uint64_t v43 = (_WORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v56);
      uint64_t v40 = (_WORD *)((char *)v40 + v54);
      uint64_t v39 = (_WORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 + *v51;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float32x2_t *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float32x2_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float32x2_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float32x2_t *v55 = vsub_f32(*v53, *v54);
                  uint64_t v55 = (float32x2_t *)((char *)v55 + v39);
                  uint64_t v54 = (float32x2_t *)((char *)v54 + v34);
                  uint64_t v53 = (float32x2_t *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float32x2_t *)((char *)v51 + v38);
              uint64_t v50 = (float32x2_t *)((char *)v50 + v31);
              uint64_t v49 = (float32x2_t *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float32x2_t *)((char *)v47 + v37);
          uint64_t v46 = (float32x2_t *)((char *)v46 + v32);
          uint64_t v45 = (float32x2_t *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float32x2_t *)((char *)v43 + v36);
      uint64_t v42 = (float32x2_t *)((char *)v42 + v56);
      uint64_t v41 = (float32x2_t *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float *v55 = *v53 - *v54;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v56);
      uint64_t v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, float16x4_t a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v7 = **a2;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v8 - 1;
  if (v8 <= 0)
  {
    uint64_t v12 = v8 - 2;
    uint64_t v11 = 1;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v8 - 3;
    uint64_t v14 = 1;
    char v15 = 1;
LABEL_6:
    uint64_t v16 = v8 - 4;
    char v17 = 1;
    uint64_t v18 = 1;
    char v19 = 1;
LABEL_7:
    uint64_t v20 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v8 - 2;
  uint64_t v14 = *(void *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    uint64_t v12 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v8 - 3;
  uint64_t v18 = *(void *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    char v15 = 0;
    uint64_t v13 = 0;
    char v19 = 0;
    uint64_t v16 = -1;
    uint64_t v12 = 1;
    char v17 = 1;
    goto LABEL_7;
  }
  char v17 = 0;
  char v15 = 0;
  char v19 = 0;
  uint64_t v16 = v8 - 4;
  uint64_t v20 = *(void *)(v10 + 8 * (v8 - 4));
LABEL_8:
  uint64_t v59 = v20;
  if (*(unsigned char *)(v5 + 50))
  {
    uint64_t v21 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_26;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_31;
  }
  if (v23 < 2)
  {
    uint64_t v26 = 0;
    uint64_t v21 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v27 = 0;
    if (v23 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v28 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
  }
  uint64_t v26 = v23 - 1;
LABEL_36:
  if (v26 > (int)v23 - 1)
  {
LABEL_37:
    uint64_t v27 = 0;
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v32 = 0;
    uint64_t v57 = 0;
    uint64_t v33 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
  {
    uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
    if (*(unsigned char *)(v6 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v27 = 0;
LABEL_46:
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v29 = *(void *)(v6 + 16);
  uint64_t v30 = v29 - 4;
  if (v29 >= 4)
  {
    if (v30 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v30) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v30);
    }
    uint64_t v31 = v29 - 3;
    goto LABEL_56;
  }
  if (v29 == 3)
  {
    uint64_t v31 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v31 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v31) == 1) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v31);
    }
    uint64_t v36 = v29 - 2;
    goto LABEL_61;
  }
  if (v29 >= 2)
  {
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v36 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v36) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v6 + 56) + 8 * v36);
    }
    uint64_t v34 = v29 - 1;
    goto LABEL_66;
  }
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v57 = 0;
  uint64_t v33 = 0;
  uint64_t v35 = 0;
  if (v29 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v34 <= (int)v29 - 1)
  {
    if (*(void *)(*(void *)(v6 + 24) + 8 * v34) != 1)
    {
      uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v34);
      if (!*(unsigned char *)(v7 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v35 = 0;
LABEL_78:
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v39 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v35 = 0;
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v17 & 1) != 0 || v16 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v16) == 1)
  {
    uint64_t v37 = 0;
    if (v19) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v37 = *(void *)(*(void *)(v7 + 56) + 8 * v16);
    if (v19) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v38 = 0;
    if (v15) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v38 = *(void *)(*(void *)(v7 + 56) + 8 * v13);
  if (v15) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v8 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v12) != 1)
  {
    uint64_t v39 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
    if (v8 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v40 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v39 = 0;
  if (v8 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v9 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v9) == 1) {
    goto LABEL_80;
  }
  uint64_t v40 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (__int32 *)(**(void **)a3 + *(void *)(v5 + 40));
    uint64_t v43 = (float32x2_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v6 + 40));
    uint64_t v44 = (double *)(**a4 + *(void *)(v7 + 40));
    do
    {
      if (v18 >= 1)
      {
        uint64_t v45 = 0;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        uint64_t v48 = v44;
        do
        {
          if (v14 >= 1)
          {
            uint64_t v49 = 0;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            uint64_t v52 = v48;
            do
            {
              uint64_t v53 = v11;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              uint64_t v56 = v52;
              if (v11 >= 1)
              {
                do
                {
                  a5.i32[0] = *v54;
                  a5 = (float16x4_t)vsub_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a5), *v55);
                  double *v56 = *(double *)&a5;
                  uint64_t v56 = (double *)((char *)v56 + v40);
                  uint64_t v55 = (float32x2_t *)((char *)v55 + v35);
                  uint64_t v54 = (__int32 *)((char *)v54 + v27);
                  --v53;
                }
                while (v53);
              }
              ++v49;
              uint64_t v52 = (double *)((char *)v52 + v39);
              uint64_t v51 = (float32x2_t *)((char *)v51 + v32);
              uint64_t v50 = (__int32 *)((char *)v50 + v21);
            }
            while (v49 != v14);
          }
          ++v45;
          uint64_t v48 = (double *)((char *)v48 + v38);
          uint64_t v47 = (float32x2_t *)((char *)v47 + v33);
          uint64_t v46 = (__int32 *)((char *)v46 + result);
        }
        while (v45 != v18);
      }
      ++v41;
      uint64_t v44 = (double *)((char *)v44 + v37);
      uint64_t v43 = (float32x2_t *)((char *)v43 + v57);
      uint64_t v42 = (__int32 *)((char *)v42 + v58);
    }
    while (v41 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  float *v55 = _S0 - *v54;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v62);
      uint64_t v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double a5, float16x4_t a6)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v13 = v9 - 2;
    uint64_t v12 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v13 = -1;
LABEL_5:
    uint64_t v14 = v9 - 3;
    uint64_t v15 = 1;
    char v16 = 1;
LABEL_6:
    uint64_t v17 = v9 - 4;
    char v18 = 1;
    uint64_t v19 = 1;
    char v20 = 1;
LABEL_7:
    uint64_t v21 = 1;
    goto LABEL_8;
  }
  uint64_t v13 = v9 - 2;
  uint64_t v15 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v13 = 0;
    char v16 = 0;
    uint64_t v14 = -1;
    goto LABEL_6;
  }
  uint64_t v14 = v9 - 3;
  uint64_t v19 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v16 = 0;
    uint64_t v14 = 0;
    char v20 = 0;
    uint64_t v17 = -1;
    uint64_t v13 = 1;
    char v18 = 1;
    goto LABEL_7;
  }
  char v18 = 0;
  char v16 = 0;
  char v20 = 0;
  uint64_t v17 = v9 - 4;
  uint64_t v21 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v60 = v21;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v22 = 0;
    uint64_t v59 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v24 = *(void *)(v6 + 16);
  uint64_t v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v25) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    }
    uint64_t v26 = v24 - 3;
    goto LABEL_26;
  }
  if (v24 == 3)
  {
    uint64_t v26 = 0;
    uint64_t v59 = 0;
LABEL_26:
    if (v26 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v26) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v6 + 56) + 8 * v26);
    }
    uint64_t v29 = v24 - 2;
    goto LABEL_31;
  }
  if (v24 < 2)
  {
    uint64_t v27 = 0;
    uint64_t v22 = 0;
    uint64_t v59 = 0;
    uint64_t result = 0;
    uint64_t v28 = 0;
    if (v24 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v29 = 0;
  uint64_t result = 0;
  uint64_t v59 = 0;
LABEL_31:
  if (v29 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v29) == 1) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(void *)(*(void *)(v6 + 56) + 8 * v29);
  }
  uint64_t v27 = v24 - 1;
LABEL_36:
  if (v27 > (int)v24 - 1)
  {
LABEL_37:
    uint64_t v28 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v33 = 0;
    uint64_t v58 = 0;
    uint64_t v34 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v27) != 1)
  {
    uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v27);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v28 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v30 = *(void *)(v7 + 16);
  uint64_t v31 = v30 - 4;
  if (v30 >= 4)
  {
    if (v31 > (int)v30 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v31) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v7 + 56) + 8 * v31);
    }
    uint64_t v32 = v30 - 3;
    goto LABEL_56;
  }
  if (v30 == 3)
  {
    uint64_t v32 = 0;
    uint64_t v58 = 0;
LABEL_56:
    if (v32 > (int)v30 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v32) == 1) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = *(void *)(*(void *)(v7 + 56) + 8 * v32);
    }
    uint64_t v37 = v30 - 2;
    goto LABEL_61;
  }
  if (v30 >= 2)
  {
    uint64_t v37 = 0;
    uint64_t v34 = 0;
    uint64_t v58 = 0;
LABEL_61:
    if (v37 > (int)v30 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v37) == 1) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *(void *)(*(void *)(v7 + 56) + 8 * v37);
    }
    uint64_t v35 = v30 - 1;
    goto LABEL_66;
  }
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  uint64_t v58 = 0;
  uint64_t v34 = 0;
  uint64_t v36 = 0;
  if (v30 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v35 <= (int)v30 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v35) != 1)
    {
      uint64_t v36 = *(void *)(*(void *)(v7 + 56) + 8 * v35);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v36 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v36 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v18 & 1) != 0 || v17 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v17) == 1)
  {
    uint64_t v38 = 0;
    if (v20) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v38 = *(void *)(*(void *)(v8 + 56) + 8 * v17);
    if (v20) {
      goto LABEL_98;
    }
  }
  if (v14 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v14) == 1)
  {
LABEL_98:
    uint64_t v39 = 0;
    if (v16) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v39 = *(void *)(*(void *)(v8 + 56) + 8 * v14);
  if (v16) {
    goto LABEL_101;
  }
LABEL_99:
  if (v13 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v13) != 1)
  {
    uint64_t v40 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v41 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v40 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v41 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v60 >= 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = (float32x2_t *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v44 = (__int32 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v45 = (float32x2_t *)(**a4 + *(void *)(v8 + 40));
    do
    {
      if (v19 >= 1)
      {
        uint64_t v46 = 0;
        uint64_t v47 = v43;
        uint64_t v48 = v44;
        uint64_t v49 = v45;
        do
        {
          if (v15 >= 1)
          {
            uint64_t v50 = 0;
            uint64_t v51 = v47;
            uint64_t v52 = v48;
            uint64_t v53 = v49;
            do
            {
              uint64_t v54 = v12;
              uint64_t v55 = v51;
              uint64_t v56 = v52;
              uint64_t v57 = v53;
              if (v12 >= 1)
              {
                do
                {
                  a6.i32[0] = *v56;
                  a6 = (float16x4_t)vcvtq_f32_f16(a6).u64[0];
                  *uint64_t v57 = vsub_f32(*v55, (float32x2_t)a6);
                  uint64_t v57 = (float32x2_t *)((char *)v57 + v41);
                  uint64_t v56 = (__int32 *)((char *)v56 + v36);
                  uint64_t v55 = (float32x2_t *)((char *)v55 + v28);
                  --v54;
                }
                while (v54);
              }
              ++v50;
              uint64_t v53 = (float32x2_t *)((char *)v53 + v40);
              uint64_t v52 = (__int32 *)((char *)v52 + v33);
              uint64_t v51 = (float32x2_t *)((char *)v51 + v22);
            }
            while (v50 != v15);
          }
          ++v46;
          uint64_t v49 = (float32x2_t *)((char *)v49 + v39);
          uint64_t v48 = (__int32 *)((char *)v48 + v34);
          uint64_t v47 = (float32x2_t *)((char *)v47 + result);
        }
        while (v46 != v19);
      }
      ++v42;
      uint64_t v45 = (float32x2_t *)((char *)v45 + v38);
      uint64_t v44 = (__int32 *)((char *)v44 + v58);
      uint64_t v43 = (float32x2_t *)((char *)v43 + v59);
    }
    while (v42 != v60);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  float *v55 = *v53 - _S1;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (__int16 *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (__int16 *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (__int16 *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (__int16 *)((char *)v42 + v62);
      uint64_t v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = COERCE_FLOAT(*v52 << 16) - *v53;
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (float *)((char *)v53 + v34);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (float *)((char *)v49 + v31);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (float *)((char *)v45 + v32);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (float *)((char *)v41 + v55);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = *v52 - COERCE_FLOAT(*v53 << 16);
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (unsigned __int16 *)((char *)v53 + v34);
                  uint64_t v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (unsigned __int16 *)((char *)v49 + v31);
              uint64_t v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (unsigned __int16 *)((char *)v45 + v32);
          uint64_t v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (unsigned __int16 *)((char *)v41 + v55);
      uint64_t v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v57 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float v56 = v53[1] - v54[1];
                  short float *v55 = *v53 - *v54;
                  v55[1] = v56;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  uint64_t v54 = (short float *)((char *)v54 + v34);
                  uint64_t v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v57);
      uint64_t v41 = (short float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float *v55 = *v53 - *v54;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  uint64_t v54 = (short float *)((char *)v54 + v34);
                  uint64_t v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v56);
      uint64_t v41 = (short float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  float v54 = COERCE_FLOAT(*v51 << 16) - COERCE_FLOAT(*v52 << 16);
                  *uint64_t v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v33);
                  uint64_t v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v30);
              uint64_t v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + v31);
          uint64_t v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v57);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v55);
      uint64_t v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (void *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (void *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (void *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 - *v52;
                  uint64_t v53 = (void *)((char *)v53 + v37);
                  uint64_t v52 = (void *)((char *)v52 + v33);
                  uint64_t v51 = (void *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (void *)((char *)v49 + v36);
              uint64_t v48 = (void *)((char *)v48 + v30);
              uint64_t v47 = (void *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (void *)((char *)v45 + v35);
          uint64_t v44 = (void *)((char *)v44 + v31);
          uint64_t v43 = (void *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (void *)((char *)v41 + v56);
      uint64_t v40 = (void *)((char *)v40 + v54);
      uint64_t v39 = (void *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_DWORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_DWORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 - *v52;
                  uint64_t v53 = (_DWORD *)((char *)v53 + v37);
                  uint64_t v52 = (_DWORD *)((char *)v52 + v33);
                  uint64_t v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_DWORD *)((char *)v49 + v36);
              uint64_t v48 = (_DWORD *)((char *)v48 + v30);
              uint64_t v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_DWORD *)((char *)v45 + v35);
          uint64_t v44 = (_DWORD *)((char *)v44 + v31);
          uint64_t v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_DWORD *)((char *)v41 + v56);
      uint64_t v40 = (_DWORD *)((char *)v40 + v54);
      uint64_t v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_WORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_WORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 - *v52;
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (_WORD *)((char *)v52 + v33);
                  uint64_t v51 = (_WORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (_WORD *)((char *)v48 + v30);
              uint64_t v47 = (_WORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (_WORD *)((char *)v44 + v31);
          uint64_t v43 = (_WORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v56);
      uint64_t v40 = (_WORD *)((char *)v40 + v54);
      uint64_t v39 = (_WORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 - *v52;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v61 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v61 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v62 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v53 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v62 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v53 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v45 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v43 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v51 = 0;
  uint64_t v43 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v59 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v42 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v50 = 0;
    uint64_t v42 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v59 = 0;
  uint64_t v42 = 0;
  uint64_t v50 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v58 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v44 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v44 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v52 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v52 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v58 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v45 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v49 = (uint64_t *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v48 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v47 = **a4 + *(void *)(v6 + 40);
    do
    {
      uint64_t v46 = v30;
      if (v53 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v56 = v48;
        uint64_t v57 = v49;
        uint64_t v55 = v47;
        do
        {
          uint64_t v54 = v31;
          if (v62 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v56;
            uint64_t v34 = v57;
            uint64_t v35 = v55;
            do
            {
              uint64_t v63 = v32;
              uint64_t v36 = v61;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v61 >= 1)
              {
                do
                {
                  uint64_t v40 = *v37;
                  uint64_t v64 = *v38;
                  uint64_t v65 = v40;
                  *(float *)uint64_t v39 = std::operator*[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v39 + 4) = v41;
                  v39 += v29;
                  uint64_t v38 = (uint64_t *)((char *)v38 + v27);
                  uint64_t v37 = (uint64_t *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v63 + 1;
              v35 += v58;
              uint64_t v33 = (uint64_t *)((char *)v33 + v59);
              uint64_t v34 = (uint64_t *)((char *)v34 + v60);
            }
            while (v63 + 1 != v62);
          }
          uint64_t v31 = v54 + 1;
          v55 += v52;
          uint64_t v56 = (uint64_t *)((char *)v56 + v50);
          uint64_t v57 = (uint64_t *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      uint64_t v30 = v46 + 1;
      v47 += v44;
      uint64_t v48 = (uint64_t *)((char *)v48 + v42);
      uint64_t v49 = (uint64_t *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    int v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float *v55 = *v53 * *v54;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v56);
      int v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, float16x4_t a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v7 = **a2;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v8 - 1;
  if (v8 <= 0)
  {
    uint64_t v11 = v8 - 2;
    uint64_t v61 = 1;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v61 = *(void *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v8 - 3;
    uint64_t v62 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v8 - 4;
    char v15 = 1;
    uint64_t v53 = 1;
    char v16 = 1;
LABEL_7:
    uint64_t v17 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v8 - 2;
  uint64_t v62 = *(void *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v8 - 3;
  uint64_t v53 = *(void *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    char v13 = 0;
    uint64_t v12 = 0;
    char v16 = 0;
    uint64_t v14 = -1;
    uint64_t v11 = 1;
    char v15 = 1;
    goto LABEL_7;
  }
  char v15 = 0;
  char v13 = 0;
  char v16 = 0;
  uint64_t v14 = v8 - 4;
  uint64_t v17 = *(void *)(v10 + 8 * (v8 - 4));
LABEL_8:
  uint64_t v45 = v17;
  if (*(unsigned char *)(v5 + 50))
  {
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    uint64_t v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    uint64_t v20 = 0;
    uint64_t v43 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v20) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    }
    uint64_t v23 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    uint64_t v21 = 0;
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    uint64_t v22 = 0;
    if (v18 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v23 = 0;
  uint64_t v51 = 0;
  uint64_t v43 = 0;
LABEL_31:
  if (v23 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v23) == 1) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v23);
  }
  uint64_t v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    uint64_t v22 = 0;
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v59 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v5 + 24) + 8 * v21) != 1)
  {
    uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if (*(unsigned char *)(v6 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v22 = 0;
LABEL_46:
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v24 = *(void *)(v6 + 16);
  uint64_t v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v25) == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    }
    uint64_t v26 = v24 - 3;
    goto LABEL_56;
  }
  if (v24 == 3)
  {
    uint64_t v26 = 0;
    uint64_t v42 = 0;
LABEL_56:
    if (v26 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v26) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v26);
    }
    uint64_t v29 = v24 - 2;
    goto LABEL_61;
  }
  if (v24 >= 2)
  {
    uint64_t v29 = 0;
    uint64_t v50 = 0;
    uint64_t v42 = 0;
LABEL_61:
    if (v29 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v29) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v29);
    }
    uint64_t v27 = v24 - 1;
    goto LABEL_66;
  }
  uint64_t v27 = 0;
  uint64_t v59 = 0;
  uint64_t v42 = 0;
  uint64_t v50 = 0;
  uint64_t v28 = 0;
  if (v24 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v27 <= (int)v24 - 1)
  {
    if (*(void *)(*(void *)(v6 + 24) + 8 * v27) != 1)
    {
      uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v27);
      if (!*(unsigned char *)(v7 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v28 = 0;
LABEL_78:
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v58 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v28 = 0;
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v14) == 1)
  {
    uint64_t v44 = 0;
    if (v16) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v44 = *(void *)(*(void *)(v7 + 56) + 8 * v14);
    if (v16) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v52 = 0;
    if (v13) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v52 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
  if (v13) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v8 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v11) != 1)
  {
    uint64_t v58 = *(void *)(*(void *)(v7 + 56) + 8 * v11);
    if (v8 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v30 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v58 = 0;
  if (v8 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v9 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v9) == 1) {
    goto LABEL_80;
  }
  uint64_t v30 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v45 >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v49 = (__int32 *)(**(void **)a3 + *(void *)(v5 + 40));
    uint64_t v48 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v6 + 40));
    uint64_t v47 = **a4 + *(void *)(v7 + 40);
    do
    {
      uint64_t v46 = v31;
      if (v53 >= 1)
      {
        uint64_t v32 = 0;
        uint64_t v56 = v48;
        uint64_t v57 = v49;
        uint64_t v55 = v47;
        do
        {
          uint64_t v54 = v32;
          if (v62 >= 1)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v56;
            uint64_t v35 = v57;
            uint64_t v36 = v55;
            do
            {
              uint64_t v63 = v33;
              uint64_t v37 = v61;
              uint64_t v38 = v35;
              uint64_t v39 = v34;
              uint64_t v40 = v36;
              if (v61 >= 1)
              {
                do
                {
                  a5.i32[0] = *v38;
                  uint64_t v64 = *v39;
                  unint64_t v65 = vcvtq_f32_f16(a5).u64[0];
                  *(float *)uint64_t v40 = std::operator*[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v40 + 4) = v41;
                  v40 += v30;
                  uint64_t v39 = (uint64_t *)((char *)v39 + v28);
                  uint64_t v38 = (__int32 *)((char *)v38 + v22);
                  --v37;
                }
                while (v37);
              }
              uint64_t v33 = v63 + 1;
              v36 += v58;
              uint64_t v34 = (uint64_t *)((char *)v34 + v59);
              uint64_t v35 = (__int32 *)((char *)v35 + v60);
            }
            while (v63 + 1 != v62);
          }
          uint64_t v32 = v54 + 1;
          v55 += v52;
          uint64_t v56 = (uint64_t *)((char *)v56 + v50);
          uint64_t v57 = (__int32 *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      uint64_t v31 = v46 + 1;
      v47 += v44;
      uint64_t v48 = (uint64_t *)((char *)v48 + v42);
      uint64_t v49 = (__int32 *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    int v41 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  float *v55 = *v54 * _S0;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v62);
      int v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double a5, float16x4_t a6)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v12 = v9 - 2;
    uint64_t v62 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v62 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v9 - 3;
    uint64_t v63 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v9 - 4;
    char v16 = 1;
    uint64_t v54 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v9 - 2;
  uint64_t v63 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v9 - 3;
  uint64_t v54 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v14 = 0;
    uint64_t v13 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v12 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v9 - 4;
  uint64_t v18 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v46 = v18;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v61 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    uint64_t v21 = 0;
    uint64_t v44 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v21) == 1) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    }
    uint64_t v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    uint64_t v22 = 0;
    uint64_t v61 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    uint64_t v23 = 0;
    if (v19 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v24 = 0;
  uint64_t v52 = 0;
  uint64_t v44 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v24) == 1) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = *(void *)(*(void *)(v6 + 56) + 8 * v24);
  }
  uint64_t v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    uint64_t v23 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
  {
    uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v23 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v25 = *(void *)(v7 + 16);
  uint64_t v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v26) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v7 + 56) + 8 * v26);
    }
    uint64_t v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    uint64_t v27 = 0;
    uint64_t v43 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v27) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v7 + 56) + 8 * v27);
    }
    uint64_t v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    uint64_t v30 = 0;
    uint64_t v51 = 0;
    uint64_t v43 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v30) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v7 + 56) + 8 * v30);
    }
    uint64_t v28 = v25 - 1;
    goto LABEL_66;
  }
  uint64_t v28 = 0;
  uint64_t v60 = 0;
  uint64_t v43 = 0;
  uint64_t v51 = 0;
  uint64_t v29 = 0;
  if (v25 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v28) != 1)
    {
      uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v28);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v29 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v59 = 0;
    uint64_t v45 = 0;
    uint64_t v53 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v29 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v15) == 1)
  {
    uint64_t v45 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v45 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v53 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v53 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v12) != 1)
  {
    uint64_t v59 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v59 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v31 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v46 >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v50 = (uint64_t *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v49 = (__int32 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v48 = **a4 + *(void *)(v8 + 40);
    do
    {
      uint64_t v47 = v32;
      if (v54 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v57 = v49;
        uint64_t v58 = v50;
        uint64_t v56 = v48;
        do
        {
          uint64_t v55 = v33;
          if (v63 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = v57;
            uint64_t v36 = v58;
            uint64_t v37 = v56;
            do
            {
              uint64_t v64 = v34;
              uint64_t v38 = v62;
              uint64_t v39 = v36;
              uint64_t v40 = v35;
              uint64_t v41 = v37;
              if (v62 >= 1)
              {
                do
                {
                  uint64_t v42 = *v39;
                  a6.i32[0] = *v40;
                  unint64_t v65 = vcvtq_f32_f16(a6).u64[0];
                  uint64_t v66 = v42;
                  *(float *)uint64_t v41 = std::operator*[abi:nn180100]<float>((float *)&v66, (float *)&v65);
                  *(_DWORD *)(v41 + 4) = a6.i32[0];
                  v41 += v31;
                  uint64_t v40 = (__int32 *)((char *)v40 + v29);
                  uint64_t v39 = (uint64_t *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              uint64_t v34 = v64 + 1;
              v37 += v59;
              uint64_t v35 = (__int32 *)((char *)v35 + v60);
              uint64_t v36 = (uint64_t *)((char *)v36 + v61);
            }
            while (v64 + 1 != v63);
          }
          uint64_t v33 = v55 + 1;
          v56 += v53;
          uint64_t v57 = (__int32 *)((char *)v57 + v51);
          uint64_t v58 = (uint64_t *)((char *)v58 + v52);
        }
        while (v55 + 1 != v54);
      }
      uint64_t v32 = v47 + 1;
      v48 += v45;
      uint64_t v49 = (__int32 *)((char *)v49 + v43);
      uint64_t v50 = (uint64_t *)((char *)v50 + v44);
    }
    while (v47 + 1 != v46);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  float *v55 = *v53 * _S1;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (__int16 *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (__int16 *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (__int16 *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (__int16 *)((char *)v42 + v62);
      uint64_t v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = *v53 * COERCE_FLOAT(*v52 << 16);
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (float *)((char *)v53 + v34);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (float *)((char *)v49 + v31);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (float *)((char *)v45 + v32);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (float *)((char *)v41 + v55);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = *v52 * COERCE_FLOAT(*v53 << 16);
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (unsigned __int16 *)((char *)v53 + v34);
                  uint64_t v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (unsigned __int16 *)((char *)v49 + v31);
              uint64_t v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (unsigned __int16 *)((char *)v45 + v32);
          uint64_t v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (unsigned __int16 *)((char *)v41 + v55);
      uint64_t v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double _D0, float16x4_t _D1)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v12 = v9 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v65 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v9 - 3;
    uint64_t v66 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v9 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v9 - 2;
  uint64_t v66 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v9 - 3;
  uint64_t v57 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v14 = 0;
    uint64_t v13 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v12 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v9 - 4;
  uint64_t v18 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v49 = v18;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    uint64_t v21 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v21) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    }
    uint64_t v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    uint64_t v22 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v23 = 0;
    if (v19 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v24 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v24) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v6 + 56) + 8 * v24);
  }
  uint64_t v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    uint64_t v23 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
  {
    uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v23 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v25 = *(void *)(v7 + 16);
  uint64_t v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v26) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v7 + 56) + 8 * v26);
    }
    uint64_t v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    uint64_t v27 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v27) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v7 + 56) + 8 * v27);
    }
    uint64_t v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v30) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v7 + 56) + 8 * v30);
    }
    uint64_t v28 = v25 - 1;
    goto LABEL_66;
  }
  uint64_t v28 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v29 = 0;
  if (v25 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v28) != 1)
    {
      uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v28);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v29 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v29 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v15) == 1)
  {
    uint64_t v48 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v12) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v31 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v53 = (_DWORD *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v52 = (__int32 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v51 = (_WORD *)(**a4 + *(void *)(v8 + 40));
    do
    {
      uint64_t v50 = v32;
      if (v57 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        uint64_t v59 = v51;
        do
        {
          uint64_t v58 = v33;
          if (v66 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = v60;
            uint64_t v36 = v61;
            uint64_t v37 = v59;
            do
            {
              uint64_t v67 = v34;
              uint64_t v38 = v65;
              uint64_t v39 = v36;
              uint64_t v40 = v35;
              uint64_t v41 = v37;
              if (v65 >= 1)
              {
                do
                {
                  LODWORD(_D0) = *v39;
                  _D1.i32[0] = *v40;
                  unint64_t v68 = vcvtq_f32_f16(_D1).u64[0];
                  unint64_t v69 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
                  *(float *)&_D0 = std::operator*[abi:nn180100]<float>((float *)&v69, (float *)&v68);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                  }
                  *uint64_t v41 = LOWORD(_D0);
                  v41[1] = _D1.i16[0];
                  uint64_t v41 = (_WORD *)((char *)v41 + v31);
                  uint64_t v40 = (__int32 *)((char *)v40 + v29);
                  uint64_t v39 = (_DWORD *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              uint64_t v34 = v67 + 1;
              uint64_t v37 = (_WORD *)((char *)v37 + v62);
              uint64_t v35 = (__int32 *)((char *)v35 + v63);
              uint64_t v36 = (_DWORD *)((char *)v36 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v33 = v58 + 1;
          uint64_t v59 = (_WORD *)((char *)v59 + v56);
          uint64_t v60 = (__int32 *)((char *)v60 + v54);
          uint64_t v61 = (_DWORD *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v32 = v50 + 1;
      uint64_t v51 = (_WORD *)((char *)v51 + v48);
      uint64_t v52 = (__int32 *)((char *)v52 + v46);
      uint64_t v53 = (_DWORD *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float *v55 = *v53 * *v54;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  uint64_t v54 = (short float *)((char *)v54 + v34);
                  uint64_t v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v56);
      uint64_t v41 = (short float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  float v54 = COERCE_FLOAT(*v51 << 16) * COERCE_FLOAT(*v52 << 16);
                  *uint64_t v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v33);
                  uint64_t v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v30);
              uint64_t v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + v31);
          uint64_t v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v57);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v55);
      uint64_t v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (void *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (void *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (void *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 * *v51;
                  uint64_t v53 = (void *)((char *)v53 + v37);
                  uint64_t v52 = (void *)((char *)v52 + v33);
                  uint64_t v51 = (void *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (void *)((char *)v49 + v36);
              uint64_t v48 = (void *)((char *)v48 + v30);
              uint64_t v47 = (void *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (void *)((char *)v45 + v35);
          uint64_t v44 = (void *)((char *)v44 + v31);
          uint64_t v43 = (void *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (void *)((char *)v41 + v56);
      uint64_t v40 = (void *)((char *)v40 + v54);
      uint64_t v39 = (void *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_DWORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_DWORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 * *v51;
                  uint64_t v53 = (_DWORD *)((char *)v53 + v37);
                  uint64_t v52 = (_DWORD *)((char *)v52 + v33);
                  uint64_t v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_DWORD *)((char *)v49 + v36);
              uint64_t v48 = (_DWORD *)((char *)v48 + v30);
              uint64_t v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_DWORD *)((char *)v45 + v35);
          uint64_t v44 = (_DWORD *)((char *)v44 + v31);
          uint64_t v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_DWORD *)((char *)v41 + v56);
      uint64_t v40 = (_DWORD *)((char *)v40 + v54);
      uint64_t v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_WORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_WORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 * *v51;
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (_WORD *)((char *)v52 + v33);
                  uint64_t v51 = (_WORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (_WORD *)((char *)v48 + v30);
              uint64_t v47 = (_WORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (_WORD *)((char *)v44 + v31);
          uint64_t v43 = (_WORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v56);
      uint64_t v40 = (_WORD *)((char *)v40 + v54);
      uint64_t v39 = (_WORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v52 * *v51;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

float std::operator*[abi:nn180100]<float>(float *a1, float *a2)
{
  return (float)(*a1 * *a2) - (float)(a1[1] * a2[1]);
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v61 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v61 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v62 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v53 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v62 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v53 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v45 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v43 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v51 = 0;
  uint64_t v43 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v59 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v42 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v50 = 0;
    uint64_t v42 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v59 = 0;
  uint64_t v42 = 0;
  uint64_t v50 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v58 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v44 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v44 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v52 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v52 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v58 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v45 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v49 = (uint64_t *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v48 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v47 = **a4 + *(void *)(v6 + 40);
    do
    {
      uint64_t v46 = v30;
      if (v53 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v56 = v48;
        uint64_t v57 = v49;
        uint64_t v55 = v47;
        do
        {
          uint64_t v54 = v31;
          if (v62 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v56;
            uint64_t v34 = v57;
            uint64_t v35 = v55;
            do
            {
              uint64_t v63 = v32;
              uint64_t v36 = v61;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v61 >= 1)
              {
                do
                {
                  uint64_t v40 = *v37;
                  uint64_t v64 = *v38;
                  uint64_t v65 = v40;
                  *(float *)uint64_t v39 = std::operator/[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v39 + 4) = v41;
                  v39 += v29;
                  uint64_t v38 = (uint64_t *)((char *)v38 + v27);
                  uint64_t v37 = (uint64_t *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v63 + 1;
              v35 += v58;
              uint64_t v33 = (uint64_t *)((char *)v33 + v59);
              uint64_t v34 = (uint64_t *)((char *)v34 + v60);
            }
            while (v63 + 1 != v62);
          }
          uint64_t v31 = v54 + 1;
          v55 += v52;
          uint64_t v56 = (uint64_t *)((char *)v56 + v50);
          uint64_t v57 = (uint64_t *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      uint64_t v30 = v46 + 1;
      v47 += v44;
      uint64_t v48 = (uint64_t *)((char *)v48 + v42);
      uint64_t v49 = (uint64_t *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    int v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float *v55 = *v53 / *v54;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v56);
      int v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, float16x4_t a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v7 = **a2;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v8 - 1;
  if (v8 <= 0)
  {
    uint64_t v11 = v8 - 2;
    uint64_t v61 = 1;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v61 = *(void *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v8 - 3;
    uint64_t v62 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v8 - 4;
    char v15 = 1;
    uint64_t v53 = 1;
    char v16 = 1;
LABEL_7:
    uint64_t v17 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v8 - 2;
  uint64_t v62 = *(void *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v8 - 3;
  uint64_t v53 = *(void *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    char v13 = 0;
    uint64_t v12 = 0;
    char v16 = 0;
    uint64_t v14 = -1;
    uint64_t v11 = 1;
    char v15 = 1;
    goto LABEL_7;
  }
  char v15 = 0;
  char v13 = 0;
  char v16 = 0;
  uint64_t v14 = v8 - 4;
  uint64_t v17 = *(void *)(v10 + 8 * (v8 - 4));
LABEL_8:
  uint64_t v45 = v17;
  if (*(unsigned char *)(v5 + 50))
  {
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    uint64_t v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    uint64_t v20 = 0;
    uint64_t v43 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v20) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    }
    uint64_t v23 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    uint64_t v21 = 0;
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    uint64_t v22 = 0;
    if (v18 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v23 = 0;
  uint64_t v51 = 0;
  uint64_t v43 = 0;
LABEL_31:
  if (v23 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v23) == 1) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v23);
  }
  uint64_t v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    uint64_t v22 = 0;
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v59 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v5 + 24) + 8 * v21) != 1)
  {
    uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if (*(unsigned char *)(v6 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v22 = 0;
LABEL_46:
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v24 = *(void *)(v6 + 16);
  uint64_t v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v25) == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    }
    uint64_t v26 = v24 - 3;
    goto LABEL_56;
  }
  if (v24 == 3)
  {
    uint64_t v26 = 0;
    uint64_t v42 = 0;
LABEL_56:
    if (v26 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v26) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v26);
    }
    uint64_t v29 = v24 - 2;
    goto LABEL_61;
  }
  if (v24 >= 2)
  {
    uint64_t v29 = 0;
    uint64_t v50 = 0;
    uint64_t v42 = 0;
LABEL_61:
    if (v29 > (int)v24 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v29) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v29);
    }
    uint64_t v27 = v24 - 1;
    goto LABEL_66;
  }
  uint64_t v27 = 0;
  uint64_t v59 = 0;
  uint64_t v42 = 0;
  uint64_t v50 = 0;
  uint64_t v28 = 0;
  if (v24 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v27 <= (int)v24 - 1)
  {
    if (*(void *)(*(void *)(v6 + 24) + 8 * v27) != 1)
    {
      uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v27);
      if (!*(unsigned char *)(v7 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v28 = 0;
LABEL_78:
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v58 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v28 = 0;
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v14) == 1)
  {
    uint64_t v44 = 0;
    if (v16) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v44 = *(void *)(*(void *)(v7 + 56) + 8 * v14);
    if (v16) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v52 = 0;
    if (v13) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v52 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
  if (v13) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v8 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v11) != 1)
  {
    uint64_t v58 = *(void *)(*(void *)(v7 + 56) + 8 * v11);
    if (v8 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v30 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v58 = 0;
  if (v8 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v9 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v9) == 1) {
    goto LABEL_80;
  }
  uint64_t v30 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v45 >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v49 = (__int32 *)(**(void **)a3 + *(void *)(v5 + 40));
    uint64_t v48 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v6 + 40));
    uint64_t v47 = **a4 + *(void *)(v7 + 40);
    do
    {
      uint64_t v46 = v31;
      if (v53 >= 1)
      {
        uint64_t v32 = 0;
        uint64_t v56 = v48;
        uint64_t v57 = v49;
        uint64_t v55 = v47;
        do
        {
          uint64_t v54 = v32;
          if (v62 >= 1)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v56;
            uint64_t v35 = v57;
            uint64_t v36 = v55;
            do
            {
              uint64_t v63 = v33;
              uint64_t v37 = v61;
              uint64_t v38 = v35;
              uint64_t v39 = v34;
              uint64_t v40 = v36;
              if (v61 >= 1)
              {
                do
                {
                  a5.i32[0] = *v38;
                  uint64_t v64 = *v39;
                  unint64_t v65 = vcvtq_f32_f16(a5).u64[0];
                  *(float *)uint64_t v40 = std::operator/[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v40 + 4) = v41;
                  v40 += v30;
                  uint64_t v39 = (uint64_t *)((char *)v39 + v28);
                  uint64_t v38 = (__int32 *)((char *)v38 + v22);
                  --v37;
                }
                while (v37);
              }
              uint64_t v33 = v63 + 1;
              v36 += v58;
              uint64_t v34 = (uint64_t *)((char *)v34 + v59);
              uint64_t v35 = (__int32 *)((char *)v35 + v60);
            }
            while (v63 + 1 != v62);
          }
          uint64_t v32 = v54 + 1;
          v55 += v52;
          uint64_t v56 = (uint64_t *)((char *)v56 + v50);
          uint64_t v57 = (__int32 *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      uint64_t v31 = v46 + 1;
      v47 += v44;
      uint64_t v48 = (uint64_t *)((char *)v48 + v42);
      uint64_t v49 = (__int32 *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    int v41 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  float *v55 = _S0 / *v54;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (float *)((char *)v54 + v34);
                  uint64_t v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v62);
      int v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double a5, float16x4_t a6)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v12 = v9 - 2;
    uint64_t v62 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v62 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v9 - 3;
    uint64_t v63 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v9 - 4;
    char v16 = 1;
    uint64_t v54 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v9 - 2;
  uint64_t v63 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v9 - 3;
  uint64_t v54 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v14 = 0;
    uint64_t v13 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v12 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v9 - 4;
  uint64_t v18 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v46 = v18;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v61 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    uint64_t v21 = 0;
    uint64_t v44 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v21) == 1) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    }
    uint64_t v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    uint64_t v22 = 0;
    uint64_t v61 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    uint64_t v23 = 0;
    if (v19 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v24 = 0;
  uint64_t v52 = 0;
  uint64_t v44 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v24) == 1) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = *(void *)(*(void *)(v6 + 56) + 8 * v24);
  }
  uint64_t v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    uint64_t v23 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
  {
    uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v23 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v25 = *(void *)(v7 + 16);
  uint64_t v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v26) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v7 + 56) + 8 * v26);
    }
    uint64_t v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    uint64_t v27 = 0;
    uint64_t v43 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v27) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v7 + 56) + 8 * v27);
    }
    uint64_t v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    uint64_t v30 = 0;
    uint64_t v51 = 0;
    uint64_t v43 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v30) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v7 + 56) + 8 * v30);
    }
    uint64_t v28 = v25 - 1;
    goto LABEL_66;
  }
  uint64_t v28 = 0;
  uint64_t v60 = 0;
  uint64_t v43 = 0;
  uint64_t v51 = 0;
  uint64_t v29 = 0;
  if (v25 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v28) != 1)
    {
      uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v28);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v29 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v59 = 0;
    uint64_t v45 = 0;
    uint64_t v53 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v29 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v15) == 1)
  {
    uint64_t v45 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v45 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v53 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v53 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v12) != 1)
  {
    uint64_t v59 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v59 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v31 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v46 >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v50 = (uint64_t *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v49 = (__int32 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v48 = **a4 + *(void *)(v8 + 40);
    do
    {
      uint64_t v47 = v32;
      if (v54 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v57 = v49;
        uint64_t v58 = v50;
        uint64_t v56 = v48;
        do
        {
          uint64_t v55 = v33;
          if (v63 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = v57;
            uint64_t v36 = v58;
            uint64_t v37 = v56;
            do
            {
              uint64_t v64 = v34;
              uint64_t v38 = v62;
              uint64_t v39 = v36;
              uint64_t v40 = v35;
              uint64_t v41 = v37;
              if (v62 >= 1)
              {
                do
                {
                  uint64_t v42 = *v39;
                  a6.i32[0] = *v40;
                  unint64_t v65 = vcvtq_f32_f16(a6).u64[0];
                  uint64_t v66 = v42;
                  *(float *)uint64_t v41 = std::operator/[abi:nn180100]<float>((float *)&v66, (float *)&v65);
                  *(_DWORD *)(v41 + 4) = a6.i32[0];
                  v41 += v31;
                  uint64_t v40 = (__int32 *)((char *)v40 + v29);
                  uint64_t v39 = (uint64_t *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              uint64_t v34 = v64 + 1;
              v37 += v59;
              uint64_t v35 = (__int32 *)((char *)v35 + v60);
              uint64_t v36 = (uint64_t *)((char *)v36 + v61);
            }
            while (v64 + 1 != v63);
          }
          uint64_t v33 = v55 + 1;
          v56 += v53;
          uint64_t v57 = (__int32 *)((char *)v57 + v51);
          uint64_t v58 = (uint64_t *)((char *)v58 + v52);
        }
        while (v55 + 1 != v54);
      }
      uint64_t v32 = v47 + 1;
      v48 += v45;
      uint64_t v49 = (__int32 *)((char *)v49 + v43);
      uint64_t v50 = (uint64_t *)((char *)v50 + v44);
    }
    while (v47 + 1 != v46);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  float *v55 = *v53 / _S1;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  uint64_t v54 = (__int16 *)((char *)v54 + v34);
                  uint64_t v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (__int16 *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (__int16 *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (__int16 *)((char *)v42 + v62);
      uint64_t v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = COERCE_FLOAT(*v52 << 16) / *v53;
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (float *)((char *)v53 + v34);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (float *)((char *)v49 + v31);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (float *)((char *)v45 + v32);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (float *)((char *)v41 + v55);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v57 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  float *v54 = *v52 / COERCE_FLOAT(*v53 << 16);
                  uint64_t v54 = (float *)((char *)v54 + v38);
                  uint64_t v53 = (unsigned __int16 *)((char *)v53 + v34);
                  uint64_t v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (unsigned __int16 *)((char *)v49 + v31);
              uint64_t v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (unsigned __int16 *)((char *)v45 + v32);
          uint64_t v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (unsigned __int16 *)((char *)v41 + v55);
      uint64_t v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double _D0, float16x4_t _D1)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v12 = v9 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v65 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v9 - 3;
    uint64_t v66 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v9 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v9 - 2;
  uint64_t v66 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v9 - 3;
  uint64_t v57 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v14 = 0;
    uint64_t v13 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v12 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v9 - 4;
  uint64_t v18 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v49 = v18;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    uint64_t v21 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v21) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    }
    uint64_t v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    uint64_t v22 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v23 = 0;
    if (v19 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v24 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v24) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v6 + 56) + 8 * v24);
  }
  uint64_t v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    uint64_t v23 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
  {
    uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v23 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v25 = *(void *)(v7 + 16);
  uint64_t v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v26) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v7 + 56) + 8 * v26);
    }
    uint64_t v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    uint64_t v27 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v27) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v7 + 56) + 8 * v27);
    }
    uint64_t v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v30) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v7 + 56) + 8 * v30);
    }
    uint64_t v28 = v25 - 1;
    goto LABEL_66;
  }
  uint64_t v28 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v29 = 0;
  if (v25 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v28) != 1)
    {
      uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v28);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v29 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v29 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v15) == 1)
  {
    uint64_t v48 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v12) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v31 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v53 = (_DWORD *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v52 = (__int32 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v51 = (_WORD *)(**a4 + *(void *)(v8 + 40));
    do
    {
      uint64_t v50 = v32;
      if (v57 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        uint64_t v59 = v51;
        do
        {
          uint64_t v58 = v33;
          if (v66 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = v60;
            uint64_t v36 = v61;
            uint64_t v37 = v59;
            do
            {
              uint64_t v67 = v34;
              uint64_t v38 = v65;
              uint64_t v39 = v36;
              uint64_t v40 = v35;
              uint64_t v41 = v37;
              if (v65 >= 1)
              {
                do
                {
                  LODWORD(_D0) = *v39;
                  _D1.i32[0] = *v40;
                  unint64_t v68 = vcvtq_f32_f16(_D1).u64[0];
                  unint64_t v69 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
                  *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v69, (float *)&v68);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                  }
                  *uint64_t v41 = LOWORD(_D0);
                  v41[1] = _D1.i16[0];
                  uint64_t v41 = (_WORD *)((char *)v41 + v31);
                  uint64_t v40 = (__int32 *)((char *)v40 + v29);
                  uint64_t v39 = (_DWORD *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              uint64_t v34 = v67 + 1;
              uint64_t v37 = (_WORD *)((char *)v37 + v62);
              uint64_t v35 = (__int32 *)((char *)v35 + v63);
              uint64_t v36 = (_DWORD *)((char *)v36 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v33 = v58 + 1;
          uint64_t v59 = (_WORD *)((char *)v59 + v56);
          uint64_t v60 = (__int32 *)((char *)v60 + v54);
          uint64_t v61 = (_DWORD *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v32 = v50 + 1;
      uint64_t v51 = (_WORD *)((char *)v51 + v48);
      uint64_t v52 = (__int32 *)((char *)v52 + v46);
      uint64_t v53 = (_DWORD *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              uint64_t v53 = v49;
              uint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float *v55 = *v53 / *v54;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  uint64_t v54 = (short float *)((char *)v54 + v34);
                  uint64_t v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v56);
      uint64_t v41 = (short float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  float v54 = COERCE_FLOAT(*v51 << 16) / COERCE_FLOAT(*v52 << 16);
                  *uint64_t v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v33);
                  uint64_t v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v30);
              uint64_t v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + v31);
          uint64_t v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v57);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v55);
      uint64_t v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (void *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (uint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 / *v52;
                  uint64_t v53 = (uint64_t *)((char *)v53 + v37);
                  uint64_t v52 = (uint64_t *)((char *)v52 + v33);
                  uint64_t v51 = (void *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (uint64_t *)((char *)v49 + v36);
              uint64_t v48 = (uint64_t *)((char *)v48 + v30);
              uint64_t v47 = (void *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (uint64_t *)((char *)v45 + v35);
          uint64_t v44 = (uint64_t *)((char *)v44 + v31);
          uint64_t v43 = (void *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (uint64_t *)((char *)v41 + v56);
      uint64_t v40 = (uint64_t *)((char *)v40 + v54);
      uint64_t v39 = (void *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (_DWORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (int *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 / *v52;
                  uint64_t v53 = (int *)((char *)v53 + v37);
                  uint64_t v52 = (_DWORD *)((char *)v52 + v33);
                  uint64_t v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (int *)((char *)v49 + v36);
              uint64_t v48 = (_DWORD *)((char *)v48 + v30);
              uint64_t v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (int *)((char *)v45 + v35);
          uint64_t v44 = (_DWORD *)((char *)v44 + v31);
          uint64_t v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (int *)((char *)v41 + v56);
      uint64_t v40 = (_DWORD *)((char *)v40 + v54);
      uint64_t v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 / *v52;
                  uint64_t v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (__int16 *)((char *)v52 + v33);
                  uint64_t v51 = (__int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (__int16 *)((char *)v48 + v30);
              uint64_t v47 = (__int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (__int16 *)((char *)v44 + v31);
          uint64_t v43 = (__int16 *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v56);
      uint64_t v40 = (__int16 *)((char *)v40 + v54);
      uint64_t v39 = (__int16 *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v54 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v54 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              uint64_t v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *uint64_t v53 = *v51 / *v52;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

float std::operator/[abi:nn180100]<float>(float *a1, float *a2)
{
  float v10 = *a1;
  float v9 = a1[1];
  float v11 = a2[1];
  float v13 = *a2;
  float v2 = logb(fmaxf(fabsf(*a2), fabsf(v11)));
  if ((LODWORD(v2) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    int v3 = 0;
    float v5 = v11;
  }
  else
  {
    int v3 = (int)v2;
    float v4 = ldexp(v13, -(int)v2);
    float v13 = v4;
    float v5 = ldexp(v11, -(int)v2);
  }
  float v12 = v5;
  float v6 = (float)(v5 * v5) + (float)(v13 * v13);
  float v7 = ldexp((float)((float)((float)(v9 * v5) + (float)(v10 * v13)) / v6), -v3);
  ldexp((float)((float)((float)(v9 * v13) - (float)(v10 * v12)) / v6), -v3);
  return v7;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v68 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v68 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v69 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v60 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v52 = v16;
  if (*(unsigned char *)(v5 + 50))
  {
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v5 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v50 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    uint64_t v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    uint64_t v70 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v21 = 0;
  uint64_t v58 = 0;
  uint64_t v50 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v70 = 0;
    if (!*(unsigned char *)(v4 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v66 = 0;
    uint64_t v49 = 0;
    uint64_t v57 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v5 + 24) + 8 * v20) != 1)
  {
    uint64_t v70 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if (*(unsigned char *)(v4 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v70 = 0;
LABEL_46:
  if (*(unsigned char *)(v4 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v49 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    uint64_t v27 = 0;
    uint64_t v57 = 0;
    uint64_t v49 = 0;
LABEL_61:
    if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
    }
    uint64_t v25 = v22 - 1;
    goto LABEL_66;
  }
  uint64_t v25 = 0;
  uint64_t v66 = 0;
  uint64_t v49 = 0;
  uint64_t v57 = 0;
  uint64_t v26 = 0;
  if (v22 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
    {
      uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v26 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v65 = 0;
    uint64_t v51 = 0;
    uint64_t v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v26 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v51 = 0;
    if (v15) {
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_110;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_110:
    uint64_t v59 = 0;
    if (v12) {
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_113;
  }
LABEL_111:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_114;
    }
LABEL_80:
    uint64_t v28 = 0;
    goto LABEL_81;
  }
LABEL_113:
  uint64_t v65 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_114:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v52 >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v56 = (float *)(**(void **)a3 + *(void *)(v5 + 40));
    uint64_t v55 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v4 + 40));
    uint64_t v54 = **a4 + *(void *)(v6 + 40);
    while (1)
    {
      uint64_t v53 = v29;
      if (v60 >= 1) {
        break;
      }
LABEL_83:
      uint64_t v29 = v53 + 1;
      v54 += v51;
      uint64_t v55 = (uint64_t *)((char *)v55 + v49);
      uint64_t v56 = (float *)((char *)v56 + v50);
      if (v53 + 1 == v52) {
        return;
      }
    }
    uint64_t v30 = 0;
    uint64_t v63 = v55;
    uint64_t v64 = v56;
    uint64_t v62 = v54;
    while (1)
    {
      uint64_t v61 = v30;
      if (v69 >= 1) {
        break;
      }
LABEL_86:
      uint64_t v30 = v61 + 1;
      v62 += v59;
      uint64_t v63 = (uint64_t *)((char *)v63 + v57);
      uint64_t v64 = (float *)((char *)v64 + v58);
      if (v61 + 1 == v60) {
        goto LABEL_83;
      }
    }
    uint64_t v31 = 0;
    uint64_t v33 = v63;
    uint64_t v32 = v64;
    uint64_t v34 = v62;
    while (1)
    {
      uint64_t v35 = v68;
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      if (v68 >= 1) {
        break;
      }
LABEL_89:
      ++v31;
      v34 += v65;
      uint64_t v33 = (uint64_t *)((char *)v33 + v66);
      uint64_t v32 = (float *)((char *)v32 + v67);
      if (v31 == v69) {
        goto LABEL_86;
      }
    }
    while (1)
    {
      float v42 = *v36;
      float v43 = v36[1];
      uint64_t v73 = *v37;
      float v44 = hypotf(v42, v43);
      float v45 = logf(v44);
      float v46 = atan2f(v43, v42);
      v74[0] = v45;
      v74[1] = v46;
      float v39 = std::operator*[abi:nn180100]<float>((float *)&v73, v74);
      if (*(float *)v41.i32 == 0.0)
      {
        int8x16_t v71 = v41;
        float v39 = expf(v39);
        v41.i64[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v41.i32[0] = vbslq_s8(v40, v41, v71).u32[0];
      }
      else
      {
        if (fabsf(v39) == INFINITY)
        {
          if (v39 >= 0.0)
          {
            if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)v41.i32) == INFINITY) {
                *(float *)v41.i32 = NAN;
              }
              goto LABEL_93;
            }
          }
          else if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)v41.i32 = 1.0;
          }
        }
        float v72 = *(float *)v41.i32;
        float v47 = expf(v39);
        __float2 v48 = __sincosf_stret(v72);
        float v39 = v47 * v48.__cosval;
        *(float *)v41.i32 = v47 * v48.__sinval;
      }
LABEL_93:
      *(float *)uint64_t v38 = v39;
      *(_DWORD *)(v38 + 4) = v41.i32[0];
      v38 += v28;
      uint64_t v37 = (uint64_t *)((char *)v37 + v26);
      uint64_t v36 = (float *)((char *)v36 + v70);
      if (!--v35) {
        goto LABEL_89;
      }
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    float v47 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    float v46 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              float v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *float v39 = powf(*v37, *v38);
                  float v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (float *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (float *)((char *)v35 + v56);
              uint64_t v33 = (float *)((char *)v33 + v57);
              uint64_t v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (float *)((char *)v53 + v50);
          uint64_t v54 = (float *)((char *)v54 + v48);
          uint64_t v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (float *)((char *)v45 + v42);
      float v46 = (float *)((char *)v46 + v40);
      float v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v74 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v74 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v75 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v66 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v75 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v66 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v16;
  if (*(unsigned char *)(v5 + 50))
  {
    uint64_t v73 = 0;
    uint64_t v56 = 0;
    uint64_t v64 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v5 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    uint64_t v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v73 = 0;
    uint64_t v56 = 0;
    uint64_t v64 = 0;
    uint64_t v76 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v21 = 0;
  uint64_t v64 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
    uint64_t v73 = 0;
  }
  else {
    uint64_t v73 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v76 = 0;
    if (!*(unsigned char *)(v4 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v72 = 0;
    uint64_t v55 = 0;
    uint64_t v63 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v5 + 24) + 8 * v20) != 1)
  {
    uint64_t v76 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if (*(unsigned char *)(v4 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v76 = 0;
LABEL_46:
  if (*(unsigned char *)(v4 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    uint64_t v27 = 0;
    uint64_t v63 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
      uint64_t v72 = 0;
    }
    else {
      uint64_t v72 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
    }
    uint64_t v25 = v22 - 1;
    goto LABEL_66;
  }
  uint64_t v25 = 0;
  uint64_t v72 = 0;
  uint64_t v55 = 0;
  uint64_t v63 = 0;
  uint64_t v26 = 0;
  if (v22 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
    {
      uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v26 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v71 = 0;
    uint64_t v57 = 0;
    uint64_t v65 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v26 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v57 = 0;
    if (v15) {
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_110;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_110:
    uint64_t v65 = 0;
    if (v12) {
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_113;
  }
LABEL_111:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v71 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_114;
    }
LABEL_80:
    uint64_t v28 = 0;
    goto LABEL_81;
  }
LABEL_113:
  uint64_t v71 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_114:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v62 = (__int16 *)(**(void **)a3 + *(void *)(v5 + 40));
    uint64_t v61 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v4 + 40));
    uint64_t v60 = **a4 + *(void *)(v6 + 40);
    while (1)
    {
      uint64_t v59 = v29;
      if (v66 >= 1) {
        break;
      }
LABEL_83:
      uint64_t v29 = v59 + 1;
      v60 += v57;
      uint64_t v61 = (uint64_t *)((char *)v61 + v55);
      uint64_t v62 = (__int16 *)((char *)v62 + v56);
      if (v59 + 1 == v58) {
        return;
      }
    }
    uint64_t v30 = 0;
    uint64_t v69 = v61;
    uint64_t v70 = v62;
    uint64_t v68 = v60;
    while (1)
    {
      uint64_t v67 = v30;
      if (v75 >= 1) {
        break;
      }
LABEL_86:
      uint64_t v30 = v67 + 1;
      v68 += v65;
      uint64_t v69 = (uint64_t *)((char *)v69 + v63);
      uint64_t v70 = (__int16 *)((char *)v70 + v64);
      if (v67 + 1 == v66) {
        goto LABEL_83;
      }
    }
    uint64_t v31 = 0;
    uint64_t v33 = v69;
    uint64_t v32 = v70;
    uint64_t v34 = v68;
    while (1)
    {
      uint64_t v35 = v74;
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      if (v74 >= 1) {
        break;
      }
LABEL_89:
      ++v31;
      v34 += v71;
      uint64_t v33 = (uint64_t *)((char *)v33 + v72);
      uint64_t v32 = (__int16 *)((char *)v32 + v73);
      if (v31 == v75) {
        goto LABEL_86;
      }
    }
    while (1)
    {
      _H0 = *v36;
      __asm { FCVT            S8, H0 }
      _H0 = v36[1];
      __asm { FCVT            S9, H0 }
      uint64_t v79 = *v37;
      float v50 = hypotf(_S8, _S9);
      float v51 = logf(v50);
      float v52 = atan2f(_S9, _S8);
      v80[0] = v51;
      v80[1] = v52;
      float v39 = std::operator*[abi:nn180100]<float>((float *)&v79, v80);
      if (*(float *)v41.i32 == 0.0)
      {
        int8x16_t v77 = v41;
        float v39 = expf(v39);
        v41.i64[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v41.i32[0] = vbslq_s8(v40, v41, v77).u32[0];
      }
      else
      {
        if (fabsf(v39) == INFINITY)
        {
          if (v39 >= 0.0)
          {
            if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)v41.i32) == INFINITY) {
                *(float *)v41.i32 = NAN;
              }
              goto LABEL_93;
            }
          }
          else if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)v41.i32 = 1.0;
          }
        }
        float v78 = *(float *)v41.i32;
        float v53 = expf(v39);
        __float2 v54 = __sincosf_stret(v78);
        float v39 = v53 * v54.__cosval;
        *(float *)v41.i32 = v53 * v54.__sinval;
      }
LABEL_93:
      *(float *)uint64_t v38 = v39;
      *(_DWORD *)(v38 + 4) = v41.i32[0];
      v38 += v28;
      uint64_t v37 = (uint64_t *)((char *)v37 + v26);
      uint64_t v36 = (__int16 *)((char *)v36 + v76);
      if (!--v35) {
        goto LABEL_89;
      }
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v65 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v66 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v57 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v66 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v49 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v48 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v30 = 0;
    float v53 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    float v52 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v51 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v50 = v30;
      if (v57 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        uint64_t v59 = v51;
        do
        {
          uint64_t v58 = v31;
          if (v66 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v60;
            uint64_t v34 = v61;
            uint64_t v35 = v59;
            do
            {
              uint64_t v67 = v32;
              uint64_t v36 = v65;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              float v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  __asm { FCVT            S0, H0; float }
                  *float v39 = powf(_S0, *v38);
                  float v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (float *)((char *)v38 + v27);
                  uint64_t v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v67 + 1;
              uint64_t v35 = (float *)((char *)v35 + v62);
              uint64_t v33 = (float *)((char *)v33 + v63);
              uint64_t v34 = (__int16 *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v31 = v58 + 1;
          uint64_t v59 = (float *)((char *)v59 + v56);
          uint64_t v60 = (float *)((char *)v60 + v54);
          uint64_t v61 = (__int16 *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v30 = v50 + 1;
      float v51 = (float *)((char *)v51 + v48);
      float v52 = (float *)((char *)v52 + v46);
      float v53 = (__int16 *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double a5)
{
  uint64_t v6 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v7 = **a2;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v8 - 1;
  if (v8 <= 0)
  {
    uint64_t v11 = v8 - 2;
    uint64_t v68 = 1;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v68 = *(void *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v8 - 3;
    uint64_t v69 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v8 - 4;
    char v15 = 1;
    uint64_t v60 = 1;
    char v16 = 1;
LABEL_7:
    uint64_t v17 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v8 - 2;
  uint64_t v69 = *(void *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v8 - 3;
  uint64_t v60 = *(void *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    char v13 = 0;
    uint64_t v12 = 0;
    char v16 = 0;
    uint64_t v14 = -1;
    uint64_t v11 = 1;
    char v15 = 1;
    goto LABEL_7;
  }
  char v15 = 0;
  char v13 = 0;
  char v16 = 0;
  uint64_t v14 = v8 - 4;
  uint64_t v17 = *(void *)(v10 + 8 * (v8 - 4));
LABEL_8:
  uint64_t v52 = v17;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v6 + 16);
  uint64_t v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v19) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v19);
    }
    uint64_t v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    uint64_t v20 = 0;
    uint64_t v50 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v22 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    uint64_t v21 = 0;
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    uint64_t v70 = 0;
    if (v18 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v58 = 0;
  uint64_t v50 = 0;
LABEL_31:
  if (v22 > (int)v18 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v22) == 1) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
  }
  uint64_t v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    uint64_t v70 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v66 = 0;
    uint64_t v49 = 0;
    uint64_t v57 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v21) != 1)
  {
    uint64_t v70 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v70 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v49 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v57 = 0;
    uint64_t v49 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v66 = 0;
  uint64_t v49 = 0;
  uint64_t v57 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v7 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v65 = 0;
    uint64_t v51 = 0;
    uint64_t v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v14) == 1)
  {
    uint64_t v51 = 0;
    if (v16) {
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v51 = *(void *)(*(void *)(v7 + 56) + 8 * v14);
    if (v16) {
      goto LABEL_110;
    }
  }
  if (v12 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_110:
    uint64_t v59 = 0;
    if (v13) {
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  uint64_t v59 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
  if (v13) {
    goto LABEL_113;
  }
LABEL_111:
  if (v11 <= (int)v8 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v11) != 1)
  {
    uint64_t v65 = *(void *)(*(void *)(v7 + 56) + 8 * v11);
    if (v8 >= 1) {
      goto LABEL_114;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_113:
  uint64_t v65 = 0;
  if (v8 < 1) {
    goto LABEL_80;
  }
LABEL_114:
  if (v9 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v9) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v52 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v56 = (float *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v55 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v54 = (_DWORD *)(**a4 + *(void *)(v7 + 40));
    while (1)
    {
      uint64_t v53 = v30;
      if (v60 >= 1) {
        break;
      }
LABEL_83:
      uint64_t v30 = v53 + 1;
      uint64_t v54 = (_DWORD *)((char *)v54 + v51);
      uint64_t v55 = (_DWORD *)((char *)v55 + v49);
      uint64_t v56 = (float *)((char *)v56 + v50);
      if (v53 + 1 == v52) {
        return;
      }
    }
    uint64_t v31 = 0;
    uint64_t v63 = v55;
    uint64_t v64 = v56;
    uint64_t v62 = v54;
    while (1)
    {
      uint64_t v61 = v31;
      if (v69 >= 1) {
        break;
      }
LABEL_86:
      uint64_t v31 = v61 + 1;
      uint64_t v62 = (_DWORD *)((char *)v62 + v59);
      uint64_t v63 = (_DWORD *)((char *)v63 + v57);
      uint64_t v64 = (float *)((char *)v64 + v58);
      if (v61 + 1 == v60) {
        goto LABEL_83;
      }
    }
    uint64_t v32 = 0;
    uint64_t v34 = v63;
    uint64_t v33 = v64;
    uint64_t v35 = v62;
    while (1)
    {
      uint64_t v36 = v68;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      float v39 = v35;
      if (v68 >= 1) {
        break;
      }
LABEL_89:
      ++v32;
      uint64_t v35 = (_DWORD *)((char *)v35 + v65);
      uint64_t v34 = (_DWORD *)((char *)v34 + v66);
      uint64_t v33 = (float *)((char *)v33 + v67);
      if (v32 == v69) {
        goto LABEL_86;
      }
    }
    while (1)
    {
      float v42 = *v37;
      float v43 = v37[1];
      LODWORD(a5) = *v38;
      unint64_t v73 = vcvtq_f32_f16(*(float16x4_t *)&a5).u64[0];
      float v44 = hypotf(v42, v43);
      float v45 = logf(v44);
      float v46 = atan2f(v43, v42);
      v74[0] = v45;
      v74[1] = v46;
      *(float *)&a5 = std::operator*[abi:nn180100]<float>((float *)&v73, v74);
      if (*(float *)v41.i32 == 0.0)
      {
        int8x16_t v71 = v41;
        *(float *)&a5 = expf(*(float *)&a5);
        v41.i64[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v41.i32[0] = vbslq_s8(v40, v41, v71).u32[0];
      }
      else
      {
        if (fabsf(*(float *)&a5) == INFINITY)
        {
          if (*(float *)&a5 >= 0.0)
          {
            if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)v41.i32) == INFINITY) {
                *(float *)v41.i32 = NAN;
              }
              goto LABEL_93;
            }
          }
          else if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)v41.i32 = 1.0;
          }
        }
        float v72 = *(float *)v41.i32;
        float v47 = expf(*(float *)&a5);
        __float2 v48 = __sincosf_stret(v72);
        *(float *)&a5 = v47 * v48.__cosval;
        *(float *)v41.i32 = v47 * v48.__sinval;
      }
LABEL_93:
      *float v39 = LODWORD(a5);
      v39[1] = v41.i32[0];
      float v39 = (_DWORD *)((char *)v39 + v29);
      uint64_t v38 = (_DWORD *)((char *)v38 + v27);
      uint64_t v37 = (float *)((char *)v37 + v70);
      if (!--v36) {
        goto LABEL_89;
      }
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v65 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v66 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v57 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v66 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v49 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v48 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v53 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v52 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v51 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v50 = v30;
      if (v57 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        uint64_t v59 = v51;
        do
        {
          uint64_t v58 = v31;
          if (v66 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v60;
            uint64_t v34 = v61;
            uint64_t v35 = v59;
            do
            {
              uint64_t v67 = v32;
              uint64_t v36 = v65;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              float v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H1 = *v38;
                  __asm { FCVT            S1, H1; float }
                  *float v39 = powf(*v37, _S1);
                  float v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (__int16 *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v67 + 1;
              uint64_t v35 = (float *)((char *)v35 + v62);
              uint64_t v33 = (__int16 *)((char *)v33 + v63);
              uint64_t v34 = (float *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v31 = v58 + 1;
          uint64_t v59 = (float *)((char *)v59 + v56);
          uint64_t v60 = (__int16 *)((char *)v60 + v54);
          uint64_t v61 = (float *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v30 = v50 + 1;
      uint64_t v51 = (float *)((char *)v51 + v48);
      uint64_t v52 = (__int16 *)((char *)v52 + v46);
      uint64_t v53 = (float *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              float v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *float v39 = powf(COERCE_FLOAT(*v37 << 16), *v38);
                  float v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (float *)((char *)v38 + v27);
                  uint64_t v37 = (unsigned __int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (float *)((char *)v35 + v56);
              uint64_t v33 = (float *)((char *)v33 + v57);
              uint64_t v34 = (unsigned __int16 *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (float *)((char *)v53 + v50);
          uint64_t v54 = (float *)((char *)v54 + v48);
          uint64_t v55 = (unsigned __int16 *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (float *)((char *)v45 + v42);
      uint64_t v46 = (float *)((char *)v46 + v40);
      uint64_t v47 = (unsigned __int16 *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              float v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *float v39 = powf(*v37, COERCE_FLOAT(*v38 << 16));
                  float v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (unsigned __int16 *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (float *)((char *)v35 + v56);
              uint64_t v33 = (unsigned __int16 *)((char *)v33 + v57);
              uint64_t v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (float *)((char *)v53 + v50);
          uint64_t v54 = (unsigned __int16 *)((char *)v54 + v48);
          uint64_t v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (float *)((char *)v45 + v42);
      uint64_t v46 = (unsigned __int16 *)((char *)v46 + v40);
      uint64_t v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, double _D0)
{
  uint64_t v6 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v7 = **a2;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v8 - 1;
  if (v8 <= 0)
  {
    uint64_t v11 = v8 - 2;
    uint64_t v75 = 1;
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v75 = *(void *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v8 - 3;
    uint64_t v76 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v8 - 4;
    char v15 = 1;
    uint64_t v67 = 1;
    char v16 = 1;
LABEL_7:
    uint64_t v17 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v8 - 2;
  uint64_t v76 = *(void *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v8 - 3;
  uint64_t v67 = *(void *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    char v13 = 0;
    uint64_t v12 = 0;
    char v16 = 0;
    uint64_t v14 = -1;
    uint64_t v11 = 1;
    char v15 = 1;
    goto LABEL_7;
  }
  char v15 = 0;
  char v13 = 0;
  char v16 = 0;
  uint64_t v14 = v8 - 4;
  uint64_t v17 = *(void *)(v10 + 8 * (v8 - 4));
LABEL_8:
  uint64_t v59 = v17;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v74 = 0;
    uint64_t v57 = 0;
    uint64_t v65 = 0;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v6 + 16);
  uint64_t v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v19) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v19);
    }
    uint64_t v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v65 = 0;
    }
    else {
      uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v22 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    uint64_t v21 = 0;
    uint64_t v74 = 0;
    uint64_t v57 = 0;
    uint64_t v65 = 0;
    uint64_t v77 = 0;
    if (v18 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v65 = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v22 > (int)v18 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v22) == 1) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
  }
  uint64_t v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    uint64_t v77 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v73 = 0;
    uint64_t v56 = 0;
    uint64_t v64 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v21) != 1)
  {
    uint64_t v77 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v77 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v64 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v73 = 0;
    }
    else {
      uint64_t v73 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v73 = 0;
  uint64_t v56 = 0;
  uint64_t v64 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v7 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v72 = 0;
    uint64_t v58 = 0;
    uint64_t v66 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v14) == 1)
  {
    uint64_t v58 = 0;
    if (v16) {
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(*(void *)(v7 + 56) + 8 * v14);
    if (v16) {
      goto LABEL_110;
    }
  }
  if (v12 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_110:
    uint64_t v66 = 0;
    if (v13) {
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  uint64_t v66 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
  if (v13) {
    goto LABEL_113;
  }
LABEL_111:
  if (v11 <= (int)v8 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v11) != 1)
  {
    uint64_t v72 = *(void *)(*(void *)(v7 + 56) + 8 * v11);
    if (v8 >= 1) {
      goto LABEL_114;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_113:
  uint64_t v72 = 0;
  if (v8 < 1) {
    goto LABEL_80;
  }
LABEL_114:
  if (v9 > (int)v8 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v9) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v63 = (_WORD *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v62 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v61 = (_WORD *)(**a4 + *(void *)(v7 + 40));
    while (1)
    {
      uint64_t v60 = v30;
      if (v67 >= 1) {
        break;
      }
LABEL_83:
      uint64_t v30 = v60 + 1;
      uint64_t v61 = (_WORD *)((char *)v61 + v58);
      uint64_t v62 = (_DWORD *)((char *)v62 + v56);
      uint64_t v63 = (_WORD *)((char *)v63 + v57);
      if (v60 + 1 == v59) {
        return;
      }
    }
    uint64_t v31 = 0;
    uint64_t v70 = v62;
    int8x16_t v71 = v63;
    uint64_t v69 = v61;
    while (1)
    {
      uint64_t v68 = v31;
      if (v76 >= 1) {
        break;
      }
LABEL_86:
      uint64_t v31 = v68 + 1;
      uint64_t v69 = (_WORD *)((char *)v69 + v66);
      uint64_t v70 = (_DWORD *)((char *)v70 + v64);
      int8x16_t v71 = (_WORD *)((char *)v71 + v65);
      if (v68 + 1 == v67) {
        goto LABEL_83;
      }
    }
    uint64_t v32 = 0;
    uint64_t v34 = v70;
    uint64_t v33 = v71;
    uint64_t v35 = v69;
    while (1)
    {
      uint64_t v36 = v75;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      float v39 = v35;
      if (v75 >= 1) {
        break;
      }
LABEL_89:
      ++v32;
      uint64_t v35 = (_WORD *)((char *)v35 + v72);
      uint64_t v34 = (_DWORD *)((char *)v34 + v73);
      uint64_t v33 = (_WORD *)((char *)v33 + v74);
      if (v32 == v76) {
        goto LABEL_86;
      }
    }
    while (1)
    {
      LOWORD(_D0) = *v37;
      _H1 = v37[1];
      __asm
      {
        FCVT            S8, H0
        FCVT            S9, H1
      }
      LODWORD(_D0) = *v38;
      unint64_t v80 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
      float v51 = hypotf(_S8, _S9);
      float v52 = logf(v51);
      float v53 = atan2f(_S9, _S8);
      v81[0] = v52;
      v81[1] = v53;
      *(float *)&_D0 = std::operator*[abi:nn180100]<float>((float *)&v80, v81);
      if (*(float *)_Q1.i32 == 0.0)
      {
        int8x16_t v78 = _Q1;
        *(float *)&_D0 = expf(*(float *)&_D0);
        _Q1.i64[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        _Q1.i32[0] = vbslq_s8(v40, _Q1, v78).u32[0];
      }
      else
      {
        if (fabsf(*(float *)&_D0) == INFINITY)
        {
          if (*(float *)&_D0 >= 0.0)
          {
            if ((_Q1.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)_Q1.i32) == INFINITY) {
                *(float *)_Q1.i32 = NAN;
              }
              goto LABEL_93;
            }
          }
          else if ((_Q1.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)_Q1.i32 = 1.0;
          }
        }
        float v79 = *(float *)_Q1.i32;
        float v54 = expf(*(float *)&_D0);
        __float2 v55 = __sincosf_stret(v79);
        *(float *)&_D0 = v54 * v55.__cosval;
        *(float *)_Q1.i32 = v54 * v55.__sinval;
      }
LABEL_93:
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *float v39 = _H0;
      v39[1] = _H1;
      float v39 = (_WORD *)((char *)v39 + v29);
      uint64_t v38 = (_DWORD *)((char *)v38 + v27);
      uint64_t v37 = (_WORD *)((char *)v37 + v77);
      if (!--v36) {
        goto LABEL_89;
      }
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v68 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v68 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v69 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v60 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v52 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v50 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v58 = 0;
  uint64_t v50 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v66 = 0;
    uint64_t v49 = 0;
    uint64_t v57 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v49 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v57 = 0;
    uint64_t v49 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v66 = 0;
  uint64_t v49 = 0;
  uint64_t v57 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v65 = 0;
    uint64_t v51 = 0;
    uint64_t v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v51 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v59 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v65 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v52 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v56 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    __float2 v55 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v54 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v53 = v30;
      if (v60 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v63 = v55;
        uint64_t v64 = v56;
        uint64_t v62 = v54;
        do
        {
          uint64_t v61 = v31;
          if (v69 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v63;
            uint64_t v34 = v64;
            uint64_t v35 = v62;
            do
            {
              uint64_t v70 = v32;
              uint64_t v36 = v68;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              float v39 = v35;
              if (v68 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  _H1 = *v38;
                  __asm
                  {
                    FCVT            S0, H0; float
                    FCVT            S1, H1; float
                  }
                  _S0 = powf(_S0, _S1);
                  __asm { FCVT            H0, S0 }
                  *float v39 = LOWORD(_S0);
                  float v39 = (_WORD *)((char *)v39 + v29);
                  uint64_t v38 = (__int16 *)((char *)v38 + v27);
                  uint64_t v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v70 + 1;
              uint64_t v35 = (_WORD *)((char *)v35 + v65);
              uint64_t v33 = (__int16 *)((char *)v33 + v66);
              uint64_t v34 = (__int16 *)((char *)v34 + v67);
            }
            while (v70 + 1 != v69);
          }
          uint64_t v31 = v61 + 1;
          uint64_t v62 = (_WORD *)((char *)v62 + v59);
          uint64_t v63 = (__int16 *)((char *)v63 + v57);
          uint64_t v64 = (__int16 *)((char *)v64 + v58);
        }
        while (v61 + 1 != v60);
      }
      uint64_t v30 = v53 + 1;
      float v54 = (_WORD *)((char *)v54 + v51);
      __float2 v55 = (__int16 *)((char *)v55 + v49);
      uint64_t v56 = (__int16 *)((char *)v56 + v50);
    }
    while (v53 + 1 != v52);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v58 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v58 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v59 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v50 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v50 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v42 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v40 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    uint64_t v61 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v21 = 0;
  uint64_t v48 = 0;
  uint64_t v40 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v61 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v56 = 0;
    uint64_t v39 = 0;
    uint64_t v47 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v61 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v61 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v22 = *(void *)(v5 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v23) == 1) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v39 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v26 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    uint64_t v26 = 0;
    uint64_t v47 = 0;
    uint64_t v39 = 0;
LABEL_61:
    if (v26 > (int)v22 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v26) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
    }
    uint64_t v25 = v22 - 1;
    goto LABEL_66;
  }
  uint64_t v25 = 0;
  uint64_t v56 = 0;
  uint64_t v39 = 0;
  uint64_t v47 = 0;
  uint64_t v60 = 0;
  if (v22 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v25) != 1)
    {
      uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v60 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v55 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v60 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v41 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v49 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v49 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v55 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v27 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v55 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v27 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v42 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v46 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    float v45 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v44 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v43 = v28;
      if (v50 >= 1)
      {
        uint64_t v29 = 0;
        uint64_t v53 = v45;
        float v54 = v46;
        uint64_t v52 = v44;
        do
        {
          uint64_t v51 = v29;
          if (v59 >= 1)
          {
            uint64_t v30 = 0;
            uint64_t v32 = v53;
            uint64_t v31 = v54;
            uint64_t v33 = v52;
            do
            {
              uint64_t v34 = v58;
              uint64_t v35 = v31;
              uint64_t v36 = v32;
              uint64_t v37 = v33;
              if (v58 >= 1)
              {
                do
                {
                  float v38 = powf(COERCE_FLOAT(*v35 << 16), COERCE_FLOAT(*v36 << 16));
                  *uint64_t v37 = HIWORD(COERCE_UNSIGNED_INT(v38 + (float)(COERCE_FLOAT(LODWORD(v38) & 0xFF800000) * 0.0039062)));
                  uint64_t v37 = (_WORD *)((char *)v37 + v27);
                  uint64_t v36 = (unsigned __int16 *)((char *)v36 + v60);
                  uint64_t v35 = (unsigned __int16 *)((char *)v35 + v61);
                  --v34;
                }
                while (v34);
              }
              ++v30;
              uint64_t v33 = (_WORD *)((char *)v33 + v55);
              uint64_t v32 = (unsigned __int16 *)((char *)v32 + v56);
              uint64_t v31 = (unsigned __int16 *)((char *)v31 + v57);
            }
            while (v30 != v59);
          }
          uint64_t v29 = v51 + 1;
          uint64_t v52 = (_WORD *)((char *)v52 + v49);
          uint64_t v53 = (unsigned __int16 *)((char *)v53 + v47);
          float v54 = (unsigned __int16 *)((char *)v54 + v48);
        }
        while (v51 + 1 != v50);
      }
      uint64_t v28 = v43 + 1;
      uint64_t v44 = (_WORD *)((char *)v44 + v41);
      float v45 = (unsigned __int16 *)((char *)v45 + v39);
      uint64_t v46 = (unsigned __int16 *)((char *)v46 + v40);
    }
    while (v43 + 1 != v42);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (uint64_t *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (void *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        float v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              float v38 = v33;
              uint64_t v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *uint64_t v39 = (uint64_t)pow((double)*v37, (double)*v38);
                  uint64_t v39 = (void *)((char *)v39 + v29);
                  float v38 = (uint64_t *)((char *)v38 + v27);
                  uint64_t v37 = (uint64_t *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (void *)((char *)v35 + v56);
              uint64_t v33 = (uint64_t *)((char *)v33 + v57);
              uint64_t v34 = (uint64_t *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (void *)((char *)v53 + v50);
          float v54 = (uint64_t *)((char *)v54 + v48);
          uint64_t v55 = (uint64_t *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (void *)((char *)v45 + v42);
      uint64_t v46 = (uint64_t *)((char *)v46 + v40);
      uint64_t v47 = (uint64_t *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (int *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (int *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (_DWORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        float v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              float v38 = v33;
              uint64_t v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *uint64_t v39 = (int)pow((double)*v37, (double)*v38);
                  uint64_t v39 = (_DWORD *)((char *)v39 + v29);
                  float v38 = (int *)((char *)v38 + v27);
                  uint64_t v37 = (int *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (_DWORD *)((char *)v35 + v56);
              uint64_t v33 = (int *)((char *)v33 + v57);
              uint64_t v34 = (int *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (_DWORD *)((char *)v53 + v50);
          float v54 = (int *)((char *)v54 + v48);
          uint64_t v55 = (int *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (_DWORD *)((char *)v45 + v42);
      uint64_t v46 = (int *)((char *)v46 + v40);
      uint64_t v47 = (int *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4, long double a5, int16x4_t a6)
{
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v9 - 1;
  if (v9 <= 0)
  {
    uint64_t v12 = v9 - 2;
    uint64_t v61 = 1;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v61 = *(void *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    uint64_t v12 = -1;
LABEL_5:
    uint64_t v13 = v9 - 3;
    uint64_t v62 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v9 - 4;
    char v16 = 1;
    uint64_t v53 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v12 = v9 - 2;
  uint64_t v62 = *(void *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t v13 = -1;
    goto LABEL_6;
  }
  uint64_t v13 = v9 - 3;
  uint64_t v53 = *(void *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    char v14 = 0;
    uint64_t v13 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v12 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v9 - 4;
  uint64_t v18 = *(void *)(v11 + 8 * (v9 - 4));
LABEL_8:
  uint64_t v45 = v18;
  if (*(unsigned char *)(v6 + 50))
  {
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
    }
    uint64_t v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    uint64_t v21 = 0;
    uint64_t v43 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v21) == 1) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    }
    uint64_t v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    uint64_t v22 = 0;
    uint64_t v60 = 0;
    uint64_t v43 = 0;
    uint64_t v51 = 0;
    uint64_t v23 = 0;
    if (v19 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v24 = 0;
  uint64_t v51 = 0;
  uint64_t v43 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v24) == 1) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v6 + 56) + 8 * v24);
  }
  uint64_t v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    uint64_t v23 = 0;
    if (!*(unsigned char *)(v7 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v59 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
  {
    uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if (*(unsigned char *)(v7 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v23 = 0;
LABEL_46:
  if (*(unsigned char *)(v7 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v25 = *(void *)(v7 + 16);
  uint64_t v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v26) == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(*(void *)(v7 + 56) + 8 * v26);
    }
    uint64_t v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    uint64_t v27 = 0;
    uint64_t v42 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v27) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v7 + 56) + 8 * v27);
    }
    uint64_t v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    uint64_t v30 = 0;
    uint64_t v50 = 0;
    uint64_t v42 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v30) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v7 + 56) + 8 * v30);
    }
    uint64_t v28 = v25 - 1;
    goto LABEL_66;
  }
  uint64_t v28 = 0;
  uint64_t v59 = 0;
  uint64_t v42 = 0;
  uint64_t v50 = 0;
  uint64_t v29 = 0;
  if (v25 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(void *)(*(void *)(v7 + 24) + 8 * v28) != 1)
    {
      uint64_t v29 = *(void *)(*(void *)(v7 + 56) + 8 * v28);
      if (!*(unsigned char *)(v8 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v29 = 0;
LABEL_78:
    if (!*(unsigned char *)(v8 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v58 = 0;
    uint64_t v44 = 0;
    uint64_t v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v29 = 0;
  if (*(unsigned char *)(v8 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v15) == 1)
  {
    uint64_t v44 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v44 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v13 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    uint64_t v52 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v52 = *(void *)(*(void *)(v8 + 56) + 8 * v13);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(void *)(*(void *)(v8 + 24) + 8 * v12) != 1)
  {
    uint64_t v58 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
    if (v9 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v58 = 0;
  if (v9 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v10 > (int)v9 - 1 || *(void *)(*(void *)(v8 + 24) + 8 * v10) == 1) {
    goto LABEL_80;
  }
  uint64_t v31 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v45 >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v49 = (_WORD *)(**(void **)a3 + *(void *)(v6 + 40));
    uint64_t v48 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v7 + 40));
    uint64_t v47 = (_WORD *)(**a4 + *(void *)(v8 + 40));
    do
    {
      uint64_t v46 = v32;
      if (v53 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v56 = v48;
        uint64_t v57 = v49;
        uint64_t v55 = v47;
        do
        {
          uint64_t v54 = v33;
          if (v62 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = v56;
            uint64_t v36 = v57;
            uint64_t v37 = v55;
            do
            {
              uint64_t v63 = v34;
              uint64_t v38 = v61;
              uint64_t v39 = v36;
              uint64_t v40 = v35;
              uint64_t v41 = v37;
              if (v61 >= 1)
              {
                do
                {
                  LOWORD(a5) = *v39;
                  a6.i16[0] = *v40;
                  a5 = pow((double)vmovl_s16(*(int16x4_t *)&a5).i32[0], (double)vmovl_s16(a6).i32[0]);
                  *uint64_t v41 = (int)a5;
                  uint64_t v41 = (_WORD *)((char *)v41 + v31);
                  uint64_t v40 = (__int16 *)((char *)v40 + v29);
                  uint64_t v39 = (_WORD *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              uint64_t v34 = v63 + 1;
              uint64_t v37 = (_WORD *)((char *)v37 + v58);
              uint64_t v35 = (__int16 *)((char *)v35 + v59);
              uint64_t v36 = (_WORD *)((char *)v36 + v60);
            }
            while (v63 + 1 != v62);
          }
          uint64_t v33 = v54 + 1;
          uint64_t v55 = (_WORD *)((char *)v55 + v52);
          uint64_t v56 = (__int16 *)((char *)v56 + v50);
          uint64_t v57 = (_WORD *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      uint64_t v32 = v46 + 1;
      uint64_t v47 = (_WORD *)((char *)v47 + v44);
      uint64_t v48 = (__int16 *)((char *)v48 + v42);
      uint64_t v49 = (_WORD *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v45 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *uint64_t v39 = (int)pow((double)*v37, (double)*v38);
                  v39 += v29;
                  v38 += v27;
                  v37 += v21;
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              v35 += v56;
              v33 += v57;
              v34 += v58;
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          v53 += v50;
          v54 += v48;
          v55 += v49;
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      v45 += v42;
      v46 += v40;
      v47 += v41;
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v65 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v66 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v57 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v66 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v49 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v48 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v52 = (int *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v53 = (float *)(**a4 + *(void *)(v6 + 40));
    uint64_t v51 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    do
    {
      uint64_t v50 = v30;
      if (v57 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v51;
        uint64_t v59 = v53;
        do
        {
          uint64_t v58 = v31;
          if (v66 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v60;
            uint64_t v34 = v61;
            uint64_t v35 = v59;
            do
            {
              uint64_t v67 = v32;
              uint64_t v36 = v65;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  float v41 = v37[1];
                  int v42 = *v38;
                  int v43 = v38[1];
                  float v70 = *v37;
                  float v40 = v70;
                  float v71 = v41;
                  int v68 = v42;
                  int v69 = v43;
                  float v70 = truncf(std::operator/[abi:nn180100]<float>(&v70, (float *)&v68));
                  float v71 = truncf(v44);
                  int v68 = v42;
                  int v69 = v43;
                  *uint64_t v39 = v40 - std::operator*[abi:nn180100]<float>(&v70, (float *)&v68);
                  v39[1] = v41 - v45;
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (int *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v67 + 1;
              uint64_t v35 = (float *)((char *)v35 + v62);
              uint64_t v33 = (int *)((char *)v33 + v63);
              uint64_t v34 = (float *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v31 = v58 + 1;
          uint64_t v59 = (float *)((char *)v59 + v56);
          uint64_t v60 = (int *)((char *)v60 + v54);
          uint64_t v61 = (float *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v30 = v50 + 1;
      uint64_t v53 = (float *)((char *)v53 + v48);
      uint64_t v52 = (int *)((char *)v52 + v46);
      uint64_t v51 = (float *)((char *)v51 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *uint64_t v39 = fmodf(*v37, *v38);
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (float *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (float *)((char *)v35 + v56);
              uint64_t v33 = (float *)((char *)v33 + v57);
              uint64_t v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (float *)((char *)v53 + v50);
          uint64_t v54 = (float *)((char *)v54 + v48);
          uint64_t v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (float *)((char *)v45 + v42);
      uint64_t v46 = (float *)((char *)v46 + v40);
      uint64_t v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v71 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v71 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v72 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v63 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v72 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v63 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v55 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v70 = 0;
    uint64_t v53 = 0;
    uint64_t v61 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v53 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v70 = 0;
    uint64_t v53 = 0;
    uint64_t v61 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v61 = 0;
  uint64_t v53 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v69 = 0;
    uint64_t v52 = 0;
    uint64_t v60 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v52 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v60 = 0;
    uint64_t v52 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v69 = 0;
  uint64_t v52 = 0;
  uint64_t v60 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v68 = 0;
    uint64_t v54 = 0;
    uint64_t v62 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v54 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v54 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v62 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v68 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v68 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v55 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v58 = (int *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v59 = (float *)(**a4 + *(void *)(v6 + 40));
    uint64_t v57 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    do
    {
      uint64_t v56 = v30;
      if (v63 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v66 = v58;
        uint64_t v67 = v57;
        uint64_t v65 = v59;
        do
        {
          uint64_t v64 = v31;
          if (v72 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v66;
            uint64_t v34 = v67;
            uint64_t v35 = v65;
            do
            {
              uint64_t v73 = v32;
              uint64_t v36 = v71;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v71 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  __asm { FCVT            S8, H0 }
                  _H0 = v37[1];
                  __asm { FCVT            S9, H0 }
                  int v48 = *v38;
                  int v49 = v38[1];
                  float v76 = _S8;
                  float v77 = _S9;
                  int v74 = v48;
                  int v75 = v49;
                  float v76 = truncf(std::operator/[abi:nn180100]<float>(&v76, (float *)&v74));
                  float v77 = truncf(v50);
                  int v74 = v48;
                  int v75 = v49;
                  *uint64_t v39 = _S8 - std::operator*[abi:nn180100]<float>(&v76, (float *)&v74);
                  v39[1] = _S9 - v51;
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (int *)((char *)v38 + v27);
                  uint64_t v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v73 + 1;
              uint64_t v35 = (float *)((char *)v35 + v68);
              uint64_t v33 = (int *)((char *)v33 + v69);
              uint64_t v34 = (__int16 *)((char *)v34 + v70);
            }
            while (v73 + 1 != v72);
          }
          uint64_t v31 = v64 + 1;
          uint64_t v65 = (float *)((char *)v65 + v62);
          uint64_t v66 = (int *)((char *)v66 + v60);
          uint64_t v67 = (__int16 *)((char *)v67 + v61);
        }
        while (v64 + 1 != v63);
      }
      uint64_t v30 = v56 + 1;
      uint64_t v59 = (float *)((char *)v59 + v54);
      uint64_t v58 = (int *)((char *)v58 + v52);
      uint64_t v57 = (__int16 *)((char *)v57 + v53);
    }
    while (v56 + 1 != v55);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v65 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v66 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v57 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v66 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v49 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v48 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v53 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v52 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v51 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v50 = v30;
      if (v57 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        uint64_t v59 = v51;
        do
        {
          uint64_t v58 = v31;
          if (v66 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v60;
            uint64_t v34 = v61;
            uint64_t v35 = v59;
            do
            {
              uint64_t v67 = v32;
              uint64_t v36 = v65;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  __asm { FCVT            S0, H0; float }
                  *uint64_t v39 = fmodf(_S0, *v38);
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (float *)((char *)v38 + v27);
                  uint64_t v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v67 + 1;
              uint64_t v35 = (float *)((char *)v35 + v62);
              uint64_t v33 = (float *)((char *)v33 + v63);
              uint64_t v34 = (__int16 *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v31 = v58 + 1;
          uint64_t v59 = (float *)((char *)v59 + v56);
          uint64_t v60 = (float *)((char *)v60 + v54);
          uint64_t v61 = (__int16 *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v30 = v50 + 1;
      float v51 = (float *)((char *)v51 + v48);
      uint64_t v52 = (float *)((char *)v52 + v46);
      uint64_t v53 = (__int16 *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v71 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v71 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v72 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v63 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v72 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v63 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v55 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v70 = 0;
    uint64_t v53 = 0;
    uint64_t v61 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v53 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v70 = 0;
    uint64_t v53 = 0;
    uint64_t v61 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v61 = 0;
  uint64_t v53 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v69 = 0;
    uint64_t v52 = 0;
    uint64_t v60 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v52 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v60 = 0;
    uint64_t v52 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v69 = 0;
  uint64_t v52 = 0;
  uint64_t v60 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v68 = 0;
    uint64_t v54 = 0;
    uint64_t v62 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v54 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v54 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v62 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v68 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v68 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v55 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v58 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v59 = (float *)(**a4 + *(void *)(v6 + 40));
    uint64_t v57 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    do
    {
      uint64_t v56 = v30;
      if (v63 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v66 = v58;
        uint64_t v67 = v57;
        uint64_t v65 = v59;
        do
        {
          uint64_t v64 = v31;
          if (v72 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v66;
            uint64_t v34 = v67;
            uint64_t v35 = v65;
            do
            {
              uint64_t v73 = v32;
              uint64_t v36 = v71;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v71 >= 1)
              {
                do
                {
                  float v41 = v37[1];
                  _H0 = *v38;
                  __asm { FCVT            S10, H0 }
                  _H0 = v38[1];
                  __asm { FCVT            S11, H0 }
                  float v76 = *v37;
                  float v40 = v76;
                  float v77 = v41;
                  int v74 = _S10;
                  int v75 = _S11;
                  float v76 = truncf(std::operator/[abi:nn180100]<float>(&v76, (float *)&v74));
                  float v77 = truncf(v50);
                  int v74 = _S10;
                  int v75 = _S11;
                  *uint64_t v39 = v40 - std::operator*[abi:nn180100]<float>(&v76, (float *)&v74);
                  v39[1] = v41 - v51;
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (__int16 *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v73 + 1;
              uint64_t v35 = (float *)((char *)v35 + v68);
              uint64_t v33 = (__int16 *)((char *)v33 + v69);
              uint64_t v34 = (float *)((char *)v34 + v70);
            }
            while (v73 + 1 != v72);
          }
          uint64_t v31 = v64 + 1;
          uint64_t v65 = (float *)((char *)v65 + v62);
          uint64_t v66 = (__int16 *)((char *)v66 + v60);
          uint64_t v67 = (float *)((char *)v67 + v61);
        }
        while (v64 + 1 != v63);
      }
      uint64_t v30 = v56 + 1;
      uint64_t v59 = (float *)((char *)v59 + v54);
      uint64_t v58 = (__int16 *)((char *)v58 + v52);
      uint64_t v57 = (float *)((char *)v57 + v53);
    }
    while (v56 + 1 != v55);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v65 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v65 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v66 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v57 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v66 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v49 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    uint64_t v55 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v46 = 0;
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
    uint64_t v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v63 = 0;
  uint64_t v46 = 0;
  uint64_t v54 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v62 = 0;
    uint64_t v48 = 0;
    uint64_t v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v48 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v56 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v62 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v62 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v53 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v52 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v51 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v50 = v30;
      if (v57 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        uint64_t v59 = v51;
        do
        {
          uint64_t v58 = v31;
          if (v66 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v60;
            uint64_t v34 = v61;
            uint64_t v35 = v59;
            do
            {
              uint64_t v67 = v32;
              uint64_t v36 = v65;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H1 = *v38;
                  __asm { FCVT            S1, H1; float }
                  *uint64_t v39 = fmodf(*v37, _S1);
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (__int16 *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v67 + 1;
              uint64_t v35 = (float *)((char *)v35 + v62);
              uint64_t v33 = (__int16 *)((char *)v33 + v63);
              uint64_t v34 = (float *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          uint64_t v31 = v58 + 1;
          uint64_t v59 = (float *)((char *)v59 + v56);
          uint64_t v60 = (__int16 *)((char *)v60 + v54);
          uint64_t v61 = (float *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      uint64_t v30 = v50 + 1;
      float v51 = (float *)((char *)v51 + v48);
      uint64_t v52 = (__int16 *)((char *)v52 + v46);
      uint64_t v53 = (float *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *uint64_t v39 = fmodf(COERCE_FLOAT(*v37 << 16), *v38);
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (float *)((char *)v38 + v27);
                  uint64_t v37 = (unsigned __int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (float *)((char *)v35 + v56);
              uint64_t v33 = (float *)((char *)v33 + v57);
              uint64_t v34 = (unsigned __int16 *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (float *)((char *)v53 + v50);
          uint64_t v54 = (float *)((char *)v54 + v48);
          uint64_t v55 = (unsigned __int16 *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (float *)((char *)v45 + v42);
      uint64_t v46 = (float *)((char *)v46 + v40);
      uint64_t v47 = (unsigned __int16 *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v59 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v59 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v60 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v51 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v51 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v43 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v49 = 0;
  uint64_t v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v48 = 0;
    uint64_t v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v56 = 0;
    uint64_t v42 = 0;
    uint64_t v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v42 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v50 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v56 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v47 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v46 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    float v45 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v44 = v30;
      if (v51 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v54 = v46;
        uint64_t v55 = v47;
        uint64_t v53 = v45;
        do
        {
          uint64_t v52 = v31;
          if (v60 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v54;
            uint64_t v34 = v55;
            uint64_t v35 = v53;
            do
            {
              uint64_t v61 = v32;
              uint64_t v36 = v59;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *uint64_t v39 = fmodf(*v37, COERCE_FLOAT(*v38 << 16));
                  uint64_t v39 = (float *)((char *)v39 + v29);
                  uint64_t v38 = (unsigned __int16 *)((char *)v38 + v27);
                  uint64_t v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v61 + 1;
              uint64_t v35 = (float *)((char *)v35 + v56);
              uint64_t v33 = (unsigned __int16 *)((char *)v33 + v57);
              uint64_t v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          uint64_t v31 = v52 + 1;
          uint64_t v53 = (float *)((char *)v53 + v50);
          uint64_t v54 = (unsigned __int16 *)((char *)v54 + v48);
          uint64_t v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      uint64_t v30 = v44 + 1;
      float v45 = (float *)((char *)v45 + v42);
      uint64_t v46 = (unsigned __int16 *)((char *)v46 + v40);
      uint64_t v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v75 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v75 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v76 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v67 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v76 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v67 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v74 = 0;
    uint64_t v57 = 0;
    uint64_t v65 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v65 = 0;
    }
    else {
      uint64_t v65 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v74 = 0;
    uint64_t v57 = 0;
    uint64_t v65 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v65 = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v73 = 0;
    uint64_t v56 = 0;
    uint64_t v64 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v64 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v73 = 0;
    }
    else {
      uint64_t v73 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v73 = 0;
  uint64_t v56 = 0;
  uint64_t v64 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v72 = 0;
    uint64_t v58 = 0;
    uint64_t v66 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v58 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v66 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v66 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v72 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v72 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v63 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v61 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v62 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v60 = v30;
      if (v67 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v70 = v63;
        uint64_t v71 = v61;
        uint64_t v69 = v62;
        do
        {
          uint64_t v68 = v31;
          if (v76 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v70;
            uint64_t v34 = v71;
            uint64_t v35 = v69;
            do
            {
              uint64_t v77 = v32;
              uint64_t v36 = v75;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v75 >= 1)
              {
                do
                {
                  _H8 = *v37;
                  _H9 = v37[1];
                  _H0 = *v38;
                  _H1 = v38[1];
                  __asm
                  {
                    FCVT            S2, H8
                    FCVT            S3, H9
                  }
                  *(void *)unint64_t v80 = __PAIR64__(_S3, _S2);
                  __asm
                  {
                    FCVT            S10, H0
                    FCVT            S11, H1
                  }
                  int v78 = _S10;
                  int v79 = _S11;
                  v52.f32[0] = std::operator/[abi:nn180100]<float>(v80, (float *)&v78);
                  v52.i32[1] = v53;
                  *(void *)unint64_t v80 = vcvtq_f32_f16(vrnd_f16(vcvt_f16_f32(v52))).u64[0];
                  int v78 = _S10;
                  int v79 = _S11;
                  _S0 = std::operator*[abi:nn180100]<float>(v80, (float *)&v78);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                  }
                  *uint64_t v39 = _H8 - *(short float *)&_S0;
                  v39[1] = _H9 - *(short float *)&_S1;
                  uint64_t v39 = (short float *)((char *)v39 + v29);
                  uint64_t v38 = (__int16 *)((char *)v38 + v27);
                  uint64_t v37 = (short float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v77 + 1;
              uint64_t v35 = (short float *)((char *)v35 + v72);
              uint64_t v33 = (__int16 *)((char *)v33 + v73);
              uint64_t v34 = (short float *)((char *)v34 + v74);
            }
            while (v77 + 1 != v76);
          }
          uint64_t v31 = v68 + 1;
          uint64_t v69 = (short float *)((char *)v69 + v66);
          uint64_t v70 = (__int16 *)((char *)v70 + v64);
          uint64_t v71 = (short float *)((char *)v71 + v65);
        }
        while (v68 + 1 != v67);
      }
      uint64_t v30 = v60 + 1;
      uint64_t v62 = (short float *)((char *)v62 + v58);
      uint64_t v63 = (__int16 *)((char *)v63 + v56);
      uint64_t v61 = (short float *)((char *)v61 + v57);
    }
    while (v60 + 1 != v59);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v68 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v68 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v69 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v60 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v52 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v50 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v67 = 0;
    uint64_t v50 = 0;
    uint64_t v58 = 0;
    uint64_t v21 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v22 = 0;
  uint64_t v58 = 0;
  uint64_t v50 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v21 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v66 = 0;
    uint64_t v49 = 0;
    uint64_t v57 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = *(void *)(v5 + 16);
  uint64_t v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    uint64_t v25 = 0;
    uint64_t v49 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
    }
    uint64_t v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v57 = 0;
    uint64_t v49 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v26 = v23 - 1;
    goto LABEL_66;
  }
  uint64_t v26 = 0;
  uint64_t v66 = 0;
  uint64_t v49 = 0;
  uint64_t v57 = 0;
  uint64_t v27 = 0;
  if (v23 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v26) != 1)
    {
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v27 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v65 = 0;
    uint64_t v51 = 0;
    uint64_t v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v27 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v51 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v59 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v65 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v52 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v56 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v55 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v54 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v53 = v30;
      if (v60 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v63 = v55;
        uint64_t v64 = v56;
        uint64_t v62 = v54;
        do
        {
          uint64_t v61 = v31;
          if (v69 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v63;
            uint64_t v34 = v64;
            uint64_t v35 = v62;
            do
            {
              uint64_t v70 = v32;
              uint64_t v36 = v68;
              uint64_t v37 = v34;
              uint64_t v38 = v33;
              uint64_t v39 = v35;
              if (v68 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  _H1 = *v38;
                  __asm
                  {
                    FCVT            S0, H0; float
                    FCVT            S1, H1; float
                  }
                  _S0 = fmodf(_S0, _S1);
                  __asm { FCVT            H0, S0 }
                  *uint64_t v39 = LOWORD(_S0);
                  uint64_t v39 = (_WORD *)((char *)v39 + v29);
                  uint64_t v38 = (__int16 *)((char *)v38 + v27);
                  uint64_t v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              uint64_t v32 = v70 + 1;
              uint64_t v35 = (_WORD *)((char *)v35 + v65);
              uint64_t v33 = (__int16 *)((char *)v33 + v66);
              uint64_t v34 = (__int16 *)((char *)v34 + v67);
            }
            while (v70 + 1 != v69);
          }
          uint64_t v31 = v61 + 1;
          uint64_t v62 = (_WORD *)((char *)v62 + v59);
          uint64_t v63 = (__int16 *)((char *)v63 + v57);
          uint64_t v64 = (__int16 *)((char *)v64 + v58);
        }
        while (v61 + 1 != v60);
      }
      uint64_t v30 = v53 + 1;
      uint64_t v54 = (_WORD *)((char *)v54 + v51);
      uint64_t v55 = (__int16 *)((char *)v55 + v49);
      uint64_t v56 = (__int16 *)((char *)v56 + v50);
    }
    while (v53 + 1 != v52);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v10 = v7 - 2;
    uint64_t v58 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v58 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v7 - 3;
    uint64_t v59 = 1;
    char v12 = 1;
LABEL_6:
    uint64_t v13 = v7 - 4;
    char v14 = 1;
    uint64_t v50 = 1;
    char v15 = 1;
LABEL_7:
    uint64_t v16 = 1;
    goto LABEL_8;
  }
  uint64_t v10 = v7 - 2;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v7 - 3;
  uint64_t v50 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v12 = 0;
    uint64_t v11 = 0;
    char v15 = 0;
    uint64_t v13 = -1;
    uint64_t v10 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  char v14 = 0;
  char v12 = 0;
  char v15 = 0;
  uint64_t v13 = v7 - 4;
  uint64_t v16 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v42 = v16;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
    }
    uint64_t v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    uint64_t v19 = 0;
    uint64_t v40 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v19) == 1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
    }
    uint64_t v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t v40 = 0;
    uint64_t v48 = 0;
    uint64_t v61 = 0;
    if (v17 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v21 = 0;
  uint64_t v48 = 0;
  uint64_t v40 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
  }
  uint64_t v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    uint64_t v61 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v56 = 0;
    uint64_t v39 = 0;
    uint64_t v47 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v20) != 1)
  {
    uint64_t v61 = *(void *)(*(void *)(v4 + 56) + 8 * v20);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v61 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v22 = *(void *)(v5 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v23) == 1) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v39 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v24) == 1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
    }
    uint64_t v26 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    uint64_t v26 = 0;
    uint64_t v47 = 0;
    uint64_t v39 = 0;
LABEL_61:
    if (v26 > (int)v22 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v26) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
    }
    uint64_t v25 = v22 - 1;
    goto LABEL_66;
  }
  uint64_t v25 = 0;
  uint64_t v56 = 0;
  uint64_t v39 = 0;
  uint64_t v47 = 0;
  uint64_t v60 = 0;
  if (v22 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v25) != 1)
    {
      uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v60 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v55 = 0;
    uint64_t v41 = 0;
    uint64_t v49 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v60 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v13) == 1)
  {
    uint64_t v41 = 0;
    if (v15) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v13);
    if (v15) {
      goto LABEL_98;
    }
  }
  if (v11 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    uint64_t v49 = 0;
    if (v12) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v49 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
  if (v12) {
    goto LABEL_101;
  }
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v10) != 1)
  {
    uint64_t v55 = *(void *)(*(void *)(v6 + 56) + 8 * v10);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v27 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v55 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v27 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v42 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v46 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    float v45 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v44 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v43 = v28;
      if (v50 >= 1)
      {
        uint64_t v29 = 0;
        uint64_t v53 = v45;
        uint64_t v54 = v46;
        uint64_t v52 = v44;
        do
        {
          uint64_t v51 = v29;
          if (v59 >= 1)
          {
            uint64_t v30 = 0;
            uint64_t v32 = v53;
            uint64_t v31 = v54;
            uint64_t v33 = v52;
            do
            {
              uint64_t v34 = v58;
              uint64_t v35 = v31;
              uint64_t v36 = v32;
              uint64_t v37 = v33;
              if (v58 >= 1)
              {
                do
                {
                  float v38 = fmodf(COERCE_FLOAT(*v35 << 16), COERCE_FLOAT(*v36 << 16));
                  *uint64_t v37 = HIWORD(COERCE_UNSIGNED_INT(v38 + (float)(COERCE_FLOAT(LODWORD(v38) & 0xFF800000) * 0.0039062)));
                  uint64_t v37 = (_WORD *)((char *)v37 + v27);
                  uint64_t v36 = (unsigned __int16 *)((char *)v36 + v60);
                  uint64_t v35 = (unsigned __int16 *)((char *)v35 + v61);
                  --v34;
                }
                while (v34);
              }
              ++v30;
              uint64_t v33 = (_WORD *)((char *)v33 + v55);
              uint64_t v32 = (unsigned __int16 *)((char *)v32 + v56);
              uint64_t v31 = (unsigned __int16 *)((char *)v31 + v57);
            }
            while (v30 != v59);
          }
          uint64_t v29 = v51 + 1;
          uint64_t v52 = (_WORD *)((char *)v52 + v49);
          uint64_t v53 = (unsigned __int16 *)((char *)v53 + v47);
          uint64_t v54 = (unsigned __int16 *)((char *)v54 + v48);
        }
        while (v51 + 1 != v50);
      }
      uint64_t v28 = v43 + 1;
      uint64_t v44 = (_WORD *)((char *)v44 + v41);
      float v45 = (unsigned __int16 *)((char *)v45 + v39);
      uint64_t v46 = (unsigned __int16 *)((char *)v46 + v40);
    }
    while (v43 + 1 != v42);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)5>(uint64_t result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 8);
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v54 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v56 = 0;
  uint64_t v54 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v53 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v53 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v53 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v53 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v55 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v55 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v55 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    float v38 = (void *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (uint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = *v50 / *v51;
                  uint64_t *v52 = *v50 % *v51;
                  uint64_t v52 = (uint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (uint64_t *)((char *)v51 + v32);
                  uint64_t v50 = (void *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (uint64_t *)((char *)v48 + v35);
              uint64_t v47 = (uint64_t *)((char *)v47 + v29);
              uint64_t v46 = (void *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (uint64_t *)((char *)v44 + v34);
          uint64_t v43 = (uint64_t *)((char *)v43 + v30);
          uint64_t v42 = (void *)((char *)v42 + v56);
        }
        while (v41 != v57);
      }
      ++v37;
      uint64_t v40 = (uint64_t *)((char *)v40 + v55);
      uint64_t v39 = (uint64_t *)((char *)v39 + v53);
      float v38 = (void *)((char *)v38 + v54);
    }
    while (v37 != v18);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)5>(unint64_t result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 8);
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v57 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v57 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v54 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v56 = 0;
  uint64_t v54 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v53 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v53 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v53 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v53 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v55 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v55 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v55 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    float v38 = (_DWORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (_DWORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (int *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (*v50 / *v51);
                  int *v52 = *v50 % *v51;
                  uint64_t v52 = (int *)((char *)v52 + v36);
                  uint64_t v51 = (_DWORD *)((char *)v51 + v32);
                  uint64_t v50 = (_DWORD *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (int *)((char *)v48 + v35);
              uint64_t v47 = (_DWORD *)((char *)v47 + v29);
              uint64_t v46 = (_DWORD *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (int *)((char *)v44 + v34);
          uint64_t v43 = (_DWORD *)((char *)v43 + v30);
          uint64_t v42 = (_DWORD *)((char *)v42 + v56);
        }
        while (v41 != v57);
      }
      ++v37;
      uint64_t v40 = (int *)((char *)v40 + v55);
      uint64_t v39 = (_DWORD *)((char *)v39 + v53);
      float v38 = (_DWORD *)((char *)v38 + v54);
    }
    while (v37 != v18);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)5>(unint64_t result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 8);
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v60 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v59 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v59 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v59 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v55 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v55 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v57 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    float v38 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v60 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  int v53 = *v50;
                  int v54 = *v51;
                  uint64_t result = (v53 / v54);
                  _WORD *v52 = v53 % v54;
                  uint64_t v52 = (_WORD *)((char *)v52 + v36);
                  uint64_t v51 = (__int16 *)((char *)v51 + v32);
                  uint64_t v50 = (__int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (_WORD *)((char *)v48 + v35);
              uint64_t v47 = (__int16 *)((char *)v47 + v29);
              uint64_t v46 = (__int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (_WORD *)((char *)v44 + v34);
          uint64_t v43 = (__int16 *)((char *)v43 + v30);
          uint64_t v42 = (__int16 *)((char *)v42 + v59);
        }
        while (v41 != v60);
      }
      ++v37;
      uint64_t v40 = (_WORD *)((char *)v40 + v57);
      uint64_t v39 = (__int16 *)((char *)v39 + v55);
      float v38 = (__int16 *)((char *)v38 + v56);
    }
    while (v37 != v58);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)5>(unint64_t result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 8);
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v60 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v60 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v59 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v59 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v59 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v55 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v55 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v57 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_98;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_101;
  }
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_102;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_102:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    float v38 = (char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v60 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  int v53 = *v50;
                  int v54 = *v51;
                  uint64_t result = (v53 / v54);
                  unsigned char *v52 = v53 % v54;
                  v52 += v36;
                  v51 += v32;
                  v50 += v24;
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 += v35;
              v47 += v29;
              v46 += v19;
            }
            while (v45 != v13);
          }
          ++v41;
          v44 += v34;
          v43 += v30;
          v42 += v59;
        }
        while (v41 != v60);
      }
      ++v37;
      v40 += v57;
      v39 += v55;
      v38 += v56;
    }
    while (v37 != v58);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v61 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v61 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v60 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v55 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v55 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v57 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    float v38 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v59 = v37;
      if (v61 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  BOOL v53 = v50[1] < v51[1];
                  if (*v50 != *v51) {
                    BOOL v53 = *v50 < *v51;
                  }
                  if (v53) {
                    unint64_t v54 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  }
                  else {
                    unint64_t v54 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  }
                  unint64_t *v52 = v54;
                  uint64_t v52 = (unint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (float *)((char *)v51 + v32);
                  uint64_t v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (unint64_t *)((char *)v48 + v35);
              uint64_t v47 = (float *)((char *)v47 + v29);
              uint64_t v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (unint64_t *)((char *)v44 + v34);
          uint64_t v43 = (float *)((char *)v43 + v30);
          uint64_t v42 = (float *)((char *)v42 + v60);
        }
        while (v41 != v61);
      }
      ++v37;
      uint64_t v40 = (unint64_t *)((char *)v40 + v57);
      uint64_t v39 = (float *)((char *)v39 + v55);
      float v38 = (float *)((char *)v38 + v56);
    }
    while (v59 + 1 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v57 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float v56 = *v53;
                  if (*v54 < *v53) {
                    float v56 = *v54;
                  }
                  float *v55 = v56;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  unint64_t v54 = (float *)((char *)v54 + v34);
                  BOOL v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v69 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v66 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v68 = 0;
  uint64_t v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v63 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v63 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v65 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v65 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v67 = v37;
      if (v69 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v50;
                  __asm { FCVT            S0, H0 }
                  _H1 = v50[1];
                  __asm { FCVT            S1, H1 }
                  uint64_t result = (uint64_t **)(*(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32));
                  BOOL v61 = v51[1] > _S1;
                  if (*v51 != _S0) {
                    BOOL v61 = *v51 > _S0;
                  }
                  if (v61) {
                    unint64_t v62 = LODWORD(_S0) | ((unint64_t)LODWORD(_S1) << 32);
                  }
                  else {
                    unint64_t v62 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  }
                  unint64_t *v52 = v62;
                  uint64_t v52 = (unint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (float *)((char *)v51 + v32);
                  uint64_t v50 = (__int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (unint64_t *)((char *)v48 + v35);
              uint64_t v47 = (float *)((char *)v47 + v29);
              uint64_t v46 = (__int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (unint64_t *)((char *)v44 + v34);
          uint64_t v43 = (float *)((char *)v43 + v30);
          uint64_t v42 = (__int16 *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      uint64_t v40 = (unint64_t *)((char *)v40 + v65);
      uint64_t v39 = (float *)((char *)v39 + v63);
      uint64_t v38 = (__int16 *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  if (*v54 < _S0) {
                    _S0 = *v54;
                  }
                  float *v55 = _S0;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  unint64_t v54 = (float *)((char *)v54 + v34);
                  BOOL v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v62);
      uint64_t v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v69 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v66 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v68 = 0;
  uint64_t v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v63 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v63 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v65 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v65 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v67 = v37;
      if (v69 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  _H2 = *v51;
                  __asm { FCVT            S2, H2 }
                  _H3 = v51[1];
                  __asm { FCVT            S3, H3 }
                  BOOL v61 = v50[1] < _S3;
                  if (*v50 != _S2) {
                    BOOL v61 = *v50 < _S2;
                  }
                  if (v61) {
                    unint64_t v62 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  }
                  else {
                    unint64_t v62 = LODWORD(_S2) | ((unint64_t)LODWORD(_S3) << 32);
                  }
                  unint64_t *v52 = v62;
                  uint64_t v52 = (unint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (__int16 *)((char *)v51 + v32);
                  uint64_t v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (unint64_t *)((char *)v48 + v35);
              uint64_t v47 = (__int16 *)((char *)v47 + v29);
              uint64_t v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (unint64_t *)((char *)v44 + v34);
          uint64_t v43 = (__int16 *)((char *)v43 + v30);
          uint64_t v42 = (float *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      uint64_t v40 = (unint64_t *)((char *)v40 + v65);
      uint64_t v39 = (__int16 *)((char *)v39 + v63);
      uint64_t v38 = (float *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v65 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v64 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v64 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v63 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v63 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v63 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v63 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v65 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float v56 = *v53;
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  if (*v53 > _S1) {
                    float v56 = _S1;
                  }
                  float *v55 = v56;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  unint64_t v54 = (__int16 *)((char *)v54 + v34);
                  BOOL v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (__int16 *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (__int16 *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (__int16 *)((char *)v42 + v63);
      uint64_t v41 = (float *)((char *)v41 + v64);
    }
    while (v40 != v65);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v58 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v58 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  LODWORD(v55) = *v52 << 16;
                  if (*v53 < v55) {
                    float v55 = *v53;
                  }
                  float *v54 = v55;
                  unint64_t v54 = (float *)((char *)v54 + v38);
                  BOOL v53 = (float *)((char *)v53 + v34);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (float *)((char *)v49 + v31);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (float *)((char *)v45 + v32);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v58);
      uint64_t v41 = (float *)((char *)v41 + v56);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v58 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v58 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (int *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (int *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  int v55 = *v52;
                  if (*(float *)v52 > COERCE_FLOAT(*v53 << 16)) {
                    int v55 = *v53 << 16;
                  }
                  int *v54 = v55;
                  unint64_t v54 = (int *)((char *)v54 + v38);
                  BOOL v53 = (unsigned __int16 *)((char *)v53 + v34);
                  uint64_t v52 = (int *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (int *)((char *)v50 + v37);
              uint64_t v49 = (unsigned __int16 *)((char *)v49 + v31);
              uint64_t v48 = (int *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (int *)((char *)v46 + v36);
          uint64_t v45 = (unsigned __int16 *)((char *)v45 + v32);
          uint64_t v44 = (int *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (int *)((char *)v42 + v58);
      uint64_t v41 = (unsigned __int16 *)((char *)v41 + v56);
      uint64_t v40 = (int *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v61 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v61 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v60 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v55 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v55 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v57 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (int *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v59 = v37;
      if (v61 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (uint64_t **)(*(unsigned __int16 *)v50 | (*((unsigned __int16 *)v50 + 1) << 16));
                  BOOL v53 = v50[1] < v51[1];
                  if (*v50 != *v51) {
                    BOOL v53 = *v50 < *v51;
                  }
                  if (v53) {
                    int v54 = *(unsigned __int16 *)v50 | (*((unsigned __int16 *)v50 + 1) << 16);
                  }
                  else {
                    int v54 = *(unsigned __int16 *)v51 | (*((unsigned __int16 *)v51 + 1) << 16);
                  }
                  int *v52 = v54;
                  uint64_t v52 = (int *)((char *)v52 + v36);
                  uint64_t v51 = (short float *)((char *)v51 + v32);
                  uint64_t v50 = (short float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (int *)((char *)v48 + v35);
              uint64_t v47 = (short float *)((char *)v47 + v29);
              uint64_t v46 = (short float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (int *)((char *)v44 + v34);
          uint64_t v43 = (short float *)((char *)v43 + v30);
          uint64_t v42 = (short float *)((char *)v42 + v60);
        }
        while (v41 != v61);
      }
      ++v37;
      uint64_t v40 = (int *)((char *)v40 + v57);
      uint64_t v39 = (short float *)((char *)v39 + v55);
      uint64_t v38 = (short float *)((char *)v38 + v56);
    }
    while (v59 + 1 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v57 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              int v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float v56 = *v53;
                  if (*v54 < *v53) {
                    short float v56 = *v54;
                  }
                  short float *v55 = v56;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  int v54 = (short float *)((char *)v54 + v34);
                  BOOL v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v57);
      uint64_t v41 = (short float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)15>(unint64_t result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 8);
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v57 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v58 = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v54 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v54 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v56 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (_WORD *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  int v53 = *v50;
                  uint64_t result = (v53 << 16);
                  if (COERCE_FLOAT((unsigned __int16)*v51 << 16) < COERCE_FLOAT(v53 << 16)) {
                    LOWORD(v53) = *v51;
                  }
                  _WORD *v52 = v53;
                  uint64_t v52 = (_WORD *)((char *)v52 + v36);
                  uint64_t v51 = (_WORD *)((char *)v51 + v32);
                  uint64_t v50 = (unsigned __int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (_WORD *)((char *)v48 + v35);
              uint64_t v47 = (_WORD *)((char *)v47 + v29);
              uint64_t v46 = (unsigned __int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (_WORD *)((char *)v44 + v34);
          uint64_t v43 = (_WORD *)((char *)v43 + v30);
          uint64_t v42 = (unsigned __int16 *)((char *)v42 + v58);
        }
        while (v41 != v59);
      }
      ++v37;
      uint64_t v40 = (_WORD *)((char *)v40 + v56);
      uint64_t v39 = (_WORD *)((char *)v39 + v54);
      uint64_t v38 = (unsigned __int16 *)((char *)v38 + v55);
    }
    while (v37 != v57);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (uint64_t *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (void *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t v54 = *v52;
                  if (*v52 >= *v51) {
                    uint64_t v54 = *v51;
                  }
                  *int v53 = v54;
                  int v53 = (void *)((char *)v53 + v37);
                  uint64_t v52 = (uint64_t *)((char *)v52 + v33);
                  uint64_t v51 = (uint64_t *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (void *)((char *)v49 + v36);
              uint64_t v48 = (uint64_t *)((char *)v48 + v30);
              uint64_t v47 = (uint64_t *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (void *)((char *)v45 + v35);
          uint64_t v44 = (uint64_t *)((char *)v44 + v31);
          uint64_t v43 = (uint64_t *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (void *)((char *)v41 + v57);
      uint64_t v40 = (uint64_t *)((char *)v40 + v55);
      uint64_t v39 = (uint64_t *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (int *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (int *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_DWORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  int v54 = *v52;
                  if (*v52 >= *v51) {
                    int v54 = *v51;
                  }
                  *int v53 = v54;
                  int v53 = (_DWORD *)((char *)v53 + v37);
                  uint64_t v52 = (int *)((char *)v52 + v33);
                  uint64_t v51 = (int *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_DWORD *)((char *)v49 + v36);
              uint64_t v48 = (int *)((char *)v48 + v30);
              uint64_t v47 = (int *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_DWORD *)((char *)v45 + v35);
          uint64_t v44 = (int *)((char *)v44 + v31);
          uint64_t v43 = (int *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_DWORD *)((char *)v41 + v57);
      uint64_t v40 = (int *)((char *)v40 + v55);
      uint64_t v39 = (int *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  int v54 = *v52;
                  if (v54 >= *v51) {
                    LOWORD(v54) = *v51;
                  }
                  *int v53 = v54;
                  int v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (__int16 *)((char *)v52 + v33);
                  uint64_t v51 = (__int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (__int16 *)((char *)v48 + v30);
              uint64_t v47 = (__int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (__int16 *)((char *)v44 + v31);
          uint64_t v43 = (__int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v57);
      uint64_t v40 = (__int16 *)((char *)v40 + v55);
      uint64_t v39 = (__int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  int v54 = *v52;
                  if (v54 >= (char)*v51) {
                    LOBYTE(v54) = *v51;
                  }
                  *int v53 = v54;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v59);
      }
      ++v38;
      v41 += v57;
      v40 += v55;
      v39 += v56;
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v61 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v61 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v60 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v55 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v55 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v57 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v59 = v37;
      if (v61 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  BOOL v53 = v50[1] > v51[1];
                  if (*v50 != *v51) {
                    BOOL v53 = *v50 > *v51;
                  }
                  if (v53) {
                    unint64_t v54 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  }
                  else {
                    unint64_t v54 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  }
                  unint64_t *v52 = v54;
                  uint64_t v52 = (unint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (float *)((char *)v51 + v32);
                  uint64_t v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (unint64_t *)((char *)v48 + v35);
              uint64_t v47 = (float *)((char *)v47 + v29);
              uint64_t v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (unint64_t *)((char *)v44 + v34);
          uint64_t v43 = (float *)((char *)v43 + v30);
          uint64_t v42 = (float *)((char *)v42 + v60);
        }
        while (v41 != v61);
      }
      ++v37;
      uint64_t v40 = (unint64_t *)((char *)v40 + v57);
      uint64_t v39 = (float *)((char *)v39 + v55);
      uint64_t v38 = (float *)((char *)v38 + v56);
    }
    while (v59 + 1 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v57 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float v56 = *v53;
                  if (*v53 < *v54) {
                    float v56 = *v54;
                  }
                  float *v55 = v56;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  unint64_t v54 = (float *)((char *)v54 + v34);
                  BOOL v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v57);
      uint64_t v41 = (float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v69 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v66 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v68 = 0;
  uint64_t v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v63 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v63 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v65 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v65 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v67 = v37;
      if (v69 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v50;
                  __asm { FCVT            S0, H0 }
                  _H1 = v50[1];
                  __asm { FCVT            S1, H1 }
                  uint64_t result = (uint64_t **)(*(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32));
                  BOOL v61 = v51[1] < _S1;
                  if (*v51 != _S0) {
                    BOOL v61 = *v51 < _S0;
                  }
                  if (v61) {
                    unint64_t v62 = LODWORD(_S0) | ((unint64_t)LODWORD(_S1) << 32);
                  }
                  else {
                    unint64_t v62 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  }
                  unint64_t *v52 = v62;
                  uint64_t v52 = (unint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (float *)((char *)v51 + v32);
                  uint64_t v50 = (__int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (unint64_t *)((char *)v48 + v35);
              uint64_t v47 = (float *)((char *)v47 + v29);
              uint64_t v46 = (__int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (unint64_t *)((char *)v44 + v34);
          uint64_t v43 = (float *)((char *)v43 + v30);
          uint64_t v42 = (__int16 *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      uint64_t v40 = (unint64_t *)((char *)v40 + v65);
      uint64_t v39 = (float *)((char *)v39 + v63);
      uint64_t v38 = (__int16 *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v64 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v62 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v62 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  if (*v54 > _S0) {
                    _S0 = *v54;
                  }
                  float *v55 = _S0;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  unint64_t v54 = (float *)((char *)v54 + v34);
                  BOOL v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (float *)((char *)v50 + v31);
              uint64_t v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (float *)((char *)v46 + v32);
          uint64_t v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (float *)((char *)v42 + v62);
      uint64_t v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v69 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v69 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v66 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v68 = 0;
  uint64_t v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v63 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v63 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v65 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v65 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v65 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (unint64_t *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v67 = v37;
      if (v69 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  _H2 = *v51;
                  __asm { FCVT            S2, H2 }
                  _H3 = v51[1];
                  __asm { FCVT            S3, H3 }
                  BOOL v61 = v50[1] > _S3;
                  if (*v50 != _S2) {
                    BOOL v61 = *v50 > _S2;
                  }
                  if (v61) {
                    unint64_t v62 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  }
                  else {
                    unint64_t v62 = LODWORD(_S2) | ((unint64_t)LODWORD(_S3) << 32);
                  }
                  unint64_t *v52 = v62;
                  uint64_t v52 = (unint64_t *)((char *)v52 + v36);
                  uint64_t v51 = (__int16 *)((char *)v51 + v32);
                  uint64_t v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (unint64_t *)((char *)v48 + v35);
              uint64_t v47 = (__int16 *)((char *)v47 + v29);
              uint64_t v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (unint64_t *)((char *)v44 + v34);
          uint64_t v43 = (__int16 *)((char *)v43 + v30);
          uint64_t v42 = (float *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      uint64_t v40 = (unint64_t *)((char *)v40 + v65);
      uint64_t v39 = (__int16 *)((char *)v39 + v63);
      uint64_t v38 = (float *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v65 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v64 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v64 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v64 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v63 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v63 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v63 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v63 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v65 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  float v56 = *v53;
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  if (*v53 < _S1) {
                    float v56 = _S1;
                  }
                  float *v55 = v56;
                  uint64_t v55 = (float *)((char *)v55 + v39);
                  unint64_t v54 = (__int16 *)((char *)v54 + v34);
                  BOOL v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (float *)((char *)v51 + v38);
              uint64_t v50 = (__int16 *)((char *)v50 + v31);
              uint64_t v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (float *)((char *)v47 + v37);
          uint64_t v46 = (__int16 *)((char *)v46 + v32);
          uint64_t v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (float *)((char *)v43 + v36);
      uint64_t v42 = (__int16 *)((char *)v42 + v63);
      uint64_t v41 = (float *)((char *)v41 + v64);
    }
    while (v40 != v65);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v58 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v58 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  LODWORD(v55) = *v52 << 16;
                  if (*v53 > v55) {
                    float v55 = *v53;
                  }
                  float *v54 = v55;
                  unint64_t v54 = (float *)((char *)v54 + v38);
                  BOOL v53 = (float *)((char *)v53 + v34);
                  uint64_t v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (float *)((char *)v50 + v37);
              uint64_t v49 = (float *)((char *)v49 + v31);
              uint64_t v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (float *)((char *)v46 + v36);
          uint64_t v45 = (float *)((char *)v45 + v32);
          uint64_t v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (float *)((char *)v42 + v58);
      uint64_t v41 = (float *)((char *)v41 + v56);
      uint64_t v40 = (unsigned __int16 *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v57 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v56 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v56 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v37 = 0;
    uint64_t v58 = 0;
    uint64_t v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v58 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v36 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v37 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = (int *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v41 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v42 = (int *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            do
            {
              uint64_t v51 = v10;
              uint64_t v52 = v48;
              BOOL v53 = v49;
              unint64_t v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  int v55 = *v52;
                  if (*(float *)v52 < COERCE_FLOAT(*v53 << 16)) {
                    int v55 = *v53 << 16;
                  }
                  int *v54 = v55;
                  unint64_t v54 = (int *)((char *)v54 + v38);
                  BOOL v53 = (unsigned __int16 *)((char *)v53 + v34);
                  uint64_t v52 = (int *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              uint64_t v50 = (int *)((char *)v50 + v37);
              uint64_t v49 = (unsigned __int16 *)((char *)v49 + v31);
              uint64_t v48 = (int *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          uint64_t v46 = (int *)((char *)v46 + v36);
          uint64_t v45 = (unsigned __int16 *)((char *)v45 + v32);
          uint64_t v44 = (int *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      uint64_t v42 = (int *)((char *)v42 + v58);
      uint64_t v41 = (unsigned __int16 *)((char *)v41 + v56);
      uint64_t v40 = (int *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = (*result)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v61 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v61 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t v60 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v60 = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v55 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v55 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v57 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_103;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_106;
  }
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_107;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_107:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (int *)(**a4 + *(void *)(v6 + 40));
    do
    {
      uint64_t v59 = v37;
      if (v61 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t result = (uint64_t **)(*(unsigned __int16 *)v50 | (*((unsigned __int16 *)v50 + 1) << 16));
                  BOOL v53 = v50[1] > v51[1];
                  if (*v50 != *v51) {
                    BOOL v53 = *v50 > *v51;
                  }
                  if (v53) {
                    int v54 = *(unsigned __int16 *)v50 | (*((unsigned __int16 *)v50 + 1) << 16);
                  }
                  else {
                    int v54 = *(unsigned __int16 *)v51 | (*((unsigned __int16 *)v51 + 1) << 16);
                  }
                  int *v52 = v54;
                  uint64_t v52 = (int *)((char *)v52 + v36);
                  uint64_t v51 = (short float *)((char *)v51 + v32);
                  uint64_t v50 = (short float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (int *)((char *)v48 + v35);
              uint64_t v47 = (short float *)((char *)v47 + v29);
              uint64_t v46 = (short float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (int *)((char *)v44 + v34);
          uint64_t v43 = (short float *)((char *)v43 + v30);
          uint64_t v42 = (short float *)((char *)v42 + v60);
        }
        while (v41 != v61);
      }
      ++v37;
      uint64_t v40 = (int *)((char *)v40 + v57);
      uint64_t v39 = (short float *)((char *)v39 + v55);
      uint64_t v38 = (short float *)((char *)v38 + v56);
    }
    while (v59 + 1 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v17 = 1;
    char v18 = 1;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v17 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v18 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v19 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v59 = v19;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    uint64_t v24 = 0;
    uint64_t v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    }
    uint64_t v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v58 = 0;
    uint64_t result = 0;
    uint64_t v26 = 0;
    if (v22 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v27 = 0;
  uint64_t result = 0;
  uint64_t v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
  }
  uint64_t v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    uint64_t v26 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v31 = 0;
    uint64_t v57 = 0;
    uint64_t v32 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v25) != 1)
  {
    uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v26 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    uint64_t v30 = 0;
    uint64_t v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
    }
    uint64_t v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v35) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v35);
    }
    uint64_t v33 = v28 - 1;
    goto LABEL_66;
  }
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  if (v28 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v33) != 1)
    {
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v34 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v34 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v36 = 0;
    if (v18) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v18) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v37 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v38 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (short float *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v42 = (short float *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v43 = (short float *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v41;
        uint64_t v46 = v42;
        uint64_t v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v51 = v47;
            do
            {
              uint64_t v52 = v10;
              BOOL v53 = v49;
              int v54 = v50;
              uint64_t v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  short float v56 = *v53;
                  if (*v53 < *v54) {
                    short float v56 = *v54;
                  }
                  short float *v55 = v56;
                  uint64_t v55 = (short float *)((char *)v55 + v39);
                  int v54 = (short float *)((char *)v54 + v34);
                  BOOL v53 = (short float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              uint64_t v51 = (short float *)((char *)v51 + v38);
              uint64_t v50 = (short float *)((char *)v50 + v31);
              uint64_t v49 = (short float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          uint64_t v47 = (short float *)((char *)v47 + v37);
          uint64_t v46 = (short float *)((char *)v46 + v32);
          uint64_t v45 = (short float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      uint64_t v43 = (short float *)((char *)v43 + v36);
      uint64_t v42 = (short float *)((char *)v42 + v57);
      uint64_t v41 = (short float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)16>(unint64_t result, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 8);
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v57 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v21) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
    }
    uint64_t v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    uint64_t v55 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    uint64_t v24 = 0;
    if (v20 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v25 = 0;
  uint64_t v58 = 0;
  uint64_t v55 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
  }
  uint64_t v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    uint64_t v24 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v29 = 0;
    uint64_t v54 = 0;
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v23) != 1)
  {
    uint64_t v24 = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v24 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v26 = *(void *)(v5 + 16);
  uint64_t v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
    }
    uint64_t v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    uint64_t v28 = 0;
    uint64_t v54 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v54 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
    }
    uint64_t v31 = v26 - 1;
    goto LABEL_66;
  }
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v54 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  if (v26 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v31) != 1)
    {
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v32 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v35 = 0;
    uint64_t v56 = 0;
    uint64_t v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v32 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v56 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v34 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v36 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v35 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (_WORD *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v39 = (unsigned __int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v40 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v38;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = v10;
              uint64_t v50 = v46;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  int v53 = *v51;
                  uint64_t result = (v53 << 16);
                  if (COERCE_FLOAT((unsigned __int16)*v50 << 16) >= COERCE_FLOAT(v53 << 16)) {
                    LOWORD(v53) = *v50;
                  }
                  _WORD *v52 = v53;
                  uint64_t v52 = (_WORD *)((char *)v52 + v36);
                  uint64_t v51 = (unsigned __int16 *)((char *)v51 + v32);
                  uint64_t v50 = (_WORD *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              uint64_t v48 = (_WORD *)((char *)v48 + v35);
              uint64_t v47 = (unsigned __int16 *)((char *)v47 + v29);
              uint64_t v46 = (_WORD *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          uint64_t v44 = (_WORD *)((char *)v44 + v34);
          uint64_t v43 = (unsigned __int16 *)((char *)v43 + v30);
          uint64_t v42 = (_WORD *)((char *)v42 + v58);
        }
        while (v41 != v59);
      }
      ++v37;
      uint64_t v40 = (_WORD *)((char *)v40 + v56);
      uint64_t v39 = (unsigned __int16 *)((char *)v39 + v54);
      uint64_t v38 = (_WORD *)((char *)v38 + v55);
    }
    while (v37 != v57);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (uint64_t *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (uint64_t *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (void *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  uint64_t v54 = *v52;
                  if (*v51 > *v52) {
                    uint64_t v54 = *v51;
                  }
                  *int v53 = v54;
                  int v53 = (void *)((char *)v53 + v37);
                  uint64_t v52 = (uint64_t *)((char *)v52 + v33);
                  uint64_t v51 = (uint64_t *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (void *)((char *)v49 + v36);
              uint64_t v48 = (uint64_t *)((char *)v48 + v30);
              uint64_t v47 = (uint64_t *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (void *)((char *)v45 + v35);
          uint64_t v44 = (uint64_t *)((char *)v44 + v31);
          uint64_t v43 = (uint64_t *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (void *)((char *)v41 + v57);
      uint64_t v40 = (uint64_t *)((char *)v40 + v55);
      uint64_t v39 = (uint64_t *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (int *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (int *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_DWORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  int v54 = *v52;
                  if (*v51 > *v52) {
                    int v54 = *v51;
                  }
                  *int v53 = v54;
                  int v53 = (_DWORD *)((char *)v53 + v37);
                  uint64_t v52 = (int *)((char *)v52 + v33);
                  uint64_t v51 = (int *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_DWORD *)((char *)v49 + v36);
              uint64_t v48 = (int *)((char *)v48 + v30);
              uint64_t v47 = (int *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_DWORD *)((char *)v45 + v35);
          uint64_t v44 = (int *)((char *)v44 + v31);
          uint64_t v43 = (int *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_DWORD *)((char *)v41 + v57);
      uint64_t v40 = (int *)((char *)v40 + v55);
      uint64_t v39 = (int *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (__int16 *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (__int16 *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (_WORD *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  int v54 = *v52;
                  if (*v51 > v54) {
                    LOWORD(v54) = *v51;
                  }
                  *int v53 = v54;
                  int v53 = (_WORD *)((char *)v53 + v37);
                  uint64_t v52 = (__int16 *)((char *)v52 + v33);
                  uint64_t v51 = (__int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              uint64_t v49 = (_WORD *)((char *)v49 + v36);
              uint64_t v48 = (__int16 *)((char *)v48 + v30);
              uint64_t v47 = (__int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          uint64_t v45 = (_WORD *)((char *)v45 + v35);
          uint64_t v44 = (__int16 *)((char *)v44 + v31);
          uint64_t v43 = (__int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      uint64_t v41 = (_WORD *)((char *)v41 + v57);
      uint64_t v40 = (__int16 *)((char *)v40 + v55);
      uint64_t v39 = (__int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a2;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    char v16 = 1;
    uint64_t v59 = 1;
    char v17 = 1;
LABEL_7:
    uint64_t v18 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v59 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v14 = 0;
    uint64_t v12 = 0;
    char v17 = 0;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    char v16 = 1;
    goto LABEL_7;
  }
  char v16 = 0;
  char v14 = 0;
  char v17 = 0;
  uint64_t v15 = v7 - 4;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 4));
LABEL_8:
  uint64_t v58 = v18;
  if (*(unsigned char *)(v4 + 50))
  {
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v4 + 16);
  uint64_t v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v22) == 1) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v22);
    }
    uint64_t v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    uint64_t v23 = 0;
    uint64_t v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v23) == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v23);
    }
    uint64_t v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    uint64_t v24 = 0;
    uint64_t v19 = 0;
    uint64_t v56 = 0;
    uint64_t result = 0;
    uint64_t v25 = 0;
    if (v21 != 1) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  uint64_t result = 0;
  uint64_t v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  }
  uint64_t v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    uint64_t v25 = 0;
    if (!*(unsigned char *)(v5 + 50)) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v30 = 0;
    uint64_t v55 = 0;
    uint64_t v31 = 0;
    goto LABEL_67;
  }
  if (*(void *)(*(void *)(v4 + 24) + 8 * v24) != 1)
  {
    uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
    if (*(unsigned char *)(v5 + 50)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  uint64_t v25 = 0;
LABEL_46:
  if (*(unsigned char *)(v5 + 50)) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
    }
    uint64_t v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    uint64_t v29 = 0;
    uint64_t v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    }
    uint64_t v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
    }
    uint64_t v32 = v27 - 1;
    goto LABEL_66;
  }
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v55 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  if (v27 != 1) {
    goto LABEL_78;
  }
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(void *)(*(void *)(v5 + 24) + 8 * v32) != 1)
    {
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
      if (!*(unsigned char *)(v6 + 50)) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    uint64_t v33 = 0;
LABEL_78:
    if (!*(unsigned char *)(v6 + 50)) {
      goto LABEL_68;
    }
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v57 = 0;
    uint64_t v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  uint64_t v33 = 0;
  if (*(unsigned char *)(v6 + 50)) {
    goto LABEL_79;
  }
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v15) == 1)
  {
    uint64_t v57 = 0;
    if (v17) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (v17) {
      goto LABEL_100;
    }
  }
  if (v12 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    uint64_t v35 = 0;
    if (v14) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
  if (v14) {
    goto LABEL_103;
  }
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v11) != 1)
  {
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v7 >= 1) {
      goto LABEL_104;
    }
LABEL_80:
    uint64_t v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  uint64_t v36 = 0;
  if (v7 < 1) {
    goto LABEL_80;
  }
LABEL_104:
  if (v8 > (int)v7 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
    goto LABEL_80;
  }
  uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned char *)(**(void **)a3 + *(void *)(v4 + 40));
    uint64_t v40 = (char *)(*(void *)(*(void *)a3 + 8) + *(void *)(v5 + 40));
    uint64_t v41 = (unsigned char *)(**a4 + *(void *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            uint64_t v49 = v45;
            do
            {
              uint64_t v50 = v10;
              uint64_t v51 = v47;
              uint64_t v52 = v48;
              int v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  int v54 = *v52;
                  if ((char)*v51 > v54) {
                    LOBYTE(v54) = *v51;
                  }
                  *int v53 = v54;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v59);
      }
      ++v38;
      v41 += v57;
      v40 += v55;
      v39 += v56;
    }
    while (v38 != v58);
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v47 = **a4;
  uint64_t v48 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 < 1)
  {
    uint64_t v49 = 1;
    uint64_t v55 = 1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v8 + 8 * v7;
  uint64_t v10 = *(void *)(v9 - 8);
  if (v7 == 1)
  {
    uint64_t v49 = 1;
    uint64_t v55 = 1;
LABEL_7:
    uint64_t v53 = 1;
LABEL_8:
    uint64_t v50 = 0;
    *(float *)&a5 = a5;
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v12 = *(void *)(v5 + 16), v13 = v12 - 4, v12 < 4)
        || v13 > (int)v12 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v13) == 1)
      {
        uint64_t v14 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v15 = *(void *)(v6 + 16);
      uint64_t v16 = v15 - 4;
      if (v15 >= 4 && v16 <= (int)v15 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v16) != 1)
      {
        uint64_t v17 = *(void *)(*(void *)(v6 + 56) + 8 * v16);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v17 = 0;
LABEL_21:
      if (v53 >= 1)
      {
        uint64_t v54 = 0;
        uint64_t v52 = v48 + v14 * v50;
        uint64_t v51 = v47 + v17 * v50;
        do
        {
          if (*(unsigned char *)(v5 + 50)
            || (uint64_t v18 = *(void *)(v5 + 16), v19 = v18 - 3, v18 < 3)
            || v19 > (int)v18 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1)
          {
            uint64_t v20 = 0;
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v21 = *(void *)(v6 + 16);
          uint64_t v22 = v21 - 3;
          if (v21 >= 3 && v22 <= (int)v21 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
          {
            uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v23 = 0;
LABEL_35:
          if (v55 >= 1)
          {
            uint64_t v24 = 0;
            uint64_t v25 = v52 + v20 * v54;
            uint64_t v26 = v51 + v23 * v54;
            while (1)
            {
              if (*(unsigned char *)(v5 + 50)
                || (uint64_t v27 = *(void *)(v5 + 16), v28 = v27 - 2, v27 < 2)
                || v28 > (int)v27 - 1
                || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1)
              {
                uint64_t v29 = 0;
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              uint64_t v30 = *(void *)(v6 + 16);
              uint64_t v31 = v30 - 2;
              if (v30 < 2 || v31 > (int)v30 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v31) == 1) {
                break;
              }
              uint64_t v32 = *(void *)(*(void *)(v6 + 56) + 8 * v31);
              if (v10 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v24 == v55) {
                goto LABEL_23;
              }
            }
            uint64_t v32 = 0;
            if (v10 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v33 = 0;
            uint64_t v34 = v25 + v29 * v24;
            uint64_t v35 = v26 + v32 * v24;
            while (2)
            {
              if (!*(unsigned char *)(v5 + 50))
              {
                uint64_t v42 = *(void *)(v5 + 16);
                uint64_t v43 = v42 - 1;
                if (v42 >= 1 && v43 <= (int)v42 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v43) != 1)
                {
                  uint64_t v36 = *(void *)(*(void *)(v5 + 56) + 8 * v43);
                  if (!*(unsigned char *)(v6 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v36 = 0;
              if (*(unsigned char *)(v6 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v44 = *(void *)(v6 + 16);
              uint64_t v45 = v44 - 1;
              if (v44 < 1 || v45 > (int)v44 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v45) == 1) {
LABEL_53:
              }
                uint64_t v37 = 0;
              else {
                uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v45);
              }
              uint64_t v38 = v35 + v37 * v33 + *(void *)(v6 + 40);
              float32x2_t v57 = vadd_f32(*(float32x2_t *)(v34 + v36 * v33 + *(void *)(v5 + 40)), v11);
              float v39 = std::sqrt[abi:nn180100]<float>((float *)&v57);
              float32x2_t v57 = (float32x2_t)1065353216;
              v56[0] = v39;
              v56[1] = v40;
              *(float *)uint64_t v38 = std::operator/[abi:nn180100]<float>((float *)&v57, v56);
              *(_DWORD *)(v38 + 4) = v41;
              if (v10 == ++v33) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v54;
        }
        while (v54 != v53);
      }
      if (++v50 == v49) {
        return;
      }
    }
  }
  uint64_t v55 = *(void *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    uint64_t v49 = 1;
    goto LABEL_7;
  }
  uint64_t v46 = v8 + 8 * v7;
  uint64_t v53 = *(void *)(v46 - 24);
  if (v7 == 3)
  {
    uint64_t v49 = 1;
    goto LABEL_8;
  }
  uint64_t v49 = *(void *)(v46 - 32);
  if (v49 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v25 = 1;
    }
    else
    {
      char v25 = v14;
    }
    if (*(unsigned char *)(v6 + 50)) {
      BOOL v21 = 1;
    }
    if (v15 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v19;
    }
    if (v12 > v24) {
      char v27 = 1;
    }
    else {
      char v27 = v17;
    }
    if (v11 > v24) {
      char v28 = 1;
    }
    else {
      char v28 = v25;
    }
    float v29 = a5;
    char v30 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (uint64_t v31 = *(void *)(v5 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v32) == 1)
      {
        uint64_t v33 = 0;
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
        if (v26) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        if (v18 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v35 = 0;
        uint64_t v36 = v59 + v33 * v20;
        uint64_t v37 = v58 + v34 * v20;
        while (2)
        {
          if (v22
            || (uint64_t v38 = *(void *)(v5 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1)
          {
            uint64_t v40 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
          if (v27) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            uint64_t v41 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v35 == v18) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v42 = 0;
        uint64_t v43 = v36 + v40 * v35;
        uint64_t v44 = v37 + v41 * v35;
        while (2)
        {
          if (v22
            || (uint64_t v45 = *(void *)(v5 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v46) == 1)
          {
            uint64_t v47 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
          if (v28) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            uint64_t v48 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v42 == v13) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v49 = 0;
        uint64_t v50 = v43 + v47 * v42;
        uint64_t v51 = *(void *)(v5 + 40);
        uint64_t v52 = *(void *)(v6 + 40);
        uint64_t v53 = v44 + v48 * v42;
        while (2)
        {
          if (v22
            || (v56 = *(void *)(v5 + 16), uint64_t v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v57) == 1)
          {
            uint64_t v55 = 0;
            if ((v30 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v57);
            if ((v30 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v54 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_61:
                *(float *)(v53 + v54 * v49 + v52) = 1.0 / sqrtf(*(float *)(v50 + v55 * v49 + v51) + v29);
                if (v10 == ++v49) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v54 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v34 = 0;
      if (v18 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t v15 = v7 - 4;
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v54 = **a4;
  uint64_t v55 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 < 1)
  {
    uint64_t v56 = 1;
    uint64_t v62 = 1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v8 + 8 * v7;
  uint64_t v10 = *(void *)(v9 - 8);
  if (v7 == 1)
  {
    uint64_t v56 = 1;
    uint64_t v62 = 1;
LABEL_7:
    uint64_t v60 = 1;
LABEL_8:
    uint64_t v57 = 0;
    *(float *)&_D0 = _D0;
    __asm { FCVT            H0, S0 }
    float16x4_t v15 = (float16x4_t)vdup_lane_s16(*(int16x4_t *)&_D0, 0);
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v16 = *(void *)(v5 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v17) == 1)
      {
        uint64_t v18 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 >= 4 && v20 <= (int)v19 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v20) != 1)
      {
        uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v21 = 0;
LABEL_21:
      if (v60 >= 1)
      {
        uint64_t v61 = 0;
        uint64_t v59 = v55 + v18 * v57;
        uint64_t v58 = v54 + v21 * v57;
        do
        {
          if (*(unsigned char *)(v5 + 50)
            || (v22 = *(void *)(v5 + 16), uint64_t v23 = v22 - 3, v22 < 3)
            || v23 > (int)v22 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v23) == 1)
          {
            uint64_t v24 = 0;
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v24 = *(void *)(*(void *)(v5 + 56) + 8 * v23);
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v25 = *(void *)(v6 + 16);
          uint64_t v26 = v25 - 3;
          if (v25 >= 3 && v26 <= (int)v25 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v26) != 1)
          {
            uint64_t v27 = *(void *)(*(void *)(v6 + 56) + 8 * v26);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v27 = 0;
LABEL_35:
          if (v62 >= 1)
          {
            uint64_t v28 = 0;
            uint64_t v29 = v59 + v24 * v61;
            uint64_t v30 = v58 + v27 * v61;
            while (1)
            {
              if (*(unsigned char *)(v5 + 50)
                || (uint64_t v31 = *(void *)(v5 + 16), v32 = v31 - 2, v31 < 2)
                || v32 > (int)v31 - 1
                || *(void *)(*(void *)(v5 + 24) + 8 * v32) == 1)
              {
                uint64_t v33 = 0;
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              uint64_t v34 = *(void *)(v6 + 16);
              uint64_t v35 = v34 - 2;
              if (v34 < 2 || v35 > (int)v34 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v35) == 1) {
                break;
              }
              uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v35);
              if (v10 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v28 == v62) {
                goto LABEL_23;
              }
            }
            uint64_t v36 = 0;
            if (v10 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v37 = 0;
            uint64_t v38 = v29 + v33 * v28;
            uint64_t v39 = v30 + v36 * v28;
            while (2)
            {
              if (!*(unsigned char *)(v5 + 50))
              {
                uint64_t v49 = *(void *)(v5 + 16);
                uint64_t v50 = v49 - 1;
                if (v49 >= 1 && v50 <= (int)v49 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v50) != 1)
                {
                  uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v50);
                  if (!*(unsigned char *)(v6 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v40 = 0;
              if (*(unsigned char *)(v6 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v51 = *(void *)(v6 + 16);
              uint64_t v52 = v51 - 1;
              if (v51 < 1 || v52 > (int)v51 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v52) == 1) {
LABEL_53:
              }
                uint64_t v41 = 0;
              else {
                uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v52);
              }
              uint64_t v42 = (_DWORD *)(v39 + v41 * v37 + *(void *)(v6 + 40));
              LODWORD(_D0) = *(_DWORD *)(v38 + v40 * v37 + *(void *)(v5 + 40));
              unint64_t v64 = vcvtq_f32_f16(vadd_f16(*(float16x4_t *)&_D0, v15)).u64[0];
              _S0 = std::sqrt[abi:nn180100]<float>((float *)&v64);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              unint64_t v64 = 1065353216;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              v63[0] = _S0;
              v63[1] = _S1;
              *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v64, v63);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
                FCVT            S0, H0
                FCVT            S1, H1
              }
              _DWORD *v42 = LODWORD(_D0);
              v42[1] = _S1;
              if (v10 == ++v37) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v61;
        }
        while (v61 != v60);
      }
      if (++v57 == v56) {
        return;
      }
    }
  }
  uint64_t v62 = *(void *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    uint64_t v56 = 1;
    goto LABEL_7;
  }
  uint64_t v53 = v8 + 8 * v7;
  uint64_t v60 = *(void *)(v53 - 24);
  if (v7 == 3)
  {
    uint64_t v56 = 1;
    goto LABEL_8;
  }
  uint64_t v56 = *(void *)(v53 - 32);
  if (v56 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v65 = **a4;
  uint64_t v66 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v25 = 1;
    }
    else
    {
      char v25 = v14;
    }
    if (*(unsigned char *)(v6 + 50)) {
      BOOL v21 = 1;
    }
    if (v15 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v19;
    }
    if (v12 > v24) {
      char v27 = 1;
    }
    else {
      char v27 = v17;
    }
    if (v11 > v24) {
      char v28 = 1;
    }
    else {
      char v28 = v25;
    }
    __asm
    {
      FCVT            H0, D0
      FCVT            S0, H0
    }
    if (_NF ^ _VF | _ZF) {
      char v35 = v21;
    }
    else {
      char v35 = 1;
    }
    while (1)
    {
      if (v22
        || (uint64_t v36 = *(void *)(v5 + 16), v37 = v36 - 4, v36 < 4)
        || v37 > (int)v36 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v37) == 1)
      {
        uint64_t v38 = 0;
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v37);
        if (v26) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        if (v18 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v40 = 0;
        uint64_t v41 = v66 + v38 * v20;
        uint64_t v42 = v65 + v39 * v20;
        while (2)
        {
          if (v22
            || (v43 = *(void *)(v5 + 16), uint64_t v44 = v43 - 3, v43 < 3)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            uint64_t v46 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v46 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v40 == v18) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = v42 + v46 * v40;
        while (2)
        {
          if (v22
            || (uint64_t v50 = *(void *)(v5 + 16), v51 = v50 - 2, v50 < 2)
            || v51 > (int)v50 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v51) == 1)
          {
            uint64_t v52 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
          if (v28) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            uint64_t v53 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v53 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v47 == v13) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v54 = 0;
        uint64_t v55 = v48 + v52 * v47;
        uint64_t v56 = *(void *)(v5 + 40);
        uint64_t v57 = *(void *)(v6 + 40);
        uint64_t v58 = v49 + v53 * v47;
        while (2)
        {
          if (v22
            || (uint64_t v63 = *(void *)(v5 + 16), v64 = v63 - 1, v63 < 1)
            || v64 > (int)v63 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v64) == 1)
          {
            uint64_t v62 = 0;
            if ((v35 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v62 = *(void *)(*(void *)(v5 + 56) + 8 * v64);
            if ((v35 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_61:
                _H2 = *(_WORD *)(v55 + v62 * v54 + v56);
                __asm { FCVT            S2, H2 }
                *(float *)(v58 + v59 * v54++ + v57) = 1.0 / sqrtf(_S0 + _S2);
                if (v10 == v54) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v59 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v39 = 0;
      if (v18 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t v15 = v7 - 4;
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v53 = **a4;
  uint64_t v54 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 < 1)
  {
    uint64_t v55 = 1;
    uint64_t v61 = 1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v8 + 8 * v7;
  uint64_t v10 = *(void *)(v9 - 8);
  if (v7 == 1)
  {
    uint64_t v55 = 1;
    uint64_t v61 = 1;
LABEL_7:
    uint64_t v59 = 1;
LABEL_8:
    uint64_t v56 = 0;
    *(float *)&_D0 = _D0;
    __asm { FCVT            H0, S0 }
    float16x4_t v15 = (float16x4_t)vdup_lane_s16(*(int16x4_t *)&_D0, 0);
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v16 = *(void *)(v5 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v17) == 1)
      {
        uint64_t v18 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 >= 4 && v20 <= (int)v19 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v20) != 1)
      {
        uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v21 = 0;
LABEL_21:
      if (v59 >= 1)
      {
        uint64_t v60 = 0;
        uint64_t v58 = v54 + v18 * v56;
        uint64_t v57 = v53 + v21 * v56;
        do
        {
          if (*(unsigned char *)(v5 + 50)
            || (v22 = *(void *)(v5 + 16), uint64_t v23 = v22 - 3, v22 < 3)
            || v23 > (int)v22 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v23) == 1)
          {
            uint64_t v24 = 0;
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v24 = *(void *)(*(void *)(v5 + 56) + 8 * v23);
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v25 = *(void *)(v6 + 16);
          uint64_t v26 = v25 - 3;
          if (v25 >= 3 && v26 <= (int)v25 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v26) != 1)
          {
            uint64_t v27 = *(void *)(*(void *)(v6 + 56) + 8 * v26);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v27 = 0;
LABEL_35:
          if (v61 >= 1)
          {
            uint64_t v28 = 0;
            uint64_t v29 = v58 + v24 * v60;
            uint64_t v30 = v57 + v27 * v60;
            while (1)
            {
              if (*(unsigned char *)(v5 + 50)
                || (uint64_t v31 = *(void *)(v5 + 16), v32 = v31 - 2, v31 < 2)
                || v32 > (int)v31 - 1
                || *(void *)(*(void *)(v5 + 24) + 8 * v32) == 1)
              {
                uint64_t v33 = 0;
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              uint64_t v34 = *(void *)(v6 + 16);
              uint64_t v35 = v34 - 2;
              if (v34 < 2 || v35 > (int)v34 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v35) == 1) {
                break;
              }
              uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v35);
              if (v10 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v28 == v61) {
                goto LABEL_23;
              }
            }
            uint64_t v36 = 0;
            if (v10 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v37 = 0;
            uint64_t v38 = v29 + v33 * v28;
            uint64_t v39 = v30 + v36 * v28;
            while (2)
            {
              if (!*(unsigned char *)(v5 + 50))
              {
                uint64_t v48 = *(void *)(v5 + 16);
                uint64_t v49 = v48 - 1;
                if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
                {
                  uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
                  if (!*(unsigned char *)(v6 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v40 = 0;
              if (*(unsigned char *)(v6 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v50 = *(void *)(v6 + 16);
              uint64_t v51 = v50 - 1;
              if (v50 < 1 || v51 > (int)v50 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v51) == 1) {
LABEL_53:
              }
                uint64_t v41 = 0;
              else {
                uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v51);
              }
              uint64_t v42 = (_WORD *)(v39 + v41 * v37 + *(void *)(v6 + 40));
              LODWORD(_D0) = *(_DWORD *)(v38 + v40 * v37 + *(void *)(v5 + 40));
              unint64_t v63 = vcvtq_f32_f16(vadd_f16(*(float16x4_t *)&_D0, v15)).u64[0];
              _S0 = std::sqrt[abi:nn180100]<float>((float *)&v63);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              unint64_t v63 = 1065353216;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              v62[0] = _S0;
              v62[1] = _S1;
              *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v63, v62);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              _WORD *v42 = LOWORD(_D0);
              v42[1] = _S1;
              if (v10 == ++v37) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v60;
        }
        while (v60 != v59);
      }
      if (++v56 == v55) {
        return;
      }
    }
  }
  uint64_t v61 = *(void *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    uint64_t v55 = 1;
    goto LABEL_7;
  }
  uint64_t v52 = v8 + 8 * v7;
  uint64_t v59 = *(void *)(v52 - 24);
  if (v7 == 3)
  {
    uint64_t v55 = 1;
    goto LABEL_8;
  }
  uint64_t v55 = *(void *)(v52 - 32);
  if (v55 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v66 = **a4;
  uint64_t v67 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v25 = 1;
    }
    else
    {
      char v25 = v14;
    }
    if (*(unsigned char *)(v6 + 50)) {
      BOOL v21 = 1;
    }
    if (v15 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v19;
    }
    if (v12 > v24) {
      char v27 = 1;
    }
    else {
      char v27 = v17;
    }
    if (v11 > v24) {
      char v28 = 1;
    }
    else {
      char v28 = v25;
    }
    __asm
    {
      FCVT            H0, D0
      FCVT            S0, H0
    }
    if (_NF ^ _VF | _ZF) {
      char v35 = v21;
    }
    else {
      char v35 = 1;
    }
    while (1)
    {
      if (v22
        || (uint64_t v36 = *(void *)(v5 + 16), v37 = v36 - 4, v36 < 4)
        || v37 > (int)v36 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v37) == 1)
      {
        uint64_t v38 = 0;
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v37);
        if (v26) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        if (v18 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v40 = 0;
        uint64_t v41 = v67 + v38 * v20;
        uint64_t v42 = v66 + v39 * v20;
        while (2)
        {
          if (v22
            || (v43 = *(void *)(v5 + 16), uint64_t v44 = v43 - 3, v43 < 3)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            uint64_t v46 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v46 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v40 == v18) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = v42 + v46 * v40;
        while (2)
        {
          if (v22
            || (uint64_t v50 = *(void *)(v5 + 16), v51 = v50 - 2, v50 < 2)
            || v51 > (int)v50 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v51) == 1)
          {
            uint64_t v52 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
          if (v28) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            uint64_t v53 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v53 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v47 == v13) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v54 = 0;
        uint64_t v55 = v48 + v52 * v47;
        uint64_t v56 = *(void *)(v5 + 40);
        uint64_t v57 = *(void *)(v6 + 40);
        uint64_t v58 = v49 + v53 * v47;
        while (2)
        {
          if (v22
            || (uint64_t v64 = *(void *)(v5 + 16), v65 = v64 - 1, v64 < 1)
            || v65 > (int)v64 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v65) == 1)
          {
            uint64_t v63 = 0;
            if ((v35 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v63 = *(void *)(*(void *)(v5 + 56) + 8 * v65);
            if ((v35 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v59 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_61:
                _H2 = *(_WORD *)(v55 + v63 * v54 + v56);
                __asm { FCVT            S2, H2 }
                _S2 = 1.0 / sqrtf(_S0 + _S2);
                __asm { FCVT            H2, S2 }
                *(_WORD *)(v58 + v59 * v54++ + v57) = LOWORD(_S2);
                if (v10 == v54) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v59 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v39 = 0;
      if (v18 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t v15 = v7 - 4;
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v52 = **a4;
  uint64_t v53 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 < 1)
  {
    uint64_t v54 = 1;
    uint64_t v60 = 1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v8 + 8 * v7;
  uint64_t v10 = *(void *)(v9 - 8);
  if (v7 == 1)
  {
    uint64_t v54 = 1;
    uint64_t v60 = 1;
LABEL_7:
    uint64_t v58 = 1;
LABEL_8:
    uint64_t v55 = 0;
    *(float *)&a5 = a5;
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v12 = *(void *)(v5 + 16), v13 = v12 - 4, v12 < 4)
        || v13 > (int)v12 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v13) == 1)
      {
        uint64_t v14 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v15 = *(void *)(v6 + 16);
      uint64_t v16 = v15 - 4;
      if (v15 >= 4 && v16 <= (int)v15 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v16) != 1)
      {
        uint64_t v17 = *(void *)(*(void *)(v6 + 56) + 8 * v16);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v17 = 0;
LABEL_21:
      if (v58 >= 1)
      {
        uint64_t v59 = 0;
        uint64_t v57 = v53 + v14 * v55;
        uint64_t v56 = v52 + v17 * v55;
        do
        {
          if (*(unsigned char *)(v5 + 50)
            || (uint64_t v18 = *(void *)(v5 + 16), v19 = v18 - 3, v18 < 3)
            || v19 > (int)v18 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1)
          {
            uint64_t v20 = 0;
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v21 = *(void *)(v6 + 16);
          uint64_t v22 = v21 - 3;
          if (v21 >= 3 && v22 <= (int)v21 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v22) != 1)
          {
            uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v23 = 0;
LABEL_35:
          if (v60 >= 1)
          {
            uint64_t v24 = 0;
            uint64_t v25 = v57 + v20 * v59;
            uint64_t v26 = v56 + v23 * v59;
            while (1)
            {
              if (*(unsigned char *)(v5 + 50)
                || (uint64_t v27 = *(void *)(v5 + 16), v28 = v27 - 2, v27 < 2)
                || v28 > (int)v27 - 1
                || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1)
              {
                uint64_t v29 = 0;
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              uint64_t v30 = *(void *)(v6 + 16);
              uint64_t v31 = v30 - 2;
              if (v30 < 2 || v31 > (int)v30 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v31) == 1) {
                break;
              }
              uint64_t v32 = *(void *)(*(void *)(v6 + 56) + 8 * v31);
              if (v10 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v24 == v60) {
                goto LABEL_23;
              }
            }
            uint64_t v32 = 0;
            if (v10 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v33 = 0;
            uint64_t v34 = v25 + v29 * v24;
            uint64_t v35 = v26 + v32 * v24;
            while (2)
            {
              if (!*(unsigned char *)(v5 + 50))
              {
                uint64_t v47 = *(void *)(v5 + 16);
                uint64_t v48 = v47 - 1;
                if (v47 >= 1 && v48 <= (int)v47 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v48) != 1)
                {
                  uint64_t v36 = *(void *)(*(void *)(v5 + 56) + 8 * v48);
                  if (!*(unsigned char *)(v6 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v36 = 0;
              if (*(unsigned char *)(v6 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v49 = *(void *)(v6 + 16);
              uint64_t v50 = v49 - 1;
              if (v49 < 1 || v50 > (int)v49 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v50) == 1) {
LABEL_53:
              }
                uint64_t v37 = 0;
              else {
                uint64_t v37 = *(void *)(*(void *)(v6 + 56) + 8 * v50);
              }
              uint64_t v38 = (_WORD *)(v35 + v37 * v33 + *(void *)(v6 + 40));
              float32x2_t v62 = vadd_f32(*(float32x2_t *)(v34 + v36 * v33 + *(void *)(v5 + 40)), v11);
              float v39 = std::sqrt[abi:nn180100]<float>((float *)&v62);
              float32x2_t v62 = (float32x2_t)1065353216;
              v61[0] = v39;
              v61[1] = v40;
              _S0 = std::operator/[abi:nn180100]<float>((float *)&v62, v61);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *uint64_t v38 = LOWORD(_S0);
              v38[1] = _S1;
              if (v10 == ++v33) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v59;
        }
        while (v59 != v58);
      }
      if (++v55 == v54) {
        return;
      }
    }
  }
  uint64_t v60 = *(void *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    uint64_t v54 = 1;
    goto LABEL_7;
  }
  uint64_t v51 = v8 + 8 * v7;
  uint64_t v58 = *(void *)(v51 - 24);
  if (v7 == 3)
  {
    uint64_t v54 = 1;
    goto LABEL_8;
  }
  uint64_t v54 = *(void *)(v51 - 32);
  if (v54 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v63 = **a4;
  uint64_t v64 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v25 = 1;
    }
    else
    {
      char v25 = v14;
    }
    if (*(unsigned char *)(v6 + 50)) {
      BOOL v21 = 1;
    }
    if (v15 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v19;
    }
    if (v12 > v24) {
      char v27 = 1;
    }
    else {
      char v27 = v17;
    }
    if (v11 > v24) {
      char v28 = 1;
    }
    else {
      char v28 = v25;
    }
    float v29 = a5;
    char v30 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (uint64_t v31 = *(void *)(v5 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v32) == 1)
      {
        uint64_t v33 = 0;
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
        if (v26) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        if (v18 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v35 = 0;
        uint64_t v36 = v64 + v33 * v20;
        uint64_t v37 = v63 + v34 * v20;
        while (2)
        {
          if (v22
            || (uint64_t v38 = *(void *)(v5 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1)
          {
            uint64_t v40 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
          if (v27) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            uint64_t v41 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v35 == v18) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v42 = 0;
        uint64_t v43 = v36 + v40 * v35;
        uint64_t v44 = v37 + v41 * v35;
        while (2)
        {
          if (v22
            || (uint64_t v45 = *(void *)(v5 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v46) == 1)
          {
            uint64_t v47 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
          if (v28) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            uint64_t v48 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v42 == v13) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v49 = 0;
        uint64_t v50 = v43 + v47 * v42;
        uint64_t v51 = *(void *)(v5 + 40);
        uint64_t v52 = *(void *)(v6 + 40);
        uint64_t v53 = v44 + v48 * v42;
        while (2)
        {
          if (v22
            || (v61 = *(void *)(v5 + 16), uint64_t v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v62) == 1)
          {
            uint64_t v60 = 0;
            if ((v30 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v60 = *(void *)(*(void *)(v5 + 56) + 8 * v62);
            if ((v30 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v54 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_61:
                _S2 = 1.0 / sqrtf(*(float *)(v50 + v60 * v49 + v51) + v29);
                __asm { FCVT            H2, S2 }
                *(_WORD *)(v53 + v54 * v49++ + v52) = LOWORD(_S2);
                if (v10 == v49) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v54 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v34 = 0;
      if (v18 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t v15 = v7 - 4;
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v25 = 1;
    }
    else
    {
      char v25 = v14;
    }
    if (*(unsigned char *)(v6 + 50)) {
      BOOL v21 = 1;
    }
    if (v15 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v19;
    }
    if (v12 > v24) {
      char v27 = 1;
    }
    else {
      char v27 = v17;
    }
    if (v11 > v24) {
      char v28 = 1;
    }
    else {
      char v28 = v25;
    }
    float v29 = a5;
    char v30 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (uint64_t v31 = *(void *)(v5 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v32) == 1)
      {
        uint64_t v33 = 0;
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v32);
        if (v26) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        if (v18 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v35 = 0;
        uint64_t v36 = v59 + v33 * v20;
        uint64_t v37 = v58 + v34 * v20;
        while (2)
        {
          if (v22
            || (uint64_t v38 = *(void *)(v5 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1)
          {
            uint64_t v40 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
          if (v27) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            uint64_t v41 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v35 == v18) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v42 = 0;
        uint64_t v43 = v36 + v40 * v35;
        uint64_t v44 = v37 + v41 * v35;
        while (2)
        {
          if (v22
            || (uint64_t v45 = *(void *)(v5 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v46) == 1)
          {
            uint64_t v47 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
          if (v28) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            uint64_t v48 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v42 == v13) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v49 = 0;
        uint64_t v50 = v43 + v47 * v42;
        uint64_t v51 = *(void *)(v5 + 40);
        uint64_t v52 = *(void *)(v6 + 40);
        uint64_t v53 = v44 + v48 * v42;
        while (2)
        {
          if (v22
            || (v56 = *(void *)(v5 + 16), uint64_t v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v57) == 1)
          {
            uint64_t v55 = 0;
            if ((v30 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v55 = *(void *)(*(void *)(v5 + 56) + 8 * v57);
            if ((v30 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v54 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_61:
                *(float *)(v53 + v54 * v49 + v52) = 1.0
                                                  / sqrtf(COERCE_FLOAT(COERCE_UNSIGNED_INT(v29+ (float)(COERCE_FLOAT(LODWORD(v29) & 0xFF800000)* 0.0039062)) & 0xFFFF0000)+ COERCE_FLOAT(*(unsigned __int16 *)(v50 + v55 * v49 + v51) << 16));
                if (v10 == ++v49) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v54 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v34 = 0;
      if (v18 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t v15 = v7 - 4;
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v59 = **a4;
  uint64_t v60 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v14 = 1;
      BOOL v21 = 1;
    }
    uint64_t v58 = v15;
    if (v15 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v19;
    }
    if (v12 > v23) {
      char v17 = 1;
    }
    if (v11 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v14;
    }
    float v26 = a5;
    int v27 = *(unsigned __int8 *)(v5 + 50);
    char v28 = v8 > v23 || v21;
    LODWORD(v29) = COERCE_UNSIGNED_INT(v26 + (float)(COERCE_FLOAT(LODWORD(v26) & 0xFF800000) * 0.0039062)) & 0xFFFF0000;
    while (1)
    {
      if (v27
        || (uint64_t v30 = *(void *)(v5 + 16), v31 = v30 - 4, v30 < 4)
        || v31 > (int)v30 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v31) == 1)
      {
        uint64_t v32 = 0;
        if (v24) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v31);
        if (v24) {
          goto LABEL_31;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v58) != 1)
      {
        uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v58);
        if (v18 < 1) {
          goto LABEL_24;
        }
LABEL_34:
        uint64_t v34 = 0;
        uint64_t v35 = v60 + v32 * v20;
        uint64_t v36 = v59 + v33 * v20;
        while (2)
        {
          if (v27
            || (uint64_t v37 = *(void *)(v5 + 16), v38 = v37 - 3, v37 < 3)
            || v38 > (int)v37 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v38) == 1)
          {
            uint64_t v39 = 0;
            if ((v17 & 1) == 0) {
              goto LABEL_41;
            }
            goto LABEL_42;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v38);
          if (v17) {
            goto LABEL_42;
          }
LABEL_41:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_42:
            uint64_t v40 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_35;
          }
          uint64_t v40 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_35:
            if (++v34 == v18) {
              goto LABEL_24;
            }
            continue;
          }
          break;
        }
        uint64_t v41 = 0;
        uint64_t v42 = v35 + v39 * v34;
        uint64_t v43 = v36 + v40 * v34;
        while (2)
        {
          if (v27
            || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 2, v44 < 2)
            || v45 > (int)v44 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
          {
            uint64_t v46 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_52;
            }
            goto LABEL_53;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
          if (v25) {
            goto LABEL_53;
          }
LABEL_52:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_53:
            uint64_t v47 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_46;
          }
          uint64_t v47 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_46:
            if (++v41 == v13) {
              goto LABEL_35;
            }
            continue;
          }
          break;
        }
        uint64_t v48 = 0;
        uint64_t v49 = v42 + v46 * v41;
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = *(void *)(v6 + 40);
        uint64_t v52 = v43 + v47 * v41;
        while (2)
        {
          if (v27
            || (uint64_t v55 = *(void *)(v5 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v56) == 1)
          {
            uint64_t v53 = 0;
            if (v28) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v5 + 56) + 8 * v56);
            if (v28)
            {
LABEL_60:
              uint64_t v54 = 0;
              goto LABEL_67;
            }
          }
          if (*(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
            goto LABEL_60;
          }
          uint64_t v54 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_67:
          float v57 = 1.0 / sqrtf(v29 + COERCE_FLOAT(*(unsigned __int16 *)(v49 + v53 * v48 + v50) << 16));
          *(_WORD *)(v51 + v52 + v54 * v48++) = HIWORD(COERCE_UNSIGNED_INT(v57 + (float)(COERCE_FLOAT(LODWORD(v57) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v10 == v48) {
            goto LABEL_46;
          }
          continue;
        }
      }
LABEL_31:
      uint64_t v33 = 0;
      if (v18 >= 1) {
        goto LABEL_34;
      }
LABEL_24:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    uint64_t v15 = v7 - 4;
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v14 = 1;
      BOOL v21 = 1;
    }
    uint64_t v57 = v15;
    if (v15 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v19;
    }
    if (v12 > v24) {
      char v17 = 1;
    }
    if (v11 > v24) {
      char v26 = 1;
    }
    else {
      char v26 = v14;
    }
    float v27 = a5;
    char v28 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (uint64_t v29 = *(void *)(v5 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v57) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v6 + 56) + 8 * v57);
        if (v18 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v33 = 0;
        uint64_t v34 = v59 + v31 * v20;
        uint64_t v35 = v58 + v32 * v20;
        while (2)
        {
          if (v22
            || (uint64_t v36 = *(void *)(v5 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v17 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v37);
          if (v17) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_41:
            uint64_t v39 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_34:
            if (++v33 == v18) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v22
            || (v43 = *(void *)(v5 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v44);
          if (v26) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_52:
            uint64_t v46 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v46 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_45:
            if (++v40 == v13) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v5 + 40);
        uint64_t v50 = *(void *)(v6 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v22
            || (uint64_t v54 = *(void *)(v5 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v55) == 1)
          {
            uint64_t v52 = 0;
            if (v28) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
            if (v28)
            {
LABEL_59:
              uint64_t v53 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v6 + 24) + 8 * v8) == 1) {
            goto LABEL_59;
          }
          uint64_t v53 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_66:
          float v56 = 1.0 / sqrtf(*(float *)(v48 + v52 * v47 + v49) + v27);
          *(_WORD *)(v50 + v51 + v53 * v47++) = HIWORD(COERCE_UNSIGNED_INT(v56 + (float)(COERCE_FLOAT(LODWORD(v56) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v10 == v47) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v32 = 0;
      if (v18 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    uint64_t v15 = v7 - 4;
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)6>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    int v17 = *(unsigned __int8 *)(v5 + 50);
    uint64_t result = (uint64_t **)*(unsigned __int8 *)(v6 + 50);
    while (1)
    {
      if (v17
        || (uint64_t v18 = *(void *)(v5 + 16), v19 = v18 - 4, v18 < 4)
        || v19 > (int)v18 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1)
      {
        uint64_t v20 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
        if (result) {
          break;
        }
      }
      uint64_t v21 = *(void *)(v6 + 16);
      uint64_t v22 = v21 - 4;
      if (v21 < 4 || v22 > (int)v21 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v22) == 1) {
        break;
      }
      uint64_t v23 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v23 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v24 = 0;
    uint64_t v25 = v7 + v20 * v16;
    uint64_t v26 = v8 + v23 * v16;
    while (1)
    {
      if (v17
        || (uint64_t v27 = *(void *)(v5 + 16), v28 = v27 - 3, v27 < 3)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
        if (result) {
          break;
        }
      }
      uint64_t v30 = *(void *)(v6 + 16);
      uint64_t v31 = v30 - 3;
      if (v30 < 3 || v31 > (int)v30 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v31) == 1) {
        break;
      }
      uint64_t v32 = *(void *)(*(void *)(v6 + 56) + 8 * v31);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v24 == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v32 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v33 = 0;
    uint64_t v34 = v25 + v29 * v24;
    uint64_t v35 = v26 + v32 * v24;
    while (1)
    {
      if (v17
        || (uint64_t v36 = *(void *)(v5 + 16), v37 = v36 - 2, v36 < 2)
        || v37 > (int)v36 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v37) == 1)
      {
        uint64_t v38 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v37);
        if (result) {
          break;
        }
      }
      uint64_t v39 = *(void *)(v6 + 16);
      uint64_t v40 = v39 - 2;
      if (v39 < 2 || v40 > (int)v39 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v40) == 1) {
        break;
      }
      uint64_t v41 = *(void *)(*(void *)(v6 + 56) + 8 * v40);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v33 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v42 = 0;
    uint64_t v43 = v34 + v38 * v33;
    uint64_t v44 = *(void *)(v5 + 40);
    uint64_t v45 = *(void *)(v6 + 40);
    uint64_t v46 = v35 + v41 * v33;
    while (1)
    {
      if (v17
        || (uint64_t v49 = *(void *)(v5 + 16), v50 = v49 - 1, v49 < 1)
        || v50 > (int)v49 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v50) == 1)
      {
        uint64_t v47 = 0;
        if (result) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v50);
        if (result) {
          goto LABEL_55;
        }
      }
      uint64_t v51 = *(void *)(v6 + 16);
      uint64_t v52 = v51 - 1;
      if (v51 >= 1 && v52 <= (int)v51 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v52) != 1)
      {
        uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8 * v52);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v48 = 0;
LABEL_56:
      *(void *)(v46 + v48 * v42 + v45) = (uint64_t)(1.0
                                                   / sqrt((double)(*(void *)(v43 + v47 * v42 + v44) + (uint64_t)a5)));
      if (v12 == ++v42) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v14 = 1;
      BOOL v21 = 1;
    }
    uint64_t v55 = v15;
    if (v15 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v19;
    }
    if (v12 > v24) {
      char v17 = 1;
    }
    if (v11 > v24) {
      char v26 = 1;
    }
    else {
      char v26 = v14;
    }
    char v27 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (uint64_t v28 = *(void *)(v5 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1)
      {
        uint64_t v30 = 0;
        if (v25) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
        if (v25) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v55) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v6 + 56) + 8 * v55);
        if (v18 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v32 = 0;
        uint64_t v33 = v57 + v30 * v20;
        uint64_t v34 = v56 + v31 * v20;
        while (2)
        {
          if (v22
            || (uint64_t v35 = *(void *)(v5 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1)
          {
            uint64_t v37 = 0;
            if ((v17 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
          if (v17) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_41:
            uint64_t v38 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_34:
            if (++v32 == v18) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v39 = 0;
        uint64_t v40 = v33 + v37 * v32;
        uint64_t v41 = v34 + v38 * v32;
        while (2)
        {
          if (v22
            || (uint64_t v42 = *(void *)(v5 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v43) == 1)
          {
            uint64_t v44 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v43);
          if (v26) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_52:
            uint64_t v45 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v45 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_45:
            if (++v39 == v13) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v46 = 0;
        uint64_t v47 = v40 + v44 * v39;
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = *(void *)(v6 + 40);
        uint64_t v50 = v41 + v45 * v39;
        while (2)
        {
          if (v22
            || (uint64_t v53 = *(void *)(v5 + 16), v54 = v53 - 1, v53 < 1)
            || v54 > (int)v53 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v54) == 1)
          {
            uint64_t v52 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
            if ((v27 & 1) == 0)
            {
LABEL_60:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_57:
                *(_DWORD *)(v50 + v51 * v46 + v49) = (int)(1.0
                                                         / sqrt((double)(*(_DWORD *)(v47 + v52 * v46 + v48) + (int)a5)));
                if (v10 == ++v46) {
                  goto LABEL_45;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v51 = 0;
        goto LABEL_57;
      }
LABEL_30:
      uint64_t v31 = 0;
      if (v18 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    uint64_t v15 = v7 - 4;
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v7 - 1;
  if (v7 <= 0)
  {
    uint64_t v11 = v7 - 2;
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    uint64_t v11 = -1;
LABEL_5:
    uint64_t v12 = v7 - 3;
    uint64_t v13 = 1;
    char v14 = 1;
LABEL_6:
    uint64_t v15 = v7 - 4;
    uint64_t result = 1;
    char v17 = 1;
    uint64_t v18 = 1;
LABEL_7:
    char v19 = 1;
LABEL_8:
    uint64_t v20 = 0;
    BOOL v21 = v7 < 1;
    int v22 = *(unsigned __int8 *)(v5 + 50);
    int v23 = v7 - 1;
    if (*(unsigned char *)(v6 + 50)) {
      char v19 = 1;
    }
    uint64_t v24 = v23;
    if (*(unsigned char *)(v6 + 50))
    {
      char v17 = 1;
      char v14 = 1;
      BOOL v21 = 1;
    }
    uint64_t v55 = v15;
    if (v15 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v19;
    }
    if (v12 > v24) {
      char v17 = 1;
    }
    if (v11 > v24) {
      char v26 = 1;
    }
    else {
      char v26 = v14;
    }
    char v27 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (uint64_t v28 = *(void *)(v5 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1)
      {
        uint64_t v30 = 0;
        if (v25) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
        if (v25) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v6 + 24) + 8 * v55) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v6 + 56) + 8 * v55);
        if (v18 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v32 = 0;
        uint64_t v33 = v57 + v30 * v20;
        uint64_t v34 = v56 + v31 * v20;
        while (2)
        {
          if (v22
            || (uint64_t v35 = *(void *)(v5 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1)
          {
            uint64_t v37 = 0;
            if ((v17 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
          if (v17) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_41:
            uint64_t v38 = 0;
            if (v13 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_34:
            if (++v32 == v18) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v39 = 0;
        uint64_t v40 = v33 + v37 * v32;
        uint64_t v41 = v34 + v38 * v32;
        while (2)
        {
          if (v22
            || (uint64_t v42 = *(void *)(v5 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v43) == 1)
          {
            uint64_t v44 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v43);
          if (v26) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_52:
            uint64_t v45 = 0;
            if (v10 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v45 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_45:
            if (++v39 == v13) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v46 = 0;
        uint64_t v47 = v40 + v44 * v39;
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = *(void *)(v6 + 40);
        uint64_t v50 = v41 + v45 * v39;
        while (2)
        {
          if (v22
            || (uint64_t v53 = *(void *)(v5 + 16), v54 = v53 - 1, v53 < 1)
            || v54 > (int)v53 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v54) == 1)
          {
            uint64_t v52 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
            if ((v27 & 1) == 0)
            {
LABEL_60:
              if (*(void *)(*(void *)(v6 + 24) + 8 * v8) != 1)
              {
                uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
LABEL_57:
                *(_WORD *)(v50 + v51 * v46 + v49) = (int)(1.0
                                                        / sqrt((double)(*(__int16 *)(v47 + v52 * v46 + v48) + (int)a5)));
                if (v10 == ++v46) {
                  goto LABEL_45;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v51 = 0;
        goto LABEL_57;
      }
LABEL_30:
      uint64_t v31 = 0;
      if (v18 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v20 == result) {
        return result;
      }
    }
  }
  uint64_t v11 = v7 - 2;
  uint64_t v13 = *(void *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    uint64_t v11 = 0;
    char v14 = 0;
    uint64_t v12 = -1;
    goto LABEL_6;
  }
  uint64_t v12 = v7 - 3;
  uint64_t v18 = *(void *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    char v17 = 0;
    uint64_t v12 = 0;
    char v14 = 0;
    uint64_t result = 1;
    uint64_t v15 = -1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    uint64_t v15 = v7 - 4;
    char v17 = 0;
    char v14 = 0;
    char v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)6>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5 = **(void **)result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
      {
        uint64_t v19 = 0;
        uint64_t result = *(unsigned __int8 *)(v6 + 50);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
        uint64_t result = *(unsigned __int8 *)(v6 + 50);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v6 + 16);
      uint64_t result = v20 - 4;
      if (v20 < 4 || result > (int)v20 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * result) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * result);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = 0;
    uint64_t v22 = v7 + v19 * v16;
    uint64_t v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v24 = *(void *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v6 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v28);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++result == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = v22 + v26 * result;
    uint64_t v32 = v23 + v29 * result;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v33 = *(void *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = v31 + v35 * v30;
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v47) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      *(unsigned char *)(v41 + v43 * v39 + *(void *)(v6 + 40)) = (int)(1.0
                                                               / sqrt((double)(*(char *)(v40
                                                                                       + v42 * v39
                                                                                       + *(void *)(v5 + 40))
                                                                             + (int)a5)));
      if (v12 == ++v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

float std::sqrt[abi:nn180100]<float>(float *a1)
{
  float v1 = a1[1];
  float v2 = INFINITY;
  if (fabsf(v1) != INFINITY)
  {
    float v2 = *a1;
    if (fabsf(*a1) == INFINITY)
    {
      if (v2 <= 0.0) {
        return 0.0;
      }
    }
    else
    {
      float v6 = a1[1];
      float v7 = *a1;
      float v3 = sqrtf(hypotf(*a1, v1));
      float v4 = atan2f(v6, v7);
      float v2 = NAN;
      if ((LODWORD(v3) & 0x80000000) == 0)
      {
        if (fabsf(v4 * 0.5) == INFINITY)
        {
          if (v3 == INFINITY) {
            return v3;
          }
          else {
            return NAN;
          }
        }
        else
        {
          return v3 * __sincosf_stret(v4 * 0.5).__cosval;
        }
      }
    }
  }
  return v2;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = vrndp_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                              + *(void *)(v4 + 40)]);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = ceilf(*(float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float16x4_t a5)
{
  uint64_t v5 = **result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v5 + 56) + 8 * v18);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t result = (uint64_t **)(v7 + (void)result * v16);
    uint64_t v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v24 = *(void *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v6 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v28);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = (char *)result + v26 * v22;
    uint64_t v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v33 = *(void *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = &v31[v35 * v30];
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v47) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      a5.i32[0] = *(_DWORD *)&v40[v42 * v39 + *(void *)(v5 + 40)];
      a5 = (float16x4_t)vcvtq_f32_f16(vrndp_f16(a5)).u64[0];
      *(double *)(v41 + v43 * v39++ + *(void *)(v6 + 40)) = *(double *)&a5;
      if (v12 == v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = ceill(*(short float *)(v48 + v59 * v47 + v49));
                __asm { FCVT            S0, H0 }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v46 = *(void *)(v4 + 16), v47 = v46 - 1, v46 < 1)
        || v47 > (int)v46 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v47) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v47);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = v48 - 1;
      if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (short float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (short float *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      short float v45 = ceill(v43[1]);
      short float *v44 = ceill(*v43);
      v44[1] = v45;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(short float *)(v51 + v52 * v47 + v50) = ceill(*(short float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v51 = *(void *)(v4 + 16), uint64_t v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v52) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v52);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v53 = *(void *)(v5 + 16);
      uint64_t v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (_WORD *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      _S0 = ceilf(*v43);
      _S1 = ceilf(v43[1]);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      _WORD *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v61 = **a4;
  uint64_t v62 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v62 + v31 * v19;
        uint64_t v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v59 = *(void *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v60) == 1)
          {
            uint64_t v58 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = ceilf(*(float *)(v48 + v58 * v47 + v49));
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = ceilf(COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = ceilf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = ceilf(*(float *)(v46 + v50 * v45 + v47));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    int v16 = *(unsigned __int8 *)(v4 + 50);
    uint64_t result = (uint64_t **)*(unsigned __int8 *)(v5 + 50);
    while (1)
    {
      if (v16
        || (uint64_t v17 = *(void *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1)
      {
        uint64_t v19 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
        if (result) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v5 + 16);
      uint64_t v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v22 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t v24 = v6 + v19 * v15;
    uint64_t v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (result) {
          break;
        }
      }
      uint64_t v29 = *(void *)(v5 + 16);
      uint64_t v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
        break;
      }
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v23 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v31 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v32 = 0;
    uint64_t v33 = v24 + v28 * v23;
    uint64_t v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
      {
        uint64_t v37 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
        if (result) {
          break;
        }
      }
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v32 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v40 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v41 = 0;
    uint64_t v42 = v33 + v37 * v32;
    uint64_t v43 = *(void *)(v4 + 40);
    uint64_t v44 = *(void *)(v5 + 40);
    uint64_t v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(void *)(v4 + 16), uint64_t v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v49) == 1)
      {
        uint64_t v46 = 0;
        if (result) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(*(void *)(v4 + 56) + 8 * v49);
        if (result) {
          goto LABEL_55;
        }
      }
      uint64_t v50 = *(void *)(v5 + 16);
      uint64_t v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v51) != 1)
      {
        uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v47 = 0;
LABEL_56:
      *(void *)(v45 + v47 * v41 + v44) = (uint64_t)(double)*(uint64_t *)(v42 + v46 * v41 + v43);
      if (v11 == ++v41) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(_DWORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = *(_WORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(unsigned char *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = v39[v41 * v38 + *(void *)(v4 + 40)];
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = vrndm_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                              + *(void *)(v4 + 40)]);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = floorf(*(float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float16x4_t a5)
{
  uint64_t v5 = **result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v5 + 56) + 8 * v18);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t result = (uint64_t **)(v7 + (void)result * v16);
    uint64_t v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v24 = *(void *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v6 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v28);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = (char *)result + v26 * v22;
    uint64_t v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v33 = *(void *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = &v31[v35 * v30];
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v47) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      a5.i32[0] = *(_DWORD *)&v40[v42 * v39 + *(void *)(v5 + 40)];
      a5 = (float16x4_t)vcvtq_f32_f16(vrndm_f16(a5)).u64[0];
      *(double *)(v41 + v43 * v39++ + *(void *)(v6 + 40)) = *(double *)&a5;
      if (v12 == v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = floorl(*(short float *)(v48 + v59 * v47 + v49));
                __asm { FCVT            S0, H0 }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v46 = *(void *)(v4 + 16), v47 = v46 - 1, v46 < 1)
        || v47 > (int)v46 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v47) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v47);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = v48 - 1;
      if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (short float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (short float *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      short float v45 = floorl(v43[1]);
      short float *v44 = floorl(*v43);
      v44[1] = v45;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(short float *)(v51 + v52 * v47 + v50) = floorl(*(short float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v51 = *(void *)(v4 + 16), uint64_t v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v52) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v52);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v53 = *(void *)(v5 + 16);
      uint64_t v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (_WORD *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      _S0 = floorf(*v43);
      _S1 = floorf(v43[1]);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      _WORD *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v61 = **a4;
  uint64_t v62 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v62 + v31 * v19;
        uint64_t v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v59 = *(void *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v60) == 1)
          {
            uint64_t v58 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = floorf(*(float *)(v48 + v58 * v47 + v49));
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = floorf(COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = floorf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = floorf(*(float *)(v46 + v50 * v45 + v47));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = vneg_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                             + *(void *)(v4 + 40)]);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = -*(float *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float16x4_t a5)
{
  uint64_t v5 = **result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v5 + 56) + 8 * v18);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t result = (uint64_t **)(v7 + (void)result * v16);
    uint64_t v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v24 = *(void *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v6 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v28);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = (char *)result + v26 * v22;
    uint64_t v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v33 = *(void *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = &v31[v35 * v30];
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v47) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      a5.i32[0] = *(_DWORD *)&v40[v42 * v39 + *(void *)(v5 + 40)];
      a5 = (float16x4_t)vcvtq_f32_f16(vneg_f16(a5)).u64[0];
      *(double *)(v41 + v43 * v39++ + *(void *)(v6 + 40)) = *(double *)&a5;
      if (v12 == v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v59 * v47 + v49);
                __asm { FCVT            S0, H0 }
                *(float *)(v51 + v52 * v47++ + v50) = -_S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v46 = *(void *)(v4 + 16), v47 = v46 - 1, v46 < 1)
        || v47 > (int)v46 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v47) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v47);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = v48 - 1;
      if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (short float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (short float *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      short float v45 = -v43[1];
      short float *v44 = -*v43;
      v44[1] = v45;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(short float *)(v51 + v52 * v47 + v50) = -*(short float *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v51 = *(void *)(v4 + 16), uint64_t v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v52) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v52);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v53 = *(void *)(v5 + 16);
      uint64_t v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = &v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (short float *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      _S0 = *(_DWORD *)v43;
      _S1 = *((_DWORD *)v43 + 1);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      short float *v44 = -*(short float *)&_S0;
      v44[1] = -*(short float *)&_S1;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v61 = **a4;
  uint64_t v62 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v62 + v31 * v19;
        uint64_t v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v59 = *(void *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v60) == 1)
          {
            uint64_t v58 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = *(_DWORD *)(v48 + v58 * v47 + v49);
                __asm { FCVT            H0, S0 }
                *(short float *)(v51 + v52 * v47++ + v50) = -*(short float *)&_S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = (*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16) ^ 0x80000000;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          LODWORD(v54) = *(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16;
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(-(float)(v54
                                                                                  - (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(-v54) & 0xFF800000)
                                                                                          * 0.0039062))));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v55 = **a4;
  uint64_t v56 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v54 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v56 + v29 * v19;
        uint64_t v33 = v55 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          *(_WORD *)(v48 + v49 + v51 * v45) = HIWORD(COERCE_UNSIGNED_INT(-(float)(*(float *)(v46 + v50 * v45 + v47)
                                                                                - (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(-*(float *)(v46 + v50 * v45 + v47)) & 0xFF800000)
                                                                                        * 0.0039062))));
          if (v9 == ++v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    int v16 = *(unsigned __int8 *)(v4 + 50);
    uint64_t result = (uint64_t **)*(unsigned __int8 *)(v5 + 50);
    while (1)
    {
      if (v16
        || (uint64_t v17 = *(void *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1)
      {
        uint64_t v19 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
        if (result) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v5 + 16);
      uint64_t v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v22 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t v24 = v6 + v19 * v15;
    uint64_t v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (result) {
          break;
        }
      }
      uint64_t v29 = *(void *)(v5 + 16);
      uint64_t v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
        break;
      }
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v23 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v31 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v32 = 0;
    uint64_t v33 = v24 + v28 * v23;
    uint64_t v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
      {
        uint64_t v37 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
        if (result) {
          break;
        }
      }
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v32 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v40 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v41 = 0;
    uint64_t v42 = v33 + v37 * v32;
    uint64_t v43 = *(void *)(v4 + 40);
    uint64_t v44 = *(void *)(v5 + 40);
    uint64_t v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(void *)(v4 + 16), uint64_t v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v49) == 1)
      {
        uint64_t v46 = 0;
        if (result) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(*(void *)(v4 + 56) + 8 * v49);
        if (result) {
          goto LABEL_55;
        }
      }
      uint64_t v50 = *(void *)(v5 + 16);
      uint64_t v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v51) != 1)
      {
        uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v47 = 0;
LABEL_56:
      *(void *)(v45 + v47 * v41 + v44) = -*(void *)(v42 + v46 * v41 + v43);
      if (v11 == ++v41) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = -*(_DWORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = -*(_WORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(unsigned char *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = -v39[v41 * v38 + *(void *)(v4 + 40)];
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v47 = *(void *)(v4 + 16), uint64_t v48 = v47 - 1, v47 < 1)
        || v48 > (int)v47 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v48) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v48);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v49 = *(void *)(v5 + 16);
      uint64_t v50 = v49 - 1;
      if (v49 >= 1 && v50 <= (int)v49 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v50) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v50);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = v40 + v42 * v38 + *(void *)(v5 + 40);
      float v45 = v43[1];
      BOOL v46 = *v43 == 0.0;
      if (v45 != 0.0) {
        BOOL v46 = 0;
      }
      *(float *)uint64_t v44 = (float)v46;
      *(_DWORD *)(v44 + 4) = 0;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v59 + v31 * v19;
        uint64_t v35 = v58 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v56 = *(void *)(v4 + 16), uint64_t v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v57) == 1)
          {
            uint64_t v55 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v57);
            if ((v28 & 1) == 0)
            {
LABEL_67:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                uint64_t v53 = v51 + v52 * v47;
                if (*(float *)(v48 + v55 * v47 + v49) == 0.0) {
                  float v54 = 1.0;
                }
                else {
                  float v54 = 0.0;
                }
                *(float *)(v53 + v50) = v54;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else if (*(unsigned char *)(v5 + 50))
      {
        break;
      }
      uint64_t v25 = *(void *)(v5 + 16);
      uint64_t v26 = v25 - 3;
      if (v25 < 3 || v26 > (int)v25 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v26) == 1) {
        break;
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v27 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v28 = 0;
    uint64_t v29 = v22 + v27 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v30 = *(void *)(v4 + 16), v31 = v30 - 2, v30 < 2)
        || v31 > (int)v30 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v31) == 1)
      {
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else if (*(unsigned char *)(v5 + 50))
      {
        break;
      }
      uint64_t v32 = *(void *)(v5 + 16);
      uint64_t v33 = v32 - 2;
      if (v32 < 2 || v33 > (int)v32 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
        break;
      }
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v28 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v34 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v35 = 0;
    uint64_t v36 = v29 + v34 * v28;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v46 = *(void *)(v4 + 16), v47 = v46 - 1, v46 < 1)
        || v47 > (int)v46 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v47) == 1)
      {
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else if (*(unsigned char *)(v5 + 50))
      {
        goto LABEL_55;
      }
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = v48 - 1;
      if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
      {
        uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v37 = 0;
LABEL_56:
      uint64_t v38 = v36 + v37 * v35 + *(void *)(v5 + 40);
      __asm { FCMP            H0, #0 }
      if (_ZF) {
        unsigned int v44 = 1;
      }
      else {
        unsigned int v44 = 0;
      }
      __asm { FCMP            H1, #0 }
      if (!_ZF) {
        unsigned int v44 = 0;
      }
      *(float *)uint64_t v38 = (float)v44;
      *(_DWORD *)(v38 + 4) = 0;
      if (v11 == ++v35) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v55 = **a4;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        if (v25) {
          goto LABEL_34;
        }
      }
      else if (v25)
      {
        goto LABEL_34;
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v32 = 0;
        uint64_t v33 = v55 + v31 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v36 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v36 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v32 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v37 = 0;
        uint64_t v38 = v33 + v36 * v32;
        while (2)
        {
          if (v21
            || (uint64_t v39 = *(void *)(v4 + 16), v40 = v39 - 2, v39 < 2)
            || v40 > (int)v39 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v40) == 1)
          {
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v41 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v41 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v37 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v42 = 0;
        uint64_t v43 = *(void *)(v5 + 40);
        uint64_t v44 = v38 + v41 * v37;
        while (2)
        {
          if (v21
            || (uint64_t v53 = *(void *)(v4 + 16), v54 = v53 - 1, v53 < 1)
            || v54 > (int)v53 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v54) == 1)
          {
            if ((v28 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else if ((v28 & 1) == 0)
          {
LABEL_67:
            if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
            {
              uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
              uint64_t v46 = v44 + v45 * v42;
              __asm { FCMP            H2, #0 }
              if (_ZF) {
                float v52 = 1.0;
              }
              else {
                float v52 = 0.0;
              }
              *(float *)(v46 + v43) = v52;
              if (v9 == ++v42) {
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v45 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v31 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else if (*(unsigned char *)(v5 + 50))
      {
        break;
      }
      uint64_t v25 = *(void *)(v5 + 16);
      uint64_t v26 = v25 - 3;
      if (v25 < 3 || v26 > (int)v25 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v26) == 1) {
        break;
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v26);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v27 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v28 = 0;
    uint64_t v29 = v22 + v27 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v30 = *(void *)(v4 + 16), v31 = v30 - 2, v30 < 2)
        || v31 > (int)v30 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v31) == 1)
      {
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else if (*(unsigned char *)(v5 + 50))
      {
        break;
      }
      uint64_t v32 = *(void *)(v5 + 16);
      uint64_t v33 = v32 - 2;
      if (v32 < 2 || v33 > (int)v32 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v33) == 1) {
        break;
      }
      uint64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v33);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v28 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v34 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v35 = 0;
    uint64_t v36 = v29 + v34 * v28;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v46 = *(void *)(v4 + 16), v47 = v46 - 1, v46 < 1)
        || v47 > (int)v46 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v47) == 1)
      {
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else if (*(unsigned char *)(v5 + 50))
      {
        goto LABEL_55;
      }
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = v48 - 1;
      if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
      {
        uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v37 = 0;
LABEL_56:
      uint64_t v38 = v36 + v37 * v35 + *(void *)(v5 + 40);
      __asm { FCMP            H0, #0 }
      if (_ZF) {
        unsigned int v44 = 1;
      }
      else {
        unsigned int v44 = 0;
      }
      __asm { FCMP            H1, #0 }
      if (!_ZF) {
        unsigned int v44 = 0;
      }
      *(short float *)uint64_t v38 = (short float)v44;
      *(_WORD *)(v38 + 2) = 0;
      if (v11 == ++v35) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v55 = **a4;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        if (v25) {
          goto LABEL_34;
        }
      }
      else if (v25)
      {
        goto LABEL_34;
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v32 = 0;
        uint64_t v33 = v55 + v31 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v36 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v36 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v32 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v37 = 0;
        uint64_t v38 = v33 + v36 * v32;
        while (2)
        {
          if (v21
            || (uint64_t v39 = *(void *)(v4 + 16), v40 = v39 - 2, v39 < 2)
            || v40 > (int)v39 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v40) == 1)
          {
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v41 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v41 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v37 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v42 = 0;
        uint64_t v43 = *(void *)(v5 + 40);
        uint64_t v44 = v38 + v41 * v37;
        while (2)
        {
          if (v21
            || (uint64_t v53 = *(void *)(v4 + 16), v54 = v53 - 1, v53 < 1)
            || v54 > (int)v53 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v54) == 1)
          {
            if ((v28 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else if ((v28 & 1) == 0)
          {
LABEL_67:
            if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
            {
              uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
              uint64_t v46 = v44 + v45 * v42;
              __asm { FCMP            H2, #0 }
              if (_ZF) {
                LOWORD(v52) = COERCE_UNSIGNED_INT(1.0);
              }
              else {
                short float v52 = COERCE_SHORT_FLOAT(0);
              }
              *(short float *)(v46 + v43) = v52;
              if (v9 == ++v42) {
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v45 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v31 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v47 = *(void *)(v4 + 16), uint64_t v48 = v47 - 1, v47 < 1)
        || v48 > (int)v47 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v48) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v48);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v49 = *(void *)(v5 + 16);
      uint64_t v50 = v49 - 1;
      if (v49 >= 1 && v50 <= (int)v49 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v50) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v50);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = v40 + v42 * v38 + *(void *)(v5 + 40);
      float v45 = v43[1];
      BOOL v46 = *v43 == 0.0;
      if (v45 != 0.0) {
        BOOL v46 = 0;
      }
      *(short float *)uint64_t v44 = (short float)v46;
      *(_WORD *)(v44 + 2) = 0;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v59 + v31 * v19;
        uint64_t v35 = v58 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v56 = *(void *)(v4 + 16), uint64_t v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v57) == 1)
          {
            uint64_t v55 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v57);
            if ((v28 & 1) == 0)
            {
LABEL_67:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                uint64_t v53 = v51 + v52 * v47;
                if (*(float *)(v48 + v55 * v47 + v49) == 0.0) {
                  LOWORD(v54) = COERCE_UNSIGNED_INT(1.0);
                }
                else {
                  short float v54 = COERCE_SHORT_FLOAT(0);
                }
                *(short float *)(v53 + v50) = v54;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v59 + v31 * v19;
        uint64_t v35 = v58 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v56 = *(void *)(v4 + 16), uint64_t v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v57) == 1)
          {
            uint64_t v55 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v57);
            if ((v28 & 1) == 0)
            {
LABEL_67:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                uint64_t v53 = v51 + v52 * v47;
                if ((*(_WORD *)(v48 + v55 * v47 + v49) & 0x7FFF) != 0) {
                  float v54 = 0.0;
                }
                else {
                  float v54 = 1.0;
                }
                *(float *)(v53 + v50) = v54;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v57 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v57) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v57);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v59 + v29 * v19;
        uint64_t v33 = v58 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (uint64_t v55 = *(void *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v56) == 1)
          {
            uint64_t v54 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_63;
            }
          }
          else
          {
            uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v56);
            if ((v26 & 1) == 0)
            {
LABEL_63:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v50 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_57:
                uint64_t v51 = v49 + v50 * v45;
                if ((*(_WORD *)(v46 + v54 * v45 + v47) & 0x7FFF) != 0) {
                  float v52 = 0.0;
                }
                else {
                  float v52 = 1.0;
                }
                float v53 = v52 + (float)(v52 * 0.0039062);
                *(_WORD *)(v51 + v48) = HIWORD(v53);
                if (v9 == ++v45) {
                  goto LABEL_45;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v50 = 0;
        goto LABEL_57;
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v57 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v57) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v57);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v59 + v29 * v19;
        uint64_t v33 = v58 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (uint64_t v55 = *(void *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v56) == 1)
          {
            uint64_t v54 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_63;
            }
          }
          else
          {
            uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v56);
            if ((v26 & 1) == 0)
            {
LABEL_63:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v50 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_57:
                uint64_t v51 = v49 + v50 * v45;
                if (*(float *)(v46 + v54 * v45 + v47) == 0.0) {
                  float v52 = 1.0;
                }
                else {
                  float v52 = 0.0;
                }
                float v53 = v52 + (float)(v52 * 0.0039062);
                *(_WORD *)(v51 + v48) = HIWORD(v53);
                if (v9 == ++v45) {
                  goto LABEL_45;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v50 = 0;
        goto LABEL_57;
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    int v16 = *(unsigned __int8 *)(v4 + 50);
    uint64_t result = (uint64_t **)*(unsigned __int8 *)(v5 + 50);
    while (1)
    {
      if (v16
        || (uint64_t v17 = *(void *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1)
      {
        uint64_t v19 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
        if (result) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v5 + 16);
      uint64_t v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v22 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t v24 = v6 + v19 * v15;
    uint64_t v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (result) {
          break;
        }
      }
      uint64_t v29 = *(void *)(v5 + 16);
      uint64_t v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
        break;
      }
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v23 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v31 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v32 = 0;
    uint64_t v33 = v24 + v28 * v23;
    uint64_t v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
      {
        uint64_t v37 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
        if (result) {
          break;
        }
      }
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v32 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v40 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v41 = 0;
    uint64_t v42 = v33 + v37 * v32;
    uint64_t v43 = *(void *)(v4 + 40);
    uint64_t v44 = *(void *)(v5 + 40);
    uint64_t v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(void *)(v4 + 16), uint64_t v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v49) == 1)
      {
        uint64_t v46 = 0;
        if (result) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(*(void *)(v4 + 56) + 8 * v49);
        if (result) {
          goto LABEL_55;
        }
      }
      uint64_t v50 = *(void *)(v5 + 16);
      uint64_t v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v51) != 1)
      {
        uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v47 = 0;
LABEL_56:
      *(void *)(v45 + v47 * v41 + v44) = *(void *)(v42 + v46 * v41 + v43) == 0;
      if (v11 == ++v41) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(_DWORD *)(v48 + v53 * v47 + v49) == 0;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = *(_WORD *)(v48 + v53 * v47 + v49) == 0;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(unsigned char *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = v39[v41 * v38 + *(void *)(v4 + 40)] == 0;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = vrnda_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                              + *(void *)(v4 + 40)]);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = roundf(*(float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float16x4_t a5)
{
  uint64_t v5 = **result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v5 + 56) + 8 * v18);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t result = (uint64_t **)(v7 + (void)result * v16);
    uint64_t v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v24 = *(void *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v6 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v28);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = (char *)result + v26 * v22;
    uint64_t v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v33 = *(void *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = &v31[v35 * v30];
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v47) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      a5.i32[0] = *(_DWORD *)&v40[v42 * v39 + *(void *)(v5 + 40)];
      a5 = (float16x4_t)vcvtq_f32_f16(vrnda_f16(a5)).u64[0];
      *(double *)(v41 + v43 * v39++ + *(void *)(v6 + 40)) = *(double *)&a5;
      if (v12 == v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = roundl(*(short float *)(v48 + v59 * v47 + v49));
                __asm { FCVT            S0, H0 }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v46 = *(void *)(v4 + 16), v47 = v46 - 1, v46 < 1)
        || v47 > (int)v46 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v47) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v47);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = v48 - 1;
      if (v48 >= 1 && v49 <= (int)v48 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v49) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v49);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (short float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (short float *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      short float v45 = roundl(v43[1]);
      short float *v44 = roundl(*v43);
      v44[1] = v45;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(short float *)(v51 + v52 * v47 + v50) = roundl(*(short float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v51 = *(void *)(v4 + 16), uint64_t v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v52) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v52);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v53 = *(void *)(v5 + 16);
      uint64_t v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (_WORD *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      _S0 = roundf(*v43);
      _S1 = roundf(v43[1]);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      _WORD *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v61 = **a4;
  uint64_t v62 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v62 + v31 * v19;
        uint64_t v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v59 = *(void *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v60) == 1)
          {
            uint64_t v58 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = roundf(*(float *)(v48 + v58 * v47 + v49));
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = roundf(COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = roundf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = roundf(*(float *)(v46 + v50 * v45 + v47));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v43 = **a4;
  uint64_t v44 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 < 1)
  {
    uint64_t v45 = 1;
    uint64_t v51 = 1;
    uint64_t v9 = 1;
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v8 = v7 + 8 * v6;
  uint64_t v9 = *(void *)(v8 - 8);
  if (v6 == 1)
  {
    uint64_t v45 = 1;
    uint64_t v51 = 1;
LABEL_7:
    uint64_t v49 = 1;
LABEL_8:
    uint64_t v46 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v10 = *(void *)(v4 + 16), v11 = v10 - 4, v10 < 4)
        || v11 > (int)v10 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v11) == 1)
      {
        uint64_t v12 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(*(void *)(v4 + 56) + 8 * v11);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v13 = *(void *)(v5 + 16);
      uint64_t v14 = v13 - 4;
      if (v13 >= 4 && v14 <= (int)v13 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v15 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v15 = 0;
LABEL_21:
      if (v49 >= 1)
      {
        uint64_t v50 = 0;
        uint64_t v48 = v44 + v12 * v46;
        uint64_t v47 = v43 + v15 * v46;
        do
        {
          if (*(unsigned char *)(v4 + 50)
            || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 3, v16 < 3)
            || v17 > (int)v16 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
          {
            uint64_t v18 = 0;
            if (*(unsigned char *)(v5 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v18 = *(void *)(*(void *)(v4 + 56) + 8 * v17);
            if (*(unsigned char *)(v5 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v19 = *(void *)(v5 + 16);
          uint64_t v20 = v19 - 3;
          if (v19 >= 3 && v20 <= (int)v19 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v20) != 1)
          {
            uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v21 = 0;
LABEL_35:
          if (v51 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = v48 + v18 * v50;
            uint64_t v24 = v47 + v21 * v50;
            while (1)
            {
              if (*(unsigned char *)(v4 + 50)
                || (uint64_t v25 = *(void *)(v4 + 16), v26 = v25 - 2, v25 < 2)
                || v26 > (int)v25 - 1
                || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1)
              {
                uint64_t v27 = 0;
                if (*(unsigned char *)(v5 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v27 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
                if (*(unsigned char *)(v5 + 50)) {
                  break;
                }
              }
              uint64_t v28 = *(void *)(v5 + 16);
              uint64_t v29 = v28 - 2;
              if (v28 < 2 || v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
                break;
              }
              uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
              if (v9 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v22 == v51) {
                goto LABEL_23;
              }
            }
            uint64_t v30 = 0;
            if (v9 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v31 = 0;
            uint64_t v32 = v23 + v27 * v22;
            uint64_t v33 = v24 + v30 * v22;
            while (2)
            {
              if (!*(unsigned char *)(v4 + 50))
              {
                uint64_t v38 = *(void *)(v4 + 16);
                uint64_t v39 = v38 - 1;
                if (v38 >= 1 && v39 <= (int)v38 - 1 && *(void *)(*(void *)(v4 + 24) + 8 * v39) != 1)
                {
                  uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v39);
                  if (!*(unsigned char *)(v5 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v34 = 0;
              if (*(unsigned char *)(v5 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v40 = *(void *)(v5 + 16);
              uint64_t v41 = v40 - 1;
              if (v40 < 1 || v41 > (int)v40 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v41) == 1) {
LABEL_53:
              }
                uint64_t v35 = 0;
              else {
                uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v41);
              }
              uint64_t v36 = v33 + v35 * v31 + *(void *)(v5 + 40);
              uint64_t v52 = *(void *)(v32 + v34 * v31 + *(void *)(v4 + 40));
              uint64_t v53 = 1065353216;
              *(float *)uint64_t v36 = std::operator/[abi:nn180100]<float>((float *)&v53, (float *)&v52);
              *(_DWORD *)(v36 + 4) = v37;
              if (v9 == ++v31) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v50;
        }
        while (v50 != v49);
      }
      if (++v46 == v45) {
        return;
      }
    }
  }
  uint64_t v51 = *(void *)(v8 - 16);
  if ((unint64_t)v6 < 3)
  {
    uint64_t v45 = 1;
    goto LABEL_7;
  }
  uint64_t v42 = v7 + 8 * v6;
  uint64_t v49 = *(void *)(v42 - 24);
  if (v6 == 3)
  {
    uint64_t v45 = 1;
    goto LABEL_8;
  }
  uint64_t v45 = *(void *)(v42 - 32);
  if (v45 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = 1.0 / *(float *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v49 = **a4;
  uint64_t v50 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 < 1)
  {
    uint64_t v51 = 1;
    uint64_t v57 = 1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v8 + 8 * v7;
  uint64_t v10 = *(void *)(v9 - 8);
  if (v7 == 1)
  {
    uint64_t v51 = 1;
    uint64_t v57 = 1;
LABEL_7:
    uint64_t v55 = 1;
LABEL_8:
    uint64_t v52 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v11 = *(void *)(v5 + 16), v12 = v11 - 4, v11 < 4)
        || v12 > (int)v11 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v12) == 1)
      {
        uint64_t v13 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(v5 + 56) + 8 * v12);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v14 = *(void *)(v6 + 16);
      uint64_t v15 = v14 - 4;
      if (v14 >= 4 && v15 <= (int)v14 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v16 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v16 = 0;
LABEL_21:
      if (v55 >= 1)
      {
        uint64_t v56 = 0;
        uint64_t v54 = v50 + v13 * v52;
        uint64_t v53 = v49 + v16 * v52;
        do
        {
          if (*(unsigned char *)(v5 + 50)
            || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 3, v17 < 3)
            || v18 > (int)v17 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
          {
            uint64_t v19 = 0;
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v20 = *(void *)(v6 + 16);
          uint64_t v21 = v20 - 3;
          if (v20 >= 3 && v21 <= (int)v20 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v21) != 1)
          {
            uint64_t v22 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v22 = 0;
LABEL_35:
          if (v57 >= 1)
          {
            uint64_t v23 = 0;
            uint64_t v24 = v54 + v19 * v56;
            uint64_t v25 = v53 + v22 * v56;
            while (1)
            {
              if (*(unsigned char *)(v5 + 50)
                || (uint64_t v26 = *(void *)(v5 + 16), v27 = v26 - 2, v26 < 2)
                || v27 > (int)v26 - 1
                || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1)
              {
                uint64_t v28 = 0;
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              uint64_t v29 = *(void *)(v6 + 16);
              uint64_t v30 = v29 - 2;
              if (v29 < 2 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v30) == 1) {
                break;
              }
              uint64_t v31 = *(void *)(*(void *)(v6 + 56) + 8 * v30);
              if (v10 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v23 == v57) {
                goto LABEL_23;
              }
            }
            uint64_t v31 = 0;
            if (v10 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v32 = 0;
            uint64_t v33 = v24 + v28 * v23;
            uint64_t v34 = v25 + v31 * v23;
            while (2)
            {
              if (!*(unsigned char *)(v5 + 50))
              {
                uint64_t v44 = *(void *)(v5 + 16);
                uint64_t v45 = v44 - 1;
                if (v44 >= 1 && v45 <= (int)v44 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v45) != 1)
                {
                  uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
                  if (!*(unsigned char *)(v6 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v35 = 0;
              if (*(unsigned char *)(v6 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v46 = *(void *)(v6 + 16);
              uint64_t v47 = v46 - 1;
              if (v46 < 1 || v47 > (int)v46 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v47) == 1) {
LABEL_53:
              }
                uint64_t v36 = 0;
              else {
                uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
              }
              uint64_t v37 = (_DWORD *)(v34 + v36 * v32 + *(void *)(v6 + 40));
              LODWORD(_D0) = *(_DWORD *)(v33 + v35 * v32 + *(void *)(v5 + 40));
              unint64_t v58 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
              uint64_t v59 = 1065353216;
              *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v59, (float *)&v58);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
                FCVT            S0, H0
                FCVT            S1, H1
              }
              *uint64_t v37 = LODWORD(_D0);
              v37[1] = _S1;
              if (v10 == ++v32) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v56;
        }
        while (v56 != v55);
      }
      if (++v52 == v51) {
        return;
      }
    }
  }
  uint64_t v57 = *(void *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    uint64_t v51 = 1;
    goto LABEL_7;
  }
  uint64_t v48 = v8 + 8 * v7;
  uint64_t v55 = *(void *)(v48 - 24);
  if (v7 == 3)
  {
    uint64_t v51 = 1;
    goto LABEL_8;
  }
  uint64_t v51 = *(void *)(v48 - 32);
  if (v51 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H1 = *(_WORD *)(v48 + v59 * v47 + v49);
                __asm { FCVT            S1, H1 }
                *(float *)(v51 + v52 * v47++ + v50) = 1.0 / _S1;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5 = **a1;
  uint64_t v6 = **a2;
  uint64_t v48 = **a4;
  uint64_t v49 = **a3;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 < 1)
  {
    uint64_t v50 = 1;
    uint64_t v56 = 1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v8 + 8 * v7;
  uint64_t v10 = *(void *)(v9 - 8);
  if (v7 == 1)
  {
    uint64_t v50 = 1;
    uint64_t v56 = 1;
LABEL_7:
    uint64_t v54 = 1;
LABEL_8:
    uint64_t v51 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v11 = *(void *)(v5 + 16), v12 = v11 - 4, v11 < 4)
        || v12 > (int)v11 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v12) == 1)
      {
        uint64_t v13 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(v5 + 56) + 8 * v12);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v14 = *(void *)(v6 + 16);
      uint64_t v15 = v14 - 4;
      if (v14 >= 4 && v15 <= (int)v14 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v15) != 1)
      {
        uint64_t v16 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v16 = 0;
LABEL_21:
      if (v54 >= 1)
      {
        uint64_t v55 = 0;
        uint64_t v53 = v49 + v13 * v51;
        uint64_t v52 = v48 + v16 * v51;
        do
        {
          if (*(unsigned char *)(v5 + 50)
            || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 3, v17 < 3)
            || v18 > (int)v17 - 1
            || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
          {
            uint64_t v19 = 0;
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
            if (*(unsigned char *)(v6 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v20 = *(void *)(v6 + 16);
          uint64_t v21 = v20 - 3;
          if (v20 >= 3 && v21 <= (int)v20 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v21) != 1)
          {
            uint64_t v22 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v22 = 0;
LABEL_35:
          if (v56 >= 1)
          {
            uint64_t v23 = 0;
            uint64_t v24 = v53 + v19 * v55;
            uint64_t v25 = v52 + v22 * v55;
            while (1)
            {
              if (*(unsigned char *)(v5 + 50)
                || (uint64_t v26 = *(void *)(v5 + 16), v27 = v26 - 2, v26 < 2)
                || v27 > (int)v26 - 1
                || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1)
              {
                uint64_t v28 = 0;
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
                if (*(unsigned char *)(v6 + 50)) {
                  break;
                }
              }
              uint64_t v29 = *(void *)(v6 + 16);
              uint64_t v30 = v29 - 2;
              if (v29 < 2 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v30) == 1) {
                break;
              }
              uint64_t v31 = *(void *)(*(void *)(v6 + 56) + 8 * v30);
              if (v10 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v23 == v56) {
                goto LABEL_23;
              }
            }
            uint64_t v31 = 0;
            if (v10 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v32 = 0;
            uint64_t v33 = v24 + v28 * v23;
            uint64_t v34 = v25 + v31 * v23;
            while (2)
            {
              if (!*(unsigned char *)(v5 + 50))
              {
                uint64_t v43 = *(void *)(v5 + 16);
                uint64_t v44 = v43 - 1;
                if (v43 >= 1 && v44 <= (int)v43 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v44) != 1)
                {
                  uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v44);
                  if (!*(unsigned char *)(v6 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v35 = 0;
              if (*(unsigned char *)(v6 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v45 = *(void *)(v6 + 16);
              uint64_t v46 = v45 - 1;
              if (v45 < 1 || v46 > (int)v45 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v46) == 1) {
LABEL_53:
              }
                uint64_t v36 = 0;
              else {
                uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v46);
              }
              uint64_t v37 = (_WORD *)(v34 + v36 * v32 + *(void *)(v6 + 40));
              LODWORD(_D0) = *(_DWORD *)(v33 + v35 * v32 + *(void *)(v5 + 40));
              unint64_t v57 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
              uint64_t v58 = 1065353216;
              *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v58, (float *)&v57);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *uint64_t v37 = LOWORD(_D0);
              v37[1] = _S1;
              if (v10 == ++v32) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v55;
        }
        while (v55 != v54);
      }
      if (++v51 == v50) {
        return;
      }
    }
  }
  uint64_t v56 = *(void *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    uint64_t v50 = 1;
    goto LABEL_7;
  }
  uint64_t v47 = v8 + 8 * v7;
  uint64_t v54 = *(void *)(v47 - 24);
  if (v7 == 3)
  {
    uint64_t v50 = 1;
    goto LABEL_8;
  }
  uint64_t v50 = *(void *)(v47 - 32);
  if (v50 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(short float *)(v51 + v52 * v47 + v50) = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))
                                                        / *(short float *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v48 = **a4;
  uint64_t v49 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 < 1)
  {
    uint64_t v50 = 1;
    uint64_t v56 = 1;
    uint64_t v9 = 1;
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v8 = v7 + 8 * v6;
  uint64_t v9 = *(void *)(v8 - 8);
  if (v6 == 1)
  {
    uint64_t v50 = 1;
    uint64_t v56 = 1;
LABEL_7:
    uint64_t v54 = 1;
LABEL_8:
    uint64_t v51 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v10 = *(void *)(v4 + 16), v11 = v10 - 4, v10 < 4)
        || v11 > (int)v10 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v11) == 1)
      {
        uint64_t v12 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(*(void *)(v4 + 56) + 8 * v11);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_20;
        }
      }
      uint64_t v13 = *(void *)(v5 + 16);
      uint64_t v14 = v13 - 4;
      if (v13 >= 4 && v14 <= (int)v13 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v15 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v15 = 0;
LABEL_21:
      if (v54 >= 1)
      {
        uint64_t v55 = 0;
        uint64_t v53 = v49 + v12 * v51;
        uint64_t v52 = v48 + v15 * v51;
        do
        {
          if (*(unsigned char *)(v4 + 50)
            || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 3, v16 < 3)
            || v17 > (int)v16 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
          {
            uint64_t v18 = 0;
            if (*(unsigned char *)(v5 + 50)) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v18 = *(void *)(*(void *)(v4 + 56) + 8 * v17);
            if (*(unsigned char *)(v5 + 50)) {
              goto LABEL_34;
            }
          }
          uint64_t v19 = *(void *)(v5 + 16);
          uint64_t v20 = v19 - 3;
          if (v19 >= 3 && v20 <= (int)v19 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v20) != 1)
          {
            uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v21 = 0;
LABEL_35:
          if (v56 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = v53 + v18 * v55;
            uint64_t v24 = v52 + v21 * v55;
            while (1)
            {
              if (*(unsigned char *)(v4 + 50)
                || (uint64_t v25 = *(void *)(v4 + 16), v26 = v25 - 2, v25 < 2)
                || v26 > (int)v25 - 1
                || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1)
              {
                uint64_t v27 = 0;
                if (*(unsigned char *)(v5 + 50)) {
                  break;
                }
              }
              else
              {
                uint64_t v27 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
                if (*(unsigned char *)(v5 + 50)) {
                  break;
                }
              }
              uint64_t v28 = *(void *)(v5 + 16);
              uint64_t v29 = v28 - 2;
              if (v28 < 2 || v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
                break;
              }
              uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
              if (v9 >= 1) {
                goto LABEL_50;
              }
LABEL_37:
              if (++v22 == v56) {
                goto LABEL_23;
              }
            }
            uint64_t v30 = 0;
            if (v9 < 1) {
              goto LABEL_37;
            }
LABEL_50:
            uint64_t v31 = 0;
            uint64_t v32 = v23 + v27 * v22;
            uint64_t v33 = v24 + v30 * v22;
            while (2)
            {
              if (!*(unsigned char *)(v4 + 50))
              {
                uint64_t v43 = *(void *)(v4 + 16);
                uint64_t v44 = v43 - 1;
                if (v43 >= 1 && v44 <= (int)v43 - 1 && *(void *)(*(void *)(v4 + 24) + 8 * v44) != 1)
                {
                  uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
                  if (!*(unsigned char *)(v5 + 50)) {
                    goto LABEL_60;
                  }
                  goto LABEL_53;
                }
              }
              uint64_t v34 = 0;
              if (*(unsigned char *)(v5 + 50)) {
                goto LABEL_53;
              }
LABEL_60:
              uint64_t v45 = *(void *)(v5 + 16);
              uint64_t v46 = v45 - 1;
              if (v45 < 1 || v46 > (int)v45 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v46) == 1) {
LABEL_53:
              }
                uint64_t v35 = 0;
              else {
                uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
              }
              uint64_t v36 = (_WORD *)(v33 + v35 * v31 + *(void *)(v5 + 40));
              uint64_t v57 = *(void *)(v32 + v34 * v31 + *(void *)(v4 + 40));
              uint64_t v58 = 1065353216;
              _S0 = std::operator/[abi:nn180100]<float>((float *)&v58, (float *)&v57);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *uint64_t v36 = LOWORD(_S0);
              v36[1] = _S1;
              if (v9 == ++v31) {
                goto LABEL_37;
              }
              continue;
            }
          }
LABEL_23:
          ++v55;
        }
        while (v55 != v54);
      }
      if (++v51 == v50) {
        return;
      }
    }
  }
  uint64_t v56 = *(void *)(v8 - 16);
  if ((unint64_t)v6 < 3)
  {
    uint64_t v50 = 1;
    goto LABEL_7;
  }
  uint64_t v47 = v7 + 8 * v6;
  uint64_t v54 = *(void *)(v47 - 24);
  if (v6 == 3)
  {
    uint64_t v50 = 1;
    goto LABEL_8;
  }
  uint64_t v50 = *(void *)(v47 - 32);
  if (v50 >= 1) {
    goto LABEL_8;
  }
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v61 = **a4;
  uint64_t v62 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v62 + v31 * v19;
        uint64_t v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v59 = *(void *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v60) == 1)
          {
            uint64_t v58 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S1 = 1.0 / *(float *)(v48 + v58 * v47 + v49);
                __asm { FCVT            H1, S1 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S1);
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = 1.0
                                                  / COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = 1.0 / COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16);
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v55 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v55) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v55);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v57 + v29 * v19;
        uint64_t v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          float v54 = 1.0 / *(float *)(v46 + v50 * v45 + v47);
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    int v16 = *(unsigned __int8 *)(v4 + 50);
    uint64_t result = (uint64_t **)*(unsigned __int8 *)(v5 + 50);
    while (1)
    {
      if (v16
        || (uint64_t v17 = *(void *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1)
      {
        uint64_t v19 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
        if (result) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v5 + 16);
      uint64_t v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v22 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t v24 = v6 + v19 * v15;
    uint64_t v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (result) {
          break;
        }
      }
      uint64_t v29 = *(void *)(v5 + 16);
      uint64_t v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
        break;
      }
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v23 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v31 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v32 = 0;
    uint64_t v33 = v24 + v28 * v23;
    uint64_t v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
      {
        uint64_t v37 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
        if (result) {
          break;
        }
      }
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v32 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v40 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v41 = 0;
    uint64_t v42 = v33 + v37 * v32;
    uint64_t v43 = *(void *)(v4 + 40);
    uint64_t v44 = *(void *)(v5 + 40);
    uint64_t v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (uint64_t v50 = *(void *)(v4 + 16), v51 = v50 - 1, v50 < 1)
        || v51 > (int)v50 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v51) == 1)
      {
        uint64_t v46 = 0;
        if (result) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(*(void *)(v4 + 56) + 8 * v51);
        if (result) {
          goto LABEL_55;
        }
      }
      uint64_t v52 = *(void *)(v5 + 16);
      uint64_t v53 = v52 - 1;
      if (v52 >= 1 && v53 <= (int)v52 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v53) != 1)
      {
        uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v53);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v47 = 0;
LABEL_56:
      uint64_t v48 = v45 + v47 * v41;
      uint64_t v49 = *(void *)(v42 + v46 * v41 + v43);
      if ((unint64_t)(v49 + 1) >= 3) {
        uint64_t v49 = 0;
      }
      *(void *)(v48 + v44) = v49;
      if (v11 == ++v41) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v57 = **a4;
  uint64_t v58 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t v59 = 1;
    char v15 = 1;
    uint64_t v16 = 1;
LABEL_7:
    char v17 = 1;
LABEL_8:
    uint64_t v18 = 0;
    BOOL v19 = v6 < 1;
    int v20 = *(unsigned __int8 *)(v4 + 50);
    int v21 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v17 = 1;
    }
    uint64_t v22 = v21;
    if (*(unsigned char *)(v5 + 50))
    {
      char v15 = 1;
      char v23 = 1;
    }
    else
    {
      char v23 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v19 = 1;
    }
    if (v14 > v21) {
      char v24 = 1;
    }
    else {
      char v24 = v17;
    }
    if (v11 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v15;
    }
    if (v10 > v22) {
      char v26 = 1;
    }
    else {
      char v26 = v23;
    }
    char v27 = v7 > v22 || v19;
    uint64_t result = (uint64_t **)v14;
    while (1)
    {
      if (v20
        || (uint64_t v28 = *(void *)(v4 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v29) == 1)
      {
        uint64_t v30 = 0;
        if (v24) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(*(void *)(v4 + 56) + 8 * v29);
        if (v24) {
          goto LABEL_35;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v16 < 1) {
          goto LABEL_28;
        }
LABEL_38:
        uint64_t v32 = 0;
        uint64_t v33 = v58 + v30 * v18;
        uint64_t v34 = v57 + v31 * v18;
        while (2)
        {
          if (v20
            || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
          {
            uint64_t v37 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_45;
            }
            goto LABEL_46;
          }
          uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
          if (v25) {
            goto LABEL_46;
          }
LABEL_45:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_46:
            uint64_t v38 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_39;
          }
          uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_39:
            if (++v32 == v16) {
              goto LABEL_28;
            }
            continue;
          }
          break;
        }
        uint64_t v39 = 0;
        uint64_t v40 = v33 + v37 * v32;
        uint64_t v41 = v34 + v38 * v32;
        while (2)
        {
          if (v20
            || (uint64_t v42 = *(void *)(v4 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v43) == 1)
          {
            uint64_t v44 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_57;
          }
          uint64_t v44 = *(void *)(*(void *)(v4 + 56) + 8 * v43);
          if (v26) {
            goto LABEL_57;
          }
LABEL_56:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_57:
            uint64_t v45 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_50;
          }
          uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_50:
            if (++v39 == v12) {
              goto LABEL_39;
            }
            continue;
          }
          break;
        }
        uint64_t v46 = 0;
        uint64_t v47 = v40 + v44 * v39;
        uint64_t v48 = *(void *)(v4 + 40);
        uint64_t v49 = *(void *)(v5 + 40);
        uint64_t v50 = v41 + v45 * v39;
        while (2)
        {
          if (v20
            || (uint64_t v55 = *(void *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v56) == 1)
          {
            uint64_t v54 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v56);
            if ((v27 & 1) == 0)
            {
LABEL_67:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_62:
                uint64_t v52 = v50 + v51 * v46;
                int v53 = *(_DWORD *)(v47 + v54 * v46 + v48);
                if ((v53 + 1) >= 3) {
                  int v53 = 0;
                }
                *(_DWORD *)(v52 + v49) = v53;
                if (v9 == ++v46) {
                  goto LABEL_50;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v51 = 0;
        goto LABEL_62;
      }
LABEL_35:
      uint64_t v31 = 0;
      if (v16 >= 1) {
        goto LABEL_38;
      }
LABEL_28:
      ++v18;
      uint64_t v14 = (uint64_t)result;
      if (v18 == v59) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v16 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v15 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v59 = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t v59 = *(void *)(v8 + 8 * (v6 - 4));
  if (v59 >= 1)
  {
    char v15 = 0;
    char v13 = 0;
    char v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v57 = **a4;
  uint64_t v58 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t v59 = 1;
    char v15 = 1;
    uint64_t v16 = 1;
LABEL_7:
    char v17 = 1;
LABEL_8:
    uint64_t v18 = 0;
    BOOL v19 = v6 < 1;
    int v20 = *(unsigned __int8 *)(v4 + 50);
    int v21 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v17 = 1;
    }
    uint64_t v22 = v21;
    if (*(unsigned char *)(v5 + 50))
    {
      char v15 = 1;
      char v23 = 1;
    }
    else
    {
      char v23 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v19 = 1;
    }
    if (v14 > v21) {
      char v24 = 1;
    }
    else {
      char v24 = v17;
    }
    if (v11 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v15;
    }
    if (v10 > v22) {
      char v26 = 1;
    }
    else {
      char v26 = v23;
    }
    char v27 = v7 > v22 || v19;
    uint64_t result = (uint64_t **)v14;
    while (1)
    {
      if (v20
        || (uint64_t v28 = *(void *)(v4 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v29) == 1)
      {
        uint64_t v30 = 0;
        if (v24) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(*(void *)(v4 + 56) + 8 * v29);
        if (v24) {
          goto LABEL_35;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v16 < 1) {
          goto LABEL_28;
        }
LABEL_38:
        uint64_t v32 = 0;
        uint64_t v33 = v58 + v30 * v18;
        uint64_t v34 = v57 + v31 * v18;
        while (2)
        {
          if (v20
            || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
          {
            uint64_t v37 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_45;
            }
            goto LABEL_46;
          }
          uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
          if (v25) {
            goto LABEL_46;
          }
LABEL_45:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_46:
            uint64_t v38 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_39;
          }
          uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_39:
            if (++v32 == v16) {
              goto LABEL_28;
            }
            continue;
          }
          break;
        }
        uint64_t v39 = 0;
        uint64_t v40 = v33 + v37 * v32;
        uint64_t v41 = v34 + v38 * v32;
        while (2)
        {
          if (v20
            || (uint64_t v42 = *(void *)(v4 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v43) == 1)
          {
            uint64_t v44 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_57;
          }
          uint64_t v44 = *(void *)(*(void *)(v4 + 56) + 8 * v43);
          if (v26) {
            goto LABEL_57;
          }
LABEL_56:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_57:
            uint64_t v45 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_50;
          }
          uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_50:
            if (++v39 == v12) {
              goto LABEL_39;
            }
            continue;
          }
          break;
        }
        uint64_t v46 = 0;
        uint64_t v47 = v40 + v44 * v39;
        uint64_t v48 = *(void *)(v4 + 40);
        uint64_t v49 = *(void *)(v5 + 40);
        uint64_t v50 = v41 + v45 * v39;
        while (2)
        {
          if (v20
            || (uint64_t v55 = *(void *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v56) == 1)
          {
            uint64_t v54 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v56);
            if ((v27 & 1) == 0)
            {
LABEL_67:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_62:
                uint64_t v52 = v50 + v51 * v46;
                __int16 v53 = *(_WORD *)(v47 + v54 * v46 + v48);
                if ((v53 + 1) >= 3) {
                  __int16 v53 = 0;
                }
                *(_WORD *)(v52 + v49) = v53;
                if (v9 == ++v46) {
                  goto LABEL_50;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v51 = 0;
        goto LABEL_62;
      }
LABEL_35:
      uint64_t v31 = 0;
      if (v16 >= 1) {
        goto LABEL_38;
      }
LABEL_28:
      ++v18;
      uint64_t v14 = (uint64_t)result;
      if (v18 == v59) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v16 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v15 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v59 = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t v59 = *(void *)(v8 + 8 * (v6 - 4));
  if (v59 >= 1)
  {
    char v15 = 0;
    char v13 = 0;
    char v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v45 = *(void *)(v4 + 16), v46 = v45 - 1, v45 < 1)
        || v46 > (int)v45 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v46) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v46);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v47 = *(void *)(v5 + 16);
      uint64_t v48 = v47 - 1;
      if (v47 >= 1 && v48 <= (int)v47 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v48) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v48);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = v40 + v42 * v38;
      char v44 = v39[v41 * v38 + *(void *)(v4 + 40)];
      if ((v44 + 1) >= 3) {
        char v44 = 0;
      }
      *(unsigned char *)(v43 + *(void *)(v5 + 40)) = v44;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(void *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = *(void *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(_DWORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float16x4_t a5)
{
  uint64_t v5 = **result;
  uint64_t v6 = **a2;
  uint64_t v7 = **a3;
  uint64_t v8 = **a4;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9 < 1)
  {
    uint64_t v9 = 1;
    uint64_t v13 = 1;
    uint64_t v12 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + 8 * v9;
  uint64_t v12 = *(void *)(v11 - 8);
  if (v9 == 1)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    uint64_t v9 = 1;
    uint64_t v14 = 1;
    goto LABEL_10;
  }
  uint64_t v15 = v10 + 8 * v9;
  uint64_t v14 = *(void *)(v15 - 24);
  if (v9 == 3)
  {
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v17 = *(void *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v18) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v5 + 56) + 8 * v18);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if (v14 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v16 == v9) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v14 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t result = (uint64_t **)(v7 + (void)result * v16);
    uint64_t v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v24 = *(void *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v25);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v6 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v28);
      if (v13 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v14) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v13 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = (char *)result + v26 * v22;
    uint64_t v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (uint64_t v33 = *(void *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v5 + 56) + 8 * v34);
        if (*(unsigned char *)(v6 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v6 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
      if (v12 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v13) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v12 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = &v31[v35 * v30];
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v5 + 50)
        || (v44 = *(void *)(v5 + 16), uint64_t v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(void *)(*(void *)(v5 + 24) + 8 * v45) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v45);
        if (*(unsigned char *)(v6 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(void *)(*(void *)(v6 + 24) + 8 * v47) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      a5.i32[0] = *(_DWORD *)&v40[v42 * v39 + *(void *)(v5 + 40)];
      a5 = (float16x4_t)vcvtq_f32_f16(a5).u64[0];
      *(double *)(v41 + v43 * v39++ + *(void *)(v6 + 40)) = *(double *)&a5;
      if (v12 == v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v59 * v47 + v49);
                __asm { FCVT            S0, H0 }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v46) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      *(_DWORD *)(v40 + v42 * v38 + *(void *)(v5 + 40)) = *(_DWORD *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = *(_WORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v51 = *(void *)(v4 + 16), uint64_t v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v52) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v52);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v53 = *(void *)(v5 + 16);
      uint64_t v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = &v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (_WORD *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      _S0 = *(_DWORD *)v43;
      _S1 = *((_DWORD *)v43 + 1);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      _WORD *v44 = _S0;
      v44[1] = _S1;
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v61 = **a4;
  uint64_t v62 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v62 + v31 * v19;
        uint64_t v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v59 = *(void *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v60) == 1)
          {
            uint64_t v58 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = *(_DWORD *)(v48 + v58 * v47 + v49);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v56 = **a4;
  uint64_t v57 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v57 + v31 * v19;
        uint64_t v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v54 = *(void *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v55) == 1)
          {
            uint64_t v53 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v53 = *(void *)(*(void *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16;
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v55 = **a4;
  uint64_t v56 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v54 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v56 + v29 * v19;
        uint64_t v33 = v55 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v50 = 0;
            if (v26) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if (v26)
            {
LABEL_59:
              uint64_t v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(void *)(*(void *)(v5 + 24) + 8 * v7) == 1) {
            goto LABEL_59;
          }
          uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_66:
          *(_WORD *)(v48 + v49 + v51 * v45) = HIWORD(COERCE_UNSIGNED_INT(*(float *)(v46 + v50 * v45 + v47)+ (float)(COERCE_FLOAT(*(_DWORD *)(v46 + v50 * v45 + v47) & 0xFF800000)* 0.0039062)));
          if (v9 == ++v45) {
            goto LABEL_45;
          }
          continue;
        }
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    int v16 = *(unsigned __int8 *)(v4 + 50);
    uint64_t result = (uint64_t **)*(unsigned __int8 *)(v5 + 50);
    while (1)
    {
      if (v16
        || (uint64_t v17 = *(void *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1)
      {
        uint64_t v19 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
        if (result) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v5 + 16);
      uint64_t v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v21) == 1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v22 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t v24 = v6 + v19 * v15;
    uint64_t v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (result) {
          break;
        }
      }
      uint64_t v29 = *(void *)(v5 + 16);
      uint64_t v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v30) == 1) {
        break;
      }
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v30);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v23 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v31 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v32 = 0;
    uint64_t v33 = v24 + v28 * v23;
    uint64_t v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
      {
        uint64_t v37 = 0;
        if (result) {
          break;
        }
      }
      else
      {
        uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
        if (result) {
          break;
        }
      }
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v39) == 1) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + 8 * v39);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v32 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v40 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v41 = 0;
    uint64_t v42 = v33 + v37 * v32;
    uint64_t v43 = *(void *)(v4 + 40);
    uint64_t v44 = *(void *)(v5 + 40);
    uint64_t v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(void *)(v4 + 16), uint64_t v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v49) == 1)
      {
        uint64_t v46 = 0;
        if (result) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(*(void *)(v4 + 56) + 8 * v49);
        if (result) {
          goto LABEL_55;
        }
      }
      uint64_t v50 = *(void *)(v5 + 16);
      uint64_t v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v51) != 1)
      {
        uint64_t v47 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v47 = 0;
LABEL_56:
      *(void *)(v45 + v47 * v41 + v44) = *(void *)(v42 + v46 * v41 + v43);
      if (v11 == ++v41) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    float32x2_t v16 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v17 = *(void *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v18) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v18);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v5 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v23 = v7 + v21 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v24 = *(void *)(v4 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v25) == 1)
      {
        uint64_t v26 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)(v4 + 56) + 8 * v25);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v27 = *(void *)(v5 + 16);
      uint64_t v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v28) == 1) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v28);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v29 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v30 = 0;
    uint64_t v31 = (char *)result + v26 * v22;
    uint64_t v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v33 = *(void *)(v4 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v34) == 1)
      {
        uint64_t v35 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(*(void *)(v4 + 56) + 8 * v34);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v36 = *(void *)(v5 + 16);
      uint64_t v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v37) == 1) {
        break;
      }
      uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v37);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v30 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v38 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v39 = 0;
    uint64_t v40 = &v31[v35 * v30];
    uint64_t v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v45 = *(void *)(v4 + 16), v46 = v45 - 1, v45 < 1)
        || v46 > (int)v45 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v46) == 1)
      {
        uint64_t v42 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(*(void *)(v4 + 56) + 8 * v46);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v47 = *(void *)(v5 + 16);
      uint64_t v48 = v47 - 1;
      if (v47 >= 1 && v48 <= (int)v47 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v48) != 1)
      {
        uint64_t v43 = *(void *)(*(void *)(v5 + 56) + 8 * v48);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v43 = 0;
LABEL_56:
      float32x2_t v44 = *(float32x2_t *)&v40[v42 * v39 + *(void *)(v4 + 40)];
      *(float32x2_t *)(v41 + v43 * v39++ + *(void *)(v5 + 40)) = vmaxnm_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v44, v16), (int8x8_t)v16, (int8x8_t)v44), (float32x2_t)0x80000000800000);
      if (v11 == v39) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = **a2;
  uint64_t v55 = **a4;
  uint64_t v56 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t v57 = 1;
    char v15 = 1;
    uint64_t v16 = 1;
LABEL_7:
    char v17 = 1;
LABEL_8:
    uint64_t v18 = 0;
    LODWORD(result) = v6 < 1;
    int v19 = *(unsigned __int8 *)(v4 + 50);
    int v20 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v17 = 1;
    }
    uint64_t v21 = v20;
    if (*(unsigned char *)(v5 + 50))
    {
      char v15 = 1;
      char v13 = 1;
      uint64_t result = 1;
    }
    else
    {
      uint64_t result = result;
    }
    uint64_t v54 = v14;
    if (v14 > v20) {
      char v22 = 1;
    }
    else {
      char v22 = v17;
    }
    if (v11 > v21) {
      char v23 = 1;
    }
    else {
      char v23 = v15;
    }
    if (v10 > v21) {
      char v24 = 1;
    }
    else {
      char v24 = v13;
    }
    if (v7 > v21) {
      char v25 = 1;
    }
    else {
      char v25 = result;
    }
    while (1)
    {
      if (v19
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 4, v26 < 4)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (v22) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (v22) {
          goto LABEL_32;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        if (v16 < 1) {
          goto LABEL_25;
        }
LABEL_35:
        uint64_t v30 = 0;
        uint64_t v31 = v56 + v28 * v18;
        uint64_t v32 = v55 + v29 * v18;
        while (2)
        {
          if (v19
            || (uint64_t v33 = *(void *)(v4 + 16), v34 = v33 - 3, v33 < 3)
            || v34 > (int)v33 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v34) == 1)
          {
            uint64_t v35 = 0;
            if ((v23 & 1) == 0) {
              goto LABEL_42;
            }
            goto LABEL_43;
          }
          uint64_t v35 = *(void *)(*(void *)(v4 + 56) + 8 * v34);
          if (v23) {
            goto LABEL_43;
          }
LABEL_42:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_43:
            uint64_t v36 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_36;
          }
          uint64_t v36 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_36:
            if (++v30 == v16) {
              goto LABEL_25;
            }
            continue;
          }
          break;
        }
        uint64_t v37 = 0;
        uint64_t v38 = v31 + v35 * v30;
        uint64_t v39 = v32 + v36 * v30;
        while (2)
        {
          if (v19
            || (uint64_t v40 = *(void *)(v4 + 16), v41 = v40 - 2, v40 < 2)
            || v41 > (int)v40 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v41) == 1)
          {
            uint64_t v42 = 0;
            if ((v24 & 1) == 0) {
              goto LABEL_53;
            }
            goto LABEL_54;
          }
          uint64_t v42 = *(void *)(*(void *)(v4 + 56) + 8 * v41);
          if (v24) {
            goto LABEL_54;
          }
LABEL_53:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_54:
            uint64_t v43 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_47;
          }
          uint64_t v43 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_47:
            if (++v37 == v12) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        uint64_t v44 = 0;
        uint64_t v45 = v38 + v42 * v37;
        uint64_t v46 = *(void *)(v4 + 40);
        uint64_t v47 = *(void *)(v5 + 40);
        uint64_t v48 = v39 + v43 * v37;
        while (2)
        {
          if (v19
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v51 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v51 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if ((v25 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v49 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_59:
                uint64_t result = v48 + v49 * v44;
                float v50 = *(float *)(v45 + v51 * v44 + v46);
                if (v50 > 3.4028e38) {
                  float v50 = 3.4028e38;
                }
                *(float *)(result + v47) = fmaxf(v50, -3.4028e38);
                if (v9 == ++v44) {
                  goto LABEL_47;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v49 = 0;
        goto LABEL_59;
      }
LABEL_32:
      uint64_t v29 = 0;
      if (v16 >= 1) {
        goto LABEL_35;
      }
LABEL_25:
      if (++v18 == v57) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v16 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v15 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v57 = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v57 = *(void *)(v8 + 8 * (v6 - 4));
  if (v57 >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v15 = 0;
    char v13 = 0;
    char v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5, float16x4_t a6)
{
  uint64_t v6 = **result;
  uint64_t v7 = **a2;
  uint64_t v8 = **a3;
  uint64_t v9 = **a4;
  uint64_t v10 = *(void *)(v7 + 16);
  if (v10 < 1)
  {
    uint64_t v10 = 1;
    uint64_t v14 = 1;
    uint64_t v13 = 1;
    uint64_t v15 = 1;
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t v12 = v11 + 8 * v10;
  uint64_t v13 = *(void *)(v12 - 8);
  if (v10 == 1)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(v12 - 16);
  if ((unint64_t)v10 < 3)
  {
    uint64_t v10 = 1;
    uint64_t v15 = 1;
    goto LABEL_10;
  }
  uint64_t v16 = v11 + 8 * v10;
  uint64_t v15 = *(void *)(v16 - 24);
  if (v10 == 3)
  {
    uint64_t v10 = 1;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v16 - 32);
  if (v10 >= 1)
  {
LABEL_10:
    uint64_t v17 = 0;
    while (1)
    {
      if (*(unsigned char *)(v6 + 50)
        || (uint64_t v18 = *(void *)(v6 + 16), v19 = v18 - 4, v18 < 4)
        || v19 > (int)v18 - 1
        || *(void *)(*(void *)(v6 + 24) + 8 * v19) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v7 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v6 + 56) + 8 * v19);
        if (*(unsigned char *)(v7 + 50)) {
          break;
        }
      }
      uint64_t v20 = *(void *)(v7 + 16);
      uint64_t v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v21) == 1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v7 + 56) + 8 * v21);
      if (v15 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v17 == v10) {
        return result;
      }
    }
    uint64_t v22 = 0;
    if (v15 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t result = (uint64_t **)(v8 + (void)result * v17);
    uint64_t v24 = v9 + v22 * v17;
    while (1)
    {
      if (*(unsigned char *)(v6 + 50)
        || (uint64_t v25 = *(void *)(v6 + 16), v26 = v25 - 3, v25 < 3)
        || v26 > (int)v25 - 1
        || *(void *)(*(void *)(v6 + 24) + 8 * v26) == 1)
      {
        uint64_t v27 = 0;
        if (*(unsigned char *)(v7 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v27 = *(void *)(*(void *)(v6 + 56) + 8 * v26);
        if (*(unsigned char *)(v7 + 50)) {
          break;
        }
      }
      uint64_t v28 = *(void *)(v7 + 16);
      uint64_t v29 = v28 - 3;
      if (v28 < 3 || v29 > (int)v28 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v29) == 1) {
        break;
      }
      uint64_t v30 = *(void *)(*(void *)(v7 + 56) + 8 * v29);
      if (v14 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v23 == v15) {
        goto LABEL_11;
      }
    }
    uint64_t v30 = 0;
    if (v14 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v31 = 0;
    uint64_t v32 = (char *)result + v27 * v23;
    uint64_t v33 = v24 + v30 * v23;
    while (1)
    {
      if (*(unsigned char *)(v6 + 50)
        || (uint64_t v34 = *(void *)(v6 + 16), v35 = v34 - 2, v34 < 2)
        || v35 > (int)v34 - 1
        || *(void *)(*(void *)(v6 + 24) + 8 * v35) == 1)
      {
        uint64_t v36 = 0;
        if (*(unsigned char *)(v7 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 8 * v35);
        if (*(unsigned char *)(v7 + 50)) {
          break;
        }
      }
      uint64_t v37 = *(void *)(v7 + 16);
      uint64_t v38 = v37 - 2;
      if (v37 < 2 || v38 > (int)v37 - 1 || *(void *)(*(void *)(v7 + 24) + 8 * v38) == 1) {
        break;
      }
      uint64_t v39 = *(void *)(*(void *)(v7 + 56) + 8 * v38);
      if (v13 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v31 == v14) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = 0;
    if (v13 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v40 = 0;
    uint64_t v41 = &v32[v36 * v31];
    uint64_t v42 = v33 + v39 * v31;
    while (1)
    {
      if (*(unsigned char *)(v6 + 50)
        || (uint64_t v45 = *(void *)(v6 + 16), v46 = v45 - 1, v45 < 1)
        || v46 > (int)v45 - 1
        || *(void *)(*(void *)(v6 + 24) + 8 * v46) == 1)
      {
        uint64_t v43 = 0;
        if (*(unsigned char *)(v7 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v46);
        if (*(unsigned char *)(v7 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v47 = *(void *)(v7 + 16);
      uint64_t v48 = v47 - 1;
      if (v47 >= 1 && v48 <= (int)v47 - 1 && *(void *)(*(void *)(v7 + 24) + 8 * v48) != 1)
      {
        uint64_t v44 = *(void *)(*(void *)(v7 + 56) + 8 * v48);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v44 = 0;
LABEL_56:
      a6.i32[0] = *(_DWORD *)&v41[v43 * v40 + *(void *)(v6 + 40)];
      a6 = (float16x4_t)vcvtq_f32_f16(vmaxnm_f16(a6, (float16x4_t)0xFC00FC00FC00FC00)).u64[0];
      *(double *)(v42 + v44 * v40++ + *(void *)(v7 + 40)) = *(double *)&a6;
      if (v13 == v40) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v62 = **a4;
  uint64_t v63 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v63 + v31 * v19;
        uint64_t v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (uint64_t v60 = *(void *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v61) == 1)
          {
            uint64_t v59 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*(void *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H1 = fmaxl(*(short float *)(v48 + v59 * v47 + v49), COERCE_SHORT_FLOAT(-1024));
                __asm { FCVT            S1, H1 }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S1;
                if (v9 == v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t result = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t result = *(uint64_t ***)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v5 + 16);
      uint64_t v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v19) == 1) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v20 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t result = (uint64_t **)(v6 + (void)result * v15);
    uint64_t v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v23 = *(void *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v24) == 1)
      {
        uint64_t v25 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(v4 + 56) + 8 * v24);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v26 = *(void *)(v5 + 16);
      uint64_t v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v27) == 1) {
        break;
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v27);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v21 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v28 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v29 = 0;
    uint64_t v30 = (char *)result + v25 * v21;
    uint64_t v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v32 = *(void *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v33) == 1)
      {
        uint64_t v34 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v33);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v35 = *(void *)(v5 + 16);
      uint64_t v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v36) == 1) {
        break;
      }
      uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v29 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = &v30[v34 * v29];
    uint64_t v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v48 = *(void *)(v4 + 16), uint64_t v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v49) == 1)
      {
        uint64_t v41 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(*(void *)(v4 + 56) + 8 * v49);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v50 = *(void *)(v5 + 16);
      uint64_t v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v51) != 1)
      {
        uint64_t v42 = *(void *)(*(void *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v42 = 0;
LABEL_56:
      uint64_t v43 = (short float *)&v39[v41 * v38 + *(void *)(v4 + 40)];
      uint64_t v44 = (short float *)(v40 + v42 * v38 + *(void *)(v5 + 40));
      short float v45 = *v43;
      short float v46 = v43[1];
      if (*v43 > COERCE_SHORT_FLOAT(31743)) {
        short float v45 = COERCE_SHORT_FLOAT(31743);
      }
      short float v47 = fmaxl(v45, COERCE_SHORT_FLOAT(-1025));
      if (v46 > COERCE_SHORT_FLOAT(31743)) {
        short float v46 = COERCE_SHORT_FLOAT(31743);
      }
      short float *v44 = v47;
      v44[1] = fmaxl(v46, COERCE_SHORT_FLOAT(-1025));
      if (v11 == ++v38) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v58 = **a4;
  uint64_t v59 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v24 = 1;
    }
    else
    {
      char v24 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v18;
    }
    if (v11 > v23) {
      char v26 = 1;
    }
    else {
      char v26 = v16;
    }
    if (v10 > v23) {
      char v27 = 1;
    }
    else {
      char v27 = v24;
    }
    char v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v29 = *(void *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v30) == 1)
      {
        uint64_t v31 = 0;
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v30);
        if (v25) {
          goto LABEL_34;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v17 < 1) {
          goto LABEL_27;
        }
LABEL_37:
        uint64_t v33 = 0;
        uint64_t v34 = v59 + v31 * v19;
        uint64_t v35 = v58 + v32 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v36 = *(void *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v37) == 1)
          {
            uint64_t v38 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
          if (v26) {
            goto LABEL_45;
          }
LABEL_44:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            uint64_t v39 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_38;
          }
          uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17) {
              goto LABEL_27;
            }
            continue;
          }
          break;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v34 + v38 * v33;
        uint64_t v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(void *)(v4 + 16), uint64_t v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v44) == 1)
          {
            uint64_t v45 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_56;
          }
          uint64_t v45 = *(void *)(*(void *)(v4 + 56) + 8 * v44);
          if (v27) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            uint64_t v46 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_49;
          }
          uint64_t v46 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12) {
              goto LABEL_38;
            }
            continue;
          }
          break;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v41 + v45 * v40;
        uint64_t v49 = *(void *)(v4 + 40);
        uint64_t v50 = *(void *)(v5 + 40);
        uint64_t v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v56 = *(void *)(v4 + 16), uint64_t v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v57) == 1)
          {
            uint64_t v55 = 0;
            if ((v28 & 1) == 0) {
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v55 = *(void *)(*(void *)(v4 + 56) + 8 * v57);
            if ((v28 & 1) == 0)
            {
LABEL_66:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v52 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_61:
                uint64_t v53 = v51 + v52 * v47;
                short float v54 = *(short float *)(v48 + v55 * v47 + v49);
                if (v54 > COERCE_SHORT_FLOAT(31743)) {
                  short float v54 = COERCE_SHORT_FLOAT(31743);
                }
                *(short float *)(v53 + v50) = fmaxl(v54, COERCE_SHORT_FLOAT(-1025));
                if (v9 == ++v47) {
                  goto LABEL_49;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      uint64_t v32 = 0;
      if (v17 >= 1) {
        goto LABEL_37;
      }
LABEL_27:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = **a2;
  uint64_t v6 = **a3;
  uint64_t v7 = **a4;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8 < 1)
  {
    uint64_t v8 = 1;
    uint64_t v12 = 1;
    uint64_t v11 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + 8 * v8;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v8 == 1)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    uint64_t v8 = 1;
    uint64_t v13 = 1;
    goto LABEL_10;
  }
  uint64_t v14 = v9 + 8 * v8;
  uint64_t v13 = *(void *)(v14 - 24);
  if (v8 == 3)
  {
    uint64_t v8 = 1;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    uint64_t v15 = 0;
    uint64_t result = 3347046400;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v16 = *(void *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v17) == 1)
      {
        uint64_t v18 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(*(void *)(v4 + 56) + 8 * v17);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v19 = *(void *)(v5 + 16);
      uint64_t v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v20) == 1) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if (v13 >= 1) {
        goto LABEL_24;
      }
LABEL_11:
      if (++v15 == v8) {
        return result;
      }
    }
    uint64_t v21 = 0;
    if (v13 < 1) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64_t v23 = v6 + v18 * v15;
    uint64_t v24 = v7 + v21 * v15;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v25 = *(void *)(v4 + 16), v26 = v25 - 3, v25 < 3)
        || v26 > (int)v25 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v26) == 1)
      {
        uint64_t v27 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v27 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v28 = *(void *)(v5 + 16);
      uint64_t v29 = v28 - 3;
      if (v28 < 3 || v29 > (int)v28 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v29) == 1) {
        break;
      }
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
      if (v12 >= 1) {
        goto LABEL_38;
      }
LABEL_25:
      if (++v22 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v30 = 0;
    if (v12 < 1) {
      goto LABEL_25;
    }
LABEL_38:
    uint64_t v31 = 0;
    uint64_t v32 = v23 + v27 * v22;
    uint64_t v33 = v24 + v30 * v22;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 2, v34 < 2)
        || v35 > (int)v34 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
      {
        uint64_t v36 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      else
      {
        uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
        if (*(unsigned char *)(v5 + 50)) {
          break;
        }
      }
      uint64_t v37 = *(void *)(v5 + 16);
      uint64_t v38 = v37 - 2;
      if (v37 < 2 || v38 > (int)v37 - 1 || *(void *)(*(void *)(v5 + 24) + 8 * v38) == 1) {
        break;
      }
      uint64_t v39 = *(void *)(*(void *)(v5 + 56) + 8 * v38);
      if (v11 >= 1) {
        goto LABEL_52;
      }
LABEL_39:
      if (++v31 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = 0;
    if (v11 < 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v40 = 0;
    uint64_t v41 = v32 + v36 * v31;
    uint64_t v42 = v33 + v39 * v31;
    while (1)
    {
      if (*(unsigned char *)(v4 + 50)
        || (v56 = *(void *)(v4 + 16), uint64_t v57 = v56 - 1, v56 < 1)
        || v57 > (int)v56 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v57) == 1)
      {
        uint64_t v43 = 0;
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v57);
        if (*(unsigned char *)(v5 + 50)) {
          goto LABEL_55;
        }
      }
      uint64_t v58 = *(void *)(v5 + 16);
      uint64_t v59 = v58 - 1;
      if (v58 >= 1 && v59 <= (int)v58 - 1 && *(void *)(*(void *)(v5 + 24) + 8 * v59) != 1)
      {
        uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v59);
        goto LABEL_56;
      }
LABEL_55:
      uint64_t v44 = 0;
LABEL_56:
      uint64_t v45 = (float *)(v41 + v43 * v40 + *(void *)(v4 + 40));
      uint64_t v46 = (_WORD *)(v42 + v44 * v40 + *(void *)(v5 + 40));
      float v47 = *v45;
      float v48 = v45[1];
      if (*v45 > 65504.0) {
        float v47 = 65504.0;
      }
      _S0 = fmaxf(v47, -65504.0);
      if (v48 > 65504.0) {
        float v48 = 65504.0;
      }
      _S1 = fmaxf(v48, -65504.0);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      _WORD *v46 = _H0;
      v46[1] = LOWORD(_S1);
      if (v11 == ++v40) {
        goto LABEL_39;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **(void **)result;
  uint64_t v5 = **a2;
  uint64_t v60 = **a4;
  uint64_t v61 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t v62 = 1;
    char v15 = 1;
    uint64_t v16 = 1;
LABEL_7:
    char v17 = 1;
LABEL_8:
    uint64_t v18 = 0;
    LODWORD(result) = v6 < 1;
    int v19 = *(unsigned __int8 *)(v4 + 50);
    int v20 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v17 = 1;
    }
    uint64_t v21 = v20;
    if (*(unsigned char *)(v5 + 50))
    {
      char v15 = 1;
      char v13 = 1;
      uint64_t result = 1;
    }
    else
    {
      uint64_t result = result;
    }
    uint64_t v59 = v14;
    if (v14 > v20) {
      char v22 = 1;
    }
    else {
      char v22 = v17;
    }
    if (v11 > v21) {
      char v23 = 1;
    }
    else {
      char v23 = v15;
    }
    if (v10 > v21) {
      char v24 = 1;
    }
    else {
      char v24 = v13;
    }
    if (v7 > v21) {
      char v25 = 1;
    }
    else {
      char v25 = result;
    }
    while (1)
    {
      if (v19
        || (uint64_t v26 = *(void *)(v4 + 16), v27 = v26 - 4, v26 < 4)
        || v27 > (int)v26 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v27) == 1)
      {
        uint64_t v28 = 0;
        if (v22) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        if (v22) {
          goto LABEL_32;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v59) != 1)
      {
        uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v59);
        if (v16 < 1) {
          goto LABEL_25;
        }
LABEL_35:
        uint64_t v30 = 0;
        uint64_t v31 = v61 + v28 * v18;
        uint64_t v32 = v60 + v29 * v18;
        while (2)
        {
          if (v19
            || (uint64_t v33 = *(void *)(v4 + 16), v34 = v33 - 3, v33 < 3)
            || v34 > (int)v33 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v34) == 1)
          {
            uint64_t v35 = 0;
            if ((v23 & 1) == 0) {
              goto LABEL_42;
            }
            goto LABEL_43;
          }
          uint64_t v35 = *(void *)(*(void *)(v4 + 56) + 8 * v34);
          if (v23) {
            goto LABEL_43;
          }
LABEL_42:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_43:
            uint64_t v36 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_36;
          }
          uint64_t v36 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_36:
            if (++v30 == v16) {
              goto LABEL_25;
            }
            continue;
          }
          break;
        }
        uint64_t v37 = 0;
        uint64_t v38 = v31 + v35 * v30;
        uint64_t v39 = v32 + v36 * v30;
        while (2)
        {
          if (v19
            || (uint64_t v40 = *(void *)(v4 + 16), v41 = v40 - 2, v40 < 2)
            || v41 > (int)v40 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v41) == 1)
          {
            uint64_t v42 = 0;
            if ((v24 & 1) == 0) {
              goto LABEL_53;
            }
            goto LABEL_54;
          }
          uint64_t v42 = *(void *)(*(void *)(v4 + 56) + 8 * v41);
          if (v24) {
            goto LABEL_54;
          }
LABEL_53:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_54:
            uint64_t v43 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_47;
          }
          uint64_t v43 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_47:
            if (++v37 == v12) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        uint64_t v44 = 0;
        uint64_t v45 = v38 + v42 * v37;
        uint64_t v46 = *(void *)(v4 + 40);
        uint64_t v47 = *(void *)(v5 + 40);
        uint64_t v48 = v39 + v43 * v37;
        while (2)
        {
          if (v19
            || (uint64_t v57 = *(void *)(v4 + 16), v58 = v57 - 1, v57 < 1)
            || v58 > (int)v57 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v58) == 1)
          {
            uint64_t v56 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v56 = *(void *)(*(void *)(v4 + 56) + 8 * v58);
            if ((v25 & 1) == 0)
            {
LABEL_64:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v49 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_59:
                uint64_t result = v48 + v49 * v44;
                float v50 = *(float *)(v45 + v56 * v44 + v46);
                if (v50 > 65504.0) {
                  float v50 = 65504.0;
                }
                _S0 = fmaxf(v50, -65504.0);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(result + v47) = LOWORD(_S0);
                if (v9 == ++v44) {
                  goto LABEL_47;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v49 = 0;
        goto LABEL_59;
      }
LABEL_32:
      uint64_t v29 = 0;
      if (v16 >= 1) {
        goto LABEL_35;
      }
LABEL_25:
      if (++v18 == v62) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v16 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v15 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v62 = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v62 = *(void *)(v8 + 8 * (v6 - 4));
  if (v62 >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v15 = 0;
    char v13 = 0;
    char v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **a1;
  uint64_t v5 = **a2;
  uint64_t v55 = **a4;
  uint64_t v56 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t result = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = *(unsigned __int8 *)(v4 + 50);
    int v22 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v18 = 1;
    }
    uint64_t v23 = v22;
    if (*(unsigned char *)(v5 + 50))
    {
      char v16 = 1;
      char v13 = 1;
      BOOL v20 = 1;
    }
    uint64_t v54 = v14;
    if (v14 > v22) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v23) {
      char v16 = 1;
    }
    if (v10 > v23) {
      char v25 = 1;
    }
    else {
      char v25 = v13;
    }
    char v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (uint64_t v27 = *(void *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v28) == 1)
      {
        uint64_t v29 = 0;
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        if (v24) {
          goto LABEL_30;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v54) != 1)
      {
        uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v54);
        if (v17 < 1) {
          goto LABEL_23;
        }
LABEL_33:
        uint64_t v31 = 0;
        uint64_t v32 = v56 + v29 * v19;
        uint64_t v33 = v55 + v30 * v19;
        while (2)
        {
          if (v21
            || (uint64_t v34 = *(void *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v35) == 1)
          {
            uint64_t v36 = 0;
            if ((v16 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v36 = *(void *)(*(void *)(v4 + 56) + 8 * v35);
          if (v16) {
            goto LABEL_41;
          }
LABEL_40:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            uint64_t v37 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_34;
          }
          uint64_t v37 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17) {
              goto LABEL_23;
            }
            continue;
          }
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = v32 + v36 * v31;
        uint64_t v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (uint64_t v41 = *(void *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v42) == 1)
          {
            uint64_t v43 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          uint64_t v43 = *(void *)(*(void *)(v4 + 56) + 8 * v42);
          if (v25) {
            goto LABEL_52;
          }
LABEL_51:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            uint64_t v44 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_45;
          }
          uint64_t v44 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12) {
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        uint64_t v46 = v39 + v43 * v38;
        uint64_t v47 = *(void *)(v4 + 40);
        uint64_t v48 = *(void *)(v5 + 40);
        uint64_t v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(void *)(v4 + 16), uint64_t v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v53) == 1)
          {
            uint64_t v51 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v51 = *(void *)(*(void *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) == 0)
            {
LABEL_60:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v50 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_57:
                *(float *)(v49 + v50 * v45 + v48) = fmaxf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v51 * v45 + v47) << 16), -INFINITY);
                if (v9 == ++v45) {
                  goto LABEL_45;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v50 = 0;
        goto LABEL_57;
      }
LABEL_30:
      uint64_t v30 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_23:
      if (++v19 == result) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t result = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    uint64_t v14 = v6 - 4;
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)14>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4 = **result;
  uint64_t v5 = **a2;
  uint64_t v57 = **a4;
  uint64_t v58 = **a3;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t v59 = 1;
    char v15 = 1;
    uint64_t v16 = 1;
LABEL_7:
    char v17 = 1;
LABEL_8:
    uint64_t v18 = 0;
    BOOL v19 = v6 < 1;
    int v20 = *(unsigned __int8 *)(v4 + 50);
    int v21 = v6 - 1;
    if (*(unsigned char *)(v5 + 50)) {
      char v17 = 1;
    }
    uint64_t v22 = v21;
    if (*(unsigned char *)(v5 + 50))
    {
      char v15 = 1;
      char v23 = 1;
    }
    else
    {
      char v23 = v13;
    }
    if (*(unsigned char *)(v5 + 50)) {
      BOOL v19 = 1;
    }
    if (v14 > v21) {
      char v24 = 1;
    }
    else {
      char v24 = v17;
    }
    if (v11 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v15;
    }
    if (v10 > v22) {
      char v26 = 1;
    }
    else {
      char v26 = v23;
    }
    char v27 = v7 > v22 || v19;
    uint64_t result = (uint64_t **)v14;
    while (1)
    {
      if (v20
        || (uint64_t v28 = *(void *)(v4 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(void *)(*(void *)(v4 + 24) + 8 * v29) == 1)
      {
        uint64_t v30 = 0;
        if (v24) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(*(void *)(v4 + 56) + 8 * v29);
        if (v24) {
          goto LABEL_35;
        }
      }
      if (*(void *)(*(void *)(v5 + 24) + 8 * v14) != 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
        if (v16 < 1) {
          goto LABEL_28;
        }
LABEL_38:
        uint64_t v32 = 0;
        uint64_t v33 = v58 + v30 * v18;
        uint64_t v34 = v57 + v31 * v18;
        while (2)
        {
          if (v20
            || (uint64_t v35 = *(void *)(v4 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v36) == 1)
          {
            uint64_t v37 = 0;
            if ((v25 & 1) == 0) {
              goto LABEL_45;
            }
            goto LABEL_46;
          }
          uint64_t v37 = *(void *)(*(void *)(v4 + 56) + 8 * v36);
          if (v25) {
            goto LABEL_46;
          }
LABEL_45:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_46:
            uint64_t v38 = 0;
            if (v12 >= 1) {
              break;
            }
            goto LABEL_39;
          }
          uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_39:
            if (++v32 == v16) {
              goto LABEL_28;
            }
            continue;
          }
          break;
        }
        uint64_t v39 = 0;
        uint64_t v40 = v33 + v37 * v32;
        uint64_t v41 = v34 + v38 * v32;
        while (2)
        {
          if (v20
            || (uint64_t v42 = *(void *)(v4 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v43) == 1)
          {
            uint64_t v44 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_57;
          }
          uint64_t v44 = *(void *)(*(void *)(v4 + 56) + 8 * v43);
          if (v26) {
            goto LABEL_57;
          }
LABEL_56:
          if (*(void *)(*(void *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_57:
            uint64_t v45 = 0;
            if (v9 >= 1) {
              break;
            }
            goto LABEL_50;
          }
          uint64_t v45 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_50:
            if (++v39 == v12) {
              goto LABEL_39;
            }
            continue;
          }
          break;
        }
        uint64_t v46 = 0;
        uint64_t v47 = v40 + v44 * v39;
        uint64_t v48 = *(void *)(v4 + 40);
        uint64_t v49 = *(void *)(v5 + 40);
        uint64_t v50 = v41 + v45 * v39;
        while (2)
        {
          if (v20
            || (uint64_t v55 = *(void *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(void *)(*(void *)(v4 + 24) + 8 * v56) == 1)
          {
            uint64_t v54 = 0;
            if ((v27 & 1) == 0) {
              goto LABEL_69;
            }
          }
          else
          {
            uint64_t v54 = *(void *)(*(void *)(v4 + 56) + 8 * v56);
            if ((v27 & 1) == 0)
            {
LABEL_69:
              if (*(void *)(*(void *)(v5 + 24) + 8 * v7) != 1)
              {
                uint64_t v51 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
LABEL_62:
                uint64_t v52 = v50 + v51 * v46;
                int v53 = *(unsigned __int16 *)(v47 + v54 * v46 + v48);
                if (COERCE_FLOAT(v53 << 16) > 0.0) {
                  int v53 = 0;
                }
                if (COERCE_FLOAT(v53 << 16) <= 0.0) {
                  LOWORD(v53) = 0;
                }
                *(_WORD *)(v52 + v49) = v53;
                if (v9 == ++v46) {
                  goto LABEL_50;
                }
                continue;
              }
            }
          }
          break;
        }
        uint64_t v51 = 0;
        goto LABEL_62;
      }
LABEL_35:
      uint64_t v31 = 0;
      if (v16 >= 1) {
        goto LABEL_38;
      }
LABEL_28:
      ++v18;
      uint64_t v14 = (uint64_t)result;
      if (v18 == v59) {
        return result;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v16 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v15 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v59 = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t v59 = *(void *)(v8 + 8 * (v6 - 4));
  if (v59 >= 1)
  {
    char v15 = 0;
    char v13 = 0;
    char v17 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)14>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = **a2;
  uint64_t v5 = **a4;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = v6 - 1;
  if (v6 <= 0)
  {
    uint64_t v10 = v6 - 2;
    uint64_t v9 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    uint64_t v10 = -1;
LABEL_5:
    uint64_t v11 = v6 - 3;
    uint64_t v12 = 1;
    char v13 = 1;
LABEL_6:
    uint64_t v14 = v6 - 4;
    uint64_t v15 = 1;
    char v16 = 1;
    uint64_t v17 = 1;
LABEL_7:
    char v18 = 1;
LABEL_8:
    uint64_t v19 = 0;
    BOOL v20 = v6 < 1;
    int v21 = v6 - 1;
    if (*(unsigned char *)(v4 + 50)) {
      char v18 = 1;
    }
    uint64_t v22 = v21;
    if (*(unsigned char *)(v4 + 50))
    {
      char v16 = 1;
      char v23 = 1;
    }
    else
    {
      char v23 = v13;
    }
    if (*(unsigned char *)(v4 + 50)) {
      BOOL v20 = 1;
    }
    if (v14 > v21) {
      char v24 = 1;
    }
    else {
      char v24 = v18;
    }
    if (v11 > v22) {
      char v25 = 1;
    }
    else {
      char v25 = v16;
    }
    if (v10 > v22) {
      char v26 = 1;
    }
    else {
      char v26 = v23;
    }
    char v27 = v7 > v22 || v20;
    while ((v24 & 1) != 0 || *(void *)(*(void *)(v4 + 24) + 8 * v14) == 1)
    {
      uint64_t v28 = 0;
      if (v17 >= 1) {
        goto LABEL_33;
      }
LABEL_27:
      if (++v19 == v15) {
        return;
      }
    }
    uint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    if (v17 < 1) {
      goto LABEL_27;
    }
LABEL_33:
    uint64_t v29 = 0;
    uint64_t v30 = v5 + v28 * v19;
    while ((v25 & 1) != 0 || *(void *)(*(void *)(v4 + 24) + 8 * v11) == 1)
    {
      uint64_t v31 = 0;
      if (v12 >= 1) {
        goto LABEL_40;
      }
LABEL_34:
      if (++v29 == v17) {
        goto LABEL_27;
      }
    }
    uint64_t v31 = *(void *)(*(void *)(v4 + 56) + 8 * v11);
    if (v12 < 1) {
      goto LABEL_34;
    }
LABEL_40:
    uint64_t v32 = 0;
    uint64_t v33 = v30 + v31 * v29;
    while (1)
    {
      if ((v26 & 1) != 0 || *(void *)(*(void *)(v4 + 24) + 8 * v10) == 1)
      {
        uint64_t v34 = 0;
        if (v9 >= 1) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
        if (v9 >= 1)
        {
LABEL_47:
          uint64_t v35 = 0;
          uint64_t v36 = v33 + v34 * v32;
          uint64_t v37 = *(void *)(v4 + 40);
          do
          {
            if ((v27 & 1) != 0 || *(void *)(*(void *)(v4 + 24) + 8 * v7) == 1) {
              uint64_t v38 = 0;
            }
            else {
              uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v7);
            }
            *(_WORD *)(v36 + v38 * v35++ + v37) = 0;
          }
          while (v9 != v35);
        }
      }
      if (++v32 == v12) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v10 = v6 - 2;
  uint64_t v12 = *(void *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    uint64_t v10 = 0;
    char v13 = 0;
    uint64_t v11 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = v6 - 3;
  uint64_t v17 = *(void *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    char v16 = 0;
    uint64_t v11 = 0;
    char v13 = 0;
    uint64_t v15 = 1;
    uint64_t v14 = -1;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = v6 - 4;
  uint64_t v15 = *(void *)(v8 + 8 * (v6 - 4));
  if (v15 >= 1)
  {
    char v16 = 0;
    char v13 = 0;
    char v18 = 0;
    goto LABEL_8;
  }
}

uint64_t mlir::getBroadcastIndices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v72[4] = *MEMORY[0x263EF8340];
  v65[0] = a1;
  v65[1] = a2;
  v64[0] = a3;
  v64[1] = a4;
  mlir::ShapedType::getShape((mlir::ShapedType *)v65);
  if (!v6) {
    return 1;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v64);
  if (!v7) {
    return 1;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v65);
  uint64_t v9 = v8;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v64);
  if (v9 == 1)
  {
    if (v11)
    {
      uint64_t v12 = Shape;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 8 * v11;
      do
      {
        if ((v13 & 1) == 0
          && (uint64_t v16 = *(void *)(v12 + 8 * (void)v14),
              v16 == *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v65)))
        {
          char v13 = 1;
        }
        else
        {
          uint64_t v70 = v14;
          uint64_t v17 = *(unsigned int *)(a5 + 8);
          if (v17 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a5, (uint64_t *)&v70);
          }
          else
          {
            *(void *)(*(void *)a5 + 8 * v17) = v14;
            *(_DWORD *)(a5 + 8) = v17 + 1;
          }
        }
        uint64_t v14 = (char *)v14 + 1;
        v15 -= 8;
      }
      while (v15);
    }
    return 1;
  }
  if (v11 == 1)
  {
    uint64_t v18 = mlir::ShapedType::getShape((mlir::ShapedType *)v65);
    if (v19)
    {
      uint64_t v20 = v18;
      char v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 8 * v19;
      do
      {
        if ((v21 & 1) == 0
          && (uint64_t v24 = *(void *)(v20 + 8 * (void)v22),
              v24 == *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v64)))
        {
          char v21 = 1;
        }
        else
        {
          uint64_t v70 = v22;
          uint64_t v25 = *(unsigned int *)(a5 + 8);
          if (v25 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a5, (uint64_t *)&v70);
          }
          else
          {
            *(void *)(*(void *)a5 + 8 * v25) = v22;
            *(_DWORD *)(a5 + 8) = v25 + 1;
          }
        }
        uint64_t v22 = (char *)v22 + 1;
        v23 -= 8;
      }
      while (v23);
    }
    return 1;
  }
  uint64_t v28 = (unsigned char *)mlir::ShapedType::getShape((mlir::ShapedType *)v65);
  uint64_t v29 = mlir::ShapedType::getShape((mlir::ShapedType *)v65);
  uint64_t v31 = (unsigned char *)(v29 + 8 * v30);
  uint64_t v70 = v72;
  uint64_t v71 = 0x400000000;
  uint64_t v32 = v31 - v28;
  if ((unint64_t)(v31 - v28) < 0x21)
  {
    unsigned int v33 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v32 >> 3, 8);
    unsigned int v33 = v71;
  }
  if (v31 != v28)
  {
    memcpy((char *)v70 + 8 * v33, v28, v31 - v28);
    unsigned int v33 = v71;
  }
  LODWORD(v71) = v33 + ((unint64_t)v32 >> 3);
  uint64_t v34 = (unsigned char *)mlir::ShapedType::getShape((mlir::ShapedType *)v64);
  uint64_t v35 = mlir::ShapedType::getShape((mlir::ShapedType *)v64);
  uint64_t v37 = (unsigned char *)(v35 + 8 * v36);
  uint64_t v67 = v69;
  uint64_t v68 = 0x400000000;
  uint64_t v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    unsigned int v39 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v38 >> 3, 8);
    unsigned int v39 = v68;
  }
  if (v37 != v34)
  {
    memcpy((char *)v67 + 8 * v39, v34, v37 - v34);
    unsigned int v39 = v68;
  }
  LODWORD(v68) = v39 + ((unint64_t)v38 >> 3);
  uint64_t v40 = mlir::ShapedType::getShape((mlir::ShapedType *)v65);
  uint64_t v42 = v41;
  uint64_t v43 = mlir::ShapedType::getShape((mlir::ShapedType *)v64);
  BOOL v45 = v42 == 0;
  if (v42 | v44)
  {
    uint64_t v46 = v43;
    uint64_t v47 = v43 + 8 * v44;
    uint64_t v48 = v40 + 8 * v42;
    do
    {
      if (v45)
      {
        if (v47 != v46)
        {
          uint64_t v49 = v70;
          uint64_t v66 = 1;
          uint64_t v50 = &v70;
LABEL_42:
          llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)v50, (uint64_t)v49, &v66);
        }
      }
      else if (v47 == v46)
      {
        uint64_t v49 = v67;
        uint64_t v66 = 1;
        uint64_t v50 = &v67;
        goto LABEL_42;
      }
      if (v45) {
        uint64_t v48 = v40;
      }
      else {
        v48 -= 8;
      }
      if (v47 == v46) {
        uint64_t v47 = v46;
      }
      else {
        v47 -= 8;
      }
      BOOL v45 = v48 == v40;
    }
    while (v48 != v40 || v47 != v46);
  }
  char v51 = mlir::OpTrait::util::staticallyKnownBroadcastable(v70, v71, (char *)v67, v68);
  uint64_t v52 = v67;
  if ((v51 & 1) == 0)
  {
    uint64_t v26 = 0;
    goto LABEL_68;
  }
  uint64_t v26 = 1;
  if (!v71 || !v68)
  {
LABEL_68:
    if (v67 == v69) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  uint64_t v53 = 0;
  uint64_t v54 = v70;
  uint64_t v55 = 8 * v71 - 8;
  uint64_t v56 = 8 * v68 - 8;
  do
  {
    uint64_t v57 = v54[v53];
    uint64_t v58 = v52[v53];
    if (v57 != v58 && (v57 == 1 || v58 == 1))
    {
      unint64_t v60 = *(unsigned int *)(a5 + 8);
      if (v60 >= *(unsigned int *)(a5 + 12))
      {
        uint64_t v62 = v52;
        uint64_t v63 = v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v60 + 1, 8);
        uint64_t v55 = v63;
        uint64_t v52 = v62;
        unint64_t v60 = *(unsigned int *)(a5 + 8);
      }
      *(void *)(*(void *)a5 + 8 * v60) = v53;
      ++*(_DWORD *)(a5 + 8);
    }
    if (!v55) {
      break;
    }
    ++v53;
    v55 -= 8;
    uint64_t v61 = v56;
    v56 -= 8;
  }
  while (v61);
  uint64_t v26 = 1;
  uint64_t v52 = v67;
  if (v67 == v69) {
    goto LABEL_70;
  }
LABEL_69:
  free(v52);
LABEL_70:
  if (v70 != v72) {
    free(v70);
  }
  return v26;
}

uint64_t mlir::getPositiveAxis(uint64_t this, uint64_t a2)
{
  return (a2 & (this >> 63)) + this;
}

unint64_t mlir::tryGetPositiveAxis(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  v40[19] = *MEMORY[0x263EF8340];
  uint64_t v32 = a1;
  uint64_t v7 = -a2;
  if (-a2 > a1 || a2 <= a1)
  {
    if (a5)
    {
      v30[0] = (void **)"invalid axis ";
      __int16 v31 = 259;
      mlir::Operation::emitOpError(a5, v30, (uint64_t)&v35);
      if (v35)
      {
        int v33 = 2;
        uint64_t v34 = a1;
        uint64_t v9 = &v33;
        unint64_t v10 = v37;
        if (v38 >= v39)
        {
          unint64_t v24 = v38 + 1;
          if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
          {
            char v27 = (char *)&v33 - v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v24, 24);
            unint64_t v10 = v37;
            uint64_t v9 = (int *)&v27[v37];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v24, 24);
            uint64_t v9 = &v33;
            unint64_t v10 = v37;
          }
        }
        unint64_t v11 = v10 + 24 * v38;
        long long v12 = *(_OWORD *)v9;
        *(void *)(v11 + 16) = *((void *)v9 + 2);
        *(_OWORD *)unint64_t v11 = v12;
        ++v38;
        if (v35)
        {
          mlir::Diagnostic::operator<<((uint64_t)v36, " is outside of the range [");
          if (v35)
          {
            int v33 = 2;
            uint64_t v34 = v7;
            char v13 = &v33;
            unint64_t v14 = v37;
            if (v38 >= v39)
            {
              unint64_t v25 = v38 + 1;
              if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
              {
                uint64_t v28 = (char *)&v33 - v37;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v25, 24);
                unint64_t v14 = v37;
                char v13 = (int *)&v28[v37];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v25, 24);
                char v13 = &v33;
                unint64_t v14 = v37;
              }
            }
            unint64_t v15 = v14 + 24 * v38;
            long long v16 = *(_OWORD *)v13;
            *(void *)(v15 + 16) = *((void *)v13 + 2);
            *(_OWORD *)unint64_t v15 = v16;
            ++v38;
            if (v35)
            {
              mlir::Diagnostic::operator<<((uint64_t)v36, ", ");
              if (v35)
              {
                int v33 = 2;
                uint64_t v34 = a2 - 1;
                uint64_t v17 = &v33;
                unint64_t v18 = v37;
                if (v38 >= v39)
                {
                  unint64_t v26 = v38 + 1;
                  if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
                  {
                    uint64_t v29 = (char *)&v33 - v37;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v26, 24);
                    unint64_t v18 = v37;
                    uint64_t v17 = (int *)&v29[v37];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v26, 24);
                    uint64_t v17 = &v33;
                    unint64_t v18 = v37;
                  }
                }
                unint64_t v19 = v18 + 24 * v38;
                long long v20 = *(_OWORD *)v17;
                *(void *)(v19 + 16) = *((void *)v17 + 2);
                *(_OWORD *)unint64_t v19 = v20;
                ++v38;
                if (v35)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v36, "].");
                  if (v35) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
                  }
                }
              }
            }
          }
        }
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v36);
    }
    else
    {
      uint64_t v35 = -a2;
      v30[0] = (void **)(a2 - 1);
      mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(a3, a4, "invalid axis ", &v32, " is outside of the range [", &v35, ", ", (uint64_t *)v30, "]");
    }
    uint64_t v22 = 0;
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v21 = ((a2 & (a1 >> 63)) + a1) & 0xFFFFFFFFFFFFFF00;
    uint64_t v22 = ((a2 & (a1 >> 63)) + a1);
  }
  return v21 | v22;
}

uint64_t mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7, uint64_t *a8, char *a9)
{
  v18[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v17);
  if (v17)
  {
    mlir::Diagnostic::operator<<((uint64_t)v18, a3);
    mlir::Diagnostic::append<long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>((uint64_t)v18, a4, a5, a6, a7, a8, a9);
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
  if (v17) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  return v15;
}

uint64_t mlir::getPositiveAxes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  v52[6] = *MEMORY[0x263EF8340];
  uint64_t v50 = (char *)v52;
  uint64_t v51 = 0x600000000;
  if (a2)
  {
    uint64_t v40 = (void *)(a4 + 16);
    uint64_t v13 = 8 * a2;
    do
    {
      uint64_t v17 = *a1;
      unint64_t PositiveAxis = mlir::tryGetPositiveAxis(*a1, a3, 0, 0, a7);
      if (v19)
      {
        unint64_t v14 = PositiveAxis;
        unint64_t v15 = *(unsigned int *)(a4 + 8);
        if (v15 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v40, v15 + 1, 8);
          unint64_t v15 = *(unsigned int *)(a4 + 8);
        }
        long long v16 = (char **)a4;
      }
      else
      {
        unint64_t v15 = v51;
        long long v16 = &v50;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
          unint64_t v15 = v51;
        }
        unint64_t v14 = v17;
      }
      *(void *)&(*v16)[8 * v15] = v14;
      ++*((_DWORD *)v16 + 2);
      ++a1;
      v13 -= 8;
    }
    while (v13);
    if (v51)
    {
      if (a6)
      {
        uint64_t v41 = "invalid axes: ";
        __int16 v43 = 259;
        mlir::emitError(a5, (uint64_t)&v41, (uint64_t)&v44);
        uint64_t v20 = v51;
        if (v51)
        {
          unint64_t v21 = v50;
          if (v44)
          {
            uint64_t v22 = *(void *)v50;
            LODWORD(v41) = 2;
            uint64_t v42 = v22;
            uint64_t v23 = &v41;
            unint64_t v24 = v46;
            if (v47 >= v48)
            {
              unint64_t v38 = v47 + 1;
              if (v46 <= (unint64_t)&v41 && v46 + 24 * v47 > (unint64_t)&v41)
              {
                unsigned int v39 = (char *)&v41 - v46;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v38, 24);
                unint64_t v24 = v46;
                uint64_t v23 = (const char **)&v39[v46];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v38, 24);
                uint64_t v23 = &v41;
                unint64_t v24 = v46;
              }
            }
            unint64_t v25 = v24 + 24 * v47;
            long long v26 = *(_OWORD *)v23;
            *(void *)(v25 + 16) = v23[2];
            *(_OWORD *)unint64_t v25 = v26;
            ++v47;
          }
          if (v20 != 1)
          {
            uint64_t v29 = (uint64_t *)(v21 + 8);
            uint64_t v30 = 8 * v20 - 8;
            do
            {
              if (v44)
              {
                mlir::Diagnostic::operator<<((uint64_t)v45, ", ");
                if (v44)
                {
                  uint64_t v34 = *v29;
                  LODWORD(v41) = 2;
                  uint64_t v42 = v34;
                  unint64_t v35 = v46;
                  if (v47 < v48)
                  {
                    __int16 v31 = &v41;
                  }
                  else
                  {
                    unint64_t v36 = v47 + 1;
                    if (v46 <= (unint64_t)&v41 && v46 + 24 * v47 > (unint64_t)&v41)
                    {
                      unint64_t v37 = (char *)&v41 - v46;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
                      unint64_t v35 = v46;
                      __int16 v31 = (const char **)&v37[v46];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
                      __int16 v31 = &v41;
                      unint64_t v35 = v46;
                    }
                  }
                  unint64_t v32 = v35 + 24 * v47;
                  long long v33 = *(_OWORD *)v31;
                  *(void *)(v32 + 16) = v31[2];
                  *(_OWORD *)unint64_t v32 = v33;
                  ++v47;
                }
              }
              ++v29;
              v30 -= 8;
            }
            while (v30);
          }
        }
        uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
        if (v44) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v45);
      }
      else
      {
        uint64_t v27 = 0;
      }
    }
    else
    {
      uint64_t v27 = 1;
    }
  }
  else
  {
    uint64_t v27 = 1;
  }
  if (v50 != (char *)v52) {
    free(v50);
  }
  return v27;
}

uint64_t mlir::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  v19[22] = *MEMORY[0x263EF8340];
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v15);
  uint64_t v18 = v12;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = v19;
    uint64_t v18 = 0x600000000;
    mlir::getIntValues<long long>(v15, v16, (uint64_t)&ArgOperands, 1);
    uint64_t PositiveAxes = mlir::getPositiveAxes((uint64_t *)ArgOperands, v18, a3, a4, a5, a6, a7);
    if (ArgOperands != v19) {
      free(ArgOperands);
    }
  }
  else if (a6)
  {
    mlir::emitError(a5, (uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::Diagnostic::operator<<((uint64_t)&v18, "attribute is not integer type");
    }
    uint64_t PositiveAxes = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ArgOperands);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
  }
  else
  {
    return 0;
  }
  return PositiveAxes;
}

uint64_t mlir::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  v18[23] = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v14 = (uint64_t **)&v15;
  uint64_t v17 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v14, DefiningOp)) {
    return mlir::getPositiveAxes(v15, v16, a2, a3, a4, a5, a6);
  }
  if (!a5) {
    return 0;
  }
  mlir::emitError(a4, (uint64_t)&v17);
  if (v17) {
    mlir::Diagnostic::operator<<((uint64_t)v18, "axes is not a constant");
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
  if (v17) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  return v12;
}

void llvm::SmallSet<long long,4u,std::less<long long>>::insert(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(a1 + 64))
  {
    uint64_t v15 = *(uint64_t ***)a1;
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    uint64_t v17 = *a2;
    if (!v16) {
      goto LABEL_21;
    }
    uint64_t v18 = 8 * v16;
    uint64_t v9 = *(uint64_t ***)a1;
    while (*v9 != v17)
    {
      ++v9;
      v18 -= 8;
      if (!v18) {
        goto LABEL_20;
      }
    }
    if (v18)
    {
      char v19 = 0;
      char v14 = 1;
      goto LABEL_25;
    }
LABEL_20:
    if (v16 <= 3)
    {
LABEL_21:
      if (v16 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v16 + 1, 8);
        uint64_t v16 = *(unsigned int *)(a1 + 8);
        uint64_t v15 = *(uint64_t ***)a1;
      }
      v15[v16] = v17;
      unsigned int v20 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v20;
      uint64_t v9 = (uint64_t **)(*(void *)a1 + 8 * v20 - 8);
      char v14 = 1;
      goto LABEL_24;
    }
    uint64_t v7 = (uint64_t **)(a1 + 56);
    do
    {
      uint64_t v22 = *(uint64_t **)(a1 + 56);
      uint64_t v23 = *(void *)(*(void *)a1 + 8 * v16 - 8);
      unint64_t v24 = (uint64_t **)(a1 + 56);
      unint64_t v25 = (uint64_t **)(a1 + 56);
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v25 = (uint64_t **)v22;
            uint64_t v26 = v22[4];
            if (v23 >= v26) {
              break;
            }
            uint64_t v22 = *v25;
            unint64_t v24 = v25;
            if (!*v25) {
              goto LABEL_37;
            }
          }
          if (v26 >= v23) {
            break;
          }
          uint64_t v22 = v25[1];
          if (!v22)
          {
            unint64_t v24 = v25 + 1;
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        uint64_t v27 = (uint64_t *)operator new(0x28uLL);
        v27[4] = v23;
        *uint64_t v27 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v25;
        *unint64_t v24 = v27;
        uint64_t v28 = **(void **)(a1 + 48);
        if (v28)
        {
          *(void *)(a1 + 48) = v28;
          unint64_t v21 = *v24;
        }
        else
        {
          unint64_t v21 = v27;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v21);
        ++*(void *)(a1 + 64);
        LODWORD(v16) = *(_DWORD *)(a1 + 8);
      }
      LODWORD(v16) = v16 - 1;
      *(_DWORD *)(a1 + 8) = v16;
    }
    while (v16);
    uint64_t v8 = *a2;
    uint64_t v29 = *v7;
    uint64_t v9 = (uint64_t **)(a1 + 56);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t **)v29;
          uint64_t v30 = v29[4];
          if ((uint64_t)v8 >= v30) {
            break;
          }
          uint64_t v29 = *v9;
          uint64_t v7 = v9;
          if (!*v9) {
            goto LABEL_9;
          }
        }
        if (v30 >= (uint64_t)v8) {
          break;
        }
        uint64_t v29 = v9[1];
        if (!v29)
        {
LABEL_8:
          uint64_t v7 = v9 + 1;
          goto LABEL_9;
        }
      }
      char v14 = 0;
      goto LABEL_24;
    }
LABEL_9:
    unint64_t v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x28uLL);
    v9[4] = v8;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *uint64_t v7 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 48);
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 48) = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v13);
    char v14 = 0;
    ++*(void *)(a1 + 64);
LABEL_24:
    char v19 = 1;
    goto LABEL_25;
  }
  uint64_t v7 = (uint64_t **)(a1 + 56);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = *a2;
  if (!v6)
  {
    uint64_t v9 = (uint64_t **)(a1 + 56);
    goto LABEL_9;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v9 = (uint64_t **)v6;
      unint64_t v10 = (uint64_t *)v6[4];
      if ((uint64_t)v8 >= (uint64_t)v10) {
        break;
      }
      uint64_t v6 = *v9;
      uint64_t v7 = v9;
      if (!*v9) {
        goto LABEL_9;
      }
    }
    if ((uint64_t)v10 >= (uint64_t)v8) {
      break;
    }
    uint64_t v6 = v9[1];
    if (!v6) {
      goto LABEL_8;
    }
  }
  char v14 = 0;
  char v19 = 0;
LABEL_25:
  *(unsigned char *)(a3 + 8) = v14;
  *(void *)a3 = v9;
  *(unsigned char *)(a3 + 16) = v19;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v23[22] = *MEMORY[0x263EF8340];
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19);
  uint64_t v22 = v10;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = v23;
    uint64_t v22 = 0x600000000;
    mlir::getIntValues<long long>(v19, v20, (uint64_t)&ArgOperands, 1);
    if (mlir::getPositiveAxes((uint64_t *)ArgOperands, v22, a3, a4, a5, a6, 0))
    {
      uint64_t v12 = *(unsigned int *)(a4 + 8);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)a4;
        uint64_t v14 = 8 * v12;
        do
        {
          uint64_t v15 = *v13;
          if (*v13 == 2) {
            uint64_t v16 = 3;
          }
          else {
            uint64_t v16 = *v13;
          }
          if (v15) {
            uint64_t v17 = 3;
          }
          else {
            uint64_t v17 = 1;
          }
          if (a3 == 2) {
            uint64_t v15 = v17;
          }
          if (a3 == 3) {
            uint64_t v15 = v16;
          }
          if (a3 < 2) {
            uint64_t v15 = 3;
          }
          *v13++ = v15;
          v14 -= 8;
        }
        while (v14);
      }
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (ArgOperands != v23) {
      free(ArgOperands);
    }
  }
  else if (a6)
  {
    mlir::emitError(a5, (uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::Diagnostic::operator<<((uint64_t)&v22, "attribute is not integer type");
    }
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ArgOperands);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v22);
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!mlir::getPositiveAxes(a1, a2, a3, a4, a5, a6, 0)) {
    return 0;
  }
  uint64_t v8 = *(unsigned int *)(a4 + 8);
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)a4;
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      if (*v9 == 2) {
        uint64_t v12 = 3;
      }
      else {
        uint64_t v12 = *v9;
      }
      if (v11) {
        uint64_t v13 = 3;
      }
      else {
        uint64_t v13 = 1;
      }
      if (a3 == 2) {
        uint64_t v11 = v13;
      }
      if (a3 == 3) {
        uint64_t v11 = v12;
      }
      if (a3 < 2) {
        uint64_t v11 = 3;
      }
      *v9++ = v11;
      v10 -= 8;
    }
    while (v10);
  }
  return 1;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v10 = *a1;
  unint64_t v11 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;

  return mlir::getPositivePromotedAxes((uint64_t)a1, v19, a2, a3, a4, a5);
}

unint64_t mlir::getSortedUniquePromotedPositiveAxesAttr(void *a1, unint64_t a2, uint64_t a3, char a4)
{
  v67[22] = *MEMORY[0x263EF8340];
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v62 = &v55;
  uint64_t v65 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v65);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v62, DefiningOp))
  {
    uint64_t v65 = v67;
    uint64_t v66 = 0x600000000;
    if (!mlir::getPositiveAxes(v55, v56, a2, (uint64_t)&v65, a3, a4, 0))
    {
      unsigned __int8 v18 = 0;
      unint64_t v19 = 0;
LABEL_64:
      if (v65 != v67) {
        free(v65);
      }
      return v19 & 0xFFFFFFFFFFFFFF00 | v18;
    }
    uint64_t v62 = v64;
    uint64_t v63 = 0x600000000;
    if (!mlir::getPositiveAxes((uint64_t *)v65, v66, a2, (uint64_t)&v62, a3, a4, 0))
    {
      unsigned __int8 v18 = 0;
      unint64_t v19 = 0;
LABEL_62:
      if (v62 != v64) {
        free(v62);
      }
      goto LABEL_64;
    }
    std::__sort<std::__less<long long,long long> &,long long *>();
    uint64_t v9 = (char *)v62;
    uint64_t v10 = (char *)v62;
    if (v63)
    {
      uint64_t v10 = (char *)v62 + 8 * v63;
      uint64_t v11 = 8 * v63 - 16;
      unint64_t v12 = (char *)v62;
      while (1)
      {
        uint64_t v13 = v12;
        v12 += 8;
        if (v12 == v10) {
          break;
        }
        uint64_t v14 = v11;
        uint64_t v15 = *v13;
        v11 -= 8;
        if (*v13 == v13[1])
        {
          if (v13 + 2 != (void *)v10)
          {
            uint64_t v16 = 8;
            do
            {
              uint64_t v17 = v15;
              uint64_t v15 = *(void *)&v12[v16];
              if (v17 != v15)
              {
                v13[1] = v15;
                ++v13;
              }
              v16 += 8;
              v14 -= 8;
            }
            while (v14);
          }
          uint64_t v10 = (char *)(v13 + 1);
          break;
        }
      }
    }
    unint64_t v20 = (unint64_t)(v10 - v9) >> 3;
    LODWORD(v63) = v20;
    if (v20)
    {
      uint64_t v21 = 8 * v20;
      uint64_t v22 = (uint64_t *)v9;
      do
      {
        uint64_t v23 = *v22;
        if (*v22 == 2) {
          uint64_t v24 = 3;
        }
        else {
          uint64_t v24 = *v22;
        }
        if (v23) {
          uint64_t v25 = 3;
        }
        else {
          uint64_t v25 = 1;
        }
        if (a2 == 2) {
          uint64_t v23 = v25;
        }
        if (a2 == 3) {
          uint64_t v23 = v24;
        }
        if (a2 < 2) {
          uint64_t v23 = 3;
        }
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    uint64_t v59 = v61;
    uint64_t v60 = 0x600000000;
    if (v20 < 7uLL)
    {
      int v26 = 0;
      if (!v20) {
        goto LABEL_50;
      }
      uint64_t v27 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v20, 8);
      int v26 = v60;
      uint64_t v27 = v60;
    }
    uint64_t v28 = (char *)v59 + 8 * v27;
    unint64_t v29 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v29 >= 7)
    {
      __int16 v31 = (char *)v59 + 8 * v27;
      uint64_t v30 = v9;
      if ((unint64_t)(v31 - v9) >= 0x20)
      {
        unint64_t v32 = v29 + 1;
        uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v28 = (void *)((char *)v28 + v33);
        uint64_t v30 = &v9[v33];
        uint64_t v34 = (long long *)(v9 + 16);
        unint64_t v35 = v31 + 16;
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *unint64_t v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_50:
          LODWORD(v60) = v26 + v20;
          uint64_t v58 = v63;
          unint64_t v57 = a1[1] & 0xFFFFFFFFFFFFFFF8;
          uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v57);
          uint64_t v40 = mlir::IntegerType::get(Context, 0x40u, 2u);
          uint64_t v41 = (void *)mlir::RankedTensorType::get((uint64_t)&v58, 1, v40, 0);
          uint64_t v42 = v41;
          if (!v41) {
            goto LABEL_59;
          }
          uint64_t v43 = *v41;
          unint64_t v44 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v45 = *(unsigned int *)(v43 + 16);
          if (!v45) {
            goto LABEL_59;
          }
          unint64_t v46 = *(void **)(v43 + 8);
          unsigned int v47 = &v46[2 * v45];
          do
          {
            unint64_t v48 = v45 >> 1;
            uint64_t v49 = &v46[2 * (v45 >> 1)];
            unint64_t v51 = *v49;
            uint64_t v50 = v49 + 2;
            v45 += ~(v45 >> 1);
            if (v51 < v44) {
              unint64_t v46 = v50;
            }
            else {
              unint64_t v45 = v48;
            }
          }
          while (v45);
          if (v46 != v47 && *v46 == v44) {
            uint64_t v52 = v46[1];
          }
          else {
LABEL_59:
          }
            uint64_t v52 = 0;
          uint64_t v53 = mlir::DenseElementsAttr::getFromRawBuffer(v42, v52, v59, 8 * v60, 8, 1, 0);
          unsigned __int8 v18 = v53;
          unint64_t v19 = v53 & 0xFFFFFFFFFFFFFF00;
          if (v59 != v61) {
            free(v59);
          }
          goto LABEL_62;
        }
      }
    }
    else
    {
      uint64_t v30 = v9;
    }
    do
    {
      uint64_t v38 = *(void *)v30;
      v30 += 8;
      *v28++ = v38;
    }
    while (v30 != &v9[8 * v20]);
    goto LABEL_50;
  }
  if (a4)
  {
    mlir::emitError(a3, (uint64_t)&v65);
    if (v65) {
      mlir::Diagnostic::operator<<((uint64_t)&v66, "axes is not a constant");
    }
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
    if (v65) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v66);
  }
  unsigned __int8 v18 = 0;
  unint64_t v19 = 0;
  return v19 & 0xFFFFFFFFFFFFFF00 | v18;
}

uint64_t mlir::getMostDefinedTypeForCPU(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v27 = 0uLL;
  uint64_t v28 = a1;
  uint64_t v29 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v6 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v28, v4) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v6) {
      goto LABEL_17;
    }
    uint64_t v7 = *v6;
    unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v9 = *(unsigned int *)(v7 + 16);
    if (!v9) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void **)(v7 + 8);
    uint64_t v11 = &v10[2 * v9];
    do
    {
      unint64_t v12 = v9 >> 1;
      uint64_t v13 = &v10[2 * (v9 >> 1)];
      unint64_t v15 = *v13;
      uint64_t v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8) {
        uint64_t v10 = v14;
      }
      else {
        unint64_t v9 = v12;
      }
    }
    while (v9);
    if (v10 != v11 && *v10 == v8) {
      uint64_t v16 = v10[1];
    }
    else {
LABEL_17:
    }
      uint64_t v16 = 0;
    *(void *)&long long v26 = v6;
    *((void *)&v26 + 1) = v16;
    if (!(void)v27
      || (uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26),
          uint64_t NumElements = mlir::ShapedType::getNumElements(Shape, v18),
          unint64_t v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27),
          NumElements > mlir::ShapedType::getNumElements(v20, v21))
      || (mlir::ShapedType::getShape((mlir::ShapedType *)&v26),
          uint64_t v23 = v22,
          mlir::ShapedType::getShape((mlir::ShapedType *)&v27),
          v23 > v24))
    {
      long long v27 = v26;
    }
    uint64_t v4 = ++v29;
  }
  while (v28 != a1 || v4 != a2);
  return v27;
}

void mlir::getRankPromotionShapeForANE(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  v24[0] = a1;
  v24[1] = a2;
  uint64_t Shape = (unsigned char *)mlir::ShapedType::getShape((mlir::ShapedType *)v24);
  uint64_t v5 = mlir::ShapedType::getShape((mlir::ShapedType *)v24);
  uint64_t v7 = (unsigned char *)(v5 + 8 * v6);
  *a3 = (uint64_t *)(a3 + 2);
  a3[1] = (uint64_t *)0x500000000;
  uint64_t v8 = v7 - Shape;
  if ((unint64_t)(v7 - Shape) < 0x29)
  {
    unsigned int v9 = 0;
    if (v7 == Shape) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v8 >> 3, 8);
  unsigned int v9 = *((_DWORD *)a3 + 2);
  if (v7 != Shape)
  {
LABEL_5:
    memcpy(&(*a3)[v9], Shape, v7 - Shape);
    unsigned int v9 = *((_DWORD *)a3 + 2);
  }
LABEL_6:
  int v10 = v9 + ((unint64_t)v8 >> 3);
  *((_DWORD *)a3 + 2) = v10;
  switch(v10)
  {
    case 0:
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v11 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        uint64_t v11 = *((unsigned int *)a3 + 2);
      }
      uint64_t v21 = &(*a3)[v11];
      *(_OWORD *)uint64_t v21 = xmmword_211F1B410;
      *((_OWORD *)v21 + 1) = unk_211F1B420;
      goto LABEL_25;
    case 1:
      unint64_t v19 = *a3;
      uint64_t v13 = **a3;
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v20 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        uint64_t v20 = *((unsigned int *)a3 + 2);
        unint64_t v19 = *a3;
      }
      uint64_t v22 = &v19[v20];
      *uint64_t v22 = 1;
      *(int64x2_t *)(v22 + 1) = vdupq_n_s64(1uLL);
      goto LABEL_24;
    case 2:
      unint64_t v12 = *a3;
      uint64_t v14 = **a3;
      uint64_t v13 = (*a3)[1];
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v15 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        uint64_t v15 = *((unsigned int *)a3 + 2);
        unint64_t v12 = *a3;
      }
      uint64_t v22 = &v12[v15];
      *uint64_t v22 = 1;
      v22[1] = v14;
      goto LABEL_21;
    case 3:
      uint64_t v16 = *a3;
      long long v17 = *(_OWORD *)*a3;
      uint64_t v13 = (*a3)[2];
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v18 = 0;
      }
      else
      {
        long long v23 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        long long v17 = v23;
        uint64_t v18 = *((unsigned int *)a3 + 2);
        uint64_t v16 = *a3;
      }
      uint64_t v22 = &v16[v18];
      *(_OWORD *)uint64_t v22 = v17;
LABEL_21:
      v22[2] = 1;
LABEL_24:
      v22[3] = v13;
LABEL_25:
      *((_DWORD *)a3 + 2) += 4;
      break;
    default:
      return;
  }
}

uint64_t mlir::getRankPromotionTypeForANE(uint64_t a1, uint64_t a2)
{
  v35[5] = *MEMORY[0x263EF8340];
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v29)) {
    return v29;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v29);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v4 -= 8;
      if (!v4) {
        goto LABEL_6;
      }
    }
    return v29;
  }
LABEL_6:
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v29) & 1) == 0) {
    return v29;
  }
  mlir::getRankPromotionShapeForANE(v29, v30, (uint64_t **)&__s2);
  uint64_t v5 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v29);
  uint64_t v6 = v34;
  if (v7 == v34 && !memcmp(v5, __s2, 8 * v34))
  {
    uint64_t v12 = v29;
  }
  else
  {
    uint64_t v8 = v29;
    unsigned int v9 = *(void **)(*(void *)v29 + 136);
    if (v9 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      uint64_t v8 = 0;
    }
    uint64_t v28 = v8;
    if (v9 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      *(void *)&long long v31 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v28);
      *((void *)&v31 + 1) = v14;
      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v31);
      uint64_t v15 = (uint64_t *)__s2;
      uint64_t v16 = (mlir::AffineMap *)v34;
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
      uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v28);
      unint64_t v19 = (uint64_t *)mlir::MemRefType::get(v15, v16, RHS, 0, LayerSchedule);
      uint64_t v12 = (uint64_t)v19;
      if (v19)
      {
        uint64_t v20 = *v19;
        unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v22 = *(unsigned int *)(v20 + 16);
        if (v22)
        {
          long long v23 = *(void **)(v20 + 8);
          do
          {
            unint64_t v24 = v22 >> 1;
            uint64_t v25 = &v23[2 * (v22 >> 1)];
            unint64_t v27 = *v25;
            long long v26 = v25 + 2;
            v22 += ~(v22 >> 1);
            if (v27 < v21) {
              long long v23 = v26;
            }
            else {
              unint64_t v22 = v24;
            }
          }
          while (v22);
        }
      }
    }
    else
    {
      int v10 = __s2;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v29);
      *(void *)&long long v31 = v10;
      *((void *)&v31 + 1) = v6;
      char v32 = 1;
      uint64_t v12 = mlir::ShapedType::cloneWith(&v29, &v31, OperandRange);
    }
  }
  if (__s2 != v35) {
    free(__s2);
  }
  return v12;
}

uint64_t mlir::getMostDefinedTypeForANE(uint64_t a1, uint64_t a2)
{
  uint64_t MostDefinedTypeForCPU = mlir::getMostDefinedTypeForCPU(a1, a2);

  return mlir::getRankPromotionTypeForANE(MostDefinedTypeForCPU, v3);
}

double mlir::anec::getAllDims@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 16) = xmmword_211F1B430;
  *(void *)&double result = 0x500000005;
  *(void *)(a1 + 8) = 0x500000005;
  return result;
}

unint64_t mlir::anec::getIndexFromDim(int a1, unint64_t a2)
{
  switch(a1)
  {
    case 0:
      unsigned __int8 v2 = 0;
      unint64_t v3 = 0;
      break;
    case 1:
      unsigned __int8 v2 = a2 - 3;
      unint64_t v3 = (a2 - 3) & 0xFFFFFFFFFFFFFF00;
      BOOL v4 = a2 >= 3;
      goto LABEL_7;
    case 2:
      unint64_t v3 = 0;
      unsigned __int8 v2 = a2 > 4;
      break;
    case 3:
      unsigned __int8 v2 = a2 - 2;
      unint64_t v3 = (a2 - 2) & 0xFFFFFFFFFFFFFF00;
      BOOL v4 = a2 >= 2;
LABEL_7:
      if (!v4)
      {
        unsigned __int8 v2 = 0;
        unint64_t v3 = 0;
      }
      break;
    case 4:
      unsigned __int8 v2 = a2 - 1;
      unint64_t v3 = (a2 - 1) & 0xFFFFFFFFFFFFFF00;
      if (!a2)
      {
        unsigned __int8 v2 = 0;
        unint64_t v3 = 0;
      }
      break;
    default:
      unsigned __int8 v2 = 0;
      unint64_t v3 = 0;
      break;
  }
  return v3 | v2;
}

uint64_t mlir::anec::getDimFromIndex(mlir::anec *this, unint64_t a2)
{
  if (a2 && (mlir::anec *)(a2 - 1) == this) {
    return 0x100000004;
  }
  if (a2 >= 2 && (mlir::anec *)(a2 - 2) == this) {
    return 0x100000003;
  }
  if (a2 >= 3 && (mlir::anec *)(a2 - 3) == this) {
    return 0x100000001;
  }
  if (a2 >= 4 && (mlir::anec *)(a2 - 4) == this) {
    return (2 * (a2 > 4)) | 0x100000000;
  }
  BOOL v3 = (mlir::anec *)(a2 - 5) == this && a2 > 4;
  uint64_t v4 = 0x100000000;
  if (!v3) {
    return 0;
  }
  return v4;
}

uint64_t mlir::anec::getKernelDimFromIndex(unint64_t this, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  mlir::anec::getKernelDimMap(&v27);
  char v4 = v27;
  uint64_t v5 = (char *)&v28;
  if (v27)
  {
    int v7 = 4;
    uint64_t v6 = &v28;
  }
  else
  {
    uint64_t v6 = v28;
    int v7 = v29;
    if (!v29)
    {
      uint64_t v8 = 0;
LABEL_4:
      unsigned int v9 = (char *)&v6[4 * v8];
      goto LABEL_7;
    }
  }
  int v10 = v7 - 1;
  unsigned int v9 = (char *)&v6[4 * (v10 & (37 * a2))];
  uint64_t v11 = *(void *)v9;
  if (*(void *)v9 != a2)
  {
    int v24 = 1;
    LODWORD(v25) = v10 & (37 * a2);
    while (v11 != -1)
    {
      int v26 = v25 + v24++;
      uint64_t v25 = v26 & v10;
      uint64_t v11 = v6[4 * v25];
      if (v11 == a2)
      {
        unsigned int v9 = (char *)&v6[4 * v25];
        goto LABEL_7;
      }
    }
    if ((v27 & 1) == 0)
    {
      uint64_t v6 = v28;
      uint64_t v8 = v29;
      goto LABEL_4;
    }
    unsigned int v9 = (char *)&v30;
  }
LABEL_7:
  uint64_t v12 = v29;
  uint64_t v13 = (char *)v28 + 32 * v29;
  if (v27) {
    uint64_t v13 = (char *)&v30;
  }
  if (v9 == v13 || (v15 = v9 + 8, uint64_t v14 = *((void *)v9 + 1), this >= (v15[1] - v14) >> 2))
  {
    uint64_t v19 = 0;
    int v18 = 0;
    unsigned int v17 = 0;
    if (v27) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v5 = (char *)v28;
    if (!v29) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  int v16 = *(_DWORD *)(v14 + 4 * this);
  unsigned int v17 = v16 & 0xFFFFFF00;
  int v18 = v16;
  uint64_t v19 = 0x100000000;
  if ((v27 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v12 = 4;
LABEL_15:
  uint64_t v20 = 32 * v12;
  unint64_t v21 = v5 + 16;
  do
  {
    if (*(v21 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v22 = (void *)*(v21 - 1);
      if (v22)
      {
        *unint64_t v21 = v22;
        operator delete(v22);
      }
    }
    v21 += 4;
    v20 -= 32;
  }
  while (v20);
  char v4 = v27;
LABEL_21:
  if ((v4 & 1) == 0) {
    llvm::deallocate_buffer(v28, (void *)(32 * v29));
  }
  return v19 | v17 | v18;
}

void mlir::anec::getKernelDimMap(void *a1@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v11 = 2;
  BOOL v3 = operator new(8uLL);
  uint64_t v12 = v3;
  *BOOL v3 = 0x100000000;
  uint64_t v13 = v3 + 1;
  uint64_t v14 = v3 + 1;
  char v4 = operator new(0xCuLL);
  *(void *)char v4 = 0x100000000;
  v4[2] = 4;
  uint64_t v15 = 3;
  uint64_t v5 = operator new(0xCuLL);
  unsigned int v17 = v5 + 3;
  int v18 = (char *)(v5 + 3);
  *(void *)uint64_t v5 = *(void *)v4;
  v5[2] = v4[2];
  int v16 = v5;
  uint64_t v6 = operator new(0x10uLL);
  *uint64_t v6 = xmmword_211EEBEC0;
  uint64_t v19 = 4;
  int v7 = operator new(0x10uLL);
  *int v7 = *v6;
  uint64_t v20 = v7;
  unint64_t v21 = v7 + 1;
  unint64_t v22 = v7 + 1;
  uint64_t v23 = 5;
  uint64_t v8 = operator new(0x14uLL);
  uint64_t v25 = v8 + 5;
  int v26 = (char *)(v8 + 5);
  v8[4] = 2;
  *(_OWORD *)uint64_t v8 = xmmword_211F1B448;
  __p = v8;
  int v10 = &v11;
  unsigned int v9 = &v27;
  llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::SmallDenseMap<llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>> const*>(a1, &v10, &v9);
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    unint64_t v21 = v20;
    operator delete(v20);
  }
  if (v16)
  {
    unsigned int v17 = v16;
    operator delete(v16);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  operator delete(v6);
  operator delete(v4);
}

unint64_t mlir::anec::getReferenceFormatIndex(mlir::anec *this, unint64_t a2, unint64_t a3)
{
  if (a2 && (mlir::anec *)(a2 - 1) == this)
  {
    unsigned __int8 v3 = a3 - 1;
    unint64_t v4 = (a3 - 1) & 0xFFFFFFFFFFFFFF00;
    if (!a3)
    {
      unsigned __int8 v3 = 0;
      unint64_t v4 = 0;
    }
    return v4 | v3;
  }
  if (a2 >= 2 && (mlir::anec *)(a2 - 2) == this)
  {
    unsigned __int8 v3 = a3 - 2;
    unint64_t v4 = (a3 - 2) & 0xFFFFFFFFFFFFFF00;
    BOOL v5 = a3 >= 2;
    goto LABEL_12;
  }
  if (a2 >= 3 && (mlir::anec *)(a2 - 3) == this)
  {
    unsigned __int8 v3 = a3 - 3;
    unint64_t v4 = (a3 - 3) & 0xFFFFFFFFFFFFFF00;
    BOOL v5 = a3 >= 3;
LABEL_12:
    if (!v5)
    {
      unsigned __int8 v3 = 0;
      unint64_t v4 = 0;
    }
    return v4 | v3;
  }
  if (a2 >= 4 && (mlir::anec *)(a2 - 4) == this)
  {
    if (a2 >= 5)
    {
      unint64_t v4 = 0;
      unsigned __int8 v3 = a3 > 4;
      return v4 | v3;
    }
LABEL_22:
    unsigned __int8 v3 = 0;
    unint64_t v4 = 0;
    return v4 | v3;
  }
  uint64_t v6 = 0;
  if (a2 >= 5 && (mlir::anec *)(a2 - 5) == this) {
    goto LABEL_22;
  }
  return v6;
}

uint64_t mlir::anec::allElementsOnAxis(uint64_t a1, uint64_t a2, int a3)
{
  v15[0] = a1;
  v15[1] = a2;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v15);
  if (v5)
  {
    uint64_t v6 = Shape;
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    while (1)
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)v15);
      if (v9 && v7 == v9 - 1) {
        break;
      }
      if (v9 >= 2 && v7 == v9 - 2)
      {
        int v11 = 3;
LABEL_12:
        BOOL v12 = 1;
        goto LABEL_13;
      }
      if (v9 >= 3 && v7 == v9 - 3)
      {
        BOOL v12 = 1;
        int v11 = 1;
        goto LABEL_13;
      }
      if (v9 >= 4 && v7 == v9 - 4)
      {
        int v11 = 2 * (v9 > 4);
        goto LABEL_12;
      }
      int v11 = 0;
      BOOL v12 = v9 > 4 && v7 == v9 - 5;
LABEL_13:
      if (*(void *)(v6 + 8 * v7) != 1)
      {
        uint64_t result = 0;
        if (!v12 || v11 != a3) {
          return result;
        }
      }
      ++v7;
      v8 -= 8;
      if (!v8) {
        return 1;
      }
    }
    int v11 = 4;
    goto LABEL_12;
  }
  return 1;
}

uint64_t mlir::anec::verifyCompatibilityWithFlatten(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a1;
  v19[1] = a2;
  v18[0] = a3;
  v18[1] = a4;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v19);
  if (result)
  {
    uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v18);
    if (result)
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)v19);
      uint64_t v6 = v5;
      mlir::ShapedType::getShape((mlir::ShapedType *)v18);
      if (v6 == v7
        && (mlir::ShapedType::getShape((mlir::ShapedType *)v19), v8 <= 4)
        && (mlir::ShapedType::getShape((mlir::ShapedType *)v19), v9 >= 4)
        && (uint64_t v10 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v19),
            v10 == *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)v18))
        && (uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v19),
            uint64_t NumElements = mlir::ShapedType::getNumElements(Shape, v12),
            uint64_t v14 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v18),
            NumElements == mlir::ShapedType::getNumElements(v14, v15)))
      {
        v17[0] = mlir::ShapedType::getShape((mlir::ShapedType *)v18);
        v17[1] = v16;
        return llvm::any_of<llvm::detail::zippy<llvm::detail::zip_enumerator,llvm::detail::index_stream,llvm::ArrayRef<long long>>,mlir::anec::verifyCompatibilityWithFlatten(mlir::ShapedType,mlir::ShapedType)::$_0>(v17, (mlir::ShapedType *)v18) ^ 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::any_of<llvm::detail::zippy<llvm::detail::zip_enumerator,llvm::detail::index_stream,llvm::ArrayRef<long long>>,mlir::anec::verifyCompatibilityWithFlatten(mlir::ShapedType,mlir::ShapedType)::$_0>(uint64_t *a1, mlir::ShapedType *this)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = 8 * v2;
  while (1)
  {
    mlir::ShapedType::getShape(this);
    if (v7)
    {
      if (v4 == v7 - 1) {
        break;
      }
    }
    if (v7 >= 2 && v4 == v7 - 2) {
      break;
    }
    if (v7 >= 3 && v4 == v7 - 3) {
      goto LABEL_4;
    }
    if (v7 >= 4 && v4 == v7 - 4)
    {
      if (v7 < 5) {
        goto LABEL_4;
      }
      break;
    }
    if (v7 < 5 || v4 != v7 - 5)
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      return 0;
    }
LABEL_4:
    ++v4;
    v6 -= 8;
    if (!v6) {
      return 0;
    }
  }
  if (*(void *)(v5 + 8 * v4) == 1) {
    goto LABEL_4;
  }
  return 1;
}

uint64_t mlir::anec::verifyCompatibilityWithUnflatten(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::anec::verifyCompatibilityWithFlatten(a3, a4, a1, a2);
}

void *llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::SmallDenseMap<llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>> const*>(void *a1, void *a2, void *a3)
{
  unint64_t v6 = ((uint64_t)(*a3 - *a2) >> 5) | ((unint64_t)((uint64_t)(*a3 - *a2) >> 5) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  uint64_t v9 = (HIDWORD(v8) | v8) + 1;
  uint64_t v10 = a1 + 1;
  if (v9 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    buffer = llvm::allocate_buffer(32 * ((HIDWORD(v8) | v8) + 1), (std::align_val_t)8uLL);
    a1[1] = buffer;
    a1[2] = v9;
    int v12 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (char *)&buffer[4 * v9];
      goto LABEL_6;
    }
  }
  uint64_t v13 = (char *)(a1 + 17);
  buffer = v10;
LABEL_6:
  unint64_t v14 = v13 - (char *)buffer - 32;
  if (v14 < 0x20)
  {
    uint64_t v15 = (char *)buffer;
    do
    {
LABEL_11:
      *(void *)uint64_t v15 = -1;
      v15 += 32;
    }
    while (v15 != v13);
    goto LABEL_12;
  }
  uint64_t v16 = (v14 >> 5) + 1;
  uint64_t v15 = (char *)&buffer[4 * (v16 & 0xFFFFFFFFFFFFFFELL)];
  unsigned int v17 = buffer + 4;
  uint64_t v18 = v16 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v17 - 4) = -1;
    *unsigned int v17 = -1;
    v17 += 8;
    v18 -= 2;
  }
  while (v18);
  if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL)) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v19 = (void *)*a2;
  for (i = (void *)*a3; v19 != i; v19 += 4)
  {
    if (*(unsigned char *)a1)
    {
      int v21 = 4;
      unint64_t v22 = v10;
    }
    else
    {
      int v21 = *((_DWORD *)a1 + 4);
      if (!v21)
      {
        uint64_t v27 = 0;
LABEL_21:
        llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::InsertIntoBucket<unsigned long long const&,std::vector<mlir::anec::KernelDim> const&>((uint64_t)a1, v27, v19, (uint64_t)(v19 + 1));
        continue;
      }
      unint64_t v22 = (void *)a1[1];
    }
    int v23 = v21 - 1;
    uint64_t v24 = (37 * *v19) & v23;
    uint64_t v25 = &v22[4 * v24];
    uint64_t v26 = *v25;
    if (*v19 != *v25)
    {
      uint64_t v28 = 0;
      int v29 = 1;
      while (v26 != -1)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v26 == -2;
        }
        if (v30) {
          uint64_t v28 = v25;
        }
        int v31 = v24 + v29++;
        uint64_t v24 = v31 & v23;
        uint64_t v25 = &v22[4 * v24];
        uint64_t v26 = *v25;
        if (*v19 == *v25) {
          goto LABEL_16;
        }
      }
      if (v28) {
        uint64_t v27 = v28;
      }
      else {
        uint64_t v27 = v25;
      }
      goto LABEL_21;
    }
LABEL_16:
    ;
  }
  return a1;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::InsertIntoBucket<unsigned long long const&,std::vector<mlir::anec::KernelDim> const&>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::grow(a1, v10);
  uint64_t v17 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v18 = 4;
  }
  else
  {
    int v18 = *(_DWORD *)(a1 + 16);
    if (!v18)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v17 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v19 = v18 - 1;
  uint64_t v20 = (37 * *a3) & v19;
  a2 = (void *)(v17 + 32 * v20);
  uint64_t v21 = *a2;
  if (*a3 != *a2)
  {
    unint64_t v22 = 0;
    int v23 = 1;
    while (v21 != -1)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -2;
      }
      if (v24) {
        unint64_t v22 = a2;
      }
      int v25 = v20 + v23++;
      uint64_t v20 = v25 & v19;
      a2 = (void *)(v17 + 32 * v20);
      uint64_t v21 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v22) {
      a2 = v22;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  int v12 = *(const void **)a4;
  int64_t v13 = *(void *)(a4 + 8) - *(void *)a4;
  if (v13)
  {
    if (v13 < 0) {
      abort();
    }
    unint64_t v14 = (char *)operator new(v13);
    a2[1] = v14;
    a2[2] = v14;
    uint64_t v15 = &v14[4 * (v13 >> 2)];
    a2[3] = v15;
    memcpy(v14, v12, v13);
    a2[2] = v15;
  }
  return a2;
}

void llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::grow(uint64_t a1, unsigned int a2)
{
  v18[12] = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(32 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    unint64_t v14 = (char *)(32 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v14[(void)v6]);
    llvm::deallocate_buffer((llvm *)v6, v14);
  }
  int v8 = &v15;
  if (*(void *)(a1 + 8) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    long long v16 = *(_OWORD *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = v18;
  }
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *int v8 = v9;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 48);
    v8[3] = *(void *)(a1 + 64);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    v8 += 4;
  }
  unint64_t v10 = *(void *)(a1 + 72);
  if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *int v8 = v10;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 80);
    v8[3] = *(void *)(a1 + 96);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    v8 += 4;
  }
  unint64_t v11 = *(void *)(a1 + 104);
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *int v8 = v11;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 112);
    v8[3] = *(void *)(a1 + 128);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    v8 += 4;
  }
  if (a2 >= 5)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(32 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets((int *)a1, &v15, v8);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    unint64_t v10 = (char *)(a1 + 34);
    unint64_t v9 = a1 + 2;
  }
  else
  {
    uint64_t v8 = a1[4];
    if (!v8) {
      goto LABEL_11;
    }
    unint64_t v9 = (void *)*((void *)a1 + 1);
    unint64_t v10 = (char *)&v9[4 * v8];
  }
  unint64_t v11 = v10 - (char *)v9 - 32;
  if (v11 < 0x20)
  {
    uint64_t v12 = (char *)v9;
    do
    {
LABEL_10:
      *(void *)uint64_t v12 = -1;
      v12 += 32;
    }
    while (v12 != v10);
    goto LABEL_11;
  }
  uint64_t v13 = (v11 >> 5) + 1;
  uint64_t v12 = (char *)&v9[4 * (v13 & 0xFFFFFFFFFFFFFFELL)];
  unint64_t v14 = v9 + 4;
  uint64_t v15 = v13 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v14 - 4) = -1;
    *unint64_t v14 = -1;
    v14 += 8;
    v15 -= 2;
  }
  while (v15);
  if (v13 != (v13 & 0xFFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      unint64_t v16 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (*(unsigned char *)a1)
        {
          int v18 = 4;
          uint64_t v17 = v7;
        }
        else
        {
          uint64_t v17 = (int *)*((void *)a1 + 1);
          int v18 = a1[4];
        }
        int v19 = v18 - 1;
        uint64_t v20 = (v18 - 1) & (37 * v16);
        uint64_t v21 = (unint64_t *)&v17[8 * v20];
        unint64_t v22 = *v21;
        if (v16 != *v21)
        {
          BOOL v24 = 0;
          int v25 = 1;
          while (v22 != -1)
          {
            if (v24) {
              BOOL v26 = 0;
            }
            else {
              BOOL v26 = v22 == -2;
            }
            if (v26) {
              BOOL v24 = v21;
            }
            int v27 = v20 + v25++;
            uint64_t v20 = v27 & v19;
            uint64_t v21 = (unint64_t *)&v17[8 * v20];
            unint64_t v22 = *v21;
            if (v16 == *v21) {
              goto LABEL_19;
            }
          }
          if (v24) {
            uint64_t v21 = v24;
          }
        }
LABEL_19:
        *uint64_t v21 = v16;
        v21[1] = 0;
        v21[2] = 0;
        v21[3] = 0;
        *(_OWORD *)(v21 + 1) = *(_OWORD *)(v4 + 1);
        v21[3] = v4[3];
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = 0;
        *a1 += 2;
        int v23 = (void *)v4[1];
        if (v23)
        {
          v4[2] = (uint64_t)v23;
          operator delete(v23);
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4, char *a5, uint64_t *a6, char *a7)
{
  unint64_t v15 = *(void *)(a1 + 16);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = v15;
  uint64_t v16 = *a2;
  int v25 = 2;
  uint64_t v26 = v16;
  uint64_t v17 = *(unsigned int *)(v13 + 8);
  int v18 = &v25;
  if (v17 >= *(_DWORD *)(v13 + 12))
  {
    unint64_t v22 = v17 + 1;
    BOOL v23 = v14 + 24 * v17 > (unint64_t)&v25;
    if (v14 <= (unint64_t)&v25 && v23)
    {
      BOOL v24 = (char *)&v25 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v22, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      int v18 = (int *)&v24[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v22, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      int v18 = &v25;
    }
  }
  uint64_t v19 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = *((void *)v18 + 2);
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<long long,char const(&)[3],long long,char const(&)[2]>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4, char *a5)
{
  unint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = v11;
  uint64_t v12 = *a2;
  int v21 = 2;
  uint64_t v22 = v12;
  uint64_t v13 = *(unsigned int *)(v9 + 8);
  unint64_t v14 = &v21;
  if (v13 >= *(_DWORD *)(v9 + 12))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v10 + 24 * v13 > (unint64_t)&v21;
    if (v10 <= (unint64_t)&v21 && v19)
    {
      long long v20 = (char *)&v21 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v14 = (int *)&v20[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v14 = &v21;
    }
  }
  uint64_t v15 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<long long,char const(&)[2]>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s)
{
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 16;
  unint64_t v6 = v7;
  uint64_t v8 = *a2;
  int v17 = 2;
  uint64_t v18 = v8;
  uint64_t v9 = *(unsigned int *)(v5 + 8);
  unint64_t v10 = &v17;
  if (v9 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v6 + 24 * v9 > (unint64_t)&v17;
    if (v6 <= (unint64_t)&v17 && v15)
    {
      long long v16 = (char *)&v17 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v10 = (int *)&v16[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v10 = &v17;
    }
  }
  uint64_t v11 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = *((void *)v10 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return a1;
}

uint64_t mlir::getStrideInBytes(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = a1;
  *(_DWORD *)(a2 + 8) = 0;
  if (a3)
  {
    v19[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v20);
    v19[1] = v4;
    if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19)) {
      return 1;
    }
    a1 = v20;
  }
  uint64_t v18 = 0;
  if (!mlir::getStridesAndOffset(a1, a2, &v18)) {
    return 0;
  }
  v19[0] = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v19);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = IntOrFloatBitWidth >> 3;
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v9)
    {
      uint64_t v10 = v9 + 1;
      uint64_t v11 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      long long v12 = &v8[v11];
      uint64_t v13 = v8 + 1;
      uint64_t v14 = v11;
      do
      {
        uint64_t v15 = *v13 * v7;
        *(v13 - 1) *= v7;
        *uint64_t v13 = v15;
        v13 += 2;
        v14 -= 2;
      }
      while (v14);
      if (v10 == v11) {
        return 1;
      }
    }
    else
    {
      long long v12 = *(void **)a2;
    }
    int v17 = &v8[v6];
    do
      *v12++ *= v7;
    while (v12 != v17);
  }
  return 1;
}

uint64_t mlir::inferReturnTypesEqualToNthArgumentType(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  v16[23] = *MEMORY[0x263EF8340];
  v14[0] = a4;
  v14[1] = a5;
  if (a5 <= a10)
  {
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v15);
      if (v15) {
        mlir::Diagnostic::operator<<((uint64_t)v16, "invalid number of operands");
      }
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
      if (v15) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(mlir::ValueRange::dereference_iterator(v14, a10) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v11 = *(unsigned int *)(a9 + 8);
    if (v11 >= *(_DWORD *)(a9 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(a9 + 8);
    }
    *(void *)(*(void *)a9 + 8 * v11) = v10;
    ++*(_DWORD *)(a9 + 8);
    return 1;
  }
  return v12;
}

uint64_t mlir::inferReturnTypesEqualToFirstArgumentType(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return mlir::inferReturnTypesEqualToNthArgumentType(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
}

uint64_t mlir::inferReductionOpReturnShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  v40[6] = *MEMORY[0x263EF8340];
  uint64_t v38 = v40;
  uint64_t v39 = 0x600000000;
  if (mlir::getPositiveAxes(a5, a6, a4, (uint64_t)&v38, a1, a2, 0))
  {
    char v32 = v34;
    uint64_t v33 = 0x400000000;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v35 = &v36;
    if (v39)
    {
      uint64_t v12 = (uint64_t **)v38;
      uint64_t v13 = 8 * v39;
      do
      {
        uint64_t v14 = *v12++;
        int v31 = v14;
        llvm::SmallSet<long long,4u,std::less<long long>>::insert((uint64_t)&v32, &v31, (uint64_t)v30);
        v13 -= 8;
      }
      while (v13);
    }
    if (a4)
    {
      uint64_t v15 = 0;
      long long v16 = (void *)(a8 + 16);
      do
      {
        if (v37)
        {
          BOOL v19 = v36;
          if (!v36) {
            goto LABEL_7;
          }
          uint64_t v20 = &v36;
          do
          {
            int v21 = v19;
            uint64_t v22 = v20;
            uint64_t v23 = v19[4];
            BOOL v24 = v19 + 1;
            if (v23 >= v15)
            {
              BOOL v24 = v21;
              uint64_t v20 = (void **)v21;
            }
            BOOL v19 = (void *)*v24;
          }
          while (v19);
          if (v20 == &v36) {
            goto LABEL_7;
          }
          if (v23 < v15) {
            int v21 = v22;
          }
          if (v15 < v21[4]) {
            goto LABEL_7;
          }
        }
        else
        {
          if (!v33) {
            goto LABEL_7;
          }
          int v25 = v32;
          uint64_t v26 = 8 * v33;
          while (*v25 != v15)
          {
            ++v25;
            v26 -= 8;
            if (!v26) {
              goto LABEL_7;
            }
          }
          if (!v26)
          {
LABEL_7:
            uint64_t v17 = *(void *)(a3 + 8 * v15);
            unint64_t v18 = *(unsigned int *)(a8 + 8);
            if (v18 >= *(unsigned int *)(a8 + 12)) {
              goto LABEL_29;
            }
            goto LABEL_8;
          }
        }
        if (!a7) {
          goto LABEL_9;
        }
        unint64_t v18 = *(unsigned int *)(a8 + 8);
        uint64_t v17 = 1;
        if (v18 >= *(unsigned int *)(a8 + 12))
        {
LABEL_29:
          int v29 = v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a8, v16, v18 + 1, 8);
          long long v16 = v29;
          unint64_t v18 = *(unsigned int *)(a8 + 8);
        }
LABEL_8:
        *(void *)(*(void *)a8 + 8 * v18) = v17;
        ++*(_DWORD *)(a8 + 8);
LABEL_9:
        ++v15;
      }
      while (v15 != a4);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v35, v36);
    if (v32 != v34) {
      free(v32);
    }
    uint64_t v27 = 1;
  }
  else
  {
    uint64_t v27 = 0;
  }
  if (v38 != v40) {
    free(v38);
  }
  return v27;
}

uint64_t mlir::getElementBitWidth(void *a1)
{
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  uint64_t v6 = ElementTypeOrSelf;
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v2 = ElementTypeOrSelf;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v5 = v2;
  if (!v2) {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v6);
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
  return 2 * mlir::getElementBitWidth(Value);
}

void *mlir::getElementTypeWithLargestPrecision(void **a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8 * a2;
    while (1)
    {
      uint64_t v5 = *(void **)(*(void *)mlir::getElementTypeOrSelf(a1[v3 / 8]) + 136);
      if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        break;
      }
      v3 += 8;
      if (v4 == v3)
      {
        uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf(*a1);
        goto LABEL_9;
      }
    }
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf(*a1);
    if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf(ElementTypeOrSelf) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
LABEL_9:
      while (1)
      {
        uint64_t v8 = (void *)mlir::getElementTypeOrSelf(*a1);
        if (*(_UNKNOWN **)(*v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
          && ElementTypeOrSelf != v8)
        {
          break;
        }
        unint64_t v10 = v8;
        if ((v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (*(void *)(*(void *)mlir::getElementTypeOrSelf(v8)
                                                                                             + 136) == (void)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
          break;
        unint64_t ElementBitWidth = mlir::getElementBitWidth(v10);
        if (ElementBitWidth > mlir::getElementBitWidth(ElementTypeOrSelf)) {
          uint64_t ElementTypeOrSelf = v10;
        }
        ++a1;
        v4 -= 8;
        if (!v4) {
          return ElementTypeOrSelf;
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::isCompatibleWithDenseStorage(uint64_t a1)
{
  uint64_t v7 = a1;
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v6 = v1;
  if (v1)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
    return mlir::isCompatibleWithDenseStorage(Value);
  }
  else
  {
    uint64_t result = mlir::Type::isIntOrFloat((mlir::Type *)&v7);
    if (result)
    {
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v7);
      return IntOrFloatBitWidth == 1 || IntOrFloatBitWidth > 7;
    }
  }
  return result;
}

uint64_t mlir::mps::isMoreSpecializedShape(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2 != a4) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v4 = 8 * a2 - 8;
  do
  {
    uint64_t v5 = v4;
    BOOL v6 = *a1 == *a3 || *a3 == 0x8000000000000000;
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    ++a1;
    ++a3;
    v4 -= 8;
  }
  while (v5);
  return v7;
}

uint64_t mlir::mps::areMoreSpecializedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 != a4) {
    return 0;
  }
  v16[0] = &unk_26C38CB68;
  v16[1] = a5;
  uint64_t v17 = v16;
  if (!a2)
  {
    uint64_t v12 = 1;
LABEL_15:
    (*(void (**)(void *))(v16[0] + 32))(v16);
    return v12;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a2 - 1;
  do
  {
    unint64_t v9 = mlir::TypeRange::dereference_iterator(a1, v7);
    unint64_t v14 = mlir::TypeRange::dereference_iterator(a3, v7);
    unint64_t v15 = v9;
    if (!v17) {
      std::__throw_bad_function_call[abi:nn180100]();
    }
    uint64_t v10 = (*(uint64_t (**)(void *, unint64_t *, unint64_t *))(*v17 + 48))(v17, &v15, &v14);
    if (v10) {
      BOOL v11 = v8 == v7;
    }
    else {
      BOOL v11 = 1;
    }
    ++v7;
  }
  while (!v11);
  uint64_t v12 = v10;
  if (v17 == v16) {
    goto LABEL_15;
  }
  if (v17) {
    (*(void (**)(void))(*v17 + 40))();
  }
  return v12;
}

void std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
}

void *std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C38CB68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C38CB68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v4 = *a3;
  v24[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(*a2);
  v24[1] = v5;
  BOOL v6 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v4);
  v23[0] = v6;
  v23[1] = v7;
  if (v24[0]) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v24);
  uint64_t v25 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
  uint64_t v26 = OperandRange;
  uint64_t v11 = *(void *)(v9 + 24);
  if (!v11)
  {
    uint64_t v22 = (mlir::mps::MPSDialect *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::mps::MPSDialect::initialize(v22);
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v26, &v25)) {
    return 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v23)) {
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v24)) {
    return 0;
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v24);
  uint64_t v14 = v13;
  unint64_t v15 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v23);
  if (v14 != v16) {
    return 0;
  }
  if (!v14) {
    return 1;
  }
  uint64_t v17 = 8 * v14 - 8;
  do
  {
    uint64_t v18 = v17;
    BOOL v19 = *Shape == *v15 || *v15 == 0x8000000000000000;
    uint64_t v20 = v19;
    if (!v19) {
      break;
    }
    ++Shape;
    ++v15;
    v17 -= 8;
  }
  while (v18);
  return v20;
}

void mlir::mps::MPSDialect::initialize(mlir::mps::MPSDialect *this)
{
}

void _ZN4mlir7Dialect13addOperationsIJNS_3mps6ACosOpENS2_7ACoshOpENS2_6ASinOpENS2_7ASinhOpENS2_7ATan2OpENS2_6ATanOpENS2_7ATanhOpENS2_10AbsoluteOpENS2_16AbsoluteSquareOpENS2_5AddOpENS2_5AndOpENS2_16AssignVariableOpENS2_10BandPartOpENS2_14BatchToSpaceOpENS2_13BiasAddGradOpENS2_9BiasAddOpENS2_12BitwiseAndOpENS2_18BitwiseLeftShiftOpENS2_12BitwiseNotOpENS2_11BitwiseOrOpENS2_17BitwisePopcountOpENS2_19BitwiseRightShiftOpENS2_12BitwiseXorOpENS2_23BroadcastGradientArgsOpENS2_13BroadcastToOpENS2_6CallOpENS2_6CastOpENS2_6CeilOpENS2_7ClampOpENS2_9ColToImOpENS2_8ConcatOpENS2_11ConjugateOpENS2_10ConstantOpENS2_20Conv2DDataGradientOpENS2_8Conv2DOpENS2_23Conv2DWeightsGradientOpENS2_20Conv3DDataGradientOpENS2_8Conv3DOpENS2_23Conv3DWeightsGradientOpENS2_5CosOpENS2_6CoshOpENS2_12CostVolumeOpENS2_15CreateComplexOpENS2_21CreateTextureTensorOpENS2_6CropOpENS2_12CropResizeOpENS2_19CumulativeMaximumOpENS2_19CumulativeMinimumOpENS2_19CumulativeProductOpENS2_15CumulativeSumOpENS2_9DegammaOpENS2_16DepthToSpace2DOpENS2_29DepthwiseConv2DDataGradientOpENS2_17DepthwiseConv2DOpENS2_32DepthwiseConv2DWeightsGradientOpENS2_29DepthwiseConv3DDataGradientOpENS2_17DepthwiseConv3DOpENS2_32DepthwiseConv3DWeightsGradientOpENS2_15DequantizeLUTOpENS2_12DequantizeOpENS2_15DimensionSizeOpENS2_7DiracOpENS2_8DivideOpENS2_18DynamicShapeCastOpENS2_5EluOpENS2_9EqualToOpENS2_5ErfOpENS2_12ExpandDimsOpENS2_16ExponentBase10OpENS2_15ExponentBase2OpENS2_10ExponentOpENS2_22FastFourierTransformOpENS2_11Flatten2DOpENS2_13FloorDivideOpENS2_7FloorOpENS2_13GRUGradientOpENS2_5GRUOpENS2_17GatherAlongAxisOpENS2_10GatherNDOpENS2_8GatherOpENS2_6GeluOpENS2_10GetCoordOpENS2_13GreaterThanOpENS2_22GreaterThanOrEqualToOpENS2_17HammingDistanceOpENS2_20HermiteanToRealFFTOpENS2_10IdentityOpENS2_9ImToColOpENS2_15ImaginaryPartOpENS2_23InitRandomPhiloxStateOpENS2_14InstanceNormOpENS2_10IsFiniteOpENS2_12IsInfiniteOpENS2_7IsNaNOpENS2_8LPNormOpENS2_14LSTMGradientOpENS2_6LSTMOpENS2_11LeakyReluOpENS2_10LessThanOpENS2_19LessThanOrEqualToOpENS2_30LocalConvolutionDataGradientOpENS2_18LocalConvolutionOpENS2_32LocalConvolutionWeightGradientOpENS2_17LogarithmBase10OpENS2_16LogarithmBase2OpENS2_11LogarithmOpENS2_8MatMulOpENS2_25MaterializeSparseTensorOpENS2_23MatrixDecompositionLUOpENS2_15MatrixInverseOpENS2_16MatrixSolverLUOpENS2_9MaximumOpENS2_9MinimumOpENS2_8ModuloOpENS2_10MultiplyOpENS2_7NReluOpENS2_6NandOpENS2_10NegativeOpENS2_23NonMaximumSuppressionOpENS2_9NonZeroOpENS2_5NorOpENS2_15NormalizationOpENS2_12NotEqualToOpENS2_5NotOpENS2_8OneHotOpENS2_4OrOpENS2_7PReluOpENS2_13PadGradientOpENS2_5PadOpENS2_9PermuteOpENS2_13PlaceholderOpENS2_17PoolAvgGradientOpENS2_9PoolAvgOpENS2_20PoolL2NormGradientOpENS2_12PoolL2NormOpENS2_17PoolMaxGradientOpENS2_9PoolMaxOpENS2_7PowerOpENS2_17PruningGradientOpENS2_9PruningOpENS2_10QuantizeOpENS2_14RandomNormalOpENS2_23RandomTruncatedNormalOpENS2_15RandomUniformOpENS2_6RankOpENS2_18ReadDataFromFileOpENS2_14ReadVariableOpENS2_10RealPartOpENS2_20RealToHermiteanFFTOpENS2_12ReciprocalOpENS2_22ReciprocalSquareRootOpENS2_14ReductionAndOpENS2_17ReductionArgMaxOpENS2_17ReductionArgMinOpENS2_20ReductionLogSumExpOpENS2_14ReductionMaxOpENS2_15ReductionMeanOpENS2_14ReductionMinOpENS2_13ReductionOrOpENS2_15ReductionProdOpENS2_14ReductionSumOpENS2_19ReductionVarianceOpENS2_17ReinterpretCastOpENS2_7Relu6OpENS2_10ReluGradOpENS2_6ReluOpENS2_9ReshapeOpENS2_16ResizeGradientOpENS2_8ResizeOpENS2_9ReverseOpENS2_6RintOpENS2_7RoundOpENS2_24SampleGridDataGradientOpENS2_12SampleGridOpENS2_18ScatterAlongAxisOpENS2_11ScatterNDOpENS2_9ScatterOpENS2_8SelectOpENS2_7ShapeOpENS2_17SigmoidGradientOpENS2_28SigmoidGradientWithSigmoidOpENS2_13SigmoidHardOpENS2_9SigmoidOpENS2_6SignOpENS2_9SignbitOpENS2_5SinOpENS2_23SingleGateRNNGradientOpENS2_15SingleGateRNNOpENS2_6SinhOpENS2_6SizeOpENS2_7SliceOpENS2_9SoftmaxOpENS2_10SoftplusOpENS2_20SoftplusParametricOpENS2_10SoftsignOpENS2_6SortOpENS2_14SpaceToBatchOpENS2_16SpaceToDepth2DOpENS2_7SplitOpENS2_8SquareOpENS2_12SquareRootOpENS2_9SqueezeOpENS2_9StencilOpENS2_22StridedSliceGradientOpENS2_14StridedSliceOpENS2_20StridedSliceUpdateOpENS2_10SubtractOpENS2_7SwishOpENS2_5TanOpENS2_6TanhOpENS2_14TileGradientOpENS2_6TileOpENS2_14TopKGradientOpENS2_6TopKOpENS2_11TransposeOpENS2_10TruncateOpENS2_16TypeConstraintOpENS2_16UnrealizedFoldOpENS2_19UpdateRandomStateOpENS2_20VariableFromTensorOpENS2_6XnorOpENS2_5XorOpEEEEvv()
{
}

void mlir::Dialect::addOperations<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::ForOp,mlir::mps::serialization::IfOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp,mlir::mps::serialization::FuncOp,mlir::mps::serialization::ModuleOp,mlir::mps::serialization::ReturnOp,mlir::mps::serialization::WhileOp,mlir::mps::serialization::YieldOp>()
{
}

void mlir::Dialect::addAttributes<mlir::mps::TensorDataLayoutAttr,mlir::mps::ReductionModeAttr,mlir::mps::DeviceHintAttr,mlir::mps::ScatterModeAttr,mlir::mps::PaddingModeAttr,mlir::mps::SamplingModeAttr,mlir::mps::NearestRoundingModeAttr,mlir::mps::SparseTensorStorageAttr,mlir::mps::MetalPixelFormatAttr,mlir::mps::NormalSamplingMethodAttr,mlir::mps::PaddingStyleAttr,mlir::mps::PoolIndicesModeAttr,mlir::mps::RNNActivationAttr,mlir::mps::LSTMGateLayoutAttr,mlir::mps::GRUGateLayoutAttr,mlir::mps::StencilPaddingModeAttr,mlir::mps::CropResizeAlignmentModeAttr,mlir::mps::CropResizeCoordinateModeAttr,mlir::mps::PruningMetricAttr,mlir::mps::PruningStructureAttr,mlir::mps::SimilarityTypeAttr,mlir::mps::FFTScalingModeAttr,mlir::mps::MPSBufferTensorAttr,mlir::mps::CallInlineModeAttr>(uint64_t a1)
{
}

void mlir::Dialect::addInterfaces<mlir::mps::MPSInlinerInterface,mlir::mps::MPSBytecodeDialectInterface>()
{
}

void mlir::Dialect::addInterface<mlir::mps::MPSOpAsmInterface,mlir::mps::MPSResourceBlobManagerInterface &>()
{
}

ZinIrHalH13g *mlir::mps::MPSDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a3 + 8))
  {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a3 + 8);
    uint64_t v10 = a3;
    uint64_t v11 = v8;
    if (a3) {
      return mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v12, &v10);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  return 0;
}

uint64_t mlir::mps::createBlobHandle@<X0>(mlir::mps *this@<X0>, mlir::MLIRContext *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  Manager = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::mps::MPSResourceBlobManagerInterface::getManager(this, a2);
  mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(Manager, (uint64_t)a2, a3, (uint64_t)&v22);
  long long v15 = v22;
  uint64_t v16 = v23;
  unint64_t v19 = v26;
  if (v26 >= 8)
  {
    if ((v26 & 2) != 0 && (v26 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v26 & 0xFFFFFFFFFFFFFFF8) + 8))(&v17, &v24);
    }
    else
    {
      long long v17 = v24;
      unint64_t v18 = v25;
    }
    unint64_t v26 = 0;
  }
  char v20 = v27;
  char v21 = 1;
  uint64_t result = mlir::mps::MPSResourceBlobManagerInterface::insert((uint64_t)Manager, (int8x16_t *)"tmp", (const unsigned __int8 *)3, (uint64_t)&v15, a4);
  if (v21 && v19 >= 8)
  {
    uint64_t v9 = (v19 & 2) != 0 ? &v17 : (long long *)v17;
    uint64_t result = (*(uint64_t (**)(long long *, void, void, uint64_t))(v19 & 0xFFFFFFFFFFFFFFF8))(v9, v15, *((void *)&v15 + 1), v16);
    char v10 = v19;
    if (v19 >= 8)
    {
      if ((v19 & 4) != 0)
      {
        if ((v19 & 2) != 0) {
          uint64_t v11 = &v17;
        }
        else {
          uint64_t v11 = (long long *)v17;
        }
        uint64_t result = (*(uint64_t (**)(long long *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
      }
      if ((v10 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v17, *((void **)&v17 + 1));
      }
    }
  }
  if (v26 >= 8)
  {
    uint64_t v12 = (v26 & 2) != 0 ? &v24 : (long long *)v24;
    uint64_t result = (*(uint64_t (**)(long long *, void, void, uint64_t))(v26 & 0xFFFFFFFFFFFFFFF8))(v12, v22, *((void *)&v22 + 1), v23);
    char v13 = v26;
    if (v26 >= 8)
    {
      if ((v26 & 4) != 0)
      {
        if ((v26 & 2) != 0) {
          uint64_t v14 = &v24;
        }
        else {
          uint64_t v14 = (long long *)v24;
        }
        uint64_t result = (*(uint64_t (**)(long long *))((v26 & 0xFFFFFFFFFFFFFFF8) + 16))(v14);
      }
      if ((v13 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v24, *((void **)&v24 + 1));
      }
    }
  }
  return result;
}

uint64_t mlir::mps::getBufferTensorAttr(void *a1)
{
  unint64_t v18 = a1;
  uint64_t Context = (mlir::mps *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v2 = (uint64_t)v18;
  if (v18) {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v18);
  *(void *)&long long v19 = RHS;
  BOOL v6 = *(void **)(*(void *)RHS + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    if (v6 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v6 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        uint64_t v8 = RHS;
      }
      else {
        uint64_t v8 = 0;
      }
      *(void *)&long long v16 = v8;
      if (!v7)
      {
LABEL_10:
        uint64_t v9 = (mlir::Type *)&v19;
LABEL_19:
        unsigned int v10 = mlir::Type::getIntOrFloatBitWidth(v9) >> 3;
        goto LABEL_20;
      }
LABEL_18:
      v23[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v16);
      uint64_t v9 = (mlir::Type *)v23;
      goto LABEL_19;
    }
    if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v19) >= 8)
    {
      uint64_t v11 = *(void **)(*(void *)v19 + 136);
      BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        uint64_t v13 = v19;
      }
      else {
        uint64_t v13 = 0;
      }
      *(void *)&long long v16 = v13;
      if (!v12) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  unsigned int v10 = 1;
LABEL_20:
  mlir::mps::createBlobHandle(Context, ElementsAttrStorageSize, v10, (uint64_t *)&v16);
  long long v19 = v16;
  uint64_t v20 = v17;
  uint64_t v21 = 0;
  long long v22 = v18;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v23[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v23[1] = Context;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v23, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, (uint64_t *)&v22, &v19, &v21);
}

unint64_t mlir::mps::anonymous namespace'::getElementsAttrStorageSize(uint64_t a1, uint64_t a2)
{
  v13[0] = a1;
  v13[1] = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v13);
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(Shape, v3) + 7) >> 3;
  }
  else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 2))
  {
    uint64_t v5 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v5, v6) + 3) >> 2;
  }
  else if (*(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id {
         || mlir::Type::isInteger((mlir::Type *)&OperandRange, 4))
  }
  {
    BOOL v7 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v7, v8) + 1) >> 1;
  }
  else
  {
    unsigned int v10 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v10, v11) * ElementsAttrElementBitWidth) >> 3;
  }
}

uint64_t mlir::mps::MPSBufferTensorAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v10[1] = a1;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v9, &v6, &v8);
}

uint64_t mlir::mps::getBufferTensorAttr(uint64_t a1, const void *a2, const void *a3)
{
  v8[6] = *MEMORY[0x263EF8340];
  v5[1] = a3;
  uint64_t v6 = a1;
  v5[0] = a2;
  mlir::mps::getBufferTensorAttrs((mlir::Attribute *)&v6, 1uLL, v5, 1, (uint64_t)&v7);
  uint64_t v3 = *(void *)v7;
  if (v7 != v8) {
    free(v7);
  }
  return v3;
}

void mlir::mps::getBufferTensorAttrs(mlir::Attribute *a1@<X0>, unint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v65[10] = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(void *)a5 = a5 + 16;
    *(void *)(a5 + 8) = 0x600000000;
    return;
  }
  uint64_t v8 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext(a1);
  uint64_t v63 = v65;
  uint64_t v64 = 0xA00000000;
  if (a2 <= 0xA)
  {
    uint64_t v60 = v62;
    uint64_t v61 = 0xA00000000;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v65, a2, 8);
    uint64_t v60 = v62;
    uint64_t v61 = 0xA00000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, a2, 16);
  }
  unint64_t v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = 8 * a2;
  BOOL v12 = v8;
  do
  {
    while (1)
    {
      unint64_t v57 = *(void **)v12;
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v57);
      *(void *)&long long v55 = RHS;
      long long v15 = *(void **)(*(void *)RHS + 136);
      if (v15 == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
      {
LABEL_16:
        unsigned int v19 = 1;
        goto LABEL_24;
      }
      if (v15 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v55) < 8) {
          goto LABEL_16;
        }
        uint64_t v20 = *(void **)(*(void *)v55 + 136);
        BOOL v21 = v20 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
        if (v20 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
          uint64_t v22 = v55;
        }
        else {
          uint64_t v22 = 0;
        }
        v59[0] = v22;
        if (v21)
        {
LABEL_22:
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v59);
          p_uint64_t Value = (mlir::Type *)&Value;
          goto LABEL_23;
        }
      }
      else
      {
        BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
        if (v15 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
          uint64_t v17 = RHS;
        }
        else {
          uint64_t v17 = 0;
        }
        v59[0] = v17;
        if (v16) {
          goto LABEL_22;
        }
      }
      p_uint64_t Value = (mlir::Type *)&v55;
LABEL_23:
      unsigned int v19 = mlir::Type::getIntOrFloatBitWidth(p_Value) >> 3;
LABEL_24:
      unint64_t v23 = v19;
      if (v9 <= v19) {
        unint64_t v9 = v19;
      }
      uint64_t v24 = v64;
      if (v64 >= (unint64_t)HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v65, v64 + 1, 8);
        uint64_t v24 = v64;
      }
      unint64_t v25 = ((unint64_t)v10 + v23 - 1) / v23 * v23;
      v63[v24] = v25;
      LODWORD(v64) = v64 + 1;
      uint64_t v26 = v61;
      if (v61 >= (unint64_t)HIDWORD(v61))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, v61 + 1, 16);
        uint64_t v26 = v61;
      }
      char v27 = (mlir::MLIRContext **)((char *)v60 + 16 * v26);
      *char v27 = v10;
      v27[1] = (mlir::MLIRContext *)v25;
      LODWORD(v61) = v61 + 1;
      uint64_t v28 = (uint64_t)v57;
      if (!v57) {
        break;
      }
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v57 + 8);
      BOOL v12 = (mlir::Attribute *)((char *)v12 + 8);
      v11 -= 8;
      if (!v11) {
        goto LABEL_32;
      }
    }
    BOOL v12 = (mlir::Attribute *)((char *)v12 + 8);
    v11 -= 8;
  }
  while (v11);
LABEL_32:
  mlir::mps::createBlobHandle(Context, v10, v9, (uint64_t *)&v55);
  *(void *)a5 = a5 + 16;
  *(void *)(a5 + 8) = 0x600000000;
  if (a2 >= 7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), a2, 8);
  }
  if (a4 && v64)
  {
    int v29 = (void **)v63;
    uint64_t v30 = 8 * v64 - 8;
    uint64_t v31 = 16 * a4 - 16;
    uint64_t v32 = 8 * a2 - 8;
    do
    {
      uint64_t v33 = *(void *)v8;
      long long v53 = v55;
      uint64_t v54 = v56;
      unint64_t v57 = *v29;
      uint64_t Value = v33;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      v59[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
      v59[1] = Context;
      uint64_t v35 = mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v59, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &Value, &v53, (uint64_t *)&v57);
      unint64_t v36 = *(unsigned int *)(a5 + 8);
      if (v36 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v36 + 1, 8);
        unint64_t v36 = *(unsigned int *)(a5 + 8);
      }
      *(void *)(*(void *)a5 + 8 * v36) = v35;
      unsigned int v37 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v37;
      uint64_t v38 = *(void **)(*(void *)a5 + 8 * v37 - 8);
      uint64_t v39 = (void *)v38[1];
      uint64_t v40 = *(void *)(v38[2] + 16);
      uint64_t v41 = v38[5];
      if (v39) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      unint64_t v44 = *a3;
      a3 += 2;
      memcpy((void *)(v40 + v41), v44, ElementsAttrStorageSize);
      if (!v32) {
        break;
      }
      if (!v31) {
        break;
      }
      uint64_t v8 = (mlir::Attribute *)((char *)v8 + 8);
      ++v29;
      uint64_t v45 = v30;
      v30 -= 8;
      v31 -= 16;
      v32 -= 8;
    }
    while (v45);
  }
  unint64_t v46 = (char *)v60;
  if (v61)
  {
    uint64_t v47 = v55;
    unint64_t v48 = (char *)v60 + 16 * v61;
    do
    {
      uint64_t v49 = *(void *)v46;
      uint64_t v50 = *((void *)v46 + 1);
      v46 += 16;
      memset((void *)(*(void *)(v47 + 16) + v49), 255, v50 - v49);
    }
    while (v46 != v48);
    unint64_t v46 = (char *)v60;
  }
  if (v46 != v62) {
    free(v46);
  }
  if (v63 != v65) {
    free(v63);
  }
}

uint64_t mlir::mps::MPSBufferTensorAttr::get(mlir::MLIRContext *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v10[1] = a1;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v9, a3, &v8);
}

uint64_t mlir::mps::MPSBufferTensorAttr::getMutableRawData(mlir::mps::MPSBufferTensorAttr *this)
{
  uint64_t v1 = *(void **)(*(void *)this + 8);
  uint64_t v2 = *(void *)(*(void *)(*(void *)this + 16) + 16);
  uint64_t v3 = *(void *)(*(void *)this + 40);
  if (v1) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  return v2 + v3;
}

llvm::raw_ostream *mlir::mps::operator<<(llvm::raw_ostream *a1, unsigned int *a2)
{
  uint64_t v3 = llvm::raw_ostream::operator<<(a1, a2[2]);
  uint64_t v4 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v4)
  {
    uint64_t v9 = llvm::raw_ostream::write(v3, ".", 1uLL);
    uint64_t v5 = llvm::raw_ostream::operator<<(v9, a2[3]);
    uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) != v6)
    {
LABEL_3:
      *uint64_t v6 = 46;
      ++*((void *)v5 + 4);
      unint64_t v7 = a2[4];
      return llvm::raw_ostream::operator<<(v5, v7);
    }
  }
  else
  {
    *uint64_t v4 = 46;
    ++*((void *)v3 + 4);
    uint64_t v5 = llvm::raw_ostream::operator<<(v3, a2[3]);
    uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) != v6) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = llvm::raw_ostream::write(v5, ".", 1uLL);
  unint64_t v7 = a2[4];

  return llvm::raw_ostream::operator<<(v5, v7);
}

void mlir::mps::MPSDialect::convertUnregisteredOperation(mlir::OpBuilder *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  v37[0] = *(void *)(*(void *)(a3 + 48) + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v37);
  unint64_t v10 = v9;
  if (v9 >= 0x17) {
    size_t v11 = 23;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    if (memcmp(AttrData, "mps.reverse_square_root", v11) || v10 != 23) {
      goto LABEL_9;
    }
  }
  else if (v9 != 23)
  {
LABEL_9:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  int v13 = *(_DWORD *)(a2 + 8);
  if (v13 && (v13 != 1 || *(_DWORD *)(a2 + 12) >= 2u))
  {
    v35[0] = "incorrect version of the operation";
    __int16 v36 = 259;
    mlir::Operation::emitError(a3, (uint64_t)v35, (uint64_t)v37);
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        unint64_t v18 = v43;
        unsigned int v19 = __p;
        if (v43 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unsigned int v19 = __p;
        }
        uint64_t v43 = v17;
        operator delete(v19);
      }
      uint64_t v20 = v40;
      if (!v40) {
        goto LABEL_48;
      }
      BOOL v21 = v41;
      uint64_t v22 = v40;
      if (v41 == v40) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v24 = *--v21;
        uint64_t v23 = v24;
        *BOOL v21 = 0;
        if (v24) {
          MEMORY[0x21667D390](v23, 0x1000C8077774924);
        }
      }
      while (v21 != v20);
      goto LABEL_46;
    }
  }
  else
  {
    if ((*(unsigned char *)(a3 + 46) & 0x80) != 0 && *(_DWORD *)(a3 + 68) == 1)
    {
      uint64_t v14 = *(void *)(a3 + 24);
      v37[0] = *(void *)(*(void *)(a3 + 72) + 24);
      long long v15 = mlir::OpBuilder::create<mlir::mps::ReciprocalSquareRootOp,mlir::Value>(a1, v14, v37);
      if (*(unsigned char *)(a3 + 47))
      {
        v37[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)a3);
        BOOL v16 = (mlir::ArrayAttr *)v37;
      }
      else
      {
        BOOL v16 = (mlir::ArrayAttr *)(a3 + 56);
      }
      uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(v16);
      mlir::Operation::setAttrs((uint64_t)v15, Value, v32);
      uint64_t v33 = *((unsigned int *)v15 + 9);
      unsigned int v34 = (char *)v15 - 16;
      if (!v33) {
        unsigned int v34 = 0;
      }
      *(void *)a4 = v34;
      *(void *)(a4 + 8) = v33;
      *(unsigned char *)(a4 + 16) = 1;
      return;
    }
    v35[0] = "incorrect number of operands";
    __int16 v36 = 259;
    mlir::Operation::emitError(a3, (uint64_t)v35, (uint64_t)v37);
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      unint64_t v25 = __p;
      if (__p)
      {
        uint64_t v26 = v43;
        char v27 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          char v27 = __p;
        }
        uint64_t v43 = v25;
        operator delete(v27);
      }
      uint64_t v20 = v40;
      if (!v40) {
        goto LABEL_48;
      }
      uint64_t v28 = v41;
      uint64_t v22 = v40;
      if (v41 == v40)
      {
LABEL_47:
        uint64_t v41 = v20;
        operator delete(v22);
LABEL_48:
        if (v38 != &v39) {
          free(v38);
        }
        return;
      }
      do
      {
        uint64_t v30 = *--v28;
        uint64_t v29 = v30;
        *uint64_t v28 = 0;
        if (v30) {
          MEMORY[0x21667D390](v29, 0x1000C8077774924);
        }
      }
      while (v28 != v20);
LABEL_46:
      uint64_t v22 = v40;
      goto LABEL_47;
    }
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::ReciprocalSquareRootOp,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v18[38] = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reciprocal_square_root", (const unsigned __int8 *)0x1A, Context);
  if (!v8)
  {
    __int16 v17 = 1283;
    v16[2] = (uint64_t)"mps.reciprocal_square_root";
    void v16[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v15 = 259;
    llvm::operator+(v16, (uint64_t *)&v14, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::mps::ReciprocalSquareRootOp::build(v9, (uint64_t)v18, *a3);
  unint64_t v10 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v10 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v11;
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseUnaryComparisonOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[2] = *MEMORY[0x263EF8340];
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v15 = a1;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v15, 1u);
  uint64_t v7 = mlir::UnrankedTensorType::get(IntegerType);
  if (a3 == 1)
  {
    unint64_t v8 = *(void *)(mlir::ValueRange::dereference_iterator(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v9 = *(void **)(*(void *)v8 + 136);
    if (v9 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v9 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v8 = 0;
    }
    unint64_t v14 = v8;
    if (v8)
    {
      v13[0] = 0;
      v13[16] = 0;
      uint64_t v7 = mlir::TensorType::cloneWith((uint64_t)&v14, (uint64_t)v13, IntegerType);
    }
  }
  uint64_t v11 = *(unsigned int *)(a4 + 8);
  if (v11 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v11) = v7;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseBinaryMathOpReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4)
{
  v21[2] = *MEMORY[0x263EF8340];
  v21[0] = a2;
  v21[1] = a3;
  if (a3 != 2)
  {
LABEL_14:
    uint64_t v13 = mlir::Float32Type::get(this, a2);
    uint64_t v14 = mlir::UnrankedTensorType::get(v13);
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    if (v15 < *(_DWORD *)(a4 + 12))
    {
LABEL_15:
      *(void *)(*(void *)a4 + 8 * v15) = v14;
      ++*(_DWORD *)(a4 + 8);
      return 1;
    }
LABEL_18:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a4 + 8);
    goto LABEL_15;
  }
  uint64_t v6 = mlir::ValueRange::dereference_iterator(v21, 0);
  uint64_t v7 = mlir::ValueRange::dereference_iterator(v21, 1);
  unint64_t v8 = (void *)(*(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  if (v9) {
    uint64_t v9 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else {
    unint64_t v8 = 0;
  }
  v20[0] = v8;
  v20[1] = v9;
  unint64_t v10 = (void *)(*(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
    unint64_t v18 = v10;
    uint64_t v19 = v11;
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    if (!v8) {
      goto LABEL_14;
    }
  }
  if (!v10) {
    goto LABEL_14;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v20)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18) & 1) == 0)
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v20[0]);
    uint64_t v14 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    if (v15 < *(_DWORD *)(a4 + 12)) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  uint64_t BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v20[0], v18, 0);
  if (BroadcastedType)
  {
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a4, BroadcastedType);
    return 1;
  }
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseBinaryComparisonOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v24[2] = *MEMORY[0x263EF8340];
  v24[0] = a3;
  v24[1] = a4;
  if (a4 == 2)
  {
    uint64_t v22 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    BOOL v21 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v24, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v22, v21, 0);
    uint64_t v20 = BroadcastedType;
    if (BroadcastedType)
    {
      uint64_t v9 = BroadcastedType;
      uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v22);
      uint64_t v11 = mlir::IntegerType::get(Context, 1u, 0);
      uint64_t v12 = v11;
      uint64_t v13 = *(void **)(*(void *)v9 + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v16 = mlir::UnrankedTensorType::get(v11);
        if (!v16) {
          return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
        }
      }
      else
      {
        if (v13 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
          return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
        }
        uint64_t v23 = v9;
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
        uint64_t v16 = mlir::RankedTensorType::get(Value, v15, v12, 0);
        if (!v16) {
          return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
        }
      }
      uint64_t v18 = *(unsigned int *)(a5 + 8);
      if (v18 >= *(_DWORD *)(a5 + 12))
      {
        uint64_t v19 = v16;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v18 + 1, 8);
        uint64_t v16 = v19;
        LODWORD(v18) = *(_DWORD *)(a5 + 8);
      }
      *(void *)(*(void *)a5 + 8 * v18) = v16;
      ++*(_DWORD *)(a5 + 8);
      return 1;
    }
    else
    {
      return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v22, " and ", (uint64_t *)&v21, " are not broadcast compatible");
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid number of operands");
  }
}

void mlir::mps::UnrealizedFoldOp::downgradeToVersion(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  v22[0] = &unk_26C37E1B8;
  v22[1] = 0x100000001;
  int v23 = 0;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 && (v5 != 1 || *(_DWORD *)(a2 + 12)))
  {
    uint64_t v6 = *(unsigned int *)(v4 + 36);
    uint64_t v7 = v4 - 16;
    if (!v6) {
      uint64_t v7 = 0;
    }
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v6;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    v16[0] = "failed to downgrade: requested target version is {0}, but the op was first defined in version {1}";
    v16[1] = 97;
    v16[2] = v19;
    void v16[3] = 2;
    v17[0] = &unk_26C35C3D0;
    v17[1] = a2;
    v18[0] = &unk_26C35C460;
    v18[1] = v22;
    v19[0] = v17;
    v19[1] = v18;
    __int16 v21 = 263;
    uint64_t v20 = (void **)v16;
    mlir::OpState::emitOpError(a1, &v20, (uint64_t)v24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      unint64_t v8 = __p;
      if (__p)
      {
        uint64_t v9 = v30;
        unint64_t v10 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          unint64_t v10 = __p;
        }
        uint64_t v30 = v8;
        operator delete(v10);
      }
      uint64_t v11 = v27;
      if (v27)
      {
        uint64_t v12 = v28;
        uint64_t v13 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v15 = *--v12;
            uint64_t v14 = v15;
            *uint64_t v12 = 0;
            if (v15) {
              MEMORY[0x21667D390](v14, 0x1000C8077774924);
            }
          }
          while (v12 != v11);
          uint64_t v13 = v27;
        }
        uint64_t v28 = v11;
        operator delete(v13);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
  }
}

void mlir::mps::ReadDataFromFileOp::downgradeToVersion(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  v22[0] = &unk_26C37E1B8;
  v22[1] = 0x300000001;
  int v23 = 0;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 && (v5 != 1 || *(_DWORD *)(a2 + 12) > 2u))
  {
    uint64_t v14 = *(unsigned int *)(v4 + 36);
    uint64_t v15 = v4 - 16;
    if (!v14) {
      uint64_t v15 = 0;
    }
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v14;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    v16[0] = "failed to downgrade: requested target version is {0}, but the op was first defined in version {1}";
    v16[1] = 97;
    v16[2] = v19;
    void v16[3] = 2;
    v17[0] = &unk_26C35C3D0;
    v17[1] = a2;
    v18[0] = &unk_26C35C460;
    v18[1] = v22;
    v19[0] = v17;
    v19[1] = v18;
    __int16 v21 = 263;
    uint64_t v20 = (void **)v16;
    mlir::OpState::emitOpError(a1, &v20, (uint64_t)v24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      uint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = v30;
        unint64_t v8 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          unint64_t v8 = __p;
        }
        uint64_t v30 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v27;
      if (v27)
      {
        unint64_t v10 = v28;
        uint64_t v11 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v13 = *--v10;
            uint64_t v12 = v13;
            *unint64_t v10 = 0;
            if (v13) {
              MEMORY[0x21667D390](v12, 0x1000C8077774924);
            }
          }
          while (v10 != v9);
          uint64_t v11 = v27;
        }
        uint64_t v28 = v9;
        operator delete(v11);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
  }
}

ZinIrHalH13g *mlir::mps::ReciprocalSquareRootOp::downgradeToVersion@<X0>(ZinIrHalH13g *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(ZinIrHalH13g **)result;
  int v7 = *(_DWORD *)(a3 + 8);
  if (!v7 || v7 == 1 && *(_DWORD *)(a3 + 12) <= 1u)
  {
    uint64_t v8 = *((void *)v6 + 3);
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((ZinIrHalH13g *)((char *)v6 + 24));
    __int16 v29 = 261;
    v28[0] = "mps.reverse_square_root";
    v28[1] = 23;
    uint64_t v10 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v28);
    if ((*((unsigned char *)v6 + 46) & 0x80) != 0)
    {
      uint64_t v11 = *((void *)v6 + 9);
      unint64_t v12 = *((unsigned int *)v6 + 17);
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
    }
    mlir::ValueRange::ValueRange(v32, v11, v12);
    unint64_t v13 = *((unsigned int *)v6 + 9);
    unint64_t v14 = (unint64_t)v6 - 16;
    if (!v13) {
      unint64_t v14 = 0;
    }
    unint64_t AttrDictionary = v14;
    unint64_t v34 = v13;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v25);
    uint64_t NextResultAtOffset = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    if (v26) {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, v26);
    }
    mlir::ValueRange::ValueRange(&AttrDictionary, NextResultAtOffset, v17 - v16);
    mlir::TypeRange::TypeRange(v31, AttrDictionary, v34);
    if (*((unsigned char *)v6 + 47))
    {
      unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
      p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_unint64_t AttrDictionary = (ZinIrHalH13g *)((char *)v6 + 56);
    }
    uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
    uint64_t v21 = v20;
    mlir::SuccessorRange::SuccessorRange(&AttrDictionary, v6);
    mlir::BlockRange::BlockRange(v30, AttrDictionary, v34);
    uint64_t result = mlir::OpBuilder::create(a2, v8, v10, v32[0], v32[1], v31[0], v31[1], v22, Value, v21, v30[0], v30[1], 0, 0);
    uint64_t v6 = result;
  }
  uint64_t v23 = *((unsigned int *)v6 + 9);
  uint64_t v24 = (char *)v6 - 16;
  if (!v23) {
    uint64_t v24 = 0;
  }
  *(void *)a4 = v24;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseTernaryMathOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v17[2] = *MEMORY[0x263EF8340];
  v17[0] = a3;
  v17[1] = a4;
  if (a4 == 3)
  {
    uint64_t v16 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v8 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v14 = v8;
    uint64_t BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(v16, v15, 0);
    if (BroadcastedType)
    {
      uint64_t v10 = mlir::OpTrait::util::getBroadcastedType(BroadcastedType, v8, 0);
      if (v10)
      {
        uint64_t v11 = *(unsigned int *)(a5 + 8);
        if (v11 >= *(_DWORD *)(a5 + 12))
        {
          uint64_t v13 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
          uint64_t v10 = v13;
          LODWORD(v11) = *(_DWORD *)(a5 + 8);
        }
        *(void *)(*(void *)a5 + 8 * v11) = v10;
        ++*(_DWORD *)(a5 + 8);
        return 1;
      }
      else
      {
        return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v16, " , ", (uint64_t *)&v15, " and ", (uint64_t *)&v14, " are not broadcast compatible");
      }
    }
    else
    {
      return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v16, " and ", (uint64_t *)&v15, " are not broadcast compatible");
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid number of operands");
  }
}

uint64_t mlir::mps::SelectOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v23[2] = *MEMORY[0x263EF8340];
  v23[0] = a4;
  v23[1] = a5;
  if (a5 == 3)
  {
    uint64_t v13 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v13;
    uint64_t v21 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v23, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v23, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v21);
    uint64_t BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(v21, v20, ElementTypeOrSelf);
    if (BroadcastedType
      && (uint64_t v16 = mlir::OpTrait::util::getBroadcastedType(BroadcastedType, v13, ElementTypeOrSelf)) != 0)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(unsigned int *)(a11 + 8);
      if (v18 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
        LODWORD(v18) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v18) = v17;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
    else
    {
      return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a2, a3, "input types ", (uint64_t *)&v22, ", ", (uint64_t *)&v21, ", and ", (uint64_t *)&v20, " are not broadcast compatible");
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7, uint64_t *a8, const char *a9)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v25);
  if (v25) {
    mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[4],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>((uint64_t)&v26, a3, a4, a5, a6, a7, a8, a9);
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v25);
  if (v25) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  }
  if (v33)
  {
    uint64_t v16 = __p;
    if (__p)
    {
      uint64_t v17 = v32;
      uint64_t v18 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      uint64_t v32 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v29;
    if (v29)
    {
      uint64_t v20 = v30;
      uint64_t v21 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          *uint64_t v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v29;
      }
      uint64_t v30 = v19;
      operator delete(v21);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  return v15;
}

uint64_t mlir::mps::SelectOp::verify(mlir::mps::SelectOp *this)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(*(void *)this + 72);
  uint64_t v3 = (void *)(*(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *(void *)(v2[11] + 8);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v4);
  uint64_t v74 = mlir::getElementTypeOrSelf(v3);
  if (v74 == ElementTypeOrSelf || mlir::Type::isInteger((mlir::Type *)&v74, 1))
  {
    int v7 = (void *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (mlir::OpTrait::util::getBroadcastedType(v3, v4, ElementTypeOrSelf)
      && mlir::OpTrait::util::getBroadcastedType(v3, v7, ElementTypeOrSelf)
      && mlir::OpTrait::util::getBroadcastedType(v4, v7, ElementTypeOrSelf))
    {
      return 1;
    }
    v72[0] = (void **)"input types ";
    __int16 v73 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v72, (uint64_t)v78);
    if (v78[0])
    {
      uint64_t v9 = &v75;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v3);
      uint64_t v10 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v55 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          int64_t v65 = (char *)&v75 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v55, 24);
          uint64_t v10 = (char *)v79;
          uint64_t v9 = (int *)((char *)v79 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v55, 24);
          uint64_t v9 = &v75;
          uint64_t v10 = (char *)v79;
        }
      }
      uint64_t v11 = &v10[24 * v80];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v80;
      if (v78[0])
      {
        int v75 = 3;
        uint64_t v76 = ", ";
        uint64_t v77 = 2;
        unint64_t v14 = &v75;
        uint64_t v15 = (char *)v79;
        if (v13 >= v81)
        {
          unint64_t v56 = v13 + 1;
          BOOL v57 = (char *)v79 + 24 * v13 > (char *)&v75;
          if (v79 <= &v75 && v57)
          {
            int64_t v66 = (char *)&v75 - (unsigned char *)v79;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v56, 24);
            uint64_t v15 = (char *)v79;
            unint64_t v14 = (int *)((char *)v79 + v66);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v56, 24);
            unint64_t v14 = &v75;
            uint64_t v15 = (char *)v79;
          }
        }
        uint64_t v16 = &v15[24 * v80];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v80;
        if (v78[0])
        {
          uint64_t v18 = &v75;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v4);
          uint64_t v19 = (char *)v79;
          if (v80 >= v81)
          {
            unint64_t v59 = v80 + 1;
            if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
            {
              int64_t v68 = (char *)&v75 - (unsigned char *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
              uint64_t v19 = (char *)v79;
              uint64_t v18 = (int *)((char *)v79 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
              uint64_t v18 = &v75;
              uint64_t v19 = (char *)v79;
            }
          }
          uint64_t v20 = &v19[24 * v80];
          long long v21 = *(_OWORD *)v18;
          *((void *)v20 + 2) = *((void *)v18 + 2);
          *(_OWORD *)uint64_t v20 = v21;
          uint64_t v22 = ++v80;
          if (v78[0])
          {
            int v75 = 3;
            uint64_t v76 = ", and ";
            uint64_t v77 = 6;
            uint64_t v23 = &v75;
            uint64_t v24 = (char *)v79;
            if (v22 >= v81)
            {
              unint64_t v60 = v22 + 1;
              BOOL v61 = (char *)v79 + 24 * v22 > (char *)&v75;
              if (v79 <= &v75 && v61)
              {
                int64_t v69 = (char *)&v75 - (unsigned char *)v79;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
                uint64_t v24 = (char *)v79;
                uint64_t v23 = (int *)((char *)v79 + v69);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
                uint64_t v23 = &v75;
                uint64_t v24 = (char *)v79;
              }
            }
            uint64_t v25 = &v24[24 * v80];
            long long v26 = *(_OWORD *)v23;
            *((void *)v25 + 2) = *((void *)v23 + 2);
            *(_OWORD *)uint64_t v25 = v26;
            ++v80;
            if (v78[0])
            {
              uint64_t v27 = &v75;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v7);
              uint64_t v28 = (char *)v79;
              if (v80 >= v81)
              {
                unint64_t v62 = v80 + 1;
                if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
                {
                  int64_t v70 = (char *)&v75 - (unsigned char *)v79;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                  uint64_t v28 = (char *)v79;
                  uint64_t v27 = (int *)((char *)v79 + v70);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                  uint64_t v27 = &v75;
                  uint64_t v28 = (char *)v79;
                }
              }
              __int16 v29 = &v28[24 * v80];
              long long v30 = *(_OWORD *)v27;
              *((void *)v29 + 2) = *((void *)v27 + 2);
              *(_OWORD *)__int16 v29 = v30;
              uint64_t v31 = ++v80;
              if (v78[0])
              {
                int v75 = 3;
                uint64_t v76 = " are not broadcast compatible";
                uint64_t v77 = 29;
                uint64_t v32 = &v75;
                char v33 = (char *)v79;
                if (v31 >= v81)
                {
                  unint64_t v63 = v31 + 1;
                  BOOL v64 = (char *)v79 + 24 * v31 > (char *)&v75;
                  if (v79 <= &v75 && v64)
                  {
                    int64_t v71 = (char *)&v75 - (unsigned char *)v79;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                    char v33 = (char *)v79;
                    uint64_t v32 = (int *)((char *)v79 + v71);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                    uint64_t v32 = &v75;
                    char v33 = (char *)v79;
                  }
                }
                uint64_t v34 = &v33[24 * v80];
                long long v35 = *(_OWORD *)v32;
                *((void *)v34 + 2) = *((void *)v32 + 2);
                *(_OWORD *)uint64_t v34 = v35;
                ++v80;
              }
            }
          }
        }
      }
    }
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
    if (v78[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
    }
    if (v87)
    {
      __int16 v36 = __p;
      if (__p)
      {
        unsigned int v37 = v86;
        uint64_t v38 = __p;
        if (v86 != __p)
        {
          do
            unsigned int v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          uint64_t v38 = __p;
        }
        v86 = v36;
        operator delete(v38);
      }
      uint64_t v39 = v83;
      if (!v83) {
        goto LABEL_53;
      }
      uint64_t v40 = v84;
      uint64_t v41 = v83;
      if (v84 == v83)
      {
LABEL_52:
        v84 = v39;
        operator delete(v41);
LABEL_53:
        if (v79 != v82) {
          free(v79);
        }
        return v8;
      }
      do
      {
        uint64_t v43 = *--v40;
        uint64_t v42 = v43;
        *uint64_t v40 = 0;
        if (v43) {
          MEMORY[0x21667D390](v42, 0x1000C8077774924);
        }
      }
      while (v40 != v39);
LABEL_51:
      uint64_t v41 = v83;
      goto LABEL_52;
    }
  }
  else
  {
    v72[0] = (void **)"condition operand must be a 1-bit integer tensor or match the value element type, but got ";
    __int16 v73 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v72, (uint64_t)v78);
    if (v78[0])
    {
      char v44 = &v75;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v3);
      uint64_t v45 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v58 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          int64_t v67 = (char *)&v75 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
          uint64_t v45 = (char *)v79;
          char v44 = (int *)((char *)v79 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
          char v44 = &v75;
          uint64_t v45 = (char *)v79;
        }
      }
      unint64_t v46 = &v45[24 * v80];
      long long v47 = *(_OWORD *)v44;
      *((void *)v46 + 2) = *((void *)v44 + 2);
      *(_OWORD *)unint64_t v46 = v47;
      ++v80;
    }
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
    if (v78[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
    }
    if (v87)
    {
      unint64_t v48 = __p;
      if (__p)
      {
        uint64_t v49 = v86;
        uint64_t v50 = __p;
        if (v86 != __p)
        {
          do
            uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          uint64_t v50 = __p;
        }
        v86 = v48;
        operator delete(v50);
      }
      uint64_t v39 = v83;
      if (!v83) {
        goto LABEL_53;
      }
      unint64_t v51 = v84;
      uint64_t v41 = v83;
      if (v84 == v83) {
        goto LABEL_52;
      }
      do
      {
        uint64_t v53 = *--v51;
        uint64_t v52 = v53;
        void *v51 = 0;
        if (v53) {
          MEMORY[0x21667D390](v52, 0x1000C8077774924);
        }
      }
      while (v51 != v39);
      goto LABEL_51;
    }
  }
  return v8;
}

uint64_t mlir::mps::anonymous namespace'::verifyTensorBufferAttr(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  v123 = a3;
  if (!*(unsigned char *)(a4 + 96))
  {
    if ((a6 & 1) == 0)
    {
      a1(v128, a2);
      if (v128[0])
      {
        LODWORD(v125) = 3;
        v126 = "MPSBufferTensor blob entry is undefined";
        uint64_t v127 = 39;
        uint64_t v16 = (char *)&v125;
        long long v17 = (char *)v129;
        if (v130 >= v131)
        {
          unint64_t v99 = v130 + 1;
          if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
          {
            int64_t v115 = (char *)&v125 - (unsigned char *)v129;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v99, 24);
            long long v17 = (char *)v129;
            uint64_t v16 = (char *)v129 + v115;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v99, 24);
            uint64_t v16 = (char *)&v125;
            long long v17 = (char *)v129;
          }
        }
        uint64_t v18 = &v17[24 * v130];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        ++v130;
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
      if (v128[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
      }
      if (v137)
      {
        long long v21 = __p;
        if (__p)
        {
          uint64_t v22 = v136;
          uint64_t v23 = __p;
          if (v136 != __p)
          {
            do
              uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            uint64_t v23 = __p;
          }
          v136 = v21;
          operator delete(v23);
        }
        uint64_t v24 = v133;
        if (!v133) {
          goto LABEL_106;
        }
        uint64_t v25 = v134;
        long long v26 = v133;
        if (v134 == v133) {
          goto LABEL_105;
        }
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        goto LABEL_104;
      }
      return v20;
    }
    return 1;
  }
  if (!*(unsigned char *)(a4 + 80))
  {
    a1(v128, a2);
    if (v128[0])
    {
      LODWORD(v125) = 3;
      v126 = "MPSBufferTensor blob entry memory was released while still in use";
      uint64_t v127 = 65;
      __int16 v29 = (char *)&v125;
      long long v30 = (char *)v129;
      if (v130 >= v131)
      {
        unint64_t v97 = v130 + 1;
        if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
        {
          int64_t v113 = (char *)&v125 - (unsigned char *)v129;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v97, 24);
          long long v30 = (char *)v129;
          __int16 v29 = (char *)v129 + v113;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v97, 24);
          __int16 v29 = (char *)&v125;
          long long v30 = (char *)v129;
        }
      }
      uint64_t v31 = &v30[24 * v130];
      long long v32 = *(_OWORD *)v29;
      *((void *)v31 + 2) = *((void *)v29 + 2);
      *(_OWORD *)uint64_t v31 = v32;
      ++v130;
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
    if (v128[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
    }
    if (v137)
    {
      char v33 = __p;
      if (__p)
      {
        uint64_t v34 = v136;
        long long v35 = __p;
        if (v136 != __p)
        {
          do
            uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          long long v35 = __p;
        }
        v136 = v33;
        operator delete(v35);
      }
      uint64_t v24 = v133;
      if (!v133) {
        goto LABEL_106;
      }
      __int16 v36 = v134;
      long long v26 = v133;
      if (v134 == v133) {
        goto LABEL_105;
      }
      do
      {
        uint64_t v38 = *--v36;
        uint64_t v37 = v38;
        *__int16 v36 = 0;
        if (v38) {
          MEMORY[0x21667D390](v37, 0x1000C8077774924);
        }
      }
      while (v36 != v24);
      goto LABEL_104;
    }
    return v20;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v9 = *(const char **)(a4 + 24);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v123);
  v128[0] = RHS;
  long long v12 = *(void **)(*(void *)RHS + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id) {
    goto LABEL_46;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v128) >= 8)
    {
      unint64_t v62 = *(void **)(*(void *)v128[0] + 136);
      BOOL v63 = v62 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v62 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        uint64_t v64 = v128[0];
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v125 = v64;
      if (!v63) {
        goto LABEL_9;
      }
      goto LABEL_76;
    }
LABEL_46:
    unsigned int v39 = 1;
    uint64_t v40 = v123;
    if (v123) {
      goto LABEL_78;
    }
LABEL_47:
    if (v41 > v9) {
      goto LABEL_79;
    }
    goto LABEL_48;
  }
  BOOL v13 = v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v14 = RHS;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v125 = v14;
  if (!v13)
  {
LABEL_9:
    p_uint64_t Value = (mlir::Type *)v128;
    goto LABEL_77;
  }
LABEL_76:
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v125);
  p_uint64_t Value = (mlir::Type *)&Value;
LABEL_77:
  unsigned int v39 = mlir::Type::getIntOrFloatBitWidth(p_Value) >> 3;
  uint64_t v40 = v123;
  if (!v123) {
    goto LABEL_47;
  }
LABEL_78:
  uint64_t v65 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v40 + 8);
  if (v41 > v9)
  {
LABEL_79:
    a1(v128, a2);
    if (v128[0])
    {
      LODWORD(v125) = 3;
      v126 = "MPSBufferTensor blob is of size ";
      uint64_t v127 = 32;
      int64_t v66 = (char *)&v125;
      int64_t v67 = (char *)v129;
      if (v130 >= v131)
      {
        unint64_t v98 = v130 + 1;
        if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
        {
          int64_t v114 = (char *)&v125 - (unsigned char *)v129;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v98, 24);
          int64_t v67 = (char *)v129;
          int64_t v66 = (char *)v129 + v114;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v98, 24);
          int64_t v66 = (char *)&v125;
          int64_t v67 = (char *)v129;
        }
      }
      int64_t v68 = &v67[24 * v130];
      long long v69 = *(_OWORD *)v66;
      *((void *)v68 + 2) = *((void *)v66 + 2);
      *(_OWORD *)int64_t v68 = v69;
      uint64_t v70 = ++v130;
      if (v128[0])
      {
        LODWORD(v125) = 5;
        v126 = v9;
        int64_t v71 = (char *)&v125;
        uint64_t v72 = (char *)v129;
        if (v70 >= v131)
        {
          unint64_t v101 = v70 + 1;
          BOOL v102 = (char *)v129 + 24 * v70 > (char *)&v125;
          if (v129 <= &v125 && v102)
          {
            int64_t v117 = (char *)&v125 - (unsigned char *)v129;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v101, 24);
            uint64_t v72 = (char *)v129;
            int64_t v71 = (char *)v129 + v117;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v101, 24);
            int64_t v71 = (char *)&v125;
            uint64_t v72 = (char *)v129;
          }
        }
        __int16 v73 = &v72[24 * v130];
        long long v74 = *(_OWORD *)v71;
        *((void *)v73 + 2) = *((void *)v71 + 2);
        *(_OWORD *)__int16 v73 = v74;
        uint64_t v75 = ++v130;
        if (v128[0])
        {
          LODWORD(v125) = 3;
          v126 = " bytes, expected it to be at least ";
          uint64_t v127 = 35;
          uint64_t v76 = (char *)&v125;
          uint64_t v77 = (char *)v129;
          if (v75 >= v131)
          {
            unint64_t v105 = v75 + 1;
            BOOL v106 = (char *)v129 + 24 * v75 > (char *)&v125;
            if (v129 <= &v125 && v106)
            {
              int64_t v119 = (char *)&v125 - (unsigned char *)v129;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v105, 24);
              uint64_t v77 = (char *)v129;
              uint64_t v76 = (char *)v129 + v119;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v105, 24);
              uint64_t v76 = (char *)&v125;
              uint64_t v77 = (char *)v129;
            }
          }
          int v78 = &v77[24 * v130];
          long long v79 = *(_OWORD *)v76;
          *((void *)v78 + 2) = *((void *)v76 + 2);
          *(_OWORD *)int v78 = v79;
          uint64_t v80 = ++v130;
          if (v128[0])
          {
            LODWORD(v125) = 5;
            v126 = v41;
            unsigned int v81 = (char *)&v125;
            v82 = (char *)v129;
            if (v80 >= v131)
            {
              unint64_t v109 = v80 + 1;
              BOOL v110 = (char *)v129 + 24 * v80 > (char *)&v125;
              if (v129 <= &v125 && v110)
              {
                int64_t v121 = (char *)&v125 - (unsigned char *)v129;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v109, 24);
                v82 = (char *)v129;
                unsigned int v81 = (char *)v129 + v121;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v109, 24);
                unsigned int v81 = (char *)&v125;
                v82 = (char *)v129;
              }
            }
            v83 = &v82[24 * v130];
            long long v84 = *(_OWORD *)v81;
            *((void *)v83 + 2) = *((void *)v81 + 2);
            *(_OWORD *)v83 = v84;
            uint64_t v85 = ++v130;
            if (v128[0])
            {
              LODWORD(v125) = 3;
              v126 = " bytes";
              uint64_t v127 = 6;
              v86 = (char *)&v125;
              char v87 = (char *)v129;
              if (v85 >= v131)
              {
                unint64_t v111 = v85 + 1;
                BOOL v112 = (char *)v129 + 24 * v85 > (char *)&v125;
                if (v129 <= &v125 && v112)
                {
                  int64_t v122 = (char *)&v125 - (unsigned char *)v129;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v111, 24);
                  char v87 = (char *)v129;
                  v86 = (char *)v129 + v122;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v111, 24);
                  v86 = (char *)&v125;
                  char v87 = (char *)v129;
                }
              }
              uint64_t v88 = &v87[24 * v130];
              long long v89 = *(_OWORD *)v86;
              *((void *)v88 + 2) = *((void *)v86 + 2);
              *(_OWORD *)uint64_t v88 = v89;
              ++v130;
            }
          }
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
    if (v128[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
    }
    if (v137)
    {
      v90 = __p;
      if (__p)
      {
        v91 = v136;
        v92 = __p;
        if (v136 != __p)
        {
          do
            v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
          while (v91 != v90);
          v92 = __p;
        }
        v136 = v90;
        operator delete(v92);
      }
      uint64_t v24 = v133;
      if (!v133) {
        goto LABEL_106;
      }
      v93 = v134;
      long long v26 = v133;
      if (v134 == v133)
      {
LABEL_105:
        v134 = v24;
        operator delete(v26);
LABEL_106:
        if (v129 != v132) {
          free(v129);
        }
        return v20;
      }
      do
      {
        uint64_t v95 = *--v93;
        uint64_t v94 = v95;
        void *v93 = 0;
        if (v95) {
          MEMORY[0x21667D390](v94, 0x1000C8077774924);
        }
      }
      while (v93 != v24);
LABEL_104:
      long long v26 = v133;
      goto LABEL_105;
    }
    return v20;
  }
LABEL_48:
  if (!((v10 + a5) % (unint64_t)v39)) {
    return 1;
  }
  a1(v128, a2);
  if (v128[0])
  {
    LODWORD(v125) = 3;
    v126 = "MPSBufferTensor blob is not aligned to ";
    uint64_t v127 = 39;
    uint64_t v42 = (char *)&v125;
    uint64_t v43 = (char *)v129;
    if (v130 >= v131)
    {
      unint64_t v100 = v130 + 1;
      if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
      {
        int64_t v116 = (char *)&v125 - (unsigned char *)v129;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v100, 24);
        uint64_t v43 = (char *)v129;
        uint64_t v42 = (char *)v129 + v116;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v100, 24);
        uint64_t v42 = (char *)&v125;
        uint64_t v43 = (char *)v129;
      }
    }
    char v44 = &v43[24 * v130];
    long long v45 = *(_OWORD *)v42;
    *((void *)v44 + 2) = *((void *)v42 + 2);
    *(_OWORD *)char v44 = v45;
    uint64_t v46 = ++v130;
    if (v128[0])
    {
      LODWORD(v125) = 5;
      v126 = (const char *)v39;
      long long v47 = (char *)&v125;
      unint64_t v48 = (char *)v129;
      if (v46 >= v131)
      {
        unint64_t v103 = v46 + 1;
        BOOL v104 = (char *)v129 + 24 * v46 > (char *)&v125;
        if (v129 <= &v125 && v104)
        {
          int64_t v118 = (char *)&v125 - (unsigned char *)v129;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v103, 24);
          unint64_t v48 = (char *)v129;
          long long v47 = (char *)v129 + v118;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v103, 24);
          long long v47 = (char *)&v125;
          unint64_t v48 = (char *)v129;
        }
      }
      uint64_t v49 = &v48[24 * v130];
      long long v50 = *(_OWORD *)v47;
      *((void *)v49 + 2) = *((void *)v47 + 2);
      *(_OWORD *)uint64_t v49 = v50;
      uint64_t v51 = ++v130;
      if (v128[0])
      {
        LODWORD(v125) = 3;
        v126 = " bytes";
        uint64_t v127 = 6;
        uint64_t v52 = (char *)&v125;
        uint64_t v53 = (char *)v129;
        if (v51 >= v131)
        {
          unint64_t v107 = v51 + 1;
          BOOL v108 = (char *)v129 + 24 * v51 > (char *)&v125;
          if (v129 <= &v125 && v108)
          {
            int64_t v120 = (char *)&v125 - (unsigned char *)v129;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v107, 24);
            uint64_t v53 = (char *)v129;
            uint64_t v52 = (char *)v129 + v120;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v107, 24);
            uint64_t v52 = (char *)&v125;
            uint64_t v53 = (char *)v129;
          }
        }
        uint64_t v54 = &v53[24 * v130];
        long long v55 = *(_OWORD *)v52;
        *((void *)v54 + 2) = *((void *)v52 + 2);
        *(_OWORD *)uint64_t v54 = v55;
        ++v130;
      }
    }
  }
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
  if (v128[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
  }
  if (v137)
  {
    unint64_t v56 = __p;
    if (__p)
    {
      BOOL v57 = v136;
      unint64_t v58 = __p;
      if (v136 != __p)
      {
        do
          BOOL v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        unint64_t v58 = __p;
      }
      v136 = v56;
      operator delete(v58);
    }
    uint64_t v24 = v133;
    if (!v133) {
      goto LABEL_106;
    }
    unint64_t v59 = v134;
    long long v26 = v133;
    if (v134 == v133) {
      goto LABEL_105;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      *unint64_t v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v24);
    goto LABEL_104;
  }
  return v20;
}

__n128 mlir::mps::MPSBufferTensorAttr::getHandle@<Q0>(__n128 **this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *this;
  __n128 result = (*this)[1];
  *a2 = result;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  return result;
}

void *mlir::mps::ConstantOp::getValue(mlir::mps::ConstantOp *this)
{
  uint64_t Context = (mlir::UnitAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  uint64_t v4 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v4 || (__n128 result = (void *)mlir::UnitAttr::get(Context, v3), (v4 = result) != 0))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    return v4;
  }
  return result;
}

uint64_t mlir::mps::ConstantOp::verify(mlir::mps::ConstantOp *this)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t Context = (mlir::UnitAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  uint64_t v4 = *(uint64_t **)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  if (!v4 && (uint64_t v4 = (uint64_t *)mlir::UnitAttr::get(Context, v3)) == 0
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8))
  {
    v94[0] = (void **)"failed: property must contain a valid ElementsAttr";
    __int16 v95 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)v102);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
    if (v102[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
    }
    if (v111)
    {
      long long v12 = __p;
      if (__p)
      {
        BOOL v13 = v110;
        uint64_t v14 = __p;
        if (v110 != __p)
        {
          do
            BOOL v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        BOOL v110 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v107;
      if (!v107) {
        goto LABEL_107;
      }
      uint64_t v16 = v108;
      long long v17 = v107;
      if (v108 == v107) {
        goto LABEL_106;
      }
      do
      {
        uint64_t v19 = *--v16;
        uint64_t v18 = v19;
        *uint64_t v16 = 0;
        if (v19) {
          MEMORY[0x21667D390](v18, 0x1000C8077774924);
        }
      }
      while (v16 != v15);
      goto LABEL_105;
    }
    return v11;
  }
  uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  v102[0] = v4;
  v102[1] = v5;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v102);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8))
  {
    v92 = 0;
    uint64_t v93 = 0;
LABEL_29:
    v94[0] = (void **)"failed: property contained an non shaped-type attribute";
    __int16 v95 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)v102);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
    if (v102[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
    }
    if (v111)
    {
      uint64_t v20 = __p;
      if (__p)
      {
        long long v21 = v110;
        uint64_t v22 = __p;
        if (v110 != __p)
        {
          do
            long long v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        BOOL v110 = v20;
        operator delete(v22);
      }
      uint64_t v15 = v107;
      if (!v107) {
        goto LABEL_107;
      }
      uint64_t v23 = v108;
      long long v17 = v107;
      if (v108 == v107) {
        goto LABEL_106;
      }
      do
      {
        uint64_t v25 = *--v23;
        uint64_t v24 = v25;
        *uint64_t v23 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v23 != v15);
      goto LABEL_105;
    }
    return v11;
  }
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v92 = Type;
  uint64_t v93 = v7;
  if (!Type) {
    goto LABEL_29;
  }
  if (*(_UNKNOWN **)(*v4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
  {
    v102[0] = this;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v8 = *(void *)this - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
  {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    v90 = v9;
    uint64_t v91 = v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90))
    {
LABEL_53:
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
      long long v35 = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v92);
      v102[0] = OperandRange;
      v94[0] = v35;
      if ((void **)OperandRange == v35) {
        return 1;
      }
      __int16 v36 = v35;
      if (mlir::Type::isF16((mlir::Type *)v102) || mlir::Type::isBF16((mlir::Type *)v102))
      {
        if (mlir::Type::isF32((mlir::Type *)v94)) {
          return 1;
        }
      }
      else if (*(_UNKNOWN **)(*(void *)v102[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id {
             && *((_UNKNOWN **)*v36 + 17) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      }
      {
        uint64_t v98 = v102[0];
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v98);
        if (mlir::Type::isF16((mlir::Type *)&Value))
        {
          v96 = v36;
          uint64_t v97 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v96);
          if (mlir::Type::isF32((mlir::Type *)&v97)) {
            return 1;
          }
        }
      }
      v94[0] = (void **)"invalid element type: constant value ";
      __int16 v95 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)v102);
      if (v102[0])
      {
        p_uint64_t Value = &Value;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v92);
        BOOL v57 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v77 = v104 + 1;
          if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
          {
            int64_t v85 = (char *)&Value - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v77, 24);
            BOOL v57 = (char *)v103;
            p_uint64_t Value = (uint64_t *)((char *)v103 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v77, 24);
            p_uint64_t Value = &Value;
            BOOL v57 = (char *)v103;
          }
        }
        unint64_t v58 = &v57[24 * v104];
        long long v59 = *(_OWORD *)p_Value;
        *((void *)v58 + 2) = p_Value[2];
        *(_OWORD *)unint64_t v58 = v59;
        uint64_t v60 = ++v104;
        if (v102[0])
        {
          LODWORD(Value) = 3;
          unint64_t v100 = " doesn't match op result ";
          uint64_t v101 = 25;
          uint64_t v61 = &Value;
          unint64_t v62 = (char *)v103;
          if (v60 >= v105)
          {
            unint64_t v80 = v60 + 1;
            BOOL v81 = (char *)v103 + 24 * v60 > (char *)&Value;
            if (v103 <= &Value && v81)
            {
              int64_t v87 = (char *)&Value - (unsigned char *)v103;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v80, 24);
              unint64_t v62 = (char *)v103;
              uint64_t v61 = (uint64_t *)((char *)v103 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v80, 24);
              uint64_t v61 = &Value;
              unint64_t v62 = (char *)v103;
            }
          }
          BOOL v63 = &v62[24 * v104];
          long long v64 = *(_OWORD *)v61;
          *((void *)v63 + 2) = v61[2];
          *(_OWORD *)BOOL v63 = v64;
          ++v104;
          if (v102[0])
          {
            uint64_t v65 = &Value;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v90);
            int64_t v66 = (char *)v103;
            if (v104 >= v105)
            {
              unint64_t v83 = v104 + 1;
              if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
              {
                int64_t v89 = (char *)&Value - (unsigned char *)v103;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
                int64_t v66 = (char *)v103;
                uint64_t v65 = (uint64_t *)((char *)v103 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
                uint64_t v65 = &Value;
                int64_t v66 = (char *)v103;
              }
            }
            int64_t v67 = &v66[24 * v104];
            long long v68 = *(_OWORD *)v65;
            *((void *)v67 + 2) = v65[2];
            *(_OWORD *)int64_t v67 = v68;
            ++v104;
          }
        }
      }
      uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
      if (v102[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
      }
      if (v111)
      {
        long long v69 = __p;
        if (__p)
        {
          uint64_t v70 = v110;
          int64_t v71 = __p;
          if (v110 != __p)
          {
            do
              uint64_t v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            int64_t v71 = __p;
          }
          BOOL v110 = v69;
          operator delete(v71);
        }
        uint64_t v15 = v107;
        if (!v107) {
          goto LABEL_107;
        }
        uint64_t v72 = v108;
        long long v17 = v107;
        if (v108 == v107)
        {
LABEL_106:
          BOOL v108 = v15;
          operator delete(v17);
LABEL_107:
          if (v103 != v106) {
            free(v103);
          }
          return v11;
        }
        do
        {
          uint64_t v74 = *--v72;
          uint64_t v73 = v74;
          *uint64_t v72 = 0;
          if (v74) {
            MEMORY[0x21667D390](v73, 0x1000C8077774924);
          }
        }
        while (v72 != v15);
LABEL_105:
        long long v17 = v107;
        goto LABEL_106;
      }
      return v11;
    }
  }
  else
  {
    v90 = 0;
    uint64_t v91 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90)) {
      goto LABEL_53;
    }
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v92);
  uint64_t v28 = v27;
  __int16 v29 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v90);
  if (v28 == v30)
  {
    if (!v28) {
      goto LABEL_53;
    }
    uint64_t v31 = 8 * v28 - 8;
    while (1)
    {
      uint64_t v32 = v31;
      if (*Shape != *v29 && *v29 != 0x8000000000000000) {
        break;
      }
      ++Shape;
      ++v29;
      v31 -= 8;
      if (!v32) {
        goto LABEL_53;
      }
    }
  }
  v94[0] = (void **)"invalid shape: constant value ";
  __int16 v95 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)v102);
  if (v102[0])
  {
    uint64_t v37 = &Value;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v92);
    uint64_t v38 = (char *)v103;
    if (v104 >= v105)
    {
      unint64_t v76 = v104 + 1;
      if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
      {
        int64_t v84 = (char *)&Value - (unsigned char *)v103;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v76, 24);
        uint64_t v38 = (char *)v103;
        uint64_t v37 = (uint64_t *)((char *)v103 + v84);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v76, 24);
        uint64_t v37 = &Value;
        uint64_t v38 = (char *)v103;
      }
    }
    unsigned int v39 = &v38[24 * v104];
    long long v40 = *(_OWORD *)v37;
    *((void *)v39 + 2) = v37[2];
    *(_OWORD *)unsigned int v39 = v40;
    uint64_t v41 = ++v104;
    if (v102[0])
    {
      LODWORD(Value) = 3;
      unint64_t v100 = " is not compatible with op result ";
      uint64_t v101 = 34;
      uint64_t v42 = &Value;
      uint64_t v43 = (char *)v103;
      if (v41 >= v105)
      {
        unint64_t v78 = v41 + 1;
        BOOL v79 = (char *)v103 + 24 * v41 > (char *)&Value;
        if (v103 <= &Value && v79)
        {
          int64_t v86 = (char *)&Value - (unsigned char *)v103;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v78, 24);
          uint64_t v43 = (char *)v103;
          uint64_t v42 = (uint64_t *)((char *)v103 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v78, 24);
          uint64_t v42 = &Value;
          uint64_t v43 = (char *)v103;
        }
      }
      char v44 = &v43[24 * v104];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)char v44 = v45;
      ++v104;
      if (v102[0])
      {
        uint64_t v46 = &Value;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v90);
        long long v47 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v82 = v104 + 1;
          if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
          {
            int64_t v88 = (char *)&Value - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
            long long v47 = (char *)v103;
            uint64_t v46 = (uint64_t *)((char *)v103 + v88);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
            uint64_t v46 = &Value;
            long long v47 = (char *)v103;
          }
        }
        unint64_t v48 = &v47[24 * v104];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)unint64_t v48 = v49;
        ++v104;
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
  if (v102[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
  }
  if (v111)
  {
    long long v50 = __p;
    if (__p)
    {
      uint64_t v51 = v110;
      uint64_t v52 = __p;
      if (v110 != __p)
      {
        do
          uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        uint64_t v52 = __p;
      }
      BOOL v110 = v50;
      operator delete(v52);
    }
    uint64_t v15 = v107;
    if (!v107) {
      goto LABEL_107;
    }
    uint64_t v53 = v108;
    long long v17 = v107;
    if (v108 == v107) {
      goto LABEL_106;
    }
    do
    {
      uint64_t v55 = *--v53;
      uint64_t v54 = v55;
      *uint64_t v53 = 0;
      if (v55) {
        MEMORY[0x21667D390](v54, 0x1000C8077774924);
      }
    }
    while (v53 != v15);
    goto LABEL_105;
  }
  return v11;
}

void *mlir::Type::dyn_cast<mlir::ShapedType>(void **a1)
{
  uint64_t v1 = *a1;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**a1 + 8)) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  return v1;
}

uint64_t mlir::mps::MatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v105 = a4;
  unint64_t v106 = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v97 = a6;
  v98[0] = 0;
  char v99 = 0;
  long long v100 = v16;
  unint64_t v17 = a5;
  uint64_t v101 = a9;
  uint64_t v102 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v97);
    if (v99) {
      char v99 = 0;
    }
    mlir::OperationName::OperationName(v98, "mps.matmul", 10, Context);
    char v99 = 1;
    unint64_t v17 = v106;
  }
  uint64_t v103 = a4;
  unint64_t v104 = a5;
  if (v17 <= 1)
  {
    uint64_t v19 = mlir::Float32Type::get(this, a2);
LABEL_25:
    uint64_t v29 = mlir::UnrankedTensorType::get(v19);
    goto LABEL_26;
  }
  mlir::UnknownLoc::get(this, a2);
  uint64_t v91 = *((void *)&v100 + 1);
  uint64_t v92 = v100;
  if (!(void)v100)
  {
    BOOL Value = 0;
    if (*((void *)&v100 + 1)) {
      goto LABEL_12;
    }
LABEL_14:
    BOOL v21 = 0;
    goto LABEL_15;
  }
  BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v92);
  if (!v91) {
    goto LABEL_14;
  }
LABEL_12:
  BOOL v21 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v91);
LABEL_15:
  uint64_t v22 = (int64x2_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v105, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *(void *)(mlir::ValueRange::dereference_iterator(&v105, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  int64_t v117 = v22;
  unint64_t v118 = v23;
  mlir::ValueRange::ValueRange(v110, (uint64_t)&v117, 2uLL);
  if (*(_UNKNOWN **)(v22->i64[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_24;
  }
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v22->i64[0] + 8))
  {
    uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v22->i64[0] + 8);
    uint64_t v95 = (uint64_t)v22;
    uint64_t v96 = v25;
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
    if (v26) {
      goto LABEL_19;
    }
LABEL_22:
    unint64_t v23 = 0;
    unint64_t v93 = 0;
    uint64_t v94 = v26;
    uint64_t v28 = v95;
    if (v95) {
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
  if (!v26) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
  unint64_t v93 = v23;
  uint64_t v94 = v27;
  uint64_t v28 = v95;
  if (v95) {
    goto LABEL_29;
  }
LABEL_23:
  if (!v23)
  {
LABEL_24:
    uint64_t v19 = v24;
    goto LABEL_25;
  }
LABEL_29:
  if (*(_UNKNOWN **)(*(void *)v28 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)v23 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    char v32 = mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)a2, a3, "invalid input types: ", &v95, ", ", (uint64_t *)&v93);
    uint64_t v29 = 0;
    goto LABEL_32;
  }
  unint64_t v107 = v109;
  uint64_t v108 = 0x400000000;
  uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v95);
  unint64_t v35 = v34;
  __int16 v36 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  int64_t v117 = &v119;
  unint64_t v118 = 0x400000000;
  unint64_t v90 = v37;
  int64_t v114 = v116;
  unint64_t v115 = 0x400000000;
  unint64_t v89 = v35;
  if (v35 == 1)
  {
    uint64_t v38 = *Shape;
    v119.i64[0] = 1;
    v119.i64[1] = v38;
    goto LABEL_38;
  }
  if (!v35)
  {
    int64x2_t v119 = vdupq_n_s64(1uLL);
LABEL_38:
    LODWORD(v118) = 2;
    goto LABEL_39;
  }
  unint64_t v42 = v35;
  size_t v43 = 8 * v35;
  char v111 = v113;
  uint64_t v112 = 0x400000000;
  __src = v36;
  if (v43 < 0x21)
  {
    int v44 = 0;
    long long v45 = v113;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (uint64_t)(8 * v42) >> 3, 8);
    int v44 = v112;
    long long v45 = v111;
  }
  memcpy(&v45[8 * v44], Shape, v43);
  uint64_t v51 = (int64x2_t *)v111;
  unint64_t v52 = v112 + (v43 >> 3);
  LODWORD(v112) = v112 + (v43 >> 3);
  if (v111 != v113)
  {
    if (v117 != &v119)
    {
      free(v117);
      uint64_t v51 = (int64x2_t *)v111;
      LODWORD(v52) = v112;
    }
    int64_t v117 = v51;
    unint64_t v118 = __PAIR64__(HIDWORD(v112), v52);
    char v111 = v113;
    HIDWORD(v112) = 0;
    goto LABEL_80;
  }
  if (v118 >= v52)
  {
    if (v52) {
      memmove(v117, v113, 8 * v52);
    }
    goto LABEL_79;
  }
  if (HIDWORD(v118) >= v52)
  {
    if (v118)
    {
      uint64_t v86 = v118;
      memmove(v117, v113, 8 * v118);
      uint64_t v55 = v86;
      goto LABEL_77;
    }
  }
  else
  {
    LODWORD(v118) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, &v119, v52, 8);
  }
  uint64_t v55 = 0;
LABEL_77:
  if (v55 != v112) {
    memcpy((char *)v117 + 8 * v55, (char *)v111 + 8 * v55, 8 * v112 - 8 * v55);
  }
LABEL_79:
  LODWORD(v118) = v52;
LABEL_80:
  LODWORD(v112) = 0;
  if (v111 != v113) {
    free(v111);
  }
  __int16 v36 = __src;
  unint64_t v37 = v90;
  if (Value)
  {
    unint64_t v56 = &v117->i8[8 * v118];
    *((void *)v56 - 1) = Shape[v43 / 8 - 2];
    *((void *)v56 - 2) = Shape[v43 / 8 - 1];
  }
LABEL_39:
  if (v37 == 1)
  {
    uint64_t v40 = *v36;
    LODWORD(v115) = 0;
    if (HIDWORD(v115) > 1)
    {
      uint64_t v41 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, 2uLL, 8);
      uint64_t v41 = v115;
    }
    long long v49 = &v114[8 * v41];
    *(void *)long long v49 = v40;
    goto LABEL_53;
  }
  if (v37)
  {
    __srca = (char *)v36;
    size_t v46 = 8 * v37;
    char v111 = v113;
    uint64_t v112 = 0x400000000;
    if (8 * v37 < 0x21)
    {
      int v47 = 0;
      unint64_t v48 = v113;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (uint64_t)(8 * v37) >> 3, 8);
      int v47 = v112;
      unint64_t v48 = v111;
    }
    memcpy(&v48[8 * v47], __srca, v46);
    uint64_t v53 = (char *)v111;
    unint64_t v50 = v112 + (v46 >> 3);
    LODWORD(v112) = v112 + (v46 >> 3);
    if (v111 != v113)
    {
      if (v114 != v116)
      {
        free(v114);
        uint64_t v53 = (char *)v111;
        LODWORD(v50) = v112;
      }
      int64_t v114 = v53;
      unint64_t v115 = __PAIR64__(HIDWORD(v112), v50);
      char v111 = v113;
      HIDWORD(v112) = 0;
      goto LABEL_90;
    }
    uint64_t v54 = v115;
    if (v115 >= v50)
    {
      if (v50) {
        memmove(v114, v113, 8 * v50);
      }
      goto LABEL_89;
    }
    if (HIDWORD(v115) >= v50)
    {
      if (v115)
      {
        memmove(v114, v113, 8 * v115);
        goto LABEL_87;
      }
    }
    else
    {
      LODWORD(v115) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v50, 8);
    }
    uint64_t v54 = 0;
LABEL_87:
    if (v54 != v112) {
      memcpy(&v114[8 * v54], (char *)v111 + 8 * v54, 8 * v112 - 8 * v54);
    }
LABEL_89:
    LODWORD(v115) = v50;
LABEL_90:
    LODWORD(v112) = 0;
    if (v111 != v113)
    {
      free(v111);
      LODWORD(v50) = v115;
    }
    if (v21)
    {
      BOOL v57 = &v114[8 * v50];
      *((void *)v57 - 1) = *(void *)&__srca[v46 - 16];
      *((void *)v57 - 2) = *(void *)&__srca[v46 - 8];
    }
    goto LABEL_94;
  }
  LODWORD(v115) = 0;
  if (HIDWORD(v115) > 1)
  {
    uint64_t v39 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, 2uLL, 8);
    uint64_t v39 = v115;
  }
  long long v49 = &v114[8 * v39];
  *(void *)long long v49 = 1;
LABEL_53:
  *((void *)v49 + 1) = 1;
  LODWORD(v50) = v115 + 2;
  LODWORD(v115) = v115 + 2;
LABEL_94:
  LODWORD(v108) = 0;
  if (v118 <= v50)
  {
    unsigned int v58 = 0;
    if (v50)
    {
      unint64_t v62 = (uint64_t *)v114;
      uint64_t v63 = 8 * v50;
      do
      {
        uint64_t v64 = *v62;
        if (v58 >= HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v58 + 1, 8);
          unsigned int v58 = v108;
        }
        *((void *)v107 + v58) = v64;
        unsigned int v58 = v108 + 1;
        LODWORD(v108) = v108 + 1;
        ++v62;
        v63 -= 8;
      }
      while (v63);
    }
  }
  else
  {
    unsigned int v58 = 0;
    long long v59 = (uint64_t *)v117;
    uint64_t v60 = 8 * v118;
    do
    {
      uint64_t v61 = *v59;
      if (v58 >= HIDWORD(v108))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v58 + 1, 8);
        unsigned int v58 = v108;
      }
      *((void *)v107 + v58) = v61;
      unsigned int v58 = v108 + 1;
      LODWORD(v108) = v108 + 1;
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  uint64_t v65 = (char *)v117;
  uint64_t v66 = v118;
  int64_t v67 = &v117->i8[8 * v118];
  long long v68 = v114;
  uint64_t v69 = v115;
  uint64_t v70 = &v114[8 * v115];
  int64_t v71 = v107;
  uint64_t v72 = (char *)v107 + 8 * v58;
  *((void *)v72 - 1) = *((void *)v70 - 1);
  uint64_t v73 = v70 - 16;
  *((void *)v72 - 2) = *((void *)v67 - 2);
  BOOL v74 = v67 - 16 == v65 || v73 == v68;
  if (!v74)
  {
    uint64_t v75 = 8 * v66 - 24;
    unint64_t v76 = &v71[v58 - 3];
    uint64_t v77 = 8 * v69 - 24;
    while (1)
    {
      uint64_t v78 = *(void *)&v65[v75];
      uint64_t v79 = *(void *)&v68[v77];
      if (v78 == 0x8000000000000000)
      {
        if (v79 <= 1) {
          uint64_t v78 = 0x8000000000000000;
        }
        else {
          uint64_t v78 = *(void *)&v68[v77];
        }
      }
      else if (v79 == 0x8000000000000000)
      {
        if (v78 <= 1) {
          uint64_t v78 = 0x8000000000000000;
        }
      }
      else if (v78 != v79 && v79 != 1)
      {
        BOOL v74 = v78 == 1;
        uint64_t v78 = *(void *)&v68[v77];
        if (!v74)
        {
          LODWORD(v108) = 0;
          unsigned __int8 v84 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "incompatible dimensions");
          unsigned __int8 v85 = v84;
          long long v68 = v114;
          uint64_t v83 = v85;
          if (v114 == v116) {
            goto LABEL_132;
          }
LABEL_131:
          free(v68);
          goto LABEL_132;
        }
      }
      *v76-- = v78;
      if (v75)
      {
        v75 -= 8;
        uint64_t v81 = v77;
        v77 -= 8;
        if (v81) {
          continue;
        }
      }
      break;
    }
  }
  if (v89 <= 1)
  {
    uint64_t v82 = *((void *)v72 - 1);
    LODWORD(v108) = --v58;
    v71[v58 - 1] = v82;
  }
  if (v90 <= 1) {
    LODWORD(v108) = v58 - 1;
  }
  uint64_t v83 = 1;
  if (v68 != v116) {
    goto LABEL_131;
  }
LABEL_132:
  if (v117 != &v119) {
    free(v117);
  }
  if (v83)
  {
    uint64_t v29 = mlir::RankedTensorType::get((uint64_t)v107, v108, v24, 0);
    char v32 = 1;
  }
  else
  {
    char v32 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid shape");
    uint64_t v29 = 0;
  }
  if (v107 != v109) {
    free(v107);
  }
LABEL_32:
  if (!v32) {
    return 0;
  }
LABEL_26:
  uint64_t v30 = *(unsigned int *)(a11 + 8);
  if (v30 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v30) = v29;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::defaultInferReturnTypes(mlir::Float32Type *a1, _DWORD *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v7 = mlir::Float32Type::get(a1, (mlir::MLIRContext *)a2);
    uint64_t v4 = mlir::UnrankedTensorType::get(v7);
    unsigned int v5 = a2[2];
    if (v5 < a2[3]) {
      goto LABEL_3;
    }
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 4, v5 + 1, 8);
    unsigned int v5 = a2[2];
    goto LABEL_3;
  }
  uint64_t v4 = mlir::UnrankedTensorType::get(a3);
  unsigned int v5 = a2[2];
  if (v5 >= a2[3]) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*(void *)a2 + 8 * v5) = v4;
  ++a2[2];
  return 1;
}

uint64_t mlir::mps::MatMulOp::verify(mlir::mps::MatMulOp *this)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)this + 72);
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v3)
  {
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8);
  uint64_t v5 = *(void *)(*(void *)this + 72);
  unint64_t v55 = v3;
  uint64_t v56 = v4;
  unint64_t v6 = *(void *)(*(void *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v6 + 8);
LABEL_6:
  v54[0] = v6;
  v54[1] = v7;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return 1;
  }
  uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v55);
  uint64_t v10 = v9;
  long long v12 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v54);
  uint64_t v13 = v11;
  if (!v10)
  {
    uint64_t v14 = 1;
    if (v11) {
      goto LABEL_12;
    }
LABEL_23:
    uint64_t v19 = 1;
    uint64_t v20 = 1;
    if (v14 == 0x8000000000000000) {
      return v20;
    }
    goto LABEL_24;
  }
  if (v10 != 1)
  {
    v60[0] = *(void *)(*(void *)this
                       + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                       + 64);
    uint64_t Shape = &Shape[v10 - 1 + ((uint64_t)mlir::BoolAttr::getValue((mlir::BoolAttr *)v60) << 63 >> 63)];
  }
  uint64_t v14 = *Shape;
  if (!v13) {
    goto LABEL_23;
  }
LABEL_12:
  if (v13 != 1)
  {
    uint64_t v15 = &v12[v13];
    unint64_t v16 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v16 = 0;
    }
    v60[0] = *(void *)(v16 + 8);
    BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)v60);
    uint64_t v18 = 0x1FFFFFFFFFFFFFFELL;
    if (Value) {
      uint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    long long v12 = &v15[v18];
  }
  uint64_t v19 = *v12;
  uint64_t v20 = 1;
  if (v14 != 0x8000000000000000)
  {
LABEL_24:
    if (v19 != 0x8000000000000000 && v14 != v19)
    {
      unint64_t v52 = (void **)"contracting dimensions differ ";
      __int16 v53 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, &v52, (uint64_t)v60);
      if (v60[0])
      {
        int v57 = 2;
        unsigned int v58 = (const char *)v14;
        uint64_t v22 = &v57;
        unint64_t v23 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v44 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v49 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
            unint64_t v23 = (char *)v61;
            uint64_t v22 = (int *)((char *)v61 + v49);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
            uint64_t v22 = &v57;
            unint64_t v23 = (char *)v61;
          }
        }
        uint64_t v24 = &v23[24 * v62];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        uint64_t v26 = ++v62;
        if (v60[0])
        {
          int v57 = 3;
          unsigned int v58 = " & ";
          uint64_t v59 = 3;
          uint64_t v27 = &v57;
          uint64_t v28 = (char *)v61;
          if (v26 >= v63)
          {
            unint64_t v45 = v26 + 1;
            BOOL v46 = (char *)v61 + 24 * v26 > (char *)&v57;
            if (v61 <= &v57 && v46)
            {
              int64_t v50 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
              uint64_t v28 = (char *)v61;
              uint64_t v27 = (int *)((char *)v61 + v50);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
              uint64_t v27 = &v57;
              uint64_t v28 = (char *)v61;
            }
          }
          uint64_t v29 = &v28[24 * v62];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          uint64_t v31 = ++v62;
          if (v60[0])
          {
            int v57 = 2;
            unsigned int v58 = (const char *)v19;
            char v32 = &v57;
            char v33 = (char *)v61;
            if (v31 >= v63)
            {
              unint64_t v47 = v31 + 1;
              BOOL v48 = (char *)v61 + 24 * v31 > (char *)&v57;
              if (v61 <= &v57 && v48)
              {
                int64_t v51 = (char *)&v57 - (unsigned char *)v61;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
                char v33 = (char *)v61;
                char v32 = (int *)((char *)v61 + v51);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
                char v32 = &v57;
                char v33 = (char *)v61;
              }
            }
            unint64_t v34 = &v33[24 * v62];
            long long v35 = *(_OWORD *)v32;
            *((void *)v34 + 2) = *((void *)v32 + 2);
            *(_OWORD *)unint64_t v34 = v35;
            ++v62;
          }
        }
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
      if (v69)
      {
        __int16 v36 = __p;
        if (__p)
        {
          unint64_t v37 = v68;
          uint64_t v38 = __p;
          if (v68 != __p)
          {
            do
              unint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            uint64_t v38 = __p;
          }
          long long v68 = v36;
          operator delete(v38);
        }
        uint64_t v39 = v65;
        if (v65)
        {
          uint64_t v40 = v66;
          uint64_t v41 = v65;
          if (v66 != v65)
          {
            do
            {
              uint64_t v43 = *--v40;
              uint64_t v42 = v43;
              *uint64_t v40 = 0;
              if (v43) {
                MEMORY[0x21667D390](v42, 0x1000C8077774924);
              }
            }
            while (v40 != v39);
            uint64_t v41 = v65;
          }
          uint64_t v66 = v39;
          operator delete(v41);
        }
        if (v61 != v64) {
          free(v61);
        }
      }
    }
  }
  return v20;
}

BOOL mlir::mps::MatMulOp::getTransposeRhs(mlir::mps::MatMulOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v3);
}

uint64_t mlir::mps::verifySparseTensorHelper(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void (*a7)(void *__return_ptr, uint64_t, void *), uint64_t a8)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v73 = a6;
  uint64_t v74 = a5;
  uint64_t v13 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
    int64_t v71 = v13;
    uint64_t v72 = v14;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
      return 1;
    }
  }
  else
  {
    int64_t v71 = 0;
    uint64_t v72 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
      return 1;
    }
  }
  uint64_t Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v71);
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v17 -= 8;
      if (!v17) {
        goto LABEL_9;
      }
    }
    return 1;
  }
LABEL_9:
  uint64_t v18 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v71) - 1;
  if (a4 == 2 && v74 != v18)
  {
    uint64_t v56 = "failed: sparse tensor shape is {0}x{1} while index_tensor1 shape is {2}";
    uint64_t v57 = 71;
    unsigned int v58 = &v66;
    uint64_t v59 = 3;
    uint64_t v60 = &unk_26C35C280;
    uint64_t v61 = &v74;
    unsigned int v62 = &unk_26C35C280;
    unsigned int v63 = &v73;
    uint64_t v64 = &unk_26C35C400;
    uint64_t v65 = &v71;
    uint64_t v66 = &v60;
    int64_t v67 = &v62;
    long long v68 = &v64;
    v69[0] = &v56;
    __int16 v70 = 263;
    a7(v75, a8, v69);
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
    if (v75[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
    }
    if (!v82) {
      return v19;
    }
    uint64_t v20 = __p;
    if (__p)
    {
      BOOL v21 = v81;
      uint64_t v22 = __p;
      if (v81 != __p)
      {
        do
          BOOL v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      uint64_t v81 = v20;
      operator delete(v22);
    }
    unint64_t v23 = v78;
    if (v78)
    {
      uint64_t v24 = v79;
      long long v25 = v78;
      if (v79 != v78)
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        long long v25 = v78;
      }
      uint64_t v79 = v23;
      operator delete(v25);
    }
    uint64_t v40 = v76;
    if (v76 == v77) {
      return v19;
    }
LABEL_66:
    free(v40);
    return v19;
  }
  if (a4 != 1 || v73 == v18)
  {
    __int16 v36 = (void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v36)
    {
      uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v36 + 8);
      uint64_t v54 = v36;
      uint64_t v55 = v37;
      uint64_t v38 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v38 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38)
      {
LABEL_43:
        uint64_t v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v38 + 8);
        unint64_t v52 = v38;
        uint64_t v53 = v39;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54))
        {
LABEL_51:
          uint64_t v41 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v54);
          if (v42)
          {
            uint64_t v43 = 8 * v42;
            while (*v41 != 0x8000000000000000)
            {
              ++v41;
              v43 -= 8;
              if (!v43) {
                goto LABEL_55;
              }
            }
          }
          else
          {
LABEL_55:
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
            {
              unint64_t v44 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v52);
              if (v45)
              {
                uint64_t v46 = 8 * v45;
                while (*v44 != 0x8000000000000000)
                {
                  ++v44;
                  v46 -= 8;
                  if (!v46) {
                    goto LABEL_60;
                  }
                }
              }
              else
              {
LABEL_60:
                uint64_t v47 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v54);
                if (v47 != *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v52))
                {
                  int64_t v49 = (const char *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
                  int64_t v50 = (const char *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
                  int64_t v51 = v49;
                  llvm::formatv<mlir::Type,mlir::Type>("failed: index_tensor0 and sparse_values shape mismatch, {0} and {1}", &v51, &v50, &v56);
                  __int16 v70 = 263;
                  v69[0] = &v56;
                  a7(v75, a8, v69);
                  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v75);
                  return v19;
                }
              }
            }
          }
        }
        return 1;
      }
    }
    unint64_t v52 = v38;
    uint64_t v53 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54)) {
      goto LABEL_51;
    }
    return 1;
  }
  uint64_t v56 = "failed: sparse tensor shape is {0}x{1} while index_tensor1 shape is {2}";
  uint64_t v57 = 71;
  unsigned int v58 = &v66;
  uint64_t v59 = 3;
  uint64_t v60 = &unk_26C35C280;
  uint64_t v61 = &v74;
  unsigned int v62 = &unk_26C35C280;
  unsigned int v63 = &v73;
  uint64_t v64 = &unk_26C35C400;
  uint64_t v65 = &v71;
  uint64_t v66 = &v60;
  int64_t v67 = &v62;
  long long v68 = &v64;
  v69[0] = &v56;
  __int16 v70 = 263;
  a7(v75, a8, v69);
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
  if (v75[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
  }
  if (v82)
  {
    uint64_t v28 = __p;
    if (__p)
    {
      uint64_t v29 = v81;
      long long v30 = __p;
      if (v81 != __p)
      {
        do
          uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        long long v30 = __p;
      }
      uint64_t v81 = v28;
      operator delete(v30);
    }
    uint64_t v31 = v78;
    if (v78)
    {
      char v32 = v79;
      char v33 = v78;
      if (v79 != v78)
      {
        do
        {
          uint64_t v35 = *--v32;
          uint64_t v34 = v35;
          *char v32 = 0;
          if (v35) {
            MEMORY[0x21667D390](v34, 0x1000C8077774924);
          }
        }
        while (v32 != v31);
        char v33 = v78;
      }
      uint64_t v79 = v31;
      operator delete(v33);
    }
    uint64_t v40 = v76;
    if (v76 != v77) {
      goto LABEL_66;
    }
  }
  return v19;
}

const char *llvm::formatv<mlir::Type,mlir::Type>@<X0>(const char *__s@<X0>, const char **a2@<X1>, const char **a3@<X2>, const char **a4@<X8>)
{
  unint64_t v6 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  *a4 = v6;
  a4[1] = __s;
  a4[8] = (const char *)(a4 + 4);
  a4[2] = (const char *)(a4 + 8);
  a4[3] = (const char *)2;
  a4[4] = (const char *)&unk_26C35C3A0;
  a4[5] = v8;
  a4[6] = (const char *)&unk_26C35C3A0;
  a4[7] = v9;
  a4[9] = (const char *)(a4 + 6);
  return __s;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::verify(mlir::mps::MaterializeSparseTensorOp *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v2 = *(void *)this - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  v26[0] = v3;
  v26[1] = v4;
  uint64_t Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
  uint64_t v6 = *Shape;
  uint64_t v7 = Shape[1];
  uint64_t v8 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && (unint64_t)*(unsigned int *)(v8 + 68) - 1 <= 1)
  {
    uint64_t v24 = (void **)"failure: expected at least two operands to represent COO, CSR or CSC sparse formats.";
    __int16 v25 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v24, (uint64_t)v26);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v10 = __p;
      if (__p)
      {
        uint64_t v11 = v32;
        long long v12 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          long long v12 = __p;
        }
        char v32 = v10;
        operator delete(v12);
      }
      uint64_t v13 = v29;
      if (v29)
      {
        uint64_t v14 = v30;
        uint64_t v15 = v29;
        if (v30 != v29)
        {
          do
          {
            uint64_t v17 = *--v14;
            uint64_t v16 = v17;
            *uint64_t v14 = 0;
            if (v17) {
              MEMORY[0x21667D390](v16, 0x1000C8077774924);
            }
          }
          while (v14 != v13);
          uint64_t v15 = v29;
        }
        long long v30 = v13;
        operator delete(v15);
      }
      if (v27 != &v28) {
        free(v27);
      }
    }
  }
  else
  {
    uint64_t v18 = *(void **)(v8 + 72);
    uint64_t v19 = v18[3];
    uint64_t v20 = v18[7];
    uint64_t v21 = v18[11];
    int v22 = *(_DWORD *)(*(void *)(v8 + 80) + 8);
    v26[0] = this;
    return mlir::mps::verifySparseTensorHelper(v19, v20, v21, v22, v6, v7, (void (*)(void *__return_ptr, uint64_t, void *))llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mps::MaterializeSparseTensorOp::verify(void)::$_0>, (uint64_t)v26);
  }
  return v9;
}

uint64_t mlir::mps::HammingDistanceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v68[4] = *MEMORY[0x263EF8340];
  uint64_t v64 = a4;
  unint64_t v65 = a5;
  if (a7) {
    uint64_t v14 = *a7;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v56 = a6;
  v57[0] = 0;
  char v58 = 0;
  uint64_t v59 = v14;
  uint64_t v60 = a9;
  unint64_t v15 = a5;
  uint64_t v61 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58) {
      char v58 = 0;
    }
    mlir::OperationName::OperationName(v57, "mps.hamming_distance", 20, Context);
    char v58 = 1;
    unint64_t v15 = v65;
  }
  uint64_t v62 = a4;
  unint64_t v63 = a5;
  if (v15 >= 2)
  {
    uint64_t v17 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::HammingDistanceOpAdaptor::verify((uint64_t)&v56, v17))
    {
      uint64_t v51 = v59;
      uint64_t Value = mlir::IntegerType::get((uint64_t)this, 0x20u, 2u);
      if (v51) {
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
      }
      uint64_t v19 = Value;
      unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(&v64, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v21 = mlir::ValueRange::dereference_iterator(&v64, 1);
      if (*(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        goto LABEL_32;
      }
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v20 + 8))
      {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v20 + 8);
        unint64_t v54 = v20;
        uint64_t v55 = v23;
        uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
        if (v24) {
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v20 = 0;
        unint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
        if (v24)
        {
LABEL_16:
          uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
          unint64_t v52 = v22;
          uint64_t v53 = v25;
          if (!v20) {
            goto LABEL_32;
          }
LABEL_25:
          if (v22)
          {
            uint64_t v66 = v68;
            uint64_t v67 = 0x400000000;
            uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v54);
            unint64_t v32 = v31;
            uint64_t v33 = mlir::ShapedType::getShape((mlir::ShapedType *)&v52);
            uint64_t v35 = v33;
            unint64_t v36 = v34;
            if (v32 <= v34) {
              unint64_t v37 = v34;
            }
            else {
              unint64_t v37 = v32;
            }
            if (v32 < 2)
            {
              uint64_t v38 = 1;
              if (v34 < 2) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v38 = *(void *)(Shape + 8 * v32 - 16);
              if (v34 < 2)
              {
LABEL_31:
                uint64_t v39 = 1;
LABEL_39:
                uint64_t v43 = v67;
                if (v37 != v67)
                {
                  if (v37 >= v67)
                  {
                    if (v37 > HIDWORD(v67))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v37, 8);
                      uint64_t v43 = v67;
                    }
                    if (v37 != v43) {
                      bzero((char *)v66 + 8 * v43, 8 * (v37 - v43));
                    }
                  }
                  LODWORD(v67) = v37;
                  LODWORD(v43) = v37;
                }
                unint64_t v44 = v66;
                if ((uint64_t)v37 >= 1)
                {
                  uint64_t v45 = (char *)v66 + 8 * v37;
                  *((void *)v45 - 1) = v39;
                  if (v37 != 1)
                  {
                    *((void *)v45 - 2) = v38;
                    if (v37 >= 3)
                    {
                      unint64_t v46 = v36 - 3;
                      unint64_t v47 = v32 - 3;
                      do
                      {
                        if ((v47 & 0x8000000000000000) != 0)
                        {
                          if ((v46 & 0x8000000000000000) != 0) {
                            uint64_t v48 = 1;
                          }
                          else {
                            uint64_t v48 = *(void *)(v35 + 8 * v46);
                          }
                        }
                        else
                        {
                          uint64_t v48 = *(void *)(Shape + 8 * v47);
                          if ((v46 & 0x8000000000000000) == 0)
                          {
                            if (v48 == 0x8000000000000000) {
                              uint64_t v50 = *(void *)(v35 + 8 * v46);
                            }
                            else {
                              uint64_t v50 = *(void *)(Shape + 8 * v47);
                            }
                            if (*(void *)(v35 + 8 * v46) == 1) {
                              uint64_t v50 = *(void *)(Shape + 8 * v47);
                            }
                            if (v48 == 1) {
                              uint64_t v48 = *(void *)(v35 + 8 * v46);
                            }
                            else {
                              uint64_t v48 = v50;
                            }
                          }
                        }
                        v44[v37 - 3] = v48;
                        --v46;
                        uint64_t v49 = v37 - 3;
                        --v37;
                        --v47;
                      }
                      while (v49 > 0);
                    }
                  }
                }
                uint64_t v40 = mlir::RankedTensorType::get((uint64_t)v44, v43, v19, 0);
                if (v66 != v68) {
                  free(v66);
                }
                goto LABEL_33;
              }
            }
            uint64_t v39 = *(void *)(v33 + 8 * v34 - 16);
            goto LABEL_39;
          }
LABEL_32:
          uint64_t v40 = mlir::UnrankedTensorType::get(v19);
LABEL_33:
          uint64_t v41 = *(unsigned int *)(a11 + 8);
          if (v41 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
            LODWORD(v41) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v41) = v40;
          goto LABEL_36;
        }
      }
      unint64_t v22 = 0;
      unint64_t v52 = 0;
      uint64_t v53 = v24;
      if (!v20) {
        goto LABEL_32;
      }
      goto LABEL_25;
    }
  }
  uint64_t v26 = mlir::IntegerType::get((uint64_t)this, 0x20u, 2u);
  if (!v26) {
    uint64_t v26 = mlir::Float32Type::get(this, v27);
  }
  uint64_t v28 = mlir::UnrankedTensorType::get(v26);
  unsigned int v29 = *(_DWORD *)(a11 + 8);
  if (v29 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
    unsigned int v29 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v29) = v28;
LABEL_36:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::HammingDistanceOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24))
  {
    v14[0] = *(void *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    long long v12 = "'mps.hamming_distance' op requires attribute 'resultElementType'";
    __int16 v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v4 = __p;
      if (__p)
      {
        uint64_t v5 = v20;
        uint64_t v6 = __p;
        if (v20 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        unint64_t v20 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v17;
      if (v17)
      {
        uint64_t v8 = v18;
        uint64_t v9 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v11 = *--v8;
            uint64_t v10 = v11;
            *uint64_t v8 = 0;
            if (v11) {
              MEMORY[0x21667D390](v10, 0x1000C8077774924);
            }
          }
          while (v8 != v7);
          uint64_t v9 = v17;
        }
        uint64_t v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v2;
}

uint64_t mlir::mps::HammingDistanceOp::verify(mlir::mps::HammingDistanceOp *this)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  v79[0] = *(void *)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v79);
  BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&Value);
  int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value);
  if (!isSignedInteger && (IntOrFloatBitWidth == 16 || IntOrFloatBitWidth == 32))
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    unint64_t v5 = *(void *)(*(void *)(v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v5 + 8);
      uint64_t v7 = *(void *)(*(void *)this + 72);
      unint64_t v71 = v5;
      uint64_t v72 = v6;
      unint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v8) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v71 = 0;
      uint64_t v72 = 0;
      unint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
LABEL_6:
        uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v8 + 8);
        unint64_t v5 = v71;
        unint64_t v69 = v8;
        uint64_t v70 = v9;
        if (!v71) {
          return 1;
        }
        goto LABEL_24;
      }
    }
    unint64_t v69 = v8;
    uint64_t v70 = 0;
    if (!v5) {
      return 1;
    }
LABEL_24:
    BOOL v19 = *(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
       || v8 == 0;
    if (v19
      || *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      return 1;
    }
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v71);
    unint64_t v22 = v21;
    uint64_t v23 = mlir::ShapedType::getShape((mlir::ShapedType *)&v69);
    if (v22 <= v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = v22;
    }
    if (v22)
    {
      uint64_t v26 = *(void *)(Shape + 8 * v22 - 8);
      if (v24) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v26 = 1;
      if (v24)
      {
LABEL_34:
        uint64_t v27 = *(void *)(v23 + 8 * v24 - 8);
        if (v27 == 0x8000000000000000)
        {
LABEL_41:
          if (v25 < 3) {
            return 1;
          }
          uint64_t v31 = v25 - 2;
          unint64_t v32 = v22 - 3;
          for (unint64_t i = v24 - 3; ; --i)
          {
            if ((v32 & 0x8000000000000000) != 0)
            {
              uint64_t v34 = 1;
              if ((i & 0x8000000000000000) == 0)
              {
LABEL_47:
                uint64_t v35 = *(void *)(v23 + 8 * i);
                if (v34 == 0x8000000000000000) {
                  goto LABEL_44;
                }
                goto LABEL_51;
              }
            }
            else
            {
              uint64_t v34 = *(void *)(Shape + 8 * v32);
              if ((i & 0x8000000000000000) == 0) {
                goto LABEL_47;
              }
            }
            uint64_t v35 = 1;
            if (v34 == 0x8000000000000000) {
              goto LABEL_44;
            }
LABEL_51:
            if (v35 != 1 && v35 != 0x8000000000000000 && v34 != 1 && v34 != v35)
            {
              v73[0] = (void **)"Leading n-2 dimensions not broadcast compatible: ";
              __int16 v74 = 259;
              mlir::OpState::emitOpError((uint64_t *)this, v73, (uint64_t)v79);
              if (v79[0])
              {
                int v76 = 3;
                uint64_t v77 = "LHS = ";
                uint64_t v78 = 6;
                unint64_t v36 = &v76;
                unint64_t v37 = (char *)v80;
                if (v81 >= v82)
                {
                  unint64_t v60 = v81 + 1;
                  if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                  {
                    int64_t v65 = (char *)&v76 - (unsigned char *)v80;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                    unint64_t v37 = (char *)v80;
                    unint64_t v36 = (int *)((char *)v80 + v65);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                    unint64_t v36 = &v76;
                    unint64_t v37 = (char *)v80;
                  }
                }
                uint64_t v38 = &v37[24 * v81];
                long long v39 = *(_OWORD *)v36;
                *((void *)v38 + 2) = *((void *)v36 + 2);
                *(_OWORD *)uint64_t v38 = v39;
                ++v81;
                if (v79[0])
                {
                  uint64_t v40 = &v76;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v71);
                  uint64_t v41 = (char *)v80;
                  if (v81 >= v82)
                  {
                    unint64_t v61 = v81 + 1;
                    if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                    {
                      int64_t v66 = (char *)&v76 - (unsigned char *)v80;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
                      uint64_t v41 = (char *)v80;
                      uint64_t v40 = (int *)((char *)v80 + v66);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
                      uint64_t v40 = &v76;
                      uint64_t v41 = (char *)v80;
                    }
                  }
                  uint64_t v42 = &v41[24 * v81];
                  long long v43 = *(_OWORD *)v40;
                  *((void *)v42 + 2) = *((void *)v40 + 2);
                  *(_OWORD *)uint64_t v42 = v43;
                  uint64_t v44 = ++v81;
                  if (v79[0])
                  {
                    int v76 = 3;
                    uint64_t v77 = " RHS = ";
                    uint64_t v78 = 7;
                    uint64_t v45 = &v76;
                    unint64_t v46 = (char *)v80;
                    if (v44 >= v82)
                    {
                      unint64_t v62 = v44 + 1;
                      BOOL v63 = (char *)v80 + 24 * v44 > (char *)&v76;
                      if (v80 <= &v76 && v63)
                      {
                        int64_t v67 = (char *)&v76 - (unsigned char *)v80;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                        unint64_t v46 = (char *)v80;
                        uint64_t v45 = (int *)((char *)v80 + v67);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                        uint64_t v45 = &v76;
                        unint64_t v46 = (char *)v80;
                      }
                    }
                    unint64_t v47 = &v46[24 * v81];
                    long long v48 = *(_OWORD *)v45;
                    *((void *)v47 + 2) = *((void *)v45 + 2);
                    *(_OWORD *)unint64_t v47 = v48;
                    ++v81;
                    if (v79[0])
                    {
                      uint64_t v49 = &v76;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v69);
                      uint64_t v50 = (char *)v80;
                      if (v81 >= v82)
                      {
                        unint64_t v64 = v81 + 1;
                        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                        {
                          int64_t v68 = (char *)&v76 - (unsigned char *)v80;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                          uint64_t v50 = (char *)v80;
                          uint64_t v49 = (int *)((char *)v80 + v68);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                          uint64_t v49 = &v76;
                          uint64_t v50 = (char *)v80;
                        }
                      }
                      uint64_t v51 = &v50[24 * v81];
                      long long v52 = *(_OWORD *)v49;
                      *((void *)v51 + 2) = *((void *)v49 + 2);
                      *(_OWORD *)uint64_t v51 = v52;
                      ++v81;
                    }
                  }
                }
              }
              uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
              if (v79[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
              }
              if (v88)
              {
                uint64_t v53 = __p;
                if (__p)
                {
                  unint64_t v54 = v87;
                  uint64_t v55 = __p;
                  if (v87 != __p)
                  {
                    do
                      unint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                    while (v54 != v53);
                    uint64_t v55 = __p;
                  }
                  int64_t v87 = v53;
                  operator delete(v55);
                }
                uint64_t v14 = v84;
                if (v84)
                {
                  uint64_t v56 = v85;
                  uint64_t v16 = v84;
                  if (v85 == v84)
                  {
LABEL_79:
                    unsigned __int8 v85 = v14;
                    operator delete(v16);
                    goto LABEL_80;
                  }
                  do
                  {
                    uint64_t v58 = *--v56;
                    uint64_t v57 = v58;
                    void *v56 = 0;
                    if (v58) {
                      MEMORY[0x21667D390](v57, 0x1000C8077774924);
                    }
                  }
                  while (v56 != v14);
LABEL_78:
                  uint64_t v16 = v84;
                  goto LABEL_79;
                }
                goto LABEL_80;
              }
              return v10;
            }
LABEL_44:
            --v31;
            --v32;
            if (v31 < 1) {
              return 1;
            }
          }
        }
LABEL_38:
        if (v26 != 0x8000000000000000 && v26 != v27)
        {
          v73[0] = (void **)"Incompatible last dimension shapes: LHS = ";
          __int16 v74 = 259;
          mlir::OpState::emitOpError((uint64_t *)this, v73, (uint64_t)v79);
          uint64_t v28 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)v79, (uint64_t *)&v71);
          uint64_t v29 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v28, " RHS = ");
          uint64_t v30 = mlir::InFlightDiagnostic::append<mlir::Type &>(v29, (uint64_t *)&v69);
          uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v30);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v79);
          return v10;
        }
        goto LABEL_41;
      }
    }
    uint64_t v27 = 1;
    goto LABEL_38;
  }
  __int16 v74 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v73, (uint64_t)v79);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
  if (v79[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
  }
  if (v88)
  {
    uint64_t v11 = __p;
    if (__p)
    {
      long long v12 = v87;
      __int16 v13 = __p;
      if (v87 != __p)
      {
        do
          long long v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        __int16 v13 = __p;
      }
      int64_t v87 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v84;
    if (v84)
    {
      unint64_t v15 = v85;
      uint64_t v16 = v84;
      if (v85 == v84) {
        goto LABEL_79;
      }
      do
      {
        uint64_t v18 = *--v15;
        uint64_t v17 = v18;
        *unint64_t v15 = 0;
        if (v18) {
          MEMORY[0x21667D390](v17, 0x1000C8077774924);
        }
      }
      while (v15 != v14);
      goto LABEL_78;
    }
LABEL_80:
    if (v80 != v83) {
      free(v80);
    }
  }
  return v10;
}